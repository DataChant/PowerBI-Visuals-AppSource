var scatterChartByAkvelon6CFB0DAB29E746BE850B6DFD1E2789FD;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/axesPropertiesUtils.ts":
/*!************************************!*\
  !*** ./src/axesPropertiesUtils.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefaultColor": () => (/* binding */ DefaultColor),
/* harmony export */   "getCategoryAxisProperties": () => (/* binding */ getCategoryAxisProperties),
/* harmony export */   "getValueAxisProperties": () => (/* binding */ getValueAxisProperties),
/* harmony export */   "getXConstantLineProperties": () => (/* binding */ getXConstantLineProperties),
/* harmony export */   "getYConstantLineProperties": () => (/* binding */ getYConstantLineProperties),
/* harmony export */   "setCategoryAxisProperties": () => (/* binding */ setCategoryAxisProperties),
/* harmony export */   "setValueAxisProperties": () => (/* binding */ setValueAxisProperties),
/* harmony export */   "setXConstantLineProperties": () => (/* binding */ setXConstantLineProperties),
/* harmony export */   "setYConstantLineProperties": () => (/* binding */ setYConstantLineProperties)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js");
/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./properties */ "./src/properties.ts");


var DefaultFontFamily = '"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif';
var DefaultTitleFontSize = '11';
var DefaultGridlinesColor = '#eaeaea';
var DefaultAxesColor = '#777777';
var DefaultAxisTitle = '';
var DefaultAxisLineStyle = 'solid';
var DefaultColor = '#777777';
var DefaultStrokeWidth = 1;
var DefaultAxisScale = 'linear';
var DefaultConstantLineValue = 0;
var DefaultConstantLineShow = false;
function getCategoryAxisProperties(dataViewMetadata, axisTitleOnByDefault) {
  var dataViewObject = {};
  if (!dataViewMetadata) {
    return dataViewObject;
  }
  var objects = dataViewMetadata.objects;
  if (objects) {
    var categoryAxisObject = objects['categoryAxis'];
    if (categoryAxisObject) {
      dataViewObject = {
        show: categoryAxisObject['show'],
        axisScale: categoryAxisObject['axisScale'],
        axisColor: categoryAxisObject['axisColor'],
        axisTitle: categoryAxisObject['axisTitle'],
        start: categoryAxisObject['start'],
        end: categoryAxisObject['end'],
        showAxisTitle: categoryAxisObject['showAxisTitle'] == null ? axisTitleOnByDefault : categoryAxisObject['showAxisTitle'],
        axisStyle: categoryAxisObject['axisStyle'],
        labelDisplayUnits: categoryAxisObject['labelDisplayUnits'],
        valueDecimalPlaces: categoryAxisObject['valueDecimalPlaces'],
        fontSize: categoryAxisObject['fontSize'],
        fontFamily: categoryAxisObject['fontFamily'],
        titleFontSize: categoryAxisObject['titleFontSize'],
        gridlinesColor: categoryAxisObject['gridlinesColor'],
        axisTitleColor: categoryAxisObject['axisTitleColor'],
        strokeWidth: categoryAxisObject['strokeWidth']
      };
    }
  }
  return dataViewObject;
}
function getValueAxisProperties(dataViewMetadata, axisTitleOnByDefault) {
  var dataViewObject = {};
  if (!dataViewMetadata) {
    return dataViewObject;
  }
  var objects = dataViewMetadata.objects;
  if (objects) {
    var valueAxisObject = objects['valueAxis'];
    if (valueAxisObject) {
      dataViewObject = {
        show: valueAxisObject['show'],
        axisScale: valueAxisObject['axisScale'],
        axisColor: valueAxisObject['axisColor'],
        axisTitle: valueAxisObject['axisTitle'],
        start: valueAxisObject['start'],
        end: valueAxisObject['end'],
        showAxisTitle: valueAxisObject['showAxisTitle'] == null ? axisTitleOnByDefault : valueAxisObject['showAxisTitle'],
        axisStyle: valueAxisObject['axisStyle'],
        labelDisplayUnits: valueAxisObject['labelDisplayUnits'],
        valueDecimalPlaces: valueAxisObject['valueDecimalPlaces'],
        fontSize: valueAxisObject['fontSize'],
        fontFamily: valueAxisObject['fontFamily'],
        titleFontSize: valueAxisObject['titleFontSize'],
        gridlinesColor: valueAxisObject['gridlinesColor'],
        axisTitleColor: valueAxisObject['axisTitleColor'],
        strokeWidth: valueAxisObject['strokeWidth']
      };
    }
  }
  return dataViewObject;
}
function setCategoryAxisProperties(categoryAxisProperties) {
  var objects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  categoryAxisProperties.show = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.show, true);
  categoryAxisProperties.axisColor = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getFillColor(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.axisColor, DefaultAxesColor);
  if (categoryAxisProperties.axisTitleColor === undefined) {
    categoryAxisProperties.axisTitleColor = categoryAxisProperties.axisColor;
  } else {
    categoryAxisProperties.axisTitleColor = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getFillColor(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.axisTitleColor, DefaultAxesColor);
  }
  categoryAxisProperties.fontSize = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.fontSize, DefaultTitleFontSize);
  categoryAxisProperties.fontFamily = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.fontFamily, DefaultFontFamily);
  categoryAxisProperties.valueDecimalPlaces = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.valueDecimalPlaces);
  categoryAxisProperties.start = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.start, undefined);
  categoryAxisProperties.end = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.end, undefined);
  categoryAxisProperties.axisScale = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.axisScale, DefaultAxisScale);
  categoryAxisProperties.showAxisTitle = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.showAxisTitle, true);
  categoryAxisProperties.titleFontSize = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.titleFontSize, DefaultTitleFontSize);
  categoryAxisProperties.gridlinesColor = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getFillColor(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.gridlinesColor, DefaultGridlinesColor);
  categoryAxisProperties.strokeWidth = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.strokeWidth, DefaultStrokeWidth);
  categoryAxisProperties.axisTitle = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.axisTitle, DefaultAxisTitle);
  categoryAxisProperties.showGridlines = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.showGridlines, true);
  categoryAxisProperties.lineStyle = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.categoryAxis.lineStyle, DefaultAxisLineStyle);
}
function setValueAxisProperties(valueAxisProperties) {
  var objects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  valueAxisProperties.show = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.show, true);
  valueAxisProperties.axisColor = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getFillColor(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.axisColor, DefaultAxesColor);
  if (valueAxisProperties.axisTitleColor === undefined) {
    valueAxisProperties.axisTitleColor = valueAxisProperties.axisColor;
  } else {
    valueAxisProperties.axisTitleColor = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getFillColor(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.axisTitleColor, DefaultAxesColor);
  }
  valueAxisProperties.fontSize = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.fontSize, DefaultTitleFontSize);
  valueAxisProperties.fontFamily = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.fontFamily, DefaultFontFamily);
  valueAxisProperties.valueDecimalPlaces = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.valueDecimalPlaces);
  valueAxisProperties.start = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.start, undefined);
  valueAxisProperties.end = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.end, undefined);
  valueAxisProperties.axisScale = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.axisScale, DefaultAxisScale);
  valueAxisProperties.showAxisTitle = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.showAxisTitle, true);
  valueAxisProperties.titleFontSize = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.titleFontSize, DefaultTitleFontSize);
  valueAxisProperties.gridlinesColor = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getFillColor(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.gridlinesColor, DefaultGridlinesColor);
  valueAxisProperties.strokeWidth = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.strokeWidth, DefaultStrokeWidth);
  valueAxisProperties.axisTitle = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.axisTitle, DefaultAxisTitle);
  valueAxisProperties.showGridlines = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.showGridlines, true);
  valueAxisProperties.lineStyle = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.valueAxis.lineStyle, DefaultAxisLineStyle);
}
function getXConstantLineProperties(dataViewMetadata) {
  var dataViewObject = {};
  if (!dataViewMetadata) {
    return dataViewObject;
  }
  var objects = dataViewMetadata.objects;
  if (objects) {
    var xConstantLineObject = objects['xConstantLine'];
    if (xConstantLineObject) {
      dataViewObject = {
        show: xConstantLineObject['show'],
        value: xConstantLineObject['value'],
        color: xConstantLineObject['color']
      };
    }
  }
  return dataViewObject;
}
function getYConstantLineProperties(dataViewMetadata) {
  var dataViewObject = {};
  if (!dataViewMetadata) {
    return dataViewObject;
  }
  var objects = dataViewMetadata.objects;
  if (objects) {
    var yConstantLineObject = objects['yConstantLine'];
    if (yConstantLineObject) {
      dataViewObject = {
        show: yConstantLineObject['show'],
        value: yConstantLineObject['value'],
        color: yConstantLineObject['color']
      };
    }
  }
  return dataViewObject;
}
function setXConstantLineProperties(xConstantLineProperties) {
  var objects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  xConstantLineProperties.show = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.xConstantLine.show, DefaultConstantLineShow);
  xConstantLineProperties.value = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.xConstantLine.value, DefaultConstantLineValue);
  xConstantLineProperties.color = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getFillColor(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.xConstantLine.color, DefaultColor);
}
function setYConstantLineProperties(yConstantLineProperties) {
  var objects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  yConstantLineProperties.show = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.yConstantLine.show, DefaultConstantLineShow);
  yConstantLineProperties.value = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.yConstantLine.value, DefaultConstantLineValue);
  yConstantLineProperties.color = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getFillColor(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.yConstantLine.color, DefaultColor);
}

/***/ }),

/***/ "./src/categoryUtils.ts":
/*!******************************!*\
  !*** ./src/categoryUtils.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "findIndex": () => (/* binding */ findIndex),
/* harmony export */   "getCategories": () => (/* binding */ getCategories),
/* harmony export */   "getDefinedNumberByCategoryId": () => (/* binding */ getDefinedNumberByCategoryId),
/* harmony export */   "getValueFromDataViewValueColumnById": () => (/* binding */ getValueFromDataViewValueColumnById)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js");

function findIndex(array, condition) {
  for (var ix = 0; ix < array.length; ix++) {
    if (condition(array[ix])) {
      return ix;
    }
  }
  return -1;
}
function getCategories(dataView) {
  if (!dataView.categorical || !dataView.categorical.categories || !dataView.categorical.categories.length || !dataView.categorical.categories[0].values || !dataView.categorical.values || !dataView.categorical.values.length) {
    return;
  }
  var data = {
    title: '',
    categories: {}
  };
  // Find a metadata column for a legend
  var legendIndex = findIndex(dataView.metadata.columns, function (col) {
    return powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__.hasRole(col, 'Legend');
  });
  // If column is present, parse information about categories
  if (legendIndex !== -1) {
    // Read a name of legend field
    data.title = dataView.metadata.columns[legendIndex].displayName;
    // Build an array of categories from column groups
    var groupedValues = dataView.categorical.values.grouped();
    groupedValues.forEach(function (group) {
      var column = {
        values: [],
        source: {
          displayName: '',
          queryName: dataView.metadata.columns[legendIndex].queryName
        },
        objects: undefined
      };
      data.categories[group.name] = {
        name: group.name,
        selectionColumn: column,
        columnGroup: group
      };
    });
  }
  return data;
}
function getDefinedNumberByCategoryId(column, index) {
  return column && column.values && !(column.values[index] === null) && !isNaN(column.values[index]) ? Number(column.values[index]) : null;
}
function getValueFromDataViewValueColumnById(dataViewValueColumn, index) {
  return dataViewValueColumn && dataViewValueColumn.objects ? dataViewValueColumn.objects[index] : null;
}

/***/ }),

/***/ "./src/formatPaneUtils.ts":
/*!********************************!*\
  !*** ./src/formatPaneUtils.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPointsTransparencyProperties": () => (/* binding */ getPointsTransparencyProperties),
/* harmony export */   "getSelectionColorSettings": () => (/* binding */ getSelectionColorSettings),
/* harmony export */   "getSelectionSaveSettings": () => (/* binding */ getSelectionSaveSettings),
/* harmony export */   "getShapesSizeProperty": () => (/* binding */ getShapesSizeProperty),
/* harmony export */   "setPointsTransparencyProperty": () => (/* binding */ setPointsTransparencyProperty),
/* harmony export */   "setSelectionColorProperty": () => (/* binding */ setSelectionColorProperty),
/* harmony export */   "setSelectionSaveProperty": () => (/* binding */ setSelectionSaveProperty)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js");
/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./properties */ "./src/properties.ts");


var DefaultSelectedPointsTransparency = 0;
var DefaultRegularPointsTransparency = 20;
var DefaultUnselectedPointsTransparency = 70;
var DefaultSelection = '[]';
var DefaultSelectionColor = '#777777';
function getShapesSizeProperty(dataViewMetadata) {
  var dataViewObject = {};
  if (!dataViewMetadata) {
    return dataViewObject;
  }
  var objects = dataViewMetadata.objects;
  if (objects) {
    var shapesSizeObject = objects['shapesSize'];
    if (shapesSizeObject) {
      dataViewObject = {
        size: shapesSizeObject['size']
      };
    }
  }
  return dataViewObject;
}
function getPointsTransparencyProperties(dataViewMetadata) {
  var dataViewObject = {};
  if (!dataViewMetadata) {
    return dataViewObject;
  }
  var objects = dataViewMetadata.objects;
  if (objects) {
    var pointsTransparencyObject = objects['pointsTransparency'];
    if (pointsTransparencyObject) {
      dataViewObject = {
        selected: pointsTransparencyObject['selected'],
        regular: pointsTransparencyObject['regular'],
        unselected: pointsTransparencyObject['unselected']
      };
    }
  }
  return dataViewObject;
}
function getSelectionSaveSettings(dataViewMetadata) {
  var dataViewObject = {
    selection: []
  };
  if (!dataViewMetadata) {
    return dataViewObject;
  }
  var objects = dataViewMetadata.objects;
  if (objects) {
    var selectionSaveObject = objects['selectionSaveSettings'];
    if (selectionSaveObject) {
      dataViewObject = {
        selection: JSON.parse(selectionSaveObject['selection'] || DefaultSelection)
      };
    }
  }
  return dataViewObject;
}
function setPointsTransparencyProperty(pointsTransparencyProperties) {
  var objects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  pointsTransparencyProperties.selected = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.pointsTransparency.selected, DefaultSelectedPointsTransparency);
  pointsTransparencyProperties.regular = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.pointsTransparency.regular, DefaultRegularPointsTransparency);
  pointsTransparencyProperties.unselected = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.pointsTransparency.unselected, DefaultUnselectedPointsTransparency);
}
function setSelectionSaveProperty(selectionSaveProperties) {
  var objects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  selectionSaveProperties.selection = JSON.parse(powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.selectionSaveSettings.selection, DefaultSelection));
}
function getSelectionColorSettings(dataViewMetadata) {
  var dataViewObject = {};
  if (!dataViewMetadata) {
    return dataViewObject;
  }
  var objects = dataViewMetadata.objects;
  if (objects) {
    var selectionColorObject = objects['selectionColor'];
    if (selectionColorObject) {
      dataViewObject = {
        fillColor: selectionColorObject['fillColor']
      };
    }
  }
  return dataViewObject;
}
function setSelectionColorProperty(selectionColorProperties) {
  var objects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  selectionColorProperties.fillColor = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_1__.getFillColor(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.selectionColor.fillColor, DefaultSelectionColor);
}

/***/ }),

/***/ "./src/gradientUtils.ts":
/*!******************************!*\
  !*** ./src/gradientUtils.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getGradientMeasureIndex": () => (/* binding */ getGradientMeasureIndex),
/* harmony export */   "hasGradientRole": () => (/* binding */ hasGradientRole)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js");

var GradientCategoryName = 'Gradient';
function getGradientMeasureIndex(dataViewCategorical) {
  if (dataViewCategorical && dataViewCategorical.values && dataViewCategorical.values.grouped) {
    return (0,powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.getMeasureIndexOfRole)(dataViewCategorical.values.grouped(), GradientCategoryName);
  }
  return -1;
}
function hasGradientRole(dataViewCategorical) {
  return getGradientMeasureIndex(dataViewCategorical) >= 0;
}

/***/ }),

/***/ "./src/labelLayoutUtils.ts":
/*!*********************************!*\
  !*** ./src/labelLayoutUtils.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataLabelXOffset": () => (/* binding */ DataLabelXOffset),
/* harmony export */   "DataLabelYOffset": () => (/* binding */ DataLabelYOffset),
/* harmony export */   "DefaultPosition": () => (/* binding */ DefaultPosition),
/* harmony export */   "LabelMargin": () => (/* binding */ LabelMargin),
/* harmony export */   "bindLabelLayout": () => (/* binding */ bindLabelLayout),
/* harmony export */   "getAngle": () => (/* binding */ getAngle),
/* harmony export */   "getDefinedNumberValue": () => (/* binding */ getDefinedNumberValue),
/* harmony export */   "getLabelDelta": () => (/* binding */ getLabelDelta),
/* harmony export */   "getVisualLabelLayout": () => (/* binding */ getVisualLabelLayout),
/* harmony export */   "setDatapointVisibleAngleRange": () => (/* binding */ setDatapointVisibleAngleRange),
/* harmony export */   "showLabelBackground": () => (/* binding */ showLabelBackground)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./src/utils.ts");
/* harmony import */ var powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils/lib/cssConstants */ "./node_modules/powerbi-visuals-utils-svgutils/lib/cssConstants.js");
/* harmony import */ var powerbi_visuals_utils_chartutils_lib_dataLabel_dataLabelUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelUtils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelUtils.js");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js");
/* harmony import */ var powerbi_visuals_utils_svgutils_lib_manipulation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils/lib/manipulation */ "./node_modules/powerbi-visuals-utils-svgutils/lib/manipulation.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





var DefaultPosition = 0;
var LabelMargin = 5;
var DataLabelXOffset = 2;
var DataLabelYOffset = 1.8;
var DataLabelBorderRadius = 4;
var DataLabelBackgroundOffset = 5;
var Selectors = /*#__PURE__*/_createClass(function Selectors() {
  _classCallCheck(this, Selectors);
});
Selectors.LabelBackgroundGroup = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_1__.createClassAndSelector)('labelBackgroundGroup');
Selectors.LabelBackground = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_1__.createClassAndSelector)('labelBackground');
function getVisualLabelLayout(labelSettings, viewport, sizeScale, axes, shapesSize) {
  var xScale = axes.x.scale,
    yScale = axes.y.scale,
    fontSizeInPx = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_2__.fromPoint(labelSettings.fontSize || 14),
    fontFamily = labelSettings.fontFamily;
  return {
    labelText: function labelText(dataPoint) {
      return (0,powerbi_visuals_utils_chartutils_lib_dataLabel_dataLabelUtils__WEBPACK_IMPORTED_MODULE_3__.getLabelFormattedText)({
        label: dataPoint.formattedCategory(),
        fontSize: labelSettings.fontSize,
        maxWidth: viewport.width
      });
    },
    labelLayout: {
      x: function x(dataPoint) {
        var radius = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getBubbleRadius)(dataPoint.radius.value, viewport, sizeScale, shapesSize);
        var x = dataPoint.x !== null ? xScale(dataPoint.x) : viewport.width / 2;
        var angle = dataPoint.labelAnglePosition ? dataPoint.labelAnglePosition * Math.PI / 180 : 0;
        var newX = x + (radius + LabelMargin) * Math.cos(angle);
        return getDefinedNumberValue(Math.round(newX));
      },
      y: function y(dataPoint) {
        var radius = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getBubbleRadius)(dataPoint.radius.value, viewport, sizeScale, shapesSize);
        var y = dataPoint.y !== null ? yScale(dataPoint.y) : viewport.height / 2;
        var angle = dataPoint.labelAnglePosition ? dataPoint.labelAnglePosition * Math.PI / 180 : 0;
        var newY = y - (radius + LabelMargin) * Math.sin(angle);
        return getDefinedNumberValue(Math.round(newY));
      }
    },
    filter: function filter(dataPoint) {
      return dataPoint != null && dataPoint.formattedCategory() != null;
    },
    style: {
      'fill': function fill(dataPoint) {
        return dataPoint.labelFill;
      },
      'font-size': fontSizeInPx,
      'font-family': fontFamily
    }
  };
}
function getAngle(dataPoint, viewport, y) {
  var maxLabelPositionOn360deg = 8;
  var maxLabelPositionOn180deg = 3;
  var maxLabelPositionOn90deg = 1;
  var dataPointPosition = 0;
  if (!dataPoint.angleRange || !dataPoint.equalDataPointLabelsCount) return dataPointPosition;
  var angleRange = dataPoint.angleRange;
  var labelsInfo = dataPoint.equalDataPointLabelsCount;
  var angle = Math.abs(angleRange.reduce(function (pv, cv) {
    return pv - cv;
  }));
  if (angle === 360) {
    if (labelsInfo.count <= maxLabelPositionOn360deg) {
      var startAngle = y >= viewport.height / 2 ? 0 : 180;
      switch (labelsInfo.count) {
        case 1:
          dataPointPosition = startAngle + 90;
          break;
        case 2:
          dataPointPosition = startAngle + 90 - 45 * (labelsInfo.i === 0 ? -1 : 1);
          break;
        case 3:
          dataPointPosition = angleRange[0] + 45 * (labelsInfo.i + 1);
          break;
        default:
          dataPointPosition = 45 * labelsInfo.i;
          break;
      }
    } else {
      if (labelsInfo.i < labelsInfo.count) {
        dataPointPosition = 45 * labelsInfo.i;
      } else {
        dataPointPosition = 0;
      }
    }
  } else if (angle === 180) {
    if (labelsInfo.count <= maxLabelPositionOn180deg) {
      var _startAngle = angleRange[0] + 90;
      switch (labelsInfo.count) {
        case 1:
          dataPointPosition = _startAngle;
          break;
        case 2:
          dataPointPosition = _startAngle - 45 * (labelsInfo.i === 0 ? -1 : 1);
          break;
        case 3:
          dataPointPosition = angleRange[0] + 45 * (labelsInfo.i + 1);
          break;
        default:
          dataPointPosition = _startAngle;
          break;
      }
    } else {
      if (labelsInfo.i < labelsInfo.count) {
        dataPointPosition = angleRange[0] + 45 * (labelsInfo.i + 1);
      } else {
        dataPointPosition = 0;
      }
    }
  } else if (angle === 90) {
    if (labelsInfo.count === maxLabelPositionOn90deg) {
      dataPointPosition = angleRange.reduce(function (pv, cv) {
        return pv + cv;
      }) / 2;
    } else {
      if (labelsInfo.i < labelsInfo.count) {
        dataPointPosition = angleRange.reduce(function (pv, cv) {
          return pv + cv;
        }) / 2;
      } else {
        dataPointPosition = 0;
      }
    }
  }
  return dataPointPosition;
}
function getLabelDelta(size, labelAnglePosition) {
  var dx = size.width / DataLabelXOffset;
  var dy = size.height / DataLabelYOffset;
  switch (labelAnglePosition) {
    case 0:
      {
        return {
          dx: dx,
          dy: 0
        };
      }
    case 45:
      {
        return {
          dx: dx,
          dy: -dy
        };
      }
    case 90:
      {
        return {
          dx: 0,
          dy: -dy
        };
      }
    case 135:
      {
        return {
          dx: -dx,
          dy: -dy
        };
      }
    case 180:
      {
        return {
          dx: -dx,
          dy: 0
        };
      }
    case 225:
      {
        return {
          dx: -dx,
          dy: dy
        };
      }
    case 270:
      {
        return {
          dx: 0,
          dy: dy
        };
      }
    case 315:
      {
        return {
          dx: dx,
          dy: dy
        };
      }
    default:
      {
        return {
          dx: 0,
          dy: 0
        };
      }
  }
}
function getDefinedNumberValue(value) {
  return value === null || isNaN(value) ? DefaultPosition : value;
}
// eslint-disable-next-line max-lines-per-function
function bindLabelLayout(dataLabelsSettings, data, labelGraphicsContext, shapesSize) {
  if (dataLabelsSettings.show) {
    var layout = getVisualLabelLayout(dataLabelsSettings, data.size, data.sizeScale, data.axes, shapesSize);
    var clonedDataPoints = data.dataPoints.map(function (x) {
      return Object.assign({}, x);
    });
    clonedDataPoints.sort(function (a, b) {
      if (a.x === null || a.y === null || b.x === null || b.y === null) {
        return 0;
      }
      if (a.x > b.x) {
        return 1;
      }
      if (a.x < b.x) {
        return -1;
      }
      if (a.y > b.y) {
        return 1;
      }
      if (a.y < b.y) {
        return -1;
      }
      return 0;
    });
    var equalDataPointLabels = [];
    var tempArray = [];
    clonedDataPoints.forEach(function (elem, i, array) {
      if (i > 0) {
        if (elem.x === array[i - 1].x && elem.y === array[i - 1].y) {
          tempArray.push(Object.assign(Object.assign({}, elem), {
            index: i
          }));
        } else {
          if (tempArray.length > 1) {
            equalDataPointLabels.push(tempArray);
          }
          tempArray = [Object.assign(Object.assign({}, elem), {
            index: i
          })];
        }
        if (i === array.length - 1 && tempArray.length > 1) {
          equalDataPointLabels.push(tempArray);
        }
      } else {
        tempArray.push(Object.assign(Object.assign({}, elem), {
          index: i
        }));
      }
    });
    equalDataPointLabels.forEach(function (dataLabelArray) {
      var maxLabelsCount = 0;
      dataLabelArray.forEach(function (dataPoint, i, array) {
        if (maxLabelsCount === 0) {
          maxLabelsCount = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getVisibleLabelsCountOnAngleRange)(dataPoint.angleRange);
        }
        if (clonedDataPoints[dataPoint.index].equalDataPointLabelsCount) {
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          clonedDataPoints[dataPoint.index].equalDataPointLabelsCount.count = array.length;
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          clonedDataPoints[dataPoint.index].equalDataPointLabelsCount.i = i;
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          if (clonedDataPoints[dataPoint.index].equalDataPointLabelsCount.count > maxLabelsCount) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            if (clonedDataPoints[dataPoint.index].equalDataPointLabelsCount.i >= maxLabelsCount) {
              clonedDataPoints.splice(dataPoint.index, 1);
            }
          }
        }
      });
    });
    // filter unnecessary dataPoints for labels
    clonedDataPoints = clonedDataPoints.filter(function (dataPoint) {
      return dataPoint !== null;
    });
    // set angle position to datapoint label
    clonedDataPoints = clonedDataPoints.map(function (dataPoint) {
      var y = dataPoint.y !== null ? data.axes.y.scale(dataPoint.y) : data.size.height / 2;
      var labelAnglePosition = getAngle(dataPoint, data.size, y);
      return Object.assign(Object.assign({}, dataPoint), {
        labelAnglePosition: labelAnglePosition
      });
    });
    var labels = (0,powerbi_visuals_utils_chartutils_lib_dataLabel_dataLabelUtils__WEBPACK_IMPORTED_MODULE_3__.drawDefaultLabelsForDataPointChart)(clonedDataPoints, labelGraphicsContext, layout, data.size);
    if (labels) {
      labels.attr('text-anchor', 'start').attr('transform', function (d) {
        var delta = getLabelDelta(d.size, d.labelAnglePosition);
        return (0,powerbi_visuals_utils_svgutils_lib_manipulation__WEBPACK_IMPORTED_MODULE_4__.translate)(delta.dx, delta.dy);
      });
      var _data = dataLabelsSettings.showBackground ? clonedDataPoints.filter(function (dataPoint) {
        return dataPoint.labelX && dataPoint.labelY;
      }) : [];
      showLabelBackground(_data, labelGraphicsContext, dataLabelsSettings);
    }
  } else {
    (0,powerbi_visuals_utils_chartutils_lib_dataLabel_dataLabelUtils__WEBPACK_IMPORTED_MODULE_3__.cleanDataLabels)(labelGraphicsContext);
    showLabelBackground([], labelGraphicsContext, dataLabelsSettings);
  }
}
// eslint-disable-next-line max-lines-per-function
function showLabelBackground(dataPoints, labelGraphicsContext, dataLabelsSettings) {
  var _a;
  // Add a group containing background rects for each label.
  // first-child is used to make sure that the background rects are behind the labels.
  var groups = labelGraphicsContext.selectAll(Selectors.LabelBackgroundGroup.selectorName).data([dataPoints]);
  var groupEnter = groups.enter().insert('g', ':first-child').classed(Selectors.LabelBackgroundGroup.className, true);
  groups.exit().remove();
  // Find all labels in the parent selection.
  // Measure dimensions of each label and store them in an array to later use to size background rects.
  var labelTextDimensions = [];
  labelGraphicsContext.selectAll('.labels text').each(function () {
    var _this$getBoundingClie = this.getBoundingClientRect(),
      width = _this$getBoundingClie.width,
      height = _this$getBoundingClie.height;
    labelTextDimensions.push({
      width: width,
      height: height
    });
  });
  // Inside the group, create a rect for each label.
  var backgrounds = groups.merge(groupEnter).selectAll(Selectors.LabelBackground.selectorName).data(function (d) {
    return d.map(function (dd, i) {
      var _a, _b, _c, _d;
      var delta = dd.size && getLabelDelta(dd.size, dd.labelAnglePosition);
      return {
        x: (_a = dd.labelX) !== null && _a !== void 0 ? _a : 0,
        y: (_b = dd.labelY) !== null && _b !== void 0 ? _b : 0,
        width: labelTextDimensions[i].width,
        height: labelTextDimensions[i].height,
        dx: (_c = delta === null || delta === void 0 ? void 0 : delta.dx) !== null && _c !== void 0 ? _c : 0,
        dy: (_d = delta === null || delta === void 0 ? void 0 : delta.dy) !== null && _d !== void 0 ? _d : 0,
        fontSize: powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_2__.fromPointToPixel(parseInt(dd.labelFontSize)),
        textLength: dd.formattedCategory().length
      };
    });
  });
  var backgroundsEnter = backgrounds.enter().append('rect').classed(Selectors.LabelBackground.className, true);
  backgrounds.exit().remove();
  var fontSize = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_2__.fromPointToPixel(dataLabelsSettings.fontSize);
  backgrounds.merge(backgroundsEnter).attr('x', function (d) {
    return d.x + d.dx - (d.width + DataLabelBackgroundOffset) / 2;
  }).attr('y', function (d) {
    return d.y + d.dy - (d.height + DataLabelBackgroundOffset / 2 + fontSize) / 2;
  }).attr('rx', DataLabelBorderRadius).attr('ry', DataLabelBorderRadius).attr('width', function (d) {
    return d.width + DataLabelBackgroundOffset;
  }).attr('height', function (d) {
    return d.height + DataLabelBackgroundOffset;
  }).style('fill-opacity', 1 - ((_a = dataLabelsSettings.transparency) !== null && _a !== void 0 ? _a : 0) / 100).style('fill', function () {
    var _a;
    return (_a = dataLabelsSettings.backgroundColor) !== null && _a !== void 0 ? _a : null;
  });
}
function setDatapointVisibleAngleRange(dataPoints, axes, size, sizeScale, shapesSize) {
  return dataPoints.map(function (dataPoint) {
    var angleRange = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getVisibleAngleRange)(axes, dataPoint.x, dataPoint.y, size, dataPoint.radius.value, sizeScale, shapesSize);
    return Object.assign(Object.assign({}, dataPoint), {
      angleRange: angleRange
    });
  });
}

/***/ }),

/***/ "./src/legendUtils.ts":
/*!****************************!*\
  !*** ./src/legendUtils.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefaultFontFamily": () => (/* binding */ DefaultFontFamily),
/* harmony export */   "DefaultLegendPosition": () => (/* binding */ DefaultLegendPosition),
/* harmony export */   "DefaultLegendTitleText": () => (/* binding */ DefaultLegendTitleText),
/* harmony export */   "LegendLabelFontSizeDefault": () => (/* binding */ LegendLabelFontSizeDefault),
/* harmony export */   "MinAmountOfDataPointsInTheLegend": () => (/* binding */ MinAmountOfDataPointsInTheLegend),
/* harmony export */   "buildLegendData": () => (/* binding */ buildLegendData),
/* harmony export */   "getLegendProperties": () => (/* binding */ getLegendProperties),
/* harmony export */   "renderLegend": () => (/* binding */ renderLegend),
/* harmony export */   "setLegendProperties": () => (/* binding */ setLegendProperties)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js");
/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./properties */ "./src/properties.ts");
/* harmony import */ var _axesPropertiesUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./axesPropertiesUtils */ "./src/axesPropertiesUtils.ts");
/* harmony import */ var powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js");
/* harmony import */ var powerbi_visuals_utils_colorutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! powerbi-visuals-utils-colorutils */ "./node_modules/powerbi-visuals-utils-colorutils/lib/index.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendData.js");
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legend.js");







var MinAmountOfDataPointsInTheLegend = 1;
var LegendLabelFontSizeDefault = 9;
var DefaultFontFamily = '"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif';
var DefaultLegendTitleText = 'Type';
var DefaultLegendPosition = 'Top';
var DefaultSelectionStateOfTheDataPoint = false;
function buildLegendData(dataValues, host, legendObjectProperties, dataValueSource, categories, categoryIndex, hasDynamicSeries) {
  var _a;
  var colorHelper = new powerbi_visuals_utils_colorutils__WEBPACK_IMPORTED_MODULE_2__.ColorHelper(host.colorPalette, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.dataPoint.fill);
  var legendItems = [];
  var grouped = (_a = dataValues.grouped()) !== null && _a !== void 0 ? _a : [];
  var formatString = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_3__.valueFormatter.getFormatStringByColumn(dataValueSource);
  if (hasDynamicSeries) {
    for (var i = 0, len = grouped.length; i < len; i++) {
      var grouping = grouped[i];
      var color = colorHelper.getColorForSeriesValue(grouping.objects, grouping.name);
      var selectionId = host.createSelectionIdBuilder().withSeries(dataValues, grouping).createSelectionId();
      legendItems.push({
        color: color,
        label: powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_3__.valueFormatter.format(grouping.name, formatString),
        identity: selectionId,
        selected: DefaultSelectionStateOfTheDataPoint
      });
    }
  }
  var legendTitle = dataValues && dataValueSource ? dataValueSource.displayName : legendObjectProperties.titleText;
  if (legendObjectProperties.titleText === undefined || legendObjectProperties.titleText.toString().length === 0) {
    legendObjectProperties.titleText = legendTitle;
  }
  if (!legendTitle) {
    legendTitle = categories && categories[categoryIndex] && categories[categoryIndex].source && categories[categoryIndex].source.displayName ? categories[categoryIndex].source.displayName : legendObjectProperties.titleText;
  }
  return {
    title: legendTitle,
    dataPoints: legendItems
  };
}
function renderLegend(legend, mainSvgElement, viewport, layerLegendData, legendObjectProperties, svgLegendElement) {
  var legendData = {
    title: '',
    dataPoints: []
  };
  if (layerLegendData) {
    legendData.title = layerLegendData.title || '';
    legendData.dataPoints = legendData.dataPoints.concat(layerLegendData.dataPoints || []);
    legendData.fontSize = (this === null || this === void 0 ? void 0 : this.legendLabelFontSize) ? this.legendLabelFontSize : LegendLabelFontSizeDefault;
    legendData.grouped = !!layerLegendData.grouped;
  }
  var legendProperties = legendObjectProperties;
  if (legendProperties) {
    powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_4__.update(legendData, legendProperties);
    var position = legendProperties[powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_5__.legendProps.position];
    if (position) {
      legend.changeOrientation(powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_5__.LegendPosition[position]);
    }
  } else {
    legend.changeOrientation(powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_5__.LegendPosition.Top);
  }
  legend.drawLegend(legendData, {
    height: viewport.height,
    width: viewport.width
  });
  powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_6__.positionChartArea(mainSvgElement, legend);
  var legendItems = svgLegendElement.select('#legendGroup').selectAll('.legendItem, .legendTitle').nodes();
  if (legendItems && legendItems.length > 0) {
    var offset = 0;
    legendItems.forEach(function (item) {
      item.style.fontFamily = DefaultFontFamily;
      var oldWidth = item.getBoundingClientRect().width;
      item.style.fontFamily = legendObjectProperties.fontFamily || DefaultFontFamily;
      var newWidth = item.getBoundingClientRect().width;
      var orientation = legend.getOrientation();
      if (orientation === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_5__.LegendPosition.Right || orientation === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_5__.LegendPosition.RightCenter || orientation === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_5__.LegendPosition.Left || orientation === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_5__.LegendPosition.LeftCenter) {
        item.style.transform = "translateX(".concat(0, "px)");
        // TODO: add processing for left right position
      } else {
        item.style.transform = "translateX(".concat(offset, "px)");
      }
      offset += newWidth - oldWidth;
    });
  }
}
function getLegendProperties(dataViewMetadata, axisTitleOnByDefault) {
  var dataViewObject = {};
  if (!dataViewMetadata) {
    return dataViewObject;
  }
  var objects = dataViewMetadata.objects;
  if (objects) {
    var legendObject = objects['legend'];
    if (legendObject) {
      dataViewObject = {
        show: legendObject['show'],
        position: legendObject['position'],
        showTitle: legendObject['showTitle'] == null ? axisTitleOnByDefault : legendObject['showTitle'],
        titleText: legendObject['titleText'],
        labelColor: legendObject['labelColor'],
        fontSize: legendObject['fontSize'],
        fontFamily: legendObject['fontFamily']
      };
    }
  }
  return dataViewObject;
}
function setLegendProperties(legendProperties) {
  var objects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  legendProperties.show = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_7__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.legend.show, true);
  legendProperties.labelColor = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_7__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.legend.labelColor, {
    solid: {
      color: _axesPropertiesUtils__WEBPACK_IMPORTED_MODULE_1__.DefaultColor
    }
  });
  legendProperties.fontSize = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_7__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.legend.fontSize, LegendLabelFontSizeDefault);
  legendProperties.fontFamily = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_7__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.legend.fontFamily, DefaultFontFamily);
  legendProperties.showTitle = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_7__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.legend.showTitle, true);
  legendProperties.titleText = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_7__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.legend.titleText);
  legendProperties.position = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_7__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_0__.PropertiesOfCapabilities.legend.position, DefaultLegendPosition);
}

/***/ }),

/***/ "./src/metadataUtils.ts":
/*!******************************!*\
  !*** ./src/metadataUtils.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getMetadata": () => (/* binding */ getMetadata)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js");

var ColumnCategory = 'Category';
var ColumnX = 'X';
var ColumnY = 'Y';
var ColumnSize = 'Size';
var ColumnGradient = 'Gradient';
var ColumnPlayAxis = 'PlayAxis';
var ColumnShape = 'Shape';
var ColumnXStart = 'XStart';
var ColumnXEnd = 'XEnd';
var ColumnYStart = 'YStart';
var ColumnYEnd = 'YEnd';
function getMetadata(categories, grouped) {
  var xAxisLabel = '';
  var yAxisLabel = '';
  var xIndex = (0,powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.getMeasureIndexOfRole)(grouped, ColumnX);
  var yIndex = (0,powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.getMeasureIndexOfRole)(grouped, ColumnY);
  var sizeIndex = (0,powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.getMeasureIndexOfRole)(grouped, ColumnSize);
  var categoryIndex = (0,powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.getCategoryIndexOfRole)(categories, ColumnCategory);
  var shapeIndex = (0,powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.getMeasureIndexOfRole)(grouped, ColumnShape);
  var xStartIndex = (0,powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.getMeasureIndexOfRole)(grouped, ColumnXStart);
  var xEndIndex = (0,powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.getMeasureIndexOfRole)(grouped, ColumnXEnd);
  var yStartIndex = (0,powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.getMeasureIndexOfRole)(grouped, ColumnYStart);
  var yEndIndex = (0,powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.getMeasureIndexOfRole)(grouped, ColumnYEnd);
  var gradientIndex = (0,powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.getMeasureIndexOfRole)(grouped, ColumnGradient);
  var playAxisIndex = (0,powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.getCategoryIndexOfRole)(categories, ColumnPlayAxis);
  var xCol = undefined;
  var yCol = undefined;
  if (grouped && grouped.length) {
    var firstGroup = grouped[0];
    if (xIndex >= 0) {
      xCol = firstGroup.values[xIndex].source;
      xAxisLabel = firstGroup.values[xIndex].source.displayName;
    }
    if (yIndex >= 0) {
      yCol = firstGroup.values[yIndex].source;
      yAxisLabel = firstGroup.values[yIndex].source.displayName;
    }
  }
  return {
    idx: {
      category: categoryIndex,
      x: xIndex,
      y: yIndex,
      size: sizeIndex,
      shape: shapeIndex,
      xStart: xStartIndex,
      xEnd: xEndIndex,
      yStart: yStartIndex,
      yEnd: yEndIndex,
      gradient: gradientIndex,
      playAxis: playAxisIndex
    },
    cols: {
      x: xCol,
      y: yCol
    },
    axesLabels: {
      x: xAxisLabel,
      y: yAxisLabel
    }
  };
}

/***/ }),

/***/ "./src/playAxisUtil.ts":
/*!*****************************!*\
  !*** ./src/playAxisUtil.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PlayAxis": () => (/* binding */ PlayAxis)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/* harmony import */ var powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js");
/* harmony import */ var powerbi_visuals_utils_svgutils_lib_manipulation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils/lib/manipulation */ "./node_modules/powerbi-visuals-utils-svgutils/lib/manipulation.js");
/* harmony import */ var powerbi_visuals_utils_chartutils_lib_axis_axis__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils/lib/axis/axis */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axis.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var _visual__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./visual */ "./src/visual.ts");
/* harmony import */ var d3_ease__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! d3-ease */ "./node_modules/d3-ease/src/linear.js");
/* harmony import */ var _tooltipBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tooltipBuilder */ "./src/tooltipBuilder.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }








var Constants = /*#__PURE__*/_createClass(function Constants() {
  _classCallCheck(this, Constants);
});
Constants.Months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
Constants.Height = 63;
Constants.FontSize = 11; // this is taken from visual.less, must be in sync with it
Constants.MarginTop = 10;
Constants.SlicingDuration = 600;
Constants.SliderHeight = 12;
Constants.SliderAnimationDuration = 800;
Constants.SliderBorderWidth = 1; // this is taken from jQuery UI stylesheet
Constants.AxisHeight = 41;
Constants.AxisLabelsMargin = 10; // distance between the labels
Constants.AxisInnerTickSize = 5; // tick height
Constants.AxisTickPadding = 12; // distance between ticks and labels
Constants.AxisBigTickClass = 'showLabel';
Constants.PlayButtonMarginTop = -6;
Constants.PlayButtonSpace = 35; // space needed for rendering the button
Constants.PlayButtonTimeInterval = 800;
Constants.PlayButtonPlayingClass = 'playing';
Constants.CaptionPaddingRight = 10;
Constants.CaptionFontSizeFactor = 8.14;
Constants.CaptionFontSizeMaxValue = 70;
Constants.PathDrawingDuration = 750;
Constants.PathLineClassName = 'play-axis-path';
Constants.PathLengthReserve = 20;
Constants.PathCircleClassName = 'play-axis-path-circle';
Constants.PathCircleRadius = 7;
var PlayAxis = /*#__PURE__*/function () {
  function PlayAxis(mainElement, mainSvgElement, tooltipServiceWrapper) {
    _classCallCheck(this, PlayAxis);
    // general
    this.enabled = true;
    this.visualSize = undefined;
    this.groupedDataPoints = undefined;
    this.groupNames = undefined;
    this.currentGroupIndex = undefined;
    this.valuesType = undefined;
    // slider
    this.sliderEl = undefined;
    this.$sliderEl = undefined;
    // axis
    this.axisGroup = undefined;
    // play button
    this.playButtonEl = undefined;
    this.playButtonTimer = undefined;
    // caption
    this.captionGroup = undefined;
    this.caption = undefined;
    // visual
    this.axes = undefined;
    this.scatterSelect = undefined;
    this.selectedItems = undefined;
    // path
    this.pathOwners = undefined;
    this.pathLinesContainer = undefined;
    this.pathCirclesContainer = undefined;
    this.tooltipServiceWrapper = tooltipServiceWrapper;
    // slider
    this.initSlider(mainElement);
    // axis
    this.createAxisContainer(mainSvgElement);
    // play button
    this.initPlayButton(mainElement);
    // caption
    this.createCaptionElements(mainSvgElement);
    // paths
    this.initPaths(mainSvgElement);
  }
  // Public
  _createClass(PlayAxis, [{
    key: "enable",
    value: function enable() {
      var _a, _b, _c;
      // showing playAxis elements
      if (this.sliderEl) {
        this.sliderEl.style.display = '';
      }
      (_a = this.axisGroup) === null || _a === void 0 ? void 0 : _a.style('display', '');
      (_b = this.playButtonEl) === null || _b === void 0 ? void 0 : _b.style('display', '');
      (_c = this.captionGroup) === null || _c === void 0 ? void 0 : _c.style('display', '');
      this.enabled = true;
    }
  }, {
    key: "disable",
    value: function disable() {
      var _a, _b, _c;
      // hiding playAxis elements
      if (this.sliderEl) {
        this.sliderEl.style.display = 'none';
      }
      (_a = this.axisGroup) === null || _a === void 0 ? void 0 : _a.style('display', 'none');
      (_b = this.playButtonEl) === null || _b === void 0 ? void 0 : _b.style('display', 'none');
      (_c = this.captionGroup) === null || _c === void 0 ? void 0 : _c.style('display', 'none');
      // showing all the dataPoints
      if (this.scatterSelect) {
        this.scatterSelect.style('display', '').style('opacity', '');
      }
      this.stopAutoPlay();
      this.removePaths();
      this.enabled = false;
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.enabled;
    }
  }, {
    key: "getHeight",
    value: function getHeight() {
      // getting the space needed for rendering the playAxis elements
      return this.enabled ? Constants.MarginTop + Constants.Height : 0;
    }
  }, {
    key: "onSelect",
    value: function onSelect(currentSelection, transition) {
      // this method is called when any of data points are being selected or deselected
      if (!this.enabled || !this.groupedDataPoints) {
        return;
      }
      this.selectedItems = currentSelection;
      this.stopAutoPlay();
      var pathOwners = this.updatePathOwners();
      this.renderPaths(pathOwners, transition);
    }
    // End: Public
    // Update
  }, {
    key: "update",
    value: function update(_update) {
      this.updateProps(_update);
      this.stopAutoPlay();
      this.render(_update);
    }
  }, {
    key: "updateProps",
    value: function updateProps(update) {
      var _a;
      this.scatterSelect = (_a = update.scatterSelect) !== null && _a !== void 0 ? _a : undefined;
      this.axes = update.axes;
      this.valuesType = PlayAxis.getValuesType(update.dataPoints);
      this.groupedDataPoints = PlayAxis.buildGroupedDataPoints(update.dataPoints, this.valuesType);
      this.groupNames = PlayAxis.getFormattedGroupNames(this.groupedDataPoints, this.valuesType);
    }
  }, {
    key: "render",
    value: function render(update) {
      this.visualSize = update.visualSize;
      var measures = PlayAxis.getMeasures(update);
      this.renderAxis(update, measures);
      this.renderPlayButton(update, measures);
      this.renderCaption(update);
      if (!this.groupedDataPoints) {
        return;
      }
      this.renderSlider(update, measures, this.groupedDataPoints.length - 1);
      if (this.currentGroupIndex == undefined) {
        return;
      }
      this.slice(this.currentGroupIndex, false);
      this.renderPathContainers(update);
      if (update.updateType === 4 /* VisualUpdateType.Resize */ || update.updateType === _visual__WEBPACK_IMPORTED_MODULE_0__.Visual.ResizeEndCode) {
        // on resize we just redraw the existing paths
        this.renderPaths(null, false, true);
      } else {
        // in other case we remove all the paths
        this.removePaths();
      }
    }
    // End: Update
    // Visual
  }, {
    key: "slice",
    value: function slice(groupIndex, transition) {
      if (!this.groupedDataPoints || !this.scatterSelect) {
        return;
      }
      // Slicing data points respective to the provided group index.
      // It means - showing circles of this group and hiding all other circles.
      // Also setting the group caption.
      var group = this.groupedDataPoints[groupIndex];
      this.scatterSelect.each(function (d) {
        var el = (0,d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"])(this);
        if (d.playAxisValue === group[0].playAxisValue) {
          d.isShown = true;
          el.style('display', '');
          if (transition) {
            el.transition().duration(Constants.SlicingDuration).style('opacity', 1);
          } else {
            el.style('opacity', 1);
          }
        } else {
          d.isShown = false;
          if (transition) {
            el.transition().duration(Constants.SlicingDuration).style('opacity', 0).on('end', function () {
              el.style('display', 'none');
            });
          } else {
            el.style('opacity', 0).style('display', 'none');
          }
        }
      });
      var captionValue = PlayAxis.formatValue(group[0].playAxisValue, this.valuesType);
      this.setCaptionText(captionValue);
    }
    // End: Visual
    // Slider
    // Slider is the main thing here which controls the state
  }, {
    key: "initSlider",
    value: function initSlider(mainElement) {
      var _this = this;
      // Changing the jQuery's global setting
      $.easing._default = 'linear';
      this.sliderEl = document.createElement('div');
      this.$sliderEl = $(this.sliderEl);
      // Hide slider element by setting style.display attribute to 'none'
      this.$sliderEl.css('display', 'none');
      // Set slider element's id and class attributes to playAxisSlider
      this.$sliderEl.attr({
        id: 'playAxisSlider',
        "class": 'playAxisSlider'
      });
      // Creating jQuery UI Slider
      // Demo: https://jqueryui.com/slider/
      // API: http://api.jqueryui.com/slider/
      var jqueryUiSliderParams = {
        min: 0,
        max: 1,
        value: 0,
        animate: Constants.SliderAnimationDuration,
        slide: function slide(e, ui) {
          _this.currentGroupIndex = ui.value;
          if (ui.value !== undefined) {
            _this.onSlide(+ui.value);
          }
        },
        change: function change(e, ui) {
          _this.currentGroupIndex = ui.value;
          if (ui.value != undefined) {
            _this.onChange(+ui.value);
          }
        }
      };
      this.$sliderEl.css('height', Constants.SliderHeight).appendTo(mainElement).slider(jqueryUiSliderParams);
    }
  }, {
    key: "renderSlider",
    value: function renderSlider(update, measures, maxValue) {
      if (!this.$sliderEl) {
        return;
      }
      this.$sliderEl.css({
        top: measures.top + (update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.Top || update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.TopCenter ? update.legendSize.height : 0),
        left: measures.left + (update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.Left || update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.LeftCenter ? update.legendSize.width : 0) + Constants.PlayButtonSpace - Constants.SliderBorderWidth,
        width: measures.width - Constants.PlayButtonSpace - (update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.Right || update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.RightCenter || update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.Left || update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.LeftCenter ? update.legendSize.width : 0) + Constants.SliderBorderWidth * 2 // considering left and right border
      });

      if (update.updateType !== 4 /* VisualUpdateType.Resize */ && update.updateType !== _visual__WEBPACK_IMPORTED_MODULE_0__.Visual.ResizeEndCode) {
        this.$sliderEl.slider('option', {
          min: 0,
          max: maxValue,
          value: maxValue
        });
      }
    }
  }, {
    key: "onSlide",
    value: function onSlide(index) {
      this.stopAutoPlay();
      this.slice(index, true);
      this.renderPaths(null, true);
    }
  }, {
    key: "onChange",
    value: function onChange(index) {
      this.slice(index, true);
    }
    // End: Slider
    // Axis
  }, {
    key: "createAxisContainer",
    value: function createAxisContainer(mainSvgElement) {
      this.axisGroup = mainSvgElement.append('g').style('display', 'none').attr('id', 'playAxis').classed('playAxis', true);
    }
  }, {
    key: "renderAxis",
    value: function renderAxis(update, measures) {
      if (!this.axisGroup || !this.groupNames) {
        return;
      }
      this.axisGroup.attr('transform', (0,powerbi_visuals_utils_svgutils_lib_manipulation__WEBPACK_IMPORTED_MODULE_4__.translate)(measures.left + Constants.PlayButtonSpace, measures.top + (Constants.Height - Constants.AxisHeight)));
      var pixelSpan = measures.width - Constants.PlayButtonSpace - (update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.Left || update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.LeftCenter || update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.Right || update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.RightCenter ? update.legendSize.width : 0);
      var xAxisProperties = (0,powerbi_visuals_utils_chartutils_lib_axis_axis__WEBPACK_IMPORTED_MODULE_5__.createAxis)({
        pixelSpan: pixelSpan,
        dataDomain: this.groupNames,
        metaDataColumn: update.metadataColumn,
        formatString: powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_6__.valueFormatter.getFormatStringByColumn(update.metadataColumn),
        outerPadding: 0,
        innerPadding: 0,
        isCategoryAxis: true,
        useRangePoints: true
      });
      xAxisProperties.axis.tickSizeInner(Constants.AxisInnerTickSize).tickPadding(Constants.AxisTickPadding).tickValues(this.groupNames);
      this.axisGroup.call(xAxisProperties.axis);
      // doing some fixes after the rendering
      var labelsMap = PlayAxis.getAxisLabelsMap(this.groupNames, pixelSpan);
      PlayAxis.formatTicksAndLabels(this.axisGroup, labelsMap);
    }
  }, {
    key: "initPlayButton",
    value:
    // End: Axis
    // Play button
    function initPlayButton(mainElement) {
      var _this2 = this;
      this.playButtonEl = (0,d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"])(mainElement).append('button').style('display', 'none').attr('id', 'playButton').classed('playButton', true);
      this.playButtonEl.on('click', function () {
        if (_this2.playButtonTimer) {
          _this2.stopAutoPlay();
        } else {
          _this2.startAutoPlay();
        }
      });
    }
  }, {
    key: "renderPlayButton",
    value: function renderPlayButton(update, measures) {
      if (!this.playButtonEl) {
        return;
      }
      this.playButtonEl.style('top', measures.top + (update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.Top || update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.TopCenter ? update.legendSize.height : 0) + Constants.PlayButtonMarginTop + 'px').style('left', measures.left + (update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.Left || update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.LeftCenter ? update.legendSize.width : 0) + 'px');
    }
  }, {
    key: "startAutoPlay",
    value: function startAutoPlay() {
      var _a, _b;
      if (!this.groupedDataPoints) {
        return;
      }
      (_a = this.playButtonEl) === null || _a === void 0 ? void 0 : _a.classed(Constants.PlayButtonPlayingClass, true);
      if (((_b = this.$sliderEl) === null || _b === void 0 ? void 0 : _b.slider('value')) === this.groupedDataPoints.length - 1) {
        this.setGroupByIndex(0);
      } else {
        this.setNextGroup();
      }
      this.setAutoPlayTimeout();
    }
  }, {
    key: "setAutoPlayTimeout",
    value: function setAutoPlayTimeout() {
      var _this3 = this;
      this.playButtonTimer = window.setTimeout(function () {
        if (!_this3.$sliderEl || !_this3.groupedDataPoints) {
          return;
        }
        if (_this3.$sliderEl.slider('value') >= _this3.groupedDataPoints.length - 1) {
          _this3.stopAutoPlay();
          return;
        }
        _this3.setNextGroup();
        _this3.setAutoPlayTimeout();
      }, Constants.PlayButtonTimeInterval);
    }
  }, {
    key: "stopAutoPlay",
    value: function stopAutoPlay() {
      if (!this.playButtonEl) {
        return;
      }
      this.playButtonEl.classed(Constants.PlayButtonPlayingClass, false);
      window.clearTimeout(this.playButtonTimer);
      this.playButtonTimer = undefined;
    }
  }, {
    key: "setGroupByIndex",
    value: function setGroupByIndex(index) {
      var _a;
      // when slider value changes slider launches the 'change' callback
      (_a = this.$sliderEl) === null || _a === void 0 ? void 0 : _a.slider('value', index);
      this.renderPaths(null, true);
    }
  }, {
    key: "setNextGroup",
    value: function setNextGroup() {
      if (!this.$sliderEl || !this.groupedDataPoints) {
        return;
      }
      var nextIndex = this.$sliderEl.slider('value') + 1;
      if (nextIndex >= this.groupedDataPoints.length) {
        this.stopAutoPlay();
      } else {
        this.setGroupByIndex(nextIndex);
      }
    }
    // End: Play button
    // Caption
  }, {
    key: "createCaptionElements",
    value: function createCaptionElements(mainSvgElement) {
      this.captionGroup = mainSvgElement.append('g').style('display', 'none').attr('id', 'playCaption').classed('playCaption', true);
      this.caption = this.captionGroup.append('text');
    }
  }, {
    key: "renderCaption",
    value: function renderCaption(update) {
      if (!this.captionGroup || !this.caption) {
        return;
      }
      // rendering empty caption, the text will be set later by the 'slice' method
      var x = update.viewport.width - (update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.Right || update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.RightCenter || update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.Left || update.legendPosition === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_3__.LegendPosition.LeftCenter ? update.legendSize.width : 0) - update.visualMargin.right - update.axesSize.yAxisWidth - Constants.CaptionPaddingRight;
      var y = update.visualMargin.top;
      this.captionGroup.attr('transform', "translate(".concat(x, ", ").concat(y, ")"));
      var fontSize = Math.min(Constants.CaptionFontSizeMaxValue, update.viewport.height / Constants.CaptionFontSizeFactor);
      this.caption.style('font-size', fontSize);
    }
  }, {
    key: "setCaptionText",
    value: function setCaptionText(text) {
      var _a;
      (_a = this.caption) === null || _a === void 0 ? void 0 : _a.text(text);
    }
    // End: Caption
    // Path - it shows up when some data points are selected
  }, {
    key: "initPaths",
    value: function initPaths(mainSvgElement) {
      this.pathLinesContainer = mainSvgElement.append('g').attr('display', 'none');
      this.pathCirclesContainer = mainSvgElement.append('g').attr('display', 'none');
    }
  }, {
    key: "renderPathContainers",
    value: function renderPathContainers(update) {
      var _a, _b;
      // rendering containers for the paths which are displayed when some dataPoints are selected
      var transform = (0,powerbi_visuals_utils_svgutils_lib_manipulation__WEBPACK_IMPORTED_MODULE_4__.translate)(update.visualMargin.left + update.axesSize.yAxisWidth + update.yTickOffset, update.visualMargin.top);
      (_a = this.pathLinesContainer) === null || _a === void 0 ? void 0 : _a.attr('transform', transform);
      (_b = this.pathCirclesContainer) === null || _b === void 0 ? void 0 : _b.attr('transform', transform);
    }
  }, {
    key: "updatePathOwners",
    value: function updatePathOwners() {
      var _this4 = this;
      if (!this.selectedItems) {
        return [];
      }
      // updating selected points' data and returning those of them that have a path
      var pathOwners = [];
      this.selectedItems.each(function (selected) {
        if (!_this4.axes) {
          return;
        }
        // building the path
        selected.entirePath = _this4.getDataPointPathArray(selected);
        if (selected.entirePath.length > 1) {
          // building the distances array for the lines animation
          selected.pathDistances = [];
          var lastPoint = undefined;
          for (var i = 0; i < selected.entirePath.length; i++) {
            if (!selected.entirePath[i]) {
              continue;
            }
            if (!lastPoint) {
              lastPoint = selected.entirePath[i];
              continue;
            }
            selected.pathDistances[i] = PlayAxis.getDistanceBetweenTwoPoints(_this4.axes, lastPoint, selected.entirePath[i]);
            lastPoint = selected.entirePath[i];
          }
          pathOwners.push(selected);
        }
      });
      return pathOwners;
    }
  }, {
    key: "getDataPointPathArray",
    value: function getDataPointPathArray(selectedDataPoint) {
      if (!this.groupedDataPoints) {
        return [];
      }
      return PlayAxis.buildPath(this.groupedDataPoints, selectedDataPoint, 2 /* PathBuildingMode.ByBoth */)
      // || PlayAxis.buildPath( this.groupedDataPoints, selectedDataPoint, PathBuildingMode.ByCategory )
      // || PlayAxis.buildPath( this.groupedDataPoints, selectedDataPoint, PathBuildingMode.ByLegend )
      || [];
    }
  }, {
    key: "renderPaths",
    value: function renderPaths(pathOwners, transition, resizeEvent) {
      // updating pathOwners (or using saved ones if not provided) and rendering according to their data
      this.pathOwners = pathOwners || this.pathOwners;
      if (!this.pathOwners) {
        return;
      }
      if (this.pathOwners.length === 0) {
        this.removePaths();
        return;
      }
      this.renderPathLines(transition, resizeEvent);
      this.renderPathCircleGroups(transition);
    }
  }, {
    key: "removePaths",
    value: function removePaths() {
      var _a, _b, _c, _d;
      this.pathOwners = [];
      (_a = this.pathLinesContainer) === null || _a === void 0 ? void 0 : _a.attr('display', 'none').transition(); // using 'transition' method for stopping the animation immediately
      (_b = this.pathCirclesContainer) === null || _b === void 0 ? void 0 : _b.attr('display', 'none').transition(); // using 'transition' method for stopping the animation immediately
      (_c = this.pathLinesContainer) === null || _c === void 0 ? void 0 : _c.selectAll('*').remove();
      (_d = this.pathCirclesContainer) === null || _d === void 0 ? void 0 : _d.selectAll('*').remove();
    }
  }, {
    key: "renderPathLines",
    value: function renderPathLines() {
      var transition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var resizeEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (!this.pathLinesContainer) {
        return;
      }
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      var self = this;
      this.addLackingSVGPathElements();
      this.removeExcessSVGPathElements();
      var paths = this.pathLinesContainer.selectAll('path');
      this.pathLinesContainer.attr('display', '');
      paths.each(function (datum) {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var pathEl = this;
        self.renderPathLine(pathEl, datum, transition, resizeEvent);
      });
    }
  }, {
    key: "renderPathLine",
    value: function renderPathLine(pathEl, datum, transition, resizeEvent) {
      if (datum.pathDistances == undefined || datum.fill == undefined || this.currentGroupIndex == undefined || !this.axes || !this.visualSize) {
        return;
      }
      var d3_pathEl = (0,d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"])(pathEl);
      // Making this value a little bit greater. By this, we avoid some rendering bugs
      var pathLength = PlayAxis.getEntirePathLength(datum.pathDistances) + Constants.PathLengthReserve;
      var dashOffset = PlayAxis.getPathDashOffset(datum, pathLength, this.currentGroupIndex);
      if (!pathEl.hasAttribute('d') || resizeEvent) {
        var dAttr = PlayAxis.buildDAttribute(this.axes, datum, this.visualSize);
        d3_pathEl.attr('stroke-dasharray', pathLength).attr('stroke-dashoffset', pathLength).attr('d', dAttr).attr('stroke', datum.fill).attr('display', '');
      }
      if (transition) {
        d3_pathEl.transition().duration(Constants.PathDrawingDuration).ease(d3_ease__WEBPACK_IMPORTED_MODULE_7__.linear).attr('stroke-dashoffset', dashOffset);
      } else {
        d3_pathEl.attr('stroke-dashoffset', dashOffset);
      }
    }
  }, {
    key: "removeExcessSVGPathElements",
    value: function removeExcessSVGPathElements() {
      if (!this.scatterSelect) {
        return;
      }
      this.scatterSelect.each(function (d) {
        if (!d.selected && d.pathElement) {
          d.pathElement.remove();
          d.pathElement = null;
        }
      });
    }
  }, {
    key: "addLackingSVGPathElements",
    value: function addLackingSVGPathElements() {
      if (!this.pathOwners || !this.pathLinesContainer) {
        return;
      }
      for (var i = 0; i < this.pathOwners.length; i++) {
        var pathOwner = this.pathOwners[i];
        if (!pathOwner.pathElement || !pathOwner.pathElement.parentNode) {
          var d3_pathElement = this.pathLinesContainer.append('path').attr('class', Constants.PathLineClassName);
          d3_pathElement.datum(pathOwner);
          pathOwner.pathElement = d3_pathElement.node();
        }
      }
    }
  }, {
    key: "renderPathCircleGroups",
    value: function renderPathCircleGroups(transition) {
      if (!this.pathCirclesContainer || !this.pathOwners) {
        return;
      }
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      var self = this;
      var groups = this.pathCirclesContainer.selectAll('g').data(this.pathOwners);
      groups.enter().append('g');
      groups.exit().remove();
      this.pathCirclesContainer.attr('display', '');
      groups.each(function (datum) {
        if (!datum.entirePath) {
          return;
        }
        var group = (0,d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"])(this);
        // slicing path so it doesn't go farther than current category
        var slicedPath = datum.entirePath.filter(function (d, i) {
          return i <= self.currentGroupIndex;
        });
        var circles = group.selectAll('circle').data(slicedPath);
        circles.enter().append('circle');
        circles.exit().remove();
        self.renderPathCircles(circles, transition);
      });
    }
  }, {
    key: "renderPathCircles",
    value: function renderPathCircles(circles) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      var self = this;
      circles.each(function (d) {
        var circle = (0,d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"])(this);
        var opacity, display;
        if (d.selected && d.playAxisValue === self.getCurrentPlayAxisValue()) {
          opacity = 0;
          display = 'none';
        } else {
          opacity = 1;
          display = '';
          circles.classed(Constants.PathCircleClassName, true).attr('r', Constants.PathCircleRadius).attr('cx', function (d) {
            var _a, _b;
            return d.x ? (_a = self.axes) === null || _a === void 0 ? void 0 : _a.x.scale(d.x) : ((_b = self.visualSize) === null || _b === void 0 ? void 0 : _b.width) / 2;
          }).attr('cy', function (d) {
            var _a, _b;
            return d.y ? (_a = self.axes) === null || _a === void 0 ? void 0 : _a.y.scale(d.y) : ((_b = self.visualSize) === null || _b === void 0 ? void 0 : _b.height) / 2;
          }).style('stroke', function () {
            var _a;
            return (_a = d.fill) !== null && _a !== void 0 ? _a : null;
          });
          // adding tooltip
          (0,_tooltipBuilder__WEBPACK_IMPORTED_MODULE_1__.bindTooltip)(self.tooltipServiceWrapper, circle);
        }
        if (transition) {
          circle.attr('display', display).transition().duration(Constants.PathDrawingDuration).style('opacity', opacity);
        } else {
          circle.attr('display', display).style('opacity', opacity);
        }
      });
    }
  }, {
    key: "getCurrentPlayAxisValue",
    value:
    // End: Path
    // Utils
    function getCurrentPlayAxisValue() {
      var _a;
      if (!this.groupedDataPoints || !this.currentGroupIndex) {
        return undefined;
      }
      return (_a = this.groupedDataPoints[this.currentGroupIndex][0]) === null || _a === void 0 ? void 0 : _a.playAxisValue;
    }
  }], [{
    key: "formatTicksAndLabels",
    value: function formatTicksAndLabels(axisGroup, labelsMap) {
      // 1. Normalizing labels so they don't overlap each other
      // 2. Ticks that have a visible label, we make two times higher
      axisGroup.selectAll('.tick').each(function (_, i) {
        var tick = (0,d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"])(this);
        var line = tick.select('line');
        if (labelsMap[i]) {
          tick.classed(Constants.AxisBigTickClass, true);
          line.attr('y2', Constants.AxisInnerTickSize * 2);
        } else {
          tick.classed(Constants.AxisBigTickClass, false);
          line.attr('y2', Constants.AxisInnerTickSize);
        }
      });
    }
  }, {
    key: "getAxisLabelsMap",
    value: function getAxisLabelsMap(groupNames, pixelSpan) {
      // Determining which ticks have to be rendered with no label
      // and which ticks have to be rendered with label and more bright color.
      // Mapping values are: null and true respectively.
      var textProperties = {
        fontFamily: _visual__WEBPACK_IMPORTED_MODULE_0__.Visual.DefaultFontFamily,
        fontSize: Constants.FontSize.toString()
      };
      var labelsWidths = [];
      for (var i = 0; i < groupNames.length; i++) {
        var width = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_6__.textMeasurementService.measureSvgTextWidth(textProperties, groupNames[i]) + Constants.AxisLabelsMargin;
        labelsWidths.push(width);
      }
      var maxLabelWidth = Math.max.apply(Math, labelsWidths);
      var capacity = Math.floor(pixelSpan / maxLabelWidth);
      var factor = Math.ceil(groupNames.length / capacity); // determining the factor for axis dividing
      var map = [];
      for (var _i = 0; _i < groupNames.length; _i++) {
        if (_i % factor === 0) {
          map[_i] = true;
        }
      }
      return map;
    }
  }, {
    key: "buildPath",
    value: function buildPath(groupedDataPoints, selectedDataPoint, pathBuildingMode) {
      var filteringFunction = PlayAxis.getPathFilteringFunction(pathBuildingMode, selectedDataPoint);
      var path = [];
      for (var i = 0; i < groupedDataPoints.length; i++) {
        var grouppedBy = groupedDataPoints[i][0].playAxisValue;
        if (selectedDataPoint.playAxisValue === grouppedBy) {
          // forcing the selected element to be presented in the path
          path[i] = selectedDataPoint;
          continue;
        }
        var groupDataPoints = groupedDataPoints[i];
        var filtered = groupDataPoints.filter(filteringFunction);
        // adding only the first suiting data point to the path
        if (filtered[0]) {
          path[i] = filtered[0];
        }
      }
      var definedPathElements = path.filter(function (d) {
        return d != null;
      });
      // returning only the paths which contain elements except the selected element itself
      return definedPathElements.length > 1 ? path : null;
    }
  }, {
    key: "getPathFilteringFunction",
    value: function getPathFilteringFunction(pathBuildingMode, selectedDataPoint) {
      var selectedDataPointCategory = selectedDataPoint.formattedCategory();
      switch (pathBuildingMode) {
        case 2 /* PathBuildingMode.ByBoth */:
          return function (d) {
            return d.formattedCategory() === selectedDataPointCategory && d.columnGroup.name === selectedDataPoint.columnGroup.name;
          };
        case 0 /* PathBuildingMode.ByCategory */:
          return function (d) {
            return d.formattedCategory() === selectedDataPointCategory;
          };
        case 1 /* PathBuildingMode.ByLegend */:
          return function (d) {
            return d.columnGroup.name === selectedDataPoint.columnGroup.name;
          };
      }
    }
  }, {
    key: "buildDAttribute",
    value: function buildDAttribute(axes, selectedDataPoint, visualSize) {
      // building 'd' attribute for the 'path' element
      var path = selectedDataPoint.entirePath;
      var dAttr = '';
      if (!path) {
        return dAttr;
      }
      for (var i = 0, lastPointIndex = -1; i < path.length; i++) {
        if (!path[i]) {
          continue;
        }
        var x = path[i].x ? axes.x.scale(path[i].x) : visualSize.width / 2;
        var y = path[i].y ? axes.y.scale(path[i].y) : visualSize.height / 2;
        if (lastPointIndex === -1) {
          lastPointIndex = i;
          dAttr += "M".concat(x, ", ").concat(y);
          continue;
        }
        dAttr += "L".concat(x, " ").concat(y);
      }
      return dAttr;
    }
  }, {
    key: "getEntirePathLength",
    value: function getEntirePathLength(pathDistances) {
      var l = 0;
      for (var i = 0; i < pathDistances.length; i++) {
        if (pathDistances[i]) {
          l += pathDistances[i];
        }
      }
      return l;
    }
  }, {
    key: "getPathDashOffset",
    value: function getPathDashOffset(datum, pathLength, currentGroupIndex) {
      var slicedPathLength = 0;
      if (datum.pathDistances) {
        for (var i = 0; i <= currentGroupIndex; i++) {
          if (datum.pathDistances[i]) {
            slicedPathLength += datum.pathDistances[i];
          }
        }
      }
      return pathLength - slicedPathLength;
    }
  }, {
    key: "getDistanceBetweenTwoPoints",
    value: function getDistanceBetweenTwoPoints(axes, a, b) {
      // Calculating the distance between the centers of two circles.
      // Using the mathematical formula for this.
      return Math.sqrt(Math.pow(axes.x.scale(b.x) - axes.x.scale(a.x), 2) + Math.pow(axes.y.scale(b.y) - axes.y.scale(a.y), 2));
    }
  }, {
    key: "getFormattedGroupNames",
    value: function getFormattedGroupNames(groupedDataPoints, valuesType) {
      // We get an array of values by which the grouping takes place.
      // These values are displayed on the play axis.
      var names = [];
      for (var i = 0; i < groupedDataPoints.length; i++) {
        var name = PlayAxis.formatValue(groupedDataPoints[i][0].playAxisValue, valuesType);
        names.push(name);
      }
      return names;
    }
  }, {
    key: "formatValue",
    value: function formatValue(value, valueType) {
      // formatting the value depending on its type
      if (value == undefined) {
        return '';
      }
      switch (valueType) {
        case 0 /* PlayAxisValueType.Date */:
          return new Date(value.toString()).toLocaleDateString('en-US');
        case 1 /* PlayAxisValueType.Number */:
          return value.toString();
        default:
          return value.toString();
      }
    }
  }, {
    key: "getMeasures",
    value: function getMeasures(update) {
      // getting the box which contains play axis elements
      return {
        top: update.visualMargin.top + update.visualSize.height + update.axesSize.xAxisHeight + update.xTickOffset + Constants.MarginTop,
        left: update.visualMargin.left,
        width: update.viewport.width - update.visualMargin.left - update.visualMargin.right,
        height: Constants.Height
      };
    }
  }, {
    key: "getValuesType",
    value: function getValuesType(dataPoints) {
      // we determine the type basing on all values
      var _a, _b;
      var valuesType;
      // firstly we check if the values are numbers
      valuesType = 1 /* PlayAxisValueType.Number */;
      for (var i = 0; i < dataPoints.length; i++) {
        if (isNaN(+dataPoints[i].playAxisValue)) {
          valuesType = 2 /* PlayAxisValueType.String */;
          break;
        }
      }
      // if not we check for the dates
      if (valuesType !== 1 /* PlayAxisValueType.Number */) {
        valuesType = 0 /* PlayAxisValueType.Date */;
        for (var _i2 = 0; _i2 < dataPoints.length; _i2++) {
          if (isNaN(Date.parse((_b = (_a = dataPoints[_i2].playAxisValue) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ''))) {
            valuesType = 2 /* PlayAxisValueType.String */;
            break;
          }
        }
      }
      return valuesType;
    }
  }, {
    key: "buildGroupedDataPoints",
    value: function buildGroupedDataPoints(dataPoints, valuesType) {
      // grouping dataPoints by their playAxisValue
      var groups = [];
      for (var i = 0; i < dataPoints.length; i++) {
        var groupingValue = dataPoints[i].playAxisValue;
        var groupIndex = PlayAxis.getGroupIndexByGroupingValue(groups, groupingValue);
        var group = void 0;
        if (groupIndex === -1) {
          group = [];
          groups.push(group);
        } else {
          group = groups[groupIndex];
        }
        group.push(dataPoints[i]);
      }
      // sorting ascending
      switch (valuesType) {
        // checking if group names are dates
        case 0 /* PlayAxisValueType.Date */:
          return groups.sort(function (a, b) {
            var _a, _b, _c, _d;
            return new Date((_b = (_a = a[0].playAxisValue) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '') > new Date((_d = (_c = b[0].playAxisValue) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : '') ? 1 : -1;
          });
        // checking if group names are numbers
        case 1 /* PlayAxisValueType.Number */:
          return groups.sort(function (a, b) {
            return +a[0].playAxisValue > +b[0].playAxisValue ? 1 : -1;
          });
      }
      return (
        // trying to sort as month strings
        PlayAxis.sortGroupsByMonth(groups)
        // otherwise just sorting as strings
        || groups.sort(function (a, b) {
          return a[0].playAxisValue > b[0].playAxisValue ? 1 : -1;
        })
      );
    }
  }, {
    key: "sortGroupsByMonth",
    value: function sortGroupsByMonth(groups) {
      // if first value is not a month we don't do anything here
      if (Constants.Months.indexOf(groups[0][0].playAxisValue) === -1) {
        return null;
      }
      var sort = true;
      var result = groups.sort(function (a, b) {
        if (!sort) {
          return 1;
        }
        var indexA = Constants.Months.indexOf(a[0].playAxisValue);
        var indexB = Constants.Months.indexOf(b[0].playAxisValue);
        // if we find that one of the values is not a month we don't do the excess work here
        if (indexA === -1 || indexB === -1) {
          sort = false;
        }
        return indexA - indexB;
      });
      return sort ? result : null;
    }
  }, {
    key: "getGroupIndexByGroupingValue",
    value: function getGroupIndexByGroupingValue(groupsArray, groupingValue) {
      for (var i = 0; i < groupsArray.length; i++) {
        if (groupingValue === groupsArray[i][0].playAxisValue) {
          return i;
        }
      }
      return -1;
    }
  }]);
  return PlayAxis;
}();

/***/ }),

/***/ "./src/properties.ts":
/*!***************************!*\
  !*** ./src/properties.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PropertiesOfCapabilities": () => (/* binding */ PropertiesOfCapabilities)
/* harmony export */ });
// TODO: We have to migrate it to DataViewObjectsParser. You can find it in powerbi-visuals-utils-dataviewutils
var PropertiesOfCapabilities = {
  'dataPoint': {
    'defaultColor': {
      'objectName': 'dataPoint',
      'propertyName': 'defaultColor'
    },
    'showAllDataPoints': {
      'objectName': 'dataPoint',
      'propertyName': 'showAllDataPoints'
    },
    'fill': {
      'objectName': 'dataPoint',
      'propertyName': 'fill'
    },
    'fillRule': {
      'objectName': 'dataPoint',
      'propertyName': 'fillRule'
    }
  },
  'categoryAxis': {
    'show': {
      'objectName': 'categoryAxis',
      'propertyName': 'show'
    },
    'axisScale': {
      'objectName': 'categoryAxis',
      'propertyName': 'axisScale'
    },
    'start': {
      'objectName': 'categoryAxis',
      'propertyName': 'start'
    },
    'end': {
      'objectName': 'categoryAxis',
      'propertyName': 'end'
    },
    'axisColor': {
      'objectName': 'categoryAxis',
      'propertyName': 'axisColor'
    },
    'fontSize': {
      'objectName': 'categoryAxis',
      'propertyName': 'fontSize'
    },
    'fontFamily': {
      'objectName': 'categoryAxis',
      'propertyName': 'fontFamily'
    },
    'labelDisplayUnits': {
      'objectName': 'categoryAxis',
      'propertyName': 'labelDisplayUnits'
    },
    'valueDecimalPlaces': {
      'objectName': 'categoryAxis',
      'propertyName': 'valueDecimalPlaces'
    },
    'showAxisTitle': {
      'objectName': 'categoryAxis',
      'propertyName': 'showAxisTitle'
    },
    'axisStyle': {
      'objectName': 'categoryAxis',
      'propertyName': 'axisStyle'
    },
    'axisTitleColor': {
      'objectName': 'categoryAxis',
      'propertyName': 'axisTitleColor'
    },
    'axisTitle': {
      'objectName': 'categoryAxis',
      'propertyName': 'axisTitle'
    },
    'titleFontSize': {
      'objectName': 'categoryAxis',
      'propertyName': 'titleFontSize'
    },
    'showGridlines': {
      'objectName': 'categoryAxis',
      'propertyName': 'showGridlines'
    },
    'gridlinesColor': {
      'objectName': 'categoryAxis',
      'propertyName': 'gridlinesColor'
    },
    'strokeWidth': {
      'objectName': 'categoryAxis',
      'propertyName': 'strokeWidth'
    },
    'lineStyle': {
      'objectName': 'categoryAxis',
      'propertyName': 'lineStyle'
    }
  },
  'valueAxis': {
    'show': {
      'objectName': 'valueAxis',
      'propertyName': 'show'
    },
    'axisScale': {
      'objectName': 'valueAxis',
      'propertyName': 'axisScale'
    },
    'start': {
      'objectName': 'valueAxis',
      'propertyName': 'start'
    },
    'end': {
      'objectName': 'valueAxis',
      'propertyName': 'end'
    },
    'axisColor': {
      'objectName': 'valueAxis',
      'propertyName': 'axisColor'
    },
    'fontSize': {
      'objectName': 'valueAxis',
      'propertyName': 'fontSize'
    },
    'fontFamily': {
      'objectName': 'valueAxis',
      'propertyName': 'fontFamily'
    },
    'labelDisplayUnits': {
      'objectName': 'valueAxis',
      'propertyName': 'labelDisplayUnits'
    },
    'valueDecimalPlaces': {
      'objectName': 'valueAxis',
      'propertyName': 'valueDecimalPlaces'
    },
    'showAxisTitle': {
      'objectName': 'valueAxis',
      'propertyName': 'showAxisTitle'
    },
    'axisStyle': {
      'objectName': 'valueAxis',
      'propertyName': 'axisStyle'
    },
    'axisTitleColor': {
      'objectName': 'valueAxis',
      'propertyName': 'axisTitleColor'
    },
    'axisTitle': {
      'objectName': 'valueAxis',
      'propertyName': 'axisTitle'
    },
    'titleFontSize': {
      'objectName': 'valueAxis',
      'propertyName': 'titleFontSize'
    },
    'showGridlines': {
      'objectName': 'valueAxis',
      'propertyName': 'showGridlines'
    },
    'gridlinesColor': {
      'objectName': 'valueAxis',
      'propertyName': 'gridlinesColor'
    },
    'strokeWidth': {
      'objectName': 'valueAxis',
      'propertyName': 'strokeWidth'
    },
    'lineStyle': {
      'objectName': 'valueAxis',
      'propertyName': 'lineStyle'
    }
  },
  'legend': {
    'show': {
      'objectName': 'legend',
      'propertyName': 'show'
    },
    'position': {
      'objectName': 'legend',
      'propertyName': 'position'
    },
    'showTitle': {
      'objectName': 'legend',
      'propertyName': 'showTitle'
    },
    'titleText': {
      'objectName': 'legend',
      'propertyName': 'titleText'
    },
    'labelColor': {
      'objectName': 'legend',
      'propertyName': 'labelColor'
    },
    'fontSize': {
      'objectName': 'legend',
      'propertyName': 'fontSize'
    },
    'fontFamily': {
      'objectName': 'legend',
      'propertyName': 'fontFamily'
    }
  },
  'categoryLabels': {
    'show': {
      'objectName': 'categoryLabels',
      'propertyName': 'show'
    },
    'color': {
      'objectName': 'categoryLabels',
      'propertyName': 'color'
    },
    'fontSize': {
      'objectName': 'categoryLabels',
      'propertyName': 'fontSize'
    },
    'fontFamily': {
      'objectName': 'categoryLabels',
      'propertyName': 'fontFamily'
    },
    'showBackground': {
      'objectName': 'categoryLabels',
      'propertyName': 'showBackground'
    },
    'backgroundColor': {
      'objectName': 'categoryLabels',
      'propertyName': 'backgroundColor'
    }
  },
  'xConstantLine': {
    'show': {
      'objectName': 'xConstantLine',
      'propertyName': 'show'
    },
    'value': {
      'objectName': 'xConstantLine',
      'propertyName': 'value'
    },
    'color': {
      'objectName': 'xConstantLine',
      'propertyName': 'color'
    }
  },
  'yConstantLine': {
    'show': {
      'objectName': 'yConstantLine',
      'propertyName': 'show'
    },
    'value': {
      'objectName': 'yConstantLine',
      'propertyName': 'value'
    },
    'color': {
      'objectName': 'yConstantLine',
      'propertyName': 'color'
    }
  },
  'shapes': {
    'size': {
      'objectName': 'shapes',
      'propertyName': 'size'
    }
  },
  'selectionColor': {
    'fillColor': {
      'objectName': 'selectionColor',
      'propertyName': 'fillColor'
    }
  },
  'selectionSaveSettings': {
    'selection': {
      'objectName': 'selectionSaveSettings',
      'propertyName': 'selection'
    }
  },
  'pointsTransparency': {
    'selected': {
      'objectName': 'pointsTransparency',
      'propertyName': 'selected'
    },
    'regular': {
      'objectName': 'pointsTransparency',
      'propertyName': 'regular'
    },
    'unselected': {
      'objectName': 'pointsTransparency',
      'propertyName': 'unselected'
    }
  },
  'fillPoint': {
    'show': {
      'objectName': 'fillPoint',
      'propertyName': 'show'
    }
  },
  'backdrop': {
    'show': {
      'objectName': 'backdrop',
      'propertyName': 'show'
    },
    'url': {
      'objectName': 'backdrop',
      'propertyName': 'url'
    }
  },
  'crosshair': {
    'show': {
      'objectName': 'crosshair',
      'propertyName': 'show'
    }
  },
  'outline': {
    'show': {
      'objectName': 'outline',
      'propertyName': 'show'
    }
  }
};

/***/ }),

/***/ "./src/selectionSaveUtils.ts":
/*!***********************************!*\
  !*** ./src/selectionSaveUtils.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "saveSelection": () => (/* binding */ saveSelection)
/* harmony export */ });
function saveSelection(selection, host) {
  var storedSelection = createStoredSelection(selection);
  var instance = {
    objectName: 'selectionSaveSettings',
    selector: undefined,
    properties: {
      selection: JSON.stringify(storedSelection)
    }
  };
  host.persistProperties({
    replace: [instance]
  });
}
function createStoredSelection(selection) {
  // Here we prevent storing of the 'entirePath' and 'pathElement' properties
  // because they can have a circular object links
  // which causes endless loop when trying to convert to JSON
  return selection.map(function (dataPoint) {
    var storedDataPoint = {};
    for (var key in dataPoint) {
      storedDataPoint[key] = dataPoint[key];
    }
    storedDataPoint.entirePath = null;
    storedDataPoint.pathElement = null;
    return storedDataPoint;
  });
}

/***/ }),

/***/ "./src/selectionUtil.ts":
/*!******************************!*\
  !*** ./src/selectionUtil.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lassoSelectorInit": () => (/* binding */ lassoSelectorInit),
/* harmony export */   "lassoSelectorUpdate": () => (/* binding */ lassoSelectorUpdate),
/* harmony export */   "passSavedPointsToLassoUtil": () => (/* binding */ passSavedPointsToLassoUtil)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/selectAll.js");
/* harmony import */ var _visual__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./visual */ "./src/visual.ts");


var selection = {
  action: 'add',
  active: false,
  mousemoved: false
};
var _circles = {
  all: [],
  selected: [],
  justSelected: [],
  justRemoved: [],
  previousSelected: null
};
var notifyVisual = undefined;
var axesDimensions = undefined;
var transparencyProps = undefined;
var fillPoint = undefined;
var visualBehavior = undefined;
// Interaction with visual
function lassoSelectorInit(mainElement, behavior) {
  visualBehavior = behavior;
  selection.rect = mainElement.append('div').classed('selection-rect', true);
  selection.rect_node = selection.rect.node();
  (0,d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"])('.lasso-scatter-chart-svg').on('mousedown.selection', onMousedown);
  (0,d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"])('html').on('mousemove.selection', onMousemove).on('mouseup.selection', onMouseup);
}
function lassoSelectorUpdate(circles, pointsTransparencyProperties, visualFillPoint, data, callback) {
  transparencyProps = pointsTransparencyProperties;
  axesDimensions = data === null || data === void 0 ? void 0 : data.axesDimensions;
  _circles.all = [];
  circles.each(function () {
    _circles.all.push(this);
  });
  notifyVisual = callback;
  fillPoint = visualFillPoint;
}
function passSavedPointsToLassoUtil(dataPoints) {
  for (var i = 0; i < dataPoints.length; i++) {
    if (dataPoints[i].selected) {
      _circles.selected.push(_circles.all[i]);
      _circles.all[i].setAttribute('data-selection', 'selected');
    }
  }
  if (_circles.previousSelected === null) {
    _circles.previousSelected = _circles.selected;
  }
}
function uploadUpdateToVisual() {
  if (_circles.justSelected.length > 0 && _circles.justRemoved.length > 0) {
    throw new Error('_circles.justSelected and _circles.justRemoved can\'t contain items at the same time!');
  }
  for (var i = 0; i < _circles.justSelected.length; i++) {
    _circles.justSelected[i].setAttribute('data-selection', 'selected');
    _circles.selected.push(_circles.justSelected[i]);
  }
  for (var _i = 0; _i < _circles.justRemoved.length; _i++) {
    _circles.justRemoved[_i].removeAttribute('data-selection');
    removeItemFromArray(_circles.selected, _circles.justRemoved[_i]);
  }
  _circles.justSelected = [];
  _circles.justRemoved = [];
  if (thereAreSelectionChanges() && notifyVisual !== null) {
    var selectedItems = (0,d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"])(_circles.selected);
    notifyVisual === null || notifyVisual === void 0 ? void 0 : notifyVisual(selectedItems);
  }
  _circles.previousSelected = _circles.selected.slice(0);
}
// /Interaction with visual
// Events
function onMousedown(e) {
  var _a;
  if (!axesDimensions) {
    return;
  }
  if (e.button !== 0 ||
  // ignore if it is not main mouse button  
  e === null || e.clientX < axesDimensions.x || e.clientX > axesDimensions.x + axesDimensions.width || e.clientY < axesDimensions.y || e.clientY > axesDimensions.y + axesDimensions.height) {
    return;
  }
  selection.active = true;
  selection.clickEvent = e;
  var _ref = [e.clientX, e.clientY];
  selection.startX = _ref[0];
  selection.startY = _ref[1];
  setRectPos(e.clientX, e.clientY);
  showRect();
  if (!e.ctrlKey) {
    emptyCirclesSelection();
    (_a = visualBehavior === null || visualBehavior === void 0 ? void 0 : visualBehavior.selectionHandler) === null || _a === void 0 ? void 0 : _a.handleClearSelection();
  }
}
function onMousemove(e) {
  if (!selection.active) {
    return;
  }
  if (!selection.mousemoved && e.clientX === selection.clickEvent.clientX && e.clientY === selection.clickEvent.clientY) {
    return;
  }
  if (!selection.mousemoved) {
    selection.mousemoved = true;
    return;
  }
  calculateRectDimensions({
    x: e.clientX,
    y: e.clientY
  });
  setRectPos(selection.x, selection.y);
  setRectSize(selection.width, selection.height);
  for (var i = 0; i < _circles.all.length; i++) {
    var _this = _circles.all[i];
    var collided = detectCollision(_this);
    var state = _this.getAttribute('data-selection');
    if (collided) {
      // Firstly catch the case when we enable the "remove" mode
      if ((_circles.justSelected.length === 0 || _circles.justRemoved.length > 0) && state === 'selected') {
        selection.action = 'remove';
        _this.setAttribute('data-selection', 'justRemoved');
        _circles.justRemoved.push(_this);
        continue;
      }
      if (selection.action === 'add' && state !== 'selected' && state !== 'justSelected') {
        _this.setAttribute('data-selection', 'justSelected');
        _circles.justSelected.push(_this);
      } else if (selection.action === 'remove' && state !== 'justRemoved') {
        _this.setAttribute('data-selection', 'justRemoved');
        _circles.justRemoved.push(_this);
      }
    } else if (selection.action === 'add' && state === 'justSelected') {
      _this.removeAttribute('data-selection');
      removeItemFromArray(_circles.justSelected, _this);
    }
  }
  updateFillOpacity();
}
function onMouseup() {
  if (!selection.active) {
    deactivateRect();
    return;
  }
  if (!selection.mousemoved) {
    // Selection by click
    var target = selection.clickEvent.target;
    if ((0,d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"])(target).classed('scatter-dot')) {
      if (selection.clickEvent.ctrlKey) {
        if (target.hasAttribute('data-selection')) {
          target.removeAttribute('data-selection');
          removeItemFromArray(_circles.selected, target);
        } else {
          target.setAttribute('data-selection', 'justSelected');
          _circles.justSelected.push(target);
        }
      } else {
        emptyCirclesSelection();
        target.setAttribute('data-selection', 'justSelected');
        _circles.justSelected.push(target);
      }
    }
  }
  deactivateRect();
  updateFillOpacity();
  /* launching "uploadUpdateToVisual" function a little later so that the rectangle can disappear immediately
    which looks much better than if it hung on the screen for a while.
    In general, setTimeout is not necessary, it works well just with "uploadUpdateToVisual();"
    */
  setTimeout(uploadUpdateToVisual);
}
// /Events
// DOM
function updateFillOpacity() {
  var _a, _b, _c, _d, _e, _f;
  if (_circles.selected.length === 0 && _circles.justSelected.length === 0) {
    for (var i = 0; i < _circles.all.length; i++) {
      (0,d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"])(_circles.all[i]).style('fill-opacity', fillPoint ? 1 - +((_a = transparencyProps === null || transparencyProps === void 0 ? void 0 : transparencyProps.regular) !== null && _a !== void 0 ? _a : NaN) / 100 : 0).style('stroke-opacity', !fillPoint ? 1 - +((_b = transparencyProps === null || transparencyProps === void 0 ? void 0 : transparencyProps.regular) !== null && _b !== void 0 ? _b : NaN) / 100 : 0);
    }
  } else {
    for (var _i2 = 0; _i2 < _circles.all.length; _i2++) {
      var circle = _circles.all[_i2];
      var d3_circle = (0,d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"])(circle);
      if (circle.getAttribute('data-selection') === 'selected' || circle.getAttribute('data-selection') === 'justSelected') {
        d3_circle.style('fill-opacity', fillPoint ? 1 - +((_c = transparencyProps === null || transparencyProps === void 0 ? void 0 : transparencyProps.selected) !== null && _c !== void 0 ? _c : NaN) / 100 : 0).style('stroke-opacity', !fillPoint ? 1 - +((_d = transparencyProps === null || transparencyProps === void 0 ? void 0 : transparencyProps.selected) !== null && _d !== void 0 ? _d : NaN) / 100 : 1).style('stroke', _visual__WEBPACK_IMPORTED_MODULE_0__.Visual.DefaultStrokeSelectionColor).style('stroke-width', _visual__WEBPACK_IMPORTED_MODULE_0__.Visual.DefaultStrokeSelectionWidth);
      } else {
        d3_circle.style('fill-opacity', fillPoint ? 1 - +((_e = transparencyProps === null || transparencyProps === void 0 ? void 0 : transparencyProps.unselected) !== null && _e !== void 0 ? _e : NaN) / 100 : 0).style('stroke-opacity', !fillPoint ? 1 - +((_f = transparencyProps === null || transparencyProps === void 0 ? void 0 : transparencyProps.unselected) !== null && _f !== void 0 ? _f : NaN) / 100 : 0);
      }
    }
  }
}
// /DOM
// Arrays manipulate
function emptyCirclesSelection() {
  var targets = [_circles.selected, _circles.justSelected, _circles.justRemoved];
  for (var i = 0; i < targets.length; i++) {
    for (var j = 0; j < targets[i].length; j++) {
      targets[i][j].removeAttribute('data-selection');
    }
  }
  var _ref2 = [[], [], []];
  _circles.selected = _ref2[0];
  _circles.justSelected = _ref2[1];
  _circles.justRemoved = _ref2[2];
}
// / Arrays manipulate
// Rect
function showRect() {
  selection.rect.classed('selection-rect-active', true);
}
function hideRect() {
  selection.rect.classed('selection-rect-active', false);
}
function setRectPos(x, y) {
  selection.rect.style('left', x.toString() + 'px').style('top', y.toString() + 'px');
}
function setRectSize(width, height) {
  selection.rect.style('width', width.toString() + 'px').style('height', height.toString() + 'px');
}
function calculateRectDimensions(cursor) {
  var _a, _b, _c, _d, _e, _f;
  var s = selection;
  if (s.startX <= cursor.x) {
    s.x = s.startX;
    s.width = Math.min(cursor.x, ((_a = axesDimensions === null || axesDimensions === void 0 ? void 0 : axesDimensions.x) !== null && _a !== void 0 ? _a : NaN) + ((_b = axesDimensions === null || axesDimensions === void 0 ? void 0 : axesDimensions.width) !== null && _b !== void 0 ? _b : NaN)) - s.startX;
    s.endX = s.x + s.width;
  } else {
    s.x = Math.max(cursor.x, (_c = axesDimensions === null || axesDimensions === void 0 ? void 0 : axesDimensions.x) !== null && _c !== void 0 ? _c : NaN);
    s.width = s.startX - s.x;
    s.endX = s.x;
  }
  if (s.startY <= cursor.y) {
    s.y = s.startY;
    s.height = Math.min(cursor.y, ((_d = axesDimensions === null || axesDimensions === void 0 ? void 0 : axesDimensions.y) !== null && _d !== void 0 ? _d : NaN) + ((_e = axesDimensions === null || axesDimensions === void 0 ? void 0 : axesDimensions.height) !== null && _e !== void 0 ? _e : NaN)) - s.startY;
    s.endY = s.y + s.height;
  } else {
    s.y = Math.max(cursor.y, (_f = axesDimensions === null || axesDimensions === void 0 ? void 0 : axesDimensions.y) !== null && _f !== void 0 ? _f : NaN);
    s.height = s.startY - s.y;
    s.endY = s.y;
  }
}
function deactivateRect() {
  selection.mousemoved = false;
  selection.active = false;
  selection.action = 'add';
  hideRect();
  if (selection.rect_node) {
    var backgroundStyle = selection.rect_node.style.backgroundColor;
    selection.rect_node.setAttribute('style', '');
    selection.rect_node.style.backgroundColor = backgroundStyle;
  }
}
// /Rect
// Utils
function removeItemFromArray(arr, item) {
  for (var i = 0; i < arr.length; i++) {
    if (arr[i] === item) {
      arr.splice(i, 1);
    }
  }
}
function thereAreSelectionChanges() {
  if (_circles.previousSelected === null) {
    _circles.previousSelected = _circles.selected;
    return false;
  }
  if (_circles.previousSelected.length !== _circles.selected.length) {
    return true;
  }
  for (var i = 0; i < _circles.previousSelected.length; i++) {
    if (_circles.previousSelected[i] !== _circles.selected[i]) {
      return true;
    }
  }
  return false;
}
function detectCollision(circle) {
  var bounds = circle.getBoundingClientRect();
  // Consider circle as square and detect collision
  return selection.x <= bounds.right && selection.x + selection.width >= bounds.left && selection.y <= bounds.bottom && selection.y + selection.height >= bounds.top;
}
// /Utils

/***/ }),

/***/ "./src/settings.ts":
/*!*************************!*\
  !*** ./src/settings.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataPointSettings": () => (/* binding */ DataPointSettings),
/* harmony export */   "VisualSettings": () => (/* binding */ VisualSettings)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_dataviewutils_lib_dataViewObjectsParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var VisualSettings = /*#__PURE__*/function (_DataViewObjectsParse) {
  _inherits(VisualSettings, _DataViewObjectsParse);
  var _super = _createSuper(VisualSettings);
  function VisualSettings() {
    var _this;
    _classCallCheck(this, VisualSettings);
    _this = _super.apply(this, arguments);
    _this.dataPoint = new DataPointSettings();
    return _this;
  }
  return _createClass(VisualSettings);
}(powerbi_visuals_utils_dataviewutils_lib_dataViewObjectsParser__WEBPACK_IMPORTED_MODULE_0__.DataViewObjectsParser);
var DataPointSettings = /*#__PURE__*/_createClass(function DataPointSettings() {
  _classCallCheck(this, DataPointSettings);
  // Default color
  this.defaultColor = '';
  // Show all
  this.showAllDataPoints = true;
  // Fill
  this.fill = '';
  // Color saturation
  this.fillRule = '';
  // Text Size
  this.fontSize = 12;
});

/***/ }),

/***/ "./src/tooltipBuilder.ts":
/*!*******************************!*\
  !*** ./src/tooltipBuilder.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bindTooltip": () => (/* binding */ bindTooltip),
/* harmony export */   "createTooltipData": () => (/* binding */ createTooltipData),
/* harmony export */   "createTooltipInfo": () => (/* binding */ createTooltipInfo),
/* harmony export */   "getFormattedValue": () => (/* binding */ getFormattedValue)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");

var DefaultDisplayName = '';
var DefaultDisplayNameDelimiter = '/';
function createTooltipInfo(categoryValue, categories, seriesData) {
  var categorySource = undefined;
  var seriesSource = [];
  if (categories && categories.length > 0) {
    if (categories.length > 1) {
      var compositeCategoriesData = [];
      for (var i = 0, length = categories.length; i < length; i++) {
        compositeCategoriesData.push(categories[i].source);
      }
      categorySource = {
        value: categoryValue,
        metadata: compositeCategoriesData
      };
    } else {
      categorySource = {
        value: categoryValue,
        metadata: [categories[0].source]
      };
    }
  }
  if (seriesData) {
    for (var _i = 0, len = seriesData.length; _i < len; _i++) {
      var singleSeriesData = seriesData[_i];
      if (categorySource && categorySource.metadata[0] === singleSeriesData.metadata.source) {
        continue;
      }
      seriesSource.push({
        value: singleSeriesData.value,
        metadata: singleSeriesData.metadata
      });
    }
  }
  return createTooltipData(categorySource, seriesSource);
}
function createTooltipData(categoryValue, seriesValues) {
  var items = [];
  if (categoryValue) {
    if (categoryValue.metadata.length > 1) {
      var displayName = DefaultDisplayName;
      for (var i = 0, ilen = categoryValue.metadata.length; i < ilen; i++) {
        if (i !== 0) {
          displayName += DefaultDisplayNameDelimiter;
        }
        displayName += categoryValue.metadata[i].displayName;
      }
      var categoryFormattedValue = getFormattedValue(categoryValue.metadata[0], categoryValue.value);
      items.push({
        displayName: displayName,
        value: categoryFormattedValue
      });
    } else {
      var _categoryFormattedValue = getFormattedValue(categoryValue.metadata[0], categoryValue.value);
      items.push({
        displayName: categoryValue.metadata[0].displayName,
        value: _categoryFormattedValue
      });
    }
  }
  for (var _i2 = 0; _i2 < seriesValues.length; _i2++) {
    var seriesData = seriesValues[_i2];
    if (seriesData && seriesData.metadata) {
      var seriesMetadataColumn = seriesData.metadata.source,
        value = seriesData.value;
      if (value || value === 0) {
        var formattedValue = getFormattedValue(seriesMetadataColumn, value);
        items.push({
          displayName: seriesMetadataColumn.displayName,
          value: formattedValue
        });
      }
    }
  }
  return items;
}
function getFormattedValue(column, value) {
  var formatString = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.valueFormatter.getFormatStringByColumn(column);
  return powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.valueFormatter.format(value, formatString);
}
function bindTooltip(tooltipServiceWrapper, selection) {
  tooltipServiceWrapper.addTooltip(selection, function (tooltipEvent) {
    return tooltipEvent.tooltipInfo;
  });
}

/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compareObjects": () => (/* binding */ compareObjects),
/* harmony export */   "getBubbleRadius": () => (/* binding */ getBubbleRadius),
/* harmony export */   "getLineStyleParam": () => (/* binding */ getLineStyleParam),
/* harmony export */   "getMeasureValue": () => (/* binding */ getMeasureValue),
/* harmony export */   "getObjectPropertiesLength": () => (/* binding */ getObjectPropertiesLength),
/* harmony export */   "getSizeRangeForGroups": () => (/* binding */ getSizeRangeForGroups),
/* harmony export */   "getTitleWithUnitType": () => (/* binding */ getTitleWithUnitType),
/* harmony export */   "getUnitType": () => (/* binding */ getUnitType),
/* harmony export */   "getVisibleAngleRange": () => (/* binding */ getVisibleAngleRange),
/* harmony export */   "getVisibleLabelsCountOnAngleRange": () => (/* binding */ getVisibleLabelsCountOnAngleRange),
/* harmony export */   "hasIntersection": () => (/* binding */ hasIntersection)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axis.js");
/* harmony import */ var _visual__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./visual */ "./src/visual.ts");
/* harmony import */ var _labelLayoutUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./labelLayoutUtils */ "./src/labelLayoutUtils.ts");
/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-scale */ "./node_modules/d3-scale/src/linear.js");




var minRatioBubbleSize = 120;
var DisplayUnitValue = 1;
var shapesSizeMin = 0;
var shapesSizeMax = 100;
var rangeMin = 1;
var rangeMax = 4;
function getBubbleRadius(bubbleSize, viewportSize, sizeScale) {
  var shapesSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var minSize = Math.min(viewportSize.width, viewportSize.height);
  if (bubbleSize) {
    var radius = bubbleSize;
    var shapeScale = (0,d3_scale__WEBPACK_IMPORTED_MODULE_2__["default"])([shapesSizeMin, shapesSizeMax], [rangeMin, rangeMax]);
    return minSize / minRatioBubbleSize * sizeScale(radius * shapeScale(shapesSize));
  } else {
    var _radius = _visual__WEBPACK_IMPORTED_MODULE_0__.Visual.DefaultBubbleSize;
    var _shapeScale = (0,d3_scale__WEBPACK_IMPORTED_MODULE_2__["default"])([shapesSizeMin, shapesSizeMax], [rangeMin, rangeMax]);
    return _radius * _shapeScale(shapesSize);
  }
}
function getSizeRangeForGroups(dataViewValueGroups, sizeColumnIndex) {
  var result = {};
  if (dataViewValueGroups) {
    dataViewValueGroups.forEach(function (group) {
      var sizeColumn = getMeasureValue(sizeColumnIndex, group.values);
      var currentRange = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_3__.getRangeForColumn(sizeColumn);
      if (result.min == null || currentRange.min == null || result.min > currentRange.min) {
        result.min = currentRange.min;
      }
      if (result.max == null || currentRange.max == null || result.max < currentRange.max) {
        result.max = currentRange.max;
      }
    });
  }
  return result;
}
function getMeasureValue(measureIndex, seriesValues) {
  if (seriesValues && typeof measureIndex !== 'undefined' && measureIndex >= 0) {
    return seriesValues[measureIndex];
  }
  return null;
}
function getVisibleAngleRange(axes, xVal, yVal, viewport, radius, sizeScale, shapesSize) {
  var width = viewport.width;
  var height = viewport.height;
  var angleRange = [0, 360];
  var x = xVal !== null ? axes.x.scale(xVal) : viewport.width / 2;
  var y = yVal !== null ? axes.y.scale(yVal) : viewport.height / 2;
  var bubbleSize = getBubbleRadius(radius, viewport, sizeScale, shapesSize) + _labelLayoutUtils__WEBPACK_IMPORTED_MODULE_1__.LabelMargin;
  if (hasIntersection(0, 0, x, y, bubbleSize)) {
    angleRange = [270, 360];
  } else if (hasIntersection(width, 0, x, y, bubbleSize)) {
    angleRange = [180, 270];
  } else if (hasIntersection(0, height, x, y, bubbleSize)) {
    angleRange = [0, 90];
  } else if (hasIntersection(width, height, x, y, bubbleSize)) {
    angleRange = [90, 180];
  } else if (hasIntersection(width, y, x, y, bubbleSize)) {
    angleRange = [90, 270];
  } else if (hasIntersection(0, y, x, y, bubbleSize)) {
    angleRange = [-90, 90];
  } else if (hasIntersection(x, 0, x, y, bubbleSize)) {
    angleRange = [180, 360];
  } else if (hasIntersection(x, height, x, y, bubbleSize)) {
    angleRange = [0, 180];
  }
  return angleRange;
}
function hasIntersection(x1, y1, x2, y2, radius) {
  return Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2) <= Math.pow(radius, 2);
}
function getVisibleLabelsCountOnAngleRange(angleRange) {
  var maxLabelPositionOn360deg = 8;
  var maxLabelPositionOn180deg = 3;
  var maxLabelPositionOn90deg = 1;
  var angle = Math.abs(angleRange.reduce(function (pv, cv) {
    return pv - cv;
  }));
  switch (angle) {
    case 90:
      return maxLabelPositionOn90deg;
    case 180:
      return maxLabelPositionOn180deg;
    case 360:
      return maxLabelPositionOn360deg;
    default:
      return 0;
  }
}
function getLineStyleParam(lineStyle) {
  switch (lineStyle) {
    case 'solid':
      return 'none';
    case 'dashed':
      return '7, 5';
    case 'dotted':
      return '2, 2';
  }
  return null;
}
function getUnitType(axisProperties) {
  if (axisProperties.formatter && axisProperties.formatter.displayUnit && axisProperties.formatter.displayUnit.value > DisplayUnitValue) {
    return axisProperties.formatter.displayUnit.title;
  }
  return null;
}
function getTitleWithUnitType(title, axisStyle, axis) {
  var unitTitle = getUnitType(axis) || 'No unit';
  switch (axisStyle) {
    case 'showUnitOnly':
      {
        return unitTitle;
      }
    case 'showTitleOnly':
      {
        return title;
      }
    case 'showBoth':
      {
        return "".concat(title, " (").concat(unitTitle, ")");
      }
  }
  return title;
}
function getObjectPropertiesLength(obj) {
  var counter = 0;
  if (obj) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    for (var key in obj) {
      counter++;
    }
  }
  return counter;
}
function compareObjects(obj1, obj2, property) {
  var isEqual = false;
  if (!Array.isArray(obj1) || !Array.isArray(obj2)) {
    return obj1 === obj2;
  }
  if (obj1.length > 0 && obj2.length > 0 && obj1.length === obj2.length) {
    isEqual = true;
    obj1.forEach(function (o1, i) {
      obj2.forEach(function (o2, j) {
        if (i === j) {
          isEqual = isEqual && o1[property] === o2[property];
        }
      });
    });
  } else if (obj1.length === 0 && obj2.length === 0) {
    isEqual = true;
  }
  return isEqual;
}

/***/ }),

/***/ "./src/visual.ts":
/*!***********************!*\
  !*** ./src/visual.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Visual": () => (/* binding */ Visual)
/* harmony export */ });
/* harmony import */ var jquery_ui_dist_jquery_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery-ui-dist/jquery-ui */ "./node_modules/jquery-ui-dist/jquery-ui.js");
/* harmony import */ var jquery_ui_dist_jquery_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery_ui_dist_jquery_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var d3_transition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-transition */ "./node_modules/d3-transition/src/index.js");
/* harmony import */ var powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils/lib/cssConstants */ "./node_modules/powerbi-visuals-utils-svgutils/lib/cssConstants.js");
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/selectAll.js");
/* harmony import */ var powerbi_visuals_utils_interactivityutils_lib_interactivityBaseService__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! powerbi-visuals-utils-interactivityutils/lib/interactivityBaseService */ "./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivityBaseService.js");
/* harmony import */ var _visualBehavior__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./visualBehavior */ "./src/visualBehavior.ts");
/* harmony import */ var powerbi_visuals_utils_interactivityutils_lib_interactivitySelectionService__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! powerbi-visuals-utils-interactivityutils/lib/interactivitySelectionService */ "./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivitySelectionService.js");
/* harmony import */ var powerbi_visuals_utils_chartutils_lib_legend_legend__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils/lib/legend/legend */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legend.js");
/* harmony import */ var powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js");
/* harmony import */ var powerbi_visuals_utils_tooltiputils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! powerbi-visuals-utils-tooltiputils */ "./node_modules/powerbi-visuals-utils-tooltiputils/lib/index.js");
/* harmony import */ var _playAxisUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./playAxisUtil */ "./src/playAxisUtil.ts");
/* harmony import */ var _gradientUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./gradientUtils */ "./src/gradientUtils.ts");
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axis.js");
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelUtils.js");
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisScale.js");
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisStyle.js");
/* harmony import */ var powerbi_visuals_utils_colorutils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! powerbi-visuals-utils-colorutils */ "./node_modules/powerbi-visuals-utils-colorutils/lib/index.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _categoryUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./categoryUtils */ "./src/categoryUtils.ts");
/* harmony import */ var _metadataUtils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./metadataUtils */ "./src/metadataUtils.ts");
/* harmony import */ var _axesPropertiesUtils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./axesPropertiesUtils */ "./src/axesPropertiesUtils.ts");
/* harmony import */ var _formatPaneUtils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./formatPaneUtils */ "./src/formatPaneUtils.ts");
/* harmony import */ var _legendUtils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./legendUtils */ "./src/legendUtils.ts");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js");
/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./properties */ "./src/properties.ts");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils */ "./src/utils.ts");
/* harmony import */ var powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js");
/* harmony import */ var _tooltipBuilder__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./tooltipBuilder */ "./src/tooltipBuilder.ts");
/* harmony import */ var powerbi_visuals_utils_svgutils_lib_manipulation__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils/lib/manipulation */ "./node_modules/powerbi-visuals-utils-svgutils/lib/manipulation.js");
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/max.js");
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/min.js");
/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! d3-scale */ "./node_modules/d3-scale/src/linear.js");
/* harmony import */ var _labelLayoutUtils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./labelLayoutUtils */ "./src/labelLayoutUtils.ts");
/* harmony import */ var _style_visual_less__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../style/visual.less */ "./style/visual.less");
/* harmony import */ var _selectionUtil__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./selectionUtil */ "./src/selectionUtil.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }


































var Selectors = /*#__PURE__*/_createClass(function Selectors() {
  _classCallCheck(this, Selectors);
});
Selectors.MainSvg = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_19__.createClassAndSelector)('lasso-scatter-chart-svg');
Selectors.VisualSvg = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_19__.createClassAndSelector)('lasso-scatter-visual');
Selectors.ScatterGroup = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_19__.createClassAndSelector)('lasso-scatter-group');
Selectors.ScatterDot = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_19__.createClassAndSelector)('scatter-dot');
Selectors.XAxisLabelSelector = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_19__.createClassAndSelector)('xAxisLabel');
Selectors.YAxisLabelSelector = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_19__.createClassAndSelector)('yAxisLabel');
Selectors.AxisGraphicsContext = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_19__.createClassAndSelector)('axisGraphicsContext');
Selectors.ConstantLine = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_19__.createClassAndSelector)('constantLine');
Selectors.AxisConstantLinesGroup = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_19__.createClassAndSelector)('axisConstantLinesGroup');
Selectors.LabelGraphicsContext = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_19__.createClassAndSelector)('labelGraphicsContext');
Selectors.LabelBackgroundGraphicsContext = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_19__.createClassAndSelector)('labelBackgroundGraphicsContext');
Selectors.SelectionRectangle = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_19__.createClassAndSelector)('selection-rect');
Selectors.XAxisSvgGroup = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_19__.createClassAndSelector)('xAxisSvgGroup');
Selectors.YAxisSvgGroup = (0,powerbi_visuals_utils_svgutils_lib_cssConstants__WEBPACK_IMPORTED_MODULE_19__.createClassAndSelector)('yAxisSvgGroup');
var Visual = /*#__PURE__*/function () {
  function Visual(options) {
    _classCallCheck(this, Visual);
    this.data = null;
    this.dataView = null;
    this.settings = null;
    this.axisLabelsGroup = null;
    this.scatterGroupSelect = null;
    this.scatterSelect = null;
    this.legendProperties = null;
    this.categoryAxisProperties = null;
    this.valueAxisProperties = null;
    this.shapesSize = null;
    this.selectionColorSettings = null;
    this.pointsTransparencyProperties = null;
    this.xAxisConstantLineProperties = null;
    this.yAxisConstantLineProperties = null;
    this.selectionSaveSettings = null;
    this.yAxisIsCategorical = null;
    this.fillPoint = null;
    this.isSelectionRestored = false;
    // Create d3 selection from main HTML element
    this.mainElement = (0,d3_selection__WEBPACK_IMPORTED_MODULE_20__["default"])(options.element);
    // Append SVG element to it. This SVG will contain our visual
    this.mainSvgElement = this.mainElement.append('svg').classed(Selectors.MainSvg.className, true);
    // Append SVG groups for X and Y axes.
    this.xAxisSvgGroup = this.mainSvgElement.append('g').classed(Selectors.XAxisSvgGroup.className, true);
    this.yAxisSvgGroup = this.mainSvgElement.append('g').classed(Selectors.YAxisSvgGroup.className, true);
    this.clearCatcher = (0,powerbi_visuals_utils_interactivityutils_lib_interactivityBaseService__WEBPACK_IMPORTED_MODULE_21__.appendClearCatcher)(this.mainSvgElement);
    // Append an svg group that will contain our visual
    this.visualSvgGroup = this.mainSvgElement.append('g').classed(Selectors.VisualSvg.className, true);
    this.axisGraphicsContext = this.mainSvgElement.append('g').classed(Selectors.AxisGraphicsContext.className, true);
    this.visualSvgGroupMarkers = this.visualSvgGroup.append('svg');
    this.labelGraphicsContext = this.visualSvgGroupMarkers.append('g').classed(Selectors.LabelGraphicsContext.className, true);
    this.axisConstantLinesGroup = this.visualSvgGroup.append('g').classed(Selectors.AxisConstantLinesGroup.className, true);
    this.behavior = new _visualBehavior__WEBPACK_IMPORTED_MODULE_2__.VisualBehavior(this);
    this.host = options.host;
    this.interactivityService = (0,powerbi_visuals_utils_interactivityutils_lib_interactivitySelectionService__WEBPACK_IMPORTED_MODULE_22__.createInteractivitySelectionService)(this.host);
    this.legend = (0,powerbi_visuals_utils_chartutils_lib_legend_legend__WEBPACK_IMPORTED_MODULE_23__.createLegend)(options.element, false, this.interactivityService, true, powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_24__.LegendPosition.Top);
    this.legendElement = this.mainElement.select('svg.legend');
    this.tooltipServiceWrapper = (0,powerbi_visuals_utils_tooltiputils__WEBPACK_IMPORTED_MODULE_3__.createTooltipServiceWrapper)(this.host.tooltipService, options.element);
    this.colorPalette = options.host.colorPalette;
    (0,_selectionUtil__WEBPACK_IMPORTED_MODULE_18__.lassoSelectorInit)(this.mainElement, this.behavior);
    this.playAxis = new _playAxisUtil__WEBPACK_IMPORTED_MODULE_4__.PlayAxis(options.element, this.mainSvgElement, this.tooltipServiceWrapper);
  }
  // eslint-disable-next-line max-lines-per-function
  _createClass(Visual, [{
    key: "update",
    value: function update(options) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
      if (Visual.skipNextUpdate) {
        Visual.skipNextUpdate = false;
        return;
      }
      var dataView = options && options.dataViews && options.dataViews[0];
      this.host.eventService.renderingStarted(options);
      if (!dataView) {
        this.clearVisual((_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : options.viewport);
        return;
      }
      this.dataView = dataView;
      // Parse settings
      this.settings = _settings__WEBPACK_IMPORTED_MODULE_7__.VisualSettings.parse(dataView);
      // Get categories for legend
      var categoryData = (0,_categoryUtils__WEBPACK_IMPORTED_MODULE_8__.getCategories)(dataView);
      // Get metadata
      var grouped = (_d = (_c = dataView.categorical) === null || _c === void 0 ? void 0 : _c.values) === null || _d === void 0 ? void 0 : _d.grouped();
      var categories = ((_e = dataView.categorical) === null || _e === void 0 ? void 0 : _e.categories) || [];
      var metadata = (0,_metadataUtils__WEBPACK_IMPORTED_MODULE_9__.getMetadata)(categories, grouped);
      var dataViewCategorical = dataView.categorical;
      var dataViewMetadata = dataView.metadata;
      var dataValues = dataViewCategorical === null || dataViewCategorical === void 0 ? void 0 : dataViewCategorical.values;
      if (!dataValues) {
        // Should not happen.
        return;
      }
      var dataValueSource = dataValues.source;
      var hasDynamicSeries = !!dataValueSource;
      // if no 'Details' field we use 'Play Axis' as the category
      var categoryIndex = typeof metadata.idx.category !== 'undefined' && metadata.idx.category > -1 ? metadata.idx.category : (_f = metadata.idx.playAxis) !== null && _f !== void 0 ? _f : 0;
      var categoryValues;
      var defaultDataPointColor = '';
      var showAllDataPoints = true;
      var categoryFormatter;
      this.categoryAxisProperties = (0,_axesPropertiesUtils__WEBPACK_IMPORTED_MODULE_10__.getCategoryAxisProperties)(dataViewMetadata, true);
      this.valueAxisProperties = (0,_axesPropertiesUtils__WEBPACK_IMPORTED_MODULE_10__.getValueAxisProperties)(dataViewMetadata, true);
      this.xAxisConstantLineProperties = (0,_axesPropertiesUtils__WEBPACK_IMPORTED_MODULE_10__.getXConstantLineProperties)(dataViewMetadata);
      this.yAxisConstantLineProperties = (0,_axesPropertiesUtils__WEBPACK_IMPORTED_MODULE_10__.getYConstantLineProperties)(dataViewMetadata);
      this.fillPoint = Visual.DefaultFillPoint;
      this.shapesSize = (0,_formatPaneUtils__WEBPACK_IMPORTED_MODULE_11__.getShapesSizeProperty)(dataViewMetadata);
      this.legendProperties = (0,_legendUtils__WEBPACK_IMPORTED_MODULE_12__.getLegendProperties)(dataViewMetadata, true);
      this.pointsTransparencyProperties = (0,_formatPaneUtils__WEBPACK_IMPORTED_MODULE_11__.getPointsTransparencyProperties)(dataViewMetadata);
      this.selectionSaveSettings = (0,_formatPaneUtils__WEBPACK_IMPORTED_MODULE_11__.getSelectionSaveSettings)(dataViewMetadata);
      this.selectionColorSettings = (0,_formatPaneUtils__WEBPACK_IMPORTED_MODULE_11__.getSelectionColorSettings)(dataViewMetadata);
      var categoryAxisProperties = this.categoryAxisProperties;
      var valueAxisProperties = this.valueAxisProperties;
      var xAxisConstantLineProperties = this.xAxisConstantLineProperties;
      var yAxisConstantLineProperties = this.yAxisConstantLineProperties;
      // play axis - it affects the visual only if Play Axis bucket is filled
      if (dataViewCategorical.categories && metadata.idx.playAxis !== undefined && dataViewCategorical.categories[metadata.idx.playAxis]) {
        this.playAxis.enable();
      } else {
        this.playAxis.disable();
      }
      if (dataViewCategorical && dataViewCategorical.categories && dataViewCategorical.categories.length > 0 && dataViewCategorical.categories[categoryIndex]) {
        var mainCategory = dataViewCategorical.categories[categoryIndex];
        categoryValues = mainCategory.values;
        categoryFormatter = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_25__.valueFormatter.create({
          format: powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_25__.valueFormatter.getFormatStringByColumn(mainCategory.source),
          value: categoryValues[0],
          value2: categoryValues[categoryValues.length - 1]
        });
      } else {
        categoryValues = [null];
        // creating default formatter for null value (to get the right string of empty value from the locale)
        categoryFormatter = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_25__.valueFormatter.createDefaultFormatter(null);
      }
      var dataLabelsSettings = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_26__.getDefaultPointLabelSettings();
      // set initial value to category and value axes
      (0,_axesPropertiesUtils__WEBPACK_IMPORTED_MODULE_10__.setCategoryAxisProperties)(categoryAxisProperties, dataViewMetadata.objects);
      (0,_axesPropertiesUtils__WEBPACK_IMPORTED_MODULE_10__.setValueAxisProperties)(valueAxisProperties, dataViewMetadata.objects);
      (0,_formatPaneUtils__WEBPACK_IMPORTED_MODULE_11__.setPointsTransparencyProperty)(this.pointsTransparencyProperties, dataViewMetadata.objects);
      (0,_formatPaneUtils__WEBPACK_IMPORTED_MODULE_11__.setSelectionSaveProperty)(this.selectionSaveSettings, dataViewMetadata.objects);
      (0,_formatPaneUtils__WEBPACK_IMPORTED_MODULE_11__.setSelectionColorProperty)(this.selectionColorSettings, dataViewMetadata.objects);
      if (dataViewMetadata && dataViewMetadata.objects) {
        var objects = dataViewMetadata.objects;
        defaultDataPointColor = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_27__.getFillColor(objects, _properties__WEBPACK_IMPORTED_MODULE_13__.PropertiesOfCapabilities.dataPoint.defaultColor);
        showAllDataPoints = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_27__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_13__.PropertiesOfCapabilities.dataPoint.showAllDataPoints);
        var labelsObj = objects['categoryLabels'];
        if (labelsObj) {
          dataLabelsSettings.show = labelsObj['show'] !== undefined ? labelsObj['show'] : dataLabelsSettings.show;
          dataLabelsSettings.fontSize = labelsObj['fontSize'] !== undefined ? labelsObj['fontSize'] : dataLabelsSettings.fontSize;
          dataLabelsSettings.fontFamily = labelsObj['fontFamily'] !== undefined ? labelsObj['fontFamily'] : dataLabelsSettings.fontFamily;
          if (labelsObj['color'] !== undefined) {
            dataLabelsSettings.labelColor = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_27__.getFillColor(objects, _properties__WEBPACK_IMPORTED_MODULE_13__.PropertiesOfCapabilities.categoryLabels.color);
          }
          if (labelsObj['showBackground'] !== undefined) {
            dataLabelsSettings.showBackground = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_27__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_13__.PropertiesOfCapabilities.categoryLabels.showBackground);
          }
          if (labelsObj['backgroundColor'] !== undefined) {
            dataLabelsSettings.backgroundColor = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_27__.getFillColor(objects, _properties__WEBPACK_IMPORTED_MODULE_13__.PropertiesOfCapabilities.categoryLabels.backgroundColor);
          } else {
            dataLabelsSettings.backgroundColor = Visual.DefaultLabelBackgroundColor;
          }
          dataLabelsSettings.transparency = labelsObj['transparency'] !== undefined ? labelsObj['transparency'] : Visual.DefaultLabelBackgroundColorTransparency;
        }
        (0,_axesPropertiesUtils__WEBPACK_IMPORTED_MODULE_10__.setXConstantLineProperties)(xAxisConstantLineProperties, dataViewMetadata.objects);
        (0,_axesPropertiesUtils__WEBPACK_IMPORTED_MODULE_10__.setYConstantLineProperties)(yAxisConstantLineProperties, dataViewMetadata.objects);
        this.fillPoint = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_27__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_13__.PropertiesOfCapabilities.fillPoint.show, Visual.DefaultFillPoint);
        this.shapesSize.size = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_27__.getValue(objects, _properties__WEBPACK_IMPORTED_MODULE_13__.PropertiesOfCapabilities.shapes.size, Visual.DefaulShapesSize);
        (0,_legendUtils__WEBPACK_IMPORTED_MODULE_12__.setLegendProperties)(this.legendProperties, dataViewMetadata.objects);
      }
      var viewport = {
        height: options.viewport.height - this.legend.getMargins().height,
        width: options.viewport.width - this.legend.getMargins().width
      };
      // viewport size is calculated wrong sometimes, which causing Play Axis bugs.
      // We make it safe using max value between viewport and mainElement for height and width.
      var mainElementHeight = this.mainElement.node().clientHeight;
      var mainElementWidth = this.mainElement.node().clientWidth;
      this.mainSvgElement.attr('width', Math.max(mainElementWidth, viewport.width)).attr('height', Math.max(mainElementHeight, viewport.height));
      // Set up margins for our visual
      var visualMargin = {
        top: 8,
        bottom: 10,
        left: 10,
        right: 10
      };
      // Set up sizes for axes
      var axesSize = {
        xAxisHeight: 15,
        yAxisWidth: 10
      };
      // Build legend
      var legendData = (0,_legendUtils__WEBPACK_IMPORTED_MODULE_12__.buildLegendData)(dataValues, this.host, this.legendProperties, dataValueSource, categories, categoryIndex, hasDynamicSeries);
      (0,_legendUtils__WEBPACK_IMPORTED_MODULE_12__.renderLegend)(this.legend, this.mainSvgElement, options.viewport, legendData, this.legendProperties, this.legendElement);
      // Calculate the resulting size of visual
      var visualSize = {
        width: options.viewport.width - visualMargin.left - visualMargin.right - axesSize.yAxisWidth - this.legend.getMargins().width,
        height: options.viewport.height - visualMargin.top - visualMargin.bottom - axesSize.xAxisHeight - this.legend.getMargins().height - this.playAxis.getHeight()
      };
      var playAxisCategory = categories && typeof metadata.idx.playAxis === 'number' ? categories[metadata.idx.playAxis] : null;
      // Parse data from update options
      var dataPoints;
      if (options.type === 4 /* VisualUpdateType.Resize */ || options.type === Visual.ResizeEndCode) {
        dataPoints = (_h = (_g = this.data) === null || _g === void 0 ? void 0 : _g.dataPoints) !== null && _h !== void 0 ? _h : [];
      } else {
        dataPoints = this.transform(this.host, visualSize, dataView, grouped !== null && grouped !== void 0 ? grouped : [], categories, categoryValues, playAxisCategory, dataViewCategorical, dataViewMetadata, dataValues, categoryData, metadata, defaultDataPointColor, hasDynamicSeries, categoryFormatter, dataValueSource, dataLabelsSettings);
      }
      // Set width and height of visual to SVG group
      this.visualSvgGroupMarkers.attr('width', visualSize.width).attr('height', visualSize.height);
      // Move SVG group elements to appropriate positions.
      this.visualSvgGroup.attr('transform', (0,powerbi_visuals_utils_svgutils_lib_manipulation__WEBPACK_IMPORTED_MODULE_28__.translate)(visualMargin.left + axesSize.yAxisWidth, visualMargin.top));
      this.xAxisSvgGroup.attr('transform', (0,powerbi_visuals_utils_svgutils_lib_manipulation__WEBPACK_IMPORTED_MODULE_28__.translate)(visualMargin.left + axesSize.yAxisWidth, visualMargin.top + visualSize.height));
      this.yAxisSvgGroup.attr('transform', (0,powerbi_visuals_utils_svgutils_lib_manipulation__WEBPACK_IMPORTED_MODULE_28__.translate)(visualMargin.left + axesSize.yAxisWidth, visualMargin.top));
      // Create linear scale for bubble size
      var sizeScale = this.getBubbleSizeScale(dataPoints);
      var sizeRange = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getSizeRangeForGroups)(grouped, metadata.idx.size);
      if (categoryAxisProperties && categoryAxisProperties['showAxisTitle'] !== null && categoryAxisProperties['showAxisTitle'] === false) {
        metadata.axesLabels.x = null;
      }
      if (valueAxisProperties && valueAxisProperties['showAxisTitle'] !== null && valueAxisProperties['showAxisTitle'] === false) {
        metadata.axesLabels.y = null;
      }
      if (dataPoints && dataPoints[0]) {
        var dataPoint = dataPoints[0];
        if (dataPoint.xStart != null) {
          categoryAxisProperties['start'] = dataPoint.xStart;
        }
        if (dataPoint.xEnd != null) {
          categoryAxisProperties['end'] = dataPoint.xEnd;
        }
        if (dataPoint.yStart != null) {
          valueAxisProperties['start'] = dataPoint.yStart;
        }
        if (dataPoint.yEnd != null) {
          valueAxisProperties['end'] = dataPoint.yEnd;
        }
      }
      var axesOptions = {
        categoryAxisProperties: categoryAxisProperties,
        valueAxisProperties: valueAxisProperties,
        xAxisConstantLine: xAxisConstantLineProperties,
        yAxisConstantLine: yAxisConstantLineProperties
      };
      var axes = this.createD3Axes(visualSize, dataPoints, metadata.cols, axesOptions);
      this.yAxisIsCategorical = axes.y.isCategoryAxis;
      this.addUnitTypeToAxisLabel(axes.x, axes.y);
      dataPoints = (0,_labelLayoutUtils__WEBPACK_IMPORTED_MODULE_16__.setDatapointVisibleAngleRange)(dataPoints, axes, visualSize, sizeScale, this.shapesSize);
      if (this.interactivityService) {
        this.interactivityService.applySelectionStateToData(dataPoints);
      }
      // Change rectangular selection color
      (0,d3_selection__WEBPACK_IMPORTED_MODULE_29__["default"])(Selectors.SelectionRectangle.selectorName).style('background-color', this.selectionColorSettings.fillColor);
      // Render visual
      var data = {
        axes: axes,
        sizeRange: sizeRange,
        dataPoints: dataPoints,
        size: visualSize,
        defaultColor: this.settings.dataPoint.defaultColor,
        sizeScale: sizeScale,
        legendData: legendData,
        defaultDataPointColor: defaultDataPointColor,
        showAllDataPoints: showAllDataPoints,
        hasDynamicSeries: hasDynamicSeries,
        xCol: metadata.cols.x,
        yCol: metadata.cols.y,
        dataLabelsSettings: dataLabelsSettings
      };
      this.data = data;
      this.renderAxes(data);
      var ytickText = this.yAxisSvgGroup.selectAll('text').nodes();
      var xtickText = this.xAxisSvgGroup.selectAll('text').nodes();
      var yTickWidth = [];
      var xTickHeight = [];
      ytickText.forEach(function (item) {
        var dimension = item.getBoundingClientRect();
        yTickWidth.push(dimension.width);
      });
      xtickText.forEach(function (item) {
        var dimension = item.getBoundingClientRect();
        xTickHeight.push(dimension.height);
      });
      if (yTickWidth.length === 0) {
        yTickWidth.push(0);
      }
      if (xTickHeight.length === 0) {
        xTickHeight.push(0);
      }
      var yTickOffset = ((_j = (0,d3_array__WEBPACK_IMPORTED_MODULE_30__["default"])(yTickWidth)) !== null && _j !== void 0 ? _j : 0) + (valueAxisProperties.showAxisTitle ? parseInt(valueAxisProperties.titleFontSize.toString()) : 0);
      var xTickOffset = ((_k = (0,d3_array__WEBPACK_IMPORTED_MODULE_30__["default"])(xTickHeight)) !== null && _k !== void 0 ? _k : 0) + (categoryAxisProperties.showAxisTitle ? parseInt(categoryAxisProperties.titleFontSize.toString()) : 0);
      // Calculate the resulting size of visual
      visualSize.width = visualSize.width - yTickOffset;
      visualSize.height = visualSize.height - xTickOffset;
      var axesUpdated = this.createD3Axes(visualSize, dataPoints, metadata.cols, axesOptions);
      this.data.size = visualSize;
      this.data.axes = axesUpdated;
      var legendXOffset = this.legend.getOrientation() === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_24__.LegendPosition.Right || this.legend.getOrientation() === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_24__.LegendPosition.RightCenter ? 0 : this.legend.getMargins().width;
      var legendYOffset = this.legend.getOrientation() === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_24__.LegendPosition.Bottom || this.legend.getOrientation() === powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_24__.LegendPosition.BottomCenter ? 0 : this.legend.getMargins().height;
      this.data.axesDimensions = {
        x: visualMargin.left + axesSize.yAxisWidth + yTickOffset + legendXOffset,
        y: visualMargin.top + legendYOffset,
        width: visualSize.width,
        height: visualSize.height
      };
      // Set width and height of visual to SVG group
      this.visualSvgGroupMarkers.attr('width', visualSize.width).attr('height', visualSize.height);
      // Move SVG group elements to appropriate positions.
      this.visualSvgGroup.attr('transform', (0,powerbi_visuals_utils_svgutils_lib_manipulation__WEBPACK_IMPORTED_MODULE_28__.translate)(visualMargin.left + axesSize.yAxisWidth + yTickOffset, visualMargin.top));
      this.xAxisSvgGroup.attr('transform', (0,powerbi_visuals_utils_svgutils_lib_manipulation__WEBPACK_IMPORTED_MODULE_28__.translate)(visualMargin.left + axesSize.yAxisWidth + yTickOffset, visualMargin.top + visualSize.height));
      this.yAxisSvgGroup.attr('transform', (0,powerbi_visuals_utils_svgutils_lib_manipulation__WEBPACK_IMPORTED_MODULE_28__.translate)(visualMargin.left + axesSize.yAxisWidth + yTickOffset, visualMargin.top));
      this.renderAxes(this.data);
      this.renderVisual(this.data);
      this.renderAxesLabels(metadata.axesLabels, this.legend.getMargins().height + xTickOffset, options.viewport, visualMargin);
      this.renderAxesConstantLines(this.data);
      // Play Axis
      if (this.playAxis.isEnabled()) {
        var playAxisUpdateData = {
          metadata: metadata,
          viewport: options.viewport,
          visualSize: visualSize,
          visualMargin: visualMargin,
          axesSize: axesSize,
          legendSize: this.legend.getMargins(),
          legendPosition: this.legend.getOrientation(),
          xTickOffset: xTickOffset,
          yTickOffset: yTickOffset,
          dataPoints: dataPoints,
          metadataColumn: playAxisCategory === null || playAxisCategory === void 0 ? void 0 : playAxisCategory.source,
          scatterGroupSelect: this.scatterGroupSelect,
          scatterSelect: this.scatterSelect,
          updateType: options.type,
          axes: this.data.axes
        };
        this.playAxis.update(playAxisUpdateData);
      }
      this.host.eventService.renderingFinished(options);
    }
    // eslint-disable-next-line max-lines-per-function
  }, {
    key: "transform",
    value: function transform(visualHost, visualSize, dataView, grouped, categories, categoriesValues, playAxisCategory, dataViewCategorical, dataViewMetadata, dataValues, categoryData, metadata, defaultDataPointColor, hasDynamicSeries, categoryFormatter, dataValueSource, labelSettings) {
      var _a, _b, _c;
      // From each values object, we take a value related to current category,
      // and push it to the values array of our object.
      if (!dataView) {
        return [];
      }
      var indicies = metadata.idx;
      var dataPoints = [];
      var colorHelper = new powerbi_visuals_utils_colorutils__WEBPACK_IMPORTED_MODULE_6__.ColorHelper(this.colorPalette, _properties__WEBPACK_IMPORTED_MODULE_13__.PropertiesOfCapabilities.dataPoint.fill, hasDynamicSeries ? '' : defaultDataPointColor);
      var fontSizeInPx = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_31__.toString(labelSettings.fontSize);
      var labelFontFamily = labelSettings.fontFamily;
      var _loop = function _loop(categoryIdx) {
        var categoryValue = categoriesValues[categoryIdx];
        var _loop2 = function _loop2() {
          var grouping = grouped[seriesIdx];
          var seriesValues = grouping.values;
          var measureX = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getMeasureValue)(indicies.x, seriesValues);
          var measureY = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getMeasureValue)(indicies.y, seriesValues);
          var measureSize = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getMeasureValue)(indicies.size, seriesValues);
          var measureShape = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getMeasureValue)(indicies.shape, seriesValues);
          var measureXStart = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getMeasureValue)(indicies.xStart, seriesValues);
          var measureXEnd = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getMeasureValue)(indicies.xEnd, seriesValues);
          var measureYStart = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getMeasureValue)(indicies.yStart, seriesValues);
          var measureYEnd = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getMeasureValue)(indicies.yEnd, seriesValues);
          var measureGradient = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getMeasureValue)(indicies.gradient, seriesValues);
          var xVal = (0,_categoryUtils__WEBPACK_IMPORTED_MODULE_8__.getDefinedNumberByCategoryId)(measureX, categoryIdx);
          var yVal = (0,_categoryUtils__WEBPACK_IMPORTED_MODULE_8__.getDefinedNumberByCategoryId)(measureY, categoryIdx);
          var sizeVal = (0,_categoryUtils__WEBPACK_IMPORTED_MODULE_8__.getValueFromDataViewValueColumnById)(measureSize, categoryIdx);
          sizeVal = sizeVal !== null && typeof sizeVal === 'number' ? sizeVal : null;
          if (xVal == null && yVal == null && sizeVal == null) {
            return "continue";
          }
          var category = categories && categories.length > Visual.MinAmountOfCategories && typeof indicies.category === 'number' ? categories[indicies.category] : null;
          var identity = visualHost.createSelectionIdBuilder().withCategory(category, categoryIdx).withSeries(dataValues, grouping).createSelectionId();
          var xStart = (0,_categoryUtils__WEBPACK_IMPORTED_MODULE_8__.getValueFromDataViewValueColumnById)(measureXStart, categoryIdx);
          var xEnd = (0,_categoryUtils__WEBPACK_IMPORTED_MODULE_8__.getValueFromDataViewValueColumnById)(measureXEnd, categoryIdx);
          var yStart = (0,_categoryUtils__WEBPACK_IMPORTED_MODULE_8__.getValueFromDataViewValueColumnById)(measureYStart, categoryIdx);
          var yEnd = (0,_categoryUtils__WEBPACK_IMPORTED_MODULE_8__.getValueFromDataViewValueColumnById)(measureYEnd, categoryIdx);
          var gradient = (0,_categoryUtils__WEBPACK_IMPORTED_MODULE_8__.getValueFromDataViewValueColumnById)(measureGradient, categoryIdx);
          var color;
          if (hasDynamicSeries) {
            color = colorHelper.getColorForSeriesValue(grouping.objects, grouping.name);
          } else {
            // If we have no Size measure then use a blank query name
            var measureSource = (_a = measureSize === null || measureSize === void 0 ? void 0 : measureSize.source.queryName) !== null && _a !== void 0 ? _a : '';
            color = colorHelper.getColorForMeasure((_b = category === null || category === void 0 ? void 0 : category.objects) === null || _b === void 0 ? void 0 : _b[categoryIdx], measureSource);
          }
          var seriesData = [];
          if (dataValueSource) {
            // Dynamic series
            seriesData.push({
              value: grouping.name,
              metadata: {
                source: dataValueSource,
                values: []
              }
            });
          }
          if (measureX) {
            seriesData.push({
              value: xVal,
              metadata: measureX
            });
          }
          if (measureY) {
            seriesData.push({
              value: yVal,
              metadata: measureY
            });
          }
          if (measureGradient) {
            seriesData.push({
              value: gradient,
              metadata: measureGradient
            });
          }
          if (measureSize && measureSize.values && measureSize.values.length > Visual.MinAmountOfValues) {
            seriesData.push({
              value: measureSize.values[categoryIdx],
              metadata: measureSize
            });
          }
          if (measureShape && measureShape.values && measureShape.values.length > Visual.MinAmountOfValues) {
            seriesData.push({
              value: measureShape.values[categoryIdx],
              metadata: measureShape
            });
          }
          if (measureXStart && measureXStart.values && measureXStart.values.length > Visual.MinAmountOfValues) {
            seriesData.push({
              value: measureXStart.values[categoryIdx],
              metadata: measureXStart
            });
          }
          if (measureXEnd && measureXEnd.values && measureXEnd.values.length > Visual.MinAmountOfValues) {
            seriesData.push({
              value: measureXEnd.values[categoryIdx],
              metadata: measureXEnd
            });
          }
          if (measureYStart && measureYStart.values && measureYStart.values.length > Visual.MinAmountOfValues) {
            seriesData.push({
              value: measureYStart.values[categoryIdx],
              metadata: measureYStart
            });
          }
          if (measureYEnd && measureYEnd.values && measureYEnd.values.length > Visual.MinAmountOfValues) {
            seriesData.push({
              value: measureYEnd.values[categoryIdx],
              metadata: measureYEnd
            });
          }
          var additionalTooltipValues = seriesValues.filter(function (obj) {
            return (0,powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_32__.hasRoleInValueColumn)(obj, 'Tooltips') && ((0,_utils__WEBPACK_IMPORTED_MODULE_14__.getObjectPropertiesLength)(obj.source.roles) === 1 || (0,powerbi_visuals_utils_dataviewutils_lib_dataRoleHelper__WEBPACK_IMPORTED_MODULE_32__.hasRoleInValueColumn)(obj, 'Values') && (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getObjectPropertiesLength)(obj.source.roles) === 2);
          });
          var playAxisValue = playAxisCategory && playAxisCategory.values[categoryIdx];
          if (playAxisCategory) {
            seriesData.push({
              value: ((_c = playAxisCategory.source.type) === null || _c === void 0 ? void 0 : _c.dateTime) ? new Date(playAxisCategory.values[categoryIdx].toString()).toLocaleDateString('en-US') : playAxisCategory.values[categoryIdx],
              metadata: playAxisCategory
            });
          }
          // add additional fields to tooltip from field buckets
          if (additionalTooltipValues && additionalTooltipValues.length > 0) {
            additionalTooltipValues.map(function (tooltipValue) {
              var value = (0,_categoryUtils__WEBPACK_IMPORTED_MODULE_8__.getValueFromDataViewValueColumnById)(tooltipValue, categoryIdx);
              seriesData.push({
                value: value,
                metadata: tooltipValue
              });
            });
          }
          var tooltipInfo = (0,_tooltipBuilder__WEBPACK_IMPORTED_MODULE_15__.createTooltipInfo)(categoryValue, category ? [category] : undefined, seriesData);
          dataPoints.push({
            x: xVal,
            y: yVal,
            size: sizeVal,
            radius: {
              sizeMeasure: measureSize,
              index: categoryIdx,
              value: sizeVal
            },
            xStart: xStart,
            xEnd: xEnd,
            yStart: yStart,
            yEnd: yEnd,
            tooltipInfo: tooltipInfo,
            columnGroup: grouping,
            fill: color,
            identity: identity,
            formattedCategory: Visual.createLazyFormattedCategory(categoryFormatter, categoryValue),
            selected: Visual.DefaultSelectionStateOfTheDataPoint,
            labelFill: labelSettings.labelColor,
            labelFontSize: fontSizeInPx,
            labelFontFamily: labelFontFamily,
            angleRange: [0, 0],
            labelAnglePosition: 0,
            equalDataPointLabelsCount: {
              i: 0,
              count: 1
            },
            playAxisValue: playAxisValue !== null && playAxisValue !== void 0 ? playAxisValue : undefined
          });
        };
        for (var seriesIdx = 0, len = grouped.length; seriesIdx < len; seriesIdx++) {
          var _ret = _loop2();
          if (_ret === "continue") continue;
        }
      };
      for (var categoryIdx = 0, ilen = categoriesValues.length; categoryIdx < ilen; categoryIdx++) {
        _loop(categoryIdx);
      }
      return dataPoints;
    }
  }, {
    key: "renderVisual",
    value:
    // eslint-disable-next-line max-lines-per-function
    function renderVisual(data) {
      var _this = this;
      var _a, _b;
      // const colorHelper = new ColorHelper(this.host.colorPalette);
      var dataPoints = data.dataPoints.filter(function (d) {
        return !(data.xCol != null && d.x == null || data.yCol != null && d.y == null);
      });
      // Add an svg group containing the dots.
      var groups = this.visualSvgGroupMarkers.selectAll(Selectors.ScatterGroup.selectorName).data([dataPoints]);
      var groupsEnter = groups.enter().append('g').classed(Selectors.ScatterGroup.className, true);
      this.scatterGroupSelect = groups.merge(groupsEnter);
      groups.exit().remove();
      // Add dots to the group.
      var groupDots = groups.merge(groupsEnter).selectAll(Selectors.ScatterDot.selectorName).data(function (d) {
        return d;
      });
      var groupDotsEnter = groupDots.enter().append('circle').classed(Selectors.ScatterDot.className, true);
      this.scatterSelect = groupDots.merge(groupDotsEnter);
      groupDots.exit().remove();
      groupDots.merge(groupDotsEnter).attr('cx', function (d) {
        return _this.getBubblePositionX(data.axes.x.scale, d.x);
      }).attr('cy', function (d) {
        return _this.getBubblePositionY(data.axes.y.scale, d.y);
      }).attr('r', function (d) {
        var _a;
        return (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getBubbleRadius)(d.radius.value, data.size, data.sizeScale, (_a = _this.shapesSize) === null || _a === void 0 ? void 0 : _a.size);
      }).style('fill-opacity', function (d) {
        return _this.fillPoint ? _this.getFillOpacity(d) : 0;
      }).style('fill', function (d) {
        var _a;
        return (_a = d.fill) !== null && _a !== void 0 ? _a : null;
      }).style('stroke-opacity', function (d) {
        if (_this.fillPoint) {
          if (d.selected) {
            return 1;
          } else {
            return 0;
          }
        } else {
          return _this.getFillOpacity(d);
        }
      }).style('stroke', function (d) {
        var _a;
        if (_this.fillPoint && d.selected) {
          return Visual.DefaultStrokeSelectionColor;
        }
        return (_a = d.fill) !== null && _a !== void 0 ? _a : null;
      }).style('stroke-width', function (d) {
        if (d.selected) {
          return Visual.DefaultStrokeSelectionWidth;
        }
        return Visual.DefaultStrokeWidth;
      }).each(function (d, i) {
        d.index = i;
      });
      (0,_labelLayoutUtils__WEBPACK_IMPORTED_MODULE_16__.bindLabelLayout)(data.dataLabelsSettings, data, this.labelGraphicsContext, (_a = this.shapesSize) === null || _a === void 0 ? void 0 : _a.size);
      (0,_tooltipBuilder__WEBPACK_IMPORTED_MODULE_15__.bindTooltip)(this.tooltipServiceWrapper, this.scatterSelect);
      this.bindInteractivityService(this.scatterSelect, dataPoints);
      // restore saved selection
      if (!this.isSelectionRestored) {
        var newDataPoints = data.dataPoints.filter(function (d) {
          var _a;
          return (_a = _this.selectionSaveSettings) === null || _a === void 0 ? void 0 : _a.selection.some(function (item) {
            return item.identity.key === d.identity.key;
          });
        });
        (_b = this.behavior.selectionHandler) === null || _b === void 0 ? void 0 : _b.handleSelection(newDataPoints, false);
        (0,_selectionUtil__WEBPACK_IMPORTED_MODULE_18__.passSavedPointsToLassoUtil)(data.dataPoints);
        this.isSelectionRestored = true;
      }
    }
  }, {
    key: "bindInteractivityService",
    value: function bindInteractivityService(dataPointsSelection, dataPoints) {
      var _a, _b;
      if (!this.behavior || !this.interactivityService) {
        return;
      }
      var behaviorOptions = {
        lassoSelectorUpdate: _selectionUtil__WEBPACK_IMPORTED_MODULE_18__.lassoSelectorUpdate,
        clearCatcher: this.clearCatcher,
        selection: dataPointsSelection,
        legendItems: this.legendElement.selectAll('.legendItem'),
        getFillOpacity: this.getFillOpacity.bind(this),
        pointsTransparencyProperties: this.pointsTransparencyProperties,
        host: this.host,
        data: this.data,
        fillPoint: this.fillPoint,
        selectionSaveSettings: (_b = (_a = this.selectionSaveSettings) === null || _a === void 0 ? void 0 : _a.selection) !== null && _b !== void 0 ? _b : null,
        dataPoints: dataPoints,
        behavior: this.behavior
      };
      this.interactivityService.bind(behaviorOptions);
    }
  }, {
    key: "getFillOpacity",
    value: function getFillOpacity(dataPoint) {
      var pointsTransparencyProperties = this.pointsTransparencyProperties;
      if (dataPoint.selected) {
        return 1 - (pointsTransparencyProperties === null || pointsTransparencyProperties === void 0 ? void 0 : pointsTransparencyProperties.selected) / 100;
      } else if (this.interactivityService.hasSelection()) {
        return 1 - (pointsTransparencyProperties === null || pointsTransparencyProperties === void 0 ? void 0 : pointsTransparencyProperties.unselected) / 100;
      }
      return 1 - (pointsTransparencyProperties === null || pointsTransparencyProperties === void 0 ? void 0 : pointsTransparencyProperties.regular) / 100;
    }
  }, {
    key: "addUnitTypeToAxisLabel",
    value: function addUnitTypeToAxisLabel(xAxis, yAxis) {
      var unitType = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getUnitType)(xAxis);
      if (xAxis.axisLabel && unitType) {
        if (xAxis.isCategoryAxis) {
          xAxis.axisLabel = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_33__.createAxisLabel(this.categoryAxisProperties, xAxis.axisLabel, unitType);
        } else {
          xAxis.axisLabel = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_33__.createAxisLabel(this.valueAxisProperties, xAxis.axisLabel, unitType);
        }
      }
      unitType = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getUnitType)(yAxis);
      if (yAxis.axisLabel && unitType) {
        if (!yAxis.isCategoryAxis) {
          yAxis.axisLabel = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_33__.createAxisLabel(this.valueAxisProperties, yAxis.axisLabel, unitType);
        } else {
          yAxis.axisLabel = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_33__.createAxisLabel(this.categoryAxisProperties, yAxis.axisLabel, unitType);
        }
      }
    }
    // eslint-disable-next-line max-lines-per-function
  }, {
    key: "renderAxes",
    value: function renderAxes(data) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
      // Now we call the axis funciton, that will render an axis on our visual.
      if (((_a = this.categoryAxisProperties) === null || _a === void 0 ? void 0 : _a['show']) !== undefined && !this.categoryAxisProperties['show']) {
        this.xAxisSvgGroup.selectAll('*').remove();
      } else {
        this.xAxisSvgGroup.call(data.axes.x.axis);
        var axisText = this.xAxisSvgGroup.selectAll('g').selectAll('text');
        var axisLines = this.xAxisSvgGroup.selectAll('g').selectAll('line');
        var color = (_b = this.categoryAxisProperties) === null || _b === void 0 ? void 0 : _b.axisColor;
        var fontSize = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_31__.toString((_c = this.categoryAxisProperties) === null || _c === void 0 ? void 0 : _c.fontSize);
        var fontFamily = (_d = this.categoryAxisProperties) === null || _d === void 0 ? void 0 : _d.fontFamily;
        var gridlinesColor = (_e = this.categoryAxisProperties) === null || _e === void 0 ? void 0 : _e.gridlinesColor;
        var strokeWidth = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_31__.toString((_f = this.categoryAxisProperties) === null || _f === void 0 ? void 0 : _f.strokeWidth);
        var showGridlines = (_g = this.categoryAxisProperties) === null || _g === void 0 ? void 0 : _g.showGridlines;
        var lineStyle = (_h = this.categoryAxisProperties) === null || _h === void 0 ? void 0 : _h.lineStyle;
        if (color) {
          axisText.style('fill', color).style('stroke', 'none');
        }
        if (fontSize) {
          axisText.style('font-size', fontSize);
        }
        if (fontFamily) {
          axisText.style('font-family', fontFamily);
        }
        if (gridlinesColor) {
          axisLines.style('stroke', gridlinesColor);
        }
        if (strokeWidth) {
          axisLines.style('stroke-width', strokeWidth);
        }
        if (lineStyle) {
          var strokeDasharray = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getLineStyleParam)(lineStyle);
          axisLines.style('stroke-dasharray', function () {
            return strokeDasharray;
          });
        }
        axisLines.style('opacity', showGridlines ? '1' : '0');
      }
      if (((_j = this.valueAxisProperties) === null || _j === void 0 ? void 0 : _j['show']) !== undefined && !this.valueAxisProperties['show']) {
        this.yAxisSvgGroup.selectAll('*').remove();
      } else {
        this.yAxisSvgGroup.call(data.axes.y.axis);
        var _axisText = this.yAxisSvgGroup.selectAll('g').selectAll('text');
        var _axisLines = this.yAxisSvgGroup.selectAll('g').selectAll('line');
        var _color = (_k = this.valueAxisProperties) === null || _k === void 0 ? void 0 : _k.axisColor;
        var _fontSize = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_31__.toString((_l = this.valueAxisProperties) === null || _l === void 0 ? void 0 : _l.fontSize);
        var _fontFamily = (_m = this.valueAxisProperties) === null || _m === void 0 ? void 0 : _m.fontFamily;
        var _gridlinesColor = (_o = this.valueAxisProperties) === null || _o === void 0 ? void 0 : _o.gridlinesColor;
        var _strokeWidth = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_31__.toString((_p = this.valueAxisProperties) === null || _p === void 0 ? void 0 : _p.strokeWidth);
        var _showGridlines = (_q = this.valueAxisProperties) === null || _q === void 0 ? void 0 : _q.showGridlines;
        var _lineStyle = (_r = this.valueAxisProperties) === null || _r === void 0 ? void 0 : _r.lineStyle;
        if (_color) {
          _axisText.style('fill', _color).style('stroke', 'none');
        }
        if (_fontSize) {
          _axisText.style('font-size', _fontSize);
        }
        if (_fontFamily) {
          _axisText.style('font-family', _fontFamily);
        }
        if (_gridlinesColor) {
          _axisLines.style('stroke', _gridlinesColor);
        }
        if (_strokeWidth) {
          _axisLines.style('stroke-width', _strokeWidth);
        }
        if (_lineStyle) {
          var _strokeDasharray = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getLineStyleParam)(_lineStyle);
          _axisLines.style('stroke-dasharray', function () {
            return _strokeDasharray;
          });
        }
        _axisLines.style('opacity', _showGridlines ? '1' : '0');
      }
    }
    // eslint-disable-next-line max-lines-per-function
  }, {
    key: "renderAxesLabels",
    value: function renderAxesLabels(axisLabels, legendMargin, viewport, visualMargin) {
      var _this2 = this;
      var _a, _b, _c, _d, _e, _f, _g, _h;
      var margin = visualMargin;
      var width = viewport.width;
      var height = viewport.height;
      var showY1OnRight = false;
      var axisLabelsData = [axisLabels.x, axisLabels.y];
      // Create text elements for the axis labels.
      this.axisLabelsGroup = this.axisGraphicsContext.selectAll('*').data(axisLabelsData);
      var axisLabelsGroupEnter = this.axisLabelsGroup.enter().append('text').classed(Selectors.XAxisLabelSelector.className, true);
      this.axisLabelsGroup.exit().remove();
      // Read the properties of the axes.
      var xColor = (_a = this.categoryAxisProperties) === null || _a === void 0 ? void 0 : _a.axisTitleColor;
      var xFontSize = parseInt((_b = this.categoryAxisProperties) === null || _b === void 0 ? void 0 : _b.titleFontSize);
      var xFontSizeString = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_31__.toString(xFontSize);
      var xTitle = (_c = this.categoryAxisProperties) === null || _c === void 0 ? void 0 : _c.axisTitle.toString();
      var xAxisStyle = (_d = this.categoryAxisProperties) === null || _d === void 0 ? void 0 : _d.axisStyle;
      var yColor = (_e = this.valueAxisProperties) === null || _e === void 0 ? void 0 : _e.axisTitleColor;
      var yFontSize = (_f = this.valueAxisProperties) === null || _f === void 0 ? void 0 : _f.titleFontSize;
      var yFontSizeString = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_31__.toString(yFontSize);
      var yTitle = (_g = this.valueAxisProperties) === null || _g === void 0 ? void 0 : _g.axisTitle;
      var yAxisStyle = (_h = this.valueAxisProperties) === null || _h === void 0 ? void 0 : _h.axisStyle;
      // Set the properties of the axes.
      this.axisLabelsGroup.merge(axisLabelsGroupEnter).style('text-anchor', 'middle').text(function (d) {
        return d;
      }).call(function (t) {
        var _a, _b, _c;
        // X Axis
        var textSelectionX = (0,d3_selection__WEBPACK_IMPORTED_MODULE_20__["default"])(t.nodes()[0]);
        textSelectionX.attr('transform', (0,powerbi_visuals_utils_svgutils_lib_manipulation__WEBPACK_IMPORTED_MODULE_28__.translate)((width + margin.left) / Visual.AxisLabelOffset, height - _this2.legend.getMargins().height - _this2.playAxis.getHeight() - xFontSize));
        if (xTitle && xTitle.toString().length > 0) {
          textSelectionX.text(xTitle);
        }
        if (xAxisStyle && ((_a = _this2.data) === null || _a === void 0 ? void 0 : _a.axes.x)) {
          var newTitle = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getTitleWithUnitType)(textSelectionX.text(), xAxisStyle, _this2.data.axes.x);
          textSelectionX.text(newTitle);
        }
        if (xColor) {
          textSelectionX.style('fill', xColor);
        }
        if (xFontSizeString) {
          textSelectionX.style('font-size', xFontSizeString);
        }
        // Y Axis
        var textSelectionY = (0,d3_selection__WEBPACK_IMPORTED_MODULE_20__["default"])(t.nodes()[1]);
        textSelectionY.attr('transform', Visual.YAxisLabelTransformRotate).attr('x', -((height - margin.top - legendMargin - margin.bottom) / Visual.AxisLabelOffset)).attr('y', showY1OnRight ? width + margin.right - yFontSize : margin.left / 2).attr('dy', Visual.DefaultDY);
        if (yTitle && yTitle.toString().length > 0) {
          textSelectionY.text(yTitle);
        }
        if (yAxisStyle && ((_b = _this2.data) === null || _b === void 0 ? void 0 : _b.axes.y)) {
          var _newTitle = (0,_utils__WEBPACK_IMPORTED_MODULE_14__.getTitleWithUnitType)(textSelectionY.text(), yAxisStyle, (_c = _this2.data) === null || _c === void 0 ? void 0 : _c.axes.y);
          textSelectionY.text(_newTitle);
        }
        if (yColor) {
          textSelectionY.style('fill', yColor);
        }
        if (yFontSizeString) {
          textSelectionY.style('font-size', yFontSizeString);
        }
      });
    }
  }, {
    key: "renderAxesConstantLines",
    value: function renderAxesConstantLines(data) {
      var axesLinesData = [this.xAxisConstantLineProperties, this.yAxisConstantLineProperties];
      var size = data.size;
      var xScale = data.axes.x.scale;
      var yScale = data.axes.y.scale;
      var axesLinesGroup = this.axisConstantLinesGroup.selectAll(Selectors.ConstantLine.selectorName).data(axesLinesData);
      var axesLinesGroupEnter = axesLinesGroup.enter().append('line').classed(Selectors.ConstantLine.className, true);
      axesLinesGroup.exit().remove();
      axesLinesGroup.merge(axesLinesGroupEnter).call(function (lines) {
        var _a, _b;
        var xConstantLine = (0,d3_selection__WEBPACK_IMPORTED_MODULE_20__["default"])(lines.nodes()[0]);
        if ((_a = axesLinesData[0]) === null || _a === void 0 ? void 0 : _a.show) {
          xConstantLine.attr('x1', xScale(axesLinesData[0].value)).attr('x2', xScale(axesLinesData[0].value)).attr('y1', '0').attr('y2', size.height).attr('stroke', axesLinesData[0].color).style('opacity', 1);
        } else {
          xConstantLine.style('opacity', 0);
        }
        var yConstantLine = (0,d3_selection__WEBPACK_IMPORTED_MODULE_20__["default"])(lines.nodes()[1]);
        if ((_b = axesLinesData[1]) === null || _b === void 0 ? void 0 : _b.show) {
          yConstantLine.attr('y1', yScale(axesLinesData[1].value)).attr('y2', yScale(axesLinesData[1].value)).attr('x1', '0').attr('x2', size.width).attr('stroke', axesLinesData[1].color).style('opacity', 1);
        } else {
          yConstantLine.style('opacity', 0);
        }
      });
    }
    // eslint-disable-next-line max-lines-per-function
  }, {
    key: "createD3Axes",
    value: function createD3Axes(visualSize, items, metaDataColumn, options) {
      var _a, _b, _c, _d;
      // Create ordinal scale for X axis.
      var dataDomainMinX = (_a = (0,d3_array__WEBPACK_IMPORTED_MODULE_34__["default"])(items, function (d) {
        return d.x;
      })) !== null && _a !== void 0 ? _a : Visual.DefaultDataDomainMin;
      var dataDomainMaxX = (_b = (0,d3_array__WEBPACK_IMPORTED_MODULE_30__["default"])(items, function (d) {
        return d.x;
      })) !== null && _b !== void 0 ? _b : Visual.DefaultDataDomainMin;
      var xAxisProperties = null;
      var categoryAxisProperties = options.categoryAxisProperties;
      var valueAxisProperties = options.valueAxisProperties;
      var xLine = options.xAxisConstantLine.value;
      var isShowXLine = options.xAxisConstantLine.show;
      var yLine = options.yAxisConstantLine.value;
      var isShowYLine = options.yAxisConstantLine.show;
      dataDomainMinX = isShowXLine && xLine < dataDomainMinX ? xLine : dataDomainMinX;
      dataDomainMaxX = isShowXLine && xLine > dataDomainMaxX ? xLine : dataDomainMaxX;
      var forcedXDomain = [categoryAxisProperties ? categoryAxisProperties['start'] : null, categoryAxisProperties ? categoryAxisProperties['end'] : null];
      var categoryAxisDisplayUnits = categoryAxisProperties && categoryAxisProperties['labelDisplayUnits'] != null ? categoryAxisProperties['labelDisplayUnits'] : Visual.LabelDisplayUnitsDefault;
      var categoryAxisScaleType = categoryAxisProperties && categoryAxisProperties['axisScale'] != null ? categoryAxisProperties['axisScale'] : undefined;
      var xAxisPrecision = categoryAxisProperties && categoryAxisProperties['valueDecimalPlaces'] != null && categoryAxisProperties['valueDecimalPlaces'] >= 0 ? categoryAxisProperties['valueDecimalPlaces'] : Visual.DefaultPrecision;
      dataDomainMinX = forcedXDomain[0] !== null && forcedXDomain[0] !== undefined ? forcedXDomain[0] : dataDomainMinX;
      dataDomainMaxX = forcedXDomain[1] !== null && forcedXDomain[1] !== undefined ? forcedXDomain[1] : dataDomainMaxX;
      var xAxisFormatString = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_25__.valueFormatter.getFormatStringByColumn(metaDataColumn.x);
      if (dataDomainMinX === 0 && dataDomainMaxX === 0) {
        dataDomainMinX = -1;
        dataDomainMaxX = 1;
      }
      if (xAxisPrecision === 0) {
        xAxisPrecision = xAxisPrecision.toString();
      }
      xAxisProperties = (0,powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_33__.createAxis)({
        pixelSpan: visualSize.width,
        dataDomain: [dataDomainMinX, dataDomainMaxX],
        metaDataColumn: metaDataColumn.x,
        formatString: xAxisFormatString,
        outerPadding: 0,
        innerPadding: 0,
        isScalar: true,
        isVertical: false,
        isCategoryAxis: true,
        useTickIntervalForDisplayUnits: true,
        scaleType: categoryAxisScaleType,
        axisDisplayUnits: categoryAxisDisplayUnits,
        axisPrecision: xAxisPrecision
      });
      // Hide all ticks for X axis.
      xAxisProperties.axis.tickSizeInner(-visualSize.height).tickPadding(Visual.DefaultAxisXTickPadding).tickSizeOuter(1);
      // Create linear scale for Y axis
      var dataDomainMinY = (_c = (0,d3_array__WEBPACK_IMPORTED_MODULE_34__["default"])(items, function (d) {
        return d.y;
      })) !== null && _c !== void 0 ? _c : Visual.DefaultDataDomainMin;
      var dataDomainMaxY = (_d = (0,d3_array__WEBPACK_IMPORTED_MODULE_30__["default"])(items, function (d) {
        return d.y;
      })) !== null && _d !== void 0 ? _d : Visual.DefaultDataDomainMin;
      dataDomainMinY = isShowYLine && dataDomainMinY != undefined && yLine < dataDomainMinY ? yLine : dataDomainMinY;
      dataDomainMaxY = isShowYLine && dataDomainMaxY != undefined && yLine > dataDomainMaxY ? yLine : dataDomainMaxY;
      var yAxisFormatString = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_25__.valueFormatter.getFormatStringByColumn(metaDataColumn.y);
      var valueAxisDisplayUnits = valueAxisProperties && valueAxisProperties['labelDisplayUnits'] != null ? valueAxisProperties['labelDisplayUnits'] : Visual.LabelDisplayUnitsDefault;
      var valueAxisScaleType = valueAxisProperties && valueAxisProperties['axisScale'] != null ? valueAxisProperties['axisScale'] : undefined;
      var yAxisPrecision = valueAxisProperties && valueAxisProperties['valueDecimalPlaces'] != null && valueAxisProperties['valueDecimalPlaces'] >= 0 ? valueAxisProperties['valueDecimalPlaces'] : Visual.DefaultPrecision;
      var forcedYDomain = [valueAxisProperties ? valueAxisProperties['start'] : null, valueAxisProperties ? valueAxisProperties['end'] : null];
      dataDomainMinY = forcedYDomain[0] !== null && forcedYDomain[0] !== undefined ? forcedYDomain[0] : dataDomainMinY;
      dataDomainMaxY = forcedYDomain[1] !== null && forcedYDomain[1] !== undefined ? forcedYDomain[1] : dataDomainMaxY;
      if (dataDomainMinY === 0 && dataDomainMaxY === 0) {
        dataDomainMinY = -1;
        dataDomainMaxY = 1;
      }
      if (yAxisPrecision === 0) {
        yAxisPrecision = yAxisPrecision.toString();
      }
      var yAxisProperties = (0,powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_33__.createAxis)({
        pixelSpan: visualSize.height,
        dataDomain: [dataDomainMinY, dataDomainMaxY],
        metaDataColumn: metaDataColumn.y,
        formatString: yAxisFormatString,
        outerPadding: 0,
        innerPadding: 0,
        isScalar: true,
        isVertical: true,
        isCategoryAxis: false,
        useTickIntervalForDisplayUnits: true,
        scaleType: valueAxisScaleType,
        axisDisplayUnits: valueAxisDisplayUnits,
        axisPrecision: yAxisPrecision
      });
      // For Y axis, make ticks appear full-width.
      yAxisProperties.axis.tickSizeInner(-visualSize.width).tickPadding(Visual.DefaultAxisYTickPadding).tickSizeOuter(1);
      return {
        x: xAxisProperties,
        y: yAxisProperties
      };
    }
    // eslint-disable-next-line max-lines-per-function
  }, {
    key: "getCategoryAxisValues",
    value: function getCategoryAxisValues(instances) {
      var _a, _b;
      var isScalar = true,
        logPossible = (0,powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_33__.isLogScalePossible)((_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.axes.x.dataDomain) !== null && _b !== void 0 ? _b : []),
        scaleOptions = [powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_35__.log, powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_35__.linear]; // until options can be update in propPane, show all options
      if (!isScalar) {
        if (this.categoryAxisProperties) {
          this.categoryAxisProperties['start'] = null;
          this.categoryAxisProperties['end'] = null;
        }
      }
      var instance = {
        selector: null,
        properties: {},
        objectName: 'categoryAxis',
        validValues: {
          axisScale: scaleOptions,
          valueDecimalPlaces: {
            numberRange: {
              min: 0,
              max: 15
            }
          }
        }
      };
      instance.properties['show'] = this.categoryAxisProperties && this.categoryAxisProperties['show'] != null ? this.categoryAxisProperties['show'] : true;
      if (this.yAxisIsCategorical) {
        // in case of e.g. barChart
        instance.properties['position'] = this.valueAxisProperties && this.valueAxisProperties['position'] != null ? this.valueAxisProperties['position'] : "Left" /* YAxisPosition.left */;
      }

      instance.properties['axisType'] = isScalar ? "Scalar" /* AxisType.scalar */ : "Categorical" /* AxisType.categorical */;
      if (isScalar) {
        if (logPossible) {
          instance.properties['axisScale'] = this.categoryAxisProperties && this.categoryAxisProperties['axisScale'] != null && logPossible ? this.categoryAxisProperties['axisScale'] : powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_35__.linear;
        }
        if (this.categoryAxisProperties) {
          instance.properties['start'] = this.categoryAxisProperties['start'];
          instance.properties['end'] = this.categoryAxisProperties['end'];
        }
        instance.properties['axisColor'] = this.categoryAxisProperties ? this.categoryAxisProperties['axisColor'] : Visual.DefaultColor;
        instance.properties['fontSize'] = this.categoryAxisProperties ? this.categoryAxisProperties['fontSize'] : Visual.DefaultTitleFontSize;
        instance.properties['fontFamily'] = this.categoryAxisProperties ? this.categoryAxisProperties['fontFamily'] : Visual.DefaultFontFamily;
        instance.properties['labelDisplayUnits'] = this.categoryAxisProperties && this.categoryAxisProperties['labelDisplayUnits'] != null ? this.categoryAxisProperties['labelDisplayUnits'] : Visual.LabelDisplayUnitsDefault;
      }
      instance.properties['valueDecimalPlaces'] = this.categoryAxisProperties && this.categoryAxisProperties['valueDecimalPlaces'] !== undefined && this.categoryAxisProperties['valueDecimalPlaces'] >= 0 ? this.categoryAxisProperties['valueDecimalPlaces'] : Visual.DefaultPrecision;
      instance.properties['showAxisTitle'] = this.categoryAxisProperties && this.categoryAxisProperties['showAxisTitle'] != null ? this.categoryAxisProperties['showAxisTitle'] : true;
      instance.properties['axisStyle'] = this.categoryAxisProperties && this.categoryAxisProperties['axisStyle'] != null ? this.categoryAxisProperties['axisStyle'] : powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_36__.showTitleOnly;
      instance.properties['axisTitleColor'] = this.categoryAxisProperties && this.categoryAxisProperties['axisTitleColor'] != null ? this.categoryAxisProperties['axisTitleColor'] : Visual.DefaultColor;
      instance.properties['axisTitle'] = this.categoryAxisProperties ? this.categoryAxisProperties['axisTitle'] : Visual.DefaultAxisTitle;
      instance.properties['titleFontSize'] = this.categoryAxisProperties ? this.categoryAxisProperties['titleFontSize'] : Visual.DefaultTitleFontSize;
      instance.properties['showGridlines'] = this.categoryAxisProperties && this.categoryAxisProperties['showGridlines'] != null ? this.categoryAxisProperties['showGridlines'] : true;
      if (instance.properties['showGridlines']) {
        instance.properties['gridlinesColor'] = this.categoryAxisProperties && this.categoryAxisProperties['gridlinesColor'] != null ? this.categoryAxisProperties['gridlinesColor'] : Visual.DefaultGridlinesColor;
        instance.properties['strokeWidth'] = this.categoryAxisProperties && this.categoryAxisProperties['strokeWidth'] != null ? this.categoryAxisProperties['strokeWidth'] : Visual.DefaultStrokeWidth;
        instance.properties['lineStyle'] = this.categoryAxisProperties && this.categoryAxisProperties['lineStyle'] != null ? this.categoryAxisProperties['lineStyle'] : Visual.DefaultLineStyle;
      }
      instances.push(instance);
    }
    // eslint-disable-next-line max-lines-per-function
  }, {
    key: "getValueAxisValues",
    value: function getValueAxisValues(instances) {
      var _a, _b;
      var isScalar = true,
        logPossible = (0,powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_33__.isLogScalePossible)((_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.axes.y.dataDomain) !== null && _b !== void 0 ? _b : []),
        scaleOptions = [powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_35__.log, powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_35__.linear]; // until options can be update in propPane, show all options
      if (!isScalar) {
        if (this.categoryAxisProperties) {
          this.categoryAxisProperties['start'] = null;
          this.categoryAxisProperties['end'] = null;
        }
      }
      var instance = {
        selector: {},
        properties: {},
        objectName: 'valueAxis',
        validValues: {
          axisScale: scaleOptions,
          secAxisScale: scaleOptions,
          valueDecimalPlaces: {
            numberRange: {
              min: 0,
              max: 15
            }
          }
        }
      };
      instance.properties['show'] = this.valueAxisProperties && this.valueAxisProperties['show'] != null ? this.valueAxisProperties['show'] : true;
      if (this.yAxisIsCategorical) {
        // in case of e.g. barChart
        instance.properties['position'] = this.valueAxisProperties && this.valueAxisProperties['position'] != null ? this.valueAxisProperties['position'] : "Left" /* YAxisPosition.left */;
      }

      instance.properties['axisType'] = isScalar ? "Scalar" /* AxisType.scalar */ : "Categorical" /* AxisType.categorical */;
      if (isScalar) {
        if (logPossible) {
          instance.properties['axisScale'] = this.valueAxisProperties && this.valueAxisProperties['axisScale'] != null && logPossible ? this.valueAxisProperties['axisScale'] : powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_35__.linear;
        }
        instance.properties['start'] = this.valueAxisProperties ? this.valueAxisProperties['start'] : null;
        instance.properties['end'] = this.valueAxisProperties ? this.valueAxisProperties['end'] : null;
        instance.properties['axisColor'] = this.valueAxisProperties ? this.valueAxisProperties['axisColor'] : Visual.DefaultColor;
        instance.properties['fontSize'] = this.valueAxisProperties ? this.valueAxisProperties['fontSize'] : Visual.DefaultTitleFontSize;
        instance.properties['fontFamily'] = this.valueAxisProperties ? this.valueAxisProperties['fontFamily'] : Visual.DefaultFontFamily;
        instance.properties['labelDisplayUnits'] = this.valueAxisProperties && this.valueAxisProperties['labelDisplayUnits'] != null ? this.valueAxisProperties['labelDisplayUnits'] : Visual.LabelDisplayUnitsDefault;
      }
      instance.properties['valueDecimalPlaces'] = this.valueAxisProperties && this.valueAxisProperties['valueDecimalPlaces'] !== undefined && this.valueAxisProperties['valueDecimalPlaces'] >= 0 ? this.valueAxisProperties['valueDecimalPlaces'] : Visual.DefaultPrecision;
      instance.properties['showAxisTitle'] = this.valueAxisProperties && this.valueAxisProperties['showAxisTitle'] != null ? this.valueAxisProperties['showAxisTitle'] : true;
      instance.properties['axisStyle'] = this.valueAxisProperties && this.valueAxisProperties['axisStyle'] != null ? this.valueAxisProperties['axisStyle'] : powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_36__.showTitleOnly;
      instance.properties['axisTitleColor'] = this.valueAxisProperties && this.valueAxisProperties['axisTitleColor'] != null ? this.valueAxisProperties['axisTitleColor'] : Visual.DefaultColor;
      instance.properties['axisTitle'] = this.valueAxisProperties ? this.valueAxisProperties['axisTitle'] : Visual.DefaultAxisTitle;
      instance.properties['titleFontSize'] = this.valueAxisProperties ? this.valueAxisProperties['titleFontSize'] : Visual.DefaultTitleFontSize;
      instance.properties['showGridlines'] = this.valueAxisProperties && this.valueAxisProperties['showGridlines'] != null ? this.valueAxisProperties['showGridlines'] : true;
      if (instance.properties['showGridlines']) {
        instance.properties['gridlinesColor'] = this.valueAxisProperties && this.valueAxisProperties['gridlinesColor'] != null ? this.valueAxisProperties['gridlinesColor'] : Visual.DefaultGridlinesColor;
        instance.properties['strokeWidth'] = this.valueAxisProperties && this.valueAxisProperties['strokeWidth'] != null ? this.valueAxisProperties['strokeWidth'] : Visual.DefaultStrokeWidth;
        instance.properties['lineStyle'] = this.valueAxisProperties && this.valueAxisProperties['lineStyle'] != null ? this.valueAxisProperties['lineStyle'] : Visual.DefaultLineStyle;
      }
      instances.push(instance);
    }
  }, {
    key: "getLegendValues",
    value: function getLegendValues(instances) {
      var _a;
      if (!((_a = this.data) === null || _a === void 0 ? void 0 : _a.hasDynamicSeries)) {
        return;
      }
      var instance = {
        selector: null,
        properties: {},
        objectName: 'legend',
        validValues: {}
      };
      instance.properties['show'] = this.legendProperties && this.legendProperties['show'] != null ? this.legendProperties['show'] : true;
      instance.properties['position'] = this.legendProperties && this.legendProperties['position'] != null ? this.legendProperties['position'] : powerbi_visuals_utils_chartutils_lib_legend_legendInterfaces__WEBPACK_IMPORTED_MODULE_24__.LegendPosition.Top;
      instance.properties['showTitle'] = this.legendProperties && this.legendProperties['showTitle'] != null ? this.legendProperties['showTitle'] : true;
      instance.properties['titleText'] = this.legendProperties && this.legendProperties['titleText'] != null ? this.legendProperties['titleText'] : Visual.DefaultLegendTitleText;
      instance.properties['labelColor'] = this.legendProperties && this.legendProperties['labelColor'] != null ? this.legendProperties['labelColor'] : {
        solid: {
          color: Visual.DefaultColor
        }
      };
      instance.properties['fontFamily'] = this.legendProperties && this.legendProperties['fontFamily'] != null ? this.legendProperties['fontFamily'] : Visual.DefaultFontFamily;
      instance.properties['fontSize'] = this.legendProperties && this.legendProperties['fontSize'] != null ? this.legendProperties['fontSize'] : Visual.DefaultLegendLabelFontSize;
      instances.push(instance);
    }
  }, {
    key: "getBubblePositionX",
    value: function getBubblePositionX(scale, item) {
      var _a, _b;
      if (item !== null) {
        return scale(item);
      } else {
        return Math.round(((_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.size.width) !== null && _b !== void 0 ? _b : 0) / 2);
      }
    }
  }, {
    key: "getBubblePositionY",
    value: function getBubblePositionY(scale, item) {
      var _a, _b;
      if (item !== null) {
        return scale(item);
      } else {
        return Math.round(((_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.size.height) !== null && _b !== void 0 ? _b : 0) / 2);
      }
    }
  }, {
    key: "getBubbleSizeScale",
    value: function getBubbleSizeScale(items) {
      var minRange = (0,d3_array__WEBPACK_IMPORTED_MODULE_34__["default"])(items, function (d) {
        return d.radius.value;
      });
      var maxRange = (0,d3_array__WEBPACK_IMPORTED_MODULE_30__["default"])(items, function (d) {
        return d.radius.value;
      });
      maxRange = maxRange ? maxRange : Visual.maxBubbleSize;
      minRange = minRange ? minRange : Visual.minBubbleSize;
      return (0,d3_scale__WEBPACK_IMPORTED_MODULE_37__["default"])([minRange, maxRange], [Visual.minBubbleSize, Visual.maxBubbleSize]);
    }
  }, {
    key: "clearVisual",
    value: function clearVisual(viewport) {
      var _a, _b;
      this.legend.reset();
      this.legend.drawLegend({
        dataPoints: []
      }, viewport);
      this.xAxisSvgGroup.selectAll('*').remove();
      this.yAxisSvgGroup.selectAll('*').remove();
      (_a = this.axisLabelsGroup) === null || _a === void 0 ? void 0 : _a.selectAll('*').remove();
      (_b = this.scatterGroupSelect) === null || _b === void 0 ? void 0 : _b.remove();
    }
    /**
     * This function gets called for each of the objects defined in the capabilities files and allows you to select which of the
     * objects and properties you want to expose to the users in the property pane.
     * */
    // eslint-disable-next-line max-lines-per-function
  }, {
    key: "enumerateObjectInstances",
    value: function enumerateObjectInstances(options) {
      var _a, _b, _c, _d, _e;
      var instances = [];
      switch (options.objectName) {
        case 'legend':
          {
            this.getLegendValues(instances);
            break;
          }
        case 'dataPoint':
          {
            var categoricalDataView = this.dataView && this.dataView.categorical ? this.dataView.categorical : null;
            if (!(0,_gradientUtils__WEBPACK_IMPORTED_MODULE_5__.hasGradientRole)(categoricalDataView)) {
              this.enumerateDataPoints(instances);
            }
            break;
          }
        case 'categoryAxis':
          {
            this.getCategoryAxisValues(instances);
            break;
          }
        case 'valueAxis':
          {
            this.getValueAxisValues(instances);
            break;
          }
        case 'fillPoint':
          {
            instances.push({
              objectName: 'fillPoint',
              selector: null,
              properties: {
                show: (_a = this.fillPoint) !== null && _a !== void 0 ? _a : false
              }
            });
            break;
          }
        case 'shapes':
          {
            instances.push({
              objectName: 'shapes',
              selector: null,
              properties: {
                size: (_b = this.shapesSize) === null || _b === void 0 ? void 0 : _b.size
              },
              validValues: {
                size: {
                  numberRange: {
                    min: 0,
                    max: 100
                  }
                }
              }
            });
            break;
          }
        case 'selectionColor':
          {
            var instance = {
              objectName: 'selectionColor',
              selector: null,
              properties: {
                fillColor: this.selectionColorSettings && this.selectionColorSettings.fillColor ? this.selectionColorSettings.fillColor : Visual.DefaultColor
              }
            };
            instances.push(instance);
            break;
          }
        case 'pointsTransparency':
          {
            instances.push({
              objectName: 'pointsTransparency',
              selector: null,
              properties: {
                selected: (_c = this.pointsTransparencyProperties) === null || _c === void 0 ? void 0 : _c.selected,
                regular: (_d = this.pointsTransparencyProperties) === null || _d === void 0 ? void 0 : _d.regular,
                unselected: (_e = this.pointsTransparencyProperties) === null || _e === void 0 ? void 0 : _e.unselected
              },
              validValues: {
                selected: {
                  numberRange: {
                    min: 0,
                    max: 100
                  }
                },
                regular: {
                  numberRange: {
                    min: 0,
                    max: 100
                  }
                },
                unselected: {
                  numberRange: {
                    min: 0,
                    max: 100
                  }
                }
              }
            });
            break;
          }
        case 'xConstantLine':
          {
            this.getValueAxisValues(instances);
            instances.push({
              objectName: 'xConstantLine',
              selector: null,
              properties: {
                show: this.xAxisConstantLineProperties && this.xAxisConstantLineProperties.show ? this.xAxisConstantLineProperties.show : Visual.DefaultConstantLineShow,
                value: this.xAxisConstantLineProperties && this.xAxisConstantLineProperties.value ? this.xAxisConstantLineProperties.value : Visual.DefaultConstantLineValue,
                color: this.xAxisConstantLineProperties && this.xAxisConstantLineProperties.color ? this.xAxisConstantLineProperties.color : Visual.DefaultColor
              }
            });
            break;
          }
        case 'yConstantLine':
          {
            this.getValueAxisValues(instances);
            instances.push({
              objectName: 'yConstantLine',
              selector: null,
              properties: {
                show: this.yAxisConstantLineProperties && this.yAxisConstantLineProperties.show ? this.yAxisConstantLineProperties.show : Visual.DefaultConstantLineShow,
                value: this.yAxisConstantLineProperties && this.yAxisConstantLineProperties.value ? this.yAxisConstantLineProperties.value : Visual.DefaultConstantLineValue,
                color: this.yAxisConstantLineProperties && this.yAxisConstantLineProperties.color ? this.yAxisConstantLineProperties.color : Visual.DefaultColor
              }
            });
            break;
          }
        case 'categoryLabels':
          {
            var instanceEnumerationObject = {
              instances: instances
            };
            if (this.data) {
              powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_26__.enumerateCategoryLabels(instanceEnumerationObject, this.data.dataLabelsSettings, true);
              instances.push({
                objectName: 'categoryLabels',
                selector: null,
                properties: {
                  fontFamily: this.data.dataLabelsSettings && this.data.dataLabelsSettings.fontFamily ? this.data.dataLabelsSettings.fontFamily : Visual.DefaultFontFamily,
                  showBackground: this.data.dataLabelsSettings && this.data.dataLabelsSettings.showBackground ? this.data.dataLabelsSettings.showBackground : Visual.DefaultLabelShowBackground
                }
              });
              if (this.data.dataLabelsSettings && this.data.dataLabelsSettings.showBackground) {
                instances.push({
                  objectName: 'categoryLabels',
                  selector: null,
                  properties: {
                    backgroundColor: this.data.dataLabelsSettings.backgroundColor ? this.data.dataLabelsSettings.backgroundColor : Visual.DefaultLabelBackgroundColor,
                    transparency: this.data.dataLabelsSettings.transparency !== undefined && this.data.dataLabelsSettings.transparency !== null ? this.data.dataLabelsSettings.transparency : Visual.DefaultLabelBackgroundColorTransparency
                  },
                  validValues: {
                    transparency: {
                      numberRange: {
                        min: 0,
                        max: 100
                      }
                    }
                  }
                });
              }
            } else {
              powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_26__.enumerateCategoryLabels(instanceEnumerationObject, null, true);
            }
            break;
          }
      }
      return instances;
    }
  }, {
    key: "enumerateDataPoints",
    value: function enumerateDataPoints(instances) {
      var _a;
      if (!this.data) {
        return;
      }
      var seriesCount = this.data.dataPoints.length;
      if (!this.data.hasDynamicSeries) {
        var showAllDataPoints = (_a = this.data.showAllDataPoints) !== null && _a !== void 0 ? _a : false;
        // Add default color and show all slices
        instances.push({
          objectName: 'dataPoint',
          selector: null,
          properties: {
            defaultColor: {
              solid: {
                color: this.data.defaultDataPointColor || this.colorPalette.getColor('0').value
              }
            }
          }
        });
        instances.push({
          objectName: 'dataPoint',
          selector: null,
          properties: {
            showAllDataPoints: showAllDataPoints
          }
        });
        if (showAllDataPoints) {
          for (var i = 0; i < seriesCount; i++) {
            var seriesDataPoints = this.data.dataPoints[i];
            instances.push({
              objectName: 'dataPoint',
              displayName: seriesDataPoints.formattedCategory(),
              selector: powerbi_visuals_utils_colorutils__WEBPACK_IMPORTED_MODULE_6__.ColorHelper.normalizeSelector(seriesDataPoints.identity.getSelector(), true),
              properties: {
                fill: {
                  solid: {
                    color: seriesDataPoints.fill
                  }
                }
              }
            });
          }
        }
      } else {
        var legendDataPointLength = this.data.legendData.dataPoints.length;
        for (var _i = 0; _i < legendDataPointLength; _i++) {
          var series = this.data.legendData.dataPoints[_i];
          instances.push({
            objectName: 'dataPoint',
            displayName: series.label,
            selector: powerbi_visuals_utils_colorutils__WEBPACK_IMPORTED_MODULE_6__.ColorHelper.normalizeSelector(series.identity.getSelector()),
            properties: {
              fill: {
                solid: {
                  color: series.color
                }
              }
            }
          });
        }
      }
    }
  }], [{
    key: "createLazyFormattedCategory",
    value: function createLazyFormattedCategory(formatter, value) {
      return function () {
        return formatter.format(value);
      };
    }
  }]);
  return Visual;
}();
Visual.DefaultDataDomainMin = 0;
Visual.DefaultDataDomainMax = 100;
Visual.DefaultStrokeSelectionColor = '#000';
Visual.DefaultStrokeWidth = 1;
Visual.DefaultStrokeSelectionWidth = 2;
Visual.DefaultBubbleSize = 7;
Visual.DefaultPrecision = 0;
Visual.DefaultFontFamily = '"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif';
Visual.DefaultTitleFontSize = 11;
Visual.DefaultColor = '#777777';
Visual.ResizeEndCode = 36; // it's wrong in VisualUpdateType enum for some reason
Visual.DefaultAxisXTickPadding = 10;
Visual.DefaultAxisYTickPadding = 10;
Visual.DefaultSelectionStateOfTheDataPoint = false;
Visual.DefaultAxisTitle = '';
Visual.DefaultLabelShowBackground = false;
Visual.DefaultLabelBackgroundColor = '#333';
Visual.DefaultGridlinesColor = '#eaeaea';
Visual.DefaultLineStyle = 'solid';
Visual.DefaultLabelBackgroundColorTransparency = 90;
Visual.DefaultConstantLineShow = false;
Visual.DefaultConstantLineValue = 0;
Visual.DefaultFillPoint = true;
Visual.DefaulShapesSize = 0;
Visual.AxisLabelOffset = 2;
Visual.YAxisLabelTransformRotate = 'rotate(-90)';
Visual.DefaultDY = '1em';
Visual.DefaultLegendLabelFontSize = 9;
Visual.DefaultLegendTitleText = '';
Visual.LabelDisplayUnitsDefault = 0;
Visual.minBubbleSize = 5;
Visual.maxBubbleSize = 10;
Visual.MinAmountOfValues = 0;
Visual.MinAmountOfCategories = 0;
Visual.skipNextUpdate = false;

/***/ }),

/***/ "./src/visualBehavior.ts":
/*!*******************************!*\
  !*** ./src/visualBehavior.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VisualBehavior": () => (/* binding */ VisualBehavior)
/* harmony export */ });
/* harmony import */ var _visual__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./visual */ "./src/visual.ts");
/* harmony import */ var _selectionSaveUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectionSaveUtils */ "./src/selectionSaveUtils.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./src/utils.ts");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var VisualBehavior = /*#__PURE__*/function () {
  function VisualBehavior(visual) {
    _classCallCheck(this, VisualBehavior);
    this.selectionHandler = undefined;
    this.options = undefined;
    this.skipNextRendering = false;
    this.visual = visual;
  }
  _createClass(VisualBehavior, [{
    key: "bindEvents",
    value: function bindEvents(behaviorOptions, selectionHandler) {
      var _this = this;
      this.options = behaviorOptions;
      this.selectionHandler = selectionHandler;
      behaviorOptions.legendItems.on('click', function (item) {
        selectionHandler.handleSelection(item, false); // Selects the dataPoint
      });

      if (this.options.lassoSelectorUpdate) {
        this.options.lassoSelectorUpdate(this.options.selection, this.options.pointsTransparencyProperties, this.options.fillPoint, this.options.data, function (circles) {
          _visual__WEBPACK_IMPORTED_MODULE_0__.Visual.skipNextUpdate = true; // we prevent the next update so that the Play Axis doesn't get resetted
          _this.skipNextRendering = true;
          selectionHandler.handleClearSelection();
          if (circles.data().length > 0) {
            selectionHandler.handleSelection(circles.data(), false);
          } else {
            (0,_selectionSaveUtils__WEBPACK_IMPORTED_MODULE_1__.saveSelection)(circles.data(), behaviorOptions.host);
          }
        });
      }
      this.options.selection.on('contextmenu', function (e, d) {
        selectionHandler.handleContextMenu(d, {
          x: e.clientX,
          y: e.clientY
        });
        e.preventDefault();
        e.stopPropagation();
      });
      // const clearCatcher = d3.select(this.mainHtmlElement);
      behaviorOptions.clearCatcher.on('contextmenu', function (e) {
        selectionHandler.handleContextMenu(null, {
          x: e.clientX,
          y: e.clientY
        });
        e.preventDefault();
        e.stopPropagation();
      });
    }
  }, {
    key: "renderSelection",
    value: function renderSelection(hasSelection) {
      if (this.skipNextRendering) {
        this.skipNextRendering = false;
        return;
      }
      var thisOptions = this.options;
      if (!thisOptions) {
        return;
      }
      var currentSelection = thisOptions.selection.filter(function (d) {
        var _a;
        return d.selected && ((_a = d.isShown) !== null && _a !== void 0 ? _a : false);
      });
      var selectedDataPoints = currentSelection.data();
      _visual__WEBPACK_IMPORTED_MODULE_0__.Visual.skipNextUpdate = true;
      this.visual.playAxis.onSelect(currentSelection, true);
      // Style for legend filter
      thisOptions.selection.style('fill-opacity', function (d) {
        return thisOptions.fillPoint ? thisOptions.getFillOpacity(d) : 0;
      }).style('stroke-opacity', function (d) {
        var _a;
        return thisOptions.fillPoint ? d.selected ? 1 : 0 : (_a = thisOptions === null || thisOptions === void 0 ? void 0 : thisOptions.getFillOpacity(d)) !== null && _a !== void 0 ? _a : null;
      }).style('stroke', function (d) {
        var _a;
        return (thisOptions === null || thisOptions === void 0 ? void 0 : thisOptions.fillPoint) && d.selected ? _visual__WEBPACK_IMPORTED_MODULE_0__.Visual.DefaultStrokeSelectionColor : (_a = d.fill) !== null && _a !== void 0 ? _a : null;
      }).style('stroke-width', function (d) {
        return d.selected ? _visual__WEBPACK_IMPORTED_MODULE_0__.Visual.DefaultStrokeSelectionWidth : _visual__WEBPACK_IMPORTED_MODULE_0__.Visual.DefaultStrokeWidth;
      });
      if (!(0,_utils__WEBPACK_IMPORTED_MODULE_2__.compareObjects)(selectedDataPoints, thisOptions.selectionSaveSettings, 'identity.key') && hasSelection) {
        (0,_selectionSaveUtils__WEBPACK_IMPORTED_MODULE_1__.saveSelection)(selectedDataPoints, thisOptions.host);
      }
    }
  }]);
  return VisualBehavior;
}();

/***/ }),

/***/ "./node_modules/jquery-ui-dist/jquery-ui.js":
/*!**************************************************!*\
  !*** ./node_modules/jquery-ui-dist/jquery-ui.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var define = __webpack_require__(/*! fakeDefine */ "fakeDefine");
/*! jQuery UI - v1.13.2 - 2022-07-14
* http://jqueryui.com
* Includes: widget.js, position.js, data.js, disable-selection.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js, focusable.js, form-reset-mixin.js, jquery-patch.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/draggable.js, widgets/droppable.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/resizable.js, widgets/selectable.js, widgets/selectmenu.js, widgets/slider.js, widgets/sortable.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

( function( factory ) {
	"use strict";
	
	if ( typeof define === "function" && define.amd ) {

		// AMD. Register as an anonymous module.
		define( [ "jquery" ], factory );
	} else {

		// Browser globals
		factory( jQuery );
	}
} )( function( $ ) {
"use strict";

$.ui = $.ui || {};

var version = $.ui.version = "1.13.2";


/*!
 * jQuery UI Widget 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Widget
//>>group: Core
//>>description: Provides a factory for creating stateful widgets with a common API.
//>>docs: http://api.jqueryui.com/jQuery.widget/
//>>demos: http://jqueryui.com/widget/


var widgetUuid = 0;
var widgetHasOwnProperty = Array.prototype.hasOwnProperty;
var widgetSlice = Array.prototype.slice;

$.cleanData = ( function( orig ) {
	return function( elems ) {
		var events, elem, i;
		for ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {

			// Only trigger remove when necessary to save time
			events = $._data( elem, "events" );
			if ( events && events.remove ) {
				$( elem ).triggerHandler( "remove" );
			}
		}
		orig( elems );
	};
} )( $.cleanData );

$.widget = function( name, base, prototype ) {
	var existingConstructor, constructor, basePrototype;

	// ProxiedPrototype allows the provided prototype to remain unmodified
	// so that it can be used as a mixin for multiple widgets (#8876)
	var proxiedPrototype = {};

	var namespace = name.split( "." )[ 0 ];
	name = name.split( "." )[ 1 ];
	var fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Widget;
	}

	if ( Array.isArray( prototype ) ) {
		prototype = $.extend.apply( null, [ {} ].concat( prototype ) );
	}

	// Create selector for plugin
	$.expr.pseudos[ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {

		// Allow instantiation without "new" keyword
		if ( !this || !this._createWidget ) {
			return new constructor( options, element );
		}

		// Allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			this._createWidget( options, element );
		}
	};

	// Extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,

		// Copy the object used to create the prototype in case we need to
		// redefine the widget later
		_proto: $.extend( {}, prototype ),

		// Track widgets that inherit from this widget in case this widget is
		// redefined after a widget inherits from it
		_childConstructors: []
	} );

	basePrototype = new base();

	// We need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.widget.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( typeof value !== "function" ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = ( function() {
			function _super() {
				return base.prototype[ prop ].apply( this, arguments );
			}

			function _superApply( args ) {
				return base.prototype[ prop ].apply( this, args );
			}

			return function() {
				var __super = this._super;
				var __superApply = this._superApply;
				var returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		} )();
	} );
	constructor.prototype = $.widget.extend( basePrototype, {

		// TODO: remove support for widgetEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for widgets that aren't DOM-based
		widgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		widgetName: name,
		widgetFullName: fullName
	} );

	// If this widget is being redefined then we need to find all widgets that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this widget. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// Redefine the child widget using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor,
				child._proto );
		} );

		// Remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	$.widget.bridge( name, constructor );

	return constructor;
};

$.widget.extend = function( target ) {
	var input = widgetSlice.call( arguments, 1 );
	var inputIndex = 0;
	var inputLength = input.length;
	var key;
	var value;

	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( widgetHasOwnProperty.call( input[ inputIndex ], key ) && value !== undefined ) {

				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.widget.extend( {}, target[ key ], value ) :

						// Don't extend strings, arrays, etc. with objects
						$.widget.extend( {}, value );

				// Copy everything else by reference
				} else {
					target[ key ] = value;
				}
			}
		}
	}
	return target;
};

$.widget.bridge = function( name, object ) {
	var fullName = object.prototype.widgetFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string";
		var args = widgetSlice.call( arguments, 1 );
		var returnValue = this;

		if ( isMethodCall ) {

			// If this is an empty collection, we need to have the instance method
			// return undefined instead of the jQuery instance
			if ( !this.length && options === "instance" ) {
				returnValue = undefined;
			} else {
				this.each( function() {
					var methodValue;
					var instance = $.data( this, fullName );

					if ( options === "instance" ) {
						returnValue = instance;
						return false;
					}

					if ( !instance ) {
						return $.error( "cannot call methods on " + name +
							" prior to initialization; " +
							"attempted to call method '" + options + "'" );
					}

					if ( typeof instance[ options ] !== "function" ||
						options.charAt( 0 ) === "_" ) {
						return $.error( "no such method '" + options + "' for " + name +
							" widget instance" );
					}

					methodValue = instance[ options ].apply( instance, args );

					if ( methodValue !== instance && methodValue !== undefined ) {
						returnValue = methodValue && methodValue.jquery ?
							returnValue.pushStack( methodValue.get() ) :
							methodValue;
						return false;
					}
				} );
			}
		} else {

			// Allow multiple hashes to be passed on init
			if ( args.length ) {
				options = $.widget.extend.apply( null, [ options ].concat( args ) );
			}

			this.each( function() {
				var instance = $.data( this, fullName );
				if ( instance ) {
					instance.option( options || {} );
					if ( instance._init ) {
						instance._init();
					}
				} else {
					$.data( this, fullName, new object( options, this ) );
				}
			} );
		}

		return returnValue;
	};
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
	widgetName: "widget",
	widgetEventPrefix: "",
	defaultElement: "<div>",

	options: {
		classes: {},
		disabled: false,

		// Callbacks
		create: null
	},

	_createWidget: function( options, element ) {
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = widgetUuid++;
		this.eventNamespace = "." + this.widgetName + this.uuid;

		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();
		this.classesElementLookup = {};

		if ( element !== this ) {
			$.data( element, this.widgetFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			} );
			this.document = $( element.style ?

				// Element within the document
				element.ownerDocument :

				// Element is window or document
				element.document || element );
			this.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );
		}

		this.options = $.widget.extend( {},
			this.options,
			this._getCreateOptions(),
			options );

		this._create();

		if ( this.options.disabled ) {
			this._setOptionDisabled( this.options.disabled );
		}

		this._trigger( "create", null, this._getCreateEventData() );
		this._init();
	},

	_getCreateOptions: function() {
		return {};
	},

	_getCreateEventData: $.noop,

	_create: $.noop,

	_init: $.noop,

	destroy: function() {
		var that = this;

		this._destroy();
		$.each( this.classesElementLookup, function( key, value ) {
			that._removeClass( value, key );
		} );

		// We can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.off( this.eventNamespace )
			.removeData( this.widgetFullName );
		this.widget()
			.off( this.eventNamespace )
			.removeAttr( "aria-disabled" );

		// Clean up events and states
		this.bindings.off( this.eventNamespace );
	},

	_destroy: $.noop,

	widget: function() {
		return this.element;
	},

	option: function( key, value ) {
		var options = key;
		var parts;
		var curOption;
		var i;

		if ( arguments.length === 0 ) {

			// Don't return a reference to the internal hash
			return $.widget.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {

			// Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( arguments.length === 1 ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( arguments.length === 1 ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},

	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
		}

		return this;
	},

	_setOption: function( key, value ) {
		if ( key === "classes" ) {
			this._setOptionClasses( value );
		}

		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this._setOptionDisabled( value );
		}

		return this;
	},

	_setOptionClasses: function( value ) {
		var classKey, elements, currentElements;

		for ( classKey in value ) {
			currentElements = this.classesElementLookup[ classKey ];
			if ( value[ classKey ] === this.options.classes[ classKey ] ||
					!currentElements ||
					!currentElements.length ) {
				continue;
			}

			// We are doing this to create a new jQuery object because the _removeClass() call
			// on the next line is going to destroy the reference to the current elements being
			// tracked. We need to save a copy of this collection so that we can add the new classes
			// below.
			elements = $( currentElements.get() );
			this._removeClass( currentElements, classKey );

			// We don't use _addClass() here, because that uses this.options.classes
			// for generating the string of classes. We want to use the value passed in from
			// _setOption(), this is the new value of the classes option which was passed to
			// _setOption(). We pass this value directly to _classes().
			elements.addClass( this._classes( {
				element: elements,
				keys: classKey,
				classes: value,
				add: true
			} ) );
		}
	},

	_setOptionDisabled: function( value ) {
		this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null, !!value );

		// If the widget is becoming disabled, then nothing is interactive
		if ( value ) {
			this._removeClass( this.hoverable, null, "ui-state-hover" );
			this._removeClass( this.focusable, null, "ui-state-focus" );
		}
	},

	enable: function() {
		return this._setOptions( { disabled: false } );
	},

	disable: function() {
		return this._setOptions( { disabled: true } );
	},

	_classes: function( options ) {
		var full = [];
		var that = this;

		options = $.extend( {
			element: this.element,
			classes: this.options.classes || {}
		}, options );

		function bindRemoveEvent() {
			var nodesToBind = [];

			options.element.each( function( _, element ) {
				var isTracked = $.map( that.classesElementLookup, function( elements ) {
					return elements;
				} )
					.some( function( elements ) {
						return elements.is( element );
					} );

				if ( !isTracked ) {
					nodesToBind.push( element );
				}
			} );

			that._on( $( nodesToBind ), {
				remove: "_untrackClassesElement"
			} );
		}

		function processClassString( classes, checkOption ) {
			var current, i;
			for ( i = 0; i < classes.length; i++ ) {
				current = that.classesElementLookup[ classes[ i ] ] || $();
				if ( options.add ) {
					bindRemoveEvent();
					current = $( $.uniqueSort( current.get().concat( options.element.get() ) ) );
				} else {
					current = $( current.not( options.element ).get() );
				}
				that.classesElementLookup[ classes[ i ] ] = current;
				full.push( classes[ i ] );
				if ( checkOption && options.classes[ classes[ i ] ] ) {
					full.push( options.classes[ classes[ i ] ] );
				}
			}
		}

		if ( options.keys ) {
			processClassString( options.keys.match( /\S+/g ) || [], true );
		}
		if ( options.extra ) {
			processClassString( options.extra.match( /\S+/g ) || [] );
		}

		return full.join( " " );
	},

	_untrackClassesElement: function( event ) {
		var that = this;
		$.each( that.classesElementLookup, function( key, value ) {
			if ( $.inArray( event.target, value ) !== -1 ) {
				that.classesElementLookup[ key ] = $( value.not( event.target ).get() );
			}
		} );

		this._off( $( event.target ) );
	},

	_removeClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, false );
	},

	_addClass: function( element, keys, extra ) {
		return this._toggleClass( element, keys, extra, true );
	},

	_toggleClass: function( element, keys, extra, add ) {
		add = ( typeof add === "boolean" ) ? add : extra;
		var shift = ( typeof element === "string" || element === null ),
			options = {
				extra: shift ? keys : extra,
				keys: shift ? element : keys,
				element: shift ? this.element : element,
				add: add
			};
		options.element.toggleClass( this._classes( options ), add );
		return this;
	},

	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement;
		var instance = this;

		// No suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// No element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.widget();
		} else {
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {

				// Allow widgets to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
						$( this ).hasClass( "ui-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// Copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^([\w:-]*)\s*(.*)$/ );
			var eventName = match[ 1 ] + instance.eventNamespace;
			var selector = match[ 2 ];

			if ( selector ) {
				delegateElement.on( eventName, selector, handlerProxy );
			} else {
				element.on( eventName, handlerProxy );
			}
		} );
	},

	_off: function( element, eventName ) {
		eventName = ( eventName || "" ).split( " " ).join( this.eventNamespace + " " ) +
			this.eventNamespace;
		element.off( eventName );

		// Clear the stack to avoid memory leaks (#10056)
		this.bindings = $( this.bindings.not( element ).get() );
		this.focusable = $( this.focusable.not( element ).get() );
		this.hoverable = $( this.hoverable.not( element ).get() );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-hover" );
			},
			mouseleave: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-hover" );
			}
		} );
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				this._addClass( $( event.currentTarget ), null, "ui-state-focus" );
			},
			focusout: function( event ) {
				this._removeClass( $( event.currentTarget ), null, "ui-state-focus" );
			}
		} );
	},

	_trigger: function( type, event, data ) {
		var prop, orig;
		var callback = this.options[ type ];

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.widgetEventPrefix ?
			type :
			this.widgetEventPrefix + type ).toLowerCase();

		// The original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];

		// Copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		return !( typeof callback === "function" &&
			callback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||
			event.isDefaultPrevented() );
	}
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}

		var hasOptions;
		var effectName = !options ?
			method :
			options === true || typeof options === "number" ?
				defaultEffect :
				options.effect || defaultEffect;

		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		} else if ( options === true ) {
			options = {};
		}

		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;

		if ( options.delay ) {
			element.delay( options.delay );
		}

		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue( function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			} );
		}
	};
} );

var widget = $.widget;


/*!
 * jQuery UI Position 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */

//>>label: Position
//>>group: Core
//>>description: Positions elements relative to other elements.
//>>docs: http://api.jqueryui.com/position/
//>>demos: http://jqueryui.com/position/


( function() {
var cachedScrollbarWidth,
	max = Math.max,
	abs = Math.abs,
	rhorizontal = /left|center|right/,
	rvertical = /top|center|bottom/,
	roffset = /[\+\-]\d+(\.[\d]+)?%?/,
	rposition = /^\w+/,
	rpercent = /%$/,
	_position = $.fn.position;

function getOffsets( offsets, width, height ) {
	return [
		parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
		parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
	];
}

function parseCss( element, property ) {
	return parseInt( $.css( element, property ), 10 ) || 0;
}

function isWindow( obj ) {
	return obj != null && obj === obj.window;
}

function getDimensions( elem ) {
	var raw = elem[ 0 ];
	if ( raw.nodeType === 9 ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: 0, left: 0 }
		};
	}
	if ( isWindow( raw ) ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
		};
	}
	if ( raw.preventDefault ) {
		return {
			width: 0,
			height: 0,
			offset: { top: raw.pageY, left: raw.pageX }
		};
	}
	return {
		width: elem.outerWidth(),
		height: elem.outerHeight(),
		offset: elem.offset()
	};
}

$.position = {
	scrollbarWidth: function() {
		if ( cachedScrollbarWidth !== undefined ) {
			return cachedScrollbarWidth;
		}
		var w1, w2,
			div = $( "<div style=" +
				"'display:block;position:absolute;width:200px;height:200px;overflow:hidden;'>" +
				"<div style='height:300px;width:auto;'></div></div>" ),
			innerDiv = div.children()[ 0 ];

		$( "body" ).append( div );
		w1 = innerDiv.offsetWidth;
		div.css( "overflow", "scroll" );

		w2 = innerDiv.offsetWidth;

		if ( w1 === w2 ) {
			w2 = div[ 0 ].clientWidth;
		}

		div.remove();

		return ( cachedScrollbarWidth = w1 - w2 );
	},
	getScrollInfo: function( within ) {
		var overflowX = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-x" ),
			overflowY = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-y" ),
			hasOverflowX = overflowX === "scroll" ||
				( overflowX === "auto" && within.width < within.element[ 0 ].scrollWidth ),
			hasOverflowY = overflowY === "scroll" ||
				( overflowY === "auto" && within.height < within.element[ 0 ].scrollHeight );
		return {
			width: hasOverflowY ? $.position.scrollbarWidth() : 0,
			height: hasOverflowX ? $.position.scrollbarWidth() : 0
		};
	},
	getWithinInfo: function( element ) {
		var withinElement = $( element || window ),
			isElemWindow = isWindow( withinElement[ 0 ] ),
			isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9,
			hasOffset = !isElemWindow && !isDocument;
		return {
			element: withinElement,
			isWindow: isElemWindow,
			isDocument: isDocument,
			offset: hasOffset ? $( element ).offset() : { left: 0, top: 0 },
			scrollLeft: withinElement.scrollLeft(),
			scrollTop: withinElement.scrollTop(),
			width: withinElement.outerWidth(),
			height: withinElement.outerHeight()
		};
	}
};

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// Make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,

		// Make sure string options are treated as CSS selectors
		target = typeof options.of === "string" ?
			$( document ).find( options.of ) :
			$( options.of ),

		within = $.position.getWithinInfo( options.within ),
		scrollInfo = $.position.getScrollInfo( within ),
		collision = ( options.collision || "flip" ).split( " " ),
		offsets = {};

	dimensions = getDimensions( target );
	if ( target[ 0 ].preventDefault ) {

		// Force left top to allow flipping
		options.at = "left top";
	}
	targetWidth = dimensions.width;
	targetHeight = dimensions.height;
	targetOffset = dimensions.offset;

	// Clone to reuse original targetOffset later
	basePosition = $.extend( {}, targetOffset );

	// Force my and at to have valid horizontal and vertical positions
	// if a value is missing or invalid, it will be converted to center
	$.each( [ "my", "at" ], function() {
		var pos = ( options[ this ] || "" ).split( " " ),
			horizontalOffset,
			verticalOffset;

		if ( pos.length === 1 ) {
			pos = rhorizontal.test( pos[ 0 ] ) ?
				pos.concat( [ "center" ] ) :
				rvertical.test( pos[ 0 ] ) ?
					[ "center" ].concat( pos ) :
					[ "center", "center" ];
		}
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

		// Calculate offsets
		horizontalOffset = roffset.exec( pos[ 0 ] );
		verticalOffset = roffset.exec( pos[ 1 ] );
		offsets[ this ] = [
			horizontalOffset ? horizontalOffset[ 0 ] : 0,
			verticalOffset ? verticalOffset[ 0 ] : 0
		];

		// Reduce to just the positions without the offsets
		options[ this ] = [
			rposition.exec( pos[ 0 ] )[ 0 ],
			rposition.exec( pos[ 1 ] )[ 0 ]
		];
	} );

	// Normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	if ( options.at[ 0 ] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[ 0 ] === "center" ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[ 1 ] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[ 1 ] === "center" ) {
		basePosition.top += targetHeight / 2;
	}

	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
	basePosition.left += atOffset[ 0 ];
	basePosition.top += atOffset[ 1 ];

	return this.each( function() {
		var collisionPosition, using,
			elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseCss( this, "marginLeft" ),
			marginTop = parseCss( this, "marginTop" ),
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) +
				scrollInfo.width,
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) +
				scrollInfo.height,
			position = $.extend( {}, basePosition ),
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

		if ( options.my[ 0 ] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[ 0 ] === "center" ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[ 1 ] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[ 1 ] === "center" ) {
			position.top -= elemHeight / 2;
		}

		position.left += myOffset[ 0 ];
		position.top += myOffset[ 1 ];

		collisionPosition = {
			marginLeft: marginLeft,
			marginTop: marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[ i ] ] ) {
				$.ui.position[ collision[ i ] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
					my: options.my,
					at: options.at,
					within: within,
					elem: elem
				} );
			}
		} );

		if ( options.using ) {

			// Adds feedback as second argument to using callback, if present
			using = function( props ) {
				var left = targetOffset.left - position.left,
					right = left + targetWidth - elemWidth,
					top = targetOffset.top - position.top,
					bottom = top + targetHeight - elemHeight,
					feedback = {
						target: {
							element: target,
							left: targetOffset.left,
							top: targetOffset.top,
							width: targetWidth,
							height: targetHeight
						},
						element: {
							element: elem,
							left: position.left,
							top: position.top,
							width: elemWidth,
							height: elemHeight
						},
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
					};
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
					feedback.horizontal = "center";
				}
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
					feedback.vertical = "middle";
				}
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
					feedback.important = "horizontal";
				} else {
					feedback.important = "vertical";
				}
				options.using.call( this, props, feedback );
			};
		}

		elem.offset( $.extend( position, { using: using } ) );
	} );
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
				outerWidth = within.width,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = withinOffset - collisionPosLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
				newOverRight;

			// Element is wider than within
			if ( data.collisionWidth > outerWidth ) {

				// Element is initially over the left side of within
				if ( overLeft > 0 && overRight <= 0 ) {
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -
						withinOffset;
					position.left += overLeft - newOverRight;

				// Element is initially over right side of within
				} else if ( overRight > 0 && overLeft <= 0 ) {
					position.left = withinOffset;

				// Element is initially over both left and right sides of within
				} else {
					if ( overLeft > overRight ) {
						position.left = withinOffset + outerWidth - data.collisionWidth;
					} else {
						position.left = withinOffset;
					}
				}

			// Too far left -> align with left edge
			} else if ( overLeft > 0 ) {
				position.left += overLeft;

			// Too far right -> align with right edge
			} else if ( overRight > 0 ) {
				position.left -= overRight;

			// Adjust based on position and margin
			} else {
				position.left = max( position.left - collisionPosLeft, position.left );
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
				outerHeight = data.within.height,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = withinOffset - collisionPosTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
				newOverBottom;

			// Element is taller than within
			if ( data.collisionHeight > outerHeight ) {

				// Element is initially over the top of within
				if ( overTop > 0 && overBottom <= 0 ) {
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -
						withinOffset;
					position.top += overTop - newOverBottom;

				// Element is initially over bottom of within
				} else if ( overBottom > 0 && overTop <= 0 ) {
					position.top = withinOffset;

				// Element is initially over both top and bottom of within
				} else {
					if ( overTop > overBottom ) {
						position.top = withinOffset + outerHeight - data.collisionHeight;
					} else {
						position.top = withinOffset;
					}
				}

			// Too far up -> align with top
			} else if ( overTop > 0 ) {
				position.top += overTop;

			// Too far down -> align with bottom edge
			} else if ( overBottom > 0 ) {
				position.top -= overBottom;

			// Adjust based on position and margin
			} else {
				position.top = max( position.top - collisionPosTop, position.top );
			}
		}
	},
	flip: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.left + within.scrollLeft,
				outerWidth = within.width,
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = collisionPosLeft - offsetLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					data.at[ 0 ] === "right" ?
						-data.targetWidth :
						0,
				offset = -2 * data.offset[ 0 ],
				newOverRight,
				newOverLeft;

			if ( overLeft < 0 ) {
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -
					outerWidth - withinOffset;
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
					position.left += myOffset + atOffset + offset;
				}
			} else if ( overRight > 0 ) {
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +
					atOffset + offset - offsetLeft;
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
					position.left += myOffset + atOffset + offset;
				}
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.top + within.scrollTop,
				outerHeight = within.height,
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = collisionPosTop - offsetTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
				top = data.my[ 1 ] === "top",
				myOffset = top ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					data.at[ 1 ] === "bottom" ?
						-data.targetHeight :
						0,
				offset = -2 * data.offset[ 1 ],
				newOverTop,
				newOverBottom;
			if ( overTop < 0 ) {
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -
					outerHeight - withinOffset;
				if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {
					position.top += myOffset + atOffset + offset;
				}
			} else if ( overBottom > 0 ) {
				newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +
					offset - offsetTop;
				if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {
					position.top += myOffset + atOffset + offset;
				}
			}
		}
	},
	flipfit: {
		left: function() {
			$.ui.position.flip.left.apply( this, arguments );
			$.ui.position.fit.left.apply( this, arguments );
		},
		top: function() {
			$.ui.position.flip.top.apply( this, arguments );
			$.ui.position.fit.top.apply( this, arguments );
		}
	}
};

} )();

var position = $.ui.position;


/*!
 * jQuery UI :data 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :data Selector
//>>group: Core
//>>description: Selects elements which have data stored under the specified key.
//>>docs: http://api.jqueryui.com/data-selector/


var data = $.extend( $.expr.pseudos, {
	data: $.expr.createPseudo ?
		$.expr.createPseudo( function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		} ) :

		// Support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		}
} );

/*!
 * jQuery UI Disable Selection 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: disableSelection
//>>group: Core
//>>description: Disable selection of text content within the set of matched elements.
//>>docs: http://api.jqueryui.com/disableSelection/

// This file is deprecated

var disableSelection = $.fn.extend( {
	disableSelection: ( function() {
		var eventType = "onselectstart" in document.createElement( "div" ) ?
			"selectstart" :
			"mousedown";

		return function() {
			return this.on( eventType + ".ui-disableSelection", function( event ) {
				event.preventDefault();
			} );
		};
	} )(),

	enableSelection: function() {
		return this.off( ".ui-disableSelection" );
	}
} );



// Create a local jQuery because jQuery Color relies on it and the
// global may not exist with AMD and a custom build (#10199).
// This module is a noop if used as a regular AMD module.
// eslint-disable-next-line no-unused-vars
var jQuery = $;


/*!
 * jQuery Color Animations v2.2.0
 * https://github.com/jquery/jquery-color
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Sun May 10 09:02:36 2020 +0200
 */



	var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor " +
		"borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",

	class2type = {},
	toString = class2type.toString,

	// plusequals test for += 100 -= 100
	rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,

	// a set of RE's that can match strings and generate color tuples.
	stringParsers = [ {
			re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			parse: function( execResult ) {
				return [
					execResult[ 1 ],
					execResult[ 2 ],
					execResult[ 3 ],
					execResult[ 4 ]
				];
			}
		}, {
			re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			parse: function( execResult ) {
				return [
					execResult[ 1 ] * 2.55,
					execResult[ 2 ] * 2.55,
					execResult[ 3 ] * 2.55,
					execResult[ 4 ]
				];
			}
		}, {

			// this regex ignores A-F because it's compared against an already lowercased string
			re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})?/,
			parse: function( execResult ) {
				return [
					parseInt( execResult[ 1 ], 16 ),
					parseInt( execResult[ 2 ], 16 ),
					parseInt( execResult[ 3 ], 16 ),
					execResult[ 4 ] ?
						( parseInt( execResult[ 4 ], 16 ) / 255 ).toFixed( 2 ) :
						1
				];
			}
		}, {

			// this regex ignores A-F because it's compared against an already lowercased string
			re: /#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])?/,
			parse: function( execResult ) {
				return [
					parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
					parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
					parseInt( execResult[ 3 ] + execResult[ 3 ], 16 ),
					execResult[ 4 ] ?
						( parseInt( execResult[ 4 ] + execResult[ 4 ], 16 ) / 255 )
							.toFixed( 2 ) :
						1
				];
			}
		}, {
			re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
			space: "hsla",
			parse: function( execResult ) {
				return [
					execResult[ 1 ],
					execResult[ 2 ] / 100,
					execResult[ 3 ] / 100,
					execResult[ 4 ]
				];
			}
		} ],

	// jQuery.Color( )
	color = jQuery.Color = function( color, green, blue, alpha ) {
		return new jQuery.Color.fn.parse( color, green, blue, alpha );
	},
	spaces = {
		rgba: {
			props: {
				red: {
					idx: 0,
					type: "byte"
				},
				green: {
					idx: 1,
					type: "byte"
				},
				blue: {
					idx: 2,
					type: "byte"
				}
			}
		},

		hsla: {
			props: {
				hue: {
					idx: 0,
					type: "degrees"
				},
				saturation: {
					idx: 1,
					type: "percent"
				},
				lightness: {
					idx: 2,
					type: "percent"
				}
			}
		}
	},
	propTypes = {
		"byte": {
			floor: true,
			max: 255
		},
		"percent": {
			max: 1
		},
		"degrees": {
			mod: 360,
			floor: true
		}
	},
	support = color.support = {},

	// element for support tests
	supportElem = jQuery( "<p>" )[ 0 ],

	// colors = jQuery.Color.names
	colors,

	// local aliases of functions called often
	each = jQuery.each;

// determine rgba support immediately
supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;

// define cache name and alpha properties
// for rgba and hsla spaces
each( spaces, function( spaceName, space ) {
	space.cache = "_" + spaceName;
	space.props.alpha = {
		idx: 3,
		type: "percent",
		def: 1
	};
} );

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function getType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	return typeof obj === "object" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}

function clamp( value, prop, allowEmpty ) {
	var type = propTypes[ prop.type ] || {};

	if ( value == null ) {
		return ( allowEmpty || !prop.def ) ? null : prop.def;
	}

	// ~~ is an short way of doing floor for positive numbers
	value = type.floor ? ~~value : parseFloat( value );

	// IE will pass in empty strings as value for alpha,
	// which will hit this case
	if ( isNaN( value ) ) {
		return prop.def;
	}

	if ( type.mod ) {

		// we add mod before modding to make sure that negatives values
		// get converted properly: -10 -> 350
		return ( value + type.mod ) % type.mod;
	}

	// for now all property types without mod have min and max
	return Math.min( type.max, Math.max( 0, value ) );
}

function stringParse( string ) {
	var inst = color(),
		rgba = inst._rgba = [];

	string = string.toLowerCase();

	each( stringParsers, function( _i, parser ) {
		var parsed,
			match = parser.re.exec( string ),
			values = match && parser.parse( match ),
			spaceName = parser.space || "rgba";

		if ( values ) {
			parsed = inst[ spaceName ]( values );

			// if this was an rgba parse the assignment might happen twice
			// oh well....
			inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
			rgba = inst._rgba = parsed._rgba;

			// exit each( stringParsers ) here because we matched
			return false;
		}
	} );

	// Found a stringParser that handled it
	if ( rgba.length ) {

		// if this came from a parsed string, force "transparent" when alpha is 0
		// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
		if ( rgba.join() === "0,0,0,0" ) {
			jQuery.extend( rgba, colors.transparent );
		}
		return inst;
	}

	// named colors
	return colors[ string ];
}

color.fn = jQuery.extend( color.prototype, {
	parse: function( red, green, blue, alpha ) {
		if ( red === undefined ) {
			this._rgba = [ null, null, null, null ];
			return this;
		}
		if ( red.jquery || red.nodeType ) {
			red = jQuery( red ).css( green );
			green = undefined;
		}

		var inst = this,
			type = getType( red ),
			rgba = this._rgba = [];

		// more than 1 argument specified - assume ( red, green, blue, alpha )
		if ( green !== undefined ) {
			red = [ red, green, blue, alpha ];
			type = "array";
		}

		if ( type === "string" ) {
			return this.parse( stringParse( red ) || colors._default );
		}

		if ( type === "array" ) {
			each( spaces.rgba.props, function( _key, prop ) {
				rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
			} );
			return this;
		}

		if ( type === "object" ) {
			if ( red instanceof color ) {
				each( spaces, function( _spaceName, space ) {
					if ( red[ space.cache ] ) {
						inst[ space.cache ] = red[ space.cache ].slice();
					}
				} );
			} else {
				each( spaces, function( _spaceName, space ) {
					var cache = space.cache;
					each( space.props, function( key, prop ) {

						// if the cache doesn't exist, and we know how to convert
						if ( !inst[ cache ] && space.to ) {

							// if the value was null, we don't need to copy it
							// if the key was alpha, we don't need to copy it either
							if ( key === "alpha" || red[ key ] == null ) {
								return;
							}
							inst[ cache ] = space.to( inst._rgba );
						}

						// this is the only case where we allow nulls for ALL properties.
						// call clamp with alwaysAllowEmpty
						inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
					} );

					// everything defined but alpha?
					if ( inst[ cache ] && jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {

						// use the default of 1
						if ( inst[ cache ][ 3 ] == null ) {
							inst[ cache ][ 3 ] = 1;
						}

						if ( space.from ) {
							inst._rgba = space.from( inst[ cache ] );
						}
					}
				} );
			}
			return this;
		}
	},
	is: function( compare ) {
		var is = color( compare ),
			same = true,
			inst = this;

		each( spaces, function( _, space ) {
			var localCache,
				isCache = is[ space.cache ];
			if ( isCache ) {
				localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
				each( space.props, function( _, prop ) {
					if ( isCache[ prop.idx ] != null ) {
						same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
						return same;
					}
				} );
			}
			return same;
		} );
		return same;
	},
	_space: function() {
		var used = [],
			inst = this;
		each( spaces, function( spaceName, space ) {
			if ( inst[ space.cache ] ) {
				used.push( spaceName );
			}
		} );
		return used.pop();
	},
	transition: function( other, distance ) {
		var end = color( other ),
			spaceName = end._space(),
			space = spaces[ spaceName ],
			startColor = this.alpha() === 0 ? color( "transparent" ) : this,
			start = startColor[ space.cache ] || space.to( startColor._rgba ),
			result = start.slice();

		end = end[ space.cache ];
		each( space.props, function( _key, prop ) {
			var index = prop.idx,
				startValue = start[ index ],
				endValue = end[ index ],
				type = propTypes[ prop.type ] || {};

			// if null, don't override start value
			if ( endValue === null ) {
				return;
			}

			// if null - use end
			if ( startValue === null ) {
				result[ index ] = endValue;
			} else {
				if ( type.mod ) {
					if ( endValue - startValue > type.mod / 2 ) {
						startValue += type.mod;
					} else if ( startValue - endValue > type.mod / 2 ) {
						startValue -= type.mod;
					}
				}
				result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
			}
		} );
		return this[ spaceName ]( result );
	},
	blend: function( opaque ) {

		// if we are already opaque - return ourself
		if ( this._rgba[ 3 ] === 1 ) {
			return this;
		}

		var rgb = this._rgba.slice(),
			a = rgb.pop(),
			blend = color( opaque )._rgba;

		return color( jQuery.map( rgb, function( v, i ) {
			return ( 1 - a ) * blend[ i ] + a * v;
		} ) );
	},
	toRgbaString: function() {
		var prefix = "rgba(",
			rgba = jQuery.map( this._rgba, function( v, i ) {
				if ( v != null ) {
					return v;
				}
				return i > 2 ? 1 : 0;
			} );

		if ( rgba[ 3 ] === 1 ) {
			rgba.pop();
			prefix = "rgb(";
		}

		return prefix + rgba.join() + ")";
	},
	toHslaString: function() {
		var prefix = "hsla(",
			hsla = jQuery.map( this.hsla(), function( v, i ) {
				if ( v == null ) {
					v = i > 2 ? 1 : 0;
				}

				// catch 1 and 2
				if ( i && i < 3 ) {
					v = Math.round( v * 100 ) + "%";
				}
				return v;
			} );

		if ( hsla[ 3 ] === 1 ) {
			hsla.pop();
			prefix = "hsl(";
		}
		return prefix + hsla.join() + ")";
	},
	toHexString: function( includeAlpha ) {
		var rgba = this._rgba.slice(),
			alpha = rgba.pop();

		if ( includeAlpha ) {
			rgba.push( ~~( alpha * 255 ) );
		}

		return "#" + jQuery.map( rgba, function( v ) {

			// default to 0 when nulls exist
			v = ( v || 0 ).toString( 16 );
			return v.length === 1 ? "0" + v : v;
		} ).join( "" );
	},
	toString: function() {
		return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
	}
} );
color.fn.parse.prototype = color.fn;

// hsla conversions adapted from:
// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

function hue2rgb( p, q, h ) {
	h = ( h + 1 ) % 1;
	if ( h * 6 < 1 ) {
		return p + ( q - p ) * h * 6;
	}
	if ( h * 2 < 1 ) {
		return q;
	}
	if ( h * 3 < 2 ) {
		return p + ( q - p ) * ( ( 2 / 3 ) - h ) * 6;
	}
	return p;
}

spaces.hsla.to = function( rgba ) {
	if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
		return [ null, null, null, rgba[ 3 ] ];
	}
	var r = rgba[ 0 ] / 255,
		g = rgba[ 1 ] / 255,
		b = rgba[ 2 ] / 255,
		a = rgba[ 3 ],
		max = Math.max( r, g, b ),
		min = Math.min( r, g, b ),
		diff = max - min,
		add = max + min,
		l = add * 0.5,
		h, s;

	if ( min === max ) {
		h = 0;
	} else if ( r === max ) {
		h = ( 60 * ( g - b ) / diff ) + 360;
	} else if ( g === max ) {
		h = ( 60 * ( b - r ) / diff ) + 120;
	} else {
		h = ( 60 * ( r - g ) / diff ) + 240;
	}

	// chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
	// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
	if ( diff === 0 ) {
		s = 0;
	} else if ( l <= 0.5 ) {
		s = diff / add;
	} else {
		s = diff / ( 2 - add );
	}
	return [ Math.round( h ) % 360, s, l, a == null ? 1 : a ];
};

spaces.hsla.from = function( hsla ) {
	if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
		return [ null, null, null, hsla[ 3 ] ];
	}
	var h = hsla[ 0 ] / 360,
		s = hsla[ 1 ],
		l = hsla[ 2 ],
		a = hsla[ 3 ],
		q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
		p = 2 * l - q;

	return [
		Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
		Math.round( hue2rgb( p, q, h ) * 255 ),
		Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
		a
	];
};


each( spaces, function( spaceName, space ) {
	var props = space.props,
		cache = space.cache,
		to = space.to,
		from = space.from;

	// makes rgba() and hsla()
	color.fn[ spaceName ] = function( value ) {

		// generate a cache for this space if it doesn't exist
		if ( to && !this[ cache ] ) {
			this[ cache ] = to( this._rgba );
		}
		if ( value === undefined ) {
			return this[ cache ].slice();
		}

		var ret,
			type = getType( value ),
			arr = ( type === "array" || type === "object" ) ? value : arguments,
			local = this[ cache ].slice();

		each( props, function( key, prop ) {
			var val = arr[ type === "object" ? key : prop.idx ];
			if ( val == null ) {
				val = local[ prop.idx ];
			}
			local[ prop.idx ] = clamp( val, prop );
		} );

		if ( from ) {
			ret = color( from( local ) );
			ret[ cache ] = local;
			return ret;
		} else {
			return color( local );
		}
	};

	// makes red() green() blue() alpha() hue() saturation() lightness()
	each( props, function( key, prop ) {

		// alpha is included in more than one space
		if ( color.fn[ key ] ) {
			return;
		}
		color.fn[ key ] = function( value ) {
			var local, cur, match, fn,
				vtype = getType( value );

			if ( key === "alpha" ) {
				fn = this._hsla ? "hsla" : "rgba";
			} else {
				fn = spaceName;
			}
			local = this[ fn ]();
			cur = local[ prop.idx ];

			if ( vtype === "undefined" ) {
				return cur;
			}

			if ( vtype === "function" ) {
				value = value.call( this, cur );
				vtype = getType( value );
			}
			if ( value == null && prop.empty ) {
				return this;
			}
			if ( vtype === "string" ) {
				match = rplusequals.exec( value );
				if ( match ) {
					value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
				}
			}
			local[ prop.idx ] = value;
			return this[ fn ]( local );
		};
	} );
} );

// add cssHook and .fx.step function for each named hook.
// accept a space separated string of properties
color.hook = function( hook ) {
	var hooks = hook.split( " " );
	each( hooks, function( _i, hook ) {
		jQuery.cssHooks[ hook ] = {
			set: function( elem, value ) {
				var parsed, curElem,
					backgroundColor = "";

				if ( value !== "transparent" && ( getType( value ) !== "string" || ( parsed = stringParse( value ) ) ) ) {
					value = color( parsed || value );
					if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
						curElem = hook === "backgroundColor" ? elem.parentNode : elem;
						while (
							( backgroundColor === "" || backgroundColor === "transparent" ) &&
							curElem && curElem.style
						) {
							try {
								backgroundColor = jQuery.css( curElem, "backgroundColor" );
								curElem = curElem.parentNode;
							} catch ( e ) {
							}
						}

						value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
							backgroundColor :
							"_default" );
					}

					value = value.toRgbaString();
				}
				try {
					elem.style[ hook ] = value;
				} catch ( e ) {

					// wrapped to prevent IE from throwing errors on "invalid" values like 'auto' or 'inherit'
				}
			}
		};
		jQuery.fx.step[ hook ] = function( fx ) {
			if ( !fx.colorInit ) {
				fx.start = color( fx.elem, hook );
				fx.end = color( fx.end );
				fx.colorInit = true;
			}
			jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
		};
	} );

};

color.hook( stepHooks );

jQuery.cssHooks.borderColor = {
	expand: function( value ) {
		var expanded = {};

		each( [ "Top", "Right", "Bottom", "Left" ], function( _i, part ) {
			expanded[ "border" + part + "Color" ] = value;
		} );
		return expanded;
	}
};

// Basic color names only.
// Usage of any of the other color names requires adding yourself or including
// jquery.color.svg-names.js.
colors = jQuery.Color.names = {

	// 4.1. Basic color keywords
	aqua: "#00ffff",
	black: "#000000",
	blue: "#0000ff",
	fuchsia: "#ff00ff",
	gray: "#808080",
	green: "#008000",
	lime: "#00ff00",
	maroon: "#800000",
	navy: "#000080",
	olive: "#808000",
	purple: "#800080",
	red: "#ff0000",
	silver: "#c0c0c0",
	teal: "#008080",
	white: "#ffffff",
	yellow: "#ffff00",

	// 4.2.3. "transparent" color keyword
	transparent: [ null, null, null, 0 ],

	_default: "#ffffff"
};


/*!
 * jQuery UI Effects 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Effects Core
//>>group: Effects
/* eslint-disable max-len */
//>>description: Extends the internal jQuery effects. Includes morphing and easing. Required by all other effects.
/* eslint-enable max-len */
//>>docs: http://api.jqueryui.com/category/effects-core/
//>>demos: http://jqueryui.com/effect/


var dataSpace = "ui-effects-",
	dataSpaceStyle = "ui-effects-style",
	dataSpaceAnimated = "ui-effects-animated";

$.effects = {
	effect: {}
};

/******************************************************************************/
/****************************** CLASS ANIMATIONS ******************************/
/******************************************************************************/
( function() {

var classAnimationActions = [ "add", "remove", "toggle" ],
	shorthandStyles = {
		border: 1,
		borderBottom: 1,
		borderColor: 1,
		borderLeft: 1,
		borderRight: 1,
		borderTop: 1,
		borderWidth: 1,
		margin: 1,
		padding: 1
	};

$.each(
	[ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ],
	function( _, prop ) {
		$.fx.step[ prop ] = function( fx ) {
			if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
				jQuery.style( fx.elem, prop, fx.end );
				fx.setAttr = true;
			}
		};
	}
);

function camelCase( string ) {
	return string.replace( /-([\da-z])/gi, function( all, letter ) {
		return letter.toUpperCase();
	} );
}

function getElementStyles( elem ) {
	var key, len,
		style = elem.ownerDocument.defaultView ?
			elem.ownerDocument.defaultView.getComputedStyle( elem, null ) :
			elem.currentStyle,
		styles = {};

	if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {
		len = style.length;
		while ( len-- ) {
			key = style[ len ];
			if ( typeof style[ key ] === "string" ) {
				styles[ camelCase( key ) ] = style[ key ];
			}
		}

	// Support: Opera, IE <9
	} else {
		for ( key in style ) {
			if ( typeof style[ key ] === "string" ) {
				styles[ key ] = style[ key ];
			}
		}
	}

	return styles;
}

function styleDifference( oldStyle, newStyle ) {
	var diff = {},
		name, value;

	for ( name in newStyle ) {
		value = newStyle[ name ];
		if ( oldStyle[ name ] !== value ) {
			if ( !shorthandStyles[ name ] ) {
				if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
					diff[ name ] = value;
				}
			}
		}
	}

	return diff;
}

// Support: jQuery <1.8
if ( !$.fn.addBack ) {
	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

$.effects.animateClass = function( value, duration, easing, callback ) {
	var o = $.speed( duration, easing, callback );

	return this.queue( function() {
		var animated = $( this ),
			baseClass = animated.attr( "class" ) || "",
			applyClassChange,
			allAnimations = o.children ? animated.find( "*" ).addBack() : animated;

		// Map the animated objects to store the original styles.
		allAnimations = allAnimations.map( function() {
			var el = $( this );
			return {
				el: el,
				start: getElementStyles( this )
			};
		} );

		// Apply class change
		applyClassChange = function() {
			$.each( classAnimationActions, function( i, action ) {
				if ( value[ action ] ) {
					animated[ action + "Class" ]( value[ action ] );
				}
			} );
		};
		applyClassChange();

		// Map all animated objects again - calculate new styles and diff
		allAnimations = allAnimations.map( function() {
			this.end = getElementStyles( this.el[ 0 ] );
			this.diff = styleDifference( this.start, this.end );
			return this;
		} );

		// Apply original class
		animated.attr( "class", baseClass );

		// Map all animated objects again - this time collecting a promise
		allAnimations = allAnimations.map( function() {
			var styleInfo = this,
				dfd = $.Deferred(),
				opts = $.extend( {}, o, {
					queue: false,
					complete: function() {
						dfd.resolve( styleInfo );
					}
				} );

			this.el.animate( this.diff, opts );
			return dfd.promise();
		} );

		// Once all animations have completed:
		$.when.apply( $, allAnimations.get() ).done( function() {

			// Set the final class
			applyClassChange();

			// For each animated element,
			// clear all css properties that were animated
			$.each( arguments, function() {
				var el = this.el;
				$.each( this.diff, function( key ) {
					el.css( key, "" );
				} );
			} );

			// This is guarnteed to be there if you use jQuery.speed()
			// it also handles dequeuing the next anim...
			o.complete.call( animated[ 0 ] );
		} );
	} );
};

$.fn.extend( {
	addClass: ( function( orig ) {
		return function( classNames, speed, easing, callback ) {
			return speed ?
				$.effects.animateClass.call( this,
					{ add: classNames }, speed, easing, callback ) :
				orig.apply( this, arguments );
		};
	} )( $.fn.addClass ),

	removeClass: ( function( orig ) {
		return function( classNames, speed, easing, callback ) {
			return arguments.length > 1 ?
				$.effects.animateClass.call( this,
					{ remove: classNames }, speed, easing, callback ) :
				orig.apply( this, arguments );
		};
	} )( $.fn.removeClass ),

	toggleClass: ( function( orig ) {
		return function( classNames, force, speed, easing, callback ) {
			if ( typeof force === "boolean" || force === undefined ) {
				if ( !speed ) {

					// Without speed parameter
					return orig.apply( this, arguments );
				} else {
					return $.effects.animateClass.call( this,
						( force ? { add: classNames } : { remove: classNames } ),
						speed, easing, callback );
				}
			} else {

				// Without force parameter
				return $.effects.animateClass.call( this,
					{ toggle: classNames }, force, speed, easing );
			}
		};
	} )( $.fn.toggleClass ),

	switchClass: function( remove, add, speed, easing, callback ) {
		return $.effects.animateClass.call( this, {
			add: add,
			remove: remove
		}, speed, easing, callback );
	}
} );

} )();

/******************************************************************************/
/*********************************** EFFECTS **********************************/
/******************************************************************************/

( function() {

if ( $.expr && $.expr.pseudos && $.expr.pseudos.animated ) {
	$.expr.pseudos.animated = ( function( orig ) {
		return function( elem ) {
			return !!$( elem ).data( dataSpaceAnimated ) || orig( elem );
		};
	} )( $.expr.pseudos.animated );
}

if ( $.uiBackCompat !== false ) {
	$.extend( $.effects, {

		// Saves a set of properties in a data storage
		save: function( element, set ) {
			var i = 0, length = set.length;
			for ( ; i < length; i++ ) {
				if ( set[ i ] !== null ) {
					element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
				}
			}
		},

		// Restores a set of previously saved properties from a data storage
		restore: function( element, set ) {
			var val, i = 0, length = set.length;
			for ( ; i < length; i++ ) {
				if ( set[ i ] !== null ) {
					val = element.data( dataSpace + set[ i ] );
					element.css( set[ i ], val );
				}
			}
		},

		setMode: function( el, mode ) {
			if ( mode === "toggle" ) {
				mode = el.is( ":hidden" ) ? "show" : "hide";
			}
			return mode;
		},

		// Wraps the element around a wrapper that copies position properties
		createWrapper: function( element ) {

			// If the element is already wrapped, return it
			if ( element.parent().is( ".ui-effects-wrapper" ) ) {
				return element.parent();
			}

			// Wrap the element
			var props = {
					width: element.outerWidth( true ),
					height: element.outerHeight( true ),
					"float": element.css( "float" )
				},
				wrapper = $( "<div></div>" )
					.addClass( "ui-effects-wrapper" )
					.css( {
						fontSize: "100%",
						background: "transparent",
						border: "none",
						margin: 0,
						padding: 0
					} ),

				// Store the size in case width/height are defined in % - Fixes #5245
				size = {
					width: element.width(),
					height: element.height()
				},
				active = document.activeElement;

			// Support: Firefox
			// Firefox incorrectly exposes anonymous content
			// https://bugzilla.mozilla.org/show_bug.cgi?id=561664
			try {
				// eslint-disable-next-line no-unused-expressions
				active.id;
			} catch ( e ) {
				active = document.body;
			}

			element.wrap( wrapper );

			// Fixes #7595 - Elements lose focus when wrapped.
			if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
				$( active ).trigger( "focus" );
			}

			// Hotfix for jQuery 1.4 since some change in wrap() seems to actually
			// lose the reference to the wrapped element
			wrapper = element.parent();

			// Transfer positioning properties to the wrapper
			if ( element.css( "position" ) === "static" ) {
				wrapper.css( { position: "relative" } );
				element.css( { position: "relative" } );
			} else {
				$.extend( props, {
					position: element.css( "position" ),
					zIndex: element.css( "z-index" )
				} );
				$.each( [ "top", "left", "bottom", "right" ], function( i, pos ) {
					props[ pos ] = element.css( pos );
					if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
						props[ pos ] = "auto";
					}
				} );
				element.css( {
					position: "relative",
					top: 0,
					left: 0,
					right: "auto",
					bottom: "auto"
				} );
			}
			element.css( size );

			return wrapper.css( props ).show();
		},

		removeWrapper: function( element ) {
			var active = document.activeElement;

			if ( element.parent().is( ".ui-effects-wrapper" ) ) {
				element.parent().replaceWith( element );

				// Fixes #7595 - Elements lose focus when wrapped.
				if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
					$( active ).trigger( "focus" );
				}
			}

			return element;
		}
	} );
}

$.extend( $.effects, {
	version: "1.13.2",

	define: function( name, mode, effect ) {
		if ( !effect ) {
			effect = mode;
			mode = "effect";
		}

		$.effects.effect[ name ] = effect;
		$.effects.effect[ name ].mode = mode;

		return effect;
	},

	scaledDimensions: function( element, percent, direction ) {
		if ( percent === 0 ) {
			return {
				height: 0,
				width: 0,
				outerHeight: 0,
				outerWidth: 0
			};
		}

		var x = direction !== "horizontal" ? ( ( percent || 100 ) / 100 ) : 1,
			y = direction !== "vertical" ? ( ( percent || 100 ) / 100 ) : 1;

		return {
			height: element.height() * y,
			width: element.width() * x,
			outerHeight: element.outerHeight() * y,
			outerWidth: element.outerWidth() * x
		};

	},

	clipToBox: function( animation ) {
		return {
			width: animation.clip.right - animation.clip.left,
			height: animation.clip.bottom - animation.clip.top,
			left: animation.clip.left,
			top: animation.clip.top
		};
	},

	// Injects recently queued functions to be first in line (after "inprogress")
	unshift: function( element, queueLength, count ) {
		var queue = element.queue();

		if ( queueLength > 1 ) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queueLength, count ) ) );
		}
		element.dequeue();
	},

	saveStyle: function( element ) {
		element.data( dataSpaceStyle, element[ 0 ].style.cssText );
	},

	restoreStyle: function( element ) {
		element[ 0 ].style.cssText = element.data( dataSpaceStyle ) || "";
		element.removeData( dataSpaceStyle );
	},

	mode: function( element, mode ) {
		var hidden = element.is( ":hidden" );

		if ( mode === "toggle" ) {
			mode = hidden ? "show" : "hide";
		}
		if ( hidden ? mode === "hide" : mode === "show" ) {
			mode = "none";
		}
		return mode;
	},

	// Translates a [top,left] array into a baseline value
	getBaseline: function( origin, original ) {
		var y, x;

		switch ( origin[ 0 ] ) {
		case "top":
			y = 0;
			break;
		case "middle":
			y = 0.5;
			break;
		case "bottom":
			y = 1;
			break;
		default:
			y = origin[ 0 ] / original.height;
		}

		switch ( origin[ 1 ] ) {
		case "left":
			x = 0;
			break;
		case "center":
			x = 0.5;
			break;
		case "right":
			x = 1;
			break;
		default:
			x = origin[ 1 ] / original.width;
		}

		return {
			x: x,
			y: y
		};
	},

	// Creates a placeholder element so that the original element can be made absolute
	createPlaceholder: function( element ) {
		var placeholder,
			cssPosition = element.css( "position" ),
			position = element.position();

		// Lock in margins first to account for form elements, which
		// will change margin if you explicitly set height
		// see: http://jsfiddle.net/JZSMt/3/ https://bugs.webkit.org/show_bug.cgi?id=107380
		// Support: Safari
		element.css( {
			marginTop: element.css( "marginTop" ),
			marginBottom: element.css( "marginBottom" ),
			marginLeft: element.css( "marginLeft" ),
			marginRight: element.css( "marginRight" )
		} )
		.outerWidth( element.outerWidth() )
		.outerHeight( element.outerHeight() );

		if ( /^(static|relative)/.test( cssPosition ) ) {
			cssPosition = "absolute";

			placeholder = $( "<" + element[ 0 ].nodeName + ">" ).insertAfter( element ).css( {

				// Convert inline to inline block to account for inline elements
				// that turn to inline block based on content (like img)
				display: /^(inline|ruby)/.test( element.css( "display" ) ) ?
					"inline-block" :
					"block",
				visibility: "hidden",

				// Margins need to be set to account for margin collapse
				marginTop: element.css( "marginTop" ),
				marginBottom: element.css( "marginBottom" ),
				marginLeft: element.css( "marginLeft" ),
				marginRight: element.css( "marginRight" ),
				"float": element.css( "float" )
			} )
			.outerWidth( element.outerWidth() )
			.outerHeight( element.outerHeight() )
			.addClass( "ui-effects-placeholder" );

			element.data( dataSpace + "placeholder", placeholder );
		}

		element.css( {
			position: cssPosition,
			left: position.left,
			top: position.top
		} );

		return placeholder;
	},

	removePlaceholder: function( element ) {
		var dataKey = dataSpace + "placeholder",
				placeholder = element.data( dataKey );

		if ( placeholder ) {
			placeholder.remove();
			element.removeData( dataKey );
		}
	},

	// Removes a placeholder if it exists and restores
	// properties that were modified during placeholder creation
	cleanUp: function( element ) {
		$.effects.restoreStyle( element );
		$.effects.removePlaceholder( element );
	},

	setTransition: function( element, list, factor, value ) {
		value = value || {};
		$.each( list, function( i, x ) {
			var unit = element.cssUnit( x );
			if ( unit[ 0 ] > 0 ) {
				value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
			}
		} );
		return value;
	}
} );

// Return an effect options object for the given parameters:
function _normalizeArguments( effect, options, speed, callback ) {

	// Allow passing all options as the first parameter
	if ( $.isPlainObject( effect ) ) {
		options = effect;
		effect = effect.effect;
	}

	// Convert to an object
	effect = { effect: effect };

	// Catch (effect, null, ...)
	if ( options == null ) {
		options = {};
	}

	// Catch (effect, callback)
	if ( typeof options === "function" ) {
		callback = options;
		speed = null;
		options = {};
	}

	// Catch (effect, speed, ?)
	if ( typeof options === "number" || $.fx.speeds[ options ] ) {
		callback = speed;
		speed = options;
		options = {};
	}

	// Catch (effect, options, callback)
	if ( typeof speed === "function" ) {
		callback = speed;
		speed = null;
	}

	// Add options to effect
	if ( options ) {
		$.extend( effect, options );
	}

	speed = speed || options.duration;
	effect.duration = $.fx.off ? 0 :
		typeof speed === "number" ? speed :
		speed in $.fx.speeds ? $.fx.speeds[ speed ] :
		$.fx.speeds._default;

	effect.complete = callback || options.complete;

	return effect;
}

function standardAnimationOption( option ) {

	// Valid standard speeds (nothing, number, named speed)
	if ( !option || typeof option === "number" || $.fx.speeds[ option ] ) {
		return true;
	}

	// Invalid strings - treat as "normal" speed
	if ( typeof option === "string" && !$.effects.effect[ option ] ) {
		return true;
	}

	// Complete callback
	if ( typeof option === "function" ) {
		return true;
	}

	// Options hash (but not naming an effect)
	if ( typeof option === "object" && !option.effect ) {
		return true;
	}

	// Didn't match any standard API
	return false;
}

$.fn.extend( {
	effect: function( /* effect, options, speed, callback */ ) {
		var args = _normalizeArguments.apply( this, arguments ),
			effectMethod = $.effects.effect[ args.effect ],
			defaultMode = effectMethod.mode,
			queue = args.queue,
			queueName = queue || "fx",
			complete = args.complete,
			mode = args.mode,
			modes = [],
			prefilter = function( next ) {
				var el = $( this ),
					normalizedMode = $.effects.mode( el, mode ) || defaultMode;

				// Sentinel for duck-punching the :animated pseudo-selector
				el.data( dataSpaceAnimated, true );

				// Save effect mode for later use,
				// we can't just call $.effects.mode again later,
				// as the .show() below destroys the initial state
				modes.push( normalizedMode );

				// See $.uiBackCompat inside of run() for removal of defaultMode in 1.14
				if ( defaultMode && ( normalizedMode === "show" ||
						( normalizedMode === defaultMode && normalizedMode === "hide" ) ) ) {
					el.show();
				}

				if ( !defaultMode || normalizedMode !== "none" ) {
					$.effects.saveStyle( el );
				}

				if ( typeof next === "function" ) {
					next();
				}
			};

		if ( $.fx.off || !effectMethod ) {

			// Delegate to the original method (e.g., .show()) if possible
			if ( mode ) {
				return this[ mode ]( args.duration, complete );
			} else {
				return this.each( function() {
					if ( complete ) {
						complete.call( this );
					}
				} );
			}
		}

		function run( next ) {
			var elem = $( this );

			function cleanup() {
				elem.removeData( dataSpaceAnimated );

				$.effects.cleanUp( elem );

				if ( args.mode === "hide" ) {
					elem.hide();
				}

				done();
			}

			function done() {
				if ( typeof complete === "function" ) {
					complete.call( elem[ 0 ] );
				}

				if ( typeof next === "function" ) {
					next();
				}
			}

			// Override mode option on a per element basis,
			// as toggle can be either show or hide depending on element state
			args.mode = modes.shift();

			if ( $.uiBackCompat !== false && !defaultMode ) {
				if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {

					// Call the core method to track "olddisplay" properly
					elem[ mode ]();
					done();
				} else {
					effectMethod.call( elem[ 0 ], args, done );
				}
			} else {
				if ( args.mode === "none" ) {

					// Call the core method to track "olddisplay" properly
					elem[ mode ]();
					done();
				} else {
					effectMethod.call( elem[ 0 ], args, cleanup );
				}
			}
		}

		// Run prefilter on all elements first to ensure that
		// any showing or hiding happens before placeholder creation,
		// which ensures that any layout changes are correctly captured.
		return queue === false ?
			this.each( prefilter ).each( run ) :
			this.queue( queueName, prefilter ).queue( queueName, run );
	},

	show: ( function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "show";
				return this.effect.call( this, args );
			}
		};
	} )( $.fn.show ),

	hide: ( function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "hide";
				return this.effect.call( this, args );
			}
		};
	} )( $.fn.hide ),

	toggle: ( function( orig ) {
		return function( option ) {
			if ( standardAnimationOption( option ) || typeof option === "boolean" ) {
				return orig.apply( this, arguments );
			} else {
				var args = _normalizeArguments.apply( this, arguments );
				args.mode = "toggle";
				return this.effect.call( this, args );
			}
		};
	} )( $.fn.toggle ),

	cssUnit: function( key ) {
		var style = this.css( key ),
			val = [];

		$.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
			if ( style.indexOf( unit ) > 0 ) {
				val = [ parseFloat( style ), unit ];
			}
		} );
		return val;
	},

	cssClip: function( clipObj ) {
		if ( clipObj ) {
			return this.css( "clip", "rect(" + clipObj.top + "px " + clipObj.right + "px " +
				clipObj.bottom + "px " + clipObj.left + "px)" );
		}
		return parseClip( this.css( "clip" ), this );
	},

	transfer: function( options, done ) {
		var element = $( this ),
			target = $( options.to ),
			targetFixed = target.css( "position" ) === "fixed",
			body = $( "body" ),
			fixTop = targetFixed ? body.scrollTop() : 0,
			fixLeft = targetFixed ? body.scrollLeft() : 0,
			endPosition = target.offset(),
			animation = {
				top: endPosition.top - fixTop,
				left: endPosition.left - fixLeft,
				height: target.innerHeight(),
				width: target.innerWidth()
			},
			startPosition = element.offset(),
			transfer = $( "<div class='ui-effects-transfer'></div>" );

		transfer
			.appendTo( "body" )
			.addClass( options.className )
			.css( {
				top: startPosition.top - fixTop,
				left: startPosition.left - fixLeft,
				height: element.innerHeight(),
				width: element.innerWidth(),
				position: targetFixed ? "fixed" : "absolute"
			} )
			.animate( animation, options.duration, options.easing, function() {
				transfer.remove();
				if ( typeof done === "function" ) {
					done();
				}
			} );
	}
} );

function parseClip( str, element ) {
		var outerWidth = element.outerWidth(),
			outerHeight = element.outerHeight(),
			clipRegex = /^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/,
			values = clipRegex.exec( str ) || [ "", 0, outerWidth, outerHeight, 0 ];

		return {
			top: parseFloat( values[ 1 ] ) || 0,
			right: values[ 2 ] === "auto" ? outerWidth : parseFloat( values[ 2 ] ),
			bottom: values[ 3 ] === "auto" ? outerHeight : parseFloat( values[ 3 ] ),
			left: parseFloat( values[ 4 ] ) || 0
		};
}

$.fx.step.clip = function( fx ) {
	if ( !fx.clipInit ) {
		fx.start = $( fx.elem ).cssClip();
		if ( typeof fx.end === "string" ) {
			fx.end = parseClip( fx.end, fx.elem );
		}
		fx.clipInit = true;
	}

	$( fx.elem ).cssClip( {
		top: fx.pos * ( fx.end.top - fx.start.top ) + fx.start.top,
		right: fx.pos * ( fx.end.right - fx.start.right ) + fx.start.right,
		bottom: fx.pos * ( fx.end.bottom - fx.start.bottom ) + fx.start.bottom,
		left: fx.pos * ( fx.end.left - fx.start.left ) + fx.start.left
	} );
};

} )();

/******************************************************************************/
/*********************************** EASING ***********************************/
/******************************************************************************/

( function() {

// Based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

var baseEasings = {};

$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
	baseEasings[ name ] = function( p ) {
		return Math.pow( p, i + 2 );
	};
} );

$.extend( baseEasings, {
	Sine: function( p ) {
		return 1 - Math.cos( p * Math.PI / 2 );
	},
	Circ: function( p ) {
		return 1 - Math.sqrt( 1 - p * p );
	},
	Elastic: function( p ) {
		return p === 0 || p === 1 ? p :
			-Math.pow( 2, 8 * ( p - 1 ) ) * Math.sin( ( ( p - 1 ) * 80 - 7.5 ) * Math.PI / 15 );
	},
	Back: function( p ) {
		return p * p * ( 3 * p - 2 );
	},
	Bounce: function( p ) {
		var pow2,
			bounce = 4;

		while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
		return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
	}
} );

$.each( baseEasings, function( name, easeIn ) {
	$.easing[ "easeIn" + name ] = easeIn;
	$.easing[ "easeOut" + name ] = function( p ) {
		return 1 - easeIn( 1 - p );
	};
	$.easing[ "easeInOut" + name ] = function( p ) {
		return p < 0.5 ?
			easeIn( p * 2 ) / 2 :
			1 - easeIn( p * -2 + 2 ) / 2;
	};
} );

} )();

var effect = $.effects;


/*!
 * jQuery UI Effects Blind 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Blind Effect
//>>group: Effects
//>>description: Blinds the element.
//>>docs: http://api.jqueryui.com/blind-effect/
//>>demos: http://jqueryui.com/effect/


var effectsEffectBlind = $.effects.define( "blind", "hide", function( options, done ) {
	var map = {
			up: [ "bottom", "top" ],
			vertical: [ "bottom", "top" ],
			down: [ "top", "bottom" ],
			left: [ "right", "left" ],
			horizontal: [ "right", "left" ],
			right: [ "left", "right" ]
		},
		element = $( this ),
		direction = options.direction || "up",
		start = element.cssClip(),
		animate = { clip: $.extend( {}, start ) },
		placeholder = $.effects.createPlaceholder( element );

	animate.clip[ map[ direction ][ 0 ] ] = animate.clip[ map[ direction ][ 1 ] ];

	if ( options.mode === "show" ) {
		element.cssClip( animate.clip );
		if ( placeholder ) {
			placeholder.css( $.effects.clipToBox( animate ) );
		}

		animate.clip = start;
	}

	if ( placeholder ) {
		placeholder.animate( $.effects.clipToBox( animate ), options.duration, options.easing );
	}

	element.animate( animate, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );
} );


/*!
 * jQuery UI Effects Bounce 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Bounce Effect
//>>group: Effects
//>>description: Bounces an element horizontally or vertically n times.
//>>docs: http://api.jqueryui.com/bounce-effect/
//>>demos: http://jqueryui.com/effect/


var effectsEffectBounce = $.effects.define( "bounce", function( options, done ) {
	var upAnim, downAnim, refValue,
		element = $( this ),

		// Defaults:
		mode = options.mode,
		hide = mode === "hide",
		show = mode === "show",
		direction = options.direction || "up",
		distance = options.distance,
		times = options.times || 5,

		// Number of internal animations
		anims = times * 2 + ( show || hide ? 1 : 0 ),
		speed = options.duration / anims,
		easing = options.easing,

		// Utility:
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		motion = ( direction === "up" || direction === "left" ),
		i = 0,

		queuelen = element.queue().length;

	$.effects.createPlaceholder( element );

	refValue = element.css( ref );

	// Default distance for the BIGGEST bounce is the outer Distance / 3
	if ( !distance ) {
		distance = element[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;
	}

	if ( show ) {
		downAnim = { opacity: 1 };
		downAnim[ ref ] = refValue;

		// If we are showing, force opacity 0 and set the initial position
		// then do the "first" animation
		element
			.css( "opacity", 0 )
			.css( ref, motion ? -distance * 2 : distance * 2 )
			.animate( downAnim, speed, easing );
	}

	// Start at the smallest distance if we are hiding
	if ( hide ) {
		distance = distance / Math.pow( 2, times - 1 );
	}

	downAnim = {};
	downAnim[ ref ] = refValue;

	// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
	for ( ; i < times; i++ ) {
		upAnim = {};
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

		element
			.animate( upAnim, speed, easing )
			.animate( downAnim, speed, easing );

		distance = hide ? distance * 2 : distance / 2;
	}

	// Last Bounce when Hiding
	if ( hide ) {
		upAnim = { opacity: 0 };
		upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

		element.animate( upAnim, speed, easing );
	}

	element.queue( done );

	$.effects.unshift( element, queuelen, anims + 1 );
} );


/*!
 * jQuery UI Effects Clip 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Clip Effect
//>>group: Effects
//>>description: Clips the element on and off like an old TV.
//>>docs: http://api.jqueryui.com/clip-effect/
//>>demos: http://jqueryui.com/effect/


var effectsEffectClip = $.effects.define( "clip", "hide", function( options, done ) {
	var start,
		animate = {},
		element = $( this ),
		direction = options.direction || "vertical",
		both = direction === "both",
		horizontal = both || direction === "horizontal",
		vertical = both || direction === "vertical";

	start = element.cssClip();
	animate.clip = {
		top: vertical ? ( start.bottom - start.top ) / 2 : start.top,
		right: horizontal ? ( start.right - start.left ) / 2 : start.right,
		bottom: vertical ? ( start.bottom - start.top ) / 2 : start.bottom,
		left: horizontal ? ( start.right - start.left ) / 2 : start.left
	};

	$.effects.createPlaceholder( element );

	if ( options.mode === "show" ) {
		element.cssClip( animate.clip );
		animate.clip = start;
	}

	element.animate( animate, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );

} );


/*!
 * jQuery UI Effects Drop 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Drop Effect
//>>group: Effects
//>>description: Moves an element in one direction and hides it at the same time.
//>>docs: http://api.jqueryui.com/drop-effect/
//>>demos: http://jqueryui.com/effect/


var effectsEffectDrop = $.effects.define( "drop", "hide", function( options, done ) {

	var distance,
		element = $( this ),
		mode = options.mode,
		show = mode === "show",
		direction = options.direction || "left",
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		motion = ( direction === "up" || direction === "left" ) ? "-=" : "+=",
		oppositeMotion = ( motion === "+=" ) ? "-=" : "+=",
		animation = {
			opacity: 0
		};

	$.effects.createPlaceholder( element );

	distance = options.distance ||
		element[ ref === "top" ? "outerHeight" : "outerWidth" ]( true ) / 2;

	animation[ ref ] = motion + distance;

	if ( show ) {
		element.css( animation );

		animation[ ref ] = oppositeMotion + distance;
		animation.opacity = 1;
	}

	// Animate
	element.animate( animation, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );
} );


/*!
 * jQuery UI Effects Explode 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Explode Effect
//>>group: Effects
/* eslint-disable max-len */
//>>description: Explodes an element in all directions into n pieces. Implodes an element to its original wholeness.
/* eslint-enable max-len */
//>>docs: http://api.jqueryui.com/explode-effect/
//>>demos: http://jqueryui.com/effect/


var effectsEffectExplode = $.effects.define( "explode", "hide", function( options, done ) {

	var i, j, left, top, mx, my,
		rows = options.pieces ? Math.round( Math.sqrt( options.pieces ) ) : 3,
		cells = rows,
		element = $( this ),
		mode = options.mode,
		show = mode === "show",

		// Show and then visibility:hidden the element before calculating offset
		offset = element.show().css( "visibility", "hidden" ).offset(),

		// Width and height of a piece
		width = Math.ceil( element.outerWidth() / cells ),
		height = Math.ceil( element.outerHeight() / rows ),
		pieces = [];

	// Children animate complete:
	function childComplete() {
		pieces.push( this );
		if ( pieces.length === rows * cells ) {
			animComplete();
		}
	}

	// Clone the element for each row and cell.
	for ( i = 0; i < rows; i++ ) { // ===>
		top = offset.top + i * height;
		my = i - ( rows - 1 ) / 2;

		for ( j = 0; j < cells; j++ ) { // |||
			left = offset.left + j * width;
			mx = j - ( cells - 1 ) / 2;

			// Create a clone of the now hidden main element that will be absolute positioned
			// within a wrapper div off the -left and -top equal to size of our pieces
			element
				.clone()
				.appendTo( "body" )
				.wrap( "<div></div>" )
				.css( {
					position: "absolute",
					visibility: "visible",
					left: -j * width,
					top: -i * height
				} )

				// Select the wrapper - make it overflow: hidden and absolute positioned based on
				// where the original was located +left and +top equal to the size of pieces
				.parent()
					.addClass( "ui-effects-explode" )
					.css( {
						position: "absolute",
						overflow: "hidden",
						width: width,
						height: height,
						left: left + ( show ? mx * width : 0 ),
						top: top + ( show ? my * height : 0 ),
						opacity: show ? 0 : 1
					} )
					.animate( {
						left: left + ( show ? 0 : mx * width ),
						top: top + ( show ? 0 : my * height ),
						opacity: show ? 1 : 0
					}, options.duration || 500, options.easing, childComplete );
		}
	}

	function animComplete() {
		element.css( {
			visibility: "visible"
		} );
		$( pieces ).remove();
		done();
	}
} );


/*!
 * jQuery UI Effects Fade 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Fade Effect
//>>group: Effects
//>>description: Fades the element.
//>>docs: http://api.jqueryui.com/fade-effect/
//>>demos: http://jqueryui.com/effect/


var effectsEffectFade = $.effects.define( "fade", "toggle", function( options, done ) {
	var show = options.mode === "show";

	$( this )
		.css( "opacity", show ? 0 : 1 )
		.animate( {
			opacity: show ? 1 : 0
		}, {
			queue: false,
			duration: options.duration,
			easing: options.easing,
			complete: done
		} );
} );


/*!
 * jQuery UI Effects Fold 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Fold Effect
//>>group: Effects
//>>description: Folds an element first horizontally and then vertically.
//>>docs: http://api.jqueryui.com/fold-effect/
//>>demos: http://jqueryui.com/effect/


var effectsEffectFold = $.effects.define( "fold", "hide", function( options, done ) {

	// Create element
	var element = $( this ),
		mode = options.mode,
		show = mode === "show",
		hide = mode === "hide",
		size = options.size || 15,
		percent = /([0-9]+)%/.exec( size ),
		horizFirst = !!options.horizFirst,
		ref = horizFirst ? [ "right", "bottom" ] : [ "bottom", "right" ],
		duration = options.duration / 2,

		placeholder = $.effects.createPlaceholder( element ),

		start = element.cssClip(),
		animation1 = { clip: $.extend( {}, start ) },
		animation2 = { clip: $.extend( {}, start ) },

		distance = [ start[ ref[ 0 ] ], start[ ref[ 1 ] ] ],

		queuelen = element.queue().length;

	if ( percent ) {
		size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];
	}
	animation1.clip[ ref[ 0 ] ] = size;
	animation2.clip[ ref[ 0 ] ] = size;
	animation2.clip[ ref[ 1 ] ] = 0;

	if ( show ) {
		element.cssClip( animation2.clip );
		if ( placeholder ) {
			placeholder.css( $.effects.clipToBox( animation2 ) );
		}

		animation2.clip = start;
	}

	// Animate
	element
		.queue( function( next ) {
			if ( placeholder ) {
				placeholder
					.animate( $.effects.clipToBox( animation1 ), duration, options.easing )
					.animate( $.effects.clipToBox( animation2 ), duration, options.easing );
			}

			next();
		} )
		.animate( animation1, duration, options.easing )
		.animate( animation2, duration, options.easing )
		.queue( done );

	$.effects.unshift( element, queuelen, 4 );
} );


/*!
 * jQuery UI Effects Highlight 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Highlight Effect
//>>group: Effects
//>>description: Highlights the background of an element in a defined color for a custom duration.
//>>docs: http://api.jqueryui.com/highlight-effect/
//>>demos: http://jqueryui.com/effect/


var effectsEffectHighlight = $.effects.define( "highlight", "show", function( options, done ) {
	var element = $( this ),
		animation = {
			backgroundColor: element.css( "backgroundColor" )
		};

	if ( options.mode === "hide" ) {
		animation.opacity = 0;
	}

	$.effects.saveStyle( element );

	element
		.css( {
			backgroundImage: "none",
			backgroundColor: options.color || "#ffff99"
		} )
		.animate( animation, {
			queue: false,
			duration: options.duration,
			easing: options.easing,
			complete: done
		} );
} );


/*!
 * jQuery UI Effects Size 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Size Effect
//>>group: Effects
//>>description: Resize an element to a specified width and height.
//>>docs: http://api.jqueryui.com/size-effect/
//>>demos: http://jqueryui.com/effect/


var effectsEffectSize = $.effects.define( "size", function( options, done ) {

	// Create element
	var baseline, factor, temp,
		element = $( this ),

		// Copy for children
		cProps = [ "fontSize" ],
		vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],
		hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],

		// Set options
		mode = options.mode,
		restore = mode !== "effect",
		scale = options.scale || "both",
		origin = options.origin || [ "middle", "center" ],
		position = element.css( "position" ),
		pos = element.position(),
		original = $.effects.scaledDimensions( element ),
		from = options.from || original,
		to = options.to || $.effects.scaledDimensions( element, 0 );

	$.effects.createPlaceholder( element );

	if ( mode === "show" ) {
		temp = from;
		from = to;
		to = temp;
	}

	// Set scaling factor
	factor = {
		from: {
			y: from.height / original.height,
			x: from.width / original.width
		},
		to: {
			y: to.height / original.height,
			x: to.width / original.width
		}
	};

	// Scale the css box
	if ( scale === "box" || scale === "both" ) {

		// Vertical props scaling
		if ( factor.from.y !== factor.to.y ) {
			from = $.effects.setTransition( element, vProps, factor.from.y, from );
			to = $.effects.setTransition( element, vProps, factor.to.y, to );
		}

		// Horizontal props scaling
		if ( factor.from.x !== factor.to.x ) {
			from = $.effects.setTransition( element, hProps, factor.from.x, from );
			to = $.effects.setTransition( element, hProps, factor.to.x, to );
		}
	}

	// Scale the content
	if ( scale === "content" || scale === "both" ) {

		// Vertical props scaling
		if ( factor.from.y !== factor.to.y ) {
			from = $.effects.setTransition( element, cProps, factor.from.y, from );
			to = $.effects.setTransition( element, cProps, factor.to.y, to );
		}
	}

	// Adjust the position properties based on the provided origin points
	if ( origin ) {
		baseline = $.effects.getBaseline( origin, original );
		from.top = ( original.outerHeight - from.outerHeight ) * baseline.y + pos.top;
		from.left = ( original.outerWidth - from.outerWidth ) * baseline.x + pos.left;
		to.top = ( original.outerHeight - to.outerHeight ) * baseline.y + pos.top;
		to.left = ( original.outerWidth - to.outerWidth ) * baseline.x + pos.left;
	}
	delete from.outerHeight;
	delete from.outerWidth;
	element.css( from );

	// Animate the children if desired
	if ( scale === "content" || scale === "both" ) {

		vProps = vProps.concat( [ "marginTop", "marginBottom" ] ).concat( cProps );
		hProps = hProps.concat( [ "marginLeft", "marginRight" ] );

		// Only animate children with width attributes specified
		// TODO: is this right? should we include anything with css width specified as well
		element.find( "*[width]" ).each( function() {
			var child = $( this ),
				childOriginal = $.effects.scaledDimensions( child ),
				childFrom = {
					height: childOriginal.height * factor.from.y,
					width: childOriginal.width * factor.from.x,
					outerHeight: childOriginal.outerHeight * factor.from.y,
					outerWidth: childOriginal.outerWidth * factor.from.x
				},
				childTo = {
					height: childOriginal.height * factor.to.y,
					width: childOriginal.width * factor.to.x,
					outerHeight: childOriginal.height * factor.to.y,
					outerWidth: childOriginal.width * factor.to.x
				};

			// Vertical props scaling
			if ( factor.from.y !== factor.to.y ) {
				childFrom = $.effects.setTransition( child, vProps, factor.from.y, childFrom );
				childTo = $.effects.setTransition( child, vProps, factor.to.y, childTo );
			}

			// Horizontal props scaling
			if ( factor.from.x !== factor.to.x ) {
				childFrom = $.effects.setTransition( child, hProps, factor.from.x, childFrom );
				childTo = $.effects.setTransition( child, hProps, factor.to.x, childTo );
			}

			if ( restore ) {
				$.effects.saveStyle( child );
			}

			// Animate children
			child.css( childFrom );
			child.animate( childTo, options.duration, options.easing, function() {

				// Restore children
				if ( restore ) {
					$.effects.restoreStyle( child );
				}
			} );
		} );
	}

	// Animate
	element.animate( to, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: function() {

			var offset = element.offset();

			if ( to.opacity === 0 ) {
				element.css( "opacity", from.opacity );
			}

			if ( !restore ) {
				element
					.css( "position", position === "static" ? "relative" : position )
					.offset( offset );

				// Need to save style here so that automatic style restoration
				// doesn't restore to the original styles from before the animation.
				$.effects.saveStyle( element );
			}

			done();
		}
	} );

} );


/*!
 * jQuery UI Effects Scale 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Scale Effect
//>>group: Effects
//>>description: Grows or shrinks an element and its content.
//>>docs: http://api.jqueryui.com/scale-effect/
//>>demos: http://jqueryui.com/effect/


var effectsEffectScale = $.effects.define( "scale", function( options, done ) {

	// Create element
	var el = $( this ),
		mode = options.mode,
		percent = parseInt( options.percent, 10 ) ||
			( parseInt( options.percent, 10 ) === 0 ? 0 : ( mode !== "effect" ? 0 : 100 ) ),

		newOptions = $.extend( true, {
			from: $.effects.scaledDimensions( el ),
			to: $.effects.scaledDimensions( el, percent, options.direction || "both" ),
			origin: options.origin || [ "middle", "center" ]
		}, options );

	// Fade option to support puff
	if ( options.fade ) {
		newOptions.from.opacity = 1;
		newOptions.to.opacity = 0;
	}

	$.effects.effect.size.call( this, newOptions, done );
} );


/*!
 * jQuery UI Effects Puff 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Puff Effect
//>>group: Effects
//>>description: Creates a puff effect by scaling the element up and hiding it at the same time.
//>>docs: http://api.jqueryui.com/puff-effect/
//>>demos: http://jqueryui.com/effect/


var effectsEffectPuff = $.effects.define( "puff", "hide", function( options, done ) {
	var newOptions = $.extend( true, {}, options, {
		fade: true,
		percent: parseInt( options.percent, 10 ) || 150
	} );

	$.effects.effect.scale.call( this, newOptions, done );
} );


/*!
 * jQuery UI Effects Pulsate 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Pulsate Effect
//>>group: Effects
//>>description: Pulsates an element n times by changing the opacity to zero and back.
//>>docs: http://api.jqueryui.com/pulsate-effect/
//>>demos: http://jqueryui.com/effect/


var effectsEffectPulsate = $.effects.define( "pulsate", "show", function( options, done ) {
	var element = $( this ),
		mode = options.mode,
		show = mode === "show",
		hide = mode === "hide",
		showhide = show || hide,

		// Showing or hiding leaves off the "last" animation
		anims = ( ( options.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
		duration = options.duration / anims,
		animateTo = 0,
		i = 1,
		queuelen = element.queue().length;

	if ( show || !element.is( ":visible" ) ) {
		element.css( "opacity", 0 ).show();
		animateTo = 1;
	}

	// Anims - 1 opacity "toggles"
	for ( ; i < anims; i++ ) {
		element.animate( { opacity: animateTo }, duration, options.easing );
		animateTo = 1 - animateTo;
	}

	element.animate( { opacity: animateTo }, duration, options.easing );

	element.queue( done );

	$.effects.unshift( element, queuelen, anims + 1 );
} );


/*!
 * jQuery UI Effects Shake 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Shake Effect
//>>group: Effects
//>>description: Shakes an element horizontally or vertically n times.
//>>docs: http://api.jqueryui.com/shake-effect/
//>>demos: http://jqueryui.com/effect/


var effectsEffectShake = $.effects.define( "shake", function( options, done ) {

	var i = 1,
		element = $( this ),
		direction = options.direction || "left",
		distance = options.distance || 20,
		times = options.times || 3,
		anims = times * 2 + 1,
		speed = Math.round( options.duration / anims ),
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		positiveMotion = ( direction === "up" || direction === "left" ),
		animation = {},
		animation1 = {},
		animation2 = {},

		queuelen = element.queue().length;

	$.effects.createPlaceholder( element );

	// Animation
	animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;
	animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;
	animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;

	// Animate
	element.animate( animation, speed, options.easing );

	// Shakes
	for ( ; i < times; i++ ) {
		element
			.animate( animation1, speed, options.easing )
			.animate( animation2, speed, options.easing );
	}

	element
		.animate( animation1, speed, options.easing )
		.animate( animation, speed / 2, options.easing )
		.queue( done );

	$.effects.unshift( element, queuelen, anims + 1 );
} );


/*!
 * jQuery UI Effects Slide 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Slide Effect
//>>group: Effects
//>>description: Slides an element in and out of the viewport.
//>>docs: http://api.jqueryui.com/slide-effect/
//>>demos: http://jqueryui.com/effect/


var effectsEffectSlide = $.effects.define( "slide", "show", function( options, done ) {
	var startClip, startRef,
		element = $( this ),
		map = {
			up: [ "bottom", "top" ],
			down: [ "top", "bottom" ],
			left: [ "right", "left" ],
			right: [ "left", "right" ]
		},
		mode = options.mode,
		direction = options.direction || "left",
		ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
		positiveMotion = ( direction === "up" || direction === "left" ),
		distance = options.distance ||
			element[ ref === "top" ? "outerHeight" : "outerWidth" ]( true ),
		animation = {};

	$.effects.createPlaceholder( element );

	startClip = element.cssClip();
	startRef = element.position()[ ref ];

	// Define hide animation
	animation[ ref ] = ( positiveMotion ? -1 : 1 ) * distance + startRef;
	animation.clip = element.cssClip();
	animation.clip[ map[ direction ][ 1 ] ] = animation.clip[ map[ direction ][ 0 ] ];

	// Reverse the animation if we're showing
	if ( mode === "show" ) {
		element.cssClip( animation.clip );
		element.css( ref, animation[ ref ] );
		animation.clip = startClip;
		animation[ ref ] = startRef;
	}

	// Actually animate
	element.animate( animation, {
		queue: false,
		duration: options.duration,
		easing: options.easing,
		complete: done
	} );
} );


/*!
 * jQuery UI Effects Transfer 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Transfer Effect
//>>group: Effects
//>>description: Displays a transfer effect from one element to another.
//>>docs: http://api.jqueryui.com/transfer-effect/
//>>demos: http://jqueryui.com/effect/


var effect;
if ( $.uiBackCompat !== false ) {
	effect = $.effects.define( "transfer", function( options, done ) {
		$( this ).transfer( options, done );
	} );
}
var effectsEffectTransfer = effect;


/*!
 * jQuery UI Focusable 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :focusable Selector
//>>group: Core
//>>description: Selects elements which can be focused.
//>>docs: http://api.jqueryui.com/focusable-selector/


// Selectors
$.ui.focusable = function( element, hasTabindex ) {
	var map, mapName, img, focusableIfVisible, fieldset,
		nodeName = element.nodeName.toLowerCase();

	if ( "area" === nodeName ) {
		map = element.parentNode;
		mapName = map.name;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap='#" + mapName + "']" );
		return img.length > 0 && img.is( ":visible" );
	}

	if ( /^(input|select|textarea|button|object)$/.test( nodeName ) ) {
		focusableIfVisible = !element.disabled;

		if ( focusableIfVisible ) {

			// Form controls within a disabled fieldset are disabled.
			// However, controls within the fieldset's legend do not get disabled.
			// Since controls generally aren't placed inside legends, we skip
			// this portion of the check.
			fieldset = $( element ).closest( "fieldset" )[ 0 ];
			if ( fieldset ) {
				focusableIfVisible = !fieldset.disabled;
			}
		}
	} else if ( "a" === nodeName ) {
		focusableIfVisible = element.href || hasTabindex;
	} else {
		focusableIfVisible = hasTabindex;
	}

	return focusableIfVisible && $( element ).is( ":visible" ) && visible( $( element ) );
};

// Support: IE 8 only
// IE 8 doesn't resolve inherit to visible/hidden for computed values
function visible( element ) {
	var visibility = element.css( "visibility" );
	while ( visibility === "inherit" ) {
		element = element.parent();
		visibility = element.css( "visibility" );
	}
	return visibility === "visible";
}

$.extend( $.expr.pseudos, {
	focusable: function( element ) {
		return $.ui.focusable( element, $.attr( element, "tabindex" ) != null );
	}
} );

var focusable = $.ui.focusable;



// Support: IE8 Only
// IE8 does not support the form attribute and when it is supplied. It overwrites the form prop
// with a string, so we need to find the proper form.
var form = $.fn._form = function() {
	return typeof this[ 0 ].form === "string" ? this.closest( "form" ) : $( this[ 0 ].form );
};


/*!
 * jQuery UI Form Reset Mixin 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Form Reset Mixin
//>>group: Core
//>>description: Refresh input widgets when their form is reset
//>>docs: http://api.jqueryui.com/form-reset-mixin/


var formResetMixin = $.ui.formResetMixin = {
	_formResetHandler: function() {
		var form = $( this );

		// Wait for the form reset to actually happen before refreshing
		setTimeout( function() {
			var instances = form.data( "ui-form-reset-instances" );
			$.each( instances, function() {
				this.refresh();
			} );
		} );
	},

	_bindFormResetHandler: function() {
		this.form = this.element._form();
		if ( !this.form.length ) {
			return;
		}

		var instances = this.form.data( "ui-form-reset-instances" ) || [];
		if ( !instances.length ) {

			// We don't use _on() here because we use a single event handler per form
			this.form.on( "reset.ui-form-reset", this._formResetHandler );
		}
		instances.push( this );
		this.form.data( "ui-form-reset-instances", instances );
	},

	_unbindFormResetHandler: function() {
		if ( !this.form.length ) {
			return;
		}

		var instances = this.form.data( "ui-form-reset-instances" );
		instances.splice( $.inArray( this, instances ), 1 );
		if ( instances.length ) {
			this.form.data( "ui-form-reset-instances", instances );
		} else {
			this.form
				.removeData( "ui-form-reset-instances" )
				.off( "reset.ui-form-reset" );
		}
	}
};


/*!
 * jQuery UI Support for jQuery core 1.8.x and newer 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 */

//>>label: jQuery 1.8+ Support
//>>group: Core
//>>description: Support version 1.8.x and newer of jQuery core


// Support: jQuery 1.9.x or older
// $.expr[ ":" ] is deprecated.
if ( !$.expr.pseudos ) {
	$.expr.pseudos = $.expr[ ":" ];
}

// Support: jQuery 1.11.x or older
// $.unique has been renamed to $.uniqueSort
if ( !$.uniqueSort ) {
	$.uniqueSort = $.unique;
}

// Support: jQuery 2.2.x or older.
// This method has been defined in jQuery 3.0.0.
// Code from https://github.com/jquery/jquery/blob/e539bac79e666bba95bba86d690b4e609dca2286/src/selector/escapeSelector.js
if ( !$.escapeSelector ) {

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;

	var fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	};

	$.escapeSelector = function( sel ) {
		return ( sel + "" ).replace( rcssescape, fcssescape );
	};
}

// Support: jQuery 3.4.x or older
// These methods have been defined in jQuery 3.5.0.
if ( !$.fn.even || !$.fn.odd ) {
	$.fn.extend( {
		even: function() {
			return this.filter( function( i ) {
				return i % 2 === 0;
			} );
		},
		odd: function() {
			return this.filter( function( i ) {
				return i % 2 === 1;
			} );
		}
	} );
}

;
/*!
 * jQuery UI Keycode 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Keycode
//>>group: Core
//>>description: Provide keycodes as keynames
//>>docs: http://api.jqueryui.com/jQuery.ui.keyCode/


var keycode = $.ui.keyCode = {
	BACKSPACE: 8,
	COMMA: 188,
	DELETE: 46,
	DOWN: 40,
	END: 35,
	ENTER: 13,
	ESCAPE: 27,
	HOME: 36,
	LEFT: 37,
	PAGE_DOWN: 34,
	PAGE_UP: 33,
	PERIOD: 190,
	RIGHT: 39,
	SPACE: 32,
	TAB: 9,
	UP: 38
};


/*!
 * jQuery UI Labels 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: labels
//>>group: Core
//>>description: Find all the labels associated with a given input
//>>docs: http://api.jqueryui.com/labels/


var labels = $.fn.labels = function() {
	var ancestor, selector, id, labels, ancestors;

	if ( !this.length ) {
		return this.pushStack( [] );
	}

	// Check control.labels first
	if ( this[ 0 ].labels && this[ 0 ].labels.length ) {
		return this.pushStack( this[ 0 ].labels );
	}

	// Support: IE <= 11, FF <= 37, Android <= 2.3 only
	// Above browsers do not support control.labels. Everything below is to support them
	// as well as document fragments. control.labels does not work on document fragments
	labels = this.eq( 0 ).parents( "label" );

	// Look for the label based on the id
	id = this.attr( "id" );
	if ( id ) {

		// We don't search against the document in case the element
		// is disconnected from the DOM
		ancestor = this.eq( 0 ).parents().last();

		// Get a full set of top level ancestors
		ancestors = ancestor.add( ancestor.length ? ancestor.siblings() : this.siblings() );

		// Create a selector for the label based on the id
		selector = "label[for='" + $.escapeSelector( id ) + "']";

		labels = labels.add( ancestors.find( selector ).addBack( selector ) );

	}

	// Return whatever we have found for labels
	return this.pushStack( labels );
};


/*!
 * jQuery UI Scroll Parent 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: scrollParent
//>>group: Core
//>>description: Get the closest ancestor element that is scrollable.
//>>docs: http://api.jqueryui.com/scrollParent/


var scrollParent = $.fn.scrollParent = function( includeHidden ) {
	var position = this.css( "position" ),
		excludeStaticParent = position === "absolute",
		overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
		scrollParent = this.parents().filter( function() {
			var parent = $( this );
			if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
				return false;
			}
			return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) +
				parent.css( "overflow-x" ) );
		} ).eq( 0 );

	return position === "fixed" || !scrollParent.length ?
		$( this[ 0 ].ownerDocument || document ) :
		scrollParent;
};


/*!
 * jQuery UI Tabbable 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: :tabbable Selector
//>>group: Core
//>>description: Selects elements which can be tabbed to.
//>>docs: http://api.jqueryui.com/tabbable-selector/


var tabbable = $.extend( $.expr.pseudos, {
	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			hasTabindex = tabIndex != null;
		return ( !hasTabindex || tabIndex >= 0 ) && $.ui.focusable( element, hasTabindex );
	}
} );


/*!
 * jQuery UI Unique ID 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: uniqueId
//>>group: Core
//>>description: Functions to generate and remove uniqueId's
//>>docs: http://api.jqueryui.com/uniqueId/


var uniqueId = $.fn.extend( {
	uniqueId: ( function() {
		var uuid = 0;

		return function() {
			return this.each( function() {
				if ( !this.id ) {
					this.id = "ui-id-" + ( ++uuid );
				}
			} );
		};
	} )(),

	removeUniqueId: function() {
		return this.each( function() {
			if ( /^ui-id-\d+$/.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		} );
	}
} );


/*!
 * jQuery UI Accordion 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Accordion
//>>group: Widgets
/* eslint-disable max-len */
//>>description: Displays collapsible content panels for presenting information in a limited amount of space.
/* eslint-enable max-len */
//>>docs: http://api.jqueryui.com/accordion/
//>>demos: http://jqueryui.com/accordion/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/accordion.css
//>>css.theme: ../../themes/base/theme.css


var widgetsAccordion = $.widget( "ui.accordion", {
	version: "1.13.2",
	options: {
		active: 0,
		animate: {},
		classes: {
			"ui-accordion-header": "ui-corner-top",
			"ui-accordion-header-collapsed": "ui-corner-all",
			"ui-accordion-content": "ui-corner-bottom"
		},
		collapsible: false,
		event: "click",
		header: function( elem ) {
			return elem.find( "> li > :first-child" ).add( elem.find( "> :not(li)" ).even() );
		},
		heightStyle: "auto",
		icons: {
			activeHeader: "ui-icon-triangle-1-s",
			header: "ui-icon-triangle-1-e"
		},

		// Callbacks
		activate: null,
		beforeActivate: null
	},

	hideProps: {
		borderTopWidth: "hide",
		borderBottomWidth: "hide",
		paddingTop: "hide",
		paddingBottom: "hide",
		height: "hide"
	},

	showProps: {
		borderTopWidth: "show",
		borderBottomWidth: "show",
		paddingTop: "show",
		paddingBottom: "show",
		height: "show"
	},

	_create: function() {
		var options = this.options;

		this.prevShow = this.prevHide = $();
		this._addClass( "ui-accordion", "ui-widget ui-helper-reset" );
		this.element.attr( "role", "tablist" );

		// Don't allow collapsible: false and active: false / null
		if ( !options.collapsible && ( options.active === false || options.active == null ) ) {
			options.active = 0;
		}

		this._processPanels();

		// handle negative values
		if ( options.active < 0 ) {
			options.active += this.headers.length;
		}
		this._refresh();
	},

	_getCreateEventData: function() {
		return {
			header: this.active,
			panel: !this.active.length ? $() : this.active.next()
		};
	},

	_createIcons: function() {
		var icon, children,
			icons = this.options.icons;

		if ( icons ) {
			icon = $( "<span>" );
			this._addClass( icon, "ui-accordion-header-icon", "ui-icon " + icons.header );
			icon.prependTo( this.headers );
			children = this.active.children( ".ui-accordion-header-icon" );
			this._removeClass( children, icons.header )
				._addClass( children, null, icons.activeHeader )
				._addClass( this.headers, "ui-accordion-icons" );
		}
	},

	_destroyIcons: function() {
		this._removeClass( this.headers, "ui-accordion-icons" );
		this.headers.children( ".ui-accordion-header-icon" ).remove();
	},

	_destroy: function() {
		var contents;

		// Clean up main element
		this.element.removeAttr( "role" );

		// Clean up headers
		this.headers
			.removeAttr( "role aria-expanded aria-selected aria-controls tabIndex" )
			.removeUniqueId();

		this._destroyIcons();

		// Clean up content panels
		contents = this.headers.next()
			.css( "display", "" )
			.removeAttr( "role aria-hidden aria-labelledby" )
			.removeUniqueId();

		if ( this.options.heightStyle !== "content" ) {
			contents.css( "height", "" );
		}
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {

			// _activate() will handle invalid values and update this.options
			this._activate( value );
			return;
		}

		if ( key === "event" ) {
			if ( this.options.event ) {
				this._off( this.headers, this.options.event );
			}
			this._setupEvents( value );
		}

		this._super( key, value );

		// Setting collapsible: false while collapsed; open first panel
		if ( key === "collapsible" && !value && this.options.active === false ) {
			this._activate( 0 );
		}

		if ( key === "icons" ) {
			this._destroyIcons();
			if ( value ) {
				this._createIcons();
			}
		}
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.element.attr( "aria-disabled", value );

		// Support: IE8 Only
		// #5332 / #6059 - opacity doesn't cascade to positioned elements in IE
		// so we need to add the disabled class to the headers and panels
		this._toggleClass( null, "ui-state-disabled", !!value );
		this._toggleClass( this.headers.add( this.headers.next() ), null, "ui-state-disabled",
			!!value );
	},

	_keydown: function( event ) {
		if ( event.altKey || event.ctrlKey ) {
			return;
		}

		var keyCode = $.ui.keyCode,
			length = this.headers.length,
			currentIndex = this.headers.index( event.target ),
			toFocus = false;

		switch ( event.keyCode ) {
		case keyCode.RIGHT:
		case keyCode.DOWN:
			toFocus = this.headers[ ( currentIndex + 1 ) % length ];
			break;
		case keyCode.LEFT:
		case keyCode.UP:
			toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
			break;
		case keyCode.SPACE:
		case keyCode.ENTER:
			this._eventHandler( event );
			break;
		case keyCode.HOME:
			toFocus = this.headers[ 0 ];
			break;
		case keyCode.END:
			toFocus = this.headers[ length - 1 ];
			break;
		}

		if ( toFocus ) {
			$( event.target ).attr( "tabIndex", -1 );
			$( toFocus ).attr( "tabIndex", 0 );
			$( toFocus ).trigger( "focus" );
			event.preventDefault();
		}
	},

	_panelKeyDown: function( event ) {
		if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {
			$( event.currentTarget ).prev().trigger( "focus" );
		}
	},

	refresh: function() {
		var options = this.options;
		this._processPanels();

		// Was collapsed or no panel
		if ( ( options.active === false && options.collapsible === true ) ||
				!this.headers.length ) {
			options.active = false;
			this.active = $();

		// active false only when collapsible is true
		} else if ( options.active === false ) {
			this._activate( 0 );

		// was active, but active panel is gone
		} else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {

			// all remaining panel are disabled
			if ( this.headers.length === this.headers.find( ".ui-state-disabled" ).length ) {
				options.active = false;
				this.active = $();

			// activate previous panel
			} else {
				this._activate( Math.max( 0, options.active - 1 ) );
			}

		// was active, active panel still exists
		} else {

			// make sure active index is correct
			options.active = this.headers.index( this.active );
		}

		this._destroyIcons();

		this._refresh();
	},

	_processPanels: function() {
		var prevHeaders = this.headers,
			prevPanels = this.panels;

		if ( typeof this.options.header === "function" ) {
			this.headers = this.options.header( this.element );
		} else {
			this.headers = this.element.find( this.options.header );
		}
		this._addClass( this.headers, "ui-accordion-header ui-accordion-header-collapsed",
			"ui-state-default" );

		this.panels = this.headers.next().filter( ":not(.ui-accordion-content-active)" ).hide();
		this._addClass( this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content" );

		// Avoid memory leaks (#10056)
		if ( prevPanels ) {
			this._off( prevHeaders.not( this.headers ) );
			this._off( prevPanels.not( this.panels ) );
		}
	},

	_refresh: function() {
		var maxHeight,
			options = this.options,
			heightStyle = options.heightStyle,
			parent = this.element.parent();

		this.active = this._findActive( options.active );
		this._addClass( this.active, "ui-accordion-header-active", "ui-state-active" )
			._removeClass( this.active, "ui-accordion-header-collapsed" );
		this._addClass( this.active.next(), "ui-accordion-content-active" );
		this.active.next().show();

		this.headers
			.attr( "role", "tab" )
			.each( function() {
				var header = $( this ),
					headerId = header.uniqueId().attr( "id" ),
					panel = header.next(),
					panelId = panel.uniqueId().attr( "id" );
				header.attr( "aria-controls", panelId );
				panel.attr( "aria-labelledby", headerId );
			} )
			.next()
				.attr( "role", "tabpanel" );

		this.headers
			.not( this.active )
				.attr( {
					"aria-selected": "false",
					"aria-expanded": "false",
					tabIndex: -1
				} )
				.next()
					.attr( {
						"aria-hidden": "true"
					} )
					.hide();

		// Make sure at least one header is in the tab order
		if ( !this.active.length ) {
			this.headers.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active.attr( {
				"aria-selected": "true",
				"aria-expanded": "true",
				tabIndex: 0
			} )
				.next()
					.attr( {
						"aria-hidden": "false"
					} );
		}

		this._createIcons();

		this._setupEvents( options.event );

		if ( heightStyle === "fill" ) {
			maxHeight = parent.height();
			this.element.siblings( ":visible" ).each( function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			} );

			this.headers.each( function() {
				maxHeight -= $( this ).outerHeight( true );
			} );

			this.headers.next()
				.each( function() {
					$( this ).height( Math.max( 0, maxHeight -
						$( this ).innerHeight() + $( this ).height() ) );
				} )
				.css( "overflow", "auto" );
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.headers.next()
				.each( function() {
					var isVisible = $( this ).is( ":visible" );
					if ( !isVisible ) {
						$( this ).show();
					}
					maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
					if ( !isVisible ) {
						$( this ).hide();
					}
				} )
				.height( maxHeight );
		}
	},

	_activate: function( index ) {
		var active = this._findActive( index )[ 0 ];

		// Trying to activate the already active panel
		if ( active === this.active[ 0 ] ) {
			return;
		}

		// Trying to collapse, simulate a click on the currently active header
		active = active || this.active[ 0 ];

		this._eventHandler( {
			target: active,
			currentTarget: active,
			preventDefault: $.noop
		} );
	},

	_findActive: function( selector ) {
		return typeof selector === "number" ? this.headers.eq( selector ) : $();
	},

	_setupEvents: function( event ) {
		var events = {
			keydown: "_keydown"
		};
		if ( event ) {
			$.each( event.split( " " ), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			} );
		}

		this._off( this.headers.add( this.headers.next() ) );
		this._on( this.headers, events );
		this._on( this.headers.next(), { keydown: "_panelKeyDown" } );
		this._hoverable( this.headers );
		this._focusable( this.headers );
	},

	_eventHandler: function( event ) {
		var activeChildren, clickedChildren,
			options = this.options,
			active = this.active,
			clicked = $( event.currentTarget ),
			clickedIsActive = clicked[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : clicked.next(),
			toHide = active.next(),
			eventData = {
				oldHeader: active,
				oldPanel: toHide,
				newHeader: collapsing ? $() : clicked,
				newPanel: toShow
			};

		event.preventDefault();

		if (

				// click on active header, but not collapsible
				( clickedIsActive && !options.collapsible ) ||

				// allow canceling activation
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.headers.index( clicked );

		// When the call to ._toggle() comes after the class changes
		// it causes a very odd bug in IE 8 (see #6720)
		this.active = clickedIsActive ? $() : clicked;
		this._toggle( eventData );

		// Switch classes
		// corner classes on the previously active header stay after the animation
		this._removeClass( active, "ui-accordion-header-active", "ui-state-active" );
		if ( options.icons ) {
			activeChildren = active.children( ".ui-accordion-header-icon" );
			this._removeClass( activeChildren, null, options.icons.activeHeader )
				._addClass( activeChildren, null, options.icons.header );
		}

		if ( !clickedIsActive ) {
			this._removeClass( clicked, "ui-accordion-header-collapsed" )
				._addClass( clicked, "ui-accordion-header-active", "ui-state-active" );
			if ( options.icons ) {
				clickedChildren = clicked.children( ".ui-accordion-header-icon" );
				this._removeClass( clickedChildren, null, options.icons.header )
					._addClass( clickedChildren, null, options.icons.activeHeader );
			}

			this._addClass( clicked.next(), "ui-accordion-content-active" );
		}
	},

	_toggle: function( data ) {
		var toShow = data.newPanel,
			toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

		// Handle activating a panel during the animation for another activation
		this.prevShow.add( this.prevHide ).stop( true, true );
		this.prevShow = toShow;
		this.prevHide = toHide;

		if ( this.options.animate ) {
			this._animate( toShow, toHide, data );
		} else {
			toHide.hide();
			toShow.show();
			this._toggleComplete( data );
		}

		toHide.attr( {
			"aria-hidden": "true"
		} );
		toHide.prev().attr( {
			"aria-selected": "false",
			"aria-expanded": "false"
		} );

		// if we're switching panels, remove the old header from the tab order
		// if we're opening from collapsed state, remove the previous header from the tab order
		// if we're collapsing, then keep the collapsing header in the tab order
		if ( toShow.length && toHide.length ) {
			toHide.prev().attr( {
				"tabIndex": -1,
				"aria-expanded": "false"
			} );
		} else if ( toShow.length ) {
			this.headers.filter( function() {
				return parseInt( $( this ).attr( "tabIndex" ), 10 ) === 0;
			} )
				.attr( "tabIndex", -1 );
		}

		toShow
			.attr( "aria-hidden", "false" )
			.prev()
				.attr( {
					"aria-selected": "true",
					"aria-expanded": "true",
					tabIndex: 0
				} );
	},

	_animate: function( toShow, toHide, data ) {
		var total, easing, duration,
			that = this,
			adjust = 0,
			boxSizing = toShow.css( "box-sizing" ),
			down = toShow.length &&
				( !toHide.length || ( toShow.index() < toHide.index() ) ),
			animate = this.options.animate || {},
			options = down && animate.down || animate,
			complete = function() {
				that._toggleComplete( data );
			};

		if ( typeof options === "number" ) {
			duration = options;
		}
		if ( typeof options === "string" ) {
			easing = options;
		}

		// fall back from options to animation in case of partial down settings
		easing = easing || options.easing || animate.easing;
		duration = duration || options.duration || animate.duration;

		if ( !toHide.length ) {
			return toShow.animate( this.showProps, duration, easing, complete );
		}
		if ( !toShow.length ) {
			return toHide.animate( this.hideProps, duration, easing, complete );
		}

		total = toShow.show().outerHeight();
		toHide.animate( this.hideProps, {
			duration: duration,
			easing: easing,
			step: function( now, fx ) {
				fx.now = Math.round( now );
			}
		} );
		toShow
			.hide()
			.animate( this.showProps, {
				duration: duration,
				easing: easing,
				complete: complete,
				step: function( now, fx ) {
					fx.now = Math.round( now );
					if ( fx.prop !== "height" ) {
						if ( boxSizing === "content-box" ) {
							adjust += fx.now;
						}
					} else if ( that.options.heightStyle !== "content" ) {
						fx.now = Math.round( total - toHide.outerHeight() - adjust );
						adjust = 0;
					}
				}
			} );
	},

	_toggleComplete: function( data ) {
		var toHide = data.oldPanel,
			prev = toHide.prev();

		this._removeClass( toHide, "ui-accordion-content-active" );
		this._removeClass( prev, "ui-accordion-header-active" )
			._addClass( prev, "ui-accordion-header-collapsed" );

		// Work around for rendering bug in IE (#5421)
		if ( toHide.length ) {
			toHide.parent()[ 0 ].className = toHide.parent()[ 0 ].className;
		}
		this._trigger( "activate", null, data );
	}
} );



var safeActiveElement = $.ui.safeActiveElement = function( document ) {
	var activeElement;

	// Support: IE 9 only
	// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
	try {
		activeElement = document.activeElement;
	} catch ( error ) {
		activeElement = document.body;
	}

	// Support: IE 9 - 11 only
	// IE may return null instead of an element
	// Interestingly, this only seems to occur when NOT in an iframe
	if ( !activeElement ) {
		activeElement = document.body;
	}

	// Support: IE 11 only
	// IE11 returns a seemingly empty object in some cases when accessing
	// document.activeElement from an <iframe>
	if ( !activeElement.nodeName ) {
		activeElement = document.body;
	}

	return activeElement;
};


/*!
 * jQuery UI Menu 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Menu
//>>group: Widgets
//>>description: Creates nestable menus.
//>>docs: http://api.jqueryui.com/menu/
//>>demos: http://jqueryui.com/menu/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/menu.css
//>>css.theme: ../../themes/base/theme.css


var widgetsMenu = $.widget( "ui.menu", {
	version: "1.13.2",
	defaultElement: "<ul>",
	delay: 300,
	options: {
		icons: {
			submenu: "ui-icon-caret-1-e"
		},
		items: "> *",
		menus: "ul",
		position: {
			my: "left top",
			at: "right top"
		},
		role: "menu",

		// Callbacks
		blur: null,
		focus: null,
		select: null
	},

	_create: function() {
		this.activeMenu = this.element;

		// Flag used to prevent firing of the click handler
		// as the event bubbles up through nested menus
		this.mouseHandled = false;
		this.lastMousePosition = { x: null, y: null };
		this.element
			.uniqueId()
			.attr( {
				role: this.options.role,
				tabIndex: 0
			} );

		this._addClass( "ui-menu", "ui-widget ui-widget-content" );
		this._on( {

			// Prevent focus from sticking to links inside menu after clicking
			// them (focus should always stay on UL during navigation).
			"mousedown .ui-menu-item": function( event ) {
				event.preventDefault();

				this._activateItem( event );
			},
			"click .ui-menu-item": function( event ) {
				var target = $( event.target );
				var active = $( $.ui.safeActiveElement( this.document[ 0 ] ) );
				if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
					this.select( event );

					// Only set the mouseHandled flag if the event will bubble, see #9469.
					if ( !event.isPropagationStopped() ) {
						this.mouseHandled = true;
					}

					// Open submenu on click
					if ( target.has( ".ui-menu" ).length ) {
						this.expand( event );
					} else if ( !this.element.is( ":focus" ) &&
							active.closest( ".ui-menu" ).length ) {

						// Redirect focus to the menu
						this.element.trigger( "focus", [ true ] );

						// If the active item is on the top level, let it stay active.
						// Otherwise, blur the active item since it is no longer visible.
						if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
							clearTimeout( this.timer );
						}
					}
				}
			},
			"mouseenter .ui-menu-item": "_activateItem",
			"mousemove .ui-menu-item": "_activateItem",
			mouseleave: "collapseAll",
			"mouseleave .ui-menu": "collapseAll",
			focus: function( event, keepActiveItem ) {

				// If there's already an active item, keep it active
				// If not, activate the first item
				var item = this.active || this._menuItems().first();

				if ( !keepActiveItem ) {
					this.focus( event, item );
				}
			},
			blur: function( event ) {
				this._delay( function() {
					var notContained = !$.contains(
						this.element[ 0 ],
						$.ui.safeActiveElement( this.document[ 0 ] )
					);
					if ( notContained ) {
						this.collapseAll( event );
					}
				} );
			},
			keydown: "_keydown"
		} );

		this.refresh();

		// Clicks outside of a menu collapse any open menus
		this._on( this.document, {
			click: function( event ) {
				if ( this._closeOnDocumentClick( event ) ) {
					this.collapseAll( event, true );
				}

				// Reset the mouseHandled flag
				this.mouseHandled = false;
			}
		} );
	},

	_activateItem: function( event ) {

		// Ignore mouse events while typeahead is active, see #10458.
		// Prevents focusing the wrong item when typeahead causes a scroll while the mouse
		// is over an item in the menu
		if ( this.previousFilter ) {
			return;
		}

		// If the mouse didn't actually move, but the page was scrolled, ignore the event (#9356)
		if ( event.clientX === this.lastMousePosition.x &&
				event.clientY === this.lastMousePosition.y ) {
			return;
		}

		this.lastMousePosition = {
			x: event.clientX,
			y: event.clientY
		};

		var actualTarget = $( event.target ).closest( ".ui-menu-item" ),
			target = $( event.currentTarget );

		// Ignore bubbled events on parent items, see #11641
		if ( actualTarget[ 0 ] !== target[ 0 ] ) {
			return;
		}

		// If the item is already active, there's nothing to do
		if ( target.is( ".ui-state-active" ) ) {
			return;
		}

		// Remove ui-state-active class from siblings of the newly focused menu item
		// to avoid a jump caused by adjacent elements both having a class with a border
		this._removeClass( target.siblings().children( ".ui-state-active" ),
			null, "ui-state-active" );
		this.focus( event, target );
	},

	_destroy: function() {
		var items = this.element.find( ".ui-menu-item" )
				.removeAttr( "role aria-disabled" ),
			submenus = items.children( ".ui-menu-item-wrapper" )
				.removeUniqueId()
				.removeAttr( "tabIndex role aria-haspopup" );

		// Destroy (sub)menus
		this.element
			.removeAttr( "aria-activedescendant" )
			.find( ".ui-menu" ).addBack()
				.removeAttr( "role aria-labelledby aria-expanded aria-hidden aria-disabled " +
					"tabIndex" )
				.removeUniqueId()
				.show();

		submenus.children().each( function() {
			var elem = $( this );
			if ( elem.data( "ui-menu-submenu-caret" ) ) {
				elem.remove();
			}
		} );
	},

	_keydown: function( event ) {
		var match, prev, character, skip,
			preventDefault = true;

		switch ( event.keyCode ) {
		case $.ui.keyCode.PAGE_UP:
			this.previousPage( event );
			break;
		case $.ui.keyCode.PAGE_DOWN:
			this.nextPage( event );
			break;
		case $.ui.keyCode.HOME:
			this._move( "first", "first", event );
			break;
		case $.ui.keyCode.END:
			this._move( "last", "last", event );
			break;
		case $.ui.keyCode.UP:
			this.previous( event );
			break;
		case $.ui.keyCode.DOWN:
			this.next( event );
			break;
		case $.ui.keyCode.LEFT:
			this.collapse( event );
			break;
		case $.ui.keyCode.RIGHT:
			if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
				this.expand( event );
			}
			break;
		case $.ui.keyCode.ENTER:
		case $.ui.keyCode.SPACE:
			this._activate( event );
			break;
		case $.ui.keyCode.ESCAPE:
			this.collapse( event );
			break;
		default:
			preventDefault = false;
			prev = this.previousFilter || "";
			skip = false;

			// Support number pad values
			character = event.keyCode >= 96 && event.keyCode <= 105 ?
				( event.keyCode - 96 ).toString() : String.fromCharCode( event.keyCode );

			clearTimeout( this.filterTimer );

			if ( character === prev ) {
				skip = true;
			} else {
				character = prev + character;
			}

			match = this._filterMenuItems( character );
			match = skip && match.index( this.active.next() ) !== -1 ?
				this.active.nextAll( ".ui-menu-item" ) :
				match;

			// If no matches on the current filter, reset to the last character pressed
			// to move down the menu to the first item that starts with that character
			if ( !match.length ) {
				character = String.fromCharCode( event.keyCode );
				match = this._filterMenuItems( character );
			}

			if ( match.length ) {
				this.focus( event, match );
				this.previousFilter = character;
				this.filterTimer = this._delay( function() {
					delete this.previousFilter;
				}, 1000 );
			} else {
				delete this.previousFilter;
			}
		}

		if ( preventDefault ) {
			event.preventDefault();
		}
	},

	_activate: function( event ) {
		if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
			if ( this.active.children( "[aria-haspopup='true']" ).length ) {
				this.expand( event );
			} else {
				this.select( event );
			}
		}
	},

	refresh: function() {
		var menus, items, newSubmenus, newItems, newWrappers,
			that = this,
			icon = this.options.icons.submenu,
			submenus = this.element.find( this.options.menus );

		this._toggleClass( "ui-menu-icons", null, !!this.element.find( ".ui-icon" ).length );

		// Initialize nested menus
		newSubmenus = submenus.filter( ":not(.ui-menu)" )
			.hide()
			.attr( {
				role: this.options.role,
				"aria-hidden": "true",
				"aria-expanded": "false"
			} )
			.each( function() {
				var menu = $( this ),
					item = menu.prev(),
					submenuCaret = $( "<span>" ).data( "ui-menu-submenu-caret", true );

				that._addClass( submenuCaret, "ui-menu-icon", "ui-icon " + icon );
				item
					.attr( "aria-haspopup", "true" )
					.prepend( submenuCaret );
				menu.attr( "aria-labelledby", item.attr( "id" ) );
			} );

		this._addClass( newSubmenus, "ui-menu", "ui-widget ui-widget-content ui-front" );

		menus = submenus.add( this.element );
		items = menus.find( this.options.items );

		// Initialize menu-items containing spaces and/or dashes only as dividers
		items.not( ".ui-menu-item" ).each( function() {
			var item = $( this );
			if ( that._isDivider( item ) ) {
				that._addClass( item, "ui-menu-divider", "ui-widget-content" );
			}
		} );

		// Don't refresh list items that are already adapted
		newItems = items.not( ".ui-menu-item, .ui-menu-divider" );
		newWrappers = newItems.children()
			.not( ".ui-menu" )
				.uniqueId()
				.attr( {
					tabIndex: -1,
					role: this._itemRole()
				} );
		this._addClass( newItems, "ui-menu-item" )
			._addClass( newWrappers, "ui-menu-item-wrapper" );

		// Add aria-disabled attribute to any disabled menu item
		items.filter( ".ui-state-disabled" ).attr( "aria-disabled", "true" );

		// If the active item has been removed, blur the menu
		if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
			this.blur();
		}
	},

	_itemRole: function() {
		return {
			menu: "menuitem",
			listbox: "option"
		}[ this.options.role ];
	},

	_setOption: function( key, value ) {
		if ( key === "icons" ) {
			var icons = this.element.find( ".ui-menu-icon" );
			this._removeClass( icons, null, this.options.icons.submenu )
				._addClass( icons, null, value.submenu );
		}
		this._super( key, value );
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.element.attr( "aria-disabled", String( value ) );
		this._toggleClass( null, "ui-state-disabled", !!value );
	},

	focus: function( event, item ) {
		var nested, focused, activeParent;
		this.blur( event, event && event.type === "focus" );

		this._scrollIntoView( item );

		this.active = item.first();

		focused = this.active.children( ".ui-menu-item-wrapper" );
		this._addClass( focused, null, "ui-state-active" );

		// Only update aria-activedescendant if there's a role
		// otherwise we assume focus is managed elsewhere
		if ( this.options.role ) {
			this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
		}

		// Highlight active parent menu item, if any
		activeParent = this.active
			.parent()
				.closest( ".ui-menu-item" )
					.children( ".ui-menu-item-wrapper" );
		this._addClass( activeParent, null, "ui-state-active" );

		if ( event && event.type === "keydown" ) {
			this._close();
		} else {
			this.timer = this._delay( function() {
				this._close();
			}, this.delay );
		}

		nested = item.children( ".ui-menu" );
		if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {
			this._startOpening( nested );
		}
		this.activeMenu = item.parent();

		this._trigger( "focus", event, { item: item } );
	},

	_scrollIntoView: function( item ) {
		var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
		if ( this._hasScroll() ) {
			borderTop = parseFloat( $.css( this.activeMenu[ 0 ], "borderTopWidth" ) ) || 0;
			paddingTop = parseFloat( $.css( this.activeMenu[ 0 ], "paddingTop" ) ) || 0;
			offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
			scroll = this.activeMenu.scrollTop();
			elementHeight = this.activeMenu.height();
			itemHeight = item.outerHeight();

			if ( offset < 0 ) {
				this.activeMenu.scrollTop( scroll + offset );
			} else if ( offset + itemHeight > elementHeight ) {
				this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
			}
		}
	},

	blur: function( event, fromFocus ) {
		if ( !fromFocus ) {
			clearTimeout( this.timer );
		}

		if ( !this.active ) {
			return;
		}

		this._removeClass( this.active.children( ".ui-menu-item-wrapper" ),
			null, "ui-state-active" );

		this._trigger( "blur", event, { item: this.active } );
		this.active = null;
	},

	_startOpening: function( submenu ) {
		clearTimeout( this.timer );

		// Don't open if already open fixes a Firefox bug that caused a .5 pixel
		// shift in the submenu position when mousing over the caret icon
		if ( submenu.attr( "aria-hidden" ) !== "true" ) {
			return;
		}

		this.timer = this._delay( function() {
			this._close();
			this._open( submenu );
		}, this.delay );
	},

	_open: function( submenu ) {
		var position = $.extend( {
			of: this.active
		}, this.options.position );

		clearTimeout( this.timer );
		this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
			.hide()
			.attr( "aria-hidden", "true" );

		submenu
			.show()
			.removeAttr( "aria-hidden" )
			.attr( "aria-expanded", "true" )
			.position( position );
	},

	collapseAll: function( event, all ) {
		clearTimeout( this.timer );
		this.timer = this._delay( function() {

			// If we were passed an event, look for the submenu that contains the event
			var currentMenu = all ? this.element :
				$( event && event.target ).closest( this.element.find( ".ui-menu" ) );

			// If we found no valid submenu ancestor, use the main menu to close all
			// sub menus anyway
			if ( !currentMenu.length ) {
				currentMenu = this.element;
			}

			this._close( currentMenu );

			this.blur( event );

			// Work around active item staying active after menu is blurred
			this._removeClass( currentMenu.find( ".ui-state-active" ), null, "ui-state-active" );

			this.activeMenu = currentMenu;
		}, all ? 0 : this.delay );
	},

	// With no arguments, closes the currently active menu - if nothing is active
	// it closes all menus.  If passed an argument, it will search for menus BELOW
	_close: function( startMenu ) {
		if ( !startMenu ) {
			startMenu = this.active ? this.active.parent() : this.element;
		}

		startMenu.find( ".ui-menu" )
			.hide()
			.attr( "aria-hidden", "true" )
			.attr( "aria-expanded", "false" );
	},

	_closeOnDocumentClick: function( event ) {
		return !$( event.target ).closest( ".ui-menu" ).length;
	},

	_isDivider: function( item ) {

		// Match hyphen, em dash, en dash
		return !/[^\-\u2014\u2013\s]/.test( item.text() );
	},

	collapse: function( event ) {
		var newItem = this.active &&
			this.active.parent().closest( ".ui-menu-item", this.element );
		if ( newItem && newItem.length ) {
			this._close();
			this.focus( event, newItem );
		}
	},

	expand: function( event ) {
		var newItem = this.active && this._menuItems( this.active.children( ".ui-menu" ) ).first();

		if ( newItem && newItem.length ) {
			this._open( newItem.parent() );

			// Delay so Firefox will not hide activedescendant change in expanding submenu from AT
			this._delay( function() {
				this.focus( event, newItem );
			} );
		}
	},

	next: function( event ) {
		this._move( "next", "first", event );
	},

	previous: function( event ) {
		this._move( "prev", "last", event );
	},

	isFirstItem: function() {
		return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
	},

	isLastItem: function() {
		return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
	},

	_menuItems: function( menu ) {
		return ( menu || this.element )
			.find( this.options.items )
			.filter( ".ui-menu-item" );
	},

	_move: function( direction, filter, event ) {
		var next;
		if ( this.active ) {
			if ( direction === "first" || direction === "last" ) {
				next = this.active
					[ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
					.last();
			} else {
				next = this.active
					[ direction + "All" ]( ".ui-menu-item" )
					.first();
			}
		}
		if ( !next || !next.length || !this.active ) {
			next = this._menuItems( this.activeMenu )[ filter ]();
		}

		this.focus( event, next );
	},

	nextPage: function( event ) {
		var item, base, height;

		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isLastItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.innerHeight();

			// jQuery 3.2 doesn't include scrollbars in innerHeight, add it back.
			if ( $.fn.jquery.indexOf( "3.2." ) === 0 ) {
				height += this.element[ 0 ].offsetHeight - this.element.outerHeight();
			}

			this.active.nextAll( ".ui-menu-item" ).each( function() {
				item = $( this );
				return item.offset().top - base - height < 0;
			} );

			this.focus( event, item );
		} else {
			this.focus( event, this._menuItems( this.activeMenu )
				[ !this.active ? "first" : "last" ]() );
		}
	},

	previousPage: function( event ) {
		var item, base, height;
		if ( !this.active ) {
			this.next( event );
			return;
		}
		if ( this.isFirstItem() ) {
			return;
		}
		if ( this._hasScroll() ) {
			base = this.active.offset().top;
			height = this.element.innerHeight();

			// jQuery 3.2 doesn't include scrollbars in innerHeight, add it back.
			if ( $.fn.jquery.indexOf( "3.2." ) === 0 ) {
				height += this.element[ 0 ].offsetHeight - this.element.outerHeight();
			}

			this.active.prevAll( ".ui-menu-item" ).each( function() {
				item = $( this );
				return item.offset().top - base + height > 0;
			} );

			this.focus( event, item );
		} else {
			this.focus( event, this._menuItems( this.activeMenu ).first() );
		}
	},

	_hasScroll: function() {
		return this.element.outerHeight() < this.element.prop( "scrollHeight" );
	},

	select: function( event ) {

		// TODO: It should never be possible to not have an active item at this
		// point, but the tests don't trigger mouseenter before click.
		this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
		var ui = { item: this.active };
		if ( !this.active.has( ".ui-menu" ).length ) {
			this.collapseAll( event, true );
		}
		this._trigger( "select", event, ui );
	},

	_filterMenuItems: function( character ) {
		var escapedCharacter = character.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" ),
			regex = new RegExp( "^" + escapedCharacter, "i" );

		return this.activeMenu
			.find( this.options.items )

				// Only match on items, not dividers or other content (#10571)
				.filter( ".ui-menu-item" )
					.filter( function() {
						return regex.test(
							String.prototype.trim.call(
								$( this ).children( ".ui-menu-item-wrapper" ).text() ) );
					} );
	}
} );


/*!
 * jQuery UI Autocomplete 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Autocomplete
//>>group: Widgets
//>>description: Lists suggested words as the user is typing.
//>>docs: http://api.jqueryui.com/autocomplete/
//>>demos: http://jqueryui.com/autocomplete/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/autocomplete.css
//>>css.theme: ../../themes/base/theme.css


$.widget( "ui.autocomplete", {
	version: "1.13.2",
	defaultElement: "<input>",
	options: {
		appendTo: null,
		autoFocus: false,
		delay: 300,
		minLength: 1,
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		source: null,

		// Callbacks
		change: null,
		close: null,
		focus: null,
		open: null,
		response: null,
		search: null,
		select: null
	},

	requestIndex: 0,
	pending: 0,
	liveRegionTimer: null,

	_create: function() {

		// Some browsers only repeat keydown events, not keypress events,
		// so we use the suppressKeyPress flag to determine if we've already
		// handled the keydown event. #7269
		// Unfortunately the code for & in keypress is the same as the up arrow,
		// so we use the suppressKeyPressRepeat flag to avoid handling keypress
		// events when we know the keydown event was used to modify the
		// search term. #7799
		var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
			nodeName = this.element[ 0 ].nodeName.toLowerCase(),
			isTextarea = nodeName === "textarea",
			isInput = nodeName === "input";

		// Textareas are always multi-line
		// Inputs are always single-line, even if inside a contentEditable element
		// IE also treats inputs as contentEditable
		// All other element types are determined by whether or not they're contentEditable
		this.isMultiLine = isTextarea || !isInput && this._isContentEditable( this.element );

		this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
		this.isNewMenu = true;

		this._addClass( "ui-autocomplete-input" );
		this.element.attr( "autocomplete", "off" );

		this._on( this.element, {
			keydown: function( event ) {
				if ( this.element.prop( "readOnly" ) ) {
					suppressKeyPress = true;
					suppressInput = true;
					suppressKeyPressRepeat = true;
					return;
				}

				suppressKeyPress = false;
				suppressInput = false;
				suppressKeyPressRepeat = false;
				var keyCode = $.ui.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					suppressKeyPress = true;
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					suppressKeyPress = true;
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					suppressKeyPress = true;
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					suppressKeyPress = true;
					this._keyEvent( "next", event );
					break;
				case keyCode.ENTER:

					// when menu is open and has focus
					if ( this.menu.active ) {

						// #6055 - Opera still allows the keypress to occur
						// which causes forms to submit
						suppressKeyPress = true;
						event.preventDefault();
						this.menu.select( event );
					}
					break;
				case keyCode.TAB:
					if ( this.menu.active ) {
						this.menu.select( event );
					}
					break;
				case keyCode.ESCAPE:
					if ( this.menu.element.is( ":visible" ) ) {
						if ( !this.isMultiLine ) {
							this._value( this.term );
						}
						this.close( event );

						// Different browsers have different default behavior for escape
						// Single press can mean undo or clear
						// Double press in IE means clear the whole form
						event.preventDefault();
					}
					break;
				default:
					suppressKeyPressRepeat = true;

					// search timeout should be triggered before the input value is changed
					this._searchTimeout( event );
					break;
				}
			},
			keypress: function( event ) {
				if ( suppressKeyPress ) {
					suppressKeyPress = false;
					if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
						event.preventDefault();
					}
					return;
				}
				if ( suppressKeyPressRepeat ) {
					return;
				}

				// Replicate some key handlers to allow them to repeat in Firefox and Opera
				var keyCode = $.ui.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					this._keyEvent( "next", event );
					break;
				}
			},
			input: function( event ) {
				if ( suppressInput ) {
					suppressInput = false;
					event.preventDefault();
					return;
				}
				this._searchTimeout( event );
			},
			focus: function() {
				this.selectedItem = null;
				this.previous = this._value();
			},
			blur: function( event ) {
				clearTimeout( this.searching );
				this.close( event );
				this._change( event );
			}
		} );

		this._initSource();
		this.menu = $( "<ul>" )
			.appendTo( this._appendTo() )
			.menu( {

				// disable ARIA support, the live region takes care of that
				role: null
			} )
			.hide()

			// Support: IE 11 only, Edge <= 14
			// For other browsers, we preventDefault() on the mousedown event
			// to keep the dropdown from taking focus from the input. This doesn't
			// work for IE/Edge, causing problems with selection and scrolling (#9638)
			// Happily, IE and Edge support an "unselectable" attribute that
			// prevents an element from receiving focus, exactly what we want here.
			.attr( {
				"unselectable": "on"
			} )
			.menu( "instance" );

		this._addClass( this.menu.element, "ui-autocomplete", "ui-front" );
		this._on( this.menu.element, {
			mousedown: function( event ) {

				// Prevent moving focus out of the text field
				event.preventDefault();
			},
			menufocus: function( event, ui ) {
				var label, item;

				// support: Firefox
				// Prevent accidental activation of menu items in Firefox (#7024 #9118)
				if ( this.isNewMenu ) {
					this.isNewMenu = false;
					if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
						this.menu.blur();

						this.document.one( "mousemove", function() {
							$( event.target ).trigger( event.originalEvent );
						} );

						return;
					}
				}

				item = ui.item.data( "ui-autocomplete-item" );
				if ( false !== this._trigger( "focus", event, { item: item } ) ) {

					// use value to match what will end up in the input, if it was a key event
					if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
						this._value( item.value );
					}
				}

				// Announce the value in the liveRegion
				label = ui.item.attr( "aria-label" ) || item.value;
				if ( label && String.prototype.trim.call( label ).length ) {
					clearTimeout( this.liveRegionTimer );
					this.liveRegionTimer = this._delay( function() {
						this.liveRegion.html( $( "<div>" ).text( label ) );
					}, 100 );
				}
			},
			menuselect: function( event, ui ) {
				var item = ui.item.data( "ui-autocomplete-item" ),
					previous = this.previous;

				// Only trigger when focus was lost (click on menu)
				if ( this.element[ 0 ] !== $.ui.safeActiveElement( this.document[ 0 ] ) ) {
					this.element.trigger( "focus" );
					this.previous = previous;

					// #6109 - IE triggers two focus events and the second
					// is asynchronous, so we need to reset the previous
					// term synchronously and asynchronously :-(
					this._delay( function() {
						this.previous = previous;
						this.selectedItem = item;
					} );
				}

				if ( false !== this._trigger( "select", event, { item: item } ) ) {
					this._value( item.value );
				}

				// reset the term after the select event
				// this allows custom select handling to work properly
				this.term = this._value();

				this.close( event );
				this.selectedItem = item;
			}
		} );

		this.liveRegion = $( "<div>", {
			role: "status",
			"aria-live": "assertive",
			"aria-relevant": "additions"
		} )
			.appendTo( this.document[ 0 ].body );

		this._addClass( this.liveRegion, null, "ui-helper-hidden-accessible" );

		// Turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		} );
	},

	_destroy: function() {
		clearTimeout( this.searching );
		this.element.removeAttr( "autocomplete" );
		this.menu.element.remove();
		this.liveRegion.remove();
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "source" ) {
			this._initSource();
		}
		if ( key === "appendTo" ) {
			this.menu.element.appendTo( this._appendTo() );
		}
		if ( key === "disabled" && value && this.xhr ) {
			this.xhr.abort();
		}
	},

	_isEventTargetInWidget: function( event ) {
		var menuElement = this.menu.element[ 0 ];

		return event.target === this.element[ 0 ] ||
			event.target === menuElement ||
			$.contains( menuElement, event.target );
	},

	_closeOnClickOutside: function( event ) {
		if ( !this._isEventTargetInWidget( event ) ) {
			this.close();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element || !element[ 0 ] ) {
			element = this.element.closest( ".ui-front, dialog" );
		}

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_initSource: function() {
		var array, url,
			that = this;
		if ( Array.isArray( this.options.source ) ) {
			array = this.options.source;
			this.source = function( request, response ) {
				response( $.ui.autocomplete.filter( array, request.term ) );
			};
		} else if ( typeof this.options.source === "string" ) {
			url = this.options.source;
			this.source = function( request, response ) {
				if ( that.xhr ) {
					that.xhr.abort();
				}
				that.xhr = $.ajax( {
					url: url,
					data: request,
					dataType: "json",
					success: function( data ) {
						response( data );
					},
					error: function() {
						response( [] );
					}
				} );
			};
		} else {
			this.source = this.options.source;
		}
	},

	_searchTimeout: function( event ) {
		clearTimeout( this.searching );
		this.searching = this._delay( function() {

			// Search if the value has changed, or if the user retypes the same value (see #7434)
			var equalValues = this.term === this._value(),
				menuVisible = this.menu.element.is( ":visible" ),
				modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

			if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {
				this.selectedItem = null;
				this.search( null, event );
			}
		}, this.options.delay );
	},

	search: function( value, event ) {
		value = value != null ? value : this._value();

		// Always save the actual value, not the one passed as an argument
		this.term = this._value();

		if ( value.length < this.options.minLength ) {
			return this.close( event );
		}

		if ( this._trigger( "search", event ) === false ) {
			return;
		}

		return this._search( value );
	},

	_search: function( value ) {
		this.pending++;
		this._addClass( "ui-autocomplete-loading" );
		this.cancelSearch = false;

		this.source( { term: value }, this._response() );
	},

	_response: function() {
		var index = ++this.requestIndex;

		return function( content ) {
			if ( index === this.requestIndex ) {
				this.__response( content );
			}

			this.pending--;
			if ( !this.pending ) {
				this._removeClass( "ui-autocomplete-loading" );
			}
		}.bind( this );
	},

	__response: function( content ) {
		if ( content ) {
			content = this._normalize( content );
		}
		this._trigger( "response", null, { content: content } );
		if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
			this._suggest( content );
			this._trigger( "open" );
		} else {

			// use ._close() instead of .close() so we don't cancel future searches
			this._close();
		}
	},

	close: function( event ) {
		this.cancelSearch = true;
		this._close( event );
	},

	_close: function( event ) {

		// Remove the handler that closes the menu on outside clicks
		this._off( this.document, "mousedown" );

		if ( this.menu.element.is( ":visible" ) ) {
			this.menu.element.hide();
			this.menu.blur();
			this.isNewMenu = true;
			this._trigger( "close", event );
		}
	},

	_change: function( event ) {
		if ( this.previous !== this._value() ) {
			this._trigger( "change", event, { item: this.selectedItem } );
		}
	},

	_normalize: function( items ) {

		// assume all items have the right format when the first item is complete
		if ( items.length && items[ 0 ].label && items[ 0 ].value ) {
			return items;
		}
		return $.map( items, function( item ) {
			if ( typeof item === "string" ) {
				return {
					label: item,
					value: item
				};
			}
			return $.extend( {}, item, {
				label: item.label || item.value,
				value: item.value || item.label
			} );
		} );
	},

	_suggest: function( items ) {
		var ul = this.menu.element.empty();
		this._renderMenu( ul, items );
		this.isNewMenu = true;
		this.menu.refresh();

		// Size and position menu
		ul.show();
		this._resizeMenu();
		ul.position( $.extend( {
			of: this.element
		}, this.options.position ) );

		if ( this.options.autoFocus ) {
			this.menu.next();
		}

		// Listen for interactions outside of the widget (#6642)
		this._on( this.document, {
			mousedown: "_closeOnClickOutside"
		} );
	},

	_resizeMenu: function() {
		var ul = this.menu.element;
		ul.outerWidth( Math.max(

			// Firefox wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping (#7513)
			ul.width( "" ).outerWidth() + 1,
			this.element.outerWidth()
		) );
	},

	_renderMenu: function( ul, items ) {
		var that = this;
		$.each( items, function( index, item ) {
			that._renderItemData( ul, item );
		} );
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
	},

	_renderItem: function( ul, item ) {
		return $( "<li>" )
			.append( $( "<div>" ).text( item.label ) )
			.appendTo( ul );
	},

	_move: function( direction, event ) {
		if ( !this.menu.element.is( ":visible" ) ) {
			this.search( null, event );
			return;
		}
		if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
				this.menu.isLastItem() && /^next/.test( direction ) ) {

			if ( !this.isMultiLine ) {
				this._value( this.term );
			}

			this.menu.blur();
			return;
		}
		this.menu[ direction ]( event );
	},

	widget: function() {
		return this.menu.element;
	},

	_value: function() {
		return this.valueMethod.apply( this.element, arguments );
	},

	_keyEvent: function( keyEvent, event ) {
		if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
			this._move( keyEvent, event );

			// Prevents moving cursor to beginning/end of the text field in some browsers
			event.preventDefault();
		}
	},

	// Support: Chrome <=50
	// We should be able to just use this.element.prop( "isContentEditable" )
	// but hidden elements always report false in Chrome.
	// https://code.google.com/p/chromium/issues/detail?id=313082
	_isContentEditable: function( element ) {
		if ( !element.length ) {
			return false;
		}

		var editable = element.prop( "contentEditable" );

		if ( editable === "inherit" ) {
			return this._isContentEditable( element.parent() );
		}

		return editable === "true";
	}
} );

$.extend( $.ui.autocomplete, {
	escapeRegex: function( value ) {
		return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
	},
	filter: function( array, term ) {
		var matcher = new RegExp( $.ui.autocomplete.escapeRegex( term ), "i" );
		return $.grep( array, function( value ) {
			return matcher.test( value.label || value.value || value );
		} );
	}
} );

// Live region extension, adding a `messages` option
// NOTE: This is an experimental API. We are still investigating
// a full solution for string manipulation and internationalization.
$.widget( "ui.autocomplete", $.ui.autocomplete, {
	options: {
		messages: {
			noResults: "No search results.",
			results: function( amount ) {
				return amount + ( amount > 1 ? " results are" : " result is" ) +
					" available, use up and down arrow keys to navigate.";
			}
		}
	},

	__response: function( content ) {
		var message;
		this._superApply( arguments );
		if ( this.options.disabled || this.cancelSearch ) {
			return;
		}
		if ( content && content.length ) {
			message = this.options.messages.results( content.length );
		} else {
			message = this.options.messages.noResults;
		}
		clearTimeout( this.liveRegionTimer );
		this.liveRegionTimer = this._delay( function() {
			this.liveRegion.html( $( "<div>" ).text( message ) );
		}, 100 );
	}
} );

var widgetsAutocomplete = $.ui.autocomplete;


/*!
 * jQuery UI Controlgroup 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Controlgroup
//>>group: Widgets
//>>description: Visually groups form control widgets
//>>docs: http://api.jqueryui.com/controlgroup/
//>>demos: http://jqueryui.com/controlgroup/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/controlgroup.css
//>>css.theme: ../../themes/base/theme.css


var controlgroupCornerRegex = /ui-corner-([a-z]){2,6}/g;

var widgetsControlgroup = $.widget( "ui.controlgroup", {
	version: "1.13.2",
	defaultElement: "<div>",
	options: {
		direction: "horizontal",
		disabled: null,
		onlyVisible: true,
		items: {
			"button": "input[type=button], input[type=submit], input[type=reset], button, a",
			"controlgroupLabel": ".ui-controlgroup-label",
			"checkboxradio": "input[type='checkbox'], input[type='radio']",
			"selectmenu": "select",
			"spinner": ".ui-spinner-input"
		}
	},

	_create: function() {
		this._enhance();
	},

	// To support the enhanced option in jQuery Mobile, we isolate DOM manipulation
	_enhance: function() {
		this.element.attr( "role", "toolbar" );
		this.refresh();
	},

	_destroy: function() {
		this._callChildMethod( "destroy" );
		this.childWidgets.removeData( "ui-controlgroup-data" );
		this.element.removeAttr( "role" );
		if ( this.options.items.controlgroupLabel ) {
			this.element
				.find( this.options.items.controlgroupLabel )
				.find( ".ui-controlgroup-label-contents" )
				.contents().unwrap();
		}
	},

	_initWidgets: function() {
		var that = this,
			childWidgets = [];

		// First we iterate over each of the items options
		$.each( this.options.items, function( widget, selector ) {
			var labels;
			var options = {};

			// Make sure the widget has a selector set
			if ( !selector ) {
				return;
			}

			if ( widget === "controlgroupLabel" ) {
				labels = that.element.find( selector );
				labels.each( function() {
					var element = $( this );

					if ( element.children( ".ui-controlgroup-label-contents" ).length ) {
						return;
					}
					element.contents()
						.wrapAll( "<span class='ui-controlgroup-label-contents'></span>" );
				} );
				that._addClass( labels, null, "ui-widget ui-widget-content ui-state-default" );
				childWidgets = childWidgets.concat( labels.get() );
				return;
			}

			// Make sure the widget actually exists
			if ( !$.fn[ widget ] ) {
				return;
			}

			// We assume everything is in the middle to start because we can't determine
			// first / last elements until all enhancments are done.
			if ( that[ "_" + widget + "Options" ] ) {
				options = that[ "_" + widget + "Options" ]( "middle" );
			} else {
				options = { classes: {} };
			}

			// Find instances of this widget inside controlgroup and init them
			that.element
				.find( selector )
				.each( function() {
					var element = $( this );
					var instance = element[ widget ]( "instance" );

					// We need to clone the default options for this type of widget to avoid
					// polluting the variable options which has a wider scope than a single widget.
					var instanceOptions = $.widget.extend( {}, options );

					// If the button is the child of a spinner ignore it
					// TODO: Find a more generic solution
					if ( widget === "button" && element.parent( ".ui-spinner" ).length ) {
						return;
					}

					// Create the widget if it doesn't exist
					if ( !instance ) {
						instance = element[ widget ]()[ widget ]( "instance" );
					}
					if ( instance ) {
						instanceOptions.classes =
							that._resolveClassesValues( instanceOptions.classes, instance );
					}
					element[ widget ]( instanceOptions );

					// Store an instance of the controlgroup to be able to reference
					// from the outermost element for changing options and refresh
					var widgetElement = element[ widget ]( "widget" );
					$.data( widgetElement[ 0 ], "ui-controlgroup-data",
						instance ? instance : element[ widget ]( "instance" ) );

					childWidgets.push( widgetElement[ 0 ] );
				} );
		} );

		this.childWidgets = $( $.uniqueSort( childWidgets ) );
		this._addClass( this.childWidgets, "ui-controlgroup-item" );
	},

	_callChildMethod: function( method ) {
		this.childWidgets.each( function() {
			var element = $( this ),
				data = element.data( "ui-controlgroup-data" );
			if ( data && data[ method ] ) {
				data[ method ]();
			}
		} );
	},

	_updateCornerClass: function( element, position ) {
		var remove = "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all";
		var add = this._buildSimpleOptions( position, "label" ).classes.label;

		this._removeClass( element, null, remove );
		this._addClass( element, null, add );
	},

	_buildSimpleOptions: function( position, key ) {
		var direction = this.options.direction === "vertical";
		var result = {
			classes: {}
		};
		result.classes[ key ] = {
			"middle": "",
			"first": "ui-corner-" + ( direction ? "top" : "left" ),
			"last": "ui-corner-" + ( direction ? "bottom" : "right" ),
			"only": "ui-corner-all"
		}[ position ];

		return result;
	},

	_spinnerOptions: function( position ) {
		var options = this._buildSimpleOptions( position, "ui-spinner" );

		options.classes[ "ui-spinner-up" ] = "";
		options.classes[ "ui-spinner-down" ] = "";

		return options;
	},

	_buttonOptions: function( position ) {
		return this._buildSimpleOptions( position, "ui-button" );
	},

	_checkboxradioOptions: function( position ) {
		return this._buildSimpleOptions( position, "ui-checkboxradio-label" );
	},

	_selectmenuOptions: function( position ) {
		var direction = this.options.direction === "vertical";
		return {
			width: direction ? "auto" : false,
			classes: {
				middle: {
					"ui-selectmenu-button-open": "",
					"ui-selectmenu-button-closed": ""
				},
				first: {
					"ui-selectmenu-button-open": "ui-corner-" + ( direction ? "top" : "tl" ),
					"ui-selectmenu-button-closed": "ui-corner-" + ( direction ? "top" : "left" )
				},
				last: {
					"ui-selectmenu-button-open": direction ? "" : "ui-corner-tr",
					"ui-selectmenu-button-closed": "ui-corner-" + ( direction ? "bottom" : "right" )
				},
				only: {
					"ui-selectmenu-button-open": "ui-corner-top",
					"ui-selectmenu-button-closed": "ui-corner-all"
				}

			}[ position ]
		};
	},

	_resolveClassesValues: function( classes, instance ) {
		var result = {};
		$.each( classes, function( key ) {
			var current = instance.options.classes[ key ] || "";
			current = String.prototype.trim.call( current.replace( controlgroupCornerRegex, "" ) );
			result[ key ] = ( current + " " + classes[ key ] ).replace( /\s+/g, " " );
		} );
		return result;
	},

	_setOption: function( key, value ) {
		if ( key === "direction" ) {
			this._removeClass( "ui-controlgroup-" + this.options.direction );
		}

		this._super( key, value );
		if ( key === "disabled" ) {
			this._callChildMethod( value ? "disable" : "enable" );
			return;
		}

		this.refresh();
	},

	refresh: function() {
		var children,
			that = this;

		this._addClass( "ui-controlgroup ui-controlgroup-" + this.options.direction );

		if ( this.options.direction === "horizontal" ) {
			this._addClass( null, "ui-helper-clearfix" );
		}
		this._initWidgets();

		children = this.childWidgets;

		// We filter here because we need to track all childWidgets not just the visible ones
		if ( this.options.onlyVisible ) {
			children = children.filter( ":visible" );
		}

		if ( children.length ) {

			// We do this last because we need to make sure all enhancment is done
			// before determining first and last
			$.each( [ "first", "last" ], function( index, value ) {
				var instance = children[ value ]().data( "ui-controlgroup-data" );

				if ( instance && that[ "_" + instance.widgetName + "Options" ] ) {
					var options = that[ "_" + instance.widgetName + "Options" ](
						children.length === 1 ? "only" : value
					);
					options.classes = that._resolveClassesValues( options.classes, instance );
					instance.element[ instance.widgetName ]( options );
				} else {
					that._updateCornerClass( children[ value ](), value );
				}
			} );

			// Finally call the refresh method on each of the child widgets.
			this._callChildMethod( "refresh" );
		}
	}
} );

/*!
 * jQuery UI Checkboxradio 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Checkboxradio
//>>group: Widgets
//>>description: Enhances a form with multiple themeable checkboxes or radio buttons.
//>>docs: http://api.jqueryui.com/checkboxradio/
//>>demos: http://jqueryui.com/checkboxradio/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/button.css
//>>css.structure: ../../themes/base/checkboxradio.css
//>>css.theme: ../../themes/base/theme.css


$.widget( "ui.checkboxradio", [ $.ui.formResetMixin, {
	version: "1.13.2",
	options: {
		disabled: null,
		label: null,
		icon: true,
		classes: {
			"ui-checkboxradio-label": "ui-corner-all",
			"ui-checkboxradio-icon": "ui-corner-all"
		}
	},

	_getCreateOptions: function() {
		var disabled, labels, labelContents;
		var options = this._super() || {};

		// We read the type here, because it makes more sense to throw a element type error first,
		// rather then the error for lack of a label. Often if its the wrong type, it
		// won't have a label (e.g. calling on a div, btn, etc)
		this._readType();

		labels = this.element.labels();

		// If there are multiple labels, use the last one
		this.label = $( labels[ labels.length - 1 ] );
		if ( !this.label.length ) {
			$.error( "No label found for checkboxradio widget" );
		}

		this.originalLabel = "";

		// We need to get the label text but this may also need to make sure it does not contain the
		// input itself.
		// The label contents could be text, html, or a mix. We wrap all elements
		// and read the wrapper's `innerHTML` to get a string representation of
		// the label, without the input as part of it.
		labelContents = this.label.contents().not( this.element[ 0 ] );

		if ( labelContents.length ) {
			this.originalLabel += labelContents
				.clone()
				.wrapAll( "<div></div>" )
				.parent()
				.html();
		}

		// Set the label option if we found label text
		if ( this.originalLabel ) {
			options.label = this.originalLabel;
		}

		disabled = this.element[ 0 ].disabled;
		if ( disabled != null ) {
			options.disabled = disabled;
		}
		return options;
	},

	_create: function() {
		var checked = this.element[ 0 ].checked;

		this._bindFormResetHandler();

		if ( this.options.disabled == null ) {
			this.options.disabled = this.element[ 0 ].disabled;
		}

		this._setOption( "disabled", this.options.disabled );
		this._addClass( "ui-checkboxradio", "ui-helper-hidden-accessible" );
		this._addClass( this.label, "ui-checkboxradio-label", "ui-button ui-widget" );

		if ( this.type === "radio" ) {
			this._addClass( this.label, "ui-checkboxradio-radio-label" );
		}

		if ( this.options.label && this.options.label !== this.originalLabel ) {
			this._updateLabel();
		} else if ( this.originalLabel ) {
			this.options.label = this.originalLabel;
		}

		this._enhance();

		if ( checked ) {
			this._addClass( this.label, "ui-checkboxradio-checked", "ui-state-active" );
		}

		this._on( {
			change: "_toggleClasses",
			focus: function() {
				this._addClass( this.label, null, "ui-state-focus ui-visual-focus" );
			},
			blur: function() {
				this._removeClass( this.label, null, "ui-state-focus ui-visual-focus" );
			}
		} );
	},

	_readType: function() {
		var nodeName = this.element[ 0 ].nodeName.toLowerCase();
		this.type = this.element[ 0 ].type;
		if ( nodeName !== "input" || !/radio|checkbox/.test( this.type ) ) {
			$.error( "Can't create checkboxradio on element.nodeName=" + nodeName +
				" and element.type=" + this.type );
		}
	},

	// Support jQuery Mobile enhanced option
	_enhance: function() {
		this._updateIcon( this.element[ 0 ].checked );
	},

	widget: function() {
		return this.label;
	},

	_getRadioGroup: function() {
		var group;
		var name = this.element[ 0 ].name;
		var nameSelector = "input[name='" + $.escapeSelector( name ) + "']";

		if ( !name ) {
			return $( [] );
		}

		if ( this.form.length ) {
			group = $( this.form[ 0 ].elements ).filter( nameSelector );
		} else {

			// Not inside a form, check all inputs that also are not inside a form
			group = $( nameSelector ).filter( function() {
				return $( this )._form().length === 0;
			} );
		}

		return group.not( this.element );
	},

	_toggleClasses: function() {
		var checked = this.element[ 0 ].checked;
		this._toggleClass( this.label, "ui-checkboxradio-checked", "ui-state-active", checked );

		if ( this.options.icon && this.type === "checkbox" ) {
			this._toggleClass( this.icon, null, "ui-icon-check ui-state-checked", checked )
				._toggleClass( this.icon, null, "ui-icon-blank", !checked );
		}

		if ( this.type === "radio" ) {
			this._getRadioGroup()
				.each( function() {
					var instance = $( this ).checkboxradio( "instance" );

					if ( instance ) {
						instance._removeClass( instance.label,
							"ui-checkboxradio-checked", "ui-state-active" );
					}
				} );
		}
	},

	_destroy: function() {
		this._unbindFormResetHandler();

		if ( this.icon ) {
			this.icon.remove();
			this.iconSpace.remove();
		}
	},

	_setOption: function( key, value ) {

		// We don't allow the value to be set to nothing
		if ( key === "label" && !value ) {
			return;
		}

		this._super( key, value );

		if ( key === "disabled" ) {
			this._toggleClass( this.label, null, "ui-state-disabled", value );
			this.element[ 0 ].disabled = value;

			// Don't refresh when setting disabled
			return;
		}
		this.refresh();
	},

	_updateIcon: function( checked ) {
		var toAdd = "ui-icon ui-icon-background ";

		if ( this.options.icon ) {
			if ( !this.icon ) {
				this.icon = $( "<span>" );
				this.iconSpace = $( "<span> </span>" );
				this._addClass( this.iconSpace, "ui-checkboxradio-icon-space" );
			}

			if ( this.type === "checkbox" ) {
				toAdd += checked ? "ui-icon-check ui-state-checked" : "ui-icon-blank";
				this._removeClass( this.icon, null, checked ? "ui-icon-blank" : "ui-icon-check" );
			} else {
				toAdd += "ui-icon-blank";
			}
			this._addClass( this.icon, "ui-checkboxradio-icon", toAdd );
			if ( !checked ) {
				this._removeClass( this.icon, null, "ui-icon-check ui-state-checked" );
			}
			this.icon.prependTo( this.label ).after( this.iconSpace );
		} else if ( this.icon !== undefined ) {
			this.icon.remove();
			this.iconSpace.remove();
			delete this.icon;
		}
	},

	_updateLabel: function() {

		// Remove the contents of the label ( minus the icon, icon space, and input )
		var contents = this.label.contents().not( this.element[ 0 ] );
		if ( this.icon ) {
			contents = contents.not( this.icon[ 0 ] );
		}
		if ( this.iconSpace ) {
			contents = contents.not( this.iconSpace[ 0 ] );
		}
		contents.remove();

		this.label.append( this.options.label );
	},

	refresh: function() {
		var checked = this.element[ 0 ].checked,
			isDisabled = this.element[ 0 ].disabled;

		this._updateIcon( checked );
		this._toggleClass( this.label, "ui-checkboxradio-checked", "ui-state-active", checked );
		if ( this.options.label !== null ) {
			this._updateLabel();
		}

		if ( isDisabled !== this.options.disabled ) {
			this._setOptions( { "disabled": isDisabled } );
		}
	}

} ] );

var widgetsCheckboxradio = $.ui.checkboxradio;


/*!
 * jQuery UI Button 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Button
//>>group: Widgets
//>>description: Enhances a form with themeable buttons.
//>>docs: http://api.jqueryui.com/button/
//>>demos: http://jqueryui.com/button/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/button.css
//>>css.theme: ../../themes/base/theme.css


$.widget( "ui.button", {
	version: "1.13.2",
	defaultElement: "<button>",
	options: {
		classes: {
			"ui-button": "ui-corner-all"
		},
		disabled: null,
		icon: null,
		iconPosition: "beginning",
		label: null,
		showLabel: true
	},

	_getCreateOptions: function() {
		var disabled,

			// This is to support cases like in jQuery Mobile where the base widget does have
			// an implementation of _getCreateOptions
			options = this._super() || {};

		this.isInput = this.element.is( "input" );

		disabled = this.element[ 0 ].disabled;
		if ( disabled != null ) {
			options.disabled = disabled;
		}

		this.originalLabel = this.isInput ? this.element.val() : this.element.html();
		if ( this.originalLabel ) {
			options.label = this.originalLabel;
		}

		return options;
	},

	_create: function() {
		if ( !this.option.showLabel & !this.options.icon ) {
			this.options.showLabel = true;
		}

		// We have to check the option again here even though we did in _getCreateOptions,
		// because null may have been passed on init which would override what was set in
		// _getCreateOptions
		if ( this.options.disabled == null ) {
			this.options.disabled = this.element[ 0 ].disabled || false;
		}

		this.hasTitle = !!this.element.attr( "title" );

		// Check to see if the label needs to be set or if its already correct
		if ( this.options.label && this.options.label !== this.originalLabel ) {
			if ( this.isInput ) {
				this.element.val( this.options.label );
			} else {
				this.element.html( this.options.label );
			}
		}
		this._addClass( "ui-button", "ui-widget" );
		this._setOption( "disabled", this.options.disabled );
		this._enhance();

		if ( this.element.is( "a" ) ) {
			this._on( {
				"keyup": function( event ) {
					if ( event.keyCode === $.ui.keyCode.SPACE ) {
						event.preventDefault();

						// Support: PhantomJS <= 1.9, IE 8 Only
						// If a native click is available use it so we actually cause navigation
						// otherwise just trigger a click event
						if ( this.element[ 0 ].click ) {
							this.element[ 0 ].click();
						} else {
							this.element.trigger( "click" );
						}
					}
				}
			} );
		}
	},

	_enhance: function() {
		if ( !this.element.is( "button" ) ) {
			this.element.attr( "role", "button" );
		}

		if ( this.options.icon ) {
			this._updateIcon( "icon", this.options.icon );
			this._updateTooltip();
		}
	},

	_updateTooltip: function() {
		this.title = this.element.attr( "title" );

		if ( !this.options.showLabel && !this.title ) {
			this.element.attr( "title", this.options.label );
		}
	},

	_updateIcon: function( option, value ) {
		var icon = option !== "iconPosition",
			position = icon ? this.options.iconPosition : value,
			displayBlock = position === "top" || position === "bottom";

		// Create icon
		if ( !this.icon ) {
			this.icon = $( "<span>" );

			this._addClass( this.icon, "ui-button-icon", "ui-icon" );

			if ( !this.options.showLabel ) {
				this._addClass( "ui-button-icon-only" );
			}
		} else if ( icon ) {

			// If we are updating the icon remove the old icon class
			this._removeClass( this.icon, null, this.options.icon );
		}

		// If we are updating the icon add the new icon class
		if ( icon ) {
			this._addClass( this.icon, null, value );
		}

		this._attachIcon( position );

		// If the icon is on top or bottom we need to add the ui-widget-icon-block class and remove
		// the iconSpace if there is one.
		if ( displayBlock ) {
			this._addClass( this.icon, null, "ui-widget-icon-block" );
			if ( this.iconSpace ) {
				this.iconSpace.remove();
			}
		} else {

			// Position is beginning or end so remove the ui-widget-icon-block class and add the
			// space if it does not exist
			if ( !this.iconSpace ) {
				this.iconSpace = $( "<span> </span>" );
				this._addClass( this.iconSpace, "ui-button-icon-space" );
			}
			this._removeClass( this.icon, null, "ui-wiget-icon-block" );
			this._attachIconSpace( position );
		}
	},

	_destroy: function() {
		this.element.removeAttr( "role" );

		if ( this.icon ) {
			this.icon.remove();
		}
		if ( this.iconSpace ) {
			this.iconSpace.remove();
		}
		if ( !this.hasTitle ) {
			this.element.removeAttr( "title" );
		}
	},

	_attachIconSpace: function( iconPosition ) {
		this.icon[ /^(?:end|bottom)/.test( iconPosition ) ? "before" : "after" ]( this.iconSpace );
	},

	_attachIcon: function( iconPosition ) {
		this.element[ /^(?:end|bottom)/.test( iconPosition ) ? "append" : "prepend" ]( this.icon );
	},

	_setOptions: function( options ) {
		var newShowLabel = options.showLabel === undefined ?
				this.options.showLabel :
				options.showLabel,
			newIcon = options.icon === undefined ? this.options.icon : options.icon;

		if ( !newShowLabel && !newIcon ) {
			options.showLabel = true;
		}
		this._super( options );
	},

	_setOption: function( key, value ) {
		if ( key === "icon" ) {
			if ( value ) {
				this._updateIcon( key, value );
			} else if ( this.icon ) {
				this.icon.remove();
				if ( this.iconSpace ) {
					this.iconSpace.remove();
				}
			}
		}

		if ( key === "iconPosition" ) {
			this._updateIcon( key, value );
		}

		// Make sure we can't end up with a button that has neither text nor icon
		if ( key === "showLabel" ) {
				this._toggleClass( "ui-button-icon-only", null, !value );
				this._updateTooltip();
		}

		if ( key === "label" ) {
			if ( this.isInput ) {
				this.element.val( value );
			} else {

				// If there is an icon, append it, else nothing then append the value
				// this avoids removal of the icon when setting label text
				this.element.html( value );
				if ( this.icon ) {
					this._attachIcon( this.options.iconPosition );
					this._attachIconSpace( this.options.iconPosition );
				}
			}
		}

		this._super( key, value );

		if ( key === "disabled" ) {
			this._toggleClass( null, "ui-state-disabled", value );
			this.element[ 0 ].disabled = value;
			if ( value ) {
				this.element.trigger( "blur" );
			}
		}
	},

	refresh: function() {

		// Make sure to only check disabled if its an element that supports this otherwise
		// check for the disabled class to determine state
		var isDisabled = this.element.is( "input, button" ) ?
			this.element[ 0 ].disabled : this.element.hasClass( "ui-button-disabled" );

		if ( isDisabled !== this.options.disabled ) {
			this._setOptions( { disabled: isDisabled } );
		}

		this._updateTooltip();
	}
} );

// DEPRECATED
if ( $.uiBackCompat !== false ) {

	// Text and Icons options
	$.widget( "ui.button", $.ui.button, {
		options: {
			text: true,
			icons: {
				primary: null,
				secondary: null
			}
		},

		_create: function() {
			if ( this.options.showLabel && !this.options.text ) {
				this.options.showLabel = this.options.text;
			}
			if ( !this.options.showLabel && this.options.text ) {
				this.options.text = this.options.showLabel;
			}
			if ( !this.options.icon && ( this.options.icons.primary ||
					this.options.icons.secondary ) ) {
				if ( this.options.icons.primary ) {
					this.options.icon = this.options.icons.primary;
				} else {
					this.options.icon = this.options.icons.secondary;
					this.options.iconPosition = "end";
				}
			} else if ( this.options.icon ) {
				this.options.icons.primary = this.options.icon;
			}
			this._super();
		},

		_setOption: function( key, value ) {
			if ( key === "text" ) {
				this._super( "showLabel", value );
				return;
			}
			if ( key === "showLabel" ) {
				this.options.text = value;
			}
			if ( key === "icon" ) {
				this.options.icons.primary = value;
			}
			if ( key === "icons" ) {
				if ( value.primary ) {
					this._super( "icon", value.primary );
					this._super( "iconPosition", "beginning" );
				} else if ( value.secondary ) {
					this._super( "icon", value.secondary );
					this._super( "iconPosition", "end" );
				}
			}
			this._superApply( arguments );
		}
	} );

	$.fn.button = ( function( orig ) {
		return function( options ) {
			var isMethodCall = typeof options === "string";
			var args = Array.prototype.slice.call( arguments, 1 );
			var returnValue = this;

			if ( isMethodCall ) {

				// If this is an empty collection, we need to have the instance method
				// return undefined instead of the jQuery instance
				if ( !this.length && options === "instance" ) {
					returnValue = undefined;
				} else {
					this.each( function() {
						var methodValue;
						var type = $( this ).attr( "type" );
						var name = type !== "checkbox" && type !== "radio" ?
							"button" :
							"checkboxradio";
						var instance = $.data( this, "ui-" + name );

						if ( options === "instance" ) {
							returnValue = instance;
							return false;
						}

						if ( !instance ) {
							return $.error( "cannot call methods on button" +
								" prior to initialization; " +
								"attempted to call method '" + options + "'" );
						}

						if ( typeof instance[ options ] !== "function" ||
							options.charAt( 0 ) === "_" ) {
							return $.error( "no such method '" + options + "' for button" +
								" widget instance" );
						}

						methodValue = instance[ options ].apply( instance, args );

						if ( methodValue !== instance && methodValue !== undefined ) {
							returnValue = methodValue && methodValue.jquery ?
								returnValue.pushStack( methodValue.get() ) :
								methodValue;
							return false;
						}
					} );
				}
			} else {

				// Allow multiple hashes to be passed on init
				if ( args.length ) {
					options = $.widget.extend.apply( null, [ options ].concat( args ) );
				}

				this.each( function() {
					var type = $( this ).attr( "type" );
					var name = type !== "checkbox" && type !== "radio" ? "button" : "checkboxradio";
					var instance = $.data( this, "ui-" + name );

					if ( instance ) {
						instance.option( options || {} );
						if ( instance._init ) {
							instance._init();
						}
					} else {
						if ( name === "button" ) {
							orig.call( $( this ), options );
							return;
						}

						$( this ).checkboxradio( $.extend( { icon: false }, options ) );
					}
				} );
			}

			return returnValue;
		};
	} )( $.fn.button );

	$.fn.buttonset = function() {
		if ( !$.ui.controlgroup ) {
			$.error( "Controlgroup widget missing" );
		}
		if ( arguments[ 0 ] === "option" && arguments[ 1 ] === "items" && arguments[ 2 ] ) {
			return this.controlgroup.apply( this,
				[ arguments[ 0 ], "items.button", arguments[ 2 ] ] );
		}
		if ( arguments[ 0 ] === "option" && arguments[ 1 ] === "items" ) {
			return this.controlgroup.apply( this, [ arguments[ 0 ], "items.button" ] );
		}
		if ( typeof arguments[ 0 ] === "object" && arguments[ 0 ].items ) {
			arguments[ 0 ].items = {
				button: arguments[ 0 ].items
			};
		}
		return this.controlgroup.apply( this, arguments );
	};
}

var widgetsButton = $.ui.button;


/* eslint-disable max-len, camelcase */
/*!
 * jQuery UI Datepicker 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Datepicker
//>>group: Widgets
//>>description: Displays a calendar from an input or inline for selecting dates.
//>>docs: http://api.jqueryui.com/datepicker/
//>>demos: http://jqueryui.com/datepicker/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/datepicker.css
//>>css.theme: ../../themes/base/theme.css


$.extend( $.ui, { datepicker: { version: "1.13.2" } } );

var datepicker_instActive;

function datepicker_getZindex( elem ) {
	var position, value;
	while ( elem.length && elem[ 0 ] !== document ) {

		// Ignore z-index if position is set to a value where z-index is ignored by the browser
		// This makes behavior of this function consistent across browsers
		// WebKit always returns auto if the element is positioned
		position = elem.css( "position" );
		if ( position === "absolute" || position === "relative" || position === "fixed" ) {

			// IE returns 0 when zIndex is not specified
			// other browsers return a string
			// we ignore the case of nested elements with an explicit value of 0
			// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
			value = parseInt( elem.css( "zIndex" ), 10 );
			if ( !isNaN( value ) && value !== 0 ) {
				return value;
			}
		}
		elem = elem.parent();
	}

	return 0;
}

/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
	this._curInst = null; // The current instance in use
	this._keyEvent = false; // If the last event was a key event
	this._disabledInputs = []; // List of date picker inputs that have been disabled
	this._datepickerShowing = false; // True if the popup picker is showing , false if not
	this._inDialog = false; // True if showing within a "dialog", false if not
	this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
	this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
	this._appendClass = "ui-datepicker-append"; // The name of the append marker class
	this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
	this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
	this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
	this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
	this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
	this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
	this.regional = []; // Available regional settings, indexed by language code
	this.regional[ "" ] = { // Default regional settings
		closeText: "Done", // Display text for close link
		prevText: "Prev", // Display text for previous month link
		nextText: "Next", // Display text for next month link
		currentText: "Today", // Display text for current month link
		monthNames: [ "January", "February", "March", "April", "May", "June",
			"July", "August", "September", "October", "November", "December" ], // Names of months for drop-down and formatting
		monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ], // For formatting
		dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ], // For formatting
		dayNamesShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ], // For formatting
		dayNamesMin: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ], // Column headings for days starting at Sunday
		weekHeader: "Wk", // Column header for week of the year
		dateFormat: "mm/dd/yy", // See format options on parseDate
		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
		isRTL: false, // True if right-to-left language, false if left-to-right
		showMonthAfterYear: false, // True if the year select precedes month, false for month then year
		yearSuffix: "", // Additional text to append to the year in the month headers,
		selectMonthLabel: "Select month", // Invisible label for month selector
		selectYearLabel: "Select year" // Invisible label for year selector
	};
	this._defaults = { // Global defaults for all the date picker instances
		showOn: "focus", // "focus" for popup on focus,
			// "button" for trigger button, or "both" for either
		showAnim: "fadeIn", // Name of jQuery animation for popup
		showOptions: {}, // Options for enhanced animations
		defaultDate: null, // Used when field is blank: actual date,
			// +/-number for offset from today, null for today
		appendText: "", // Display text following the input box, e.g. showing the format
		buttonText: "...", // Text for trigger button
		buttonImage: "", // URL for trigger button image
		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
		hideIfNoPrevNext: false, // True to hide next/previous month links
			// if not applicable, false to just disable them
		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
		gotoCurrent: false, // True if today link goes back to current selection instead
		changeMonth: false, // True if month can be selected directly, false if only prev/next
		changeYear: false, // True if year can be selected directly, false if only prev/next
		yearRange: "c-10:c+10", // Range of years to display in drop-down,
			// either relative to today's year (-nn:+nn), relative to currently displayed year
			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
		showOtherMonths: false, // True to show dates in other months, false to leave blank
		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
		showWeek: false, // True to show week of the year, false to not show it
		calculateWeek: this.iso8601Week, // How to calculate the week of the year,
			// takes a Date and returns the number of the week for it
		shortYearCutoff: "+10", // Short year values < this are in the current century,
			// > this are in the previous century,
			// string value starting with "+" for current year + value
		minDate: null, // The earliest selectable date, or null for no limit
		maxDate: null, // The latest selectable date, or null for no limit
		duration: "fast", // Duration of display/closure
		beforeShowDay: null, // Function that takes a date and returns an array with
			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
			// [2] = cell title (optional), e.g. $.datepicker.noWeekends
		beforeShow: null, // Function that takes an input field and
			// returns a set of custom settings for the date picker
		onSelect: null, // Define a callback function when a date is selected
		onChangeMonthYear: null, // Define a callback function when the month or year is changed
		onClose: null, // Define a callback function when the datepicker is closed
		onUpdateDatepicker: null, // Define a callback function when the datepicker is updated
		numberOfMonths: 1, // Number of months to show at a time
		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
		stepMonths: 1, // Number of months to step back/forward
		stepBigMonths: 12, // Number of months to step back/forward for the big links
		altField: "", // Selector for an alternate field to store selected dates into
		altFormat: "", // The date format to use for the alternate field
		constrainInput: true, // The input is constrained by the current date format
		showButtonPanel: false, // True to show button panel, false to not show it
		autoSize: false, // True to size the input for the date format, false to leave as is
		disabled: false // The initial disabled state
	};
	$.extend( this._defaults, this.regional[ "" ] );
	this.regional.en = $.extend( true, {}, this.regional[ "" ] );
	this.regional[ "en-US" ] = $.extend( true, {}, this.regional.en );
	this.dpDiv = datepicker_bindHover( $( "<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>" ) );
}

$.extend( Datepicker.prototype, {

	/* Class name added to elements to indicate already configured with a date picker. */
	markerClassName: "hasDatepicker",

	//Keep track of the maximum number of rows displayed (see #7043)
	maxRows: 4,

	// TODO rename to "widget" when switching to widget factory
	_widgetDatepicker: function() {
		return this.dpDiv;
	},

	/* Override the default settings for all instances of the date picker.
	 * @param  settings  object - the new settings to use as defaults (anonymous object)
	 * @return the manager object
	 */
	setDefaults: function( settings ) {
		datepicker_extendRemove( this._defaults, settings || {} );
		return this;
	},

	/* Attach the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
	 */
	_attachDatepicker: function( target, settings ) {
		var nodeName, inline, inst;
		nodeName = target.nodeName.toLowerCase();
		inline = ( nodeName === "div" || nodeName === "span" );
		if ( !target.id ) {
			this.uuid += 1;
			target.id = "dp" + this.uuid;
		}
		inst = this._newInst( $( target ), inline );
		inst.settings = $.extend( {}, settings || {} );
		if ( nodeName === "input" ) {
			this._connectDatepicker( target, inst );
		} else if ( inline ) {
			this._inlineDatepicker( target, inst );
		}
	},

	/* Create a new instance object. */
	_newInst: function( target, inline ) {
		var id = target[ 0 ].id.replace( /([^A-Za-z0-9_\-])/g, "\\\\$1" ); // escape jQuery meta chars
		return { id: id, input: target, // associated target
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
			drawMonth: 0, drawYear: 0, // month being drawn
			inline: inline, // is datepicker inline or not
			dpDiv: ( !inline ? this.dpDiv : // presentation div
			datepicker_bindHover( $( "<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>" ) ) ) };
	},

	/* Attach the date picker to an input field. */
	_connectDatepicker: function( target, inst ) {
		var input = $( target );
		inst.append = $( [] );
		inst.trigger = $( [] );
		if ( input.hasClass( this.markerClassName ) ) {
			return;
		}
		this._attachments( input, inst );
		input.addClass( this.markerClassName ).on( "keydown", this._doKeyDown ).
			on( "keypress", this._doKeyPress ).on( "keyup", this._doKeyUp );
		this._autoSize( inst );
		$.data( target, "datepicker", inst );

		//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
		if ( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
	},

	/* Make attachments based on settings. */
	_attachments: function( input, inst ) {
		var showOn, buttonText, buttonImage,
			appendText = this._get( inst, "appendText" ),
			isRTL = this._get( inst, "isRTL" );

		if ( inst.append ) {
			inst.append.remove();
		}
		if ( appendText ) {
			inst.append = $( "<span>" )
				.addClass( this._appendClass )
				.text( appendText );
			input[ isRTL ? "before" : "after" ]( inst.append );
		}

		input.off( "focus", this._showDatepicker );

		if ( inst.trigger ) {
			inst.trigger.remove();
		}

		showOn = this._get( inst, "showOn" );
		if ( showOn === "focus" || showOn === "both" ) { // pop-up date picker when in the marked field
			input.on( "focus", this._showDatepicker );
		}
		if ( showOn === "button" || showOn === "both" ) { // pop-up date picker when button clicked
			buttonText = this._get( inst, "buttonText" );
			buttonImage = this._get( inst, "buttonImage" );

			if ( this._get( inst, "buttonImageOnly" ) ) {
				inst.trigger = $( "<img>" )
					.addClass( this._triggerClass )
					.attr( {
						src: buttonImage,
						alt: buttonText,
						title: buttonText
					} );
			} else {
				inst.trigger = $( "<button type='button'>" )
					.addClass( this._triggerClass );
				if ( buttonImage ) {
					inst.trigger.html(
						$( "<img>" )
							.attr( {
								src: buttonImage,
								alt: buttonText,
								title: buttonText
							} )
					);
				} else {
					inst.trigger.text( buttonText );
				}
			}

			input[ isRTL ? "before" : "after" ]( inst.trigger );
			inst.trigger.on( "click", function() {
				if ( $.datepicker._datepickerShowing && $.datepicker._lastInput === input[ 0 ] ) {
					$.datepicker._hideDatepicker();
				} else if ( $.datepicker._datepickerShowing && $.datepicker._lastInput !== input[ 0 ] ) {
					$.datepicker._hideDatepicker();
					$.datepicker._showDatepicker( input[ 0 ] );
				} else {
					$.datepicker._showDatepicker( input[ 0 ] );
				}
				return false;
			} );
		}
	},

	/* Apply the maximum length for the date format. */
	_autoSize: function( inst ) {
		if ( this._get( inst, "autoSize" ) && !inst.inline ) {
			var findMax, max, maxI, i,
				date = new Date( 2009, 12 - 1, 20 ), // Ensure double digits
				dateFormat = this._get( inst, "dateFormat" );

			if ( dateFormat.match( /[DM]/ ) ) {
				findMax = function( names ) {
					max = 0;
					maxI = 0;
					for ( i = 0; i < names.length; i++ ) {
						if ( names[ i ].length > max ) {
							max = names[ i ].length;
							maxI = i;
						}
					}
					return maxI;
				};
				date.setMonth( findMax( this._get( inst, ( dateFormat.match( /MM/ ) ?
					"monthNames" : "monthNamesShort" ) ) ) );
				date.setDate( findMax( this._get( inst, ( dateFormat.match( /DD/ ) ?
					"dayNames" : "dayNamesShort" ) ) ) + 20 - date.getDay() );
			}
			inst.input.attr( "size", this._formatDate( inst, date ).length );
		}
	},

	/* Attach an inline date picker to a div. */
	_inlineDatepicker: function( target, inst ) {
		var divSpan = $( target );
		if ( divSpan.hasClass( this.markerClassName ) ) {
			return;
		}
		divSpan.addClass( this.markerClassName ).append( inst.dpDiv );
		$.data( target, "datepicker", inst );
		this._setDate( inst, this._getDefaultDate( inst ), true );
		this._updateDatepicker( inst );
		this._updateAlternate( inst );

		//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
		if ( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}

		// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
		// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
		inst.dpDiv.css( "display", "block" );
	},

	/* Pop-up the date picker in a "dialog" box.
	 * @param  input element - ignored
	 * @param  date	string or Date - the initial date to display
	 * @param  onSelect  function - the function to call when a date is selected
	 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
	 * @param  pos int[2] - coordinates for the dialog's position within the screen or
	 *					event - with x/y coordinates or
	 *					leave empty for default (screen centre)
	 * @return the manager object
	 */
	_dialogDatepicker: function( input, date, onSelect, settings, pos ) {
		var id, browserWidth, browserHeight, scrollX, scrollY,
			inst = this._dialogInst; // internal instance

		if ( !inst ) {
			this.uuid += 1;
			id = "dp" + this.uuid;
			this._dialogInput = $( "<input type='text' id='" + id +
				"' style='position: absolute; top: -100px; width: 0px;'/>" );
			this._dialogInput.on( "keydown", this._doKeyDown );
			$( "body" ).append( this._dialogInput );
			inst = this._dialogInst = this._newInst( this._dialogInput, false );
			inst.settings = {};
			$.data( this._dialogInput[ 0 ], "datepicker", inst );
		}
		datepicker_extendRemove( inst.settings, settings || {} );
		date = ( date && date.constructor === Date ? this._formatDate( inst, date ) : date );
		this._dialogInput.val( date );

		this._pos = ( pos ? ( pos.length ? pos : [ pos.pageX, pos.pageY ] ) : null );
		if ( !this._pos ) {
			browserWidth = document.documentElement.clientWidth;
			browserHeight = document.documentElement.clientHeight;
			scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
			scrollY = document.documentElement.scrollTop || document.body.scrollTop;
			this._pos = // should use actual width/height below
				[ ( browserWidth / 2 ) - 100 + scrollX, ( browserHeight / 2 ) - 150 + scrollY ];
		}

		// Move input on screen for focus, but hidden behind dialog
		this._dialogInput.css( "left", ( this._pos[ 0 ] + 20 ) + "px" ).css( "top", this._pos[ 1 ] + "px" );
		inst.settings.onSelect = onSelect;
		this._inDialog = true;
		this.dpDiv.addClass( this._dialogClass );
		this._showDatepicker( this._dialogInput[ 0 ] );
		if ( $.blockUI ) {
			$.blockUI( this.dpDiv );
		}
		$.data( this._dialogInput[ 0 ], "datepicker", inst );
		return this;
	},

	/* Detach a datepicker from its control.
	 * @param  target	element - the target input field or division or span
	 */
	_destroyDatepicker: function( target ) {
		var nodeName,
			$target = $( target ),
			inst = $.data( target, "datepicker" );

		if ( !$target.hasClass( this.markerClassName ) ) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		$.removeData( target, "datepicker" );
		if ( nodeName === "input" ) {
			inst.append.remove();
			inst.trigger.remove();
			$target.removeClass( this.markerClassName ).
				off( "focus", this._showDatepicker ).
				off( "keydown", this._doKeyDown ).
				off( "keypress", this._doKeyPress ).
				off( "keyup", this._doKeyUp );
		} else if ( nodeName === "div" || nodeName === "span" ) {
			$target.removeClass( this.markerClassName ).empty();
		}

		if ( datepicker_instActive === inst ) {
			datepicker_instActive = null;
			this._curInst = null;
		}
	},

	/* Enable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_enableDatepicker: function( target ) {
		var nodeName, inline,
			$target = $( target ),
			inst = $.data( target, "datepicker" );

		if ( !$target.hasClass( this.markerClassName ) ) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if ( nodeName === "input" ) {
			target.disabled = false;
			inst.trigger.filter( "button" ).
				each( function() {
					this.disabled = false;
				} ).end().
				filter( "img" ).css( { opacity: "1.0", cursor: "" } );
		} else if ( nodeName === "div" || nodeName === "span" ) {
			inline = $target.children( "." + this._inlineClass );
			inline.children().removeClass( "ui-state-disabled" );
			inline.find( "select.ui-datepicker-month, select.ui-datepicker-year" ).
				prop( "disabled", false );
		}
		this._disabledInputs = $.map( this._disabledInputs,

			// Delete entry
			function( value ) {
				return ( value === target ? null : value );
			} );
	},

	/* Disable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
	_disableDatepicker: function( target ) {
		var nodeName, inline,
			$target = $( target ),
			inst = $.data( target, "datepicker" );

		if ( !$target.hasClass( this.markerClassName ) ) {
			return;
		}

		nodeName = target.nodeName.toLowerCase();
		if ( nodeName === "input" ) {
			target.disabled = true;
			inst.trigger.filter( "button" ).
				each( function() {
					this.disabled = true;
				} ).end().
				filter( "img" ).css( { opacity: "0.5", cursor: "default" } );
		} else if ( nodeName === "div" || nodeName === "span" ) {
			inline = $target.children( "." + this._inlineClass );
			inline.children().addClass( "ui-state-disabled" );
			inline.find( "select.ui-datepicker-month, select.ui-datepicker-year" ).
				prop( "disabled", true );
		}
		this._disabledInputs = $.map( this._disabledInputs,

			// Delete entry
			function( value ) {
				return ( value === target ? null : value );
			} );
		this._disabledInputs[ this._disabledInputs.length ] = target;
	},

	/* Is the first field in a jQuery collection disabled as a datepicker?
	 * @param  target	element - the target input field or division or span
	 * @return boolean - true if disabled, false if enabled
	 */
	_isDisabledDatepicker: function( target ) {
		if ( !target ) {
			return false;
		}
		for ( var i = 0; i < this._disabledInputs.length; i++ ) {
			if ( this._disabledInputs[ i ] === target ) {
				return true;
			}
		}
		return false;
	},

	/* Retrieve the instance data for the target control.
	 * @param  target  element - the target input field or division or span
	 * @return  object - the associated instance data
	 * @throws  error if a jQuery problem getting data
	 */
	_getInst: function( target ) {
		try {
			return $.data( target, "datepicker" );
		} catch ( err ) {
			throw "Missing instance data for this datepicker";
		}
	},

	/* Update or retrieve the settings for a date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 * @param  name	object - the new settings to update or
	 *				string - the name of the setting to change or retrieve,
	 *				when retrieving also "all" for all instance settings or
	 *				"defaults" for all global defaults
	 * @param  value   any - the new value for the setting
	 *				(omit if above is an object or to retrieve a value)
	 */
	_optionDatepicker: function( target, name, value ) {
		var settings, date, minDate, maxDate,
			inst = this._getInst( target );

		if ( arguments.length === 2 && typeof name === "string" ) {
			return ( name === "defaults" ? $.extend( {}, $.datepicker._defaults ) :
				( inst ? ( name === "all" ? $.extend( {}, inst.settings ) :
				this._get( inst, name ) ) : null ) );
		}

		settings = name || {};
		if ( typeof name === "string" ) {
			settings = {};
			settings[ name ] = value;
		}

		if ( inst ) {
			if ( this._curInst === inst ) {
				this._hideDatepicker();
			}

			date = this._getDateDatepicker( target, true );
			minDate = this._getMinMaxDate( inst, "min" );
			maxDate = this._getMinMaxDate( inst, "max" );
			datepicker_extendRemove( inst.settings, settings );

			// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
			if ( minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined ) {
				inst.settings.minDate = this._formatDate( inst, minDate );
			}
			if ( maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined ) {
				inst.settings.maxDate = this._formatDate( inst, maxDate );
			}
			if ( "disabled" in settings ) {
				if ( settings.disabled ) {
					this._disableDatepicker( target );
				} else {
					this._enableDatepicker( target );
				}
			}
			this._attachments( $( target ), inst );
			this._autoSize( inst );
			this._setDate( inst, date );
			this._updateAlternate( inst );
			this._updateDatepicker( inst );
		}
	},

	// Change method deprecated
	_changeDatepicker: function( target, name, value ) {
		this._optionDatepicker( target, name, value );
	},

	/* Redraw the date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 */
	_refreshDatepicker: function( target ) {
		var inst = this._getInst( target );
		if ( inst ) {
			this._updateDatepicker( inst );
		}
	},

	/* Set the dates for a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  date	Date - the new date
	 */
	_setDateDatepicker: function( target, date ) {
		var inst = this._getInst( target );
		if ( inst ) {
			this._setDate( inst, date );
			this._updateDatepicker( inst );
			this._updateAlternate( inst );
		}
	},

	/* Get the date(s) for the first entry in a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  noDefault boolean - true if no default date is to be used
	 * @return Date - the current date
	 */
	_getDateDatepicker: function( target, noDefault ) {
		var inst = this._getInst( target );
		if ( inst && !inst.inline ) {
			this._setDateFromField( inst, noDefault );
		}
		return ( inst ? this._getDate( inst ) : null );
	},

	/* Handle keystrokes. */
	_doKeyDown: function( event ) {
		var onSelect, dateStr, sel,
			inst = $.datepicker._getInst( event.target ),
			handled = true,
			isRTL = inst.dpDiv.is( ".ui-datepicker-rtl" );

		inst._keyEvent = true;
		if ( $.datepicker._datepickerShowing ) {
			switch ( event.keyCode ) {
				case 9: $.datepicker._hideDatepicker();
						handled = false;
						break; // hide on tab out
				case 13: sel = $( "td." + $.datepicker._dayOverClass + ":not(." +
									$.datepicker._currentClass + ")", inst.dpDiv );
						if ( sel[ 0 ] ) {
							$.datepicker._selectDay( event.target, inst.selectedMonth, inst.selectedYear, sel[ 0 ] );
						}

						onSelect = $.datepicker._get( inst, "onSelect" );
						if ( onSelect ) {
							dateStr = $.datepicker._formatDate( inst );

							// Trigger custom callback
							onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );
						} else {
							$.datepicker._hideDatepicker();
						}

						return false; // don't submit the form
				case 27: $.datepicker._hideDatepicker();
						break; // hide on escape
				case 33: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
							-$.datepicker._get( inst, "stepBigMonths" ) :
							-$.datepicker._get( inst, "stepMonths" ) ), "M" );
						break; // previous month/year on page up/+ ctrl
				case 34: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?
							+$.datepicker._get( inst, "stepBigMonths" ) :
							+$.datepicker._get( inst, "stepMonths" ) ), "M" );
						break; // next month/year on page down/+ ctrl
				case 35: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._clearDate( event.target );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // clear on ctrl or command +end
				case 36: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._gotoToday( event.target );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // current on ctrl or command +home
				case 37: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, ( isRTL ? +1 : -1 ), "D" );
						}
						handled = event.ctrlKey || event.metaKey;

						// -1 day on ctrl or command +left
						if ( event.originalEvent.altKey ) {
							$.datepicker._adjustDate( event.target, ( event.ctrlKey ?
								-$.datepicker._get( inst, "stepBigMonths" ) :
								-$.datepicker._get( inst, "stepMonths" ) ), "M" );
						}

						// next month/year on alt +left on Mac
						break;
				case 38: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, -7, "D" );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // -1 week on ctrl or command +up
				case 39: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, ( isRTL ? -1 : +1 ), "D" );
						}
						handled = event.ctrlKey || event.metaKey;

						// +1 day on ctrl or command +right
						if ( event.originalEvent.altKey ) {
							$.datepicker._adjustDate( event.target, ( event.ctrlKey ?
								+$.datepicker._get( inst, "stepBigMonths" ) :
								+$.datepicker._get( inst, "stepMonths" ) ), "M" );
						}

						// next month/year on alt +right
						break;
				case 40: if ( event.ctrlKey || event.metaKey ) {
							$.datepicker._adjustDate( event.target, +7, "D" );
						}
						handled = event.ctrlKey || event.metaKey;
						break; // +1 week on ctrl or command +down
				default: handled = false;
			}
		} else if ( event.keyCode === 36 && event.ctrlKey ) { // display the date picker on ctrl+home
			$.datepicker._showDatepicker( this );
		} else {
			handled = false;
		}

		if ( handled ) {
			event.preventDefault();
			event.stopPropagation();
		}
	},

	/* Filter entered characters - based on date format. */
	_doKeyPress: function( event ) {
		var chars, chr,
			inst = $.datepicker._getInst( event.target );

		if ( $.datepicker._get( inst, "constrainInput" ) ) {
			chars = $.datepicker._possibleChars( $.datepicker._get( inst, "dateFormat" ) );
			chr = String.fromCharCode( event.charCode == null ? event.keyCode : event.charCode );
			return event.ctrlKey || event.metaKey || ( chr < " " || !chars || chars.indexOf( chr ) > -1 );
		}
	},

	/* Synchronise manual entry and field/alternate field. */
	_doKeyUp: function( event ) {
		var date,
			inst = $.datepicker._getInst( event.target );

		if ( inst.input.val() !== inst.lastVal ) {
			try {
				date = $.datepicker.parseDate( $.datepicker._get( inst, "dateFormat" ),
					( inst.input ? inst.input.val() : null ),
					$.datepicker._getFormatConfig( inst ) );

				if ( date ) { // only if valid
					$.datepicker._setDateFromField( inst );
					$.datepicker._updateAlternate( inst );
					$.datepicker._updateDatepicker( inst );
				}
			} catch ( err ) {
			}
		}
		return true;
	},

	/* Pop-up the date picker for a given input field.
	 * If false returned from beforeShow event handler do not show.
	 * @param  input  element - the input field attached to the date picker or
	 *					event - if triggered by focus
	 */
	_showDatepicker: function( input ) {
		input = input.target || input;
		if ( input.nodeName.toLowerCase() !== "input" ) { // find from button/image trigger
			input = $( "input", input.parentNode )[ 0 ];
		}

		if ( $.datepicker._isDisabledDatepicker( input ) || $.datepicker._lastInput === input ) { // already here
			return;
		}

		var inst, beforeShow, beforeShowSettings, isFixed,
			offset, showAnim, duration;

		inst = $.datepicker._getInst( input );
		if ( $.datepicker._curInst && $.datepicker._curInst !== inst ) {
			$.datepicker._curInst.dpDiv.stop( true, true );
			if ( inst && $.datepicker._datepickerShowing ) {
				$.datepicker._hideDatepicker( $.datepicker._curInst.input[ 0 ] );
			}
		}

		beforeShow = $.datepicker._get( inst, "beforeShow" );
		beforeShowSettings = beforeShow ? beforeShow.apply( input, [ input, inst ] ) : {};
		if ( beforeShowSettings === false ) {
			return;
		}
		datepicker_extendRemove( inst.settings, beforeShowSettings );

		inst.lastVal = null;
		$.datepicker._lastInput = input;
		$.datepicker._setDateFromField( inst );

		if ( $.datepicker._inDialog ) { // hide cursor
			input.value = "";
		}
		if ( !$.datepicker._pos ) { // position below input
			$.datepicker._pos = $.datepicker._findPos( input );
			$.datepicker._pos[ 1 ] += input.offsetHeight; // add the height
		}

		isFixed = false;
		$( input ).parents().each( function() {
			isFixed |= $( this ).css( "position" ) === "fixed";
			return !isFixed;
		} );

		offset = { left: $.datepicker._pos[ 0 ], top: $.datepicker._pos[ 1 ] };
		$.datepicker._pos = null;

		//to avoid flashes on Firefox
		inst.dpDiv.empty();

		// determine sizing offscreen
		inst.dpDiv.css( { position: "absolute", display: "block", top: "-1000px" } );
		$.datepicker._updateDatepicker( inst );

		// fix width for dynamic number of date pickers
		// and adjust position before showing
		offset = $.datepicker._checkOffset( inst, offset, isFixed );
		inst.dpDiv.css( { position: ( $.datepicker._inDialog && $.blockUI ?
			"static" : ( isFixed ? "fixed" : "absolute" ) ), display: "none",
			left: offset.left + "px", top: offset.top + "px" } );

		if ( !inst.inline ) {
			showAnim = $.datepicker._get( inst, "showAnim" );
			duration = $.datepicker._get( inst, "duration" );
			inst.dpDiv.css( "z-index", datepicker_getZindex( $( input ) ) + 1 );
			$.datepicker._datepickerShowing = true;

			if ( $.effects && $.effects.effect[ showAnim ] ) {
				inst.dpDiv.show( showAnim, $.datepicker._get( inst, "showOptions" ), duration );
			} else {
				inst.dpDiv[ showAnim || "show" ]( showAnim ? duration : null );
			}

			if ( $.datepicker._shouldFocusInput( inst ) ) {
				inst.input.trigger( "focus" );
			}

			$.datepicker._curInst = inst;
		}
	},

	/* Generate the date picker content. */
	_updateDatepicker: function( inst ) {
		this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
		datepicker_instActive = inst; // for delegate hover events
		inst.dpDiv.empty().append( this._generateHTML( inst ) );
		this._attachHandlers( inst );

		var origyearshtml,
			numMonths = this._getNumberOfMonths( inst ),
			cols = numMonths[ 1 ],
			width = 17,
			activeCell = inst.dpDiv.find( "." + this._dayOverClass + " a" ),
			onUpdateDatepicker = $.datepicker._get( inst, "onUpdateDatepicker" );

		if ( activeCell.length > 0 ) {
			datepicker_handleMouseover.apply( activeCell.get( 0 ) );
		}

		inst.dpDiv.removeClass( "ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4" ).width( "" );
		if ( cols > 1 ) {
			inst.dpDiv.addClass( "ui-datepicker-multi-" + cols ).css( "width", ( width * cols ) + "em" );
		}
		inst.dpDiv[ ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ? "add" : "remove" ) +
			"Class" ]( "ui-datepicker-multi" );
		inst.dpDiv[ ( this._get( inst, "isRTL" ) ? "add" : "remove" ) +
			"Class" ]( "ui-datepicker-rtl" );

		if ( inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
			inst.input.trigger( "focus" );
		}

		// Deffered render of the years select (to avoid flashes on Firefox)
		if ( inst.yearshtml ) {
			origyearshtml = inst.yearshtml;
			setTimeout( function() {

				//assure that inst.yearshtml didn't change.
				if ( origyearshtml === inst.yearshtml && inst.yearshtml ) {
					inst.dpDiv.find( "select.ui-datepicker-year" ).first().replaceWith( inst.yearshtml );
				}
				origyearshtml = inst.yearshtml = null;
			}, 0 );
		}

		if ( onUpdateDatepicker ) {
			onUpdateDatepicker.apply( ( inst.input ? inst.input[ 0 ] : null ), [ inst ] );
		}
	},

	// #6694 - don't focus the input if it's already focused
	// this breaks the change event in IE
	// Support: IE and jQuery <1.9
	_shouldFocusInput: function( inst ) {
		return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
	},

	/* Check positioning to remain on screen. */
	_checkOffset: function( inst, offset, isFixed ) {
		var dpWidth = inst.dpDiv.outerWidth(),
			dpHeight = inst.dpDiv.outerHeight(),
			inputWidth = inst.input ? inst.input.outerWidth() : 0,
			inputHeight = inst.input ? inst.input.outerHeight() : 0,
			viewWidth = document.documentElement.clientWidth + ( isFixed ? 0 : $( document ).scrollLeft() ),
			viewHeight = document.documentElement.clientHeight + ( isFixed ? 0 : $( document ).scrollTop() );

		offset.left -= ( this._get( inst, "isRTL" ) ? ( dpWidth - inputWidth ) : 0 );
		offset.left -= ( isFixed && offset.left === inst.input.offset().left ) ? $( document ).scrollLeft() : 0;
		offset.top -= ( isFixed && offset.top === ( inst.input.offset().top + inputHeight ) ) ? $( document ).scrollTop() : 0;

		// Now check if datepicker is showing outside window viewport - move to a better place if so.
		offset.left -= Math.min( offset.left, ( offset.left + dpWidth > viewWidth && viewWidth > dpWidth ) ?
			Math.abs( offset.left + dpWidth - viewWidth ) : 0 );
		offset.top -= Math.min( offset.top, ( offset.top + dpHeight > viewHeight && viewHeight > dpHeight ) ?
			Math.abs( dpHeight + inputHeight ) : 0 );

		return offset;
	},

	/* Find an object's position on the screen. */
	_findPos: function( obj ) {
		var position,
			inst = this._getInst( obj ),
			isRTL = this._get( inst, "isRTL" );

		while ( obj && ( obj.type === "hidden" || obj.nodeType !== 1 || $.expr.pseudos.hidden( obj ) ) ) {
			obj = obj[ isRTL ? "previousSibling" : "nextSibling" ];
		}

		position = $( obj ).offset();
		return [ position.left, position.top ];
	},

	/* Hide the date picker from view.
	 * @param  input  element - the input field attached to the date picker
	 */
	_hideDatepicker: function( input ) {
		var showAnim, duration, postProcess, onClose,
			inst = this._curInst;

		if ( !inst || ( input && inst !== $.data( input, "datepicker" ) ) ) {
			return;
		}

		if ( this._datepickerShowing ) {
			showAnim = this._get( inst, "showAnim" );
			duration = this._get( inst, "duration" );
			postProcess = function() {
				$.datepicker._tidyDialog( inst );
			};

			// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
			if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
				inst.dpDiv.hide( showAnim, $.datepicker._get( inst, "showOptions" ), duration, postProcess );
			} else {
				inst.dpDiv[ ( showAnim === "slideDown" ? "slideUp" :
					( showAnim === "fadeIn" ? "fadeOut" : "hide" ) ) ]( ( showAnim ? duration : null ), postProcess );
			}

			if ( !showAnim ) {
				postProcess();
			}
			this._datepickerShowing = false;

			onClose = this._get( inst, "onClose" );
			if ( onClose ) {
				onClose.apply( ( inst.input ? inst.input[ 0 ] : null ), [ ( inst.input ? inst.input.val() : "" ), inst ] );
			}

			this._lastInput = null;
			if ( this._inDialog ) {
				this._dialogInput.css( { position: "absolute", left: "0", top: "-100px" } );
				if ( $.blockUI ) {
					$.unblockUI();
					$( "body" ).append( this.dpDiv );
				}
			}
			this._inDialog = false;
		}
	},

	/* Tidy up after a dialog display. */
	_tidyDialog: function( inst ) {
		inst.dpDiv.removeClass( this._dialogClass ).off( ".ui-datepicker-calendar" );
	},

	/* Close date picker if clicked elsewhere. */
	_checkExternalClick: function( event ) {
		if ( !$.datepicker._curInst ) {
			return;
		}

		var $target = $( event.target ),
			inst = $.datepicker._getInst( $target[ 0 ] );

		if ( ( ( $target[ 0 ].id !== $.datepicker._mainDivId &&
				$target.parents( "#" + $.datepicker._mainDivId ).length === 0 &&
				!$target.hasClass( $.datepicker.markerClassName ) &&
				!$target.closest( "." + $.datepicker._triggerClass ).length &&
				$.datepicker._datepickerShowing && !( $.datepicker._inDialog && $.blockUI ) ) ) ||
			( $target.hasClass( $.datepicker.markerClassName ) && $.datepicker._curInst !== inst ) ) {
				$.datepicker._hideDatepicker();
		}
	},

	/* Adjust one of the date sub-fields. */
	_adjustDate: function( id, offset, period ) {
		var target = $( id ),
			inst = this._getInst( target[ 0 ] );

		if ( this._isDisabledDatepicker( target[ 0 ] ) ) {
			return;
		}
		this._adjustInstDate( inst, offset, period );
		this._updateDatepicker( inst );
	},

	/* Action for current link. */
	_gotoToday: function( id ) {
		var date,
			target = $( id ),
			inst = this._getInst( target[ 0 ] );

		if ( this._get( inst, "gotoCurrent" ) && inst.currentDay ) {
			inst.selectedDay = inst.currentDay;
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;
			inst.drawYear = inst.selectedYear = inst.currentYear;
		} else {
			date = new Date();
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
		}
		this._notifyChange( inst );
		this._adjustDate( target );
	},

	/* Action for selecting a new month/year. */
	_selectMonthYear: function( id, select, period ) {
		var target = $( id ),
			inst = this._getInst( target[ 0 ] );

		inst[ "selected" + ( period === "M" ? "Month" : "Year" ) ] =
		inst[ "draw" + ( period === "M" ? "Month" : "Year" ) ] =
			parseInt( select.options[ select.selectedIndex ].value, 10 );

		this._notifyChange( inst );
		this._adjustDate( target );
	},

	/* Action for selecting a day. */
	_selectDay: function( id, month, year, td ) {
		var inst,
			target = $( id );

		if ( $( td ).hasClass( this._unselectableClass ) || this._isDisabledDatepicker( target[ 0 ] ) ) {
			return;
		}

		inst = this._getInst( target[ 0 ] );
		inst.selectedDay = inst.currentDay = parseInt( $( "a", td ).attr( "data-date" ) );
		inst.selectedMonth = inst.currentMonth = month;
		inst.selectedYear = inst.currentYear = year;
		this._selectDate( id, this._formatDate( inst,
			inst.currentDay, inst.currentMonth, inst.currentYear ) );
	},

	/* Erase the input field and hide the date picker. */
	_clearDate: function( id ) {
		var target = $( id );
		this._selectDate( target, "" );
	},

	/* Update the input field with the selected date. */
	_selectDate: function( id, dateStr ) {
		var onSelect,
			target = $( id ),
			inst = this._getInst( target[ 0 ] );

		dateStr = ( dateStr != null ? dateStr : this._formatDate( inst ) );
		if ( inst.input ) {
			inst.input.val( dateStr );
		}
		this._updateAlternate( inst );

		onSelect = this._get( inst, "onSelect" );
		if ( onSelect ) {
			onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );  // trigger custom callback
		} else if ( inst.input ) {
			inst.input.trigger( "change" ); // fire the change event
		}

		if ( inst.inline ) {
			this._updateDatepicker( inst );
		} else {
			this._hideDatepicker();
			this._lastInput = inst.input[ 0 ];
			if ( typeof( inst.input[ 0 ] ) !== "object" ) {
				inst.input.trigger( "focus" ); // restore focus
			}
			this._lastInput = null;
		}
	},

	/* Update any alternate field to synchronise with the main field. */
	_updateAlternate: function( inst ) {
		var altFormat, date, dateStr,
			altField = this._get( inst, "altField" );

		if ( altField ) { // update alternate field too
			altFormat = this._get( inst, "altFormat" ) || this._get( inst, "dateFormat" );
			date = this._getDate( inst );
			dateStr = this.formatDate( altFormat, date, this._getFormatConfig( inst ) );
			$( document ).find( altField ).val( dateStr );
		}
	},

	/* Set as beforeShowDay function to prevent selection of weekends.
	 * @param  date  Date - the date to customise
	 * @return [boolean, string] - is this date selectable?, what is its CSS class?
	 */
	noWeekends: function( date ) {
		var day = date.getDay();
		return [ ( day > 0 && day < 6 ), "" ];
	},

	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
	 * @param  date  Date - the date to get the week for
	 * @return  number - the number of the week within the year that contains this date
	 */
	iso8601Week: function( date ) {
		var time,
			checkDate = new Date( date.getTime() );

		// Find Thursday of this week starting on Monday
		checkDate.setDate( checkDate.getDate() + 4 - ( checkDate.getDay() || 7 ) );

		time = checkDate.getTime();
		checkDate.setMonth( 0 ); // Compare with Jan 1
		checkDate.setDate( 1 );
		return Math.floor( Math.round( ( time - checkDate ) / 86400000 ) / 7 ) + 1;
	},

	/* Parse a string value into a date object.
	 * See formatDate below for the possible formats.
	 *
	 * @param  format string - the expected format of the date
	 * @param  value string - the date in the above format
	 * @param  settings Object - attributes include:
	 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  Date - the extracted date value or null if value is blank
	 */
	parseDate: function( format, value, settings ) {
		if ( format == null || value == null ) {
			throw "Invalid arguments";
		}

		value = ( typeof value === "object" ? value.toString() : value + "" );
		if ( value === "" ) {
			return null;
		}

		var iFormat, dim, extra,
			iValue = 0,
			shortYearCutoffTemp = ( settings ? settings.shortYearCutoff : null ) || this._defaults.shortYearCutoff,
			shortYearCutoff = ( typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
				new Date().getFullYear() % 100 + parseInt( shortYearCutoffTemp, 10 ) ),
			dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,
			dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,
			monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,
			monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,
			year = -1,
			month = -1,
			day = -1,
			doy = -1,
			literal = false,
			date,

			// Check whether a format character is doubled
			lookAhead = function( match ) {
				var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
				if ( matches ) {
					iFormat++;
				}
				return matches;
			},

			// Extract a number from the string value
			getNumber = function( match ) {
				var isDoubled = lookAhead( match ),
					size = ( match === "@" ? 14 : ( match === "!" ? 20 :
					( match === "y" && isDoubled ? 4 : ( match === "o" ? 3 : 2 ) ) ) ),
					minSize = ( match === "y" ? size : 1 ),
					digits = new RegExp( "^\\d{" + minSize + "," + size + "}" ),
					num = value.substring( iValue ).match( digits );
				if ( !num ) {
					throw "Missing number at position " + iValue;
				}
				iValue += num[ 0 ].length;
				return parseInt( num[ 0 ], 10 );
			},

			// Extract a name from the string value and convert to an index
			getName = function( match, shortNames, longNames ) {
				var index = -1,
					names = $.map( lookAhead( match ) ? longNames : shortNames, function( v, k ) {
						return [ [ k, v ] ];
					} ).sort( function( a, b ) {
						return -( a[ 1 ].length - b[ 1 ].length );
					} );

				$.each( names, function( i, pair ) {
					var name = pair[ 1 ];
					if ( value.substr( iValue, name.length ).toLowerCase() === name.toLowerCase() ) {
						index = pair[ 0 ];
						iValue += name.length;
						return false;
					}
				} );
				if ( index !== -1 ) {
					return index + 1;
				} else {
					throw "Unknown name at position " + iValue;
				}
			},

			// Confirm that a literal character matches the string value
			checkLiteral = function() {
				if ( value.charAt( iValue ) !== format.charAt( iFormat ) ) {
					throw "Unexpected literal at position " + iValue;
				}
				iValue++;
			};

		for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
			if ( literal ) {
				if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
					literal = false;
				} else {
					checkLiteral();
				}
			} else {
				switch ( format.charAt( iFormat ) ) {
					case "d":
						day = getNumber( "d" );
						break;
					case "D":
						getName( "D", dayNamesShort, dayNames );
						break;
					case "o":
						doy = getNumber( "o" );
						break;
					case "m":
						month = getNumber( "m" );
						break;
					case "M":
						month = getName( "M", monthNamesShort, monthNames );
						break;
					case "y":
						year = getNumber( "y" );
						break;
					case "@":
						date = new Date( getNumber( "@" ) );
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "!":
						date = new Date( ( getNumber( "!" ) - this._ticksTo1970 ) / 10000 );
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "'":
						if ( lookAhead( "'" ) ) {
							checkLiteral();
						} else {
							literal = true;
						}
						break;
					default:
						checkLiteral();
				}
			}
		}

		if ( iValue < value.length ) {
			extra = value.substr( iValue );
			if ( !/^\s+/.test( extra ) ) {
				throw "Extra/unparsed characters found in date: " + extra;
			}
		}

		if ( year === -1 ) {
			year = new Date().getFullYear();
		} else if ( year < 100 ) {
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +
				( year <= shortYearCutoff ? 0 : -100 );
		}

		if ( doy > -1 ) {
			month = 1;
			day = doy;
			do {
				dim = this._getDaysInMonth( year, month - 1 );
				if ( day <= dim ) {
					break;
				}
				month++;
				day -= dim;
			} while ( true );
		}

		date = this._daylightSavingAdjust( new Date( year, month - 1, day ) );
		if ( date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day ) {
			throw "Invalid date"; // E.g. 31/02/00
		}
		return date;
	},

	/* Standard date formats. */
	ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
	COOKIE: "D, dd M yy",
	ISO_8601: "yy-mm-dd",
	RFC_822: "D, d M y",
	RFC_850: "DD, dd-M-y",
	RFC_1036: "D, d M y",
	RFC_1123: "D, d M yy",
	RFC_2822: "D, d M yy",
	RSS: "D, d M y", // RFC 822
	TICKS: "!",
	TIMESTAMP: "@",
	W3C: "yy-mm-dd", // ISO 8601

	_ticksTo1970: ( ( ( 1970 - 1 ) * 365 + Math.floor( 1970 / 4 ) - Math.floor( 1970 / 100 ) +
		Math.floor( 1970 / 400 ) ) * 24 * 60 * 60 * 10000000 ),

	/* Format a date object into a string value.
	 * The format can be combinations of the following:
	 * d  - day of month (no leading zero)
	 * dd - day of month (two digit)
	 * o  - day of year (no leading zeros)
	 * oo - day of year (three digit)
	 * D  - day name short
	 * DD - day name long
	 * m  - month of year (no leading zero)
	 * mm - month of year (two digit)
	 * M  - month name short
	 * MM - month name long
	 * y  - year (two digit)
	 * yy - year (four digit)
	 * @ - Unix timestamp (ms since 01/01/1970)
	 * ! - Windows ticks (100ns since 01/01/0001)
	 * "..." - literal text
	 * '' - single quote
	 *
	 * @param  format string - the desired format of the date
	 * @param  date Date - the date value to format
	 * @param  settings Object - attributes include:
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  string - the date in the above format
	 */
	formatDate: function( format, date, settings ) {
		if ( !date ) {
			return "";
		}

		var iFormat,
			dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,
			dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,
			monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,
			monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,

			// Check whether a format character is doubled
			lookAhead = function( match ) {
				var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
				if ( matches ) {
					iFormat++;
				}
				return matches;
			},

			// Format a number, with leading zero if necessary
			formatNumber = function( match, value, len ) {
				var num = "" + value;
				if ( lookAhead( match ) ) {
					while ( num.length < len ) {
						num = "0" + num;
					}
				}
				return num;
			},

			// Format a name, short or long as requested
			formatName = function( match, value, shortNames, longNames ) {
				return ( lookAhead( match ) ? longNames[ value ] : shortNames[ value ] );
			},
			output = "",
			literal = false;

		if ( date ) {
			for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
				if ( literal ) {
					if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
						literal = false;
					} else {
						output += format.charAt( iFormat );
					}
				} else {
					switch ( format.charAt( iFormat ) ) {
						case "d":
							output += formatNumber( "d", date.getDate(), 2 );
							break;
						case "D":
							output += formatName( "D", date.getDay(), dayNamesShort, dayNames );
							break;
						case "o":
							output += formatNumber( "o",
								Math.round( ( new Date( date.getFullYear(), date.getMonth(), date.getDate() ).getTime() - new Date( date.getFullYear(), 0, 0 ).getTime() ) / 86400000 ), 3 );
							break;
						case "m":
							output += formatNumber( "m", date.getMonth() + 1, 2 );
							break;
						case "M":
							output += formatName( "M", date.getMonth(), monthNamesShort, monthNames );
							break;
						case "y":
							output += ( lookAhead( "y" ) ? date.getFullYear() :
								( date.getFullYear() % 100 < 10 ? "0" : "" ) + date.getFullYear() % 100 );
							break;
						case "@":
							output += date.getTime();
							break;
						case "!":
							output += date.getTime() * 10000 + this._ticksTo1970;
							break;
						case "'":
							if ( lookAhead( "'" ) ) {
								output += "'";
							} else {
								literal = true;
							}
							break;
						default:
							output += format.charAt( iFormat );
					}
				}
			}
		}
		return output;
	},

	/* Extract all possible characters from the date format. */
	_possibleChars: function( format ) {
		var iFormat,
			chars = "",
			literal = false,

			// Check whether a format character is doubled
			lookAhead = function( match ) {
				var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );
				if ( matches ) {
					iFormat++;
				}
				return matches;
			};

		for ( iFormat = 0; iFormat < format.length; iFormat++ ) {
			if ( literal ) {
				if ( format.charAt( iFormat ) === "'" && !lookAhead( "'" ) ) {
					literal = false;
				} else {
					chars += format.charAt( iFormat );
				}
			} else {
				switch ( format.charAt( iFormat ) ) {
					case "d": case "m": case "y": case "@":
						chars += "0123456789";
						break;
					case "D": case "M":
						return null; // Accept anything
					case "'":
						if ( lookAhead( "'" ) ) {
							chars += "'";
						} else {
							literal = true;
						}
						break;
					default:
						chars += format.charAt( iFormat );
				}
			}
		}
		return chars;
	},

	/* Get a setting value, defaulting if necessary. */
	_get: function( inst, name ) {
		return inst.settings[ name ] !== undefined ?
			inst.settings[ name ] : this._defaults[ name ];
	},

	/* Parse existing date and initialise date picker. */
	_setDateFromField: function( inst, noDefault ) {
		if ( inst.input.val() === inst.lastVal ) {
			return;
		}

		var dateFormat = this._get( inst, "dateFormat" ),
			dates = inst.lastVal = inst.input ? inst.input.val() : null,
			defaultDate = this._getDefaultDate( inst ),
			date = defaultDate,
			settings = this._getFormatConfig( inst );

		try {
			date = this.parseDate( dateFormat, dates, settings ) || defaultDate;
		} catch ( event ) {
			dates = ( noDefault ? "" : dates );
		}
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		inst.currentDay = ( dates ? date.getDate() : 0 );
		inst.currentMonth = ( dates ? date.getMonth() : 0 );
		inst.currentYear = ( dates ? date.getFullYear() : 0 );
		this._adjustInstDate( inst );
	},

	/* Retrieve the default date shown on opening. */
	_getDefaultDate: function( inst ) {
		return this._restrictMinMax( inst,
			this._determineDate( inst, this._get( inst, "defaultDate" ), new Date() ) );
	},

	/* A date may be specified as an exact value or a relative one. */
	_determineDate: function( inst, date, defaultDate ) {
		var offsetNumeric = function( offset ) {
				var date = new Date();
				date.setDate( date.getDate() + offset );
				return date;
			},
			offsetString = function( offset ) {
				try {
					return $.datepicker.parseDate( $.datepicker._get( inst, "dateFormat" ),
						offset, $.datepicker._getFormatConfig( inst ) );
				} catch ( e ) {

					// Ignore
				}

				var date = ( offset.toLowerCase().match( /^c/ ) ?
					$.datepicker._getDate( inst ) : null ) || new Date(),
					year = date.getFullYear(),
					month = date.getMonth(),
					day = date.getDate(),
					pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
					matches = pattern.exec( offset );

				while ( matches ) {
					switch ( matches[ 2 ] || "d" ) {
						case "d" : case "D" :
							day += parseInt( matches[ 1 ], 10 ); break;
						case "w" : case "W" :
							day += parseInt( matches[ 1 ], 10 ) * 7; break;
						case "m" : case "M" :
							month += parseInt( matches[ 1 ], 10 );
							day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );
							break;
						case "y": case "Y" :
							year += parseInt( matches[ 1 ], 10 );
							day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );
							break;
					}
					matches = pattern.exec( offset );
				}
				return new Date( year, month, day );
			},
			newDate = ( date == null || date === "" ? defaultDate : ( typeof date === "string" ? offsetString( date ) :
				( typeof date === "number" ? ( isNaN( date ) ? defaultDate : offsetNumeric( date ) ) : new Date( date.getTime() ) ) ) );

		newDate = ( newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate );
		if ( newDate ) {
			newDate.setHours( 0 );
			newDate.setMinutes( 0 );
			newDate.setSeconds( 0 );
			newDate.setMilliseconds( 0 );
		}
		return this._daylightSavingAdjust( newDate );
	},

	/* Handle switch to/from daylight saving.
	 * Hours may be non-zero on daylight saving cut-over:
	 * > 12 when midnight changeover, but then cannot generate
	 * midnight datetime, so jump to 1AM, otherwise reset.
	 * @param  date  (Date) the date to check
	 * @return  (Date) the corrected date
	 */
	_daylightSavingAdjust: function( date ) {
		if ( !date ) {
			return null;
		}
		date.setHours( date.getHours() > 12 ? date.getHours() + 2 : 0 );
		return date;
	},

	/* Set the date(s) directly. */
	_setDate: function( inst, date, noChange ) {
		var clear = !date,
			origMonth = inst.selectedMonth,
			origYear = inst.selectedYear,
			newDate = this._restrictMinMax( inst, this._determineDate( inst, date, new Date() ) );

		inst.selectedDay = inst.currentDay = newDate.getDate();
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
		if ( ( origMonth !== inst.selectedMonth || origYear !== inst.selectedYear ) && !noChange ) {
			this._notifyChange( inst );
		}
		this._adjustInstDate( inst );
		if ( inst.input ) {
			inst.input.val( clear ? "" : this._formatDate( inst ) );
		}
	},

	/* Retrieve the date(s) directly. */
	_getDate: function( inst ) {
		var startDate = ( !inst.currentYear || ( inst.input && inst.input.val() === "" ) ? null :
			this._daylightSavingAdjust( new Date(
			inst.currentYear, inst.currentMonth, inst.currentDay ) ) );
			return startDate;
	},

	/* Attach the onxxx handlers.  These are declared statically so
	 * they work with static code transformers like Caja.
	 */
	_attachHandlers: function( inst ) {
		var stepMonths = this._get( inst, "stepMonths" ),
			id = "#" + inst.id.replace( /\\\\/g, "\\" );
		inst.dpDiv.find( "[data-handler]" ).map( function() {
			var handler = {
				prev: function() {
					$.datepicker._adjustDate( id, -stepMonths, "M" );
				},
				next: function() {
					$.datepicker._adjustDate( id, +stepMonths, "M" );
				},
				hide: function() {
					$.datepicker._hideDatepicker();
				},
				today: function() {
					$.datepicker._gotoToday( id );
				},
				selectDay: function() {
					$.datepicker._selectDay( id, +this.getAttribute( "data-month" ), +this.getAttribute( "data-year" ), this );
					return false;
				},
				selectMonth: function() {
					$.datepicker._selectMonthYear( id, this, "M" );
					return false;
				},
				selectYear: function() {
					$.datepicker._selectMonthYear( id, this, "Y" );
					return false;
				}
			};
			$( this ).on( this.getAttribute( "data-event" ), handler[ this.getAttribute( "data-handler" ) ] );
		} );
	},

	/* Generate the HTML for the current state of the date picker. */
	_generateHTML: function( inst ) {
		var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
			controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
			monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
			selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
			cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
			printDate, dRow, tbody, daySettings, otherMonth, unselectable,
			tempDate = new Date(),
			today = this._daylightSavingAdjust(
				new Date( tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate() ) ), // clear time
			isRTL = this._get( inst, "isRTL" ),
			showButtonPanel = this._get( inst, "showButtonPanel" ),
			hideIfNoPrevNext = this._get( inst, "hideIfNoPrevNext" ),
			navigationAsDateFormat = this._get( inst, "navigationAsDateFormat" ),
			numMonths = this._getNumberOfMonths( inst ),
			showCurrentAtPos = this._get( inst, "showCurrentAtPos" ),
			stepMonths = this._get( inst, "stepMonths" ),
			isMultiMonth = ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ),
			currentDate = this._daylightSavingAdjust( ( !inst.currentDay ? new Date( 9999, 9, 9 ) :
				new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) ),
			minDate = this._getMinMaxDate( inst, "min" ),
			maxDate = this._getMinMaxDate( inst, "max" ),
			drawMonth = inst.drawMonth - showCurrentAtPos,
			drawYear = inst.drawYear;

		if ( drawMonth < 0 ) {
			drawMonth += 12;
			drawYear--;
		}
		if ( maxDate ) {
			maxDraw = this._daylightSavingAdjust( new Date( maxDate.getFullYear(),
				maxDate.getMonth() - ( numMonths[ 0 ] * numMonths[ 1 ] ) + 1, maxDate.getDate() ) );
			maxDraw = ( minDate && maxDraw < minDate ? minDate : maxDraw );
			while ( this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 ) ) > maxDraw ) {
				drawMonth--;
				if ( drawMonth < 0 ) {
					drawMonth = 11;
					drawYear--;
				}
			}
		}
		inst.drawMonth = drawMonth;
		inst.drawYear = drawYear;

		prevText = this._get( inst, "prevText" );
		prevText = ( !navigationAsDateFormat ? prevText : this.formatDate( prevText,
			this._daylightSavingAdjust( new Date( drawYear, drawMonth - stepMonths, 1 ) ),
			this._getFormatConfig( inst ) ) );

		if ( this._canAdjustMonth( inst, -1, drawYear, drawMonth ) ) {
			prev = $( "<a>" )
				.attr( {
					"class": "ui-datepicker-prev ui-corner-all",
					"data-handler": "prev",
					"data-event": "click",
					title: prevText
				} )
				.append(
					$( "<span>" )
						.addClass( "ui-icon ui-icon-circle-triangle-" +
							( isRTL ? "e" : "w" ) )
						.text( prevText )
				)[ 0 ].outerHTML;
		} else if ( hideIfNoPrevNext ) {
			prev = "";
		} else {
			prev = $( "<a>" )
				.attr( {
					"class": "ui-datepicker-prev ui-corner-all ui-state-disabled",
					title: prevText
				} )
				.append(
					$( "<span>" )
						.addClass( "ui-icon ui-icon-circle-triangle-" +
							( isRTL ? "e" : "w" ) )
						.text( prevText )
				)[ 0 ].outerHTML;
		}

		nextText = this._get( inst, "nextText" );
		nextText = ( !navigationAsDateFormat ? nextText : this.formatDate( nextText,
			this._daylightSavingAdjust( new Date( drawYear, drawMonth + stepMonths, 1 ) ),
			this._getFormatConfig( inst ) ) );

		if ( this._canAdjustMonth( inst, +1, drawYear, drawMonth ) ) {
			next = $( "<a>" )
				.attr( {
					"class": "ui-datepicker-next ui-corner-all",
					"data-handler": "next",
					"data-event": "click",
					title: nextText
				} )
				.append(
					$( "<span>" )
						.addClass( "ui-icon ui-icon-circle-triangle-" +
							( isRTL ? "w" : "e" ) )
						.text( nextText )
				)[ 0 ].outerHTML;
		} else if ( hideIfNoPrevNext ) {
			next = "";
		} else {
			next = $( "<a>" )
				.attr( {
					"class": "ui-datepicker-next ui-corner-all ui-state-disabled",
					title: nextText
				} )
				.append(
					$( "<span>" )
						.attr( "class", "ui-icon ui-icon-circle-triangle-" +
							( isRTL ? "w" : "e" ) )
						.text( nextText )
				)[ 0 ].outerHTML;
		}

		currentText = this._get( inst, "currentText" );
		gotoDate = ( this._get( inst, "gotoCurrent" ) && inst.currentDay ? currentDate : today );
		currentText = ( !navigationAsDateFormat ? currentText :
			this.formatDate( currentText, gotoDate, this._getFormatConfig( inst ) ) );

		controls = "";
		if ( !inst.inline ) {
			controls = $( "<button>" )
				.attr( {
					type: "button",
					"class": "ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all",
					"data-handler": "hide",
					"data-event": "click"
				} )
				.text( this._get( inst, "closeText" ) )[ 0 ].outerHTML;
		}

		buttonPanel = "";
		if ( showButtonPanel ) {
			buttonPanel = $( "<div class='ui-datepicker-buttonpane ui-widget-content'>" )
				.append( isRTL ? controls : "" )
				.append( this._isInRange( inst, gotoDate ) ?
					$( "<button>" )
						.attr( {
							type: "button",
							"class": "ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all",
							"data-handler": "today",
							"data-event": "click"
						} )
						.text( currentText ) :
					"" )
				.append( isRTL ? "" : controls )[ 0 ].outerHTML;
		}

		firstDay = parseInt( this._get( inst, "firstDay" ), 10 );
		firstDay = ( isNaN( firstDay ) ? 0 : firstDay );

		showWeek = this._get( inst, "showWeek" );
		dayNames = this._get( inst, "dayNames" );
		dayNamesMin = this._get( inst, "dayNamesMin" );
		monthNames = this._get( inst, "monthNames" );
		monthNamesShort = this._get( inst, "monthNamesShort" );
		beforeShowDay = this._get( inst, "beforeShowDay" );
		showOtherMonths = this._get( inst, "showOtherMonths" );
		selectOtherMonths = this._get( inst, "selectOtherMonths" );
		defaultDate = this._getDefaultDate( inst );
		html = "";

		for ( row = 0; row < numMonths[ 0 ]; row++ ) {
			group = "";
			this.maxRows = 4;
			for ( col = 0; col < numMonths[ 1 ]; col++ ) {
				selectedDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, inst.selectedDay ) );
				cornerClass = " ui-corner-all";
				calender = "";
				if ( isMultiMonth ) {
					calender += "<div class='ui-datepicker-group";
					if ( numMonths[ 1 ] > 1 ) {
						switch ( col ) {
							case 0: calender += " ui-datepicker-group-first";
								cornerClass = " ui-corner-" + ( isRTL ? "right" : "left" ); break;
							case numMonths[ 1 ] - 1: calender += " ui-datepicker-group-last";
								cornerClass = " ui-corner-" + ( isRTL ? "left" : "right" ); break;
							default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
						}
					}
					calender += "'>";
				}
				calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
					( /all|left/.test( cornerClass ) && row === 0 ? ( isRTL ? next : prev ) : "" ) +
					( /all|right/.test( cornerClass ) && row === 0 ? ( isRTL ? prev : next ) : "" ) +
					this._generateMonthYearHeader( inst, drawMonth, drawYear, minDate, maxDate,
					row > 0 || col > 0, monthNames, monthNamesShort ) + // draw month headers
					"</div><table class='ui-datepicker-calendar'><thead>" +
					"<tr>";
				thead = ( showWeek ? "<th class='ui-datepicker-week-col'>" + this._get( inst, "weekHeader" ) + "</th>" : "" );
				for ( dow = 0; dow < 7; dow++ ) { // days of the week
					day = ( dow + firstDay ) % 7;
					thead += "<th scope='col'" + ( ( dow + firstDay + 6 ) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "" ) + ">" +
						"<span title='" + dayNames[ day ] + "'>" + dayNamesMin[ day ] + "</span></th>";
				}
				calender += thead + "</tr></thead><tbody>";
				daysInMonth = this._getDaysInMonth( drawYear, drawMonth );
				if ( drawYear === inst.selectedYear && drawMonth === inst.selectedMonth ) {
					inst.selectedDay = Math.min( inst.selectedDay, daysInMonth );
				}
				leadDays = ( this._getFirstDayOfMonth( drawYear, drawMonth ) - firstDay + 7 ) % 7;
				curRows = Math.ceil( ( leadDays + daysInMonth ) / 7 ); // calculate the number of rows to generate
				numRows = ( isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows ); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;
				printDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 - leadDays ) );
				for ( dRow = 0; dRow < numRows; dRow++ ) { // create date picker rows
					calender += "<tr>";
					tbody = ( !showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
						this._get( inst, "calculateWeek" )( printDate ) + "</td>" );
					for ( dow = 0; dow < 7; dow++ ) { // create date picker days
						daySettings = ( beforeShowDay ?
							beforeShowDay.apply( ( inst.input ? inst.input[ 0 ] : null ), [ printDate ] ) : [ true, "" ] );
						otherMonth = ( printDate.getMonth() !== drawMonth );
						unselectable = ( otherMonth && !selectOtherMonths ) || !daySettings[ 0 ] ||
							( minDate && printDate < minDate ) || ( maxDate && printDate > maxDate );
						tbody += "<td class='" +
							( ( dow + firstDay + 6 ) % 7 >= 5 ? " ui-datepicker-week-end" : "" ) + // highlight weekends
							( otherMonth ? " ui-datepicker-other-month" : "" ) + // highlight days from other months
							( ( printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent ) || // user pressed key
							( defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ) ?

							// or defaultDate is current printedDate and defaultDate is selectedDate
							" " + this._dayOverClass : "" ) + // highlight selected day
							( unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "" ) +  // highlight unselectable days
							( otherMonth && !showOtherMonths ? "" : " " + daySettings[ 1 ] + // highlight custom dates
							( printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "" ) + // highlight selected day
							( printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "" ) ) + "'" + // highlight today (if different)
							( ( !otherMonth || showOtherMonths ) && daySettings[ 2 ] ? " title='" + daySettings[ 2 ].replace( /'/g, "&#39;" ) + "'" : "" ) + // cell title
							( unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'" ) + ">" + // actions
							( otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
							( unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
							( printDate.getTime() === today.getTime() ? " ui-state-highlight" : "" ) +
							( printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "" ) + // highlight selected day
							( otherMonth ? " ui-priority-secondary" : "" ) + // distinguish dates from other months
							"' href='#' aria-current='" + ( printDate.getTime() === currentDate.getTime() ? "true" : "false" ) + // mark date as selected for screen reader
							"' data-date='" + printDate.getDate() + // store date as data
							"'>" + printDate.getDate() + "</a>" ) ) + "</td>"; // display selectable date
						printDate.setDate( printDate.getDate() + 1 );
						printDate = this._daylightSavingAdjust( printDate );
					}
					calender += tbody + "</tr>";
				}
				drawMonth++;
				if ( drawMonth > 11 ) {
					drawMonth = 0;
					drawYear++;
				}
				calender += "</tbody></table>" + ( isMultiMonth ? "</div>" +
							( ( numMonths[ 0 ] > 0 && col === numMonths[ 1 ] - 1 ) ? "<div class='ui-datepicker-row-break'></div>" : "" ) : "" );
				group += calender;
			}
			html += group;
		}
		html += buttonPanel;
		inst._keyEvent = false;
		return html;
	},

	/* Generate the month and year header. */
	_generateMonthYearHeader: function( inst, drawMonth, drawYear, minDate, maxDate,
			secondary, monthNames, monthNamesShort ) {

		var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
			changeMonth = this._get( inst, "changeMonth" ),
			changeYear = this._get( inst, "changeYear" ),
			showMonthAfterYear = this._get( inst, "showMonthAfterYear" ),
			selectMonthLabel = this._get( inst, "selectMonthLabel" ),
			selectYearLabel = this._get( inst, "selectYearLabel" ),
			html = "<div class='ui-datepicker-title'>",
			monthHtml = "";

		// Month selection
		if ( secondary || !changeMonth ) {
			monthHtml += "<span class='ui-datepicker-month'>" + monthNames[ drawMonth ] + "</span>";
		} else {
			inMinYear = ( minDate && minDate.getFullYear() === drawYear );
			inMaxYear = ( maxDate && maxDate.getFullYear() === drawYear );
			monthHtml += "<select class='ui-datepicker-month' aria-label='" + selectMonthLabel + "' data-handler='selectMonth' data-event='change'>";
			for ( month = 0; month < 12; month++ ) {
				if ( ( !inMinYear || month >= minDate.getMonth() ) && ( !inMaxYear || month <= maxDate.getMonth() ) ) {
					monthHtml += "<option value='" + month + "'" +
						( month === drawMonth ? " selected='selected'" : "" ) +
						">" + monthNamesShort[ month ] + "</option>";
				}
			}
			monthHtml += "</select>";
		}

		if ( !showMonthAfterYear ) {
			html += monthHtml + ( secondary || !( changeMonth && changeYear ) ? "&#xa0;" : "" );
		}

		// Year selection
		if ( !inst.yearshtml ) {
			inst.yearshtml = "";
			if ( secondary || !changeYear ) {
				html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
			} else {

				// determine range of years to display
				years = this._get( inst, "yearRange" ).split( ":" );
				thisYear = new Date().getFullYear();
				determineYear = function( value ) {
					var year = ( value.match( /c[+\-].*/ ) ? drawYear + parseInt( value.substring( 1 ), 10 ) :
						( value.match( /[+\-].*/ ) ? thisYear + parseInt( value, 10 ) :
						parseInt( value, 10 ) ) );
					return ( isNaN( year ) ? thisYear : year );
				};
				year = determineYear( years[ 0 ] );
				endYear = Math.max( year, determineYear( years[ 1 ] || "" ) );
				year = ( minDate ? Math.max( year, minDate.getFullYear() ) : year );
				endYear = ( maxDate ? Math.min( endYear, maxDate.getFullYear() ) : endYear );
				inst.yearshtml += "<select class='ui-datepicker-year' aria-label='" + selectYearLabel + "' data-handler='selectYear' data-event='change'>";
				for ( ; year <= endYear; year++ ) {
					inst.yearshtml += "<option value='" + year + "'" +
						( year === drawYear ? " selected='selected'" : "" ) +
						">" + year + "</option>";
				}
				inst.yearshtml += "</select>";

				html += inst.yearshtml;
				inst.yearshtml = null;
			}
		}

		html += this._get( inst, "yearSuffix" );
		if ( showMonthAfterYear ) {
			html += ( secondary || !( changeMonth && changeYear ) ? "&#xa0;" : "" ) + monthHtml;
		}
		html += "</div>"; // Close datepicker_header
		return html;
	},

	/* Adjust one of the date sub-fields. */
	_adjustInstDate: function( inst, offset, period ) {
		var year = inst.selectedYear + ( period === "Y" ? offset : 0 ),
			month = inst.selectedMonth + ( period === "M" ? offset : 0 ),
			day = Math.min( inst.selectedDay, this._getDaysInMonth( year, month ) ) + ( period === "D" ? offset : 0 ),
			date = this._restrictMinMax( inst, this._daylightSavingAdjust( new Date( year, month, day ) ) );

		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		if ( period === "M" || period === "Y" ) {
			this._notifyChange( inst );
		}
	},

	/* Ensure a date is within any min/max bounds. */
	_restrictMinMax: function( inst, date ) {
		var minDate = this._getMinMaxDate( inst, "min" ),
			maxDate = this._getMinMaxDate( inst, "max" ),
			newDate = ( minDate && date < minDate ? minDate : date );
		return ( maxDate && newDate > maxDate ? maxDate : newDate );
	},

	/* Notify change of month/year. */
	_notifyChange: function( inst ) {
		var onChange = this._get( inst, "onChangeMonthYear" );
		if ( onChange ) {
			onChange.apply( ( inst.input ? inst.input[ 0 ] : null ),
				[ inst.selectedYear, inst.selectedMonth + 1, inst ] );
		}
	},

	/* Determine the number of months to show. */
	_getNumberOfMonths: function( inst ) {
		var numMonths = this._get( inst, "numberOfMonths" );
		return ( numMonths == null ? [ 1, 1 ] : ( typeof numMonths === "number" ? [ 1, numMonths ] : numMonths ) );
	},

	/* Determine the current maximum date - ensure no time components are set. */
	_getMinMaxDate: function( inst, minMax ) {
		return this._determineDate( inst, this._get( inst, minMax + "Date" ), null );
	},

	/* Find the number of days in a given month. */
	_getDaysInMonth: function( year, month ) {
		return 32 - this._daylightSavingAdjust( new Date( year, month, 32 ) ).getDate();
	},

	/* Find the day of the week of the first of a month. */
	_getFirstDayOfMonth: function( year, month ) {
		return new Date( year, month, 1 ).getDay();
	},

	/* Determines if we should allow a "next/prev" month display change. */
	_canAdjustMonth: function( inst, offset, curYear, curMonth ) {
		var numMonths = this._getNumberOfMonths( inst ),
			date = this._daylightSavingAdjust( new Date( curYear,
			curMonth + ( offset < 0 ? offset : numMonths[ 0 ] * numMonths[ 1 ] ), 1 ) );

		if ( offset < 0 ) {
			date.setDate( this._getDaysInMonth( date.getFullYear(), date.getMonth() ) );
		}
		return this._isInRange( inst, date );
	},

	/* Is the given date in the accepted range? */
	_isInRange: function( inst, date ) {
		var yearSplit, currentYear,
			minDate = this._getMinMaxDate( inst, "min" ),
			maxDate = this._getMinMaxDate( inst, "max" ),
			minYear = null,
			maxYear = null,
			years = this._get( inst, "yearRange" );
			if ( years ) {
				yearSplit = years.split( ":" );
				currentYear = new Date().getFullYear();
				minYear = parseInt( yearSplit[ 0 ], 10 );
				maxYear = parseInt( yearSplit[ 1 ], 10 );
				if ( yearSplit[ 0 ].match( /[+\-].*/ ) ) {
					minYear += currentYear;
				}
				if ( yearSplit[ 1 ].match( /[+\-].*/ ) ) {
					maxYear += currentYear;
				}
			}

		return ( ( !minDate || date.getTime() >= minDate.getTime() ) &&
			( !maxDate || date.getTime() <= maxDate.getTime() ) &&
			( !minYear || date.getFullYear() >= minYear ) &&
			( !maxYear || date.getFullYear() <= maxYear ) );
	},

	/* Provide the configuration settings for formatting/parsing. */
	_getFormatConfig: function( inst ) {
		var shortYearCutoff = this._get( inst, "shortYearCutoff" );
		shortYearCutoff = ( typeof shortYearCutoff !== "string" ? shortYearCutoff :
			new Date().getFullYear() % 100 + parseInt( shortYearCutoff, 10 ) );
		return { shortYearCutoff: shortYearCutoff,
			dayNamesShort: this._get( inst, "dayNamesShort" ), dayNames: this._get( inst, "dayNames" ),
			monthNamesShort: this._get( inst, "monthNamesShort" ), monthNames: this._get( inst, "monthNames" ) };
	},

	/* Format the given date for display. */
	_formatDate: function( inst, day, month, year ) {
		if ( !day ) {
			inst.currentDay = inst.selectedDay;
			inst.currentMonth = inst.selectedMonth;
			inst.currentYear = inst.selectedYear;
		}
		var date = ( day ? ( typeof day === "object" ? day :
			this._daylightSavingAdjust( new Date( year, month, day ) ) ) :
			this._daylightSavingAdjust( new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) );
		return this.formatDate( this._get( inst, "dateFormat" ), date, this._getFormatConfig( inst ) );
	}
} );

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */
function datepicker_bindHover( dpDiv ) {
	var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
	return dpDiv.on( "mouseout", selector, function() {
			$( this ).removeClass( "ui-state-hover" );
			if ( this.className.indexOf( "ui-datepicker-prev" ) !== -1 ) {
				$( this ).removeClass( "ui-datepicker-prev-hover" );
			}
			if ( this.className.indexOf( "ui-datepicker-next" ) !== -1 ) {
				$( this ).removeClass( "ui-datepicker-next-hover" );
			}
		} )
		.on( "mouseover", selector, datepicker_handleMouseover );
}

function datepicker_handleMouseover() {
	if ( !$.datepicker._isDisabledDatepicker( datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[ 0 ] : datepicker_instActive.input[ 0 ] ) ) {
		$( this ).parents( ".ui-datepicker-calendar" ).find( "a" ).removeClass( "ui-state-hover" );
		$( this ).addClass( "ui-state-hover" );
		if ( this.className.indexOf( "ui-datepicker-prev" ) !== -1 ) {
			$( this ).addClass( "ui-datepicker-prev-hover" );
		}
		if ( this.className.indexOf( "ui-datepicker-next" ) !== -1 ) {
			$( this ).addClass( "ui-datepicker-next-hover" );
		}
	}
}

/* jQuery extend now ignores nulls! */
function datepicker_extendRemove( target, props ) {
	$.extend( target, props );
	for ( var name in props ) {
		if ( props[ name ] == null ) {
			target[ name ] = props[ name ];
		}
	}
	return target;
}

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
					Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function( options ) {

	/* Verify an empty collection wasn't passed - Fixes #6976 */
	if ( !this.length ) {
		return this;
	}

	/* Initialise the date picker. */
	if ( !$.datepicker.initialized ) {
		$( document ).on( "mousedown", $.datepicker._checkExternalClick );
		$.datepicker.initialized = true;
	}

	/* Append datepicker main container to body if not exist. */
	if ( $( "#" + $.datepicker._mainDivId ).length === 0 ) {
		$( "body" ).append( $.datepicker.dpDiv );
	}

	var otherArgs = Array.prototype.slice.call( arguments, 1 );
	if ( typeof options === "string" && ( options === "isDisabled" || options === "getDate" || options === "widget" ) ) {
		return $.datepicker[ "_" + options + "Datepicker" ].
			apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );
	}
	if ( options === "option" && arguments.length === 2 && typeof arguments[ 1 ] === "string" ) {
		return $.datepicker[ "_" + options + "Datepicker" ].
			apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );
	}
	return this.each( function() {
		if ( typeof options === "string" ) {
			$.datepicker[ "_" + options + "Datepicker" ]
				.apply( $.datepicker, [ this ].concat( otherArgs ) );
		} else {
			$.datepicker._attachDatepicker( this, options );
		}
	} );
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.13.2";

var widgetsDatepicker = $.datepicker;



// This file is deprecated
var ie = $.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

/*!
 * jQuery UI Mouse 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Mouse
//>>group: Widgets
//>>description: Abstracts mouse-based interactions to assist in creating certain widgets.
//>>docs: http://api.jqueryui.com/mouse/


var mouseHandled = false;
$( document ).on( "mouseup", function() {
	mouseHandled = false;
} );

var widgetsMouse = $.widget( "ui.mouse", {
	version: "1.13.2",
	options: {
		cancel: "input, textarea, button, select, option",
		distance: 1,
		delay: 0
	},
	_mouseInit: function() {
		var that = this;

		this.element
			.on( "mousedown." + this.widgetName, function( event ) {
				return that._mouseDown( event );
			} )
			.on( "click." + this.widgetName, function( event ) {
				if ( true === $.data( event.target, that.widgetName + ".preventClickEvent" ) ) {
					$.removeData( event.target, that.widgetName + ".preventClickEvent" );
					event.stopImmediatePropagation();
					return false;
				}
			} );

		this.started = false;
	},

	// TODO: make sure destroying one instance of mouse doesn't mess with
	// other instances of mouse
	_mouseDestroy: function() {
		this.element.off( "." + this.widgetName );
		if ( this._mouseMoveDelegate ) {
			this.document
				.off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
				.off( "mouseup." + this.widgetName, this._mouseUpDelegate );
		}
	},

	_mouseDown: function( event ) {

		// don't let more than one widget handle mouseStart
		if ( mouseHandled ) {
			return;
		}

		this._mouseMoved = false;

		// We may have missed mouseup (out of window)
		if ( this._mouseStarted ) {
			this._mouseUp( event );
		}

		this._mouseDownEvent = event;

		var that = this,
			btnIsLeft = ( event.which === 1 ),

			// event.target.nodeName works around a bug in IE 8 with
			// disabled inputs (#7620)
			elIsCancel = ( typeof this.options.cancel === "string" && event.target.nodeName ?
				$( event.target ).closest( this.options.cancel ).length : false );
		if ( !btnIsLeft || elIsCancel || !this._mouseCapture( event ) ) {
			return true;
		}

		this.mouseDelayMet = !this.options.delay;
		if ( !this.mouseDelayMet ) {
			this._mouseDelayTimer = setTimeout( function() {
				that.mouseDelayMet = true;
			}, this.options.delay );
		}

		if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
			this._mouseStarted = ( this._mouseStart( event ) !== false );
			if ( !this._mouseStarted ) {
				event.preventDefault();
				return true;
			}
		}

		// Click event may never have fired (Gecko & Opera)
		if ( true === $.data( event.target, this.widgetName + ".preventClickEvent" ) ) {
			$.removeData( event.target, this.widgetName + ".preventClickEvent" );
		}

		// These delegates are required to keep context
		this._mouseMoveDelegate = function( event ) {
			return that._mouseMove( event );
		};
		this._mouseUpDelegate = function( event ) {
			return that._mouseUp( event );
		};

		this.document
			.on( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.on( "mouseup." + this.widgetName, this._mouseUpDelegate );

		event.preventDefault();

		mouseHandled = true;
		return true;
	},

	_mouseMove: function( event ) {

		// Only check for mouseups outside the document if you've moved inside the document
		// at least once. This prevents the firing of mouseup in the case of IE<9, which will
		// fire a mousemove event if content is placed under the cursor. See #7778
		// Support: IE <9
		if ( this._mouseMoved ) {

			// IE mouseup check - mouseup happened when mouse was out of window
			if ( $.ui.ie && ( !document.documentMode || document.documentMode < 9 ) &&
					!event.button ) {
				return this._mouseUp( event );

			// Iframe mouseup check - mouseup occurred in another document
			} else if ( !event.which ) {

				// Support: Safari <=8 - 9
				// Safari sets which to 0 if you press any of the following keys
				// during a drag (#14461)
				if ( event.originalEvent.altKey || event.originalEvent.ctrlKey ||
						event.originalEvent.metaKey || event.originalEvent.shiftKey ) {
					this.ignoreMissingWhich = true;
				} else if ( !this.ignoreMissingWhich ) {
					return this._mouseUp( event );
				}
			}
		}

		if ( event.which || event.button ) {
			this._mouseMoved = true;
		}

		if ( this._mouseStarted ) {
			this._mouseDrag( event );
			return event.preventDefault();
		}

		if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {
			this._mouseStarted =
				( this._mouseStart( this._mouseDownEvent, event ) !== false );
			if ( this._mouseStarted ) {
				this._mouseDrag( event );
			} else {
				this._mouseUp( event );
			}
		}

		return !this._mouseStarted;
	},

	_mouseUp: function( event ) {
		this.document
			.off( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.off( "mouseup." + this.widgetName, this._mouseUpDelegate );

		if ( this._mouseStarted ) {
			this._mouseStarted = false;

			if ( event.target === this._mouseDownEvent.target ) {
				$.data( event.target, this.widgetName + ".preventClickEvent", true );
			}

			this._mouseStop( event );
		}

		if ( this._mouseDelayTimer ) {
			clearTimeout( this._mouseDelayTimer );
			delete this._mouseDelayTimer;
		}

		this.ignoreMissingWhich = false;
		mouseHandled = false;
		event.preventDefault();
	},

	_mouseDistanceMet: function( event ) {
		return ( Math.max(
				Math.abs( this._mouseDownEvent.pageX - event.pageX ),
				Math.abs( this._mouseDownEvent.pageY - event.pageY )
			) >= this.options.distance
		);
	},

	_mouseDelayMet: function( /* event */ ) {
		return this.mouseDelayMet;
	},

	// These are placeholder methods, to be overriden by extending plugin
	_mouseStart: function( /* event */ ) {},
	_mouseDrag: function( /* event */ ) {},
	_mouseStop: function( /* event */ ) {},
	_mouseCapture: function( /* event */ ) {
		return true;
	}
} );



// $.ui.plugin is deprecated. Use $.widget() extensions instead.
var plugin = $.ui.plugin = {
	add: function( module, option, set ) {
		var i,
			proto = $.ui[ module ].prototype;
		for ( i in set ) {
			proto.plugins[ i ] = proto.plugins[ i ] || [];
			proto.plugins[ i ].push( [ option, set[ i ] ] );
		}
	},
	call: function( instance, name, args, allowDisconnected ) {
		var i,
			set = instance.plugins[ name ];

		if ( !set ) {
			return;
		}

		if ( !allowDisconnected && ( !instance.element[ 0 ].parentNode ||
				instance.element[ 0 ].parentNode.nodeType === 11 ) ) {
			return;
		}

		for ( i = 0; i < set.length; i++ ) {
			if ( instance.options[ set[ i ][ 0 ] ] ) {
				set[ i ][ 1 ].apply( instance.element, args );
			}
		}
	}
};



var safeBlur = $.ui.safeBlur = function( element ) {

	// Support: IE9 - 10 only
	// If the <body> is blurred, IE will switch windows, see #9420
	if ( element && element.nodeName.toLowerCase() !== "body" ) {
		$( element ).trigger( "blur" );
	}
};


/*!
 * jQuery UI Draggable 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Draggable
//>>group: Interactions
//>>description: Enables dragging functionality for any element.
//>>docs: http://api.jqueryui.com/draggable/
//>>demos: http://jqueryui.com/draggable/
//>>css.structure: ../../themes/base/draggable.css


$.widget( "ui.draggable", $.ui.mouse, {
	version: "1.13.2",
	widgetEventPrefix: "drag",
	options: {
		addClasses: true,
		appendTo: "parent",
		axis: false,
		connectToSortable: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		grid: false,
		handle: false,
		helper: "original",
		iframeFix: false,
		opacity: false,
		refreshPositions: false,
		revert: false,
		revertDuration: 500,
		scope: "default",
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		snap: false,
		snapMode: "both",
		snapTolerance: 20,
		stack: false,
		zIndex: false,

		// Callbacks
		drag: null,
		start: null,
		stop: null
	},
	_create: function() {

		if ( this.options.helper === "original" ) {
			this._setPositionRelative();
		}
		if ( this.options.addClasses ) {
			this._addClass( "ui-draggable" );
		}
		this._setHandleClassName();

		this._mouseInit();
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "handle" ) {
			this._removeHandleClassName();
			this._setHandleClassName();
		}
	},

	_destroy: function() {
		if ( ( this.helper || this.element ).is( ".ui-draggable-dragging" ) ) {
			this.destroyOnClear = true;
			return;
		}
		this._removeHandleClassName();
		this._mouseDestroy();
	},

	_mouseCapture: function( event ) {
		var o = this.options;

		// Among others, prevent a drag on a resizable-handle
		if ( this.helper || o.disabled ||
				$( event.target ).closest( ".ui-resizable-handle" ).length > 0 ) {
			return false;
		}

		//Quit if we're not on a valid handle
		this.handle = this._getHandle( event );
		if ( !this.handle ) {
			return false;
		}

		this._blurActiveElement( event );

		this._blockFrames( o.iframeFix === true ? "iframe" : o.iframeFix );

		return true;

	},

	_blockFrames: function( selector ) {
		this.iframeBlocks = this.document.find( selector ).map( function() {
			var iframe = $( this );

			return $( "<div>" )
				.css( "position", "absolute" )
				.appendTo( iframe.parent() )
				.outerWidth( iframe.outerWidth() )
				.outerHeight( iframe.outerHeight() )
				.offset( iframe.offset() )[ 0 ];
		} );
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_blurActiveElement: function( event ) {
		var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),
			target = $( event.target );

		// Don't blur if the event occurred on an element that is within
		// the currently focused element
		// See #10527, #12472
		if ( target.closest( activeElement ).length ) {
			return;
		}

		// Blur any element that currently has focus, see #4261
		$.ui.safeBlur( activeElement );
	},

	_mouseStart: function( event ) {

		var o = this.options;

		//Create and append the visible helper
		this.helper = this._createHelper( event );

		this._addClass( this.helper, "ui-draggable-dragging" );

		//Cache the helper size
		this._cacheHelperProportions();

		//If ddmanager is used for droppables, set the global draggable
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.current = this;
		}

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Store the helper's css position
		this.cssPosition = this.helper.css( "position" );
		this.scrollParent = this.helper.scrollParent( true );
		this.offsetParent = this.helper.offsetParent();
		this.hasFixedAncestor = this.helper.parents().filter( function() {
				return $( this ).css( "position" ) === "fixed";
			} ).length > 0;

		//The element's absolute position on the page minus margins
		this.positionAbs = this.element.offset();
		this._refreshOffsets( event );

		//Generate the original position
		this.originalPosition = this.position = this._generatePosition( event, false );
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		if ( o.cursorAt ) {
			this._adjustOffsetFromHelper( o.cursorAt );
		}

		//Set a containment if given in the options
		this._setContainment();

		//Trigger event + callbacks
		if ( this._trigger( "start", event ) === false ) {
			this._clear();
			return false;
		}

		//Recache the helper size
		this._cacheHelperProportions();

		//Prepare the droppable offsets
		if ( $.ui.ddmanager && !o.dropBehaviour ) {
			$.ui.ddmanager.prepareOffsets( this, event );
		}

		// Execute the drag once - this causes the helper not to be visible before getting its
		// correct position
		this._mouseDrag( event, true );

		// If the ddmanager is used for droppables, inform the manager that dragging has started
		// (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStart( this, event );
		}

		return true;
	},

	_refreshOffsets: function( event ) {
		this.offset = {
			top: this.positionAbs.top - this.margins.top,
			left: this.positionAbs.left - this.margins.left,
			scroll: false,
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset()
		};

		this.offset.click = {
			left: event.pageX - this.offset.left,
			top: event.pageY - this.offset.top
		};
	},

	_mouseDrag: function( event, noPropagation ) {

		// reset any necessary cached properties (see #5009)
		if ( this.hasFixedAncestor ) {
			this.offset.parent = this._getParentOffset();
		}

		//Compute the helpers position
		this.position = this._generatePosition( event, true );
		this.positionAbs = this._convertPositionTo( "absolute" );

		//Call plugins and callbacks and use the resulting position if something is returned
		if ( !noPropagation ) {
			var ui = this._uiHash();
			if ( this._trigger( "drag", event, ui ) === false ) {
				this._mouseUp( new $.Event( "mouseup", event ) );
				return false;
			}
			this.position = ui.position;
		}

		this.helper[ 0 ].style.left = this.position.left + "px";
		this.helper[ 0 ].style.top = this.position.top + "px";

		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.drag( this, event );
		}

		return false;
	},

	_mouseStop: function( event ) {

		//If we are using droppables, inform the manager about the drop
		var that = this,
			dropped = false;
		if ( $.ui.ddmanager && !this.options.dropBehaviour ) {
			dropped = $.ui.ddmanager.drop( this, event );
		}

		//if a drop comes from outside (a sortable)
		if ( this.dropped ) {
			dropped = this.dropped;
			this.dropped = false;
		}

		if ( ( this.options.revert === "invalid" && !dropped ) ||
				( this.options.revert === "valid" && dropped ) ||
				this.options.revert === true || ( typeof this.options.revert === "function" &&
				this.options.revert.call( this.element, dropped ) )
		) {
			$( this.helper ).animate(
				this.originalPosition,
				parseInt( this.options.revertDuration, 10 ),
				function() {
					if ( that._trigger( "stop", event ) !== false ) {
						that._clear();
					}
				}
			);
		} else {
			if ( this._trigger( "stop", event ) !== false ) {
				this._clear();
			}
		}

		return false;
	},

	_mouseUp: function( event ) {
		this._unblockFrames();

		// If the ddmanager is used for droppables, inform the manager that dragging has stopped
		// (see #5003)
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.dragStop( this, event );
		}

		// Only need to focus if the event occurred on the draggable itself, see #10527
		if ( this.handleElement.is( event.target ) ) {

			// The interaction is over; whether or not the click resulted in a drag,
			// focus the element
			this.element.trigger( "focus" );
		}

		return $.ui.mouse.prototype._mouseUp.call( this, event );
	},

	cancel: function() {

		if ( this.helper.is( ".ui-draggable-dragging" ) ) {
			this._mouseUp( new $.Event( "mouseup", { target: this.element[ 0 ] } ) );
		} else {
			this._clear();
		}

		return this;

	},

	_getHandle: function( event ) {
		return this.options.handle ?
			!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
			true;
	},

	_setHandleClassName: function() {
		this.handleElement = this.options.handle ?
			this.element.find( this.options.handle ) : this.element;
		this._addClass( this.handleElement, "ui-draggable-handle" );
	},

	_removeHandleClassName: function() {
		this._removeClass( this.handleElement, "ui-draggable-handle" );
	},

	_createHelper: function( event ) {

		var o = this.options,
			helperIsFunction = typeof o.helper === "function",
			helper = helperIsFunction ?
				$( o.helper.apply( this.element[ 0 ], [ event ] ) ) :
				( o.helper === "clone" ?
					this.element.clone().removeAttr( "id" ) :
					this.element );

		if ( !helper.parents( "body" ).length ) {
			helper.appendTo( ( o.appendTo === "parent" ?
				this.element[ 0 ].parentNode :
				o.appendTo ) );
		}

		// Http://bugs.jqueryui.com/ticket/9446
		// a helper function can return the original element
		// which wouldn't have been set to relative in _create
		if ( helperIsFunction && helper[ 0 ] === this.element[ 0 ] ) {
			this._setPositionRelative();
		}

		if ( helper[ 0 ] !== this.element[ 0 ] &&
				!( /(fixed|absolute)/ ).test( helper.css( "position" ) ) ) {
			helper.css( "position", "absolute" );
		}

		return helper;

	},

	_setPositionRelative: function() {
		if ( !( /^(?:r|a|f)/ ).test( this.element.css( "position" ) ) ) {
			this.element[ 0 ].style.position = "relative";
		}
	},

	_adjustOffsetFromHelper: function( obj ) {
		if ( typeof obj === "string" ) {
			obj = obj.split( " " );
		}
		if ( Array.isArray( obj ) ) {
			obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };
		}
		if ( "left" in obj ) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ( "right" in obj ) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ( "top" in obj ) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ( "bottom" in obj ) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_isRootNode: function( element ) {
		return ( /(html|body)/i ).test( element.tagName ) || element === this.document[ 0 ];
	},

	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		var po = this.offsetParent.offset(),
			document = this.document[ 0 ];

		// This is a special case where we need to modify a offset calculated on start, since the
		// following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the
		// next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
		// the document, which means that the scroll is included in the initial calculation of the
		// offset of the parent, and never recalculated upon drag
		if ( this.cssPosition === "absolute" && this.scrollParent[ 0 ] !== document &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		if ( this._isRootNode( this.offsetParent[ 0 ] ) ) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + ( parseInt( this.offsetParent.css( "borderTopWidth" ), 10 ) || 0 ),
			left: po.left + ( parseInt( this.offsetParent.css( "borderLeftWidth" ), 10 ) || 0 )
		};

	},

	_getRelativeOffset: function() {
		if ( this.cssPosition !== "relative" ) {
			return { top: 0, left: 0 };
		}

		var p = this.element.position(),
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: p.top - ( parseInt( this.helper.css( "top" ), 10 ) || 0 ) +
				( !scrollIsRootNode ? this.scrollParent.scrollTop() : 0 ),
			left: p.left - ( parseInt( this.helper.css( "left" ), 10 ) || 0 ) +
				( !scrollIsRootNode ? this.scrollParent.scrollLeft() : 0 )
		};

	},

	_cacheMargins: function() {
		this.margins = {
			left: ( parseInt( this.element.css( "marginLeft" ), 10 ) || 0 ),
			top: ( parseInt( this.element.css( "marginTop" ), 10 ) || 0 ),
			right: ( parseInt( this.element.css( "marginRight" ), 10 ) || 0 ),
			bottom: ( parseInt( this.element.css( "marginBottom" ), 10 ) || 0 )
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var isUserScrollable, c, ce,
			o = this.options,
			document = this.document[ 0 ];

		this.relativeContainer = null;

		if ( !o.containment ) {
			this.containment = null;
			return;
		}

		if ( o.containment === "window" ) {
			this.containment = [
				$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
				$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
				$( window ).scrollLeft() + $( window ).width() -
					this.helperProportions.width - this.margins.left,
				$( window ).scrollTop() +
					( $( window ).height() || document.body.parentNode.scrollHeight ) -
					this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment === "document" ) {
			this.containment = [
				0,
				0,
				$( document ).width() - this.helperProportions.width - this.margins.left,
				( $( document ).height() || document.body.parentNode.scrollHeight ) -
					this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment.constructor === Array ) {
			this.containment = o.containment;
			return;
		}

		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}

		c = $( o.containment );
		ce = c[ 0 ];

		if ( !ce ) {
			return;
		}

		isUserScrollable = /(scroll|auto)/.test( c.css( "overflow" ) );

		this.containment = [
			( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) +
				( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
			( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) +
				( parseInt( c.css( "paddingTop" ), 10 ) || 0 ),
			( isUserScrollable ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
				( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) -
				( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) -
				this.helperProportions.width -
				this.margins.left -
				this.margins.right,
			( isUserScrollable ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
				( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) -
				( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) -
				this.helperProportions.height -
				this.margins.top -
				this.margins.bottom
		];
		this.relativeContainer = c;
	},

	_convertPositionTo: function( d, pos ) {

		if ( !pos ) {
			pos = this.position;
		}

		var mod = d === "absolute" ? 1 : -1,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: (

				// The absolute mouse position
				pos.top	+

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top * mod -
				( ( this.cssPosition === "fixed" ?
					-this.offset.scroll.top :
					( scrollIsRootNode ? 0 : this.offset.scroll.top ) ) * mod )
			),
			left: (

				// The absolute mouse position
				pos.left +

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left * mod	-
				( ( this.cssPosition === "fixed" ?
					-this.offset.scroll.left :
					( scrollIsRootNode ? 0 : this.offset.scroll.left ) ) * mod )
			)
		};

	},

	_generatePosition: function( event, constrainPosition ) {

		var containment, co, top, left,
			o = this.options,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] ),
			pageX = event.pageX,
			pageY = event.pageY;

		// Cache the scroll
		if ( !scrollIsRootNode || !this.offset.scroll ) {
			this.offset.scroll = {
				top: this.scrollParent.scrollTop(),
				left: this.scrollParent.scrollLeft()
			};
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		// If we are not dragging yet, we won't check for options
		if ( constrainPosition ) {
			if ( this.containment ) {
				if ( this.relativeContainer ) {
					co = this.relativeContainer.offset();
					containment = [
						this.containment[ 0 ] + co.left,
						this.containment[ 1 ] + co.top,
						this.containment[ 2 ] + co.left,
						this.containment[ 3 ] + co.top
					];
				} else {
					containment = this.containment;
				}

				if ( event.pageX - this.offset.click.left < containment[ 0 ] ) {
					pageX = containment[ 0 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top < containment[ 1 ] ) {
					pageY = containment[ 1 ] + this.offset.click.top;
				}
				if ( event.pageX - this.offset.click.left > containment[ 2 ] ) {
					pageX = containment[ 2 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top > containment[ 3 ] ) {
					pageY = containment[ 3 ] + this.offset.click.top;
				}
			}

			if ( o.grid ) {

				//Check for grid elements set to 0 to prevent divide by 0 error causing invalid
				// argument errors in IE (see ticket #6950)
				top = o.grid[ 1 ] ? this.originalPageY + Math.round( ( pageY -
					this.originalPageY ) / o.grid[ 1 ] ) * o.grid[ 1 ] : this.originalPageY;
				pageY = containment ? ( ( top - this.offset.click.top >= containment[ 1 ] ||
					top - this.offset.click.top > containment[ 3 ] ) ?
						top :
						( ( top - this.offset.click.top >= containment[ 1 ] ) ?
							top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) : top;

				left = o.grid[ 0 ] ? this.originalPageX +
					Math.round( ( pageX - this.originalPageX ) / o.grid[ 0 ] ) * o.grid[ 0 ] :
					this.originalPageX;
				pageX = containment ? ( ( left - this.offset.click.left >= containment[ 0 ] ||
					left - this.offset.click.left > containment[ 2 ] ) ?
						left :
						( ( left - this.offset.click.left >= containment[ 0 ] ) ?
							left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) : left;
			}

			if ( o.axis === "y" ) {
				pageX = this.originalPageX;
			}

			if ( o.axis === "x" ) {
				pageY = this.originalPageY;
			}
		}

		return {
			top: (

				// The absolute mouse position
				pageY -

				// Click offset (relative to the element)
				this.offset.click.top -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top +
				( this.cssPosition === "fixed" ?
					-this.offset.scroll.top :
					( scrollIsRootNode ? 0 : this.offset.scroll.top ) )
			),
			left: (

				// The absolute mouse position
				pageX -

				// Click offset (relative to the element)
				this.offset.click.left -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left +
				( this.cssPosition === "fixed" ?
					-this.offset.scroll.left :
					( scrollIsRootNode ? 0 : this.offset.scroll.left ) )
			)
		};

	},

	_clear: function() {
		this._removeClass( this.helper, "ui-draggable-dragging" );
		if ( this.helper[ 0 ] !== this.element[ 0 ] && !this.cancelHelperRemoval ) {
			this.helper.remove();
		}
		this.helper = null;
		this.cancelHelperRemoval = false;
		if ( this.destroyOnClear ) {
			this.destroy();
		}
	},

	// From now on bulk stuff - mainly helpers

	_trigger: function( type, event, ui ) {
		ui = ui || this._uiHash();
		$.ui.plugin.call( this, type, [ event, ui, this ], true );

		// Absolute position and offset (see #6884 ) have to be recalculated after plugins
		if ( /^(drag|start|stop)/.test( type ) ) {
			this.positionAbs = this._convertPositionTo( "absolute" );
			ui.offset = this.positionAbs;
		}
		return $.Widget.prototype._trigger.call( this, type, event, ui );
	},

	plugins: {},

	_uiHash: function() {
		return {
			helper: this.helper,
			position: this.position,
			originalPosition: this.originalPosition,
			offset: this.positionAbs
		};
	}

} );

$.ui.plugin.add( "draggable", "connectToSortable", {
	start: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		} );

		draggable.sortables = [];
		$( draggable.options.connectToSortable ).each( function() {
			var sortable = $( this ).sortable( "instance" );

			if ( sortable && !sortable.options.disabled ) {
				draggable.sortables.push( sortable );

				// RefreshPositions is called at drag start to refresh the containerCache
				// which is used in drag. This ensures it's initialized and synchronized
				// with any changes that might have happened on the page since initialization.
				sortable.refreshPositions();
				sortable._trigger( "activate", event, uiSortable );
			}
		} );
	},
	stop: function( event, ui, draggable ) {
		var uiSortable = $.extend( {}, ui, {
			item: draggable.element
		} );

		draggable.cancelHelperRemoval = false;

		$.each( draggable.sortables, function() {
			var sortable = this;

			if ( sortable.isOver ) {
				sortable.isOver = 0;

				// Allow this sortable to handle removing the helper
				draggable.cancelHelperRemoval = true;
				sortable.cancelHelperRemoval = false;

				// Use _storedCSS To restore properties in the sortable,
				// as this also handles revert (#9675) since the draggable
				// may have modified them in unexpected ways (#8809)
				sortable._storedCSS = {
					position: sortable.placeholder.css( "position" ),
					top: sortable.placeholder.css( "top" ),
					left: sortable.placeholder.css( "left" )
				};

				sortable._mouseStop( event );

				// Once drag has ended, the sortable should return to using
				// its original helper, not the shared helper from draggable
				sortable.options.helper = sortable.options._helper;
			} else {

				// Prevent this Sortable from removing the helper.
				// However, don't set the draggable to remove the helper
				// either as another connected Sortable may yet handle the removal.
				sortable.cancelHelperRemoval = true;

				sortable._trigger( "deactivate", event, uiSortable );
			}
		} );
	},
	drag: function( event, ui, draggable ) {
		$.each( draggable.sortables, function() {
			var innermostIntersecting = false,
				sortable = this;

			// Copy over variables that sortable's _intersectsWith uses
			sortable.positionAbs = draggable.positionAbs;
			sortable.helperProportions = draggable.helperProportions;
			sortable.offset.click = draggable.offset.click;

			if ( sortable._intersectsWith( sortable.containerCache ) ) {
				innermostIntersecting = true;

				$.each( draggable.sortables, function() {

					// Copy over variables that sortable's _intersectsWith uses
					this.positionAbs = draggable.positionAbs;
					this.helperProportions = draggable.helperProportions;
					this.offset.click = draggable.offset.click;

					if ( this !== sortable &&
							this._intersectsWith( this.containerCache ) &&
							$.contains( sortable.element[ 0 ], this.element[ 0 ] ) ) {
						innermostIntersecting = false;
					}

					return innermostIntersecting;
				} );
			}

			if ( innermostIntersecting ) {

				// If it intersects, we use a little isOver variable and set it once,
				// so that the move-in stuff gets fired only once.
				if ( !sortable.isOver ) {
					sortable.isOver = 1;

					// Store draggable's parent in case we need to reappend to it later.
					draggable._parent = ui.helper.parent();

					sortable.currentItem = ui.helper
						.appendTo( sortable.element )
						.data( "ui-sortable-item", true );

					// Store helper option to later restore it
					sortable.options._helper = sortable.options.helper;

					sortable.options.helper = function() {
						return ui.helper[ 0 ];
					};

					// Fire the start events of the sortable with our passed browser event,
					// and our own helper (so it doesn't create a new one)
					event.target = sortable.currentItem[ 0 ];
					sortable._mouseCapture( event, true );
					sortable._mouseStart( event, true, true );

					// Because the browser event is way off the new appended portlet,
					// modify necessary variables to reflect the changes
					sortable.offset.click.top = draggable.offset.click.top;
					sortable.offset.click.left = draggable.offset.click.left;
					sortable.offset.parent.left -= draggable.offset.parent.left -
						sortable.offset.parent.left;
					sortable.offset.parent.top -= draggable.offset.parent.top -
						sortable.offset.parent.top;

					draggable._trigger( "toSortable", event );

					// Inform draggable that the helper is in a valid drop zone,
					// used solely in the revert option to handle "valid/invalid".
					draggable.dropped = sortable.element;

					// Need to refreshPositions of all sortables in the case that
					// adding to one sortable changes the location of the other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					} );

					// Hack so receive/update callbacks work (mostly)
					draggable.currentItem = draggable.element;
					sortable.fromOutside = draggable;
				}

				if ( sortable.currentItem ) {
					sortable._mouseDrag( event );

					// Copy the sortable's position because the draggable's can potentially reflect
					// a relative position, while sortable is always absolute, which the dragged
					// element has now become. (#8809)
					ui.position = sortable.position;
				}
			} else {

				// If it doesn't intersect with the sortable, and it intersected before,
				// we fake the drag stop of the sortable, but make sure it doesn't remove
				// the helper by using cancelHelperRemoval.
				if ( sortable.isOver ) {

					sortable.isOver = 0;
					sortable.cancelHelperRemoval = true;

					// Calling sortable's mouseStop would trigger a revert,
					// so revert must be temporarily false until after mouseStop is called.
					sortable.options._revert = sortable.options.revert;
					sortable.options.revert = false;

					sortable._trigger( "out", event, sortable._uiHash( sortable ) );
					sortable._mouseStop( event, true );

					// Restore sortable behaviors that were modfied
					// when the draggable entered the sortable area (#9481)
					sortable.options.revert = sortable.options._revert;
					sortable.options.helper = sortable.options._helper;

					if ( sortable.placeholder ) {
						sortable.placeholder.remove();
					}

					// Restore and recalculate the draggable's offset considering the sortable
					// may have modified them in unexpected ways. (#8809, #10669)
					ui.helper.appendTo( draggable._parent );
					draggable._refreshOffsets( event );
					ui.position = draggable._generatePosition( event, true );

					draggable._trigger( "fromSortable", event );

					// Inform draggable that the helper is no longer in a valid drop zone
					draggable.dropped = false;

					// Need to refreshPositions of all sortables just in case removing
					// from one sortable changes the location of other sortables (#9675)
					$.each( draggable.sortables, function() {
						this.refreshPositions();
					} );
				}
			}
		} );
	}
} );

$.ui.plugin.add( "draggable", "cursor", {
	start: function( event, ui, instance ) {
		var t = $( "body" ),
			o = instance.options;

		if ( t.css( "cursor" ) ) {
			o._cursor = t.css( "cursor" );
		}
		t.css( "cursor", o.cursor );
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if ( o._cursor ) {
			$( "body" ).css( "cursor", o._cursor );
		}
	}
} );

$.ui.plugin.add( "draggable", "opacity", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;
		if ( t.css( "opacity" ) ) {
			o._opacity = t.css( "opacity" );
		}
		t.css( "opacity", o.opacity );
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if ( o._opacity ) {
			$( ui.helper ).css( "opacity", o._opacity );
		}
	}
} );

$.ui.plugin.add( "draggable", "scroll", {
	start: function( event, ui, i ) {
		if ( !i.scrollParentNotHidden ) {
			i.scrollParentNotHidden = i.helper.scrollParent( false );
		}

		if ( i.scrollParentNotHidden[ 0 ] !== i.document[ 0 ] &&
				i.scrollParentNotHidden[ 0 ].tagName !== "HTML" ) {
			i.overflowOffset = i.scrollParentNotHidden.offset();
		}
	},
	drag: function( event, ui, i  ) {

		var o = i.options,
			scrolled = false,
			scrollParent = i.scrollParentNotHidden[ 0 ],
			document = i.document[ 0 ];

		if ( scrollParent !== document && scrollParent.tagName !== "HTML" ) {
			if ( !o.axis || o.axis !== "x" ) {
				if ( ( i.overflowOffset.top + scrollParent.offsetHeight ) - event.pageY <
						o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;
				} else if ( event.pageY - i.overflowOffset.top < o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;
				}
			}

			if ( !o.axis || o.axis !== "y" ) {
				if ( ( i.overflowOffset.left + scrollParent.offsetWidth ) - event.pageX <
						o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;
				} else if ( event.pageX - i.overflowOffset.left < o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;
				}
			}

		} else {

			if ( !o.axis || o.axis !== "x" ) {
				if ( event.pageY - $( document ).scrollTop() < o.scrollSensitivity ) {
					scrolled = $( document ).scrollTop( $( document ).scrollTop() - o.scrollSpeed );
				} else if ( $( window ).height() - ( event.pageY - $( document ).scrollTop() ) <
						o.scrollSensitivity ) {
					scrolled = $( document ).scrollTop( $( document ).scrollTop() + o.scrollSpeed );
				}
			}

			if ( !o.axis || o.axis !== "y" ) {
				if ( event.pageX - $( document ).scrollLeft() < o.scrollSensitivity ) {
					scrolled = $( document ).scrollLeft(
						$( document ).scrollLeft() - o.scrollSpeed
					);
				} else if ( $( window ).width() - ( event.pageX - $( document ).scrollLeft() ) <
						o.scrollSensitivity ) {
					scrolled = $( document ).scrollLeft(
						$( document ).scrollLeft() + o.scrollSpeed
					);
				}
			}

		}

		if ( scrolled !== false && $.ui.ddmanager && !o.dropBehaviour ) {
			$.ui.ddmanager.prepareOffsets( i, event );
		}

	}
} );

$.ui.plugin.add( "draggable", "snap", {
	start: function( event, ui, i ) {

		var o = i.options;

		i.snapElements = [];

		$( o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap )
			.each( function() {
				var $t = $( this ),
					$o = $t.offset();
				if ( this !== i.element[ 0 ] ) {
					i.snapElements.push( {
						item: this,
						width: $t.outerWidth(), height: $t.outerHeight(),
						top: $o.top, left: $o.left
					} );
				}
			} );

	},
	drag: function( event, ui, inst ) {

		var ts, bs, ls, rs, l, r, t, b, i, first,
			o = inst.options,
			d = o.snapTolerance,
			x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
			y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

		for ( i = inst.snapElements.length - 1; i >= 0; i-- ) {

			l = inst.snapElements[ i ].left - inst.margins.left;
			r = l + inst.snapElements[ i ].width;
			t = inst.snapElements[ i ].top - inst.margins.top;
			b = t + inst.snapElements[ i ].height;

			if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d ||
					!$.contains( inst.snapElements[ i ].item.ownerDocument,
					inst.snapElements[ i ].item ) ) {
				if ( inst.snapElements[ i ].snapping ) {
					if ( inst.options.snap.release ) {
						inst.options.snap.release.call(
							inst.element,
							event,
							$.extend( inst._uiHash(), { snapItem: inst.snapElements[ i ].item } )
						);
					}
				}
				inst.snapElements[ i ].snapping = false;
				continue;
			}

			if ( o.snapMode !== "inner" ) {
				ts = Math.abs( t - y2 ) <= d;
				bs = Math.abs( b - y1 ) <= d;
				ls = Math.abs( l - x2 ) <= d;
				rs = Math.abs( r - x1 ) <= d;
				if ( ts ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: t - inst.helperProportions.height,
						left: 0
					} ).top;
				}
				if ( bs ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: b,
						left: 0
					} ).top;
				}
				if ( ls ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: l - inst.helperProportions.width
					} ).left;
				}
				if ( rs ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: r
					} ).left;
				}
			}

			first = ( ts || bs || ls || rs );

			if ( o.snapMode !== "outer" ) {
				ts = Math.abs( t - y1 ) <= d;
				bs = Math.abs( b - y2 ) <= d;
				ls = Math.abs( l - x1 ) <= d;
				rs = Math.abs( r - x2 ) <= d;
				if ( ts ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: t,
						left: 0
					} ).top;
				}
				if ( bs ) {
					ui.position.top = inst._convertPositionTo( "relative", {
						top: b - inst.helperProportions.height,
						left: 0
					} ).top;
				}
				if ( ls ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: l
					} ).left;
				}
				if ( rs ) {
					ui.position.left = inst._convertPositionTo( "relative", {
						top: 0,
						left: r - inst.helperProportions.width
					} ).left;
				}
			}

			if ( !inst.snapElements[ i ].snapping && ( ts || bs || ls || rs || first ) ) {
				if ( inst.options.snap.snap ) {
					inst.options.snap.snap.call(
						inst.element,
						event,
						$.extend( inst._uiHash(), {
							snapItem: inst.snapElements[ i ].item
						} ) );
				}
			}
			inst.snapElements[ i ].snapping = ( ts || bs || ls || rs || first );

		}

	}
} );

$.ui.plugin.add( "draggable", "stack", {
	start: function( event, ui, instance ) {
		var min,
			o = instance.options,
			group = $.makeArray( $( o.stack ) ).sort( function( a, b ) {
				return ( parseInt( $( a ).css( "zIndex" ), 10 ) || 0 ) -
					( parseInt( $( b ).css( "zIndex" ), 10 ) || 0 );
			} );

		if ( !group.length ) {
			return;
		}

		min = parseInt( $( group[ 0 ] ).css( "zIndex" ), 10 ) || 0;
		$( group ).each( function( i ) {
			$( this ).css( "zIndex", min + i );
		} );
		this.css( "zIndex", ( min + group.length ) );
	}
} );

$.ui.plugin.add( "draggable", "zIndex", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;

		if ( t.css( "zIndex" ) ) {
			o._zIndex = t.css( "zIndex" );
		}
		t.css( "zIndex", o.zIndex );
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;

		if ( o._zIndex ) {
			$( ui.helper ).css( "zIndex", o._zIndex );
		}
	}
} );

var widgetsDraggable = $.ui.draggable;


/*!
 * jQuery UI Resizable 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Resizable
//>>group: Interactions
//>>description: Enables resize functionality for any element.
//>>docs: http://api.jqueryui.com/resizable/
//>>demos: http://jqueryui.com/resizable/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/resizable.css
//>>css.theme: ../../themes/base/theme.css


$.widget( "ui.resizable", $.ui.mouse, {
	version: "1.13.2",
	widgetEventPrefix: "resize",
	options: {
		alsoResize: false,
		animate: false,
		animateDuration: "slow",
		animateEasing: "swing",
		aspectRatio: false,
		autoHide: false,
		classes: {
			"ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se"
		},
		containment: false,
		ghost: false,
		grid: false,
		handles: "e,s,se",
		helper: false,
		maxHeight: null,
		maxWidth: null,
		minHeight: 10,
		minWidth: 10,

		// See #7960
		zIndex: 90,

		// Callbacks
		resize: null,
		start: null,
		stop: null
	},

	_num: function( value ) {
		return parseFloat( value ) || 0;
	},

	_isNumber: function( value ) {
		return !isNaN( parseFloat( value ) );
	},

	_hasScroll: function( el, a ) {

		if ( $( el ).css( "overflow" ) === "hidden" ) {
			return false;
		}

		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;

		if ( el[ scroll ] > 0 ) {
			return true;
		}

		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		try {
			el[ scroll ] = 1;
			has = ( el[ scroll ] > 0 );
			el[ scroll ] = 0;
		} catch ( e ) {

			// `el` might be a string, then setting `scroll` will throw
			// an error in strict mode; ignore it.
		}
		return has;
	},

	_create: function() {

		var margins,
			o = this.options,
			that = this;
		this._addClass( "ui-resizable" );

		$.extend( this, {
			_aspectRatio: !!( o.aspectRatio ),
			aspectRatio: o.aspectRatio,
			originalElement: this.element,
			_proportionallyResizeElements: [],
			_helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
		} );

		// Wrap the element if it cannot hold child nodes
		if ( this.element[ 0 ].nodeName.match( /^(canvas|textarea|input|select|button|img)$/i ) ) {

			this.element.wrap(
				$( "<div class='ui-wrapper'></div>" ).css( {
					overflow: "hidden",
					position: this.element.css( "position" ),
					width: this.element.outerWidth(),
					height: this.element.outerHeight(),
					top: this.element.css( "top" ),
					left: this.element.css( "left" )
				} )
			);

			this.element = this.element.parent().data(
				"ui-resizable", this.element.resizable( "instance" )
			);

			this.elementIsWrapper = true;

			margins = {
				marginTop: this.originalElement.css( "marginTop" ),
				marginRight: this.originalElement.css( "marginRight" ),
				marginBottom: this.originalElement.css( "marginBottom" ),
				marginLeft: this.originalElement.css( "marginLeft" )
			};

			this.element.css( margins );
			this.originalElement.css( "margin", 0 );

			// support: Safari
			// Prevent Safari textarea resize
			this.originalResizeStyle = this.originalElement.css( "resize" );
			this.originalElement.css( "resize", "none" );

			this._proportionallyResizeElements.push( this.originalElement.css( {
				position: "static",
				zoom: 1,
				display: "block"
			} ) );

			// Support: IE9
			// avoid IE jump (hard set the margin)
			this.originalElement.css( margins );

			this._proportionallyResize();
		}

		this._setupHandles();

		if ( o.autoHide ) {
			$( this.element )
				.on( "mouseenter", function() {
					if ( o.disabled ) {
						return;
					}
					that._removeClass( "ui-resizable-autohide" );
					that._handles.show();
				} )
				.on( "mouseleave", function() {
					if ( o.disabled ) {
						return;
					}
					if ( !that.resizing ) {
						that._addClass( "ui-resizable-autohide" );
						that._handles.hide();
					}
				} );
		}

		this._mouseInit();
	},

	_destroy: function() {

		this._mouseDestroy();
		this._addedHandles.remove();

		var wrapper,
			_destroy = function( exp ) {
				$( exp )
					.removeData( "resizable" )
					.removeData( "ui-resizable" )
					.off( ".resizable" );
			};

		// TODO: Unwrap at same DOM position
		if ( this.elementIsWrapper ) {
			_destroy( this.element );
			wrapper = this.element;
			this.originalElement.css( {
				position: wrapper.css( "position" ),
				width: wrapper.outerWidth(),
				height: wrapper.outerHeight(),
				top: wrapper.css( "top" ),
				left: wrapper.css( "left" )
			} ).insertAfter( wrapper );
			wrapper.remove();
		}

		this.originalElement.css( "resize", this.originalResizeStyle );
		_destroy( this.originalElement );

		return this;
	},

	_setOption: function( key, value ) {
		this._super( key, value );

		switch ( key ) {
		case "handles":
			this._removeHandles();
			this._setupHandles();
			break;
		case "aspectRatio":
			this._aspectRatio = !!value;
			break;
		default:
			break;
		}
	},

	_setupHandles: function() {
		var o = this.options, handle, i, n, hname, axis, that = this;
		this.handles = o.handles ||
			( !$( ".ui-resizable-handle", this.element ).length ?
				"e,s,se" : {
					n: ".ui-resizable-n",
					e: ".ui-resizable-e",
					s: ".ui-resizable-s",
					w: ".ui-resizable-w",
					se: ".ui-resizable-se",
					sw: ".ui-resizable-sw",
					ne: ".ui-resizable-ne",
					nw: ".ui-resizable-nw"
				} );

		this._handles = $();
		this._addedHandles = $();
		if ( this.handles.constructor === String ) {

			if ( this.handles === "all" ) {
				this.handles = "n,e,s,w,se,sw,ne,nw";
			}

			n = this.handles.split( "," );
			this.handles = {};

			for ( i = 0; i < n.length; i++ ) {

				handle = String.prototype.trim.call( n[ i ] );
				hname = "ui-resizable-" + handle;
				axis = $( "<div>" );
				this._addClass( axis, "ui-resizable-handle " + hname );

				axis.css( { zIndex: o.zIndex } );

				this.handles[ handle ] = ".ui-resizable-" + handle;
				if ( !this.element.children( this.handles[ handle ] ).length ) {
					this.element.append( axis );
					this._addedHandles = this._addedHandles.add( axis );
				}
			}

		}

		this._renderAxis = function( target ) {

			var i, axis, padPos, padWrapper;

			target = target || this.element;

			for ( i in this.handles ) {

				if ( this.handles[ i ].constructor === String ) {
					this.handles[ i ] = this.element.children( this.handles[ i ] ).first().show();
				} else if ( this.handles[ i ].jquery || this.handles[ i ].nodeType ) {
					this.handles[ i ] = $( this.handles[ i ] );
					this._on( this.handles[ i ], { "mousedown": that._mouseDown } );
				}

				if ( this.elementIsWrapper &&
						this.originalElement[ 0 ]
							.nodeName
							.match( /^(textarea|input|select|button)$/i ) ) {
					axis = $( this.handles[ i ], this.element );

					padWrapper = /sw|ne|nw|se|n|s/.test( i ) ?
						axis.outerHeight() :
						axis.outerWidth();

					padPos = [ "padding",
						/ne|nw|n/.test( i ) ? "Top" :
						/se|sw|s/.test( i ) ? "Bottom" :
						/^e$/.test( i ) ? "Right" : "Left" ].join( "" );

					target.css( padPos, padWrapper );

					this._proportionallyResize();
				}

				this._handles = this._handles.add( this.handles[ i ] );
			}
		};

		// TODO: make renderAxis a prototype function
		this._renderAxis( this.element );

		this._handles = this._handles.add( this.element.find( ".ui-resizable-handle" ) );
		this._handles.disableSelection();

		this._handles.on( "mouseover", function() {
			if ( !that.resizing ) {
				if ( this.className ) {
					axis = this.className.match( /ui-resizable-(se|sw|ne|nw|n|e|s|w)/i );
				}
				that.axis = axis && axis[ 1 ] ? axis[ 1 ] : "se";
			}
		} );

		if ( o.autoHide ) {
			this._handles.hide();
			this._addClass( "ui-resizable-autohide" );
		}
	},

	_removeHandles: function() {
		this._addedHandles.remove();
	},

	_mouseCapture: function( event ) {
		var i, handle,
			capture = false;

		for ( i in this.handles ) {
			handle = $( this.handles[ i ] )[ 0 ];
			if ( handle === event.target || $.contains( handle, event.target ) ) {
				capture = true;
			}
		}

		return !this.options.disabled && capture;
	},

	_mouseStart: function( event ) {

		var curleft, curtop, cursor,
			o = this.options,
			el = this.element;

		this.resizing = true;

		this._renderProxy();

		curleft = this._num( this.helper.css( "left" ) );
		curtop = this._num( this.helper.css( "top" ) );

		if ( o.containment ) {
			curleft += $( o.containment ).scrollLeft() || 0;
			curtop += $( o.containment ).scrollTop() || 0;
		}

		this.offset = this.helper.offset();
		this.position = { left: curleft, top: curtop };

		this.size = this._helper ? {
				width: this.helper.width(),
				height: this.helper.height()
			} : {
				width: el.width(),
				height: el.height()
			};

		this.originalSize = this._helper ? {
				width: el.outerWidth(),
				height: el.outerHeight()
			} : {
				width: el.width(),
				height: el.height()
			};

		this.sizeDiff = {
			width: el.outerWidth() - el.width(),
			height: el.outerHeight() - el.height()
		};

		this.originalPosition = { left: curleft, top: curtop };
		this.originalMousePosition = { left: event.pageX, top: event.pageY };

		this.aspectRatio = ( typeof o.aspectRatio === "number" ) ?
			o.aspectRatio :
			( ( this.originalSize.width / this.originalSize.height ) || 1 );

		cursor = $( ".ui-resizable-" + this.axis ).css( "cursor" );
		$( "body" ).css( "cursor", cursor === "auto" ? this.axis + "-resize" : cursor );

		this._addClass( "ui-resizable-resizing" );
		this._propagate( "start", event );
		return true;
	},

	_mouseDrag: function( event ) {

		var data, props,
			smp = this.originalMousePosition,
			a = this.axis,
			dx = ( event.pageX - smp.left ) || 0,
			dy = ( event.pageY - smp.top ) || 0,
			trigger = this._change[ a ];

		this._updatePrevProperties();

		if ( !trigger ) {
			return false;
		}

		data = trigger.apply( this, [ event, dx, dy ] );

		this._updateVirtualBoundaries( event.shiftKey );
		if ( this._aspectRatio || event.shiftKey ) {
			data = this._updateRatio( data, event );
		}

		data = this._respectSize( data, event );

		this._updateCache( data );

		this._propagate( "resize", event );

		props = this._applyChanges();

		if ( !this._helper && this._proportionallyResizeElements.length ) {
			this._proportionallyResize();
		}

		if ( !$.isEmptyObject( props ) ) {
			this._updatePrevProperties();
			this._trigger( "resize", event, this.ui() );
			this._applyChanges();
		}

		return false;
	},

	_mouseStop: function( event ) {

		this.resizing = false;
		var pr, ista, soffseth, soffsetw, s, left, top,
			o = this.options, that = this;

		if ( this._helper ) {

			pr = this._proportionallyResizeElements;
			ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName );
			soffseth = ista && this._hasScroll( pr[ 0 ], "left" ) ? 0 : that.sizeDiff.height;
			soffsetw = ista ? 0 : that.sizeDiff.width;

			s = {
				width: ( that.helper.width()  - soffsetw ),
				height: ( that.helper.height() - soffseth )
			};
			left = ( parseFloat( that.element.css( "left" ) ) +
				( that.position.left - that.originalPosition.left ) ) || null;
			top = ( parseFloat( that.element.css( "top" ) ) +
				( that.position.top - that.originalPosition.top ) ) || null;

			if ( !o.animate ) {
				this.element.css( $.extend( s, { top: top, left: left } ) );
			}

			that.helper.height( that.size.height );
			that.helper.width( that.size.width );

			if ( this._helper && !o.animate ) {
				this._proportionallyResize();
			}
		}

		$( "body" ).css( "cursor", "auto" );

		this._removeClass( "ui-resizable-resizing" );

		this._propagate( "stop", event );

		if ( this._helper ) {
			this.helper.remove();
		}

		return false;

	},

	_updatePrevProperties: function() {
		this.prevPosition = {
			top: this.position.top,
			left: this.position.left
		};
		this.prevSize = {
			width: this.size.width,
			height: this.size.height
		};
	},

	_applyChanges: function() {
		var props = {};

		if ( this.position.top !== this.prevPosition.top ) {
			props.top = this.position.top + "px";
		}
		if ( this.position.left !== this.prevPosition.left ) {
			props.left = this.position.left + "px";
		}
		if ( this.size.width !== this.prevSize.width ) {
			props.width = this.size.width + "px";
		}
		if ( this.size.height !== this.prevSize.height ) {
			props.height = this.size.height + "px";
		}

		this.helper.css( props );

		return props;
	},

	_updateVirtualBoundaries: function( forceAspectRatio ) {
		var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
			o = this.options;

		b = {
			minWidth: this._isNumber( o.minWidth ) ? o.minWidth : 0,
			maxWidth: this._isNumber( o.maxWidth ) ? o.maxWidth : Infinity,
			minHeight: this._isNumber( o.minHeight ) ? o.minHeight : 0,
			maxHeight: this._isNumber( o.maxHeight ) ? o.maxHeight : Infinity
		};

		if ( this._aspectRatio || forceAspectRatio ) {
			pMinWidth = b.minHeight * this.aspectRatio;
			pMinHeight = b.minWidth / this.aspectRatio;
			pMaxWidth = b.maxHeight * this.aspectRatio;
			pMaxHeight = b.maxWidth / this.aspectRatio;

			if ( pMinWidth > b.minWidth ) {
				b.minWidth = pMinWidth;
			}
			if ( pMinHeight > b.minHeight ) {
				b.minHeight = pMinHeight;
			}
			if ( pMaxWidth < b.maxWidth ) {
				b.maxWidth = pMaxWidth;
			}
			if ( pMaxHeight < b.maxHeight ) {
				b.maxHeight = pMaxHeight;
			}
		}
		this._vBoundaries = b;
	},

	_updateCache: function( data ) {
		this.offset = this.helper.offset();
		if ( this._isNumber( data.left ) ) {
			this.position.left = data.left;
		}
		if ( this._isNumber( data.top ) ) {
			this.position.top = data.top;
		}
		if ( this._isNumber( data.height ) ) {
			this.size.height = data.height;
		}
		if ( this._isNumber( data.width ) ) {
			this.size.width = data.width;
		}
	},

	_updateRatio: function( data ) {

		var cpos = this.position,
			csize = this.size,
			a = this.axis;

		if ( this._isNumber( data.height ) ) {
			data.width = ( data.height * this.aspectRatio );
		} else if ( this._isNumber( data.width ) ) {
			data.height = ( data.width / this.aspectRatio );
		}

		if ( a === "sw" ) {
			data.left = cpos.left + ( csize.width - data.width );
			data.top = null;
		}
		if ( a === "nw" ) {
			data.top = cpos.top + ( csize.height - data.height );
			data.left = cpos.left + ( csize.width - data.width );
		}

		return data;
	},

	_respectSize: function( data ) {

		var o = this._vBoundaries,
			a = this.axis,
			ismaxw = this._isNumber( data.width ) && o.maxWidth && ( o.maxWidth < data.width ),
			ismaxh = this._isNumber( data.height ) && o.maxHeight && ( o.maxHeight < data.height ),
			isminw = this._isNumber( data.width ) && o.minWidth && ( o.minWidth > data.width ),
			isminh = this._isNumber( data.height ) && o.minHeight && ( o.minHeight > data.height ),
			dw = this.originalPosition.left + this.originalSize.width,
			dh = this.originalPosition.top + this.originalSize.height,
			cw = /sw|nw|w/.test( a ), ch = /nw|ne|n/.test( a );
		if ( isminw ) {
			data.width = o.minWidth;
		}
		if ( isminh ) {
			data.height = o.minHeight;
		}
		if ( ismaxw ) {
			data.width = o.maxWidth;
		}
		if ( ismaxh ) {
			data.height = o.maxHeight;
		}

		if ( isminw && cw ) {
			data.left = dw - o.minWidth;
		}
		if ( ismaxw && cw ) {
			data.left = dw - o.maxWidth;
		}
		if ( isminh && ch ) {
			data.top = dh - o.minHeight;
		}
		if ( ismaxh && ch ) {
			data.top = dh - o.maxHeight;
		}

		// Fixing jump error on top/left - bug #2330
		if ( !data.width && !data.height && !data.left && data.top ) {
			data.top = null;
		} else if ( !data.width && !data.height && !data.top && data.left ) {
			data.left = null;
		}

		return data;
	},

	_getPaddingPlusBorderDimensions: function( element ) {
		var i = 0,
			widths = [],
			borders = [
				element.css( "borderTopWidth" ),
				element.css( "borderRightWidth" ),
				element.css( "borderBottomWidth" ),
				element.css( "borderLeftWidth" )
			],
			paddings = [
				element.css( "paddingTop" ),
				element.css( "paddingRight" ),
				element.css( "paddingBottom" ),
				element.css( "paddingLeft" )
			];

		for ( ; i < 4; i++ ) {
			widths[ i ] = ( parseFloat( borders[ i ] ) || 0 );
			widths[ i ] += ( parseFloat( paddings[ i ] ) || 0 );
		}

		return {
			height: widths[ 0 ] + widths[ 2 ],
			width: widths[ 1 ] + widths[ 3 ]
		};
	},

	_proportionallyResize: function() {

		if ( !this._proportionallyResizeElements.length ) {
			return;
		}

		var prel,
			i = 0,
			element = this.helper || this.element;

		for ( ; i < this._proportionallyResizeElements.length; i++ ) {

			prel = this._proportionallyResizeElements[ i ];

			// TODO: Seems like a bug to cache this.outerDimensions
			// considering that we are in a loop.
			if ( !this.outerDimensions ) {
				this.outerDimensions = this._getPaddingPlusBorderDimensions( prel );
			}

			prel.css( {
				height: ( element.height() - this.outerDimensions.height ) || 0,
				width: ( element.width() - this.outerDimensions.width ) || 0
			} );

		}

	},

	_renderProxy: function() {

		var el = this.element, o = this.options;
		this.elementOffset = el.offset();

		if ( this._helper ) {

			this.helper = this.helper || $( "<div></div>" ).css( { overflow: "hidden" } );

			this._addClass( this.helper, this._helper );
			this.helper.css( {
				width: this.element.outerWidth(),
				height: this.element.outerHeight(),
				position: "absolute",
				left: this.elementOffset.left + "px",
				top: this.elementOffset.top + "px",
				zIndex: ++o.zIndex //TODO: Don't modify option
			} );

			this.helper
				.appendTo( "body" )
				.disableSelection();

		} else {
			this.helper = this.element;
		}

	},

	_change: {
		e: function( event, dx ) {
			return { width: this.originalSize.width + dx };
		},
		w: function( event, dx ) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { left: sp.left + dx, width: cs.width - dx };
		},
		n: function( event, dx, dy ) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { top: sp.top + dy, height: cs.height - dy };
		},
		s: function( event, dx, dy ) {
			return { height: this.originalSize.height + dy };
		},
		se: function( event, dx, dy ) {
			return $.extend( this._change.s.apply( this, arguments ),
				this._change.e.apply( this, [ event, dx, dy ] ) );
		},
		sw: function( event, dx, dy ) {
			return $.extend( this._change.s.apply( this, arguments ),
				this._change.w.apply( this, [ event, dx, dy ] ) );
		},
		ne: function( event, dx, dy ) {
			return $.extend( this._change.n.apply( this, arguments ),
				this._change.e.apply( this, [ event, dx, dy ] ) );
		},
		nw: function( event, dx, dy ) {
			return $.extend( this._change.n.apply( this, arguments ),
				this._change.w.apply( this, [ event, dx, dy ] ) );
		}
	},

	_propagate: function( n, event ) {
		$.ui.plugin.call( this, n, [ event, this.ui() ] );
		if ( n !== "resize" ) {
			this._trigger( n, event, this.ui() );
		}
	},

	plugins: {},

	ui: function() {
		return {
			originalElement: this.originalElement,
			element: this.element,
			helper: this.helper,
			position: this.position,
			size: this.size,
			originalSize: this.originalSize,
			originalPosition: this.originalPosition
		};
	}

} );

/*
 * Resizable Extensions
 */

$.ui.plugin.add( "resizable", "animate", {

	stop: function( event ) {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			pr = that._proportionallyResizeElements,
			ista = pr.length && ( /textarea/i ).test( pr[ 0 ].nodeName ),
			soffseth = ista && that._hasScroll( pr[ 0 ], "left" ) ? 0 : that.sizeDiff.height,
			soffsetw = ista ? 0 : that.sizeDiff.width,
			style = {
				width: ( that.size.width - soffsetw ),
				height: ( that.size.height - soffseth )
			},
			left = ( parseFloat( that.element.css( "left" ) ) +
				( that.position.left - that.originalPosition.left ) ) || null,
			top = ( parseFloat( that.element.css( "top" ) ) +
				( that.position.top - that.originalPosition.top ) ) || null;

		that.element.animate(
			$.extend( style, top && left ? { top: top, left: left } : {} ), {
				duration: o.animateDuration,
				easing: o.animateEasing,
				step: function() {

					var data = {
						width: parseFloat( that.element.css( "width" ) ),
						height: parseFloat( that.element.css( "height" ) ),
						top: parseFloat( that.element.css( "top" ) ),
						left: parseFloat( that.element.css( "left" ) )
					};

					if ( pr && pr.length ) {
						$( pr[ 0 ] ).css( { width: data.width, height: data.height } );
					}

					// Propagating resize, and updating values for each animation step
					that._updateCache( data );
					that._propagate( "resize", event );

				}
			}
		);
	}

} );

$.ui.plugin.add( "resizable", "containment", {

	start: function() {
		var element, p, co, ch, cw, width, height,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			el = that.element,
			oc = o.containment,
			ce = ( oc instanceof $ ) ?
				oc.get( 0 ) :
				( /parent/.test( oc ) ) ? el.parent().get( 0 ) : oc;

		if ( !ce ) {
			return;
		}

		that.containerElement = $( ce );

		if ( /document/.test( oc ) || oc === document ) {
			that.containerOffset = {
				left: 0,
				top: 0
			};
			that.containerPosition = {
				left: 0,
				top: 0
			};

			that.parentData = {
				element: $( document ),
				left: 0,
				top: 0,
				width: $( document ).width(),
				height: $( document ).height() || document.body.parentNode.scrollHeight
			};
		} else {
			element = $( ce );
			p = [];
			$( [ "Top", "Right", "Left", "Bottom" ] ).each( function( i, name ) {
				p[ i ] = that._num( element.css( "padding" + name ) );
			} );

			that.containerOffset = element.offset();
			that.containerPosition = element.position();
			that.containerSize = {
				height: ( element.innerHeight() - p[ 3 ] ),
				width: ( element.innerWidth() - p[ 1 ] )
			};

			co = that.containerOffset;
			ch = that.containerSize.height;
			cw = that.containerSize.width;
			width = ( that._hasScroll( ce, "left" ) ? ce.scrollWidth : cw );
			height = ( that._hasScroll( ce ) ? ce.scrollHeight : ch );

			that.parentData = {
				element: ce,
				left: co.left,
				top: co.top,
				width: width,
				height: height
			};
		}
	},

	resize: function( event ) {
		var woset, hoset, isParent, isOffsetRelative,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cp = that.position,
			pRatio = that._aspectRatio || event.shiftKey,
			cop = {
				top: 0,
				left: 0
			},
			ce = that.containerElement,
			continueResize = true;

		if ( ce[ 0 ] !== document && ( /static/ ).test( ce.css( "position" ) ) ) {
			cop = co;
		}

		if ( cp.left < ( that._helper ? co.left : 0 ) ) {
			that.size.width = that.size.width +
				( that._helper ?
					( that.position.left - co.left ) :
					( that.position.left - cop.left ) );

			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
			that.position.left = o.helper ? co.left : 0;
		}

		if ( cp.top < ( that._helper ? co.top : 0 ) ) {
			that.size.height = that.size.height +
				( that._helper ?
					( that.position.top - co.top ) :
					that.position.top );

			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
			that.position.top = that._helper ? co.top : 0;
		}

		isParent = that.containerElement.get( 0 ) === that.element.parent().get( 0 );
		isOffsetRelative = /relative|absolute/.test( that.containerElement.css( "position" ) );

		if ( isParent && isOffsetRelative ) {
			that.offset.left = that.parentData.left + that.position.left;
			that.offset.top = that.parentData.top + that.position.top;
		} else {
			that.offset.left = that.element.offset().left;
			that.offset.top = that.element.offset().top;
		}

		woset = Math.abs( that.sizeDiff.width +
			( that._helper ?
				that.offset.left - cop.left :
				( that.offset.left - co.left ) ) );

		hoset = Math.abs( that.sizeDiff.height +
			( that._helper ?
				that.offset.top - cop.top :
				( that.offset.top - co.top ) ) );

		if ( woset + that.size.width >= that.parentData.width ) {
			that.size.width = that.parentData.width - woset;
			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
		}

		if ( hoset + that.size.height >= that.parentData.height ) {
			that.size.height = that.parentData.height - hoset;
			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
		}

		if ( !continueResize ) {
			that.position.left = that.prevPosition.left;
			that.position.top = that.prevPosition.top;
			that.size.width = that.prevSize.width;
			that.size.height = that.prevSize.height;
		}
	},

	stop: function() {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cop = that.containerPosition,
			ce = that.containerElement,
			helper = $( that.helper ),
			ho = helper.offset(),
			w = helper.outerWidth() - that.sizeDiff.width,
			h = helper.outerHeight() - that.sizeDiff.height;

		if ( that._helper && !o.animate && ( /relative/ ).test( ce.css( "position" ) ) ) {
			$( this ).css( {
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			} );
		}

		if ( that._helper && !o.animate && ( /static/ ).test( ce.css( "position" ) ) ) {
			$( this ).css( {
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			} );
		}
	}
} );

$.ui.plugin.add( "resizable", "alsoResize", {

	start: function() {
		var that = $( this ).resizable( "instance" ),
			o = that.options;

		$( o.alsoResize ).each( function() {
			var el = $( this );
			el.data( "ui-resizable-alsoresize", {
				width: parseFloat( el.width() ), height: parseFloat( el.height() ),
				left: parseFloat( el.css( "left" ) ), top: parseFloat( el.css( "top" ) )
			} );
		} );
	},

	resize: function( event, ui ) {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			os = that.originalSize,
			op = that.originalPosition,
			delta = {
				height: ( that.size.height - os.height ) || 0,
				width: ( that.size.width - os.width ) || 0,
				top: ( that.position.top - op.top ) || 0,
				left: ( that.position.left - op.left ) || 0
			};

			$( o.alsoResize ).each( function() {
				var el = $( this ), start = $( this ).data( "ui-resizable-alsoresize" ), style = {},
					css = el.parents( ui.originalElement[ 0 ] ).length ?
							[ "width", "height" ] :
							[ "width", "height", "top", "left" ];

				$.each( css, function( i, prop ) {
					var sum = ( start[ prop ] || 0 ) + ( delta[ prop ] || 0 );
					if ( sum && sum >= 0 ) {
						style[ prop ] = sum || null;
					}
				} );

				el.css( style );
			} );
	},

	stop: function() {
		$( this ).removeData( "ui-resizable-alsoresize" );
	}
} );

$.ui.plugin.add( "resizable", "ghost", {

	start: function() {

		var that = $( this ).resizable( "instance" ), cs = that.size;

		that.ghost = that.originalElement.clone();
		that.ghost.css( {
			opacity: 0.25,
			display: "block",
			position: "relative",
			height: cs.height,
			width: cs.width,
			margin: 0,
			left: 0,
			top: 0
		} );

		that._addClass( that.ghost, "ui-resizable-ghost" );

		// DEPRECATED
		// TODO: remove after 1.12
		if ( $.uiBackCompat !== false && typeof that.options.ghost === "string" ) {

			// Ghost option
			that.ghost.addClass( this.options.ghost );
		}

		that.ghost.appendTo( that.helper );

	},

	resize: function() {
		var that = $( this ).resizable( "instance" );
		if ( that.ghost ) {
			that.ghost.css( {
				position: "relative",
				height: that.size.height,
				width: that.size.width
			} );
		}
	},

	stop: function() {
		var that = $( this ).resizable( "instance" );
		if ( that.ghost && that.helper ) {
			that.helper.get( 0 ).removeChild( that.ghost.get( 0 ) );
		}
	}

} );

$.ui.plugin.add( "resizable", "grid", {

	resize: function() {
		var outerDimensions,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			cs = that.size,
			os = that.originalSize,
			op = that.originalPosition,
			a = that.axis,
			grid = typeof o.grid === "number" ? [ o.grid, o.grid ] : o.grid,
			gridX = ( grid[ 0 ] || 1 ),
			gridY = ( grid[ 1 ] || 1 ),
			ox = Math.round( ( cs.width - os.width ) / gridX ) * gridX,
			oy = Math.round( ( cs.height - os.height ) / gridY ) * gridY,
			newWidth = os.width + ox,
			newHeight = os.height + oy,
			isMaxWidth = o.maxWidth && ( o.maxWidth < newWidth ),
			isMaxHeight = o.maxHeight && ( o.maxHeight < newHeight ),
			isMinWidth = o.minWidth && ( o.minWidth > newWidth ),
			isMinHeight = o.minHeight && ( o.minHeight > newHeight );

		o.grid = grid;

		if ( isMinWidth ) {
			newWidth += gridX;
		}
		if ( isMinHeight ) {
			newHeight += gridY;
		}
		if ( isMaxWidth ) {
			newWidth -= gridX;
		}
		if ( isMaxHeight ) {
			newHeight -= gridY;
		}

		if ( /^(se|s|e)$/.test( a ) ) {
			that.size.width = newWidth;
			that.size.height = newHeight;
		} else if ( /^(ne)$/.test( a ) ) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.top = op.top - oy;
		} else if ( /^(sw)$/.test( a ) ) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.left = op.left - ox;
		} else {
			if ( newHeight - gridY <= 0 || newWidth - gridX <= 0 ) {
				outerDimensions = that._getPaddingPlusBorderDimensions( this );
			}

			if ( newHeight - gridY > 0 ) {
				that.size.height = newHeight;
				that.position.top = op.top - oy;
			} else {
				newHeight = gridY - outerDimensions.height;
				that.size.height = newHeight;
				that.position.top = op.top + os.height - newHeight;
			}
			if ( newWidth - gridX > 0 ) {
				that.size.width = newWidth;
				that.position.left = op.left - ox;
			} else {
				newWidth = gridX - outerDimensions.width;
				that.size.width = newWidth;
				that.position.left = op.left + os.width - newWidth;
			}
		}
	}

} );

var widgetsResizable = $.ui.resizable;


/*!
 * jQuery UI Dialog 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Dialog
//>>group: Widgets
//>>description: Displays customizable dialog windows.
//>>docs: http://api.jqueryui.com/dialog/
//>>demos: http://jqueryui.com/dialog/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/dialog.css
//>>css.theme: ../../themes/base/theme.css


$.widget( "ui.dialog", {
	version: "1.13.2",
	options: {
		appendTo: "body",
		autoOpen: true,
		buttons: [],
		classes: {
			"ui-dialog": "ui-corner-all",
			"ui-dialog-titlebar": "ui-corner-all"
		},
		closeOnEscape: true,
		closeText: "Close",
		draggable: true,
		hide: null,
		height: "auto",
		maxHeight: null,
		maxWidth: null,
		minHeight: 150,
		minWidth: 150,
		modal: false,
		position: {
			my: "center",
			at: "center",
			of: window,
			collision: "fit",

			// Ensure the titlebar is always visible
			using: function( pos ) {
				var topOffset = $( this ).css( pos ).offset().top;
				if ( topOffset < 0 ) {
					$( this ).css( "top", pos.top - topOffset );
				}
			}
		},
		resizable: true,
		show: null,
		title: null,
		width: 300,

		// Callbacks
		beforeClose: null,
		close: null,
		drag: null,
		dragStart: null,
		dragStop: null,
		focus: null,
		open: null,
		resize: null,
		resizeStart: null,
		resizeStop: null
	},

	sizeRelatedOptions: {
		buttons: true,
		height: true,
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true,
		width: true
	},

	resizableRelatedOptions: {
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true
	},

	_create: function() {
		this.originalCss = {
			display: this.element[ 0 ].style.display,
			width: this.element[ 0 ].style.width,
			minHeight: this.element[ 0 ].style.minHeight,
			maxHeight: this.element[ 0 ].style.maxHeight,
			height: this.element[ 0 ].style.height
		};
		this.originalPosition = {
			parent: this.element.parent(),
			index: this.element.parent().children().index( this.element )
		};
		this.originalTitle = this.element.attr( "title" );
		if ( this.options.title == null && this.originalTitle != null ) {
			this.options.title = this.originalTitle;
		}

		// Dialogs can't be disabled
		if ( this.options.disabled ) {
			this.options.disabled = false;
		}

		this._createWrapper();

		this.element
			.show()
			.removeAttr( "title" )
			.appendTo( this.uiDialog );

		this._addClass( "ui-dialog-content", "ui-widget-content" );

		this._createTitlebar();
		this._createButtonPane();

		if ( this.options.draggable && $.fn.draggable ) {
			this._makeDraggable();
		}
		if ( this.options.resizable && $.fn.resizable ) {
			this._makeResizable();
		}

		this._isOpen = false;

		this._trackFocus();
	},

	_init: function() {
		if ( this.options.autoOpen ) {
			this.open();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;
		if ( element && ( element.jquery || element.nodeType ) ) {
			return $( element );
		}
		return this.document.find( element || "body" ).eq( 0 );
	},

	_destroy: function() {
		var next,
			originalPosition = this.originalPosition;

		this._untrackInstance();
		this._destroyOverlay();

		this.element
			.removeUniqueId()
			.css( this.originalCss )

			// Without detaching first, the following becomes really slow
			.detach();

		this.uiDialog.remove();

		if ( this.originalTitle ) {
			this.element.attr( "title", this.originalTitle );
		}

		next = originalPosition.parent.children().eq( originalPosition.index );

		// Don't try to place the dialog next to itself (#8613)
		if ( next.length && next[ 0 ] !== this.element[ 0 ] ) {
			next.before( this.element );
		} else {
			originalPosition.parent.append( this.element );
		}
	},

	widget: function() {
		return this.uiDialog;
	},

	disable: $.noop,
	enable: $.noop,

	close: function( event ) {
		var that = this;

		if ( !this._isOpen || this._trigger( "beforeClose", event ) === false ) {
			return;
		}

		this._isOpen = false;
		this._focusedElement = null;
		this._destroyOverlay();
		this._untrackInstance();

		if ( !this.opener.filter( ":focusable" ).trigger( "focus" ).length ) {

			// Hiding a focused element doesn't trigger blur in WebKit
			// so in case we have nothing to focus on, explicitly blur the active element
			// https://bugs.webkit.org/show_bug.cgi?id=47182
			$.ui.safeBlur( $.ui.safeActiveElement( this.document[ 0 ] ) );
		}

		this._hide( this.uiDialog, this.options.hide, function() {
			that._trigger( "close", event );
		} );
	},

	isOpen: function() {
		return this._isOpen;
	},

	moveToTop: function() {
		this._moveToTop();
	},

	_moveToTop: function( event, silent ) {
		var moved = false,
			zIndices = this.uiDialog.siblings( ".ui-front:visible" ).map( function() {
				return +$( this ).css( "z-index" );
			} ).get(),
			zIndexMax = Math.max.apply( null, zIndices );

		if ( zIndexMax >= +this.uiDialog.css( "z-index" ) ) {
			this.uiDialog.css( "z-index", zIndexMax + 1 );
			moved = true;
		}

		if ( moved && !silent ) {
			this._trigger( "focus", event );
		}
		return moved;
	},

	open: function() {
		var that = this;
		if ( this._isOpen ) {
			if ( this._moveToTop() ) {
				this._focusTabbable();
			}
			return;
		}

		this._isOpen = true;
		this.opener = $( $.ui.safeActiveElement( this.document[ 0 ] ) );

		this._size();
		this._position();
		this._createOverlay();
		this._moveToTop( null, true );

		// Ensure the overlay is moved to the top with the dialog, but only when
		// opening. The overlay shouldn't move after the dialog is open so that
		// modeless dialogs opened after the modal dialog stack properly.
		if ( this.overlay ) {
			this.overlay.css( "z-index", this.uiDialog.css( "z-index" ) - 1 );
		}

		this._show( this.uiDialog, this.options.show, function() {
			that._focusTabbable();
			that._trigger( "focus" );
		} );

		// Track the dialog immediately upon opening in case a focus event
		// somehow occurs outside of the dialog before an element inside the
		// dialog is focused (#10152)
		this._makeFocusTarget();

		this._trigger( "open" );
	},

	_focusTabbable: function() {

		// Set focus to the first match:
		// 1. An element that was focused previously
		// 2. First element inside the dialog matching [autofocus]
		// 3. Tabbable element inside the content element
		// 4. Tabbable element inside the buttonpane
		// 5. The close button
		// 6. The dialog itself
		var hasFocus = this._focusedElement;
		if ( !hasFocus ) {
			hasFocus = this.element.find( "[autofocus]" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.element.find( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialogButtonPane.find( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialogTitlebarClose.filter( ":tabbable" );
		}
		if ( !hasFocus.length ) {
			hasFocus = this.uiDialog;
		}
		hasFocus.eq( 0 ).trigger( "focus" );
	},

	_restoreTabbableFocus: function() {
		var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),
			isActive = this.uiDialog[ 0 ] === activeElement ||
				$.contains( this.uiDialog[ 0 ], activeElement );
		if ( !isActive ) {
			this._focusTabbable();
		}
	},

	_keepFocus: function( event ) {
		event.preventDefault();
		this._restoreTabbableFocus();

		// support: IE
		// IE <= 8 doesn't prevent moving focus even with event.preventDefault()
		// so we check again later
		this._delay( this._restoreTabbableFocus );
	},

	_createWrapper: function() {
		this.uiDialog = $( "<div>" )
			.hide()
			.attr( {

				// Setting tabIndex makes the div focusable
				tabIndex: -1,
				role: "dialog"
			} )
			.appendTo( this._appendTo() );

		this._addClass( this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front" );
		this._on( this.uiDialog, {
			keydown: function( event ) {
				if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
						event.keyCode === $.ui.keyCode.ESCAPE ) {
					event.preventDefault();
					this.close( event );
					return;
				}

				// Prevent tabbing out of dialogs
				if ( event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented() ) {
					return;
				}
				var tabbables = this.uiDialog.find( ":tabbable" ),
					first = tabbables.first(),
					last = tabbables.last();

				if ( ( event.target === last[ 0 ] || event.target === this.uiDialog[ 0 ] ) &&
						!event.shiftKey ) {
					this._delay( function() {
						first.trigger( "focus" );
					} );
					event.preventDefault();
				} else if ( ( event.target === first[ 0 ] ||
						event.target === this.uiDialog[ 0 ] ) && event.shiftKey ) {
					this._delay( function() {
						last.trigger( "focus" );
					} );
					event.preventDefault();
				}
			},
			mousedown: function( event ) {
				if ( this._moveToTop( event ) ) {
					this._focusTabbable();
				}
			}
		} );

		// We assume that any existing aria-describedby attribute means
		// that the dialog content is marked up properly
		// otherwise we brute force the content as the description
		if ( !this.element.find( "[aria-describedby]" ).length ) {
			this.uiDialog.attr( {
				"aria-describedby": this.element.uniqueId().attr( "id" )
			} );
		}
	},

	_createTitlebar: function() {
		var uiDialogTitle;

		this.uiDialogTitlebar = $( "<div>" );
		this._addClass( this.uiDialogTitlebar,
			"ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix" );
		this._on( this.uiDialogTitlebar, {
			mousedown: function( event ) {

				// Don't prevent click on close button (#8838)
				// Focusing a dialog that is partially scrolled out of view
				// causes the browser to scroll it into view, preventing the click event
				if ( !$( event.target ).closest( ".ui-dialog-titlebar-close" ) ) {

					// Dialog isn't getting focus when dragging (#8063)
					this.uiDialog.trigger( "focus" );
				}
			}
		} );

		// Support: IE
		// Use type="button" to prevent enter keypresses in textboxes from closing the
		// dialog in IE (#9312)
		this.uiDialogTitlebarClose = $( "<button type='button'></button>" )
			.button( {
				label: $( "<a>" ).text( this.options.closeText ).html(),
				icon: "ui-icon-closethick",
				showLabel: false
			} )
			.appendTo( this.uiDialogTitlebar );

		this._addClass( this.uiDialogTitlebarClose, "ui-dialog-titlebar-close" );
		this._on( this.uiDialogTitlebarClose, {
			click: function( event ) {
				event.preventDefault();
				this.close( event );
			}
		} );

		uiDialogTitle = $( "<span>" ).uniqueId().prependTo( this.uiDialogTitlebar );
		this._addClass( uiDialogTitle, "ui-dialog-title" );
		this._title( uiDialogTitle );

		this.uiDialogTitlebar.prependTo( this.uiDialog );

		this.uiDialog.attr( {
			"aria-labelledby": uiDialogTitle.attr( "id" )
		} );
	},

	_title: function( title ) {
		if ( this.options.title ) {
			title.text( this.options.title );
		} else {
			title.html( "&#160;" );
		}
	},

	_createButtonPane: function() {
		this.uiDialogButtonPane = $( "<div>" );
		this._addClass( this.uiDialogButtonPane, "ui-dialog-buttonpane",
			"ui-widget-content ui-helper-clearfix" );

		this.uiButtonSet = $( "<div>" )
			.appendTo( this.uiDialogButtonPane );
		this._addClass( this.uiButtonSet, "ui-dialog-buttonset" );

		this._createButtons();
	},

	_createButtons: function() {
		var that = this,
			buttons = this.options.buttons;

		// If we already have a button pane, remove it
		this.uiDialogButtonPane.remove();
		this.uiButtonSet.empty();

		if ( $.isEmptyObject( buttons ) || ( Array.isArray( buttons ) && !buttons.length ) ) {
			this._removeClass( this.uiDialog, "ui-dialog-buttons" );
			return;
		}

		$.each( buttons, function( name, props ) {
			var click, buttonOptions;
			props = typeof props === "function" ?
				{ click: props, text: name } :
				props;

			// Default to a non-submitting button
			props = $.extend( { type: "button" }, props );

			// Change the context for the click callback to be the main element
			click = props.click;
			buttonOptions = {
				icon: props.icon,
				iconPosition: props.iconPosition,
				showLabel: props.showLabel,

				// Deprecated options
				icons: props.icons,
				text: props.text
			};

			delete props.click;
			delete props.icon;
			delete props.iconPosition;
			delete props.showLabel;

			// Deprecated options
			delete props.icons;
			if ( typeof props.text === "boolean" ) {
				delete props.text;
			}

			$( "<button></button>", props )
				.button( buttonOptions )
				.appendTo( that.uiButtonSet )
				.on( "click", function() {
					click.apply( that.element[ 0 ], arguments );
				} );
		} );
		this._addClass( this.uiDialog, "ui-dialog-buttons" );
		this.uiDialogButtonPane.appendTo( this.uiDialog );
	},

	_makeDraggable: function() {
		var that = this,
			options = this.options;

		function filteredUi( ui ) {
			return {
				position: ui.position,
				offset: ui.offset
			};
		}

		this.uiDialog.draggable( {
			cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
			handle: ".ui-dialog-titlebar",
			containment: "document",
			start: function( event, ui ) {
				that._addClass( $( this ), "ui-dialog-dragging" );
				that._blockFrames();
				that._trigger( "dragStart", event, filteredUi( ui ) );
			},
			drag: function( event, ui ) {
				that._trigger( "drag", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var left = ui.offset.left - that.document.scrollLeft(),
					top = ui.offset.top - that.document.scrollTop();

				options.position = {
					my: "left top",
					at: "left" + ( left >= 0 ? "+" : "" ) + left + " " +
						"top" + ( top >= 0 ? "+" : "" ) + top,
					of: that.window
				};
				that._removeClass( $( this ), "ui-dialog-dragging" );
				that._unblockFrames();
				that._trigger( "dragStop", event, filteredUi( ui ) );
			}
		} );
	},

	_makeResizable: function() {
		var that = this,
			options = this.options,
			handles = options.resizable,

			// .ui-resizable has position: relative defined in the stylesheet
			// but dialogs have to use absolute or fixed positioning
			position = this.uiDialog.css( "position" ),
			resizeHandles = typeof handles === "string" ?
				handles :
				"n,e,s,w,se,sw,ne,nw";

		function filteredUi( ui ) {
			return {
				originalPosition: ui.originalPosition,
				originalSize: ui.originalSize,
				position: ui.position,
				size: ui.size
			};
		}

		this.uiDialog.resizable( {
			cancel: ".ui-dialog-content",
			containment: "document",
			alsoResize: this.element,
			maxWidth: options.maxWidth,
			maxHeight: options.maxHeight,
			minWidth: options.minWidth,
			minHeight: this._minHeight(),
			handles: resizeHandles,
			start: function( event, ui ) {
				that._addClass( $( this ), "ui-dialog-resizing" );
				that._blockFrames();
				that._trigger( "resizeStart", event, filteredUi( ui ) );
			},
			resize: function( event, ui ) {
				that._trigger( "resize", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var offset = that.uiDialog.offset(),
					left = offset.left - that.document.scrollLeft(),
					top = offset.top - that.document.scrollTop();

				options.height = that.uiDialog.height();
				options.width = that.uiDialog.width();
				options.position = {
					my: "left top",
					at: "left" + ( left >= 0 ? "+" : "" ) + left + " " +
						"top" + ( top >= 0 ? "+" : "" ) + top,
					of: that.window
				};
				that._removeClass( $( this ), "ui-dialog-resizing" );
				that._unblockFrames();
				that._trigger( "resizeStop", event, filteredUi( ui ) );
			}
		} )
			.css( "position", position );
	},

	_trackFocus: function() {
		this._on( this.widget(), {
			focusin: function( event ) {
				this._makeFocusTarget();
				this._focusedElement = $( event.target );
			}
		} );
	},

	_makeFocusTarget: function() {
		this._untrackInstance();
		this._trackingInstances().unshift( this );
	},

	_untrackInstance: function() {
		var instances = this._trackingInstances(),
			exists = $.inArray( this, instances );
		if ( exists !== -1 ) {
			instances.splice( exists, 1 );
		}
	},

	_trackingInstances: function() {
		var instances = this.document.data( "ui-dialog-instances" );
		if ( !instances ) {
			instances = [];
			this.document.data( "ui-dialog-instances", instances );
		}
		return instances;
	},

	_minHeight: function() {
		var options = this.options;

		return options.height === "auto" ?
			options.minHeight :
			Math.min( options.minHeight, options.height );
	},

	_position: function() {

		// Need to show the dialog to get the actual offset in the position plugin
		var isVisible = this.uiDialog.is( ":visible" );
		if ( !isVisible ) {
			this.uiDialog.show();
		}
		this.uiDialog.position( this.options.position );
		if ( !isVisible ) {
			this.uiDialog.hide();
		}
	},

	_setOptions: function( options ) {
		var that = this,
			resize = false,
			resizableOptions = {};

		$.each( options, function( key, value ) {
			that._setOption( key, value );

			if ( key in that.sizeRelatedOptions ) {
				resize = true;
			}
			if ( key in that.resizableRelatedOptions ) {
				resizableOptions[ key ] = value;
			}
		} );

		if ( resize ) {
			this._size();
			this._position();
		}
		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
			this.uiDialog.resizable( "option", resizableOptions );
		}
	},

	_setOption: function( key, value ) {
		var isDraggable, isResizable,
			uiDialog = this.uiDialog;

		if ( key === "disabled" ) {
			return;
		}

		this._super( key, value );

		if ( key === "appendTo" ) {
			this.uiDialog.appendTo( this._appendTo() );
		}

		if ( key === "buttons" ) {
			this._createButtons();
		}

		if ( key === "closeText" ) {
			this.uiDialogTitlebarClose.button( {

				// Ensure that we always pass a string
				label: $( "<a>" ).text( "" + this.options.closeText ).html()
			} );
		}

		if ( key === "draggable" ) {
			isDraggable = uiDialog.is( ":data(ui-draggable)" );
			if ( isDraggable && !value ) {
				uiDialog.draggable( "destroy" );
			}

			if ( !isDraggable && value ) {
				this._makeDraggable();
			}
		}

		if ( key === "position" ) {
			this._position();
		}

		if ( key === "resizable" ) {

			// currently resizable, becoming non-resizable
			isResizable = uiDialog.is( ":data(ui-resizable)" );
			if ( isResizable && !value ) {
				uiDialog.resizable( "destroy" );
			}

			// Currently resizable, changing handles
			if ( isResizable && typeof value === "string" ) {
				uiDialog.resizable( "option", "handles", value );
			}

			// Currently non-resizable, becoming resizable
			if ( !isResizable && value !== false ) {
				this._makeResizable();
			}
		}

		if ( key === "title" ) {
			this._title( this.uiDialogTitlebar.find( ".ui-dialog-title" ) );
		}
	},

	_size: function() {

		// If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
		// divs will both have width and height set, so we need to reset them
		var nonContentHeight, minContentHeight, maxContentHeight,
			options = this.options;

		// Reset content sizing
		this.element.show().css( {
			width: "auto",
			minHeight: 0,
			maxHeight: "none",
			height: 0
		} );

		if ( options.minWidth > options.width ) {
			options.width = options.minWidth;
		}

		// Reset wrapper sizing
		// determine the height of all the non-content elements
		nonContentHeight = this.uiDialog.css( {
			height: "auto",
			width: options.width
		} )
			.outerHeight();
		minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
		maxContentHeight = typeof options.maxHeight === "number" ?
			Math.max( 0, options.maxHeight - nonContentHeight ) :
			"none";

		if ( options.height === "auto" ) {
			this.element.css( {
				minHeight: minContentHeight,
				maxHeight: maxContentHeight,
				height: "auto"
			} );
		} else {
			this.element.height( Math.max( 0, options.height - nonContentHeight ) );
		}

		if ( this.uiDialog.is( ":data(ui-resizable)" ) ) {
			this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
		}
	},

	_blockFrames: function() {
		this.iframeBlocks = this.document.find( "iframe" ).map( function() {
			var iframe = $( this );

			return $( "<div>" )
				.css( {
					position: "absolute",
					width: iframe.outerWidth(),
					height: iframe.outerHeight()
				} )
				.appendTo( iframe.parent() )
				.offset( iframe.offset() )[ 0 ];
		} );
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_allowInteraction: function( event ) {
		if ( $( event.target ).closest( ".ui-dialog" ).length ) {
			return true;
		}

		// TODO: Remove hack when datepicker implements
		// the .ui-front logic (#8989)
		return !!$( event.target ).closest( ".ui-datepicker" ).length;
	},

	_createOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		var jqMinor = $.fn.jquery.substring( 0, 4 );

		// We use a delay in case the overlay is created from an
		// event that we're going to be cancelling (#2804)
		var isOpening = true;
		this._delay( function() {
			isOpening = false;
		} );

		if ( !this.document.data( "ui-dialog-overlays" ) ) {

			// Prevent use of anchors and inputs
			// This doesn't use `_on()` because it is a shared event handler
			// across all open modal dialogs.
			this.document.on( "focusin.ui-dialog", function( event ) {
				if ( isOpening ) {
					return;
				}

				var instance = this._trackingInstances()[ 0 ];
				if ( !instance._allowInteraction( event ) ) {
					event.preventDefault();
					instance._focusTabbable();

					// Support: jQuery >=3.4 <3.6 only
					// Focus re-triggering in jQuery 3.4/3.5 makes the original element
					// have its focus event propagated last, breaking the re-targeting.
					// Trigger focus in a delay in addition if needed to avoid the issue
					// See https://github.com/jquery/jquery/issues/4382
					if ( jqMinor === "3.4." || jqMinor === "3.5." ) {
						instance._delay( instance._restoreTabbableFocus );
					}
				}
			}.bind( this ) );
		}

		this.overlay = $( "<div>" )
			.appendTo( this._appendTo() );

		this._addClass( this.overlay, null, "ui-widget-overlay ui-front" );
		this._on( this.overlay, {
			mousedown: "_keepFocus"
		} );
		this.document.data( "ui-dialog-overlays",
			( this.document.data( "ui-dialog-overlays" ) || 0 ) + 1 );
	},

	_destroyOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		if ( this.overlay ) {
			var overlays = this.document.data( "ui-dialog-overlays" ) - 1;

			if ( !overlays ) {
				this.document.off( "focusin.ui-dialog" );
				this.document.removeData( "ui-dialog-overlays" );
			} else {
				this.document.data( "ui-dialog-overlays", overlays );
			}

			this.overlay.remove();
			this.overlay = null;
		}
	}
} );

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for dialogClass option
	$.widget( "ui.dialog", $.ui.dialog, {
		options: {
			dialogClass: ""
		},
		_createWrapper: function() {
			this._super();
			this.uiDialog.addClass( this.options.dialogClass );
		},
		_setOption: function( key, value ) {
			if ( key === "dialogClass" ) {
				this.uiDialog
					.removeClass( this.options.dialogClass )
					.addClass( value );
			}
			this._superApply( arguments );
		}
	} );
}

var widgetsDialog = $.ui.dialog;


/*!
 * jQuery UI Droppable 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Droppable
//>>group: Interactions
//>>description: Enables drop targets for draggable elements.
//>>docs: http://api.jqueryui.com/droppable/
//>>demos: http://jqueryui.com/droppable/


$.widget( "ui.droppable", {
	version: "1.13.2",
	widgetEventPrefix: "drop",
	options: {
		accept: "*",
		addClasses: true,
		greedy: false,
		scope: "default",
		tolerance: "intersect",

		// Callbacks
		activate: null,
		deactivate: null,
		drop: null,
		out: null,
		over: null
	},
	_create: function() {

		var proportions,
			o = this.options,
			accept = o.accept;

		this.isover = false;
		this.isout = true;

		this.accept = typeof accept === "function" ? accept : function( d ) {
			return d.is( accept );
		};

		this.proportions = function( /* valueToWrite */ ) {
			if ( arguments.length ) {

				// Store the droppable's proportions
				proportions = arguments[ 0 ];
			} else {

				// Retrieve or derive the droppable's proportions
				return proportions ?
					proportions :
					proportions = {
						width: this.element[ 0 ].offsetWidth,
						height: this.element[ 0 ].offsetHeight
					};
			}
		};

		this._addToManager( o.scope );

		if ( o.addClasses ) {
			this._addClass( "ui-droppable" );
		}

	},

	_addToManager: function( scope ) {

		// Add the reference and positions to the manager
		$.ui.ddmanager.droppables[ scope ] = $.ui.ddmanager.droppables[ scope ] || [];
		$.ui.ddmanager.droppables[ scope ].push( this );
	},

	_splice: function( drop ) {
		var i = 0;
		for ( ; i < drop.length; i++ ) {
			if ( drop[ i ] === this ) {
				drop.splice( i, 1 );
			}
		}
	},

	_destroy: function() {
		var drop = $.ui.ddmanager.droppables[ this.options.scope ];

		this._splice( drop );
	},

	_setOption: function( key, value ) {

		if ( key === "accept" ) {
			this.accept = typeof value === "function" ? value : function( d ) {
				return d.is( value );
			};
		} else if ( key === "scope" ) {
			var drop = $.ui.ddmanager.droppables[ this.options.scope ];

			this._splice( drop );
			this._addToManager( value );
		}

		this._super( key, value );
	},

	_activate: function( event ) {
		var draggable = $.ui.ddmanager.current;

		this._addActiveClass();
		if ( draggable ) {
			this._trigger( "activate", event, this.ui( draggable ) );
		}
	},

	_deactivate: function( event ) {
		var draggable = $.ui.ddmanager.current;

		this._removeActiveClass();
		if ( draggable ) {
			this._trigger( "deactivate", event, this.ui( draggable ) );
		}
	},

	_over: function( event ) {

		var draggable = $.ui.ddmanager.current;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem ||
				draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return;
		}

		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||
				draggable.element ) ) ) {
			this._addHoverClass();
			this._trigger( "over", event, this.ui( draggable ) );
		}

	},

	_out: function( event ) {

		var draggable = $.ui.ddmanager.current;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem ||
				draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return;
		}

		if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||
				draggable.element ) ) ) {
			this._removeHoverClass();
			this._trigger( "out", event, this.ui( draggable ) );
		}

	},

	_drop: function( event, custom ) {

		var draggable = custom || $.ui.ddmanager.current,
			childrenIntersection = false;

		// Bail if draggable and droppable are same element
		if ( !draggable || ( draggable.currentItem ||
				draggable.element )[ 0 ] === this.element[ 0 ] ) {
			return false;
		}

		this.element
			.find( ":data(ui-droppable)" )
			.not( ".ui-draggable-dragging" )
			.each( function() {
				var inst = $( this ).droppable( "instance" );
				if (
					inst.options.greedy &&
					!inst.options.disabled &&
					inst.options.scope === draggable.options.scope &&
					inst.accept.call(
						inst.element[ 0 ], ( draggable.currentItem || draggable.element )
					) &&
					$.ui.intersect(
						draggable,
						$.extend( inst, { offset: inst.element.offset() } ),
						inst.options.tolerance, event
					)
				) {
					childrenIntersection = true;
					return false;
				}
			} );
		if ( childrenIntersection ) {
			return false;
		}

		if ( this.accept.call( this.element[ 0 ],
				( draggable.currentItem || draggable.element ) ) ) {
			this._removeActiveClass();
			this._removeHoverClass();

			this._trigger( "drop", event, this.ui( draggable ) );
			return this.element;
		}

		return false;

	},

	ui: function( c ) {
		return {
			draggable: ( c.currentItem || c.element ),
			helper: c.helper,
			position: c.position,
			offset: c.positionAbs
		};
	},

	// Extension points just to make backcompat sane and avoid duplicating logic
	// TODO: Remove in 1.14 along with call to it below
	_addHoverClass: function() {
		this._addClass( "ui-droppable-hover" );
	},

	_removeHoverClass: function() {
		this._removeClass( "ui-droppable-hover" );
	},

	_addActiveClass: function() {
		this._addClass( "ui-droppable-active" );
	},

	_removeActiveClass: function() {
		this._removeClass( "ui-droppable-active" );
	}
} );

$.ui.intersect = ( function() {
	function isOverAxis( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	}

	return function( draggable, droppable, toleranceMode, event ) {

		if ( !droppable.offset ) {
			return false;
		}

		var x1 = ( draggable.positionAbs ||
				draggable.position.absolute ).left + draggable.margins.left,
			y1 = ( draggable.positionAbs ||
				draggable.position.absolute ).top + draggable.margins.top,
			x2 = x1 + draggable.helperProportions.width,
			y2 = y1 + draggable.helperProportions.height,
			l = droppable.offset.left,
			t = droppable.offset.top,
			r = l + droppable.proportions().width,
			b = t + droppable.proportions().height;

		switch ( toleranceMode ) {
		case "fit":
			return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );
		case "intersect":
			return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half
				x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half
				t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half
				y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half
		case "pointer":
			return isOverAxis( event.pageY, t, droppable.proportions().height ) &&
				isOverAxis( event.pageX, l, droppable.proportions().width );
		case "touch":
			return (
				( y1 >= t && y1 <= b ) || // Top edge touching
				( y2 >= t && y2 <= b ) || // Bottom edge touching
				( y1 < t && y2 > b ) // Surrounded vertically
			) && (
				( x1 >= l && x1 <= r ) || // Left edge touching
				( x2 >= l && x2 <= r ) || // Right edge touching
				( x1 < l && x2 > r ) // Surrounded horizontally
			);
		default:
			return false;
		}
	};
} )();

/*
	This manager tracks offsets of draggables and droppables
*/
$.ui.ddmanager = {
	current: null,
	droppables: { "default": [] },
	prepareOffsets: function( t, event ) {

		var i, j,
			m = $.ui.ddmanager.droppables[ t.options.scope ] || [],
			type = event ? event.type : null, // workaround for #2317
			list = ( t.currentItem || t.element ).find( ":data(ui-droppable)" ).addBack();

		droppablesLoop: for ( i = 0; i < m.length; i++ ) {

			// No disabled and non-accepted
			if ( m[ i ].options.disabled || ( t && !m[ i ].accept.call( m[ i ].element[ 0 ],
					( t.currentItem || t.element ) ) ) ) {
				continue;
			}

			// Filter out elements in the current dragged item
			for ( j = 0; j < list.length; j++ ) {
				if ( list[ j ] === m[ i ].element[ 0 ] ) {
					m[ i ].proportions().height = 0;
					continue droppablesLoop;
				}
			}

			m[ i ].visible = m[ i ].element.css( "display" ) !== "none";
			if ( !m[ i ].visible ) {
				continue;
			}

			// Activate the droppable if used directly from draggables
			if ( type === "mousedown" ) {
				m[ i ]._activate.call( m[ i ], event );
			}

			m[ i ].offset = m[ i ].element.offset();
			m[ i ].proportions( {
				width: m[ i ].element[ 0 ].offsetWidth,
				height: m[ i ].element[ 0 ].offsetHeight
			} );

		}

	},
	drop: function( draggable, event ) {

		var dropped = false;

		// Create a copy of the droppables in case the list changes during the drop (#9116)
		$.each( ( $.ui.ddmanager.droppables[ draggable.options.scope ] || [] ).slice(), function() {

			if ( !this.options ) {
				return;
			}
			if ( !this.options.disabled && this.visible &&
					$.ui.intersect( draggable, this, this.options.tolerance, event ) ) {
				dropped = this._drop.call( this, event ) || dropped;
			}

			if ( !this.options.disabled && this.visible && this.accept.call( this.element[ 0 ],
					( draggable.currentItem || draggable.element ) ) ) {
				this.isout = true;
				this.isover = false;
				this._deactivate.call( this, event );
			}

		} );
		return dropped;

	},
	dragStart: function( draggable, event ) {

		// Listen for scrolling so that if the dragging causes scrolling the position of the
		// droppables can be recalculated (see #5003)
		draggable.element.parentsUntil( "body" ).on( "scroll.droppable", function() {
			if ( !draggable.options.refreshPositions ) {
				$.ui.ddmanager.prepareOffsets( draggable, event );
			}
		} );
	},
	drag: function( draggable, event ) {

		// If you have a highly dynamic page, you might try this option. It renders positions
		// every time you move the mouse.
		if ( draggable.options.refreshPositions ) {
			$.ui.ddmanager.prepareOffsets( draggable, event );
		}

		// Run through all droppables and check their positions based on specific tolerance options
		$.each( $.ui.ddmanager.droppables[ draggable.options.scope ] || [], function() {

			if ( this.options.disabled || this.greedyChild || !this.visible ) {
				return;
			}

			var parentInstance, scope, parent,
				intersects = $.ui.intersect( draggable, this, this.options.tolerance, event ),
				c = !intersects && this.isover ?
					"isout" :
					( intersects && !this.isover ? "isover" : null );
			if ( !c ) {
				return;
			}

			if ( this.options.greedy ) {

				// find droppable parents with same scope
				scope = this.options.scope;
				parent = this.element.parents( ":data(ui-droppable)" ).filter( function() {
					return $( this ).droppable( "instance" ).options.scope === scope;
				} );

				if ( parent.length ) {
					parentInstance = $( parent[ 0 ] ).droppable( "instance" );
					parentInstance.greedyChild = ( c === "isover" );
				}
			}

			// We just moved into a greedy child
			if ( parentInstance && c === "isover" ) {
				parentInstance.isover = false;
				parentInstance.isout = true;
				parentInstance._out.call( parentInstance, event );
			}

			this[ c ] = true;
			this[ c === "isout" ? "isover" : "isout" ] = false;
			this[ c === "isover" ? "_over" : "_out" ].call( this, event );

			// We just moved out of a greedy child
			if ( parentInstance && c === "isout" ) {
				parentInstance.isout = false;
				parentInstance.isover = true;
				parentInstance._over.call( parentInstance, event );
			}
		} );

	},
	dragStop: function( draggable, event ) {
		draggable.element.parentsUntil( "body" ).off( "scroll.droppable" );

		// Call prepareOffsets one final time since IE does not fire return scroll events when
		// overflow was caused by drag (see #5003)
		if ( !draggable.options.refreshPositions ) {
			$.ui.ddmanager.prepareOffsets( draggable, event );
		}
	}
};

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for activeClass and hoverClass options
	$.widget( "ui.droppable", $.ui.droppable, {
		options: {
			hoverClass: false,
			activeClass: false
		},
		_addActiveClass: function() {
			this._super();
			if ( this.options.activeClass ) {
				this.element.addClass( this.options.activeClass );
			}
		},
		_removeActiveClass: function() {
			this._super();
			if ( this.options.activeClass ) {
				this.element.removeClass( this.options.activeClass );
			}
		},
		_addHoverClass: function() {
			this._super();
			if ( this.options.hoverClass ) {
				this.element.addClass( this.options.hoverClass );
			}
		},
		_removeHoverClass: function() {
			this._super();
			if ( this.options.hoverClass ) {
				this.element.removeClass( this.options.hoverClass );
			}
		}
	} );
}

var widgetsDroppable = $.ui.droppable;


/*!
 * jQuery UI Progressbar 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Progressbar
//>>group: Widgets
/* eslint-disable max-len */
//>>description: Displays a status indicator for loading state, standard percentage, and other progress indicators.
/* eslint-enable max-len */
//>>docs: http://api.jqueryui.com/progressbar/
//>>demos: http://jqueryui.com/progressbar/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/progressbar.css
//>>css.theme: ../../themes/base/theme.css


var widgetsProgressbar = $.widget( "ui.progressbar", {
	version: "1.13.2",
	options: {
		classes: {
			"ui-progressbar": "ui-corner-all",
			"ui-progressbar-value": "ui-corner-left",
			"ui-progressbar-complete": "ui-corner-right"
		},
		max: 100,
		value: 0,

		change: null,
		complete: null
	},

	min: 0,

	_create: function() {

		// Constrain initial value
		this.oldValue = this.options.value = this._constrainedValue();

		this.element.attr( {

			// Only set static values; aria-valuenow and aria-valuemax are
			// set inside _refreshValue()
			role: "progressbar",
			"aria-valuemin": this.min
		} );
		this._addClass( "ui-progressbar", "ui-widget ui-widget-content" );

		this.valueDiv = $( "<div>" ).appendTo( this.element );
		this._addClass( this.valueDiv, "ui-progressbar-value", "ui-widget-header" );
		this._refreshValue();
	},

	_destroy: function() {
		this.element.removeAttr( "role aria-valuemin aria-valuemax aria-valuenow" );

		this.valueDiv.remove();
	},

	value: function( newValue ) {
		if ( newValue === undefined ) {
			return this.options.value;
		}

		this.options.value = this._constrainedValue( newValue );
		this._refreshValue();
	},

	_constrainedValue: function( newValue ) {
		if ( newValue === undefined ) {
			newValue = this.options.value;
		}

		this.indeterminate = newValue === false;

		// Sanitize value
		if ( typeof newValue !== "number" ) {
			newValue = 0;
		}

		return this.indeterminate ? false :
			Math.min( this.options.max, Math.max( this.min, newValue ) );
	},

	_setOptions: function( options ) {

		// Ensure "value" option is set after other values (like max)
		var value = options.value;
		delete options.value;

		this._super( options );

		this.options.value = this._constrainedValue( value );
		this._refreshValue();
	},

	_setOption: function( key, value ) {
		if ( key === "max" ) {

			// Don't allow a max less than min
			value = Math.max( this.min, value );
		}
		this._super( key, value );
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.element.attr( "aria-disabled", value );
		this._toggleClass( null, "ui-state-disabled", !!value );
	},

	_percentage: function() {
		return this.indeterminate ?
			100 :
			100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
	},

	_refreshValue: function() {
		var value = this.options.value,
			percentage = this._percentage();

		this.valueDiv
			.toggle( this.indeterminate || value > this.min )
			.width( percentage.toFixed( 0 ) + "%" );

		this
			._toggleClass( this.valueDiv, "ui-progressbar-complete", null,
				value === this.options.max )
			._toggleClass( "ui-progressbar-indeterminate", null, this.indeterminate );

		if ( this.indeterminate ) {
			this.element.removeAttr( "aria-valuenow" );
			if ( !this.overlayDiv ) {
				this.overlayDiv = $( "<div>" ).appendTo( this.valueDiv );
				this._addClass( this.overlayDiv, "ui-progressbar-overlay" );
			}
		} else {
			this.element.attr( {
				"aria-valuemax": this.options.max,
				"aria-valuenow": value
			} );
			if ( this.overlayDiv ) {
				this.overlayDiv.remove();
				this.overlayDiv = null;
			}
		}

		if ( this.oldValue !== value ) {
			this.oldValue = value;
			this._trigger( "change" );
		}
		if ( value === this.options.max ) {
			this._trigger( "complete" );
		}
	}
} );


/*!
 * jQuery UI Selectable 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Selectable
//>>group: Interactions
//>>description: Allows groups of elements to be selected with the mouse.
//>>docs: http://api.jqueryui.com/selectable/
//>>demos: http://jqueryui.com/selectable/
//>>css.structure: ../../themes/base/selectable.css


var widgetsSelectable = $.widget( "ui.selectable", $.ui.mouse, {
	version: "1.13.2",
	options: {
		appendTo: "body",
		autoRefresh: true,
		distance: 0,
		filter: "*",
		tolerance: "touch",

		// Callbacks
		selected: null,
		selecting: null,
		start: null,
		stop: null,
		unselected: null,
		unselecting: null
	},
	_create: function() {
		var that = this;

		this._addClass( "ui-selectable" );

		this.dragged = false;

		// Cache selectee children based on filter
		this.refresh = function() {
			that.elementPos = $( that.element[ 0 ] ).offset();
			that.selectees = $( that.options.filter, that.element[ 0 ] );
			that._addClass( that.selectees, "ui-selectee" );
			that.selectees.each( function() {
				var $this = $( this ),
					selecteeOffset = $this.offset(),
					pos = {
						left: selecteeOffset.left - that.elementPos.left,
						top: selecteeOffset.top - that.elementPos.top
					};
				$.data( this, "selectable-item", {
					element: this,
					$element: $this,
					left: pos.left,
					top: pos.top,
					right: pos.left + $this.outerWidth(),
					bottom: pos.top + $this.outerHeight(),
					startselected: false,
					selected: $this.hasClass( "ui-selected" ),
					selecting: $this.hasClass( "ui-selecting" ),
					unselecting: $this.hasClass( "ui-unselecting" )
				} );
			} );
		};
		this.refresh();

		this._mouseInit();

		this.helper = $( "<div>" );
		this._addClass( this.helper, "ui-selectable-helper" );
	},

	_destroy: function() {
		this.selectees.removeData( "selectable-item" );
		this._mouseDestroy();
	},

	_mouseStart: function( event ) {
		var that = this,
			options = this.options;

		this.opos = [ event.pageX, event.pageY ];
		this.elementPos = $( this.element[ 0 ] ).offset();

		if ( this.options.disabled ) {
			return;
		}

		this.selectees = $( options.filter, this.element[ 0 ] );

		this._trigger( "start", event );

		$( options.appendTo ).append( this.helper );

		// position helper (lasso)
		this.helper.css( {
			"left": event.pageX,
			"top": event.pageY,
			"width": 0,
			"height": 0
		} );

		if ( options.autoRefresh ) {
			this.refresh();
		}

		this.selectees.filter( ".ui-selected" ).each( function() {
			var selectee = $.data( this, "selectable-item" );
			selectee.startselected = true;
			if ( !event.metaKey && !event.ctrlKey ) {
				that._removeClass( selectee.$element, "ui-selected" );
				selectee.selected = false;
				that._addClass( selectee.$element, "ui-unselecting" );
				selectee.unselecting = true;

				// selectable UNSELECTING callback
				that._trigger( "unselecting", event, {
					unselecting: selectee.element
				} );
			}
		} );

		$( event.target ).parents().addBack().each( function() {
			var doSelect,
				selectee = $.data( this, "selectable-item" );
			if ( selectee ) {
				doSelect = ( !event.metaKey && !event.ctrlKey ) ||
					!selectee.$element.hasClass( "ui-selected" );
				that._removeClass( selectee.$element, doSelect ? "ui-unselecting" : "ui-selected" )
					._addClass( selectee.$element, doSelect ? "ui-selecting" : "ui-unselecting" );
				selectee.unselecting = !doSelect;
				selectee.selecting = doSelect;
				selectee.selected = doSelect;

				// selectable (UN)SELECTING callback
				if ( doSelect ) {
					that._trigger( "selecting", event, {
						selecting: selectee.element
					} );
				} else {
					that._trigger( "unselecting", event, {
						unselecting: selectee.element
					} );
				}
				return false;
			}
		} );

	},

	_mouseDrag: function( event ) {

		this.dragged = true;

		if ( this.options.disabled ) {
			return;
		}

		var tmp,
			that = this,
			options = this.options,
			x1 = this.opos[ 0 ],
			y1 = this.opos[ 1 ],
			x2 = event.pageX,
			y2 = event.pageY;

		if ( x1 > x2 ) {
			tmp = x2; x2 = x1; x1 = tmp;
		}
		if ( y1 > y2 ) {
			tmp = y2; y2 = y1; y1 = tmp;
		}
		this.helper.css( { left: x1, top: y1, width: x2 - x1, height: y2 - y1 } );

		this.selectees.each( function() {
			var selectee = $.data( this, "selectable-item" ),
				hit = false,
				offset = {};

			//prevent helper from being selected if appendTo: selectable
			if ( !selectee || selectee.element === that.element[ 0 ] ) {
				return;
			}

			offset.left   = selectee.left   + that.elementPos.left;
			offset.right  = selectee.right  + that.elementPos.left;
			offset.top    = selectee.top    + that.elementPos.top;
			offset.bottom = selectee.bottom + that.elementPos.top;

			if ( options.tolerance === "touch" ) {
				hit = ( !( offset.left > x2 || offset.right < x1 || offset.top > y2 ||
                    offset.bottom < y1 ) );
			} else if ( options.tolerance === "fit" ) {
				hit = ( offset.left > x1 && offset.right < x2 && offset.top > y1 &&
                    offset.bottom < y2 );
			}

			if ( hit ) {

				// SELECT
				if ( selectee.selected ) {
					that._removeClass( selectee.$element, "ui-selected" );
					selectee.selected = false;
				}
				if ( selectee.unselecting ) {
					that._removeClass( selectee.$element, "ui-unselecting" );
					selectee.unselecting = false;
				}
				if ( !selectee.selecting ) {
					that._addClass( selectee.$element, "ui-selecting" );
					selectee.selecting = true;

					// selectable SELECTING callback
					that._trigger( "selecting", event, {
						selecting: selectee.element
					} );
				}
			} else {

				// UNSELECT
				if ( selectee.selecting ) {
					if ( ( event.metaKey || event.ctrlKey ) && selectee.startselected ) {
						that._removeClass( selectee.$element, "ui-selecting" );
						selectee.selecting = false;
						that._addClass( selectee.$element, "ui-selected" );
						selectee.selected = true;
					} else {
						that._removeClass( selectee.$element, "ui-selecting" );
						selectee.selecting = false;
						if ( selectee.startselected ) {
							that._addClass( selectee.$element, "ui-unselecting" );
							selectee.unselecting = true;
						}

						// selectable UNSELECTING callback
						that._trigger( "unselecting", event, {
							unselecting: selectee.element
						} );
					}
				}
				if ( selectee.selected ) {
					if ( !event.metaKey && !event.ctrlKey && !selectee.startselected ) {
						that._removeClass( selectee.$element, "ui-selected" );
						selectee.selected = false;

						that._addClass( selectee.$element, "ui-unselecting" );
						selectee.unselecting = true;

						// selectable UNSELECTING callback
						that._trigger( "unselecting", event, {
							unselecting: selectee.element
						} );
					}
				}
			}
		} );

		return false;
	},

	_mouseStop: function( event ) {
		var that = this;

		this.dragged = false;

		$( ".ui-unselecting", this.element[ 0 ] ).each( function() {
			var selectee = $.data( this, "selectable-item" );
			that._removeClass( selectee.$element, "ui-unselecting" );
			selectee.unselecting = false;
			selectee.startselected = false;
			that._trigger( "unselected", event, {
				unselected: selectee.element
			} );
		} );
		$( ".ui-selecting", this.element[ 0 ] ).each( function() {
			var selectee = $.data( this, "selectable-item" );
			that._removeClass( selectee.$element, "ui-selecting" )
				._addClass( selectee.$element, "ui-selected" );
			selectee.selecting = false;
			selectee.selected = true;
			selectee.startselected = true;
			that._trigger( "selected", event, {
				selected: selectee.element
			} );
		} );
		this._trigger( "stop", event );

		this.helper.remove();

		return false;
	}

} );


/*!
 * jQuery UI Selectmenu 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Selectmenu
//>>group: Widgets
/* eslint-disable max-len */
//>>description: Duplicates and extends the functionality of a native HTML select element, allowing it to be customizable in behavior and appearance far beyond the limitations of a native select.
/* eslint-enable max-len */
//>>docs: http://api.jqueryui.com/selectmenu/
//>>demos: http://jqueryui.com/selectmenu/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/selectmenu.css, ../../themes/base/button.css
//>>css.theme: ../../themes/base/theme.css


var widgetsSelectmenu = $.widget( "ui.selectmenu", [ $.ui.formResetMixin, {
	version: "1.13.2",
	defaultElement: "<select>",
	options: {
		appendTo: null,
		classes: {
			"ui-selectmenu-button-open": "ui-corner-top",
			"ui-selectmenu-button-closed": "ui-corner-all"
		},
		disabled: null,
		icons: {
			button: "ui-icon-triangle-1-s"
		},
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		width: false,

		// Callbacks
		change: null,
		close: null,
		focus: null,
		open: null,
		select: null
	},

	_create: function() {
		var selectmenuId = this.element.uniqueId().attr( "id" );
		this.ids = {
			element: selectmenuId,
			button: selectmenuId + "-button",
			menu: selectmenuId + "-menu"
		};

		this._drawButton();
		this._drawMenu();
		this._bindFormResetHandler();

		this._rendered = false;
		this.menuItems = $();
	},

	_drawButton: function() {
		var icon,
			that = this,
			item = this._parseOption(
				this.element.find( "option:selected" ),
				this.element[ 0 ].selectedIndex
			);

		// Associate existing label with the new button
		this.labels = this.element.labels().attr( "for", this.ids.button );
		this._on( this.labels, {
			click: function( event ) {
				this.button.trigger( "focus" );
				event.preventDefault();
			}
		} );

		// Hide original select element
		this.element.hide();

		// Create button
		this.button = $( "<span>", {
			tabindex: this.options.disabled ? -1 : 0,
			id: this.ids.button,
			role: "combobox",
			"aria-expanded": "false",
			"aria-autocomplete": "list",
			"aria-owns": this.ids.menu,
			"aria-haspopup": "true",
			title: this.element.attr( "title" )
		} )
			.insertAfter( this.element );

		this._addClass( this.button, "ui-selectmenu-button ui-selectmenu-button-closed",
			"ui-button ui-widget" );

		icon = $( "<span>" ).appendTo( this.button );
		this._addClass( icon, "ui-selectmenu-icon", "ui-icon " + this.options.icons.button );
		this.buttonItem = this._renderButtonItem( item )
			.appendTo( this.button );

		if ( this.options.width !== false ) {
			this._resizeButton();
		}

		this._on( this.button, this._buttonEvents );
		this.button.one( "focusin", function() {

			// Delay rendering the menu items until the button receives focus.
			// The menu may have already been rendered via a programmatic open.
			if ( !that._rendered ) {
				that._refreshMenu();
			}
		} );
	},

	_drawMenu: function() {
		var that = this;

		// Create menu
		this.menu = $( "<ul>", {
			"aria-hidden": "true",
			"aria-labelledby": this.ids.button,
			id: this.ids.menu
		} );

		// Wrap menu
		this.menuWrap = $( "<div>" ).append( this.menu );
		this._addClass( this.menuWrap, "ui-selectmenu-menu", "ui-front" );
		this.menuWrap.appendTo( this._appendTo() );

		// Initialize menu widget
		this.menuInstance = this.menu
			.menu( {
				classes: {
					"ui-menu": "ui-corner-bottom"
				},
				role: "listbox",
				select: function( event, ui ) {
					event.preventDefault();

					// Support: IE8
					// If the item was selected via a click, the text selection
					// will be destroyed in IE
					that._setSelection();

					that._select( ui.item.data( "ui-selectmenu-item" ), event );
				},
				focus: function( event, ui ) {
					var item = ui.item.data( "ui-selectmenu-item" );

					// Prevent inital focus from firing and check if its a newly focused item
					if ( that.focusIndex != null && item.index !== that.focusIndex ) {
						that._trigger( "focus", event, { item: item } );
						if ( !that.isOpen ) {
							that._select( item, event );
						}
					}
					that.focusIndex = item.index;

					that.button.attr( "aria-activedescendant",
						that.menuItems.eq( item.index ).attr( "id" ) );
				}
			} )
			.menu( "instance" );

		// Don't close the menu on mouseleave
		this.menuInstance._off( this.menu, "mouseleave" );

		// Cancel the menu's collapseAll on document click
		this.menuInstance._closeOnDocumentClick = function() {
			return false;
		};

		// Selects often contain empty items, but never contain dividers
		this.menuInstance._isDivider = function() {
			return false;
		};
	},

	refresh: function() {
		this._refreshMenu();
		this.buttonItem.replaceWith(
			this.buttonItem = this._renderButtonItem(

				// Fall back to an empty object in case there are no options
				this._getSelectedItem().data( "ui-selectmenu-item" ) || {}
			)
		);
		if ( this.options.width === null ) {
			this._resizeButton();
		}
	},

	_refreshMenu: function() {
		var item,
			options = this.element.find( "option" );

		this.menu.empty();

		this._parseOptions( options );
		this._renderMenu( this.menu, this.items );

		this.menuInstance.refresh();
		this.menuItems = this.menu.find( "li" )
			.not( ".ui-selectmenu-optgroup" )
				.find( ".ui-menu-item-wrapper" );

		this._rendered = true;

		if ( !options.length ) {
			return;
		}

		item = this._getSelectedItem();

		// Update the menu to have the correct item focused
		this.menuInstance.focus( null, item );
		this._setAria( item.data( "ui-selectmenu-item" ) );

		// Set disabled state
		this._setOption( "disabled", this.element.prop( "disabled" ) );
	},

	open: function( event ) {
		if ( this.options.disabled ) {
			return;
		}

		// If this is the first time the menu is being opened, render the items
		if ( !this._rendered ) {
			this._refreshMenu();
		} else {

			// Menu clears focus on close, reset focus to selected item
			this._removeClass( this.menu.find( ".ui-state-active" ), null, "ui-state-active" );
			this.menuInstance.focus( null, this._getSelectedItem() );
		}

		// If there are no options, don't open the menu
		if ( !this.menuItems.length ) {
			return;
		}

		this.isOpen = true;
		this._toggleAttr();
		this._resizeMenu();
		this._position();

		this._on( this.document, this._documentClick );

		this._trigger( "open", event );
	},

	_position: function() {
		this.menuWrap.position( $.extend( { of: this.button }, this.options.position ) );
	},

	close: function( event ) {
		if ( !this.isOpen ) {
			return;
		}

		this.isOpen = false;
		this._toggleAttr();

		this.range = null;
		this._off( this.document );

		this._trigger( "close", event );
	},

	widget: function() {
		return this.button;
	},

	menuWidget: function() {
		return this.menu;
	},

	_renderButtonItem: function( item ) {
		var buttonItem = $( "<span>" );

		this._setText( buttonItem, item.label );
		this._addClass( buttonItem, "ui-selectmenu-text" );

		return buttonItem;
	},

	_renderMenu: function( ul, items ) {
		var that = this,
			currentOptgroup = "";

		$.each( items, function( index, item ) {
			var li;

			if ( item.optgroup !== currentOptgroup ) {
				li = $( "<li>", {
					text: item.optgroup
				} );
				that._addClass( li, "ui-selectmenu-optgroup", "ui-menu-divider" +
					( item.element.parent( "optgroup" ).prop( "disabled" ) ?
						" ui-state-disabled" :
						"" ) );

				li.appendTo( ul );

				currentOptgroup = item.optgroup;
			}

			that._renderItemData( ul, item );
		} );
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item ).data( "ui-selectmenu-item", item );
	},

	_renderItem: function( ul, item ) {
		var li = $( "<li>" ),
			wrapper = $( "<div>", {
				title: item.element.attr( "title" )
			} );

		if ( item.disabled ) {
			this._addClass( li, null, "ui-state-disabled" );
		}
		this._setText( wrapper, item.label );

		return li.append( wrapper ).appendTo( ul );
	},

	_setText: function( element, value ) {
		if ( value ) {
			element.text( value );
		} else {
			element.html( "&#160;" );
		}
	},

	_move: function( direction, event ) {
		var item, next,
			filter = ".ui-menu-item";

		if ( this.isOpen ) {
			item = this.menuItems.eq( this.focusIndex ).parent( "li" );
		} else {
			item = this.menuItems.eq( this.element[ 0 ].selectedIndex ).parent( "li" );
			filter += ":not(.ui-state-disabled)";
		}

		if ( direction === "first" || direction === "last" ) {
			next = item[ direction === "first" ? "prevAll" : "nextAll" ]( filter ).eq( -1 );
		} else {
			next = item[ direction + "All" ]( filter ).eq( 0 );
		}

		if ( next.length ) {
			this.menuInstance.focus( event, next );
		}
	},

	_getSelectedItem: function() {
		return this.menuItems.eq( this.element[ 0 ].selectedIndex ).parent( "li" );
	},

	_toggle: function( event ) {
		this[ this.isOpen ? "close" : "open" ]( event );
	},

	_setSelection: function() {
		var selection;

		if ( !this.range ) {
			return;
		}

		if ( window.getSelection ) {
			selection = window.getSelection();
			selection.removeAllRanges();
			selection.addRange( this.range );

		// Support: IE8
		} else {
			this.range.select();
		}

		// Support: IE
		// Setting the text selection kills the button focus in IE, but
		// restoring the focus doesn't kill the selection.
		this.button.trigger( "focus" );
	},

	_documentClick: {
		mousedown: function( event ) {
			if ( !this.isOpen ) {
				return;
			}

			if ( !$( event.target ).closest( ".ui-selectmenu-menu, #" +
				$.escapeSelector( this.ids.button ) ).length ) {
				this.close( event );
			}
		}
	},

	_buttonEvents: {

		// Prevent text selection from being reset when interacting with the selectmenu (#10144)
		mousedown: function() {
			var selection;

			if ( window.getSelection ) {
				selection = window.getSelection();
				if ( selection.rangeCount ) {
					this.range = selection.getRangeAt( 0 );
				}

			// Support: IE8
			} else {
				this.range = document.selection.createRange();
			}
		},

		click: function( event ) {
			this._setSelection();
			this._toggle( event );
		},

		keydown: function( event ) {
			var preventDefault = true;
			switch ( event.keyCode ) {
			case $.ui.keyCode.TAB:
			case $.ui.keyCode.ESCAPE:
				this.close( event );
				preventDefault = false;
				break;
			case $.ui.keyCode.ENTER:
				if ( this.isOpen ) {
					this._selectFocusedItem( event );
				}
				break;
			case $.ui.keyCode.UP:
				if ( event.altKey ) {
					this._toggle( event );
				} else {
					this._move( "prev", event );
				}
				break;
			case $.ui.keyCode.DOWN:
				if ( event.altKey ) {
					this._toggle( event );
				} else {
					this._move( "next", event );
				}
				break;
			case $.ui.keyCode.SPACE:
				if ( this.isOpen ) {
					this._selectFocusedItem( event );
				} else {
					this._toggle( event );
				}
				break;
			case $.ui.keyCode.LEFT:
				this._move( "prev", event );
				break;
			case $.ui.keyCode.RIGHT:
				this._move( "next", event );
				break;
			case $.ui.keyCode.HOME:
			case $.ui.keyCode.PAGE_UP:
				this._move( "first", event );
				break;
			case $.ui.keyCode.END:
			case $.ui.keyCode.PAGE_DOWN:
				this._move( "last", event );
				break;
			default:
				this.menu.trigger( event );
				preventDefault = false;
			}

			if ( preventDefault ) {
				event.preventDefault();
			}
		}
	},

	_selectFocusedItem: function( event ) {
		var item = this.menuItems.eq( this.focusIndex ).parent( "li" );
		if ( !item.hasClass( "ui-state-disabled" ) ) {
			this._select( item.data( "ui-selectmenu-item" ), event );
		}
	},

	_select: function( item, event ) {
		var oldIndex = this.element[ 0 ].selectedIndex;

		// Change native select element
		this.element[ 0 ].selectedIndex = item.index;
		this.buttonItem.replaceWith( this.buttonItem = this._renderButtonItem( item ) );
		this._setAria( item );
		this._trigger( "select", event, { item: item } );

		if ( item.index !== oldIndex ) {
			this._trigger( "change", event, { item: item } );
		}

		this.close( event );
	},

	_setAria: function( item ) {
		var id = this.menuItems.eq( item.index ).attr( "id" );

		this.button.attr( {
			"aria-labelledby": id,
			"aria-activedescendant": id
		} );
		this.menu.attr( "aria-activedescendant", id );
	},

	_setOption: function( key, value ) {
		if ( key === "icons" ) {
			var icon = this.button.find( "span.ui-icon" );
			this._removeClass( icon, null, this.options.icons.button )
				._addClass( icon, null, value.button );
		}

		this._super( key, value );

		if ( key === "appendTo" ) {
			this.menuWrap.appendTo( this._appendTo() );
		}

		if ( key === "width" ) {
			this._resizeButton();
		}
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this.menuInstance.option( "disabled", value );
		this.button.attr( "aria-disabled", value );
		this._toggleClass( this.button, null, "ui-state-disabled", value );

		this.element.prop( "disabled", value );
		if ( value ) {
			this.button.attr( "tabindex", -1 );
			this.close();
		} else {
			this.button.attr( "tabindex", 0 );
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element || !element[ 0 ] ) {
			element = this.element.closest( ".ui-front, dialog" );
		}

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_toggleAttr: function() {
		this.button.attr( "aria-expanded", this.isOpen );

		// We can't use two _toggleClass() calls here, because we need to make sure
		// we always remove classes first and add them second, otherwise if both classes have the
		// same theme class, it will be removed after we add it.
		this._removeClass( this.button, "ui-selectmenu-button-" +
			( this.isOpen ? "closed" : "open" ) )
			._addClass( this.button, "ui-selectmenu-button-" +
				( this.isOpen ? "open" : "closed" ) )
			._toggleClass( this.menuWrap, "ui-selectmenu-open", null, this.isOpen );

		this.menu.attr( "aria-hidden", !this.isOpen );
	},

	_resizeButton: function() {
		var width = this.options.width;

		// For `width: false`, just remove inline style and stop
		if ( width === false ) {
			this.button.css( "width", "" );
			return;
		}

		// For `width: null`, match the width of the original element
		if ( width === null ) {
			width = this.element.show().outerWidth();
			this.element.hide();
		}

		this.button.outerWidth( width );
	},

	_resizeMenu: function() {
		this.menu.outerWidth( Math.max(
			this.button.outerWidth(),

			// Support: IE10
			// IE10 wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping
			this.menu.width( "" ).outerWidth() + 1
		) );
	},

	_getCreateOptions: function() {
		var options = this._super();

		options.disabled = this.element.prop( "disabled" );

		return options;
	},

	_parseOptions: function( options ) {
		var that = this,
			data = [];
		options.each( function( index, item ) {
			if ( item.hidden ) {
				return;
			}

			data.push( that._parseOption( $( item ), index ) );
		} );
		this.items = data;
	},

	_parseOption: function( option, index ) {
		var optgroup = option.parent( "optgroup" );

		return {
			element: option,
			index: index,
			value: option.val(),
			label: option.text(),
			optgroup: optgroup.attr( "label" ) || "",
			disabled: optgroup.prop( "disabled" ) || option.prop( "disabled" )
		};
	},

	_destroy: function() {
		this._unbindFormResetHandler();
		this.menuWrap.remove();
		this.button.remove();
		this.element.show();
		this.element.removeUniqueId();
		this.labels.attr( "for", this.ids.element );
	}
} ] );


/*!
 * jQuery UI Slider 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Slider
//>>group: Widgets
//>>description: Displays a flexible slider with ranges and accessibility via keyboard.
//>>docs: http://api.jqueryui.com/slider/
//>>demos: http://jqueryui.com/slider/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/slider.css
//>>css.theme: ../../themes/base/theme.css


var widgetsSlider = $.widget( "ui.slider", $.ui.mouse, {
	version: "1.13.2",
	widgetEventPrefix: "slide",

	options: {
		animate: false,
		classes: {
			"ui-slider": "ui-corner-all",
			"ui-slider-handle": "ui-corner-all",

			// Note: ui-widget-header isn't the most fittingly semantic framework class for this
			// element, but worked best visually with a variety of themes
			"ui-slider-range": "ui-corner-all ui-widget-header"
		},
		distance: 0,
		max: 100,
		min: 0,
		orientation: "horizontal",
		range: false,
		step: 1,
		value: 0,
		values: null,

		// Callbacks
		change: null,
		slide: null,
		start: null,
		stop: null
	},

	// Number of pages in a slider
	// (how many times can you page up/down to go through the whole range)
	numPages: 5,

	_create: function() {
		this._keySliding = false;
		this._mouseSliding = false;
		this._animateOff = true;
		this._handleIndex = null;
		this._detectOrientation();
		this._mouseInit();
		this._calculateNewMax();

		this._addClass( "ui-slider ui-slider-" + this.orientation,
			"ui-widget ui-widget-content" );

		this._refresh();

		this._animateOff = false;
	},

	_refresh: function() {
		this._createRange();
		this._createHandles();
		this._setupEvents();
		this._refreshValue();
	},

	_createHandles: function() {
		var i, handleCount,
			options = this.options,
			existingHandles = this.element.find( ".ui-slider-handle" ),
			handle = "<span tabindex='0'></span>",
			handles = [];

		handleCount = ( options.values && options.values.length ) || 1;

		if ( existingHandles.length > handleCount ) {
			existingHandles.slice( handleCount ).remove();
			existingHandles = existingHandles.slice( 0, handleCount );
		}

		for ( i = existingHandles.length; i < handleCount; i++ ) {
			handles.push( handle );
		}

		this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

		this._addClass( this.handles, "ui-slider-handle", "ui-state-default" );

		this.handle = this.handles.eq( 0 );

		this.handles.each( function( i ) {
			$( this )
				.data( "ui-slider-handle-index", i )
				.attr( "tabIndex", 0 );
		} );
	},

	_createRange: function() {
		var options = this.options;

		if ( options.range ) {
			if ( options.range === true ) {
				if ( !options.values ) {
					options.values = [ this._valueMin(), this._valueMin() ];
				} else if ( options.values.length && options.values.length !== 2 ) {
					options.values = [ options.values[ 0 ], options.values[ 0 ] ];
				} else if ( Array.isArray( options.values ) ) {
					options.values = options.values.slice( 0 );
				}
			}

			if ( !this.range || !this.range.length ) {
				this.range = $( "<div>" )
					.appendTo( this.element );

				this._addClass( this.range, "ui-slider-range" );
			} else {
				this._removeClass( this.range, "ui-slider-range-min ui-slider-range-max" );

				// Handle range switching from true to min/max
				this.range.css( {
					"left": "",
					"bottom": ""
				} );
			}
			if ( options.range === "min" || options.range === "max" ) {
				this._addClass( this.range, "ui-slider-range-" + options.range );
			}
		} else {
			if ( this.range ) {
				this.range.remove();
			}
			this.range = null;
		}
	},

	_setupEvents: function() {
		this._off( this.handles );
		this._on( this.handles, this._handleEvents );
		this._hoverable( this.handles );
		this._focusable( this.handles );
	},

	_destroy: function() {
		this.handles.remove();
		if ( this.range ) {
			this.range.remove();
		}

		this._mouseDestroy();
	},

	_mouseCapture: function( event ) {
		var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
			that = this,
			o = this.options;

		if ( o.disabled ) {
			return false;
		}

		this.elementSize = {
			width: this.element.outerWidth(),
			height: this.element.outerHeight()
		};
		this.elementOffset = this.element.offset();

		position = { x: event.pageX, y: event.pageY };
		normValue = this._normValueFromMouse( position );
		distance = this._valueMax() - this._valueMin() + 1;
		this.handles.each( function( i ) {
			var thisDistance = Math.abs( normValue - that.values( i ) );
			if ( ( distance > thisDistance ) ||
				( distance === thisDistance &&
					( i === that._lastChangedValue || that.values( i ) === o.min ) ) ) {
				distance = thisDistance;
				closestHandle = $( this );
				index = i;
			}
		} );

		allowed = this._start( event, index );
		if ( allowed === false ) {
			return false;
		}
		this._mouseSliding = true;

		this._handleIndex = index;

		this._addClass( closestHandle, null, "ui-state-active" );
		closestHandle.trigger( "focus" );

		offset = closestHandle.offset();
		mouseOverHandle = !$( event.target ).parents().addBack().is( ".ui-slider-handle" );
		this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
			left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
			top: event.pageY - offset.top -
				( closestHandle.height() / 2 ) -
				( parseInt( closestHandle.css( "borderTopWidth" ), 10 ) || 0 ) -
				( parseInt( closestHandle.css( "borderBottomWidth" ), 10 ) || 0 ) +
				( parseInt( closestHandle.css( "marginTop" ), 10 ) || 0 )
		};

		if ( !this.handles.hasClass( "ui-state-hover" ) ) {
			this._slide( event, index, normValue );
		}
		this._animateOff = true;
		return true;
	},

	_mouseStart: function() {
		return true;
	},

	_mouseDrag: function( event ) {
		var position = { x: event.pageX, y: event.pageY },
			normValue = this._normValueFromMouse( position );

		this._slide( event, this._handleIndex, normValue );

		return false;
	},

	_mouseStop: function( event ) {
		this._removeClass( this.handles, null, "ui-state-active" );
		this._mouseSliding = false;

		this._stop( event, this._handleIndex );
		this._change( event, this._handleIndex );

		this._handleIndex = null;
		this._clickOffset = null;
		this._animateOff = false;

		return false;
	},

	_detectOrientation: function() {
		this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
	},

	_normValueFromMouse: function( position ) {
		var pixelTotal,
			pixelMouse,
			percentMouse,
			valueTotal,
			valueMouse;

		if ( this.orientation === "horizontal" ) {
			pixelTotal = this.elementSize.width;
			pixelMouse = position.x - this.elementOffset.left -
				( this._clickOffset ? this._clickOffset.left : 0 );
		} else {
			pixelTotal = this.elementSize.height;
			pixelMouse = position.y - this.elementOffset.top -
				( this._clickOffset ? this._clickOffset.top : 0 );
		}

		percentMouse = ( pixelMouse / pixelTotal );
		if ( percentMouse > 1 ) {
			percentMouse = 1;
		}
		if ( percentMouse < 0 ) {
			percentMouse = 0;
		}
		if ( this.orientation === "vertical" ) {
			percentMouse = 1 - percentMouse;
		}

		valueTotal = this._valueMax() - this._valueMin();
		valueMouse = this._valueMin() + percentMouse * valueTotal;

		return this._trimAlignValue( valueMouse );
	},

	_uiHash: function( index, value, values ) {
		var uiHash = {
			handle: this.handles[ index ],
			handleIndex: index,
			value: value !== undefined ? value : this.value()
		};

		if ( this._hasMultipleValues() ) {
			uiHash.value = value !== undefined ? value : this.values( index );
			uiHash.values = values || this.values();
		}

		return uiHash;
	},

	_hasMultipleValues: function() {
		return this.options.values && this.options.values.length;
	},

	_start: function( event, index ) {
		return this._trigger( "start", event, this._uiHash( index ) );
	},

	_slide: function( event, index, newVal ) {
		var allowed, otherVal,
			currentValue = this.value(),
			newValues = this.values();

		if ( this._hasMultipleValues() ) {
			otherVal = this.values( index ? 0 : 1 );
			currentValue = this.values( index );

			if ( this.options.values.length === 2 && this.options.range === true ) {
				newVal =  index === 0 ? Math.min( otherVal, newVal ) : Math.max( otherVal, newVal );
			}

			newValues[ index ] = newVal;
		}

		if ( newVal === currentValue ) {
			return;
		}

		allowed = this._trigger( "slide", event, this._uiHash( index, newVal, newValues ) );

		// A slide can be canceled by returning false from the slide callback
		if ( allowed === false ) {
			return;
		}

		if ( this._hasMultipleValues() ) {
			this.values( index, newVal );
		} else {
			this.value( newVal );
		}
	},

	_stop: function( event, index ) {
		this._trigger( "stop", event, this._uiHash( index ) );
	},

	_change: function( event, index ) {
		if ( !this._keySliding && !this._mouseSliding ) {

			//store the last changed value index for reference when handles overlap
			this._lastChangedValue = index;
			this._trigger( "change", event, this._uiHash( index ) );
		}
	},

	value: function( newValue ) {
		if ( arguments.length ) {
			this.options.value = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, 0 );
			return;
		}

		return this._value();
	},

	values: function( index, newValue ) {
		var vals,
			newValues,
			i;

		if ( arguments.length > 1 ) {
			this.options.values[ index ] = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, index );
			return;
		}

		if ( arguments.length ) {
			if ( Array.isArray( arguments[ 0 ] ) ) {
				vals = this.options.values;
				newValues = arguments[ 0 ];
				for ( i = 0; i < vals.length; i += 1 ) {
					vals[ i ] = this._trimAlignValue( newValues[ i ] );
					this._change( null, i );
				}
				this._refreshValue();
			} else {
				if ( this._hasMultipleValues() ) {
					return this._values( index );
				} else {
					return this.value();
				}
			}
		} else {
			return this._values();
		}
	},

	_setOption: function( key, value ) {
		var i,
			valsLength = 0;

		if ( key === "range" && this.options.range === true ) {
			if ( value === "min" ) {
				this.options.value = this._values( 0 );
				this.options.values = null;
			} else if ( value === "max" ) {
				this.options.value = this._values( this.options.values.length - 1 );
				this.options.values = null;
			}
		}

		if ( Array.isArray( this.options.values ) ) {
			valsLength = this.options.values.length;
		}

		this._super( key, value );

		switch ( key ) {
			case "orientation":
				this._detectOrientation();
				this._removeClass( "ui-slider-horizontal ui-slider-vertical" )
					._addClass( "ui-slider-" + this.orientation );
				this._refreshValue();
				if ( this.options.range ) {
					this._refreshRange( value );
				}

				// Reset positioning from previous orientation
				this.handles.css( value === "horizontal" ? "bottom" : "left", "" );
				break;
			case "value":
				this._animateOff = true;
				this._refreshValue();
				this._change( null, 0 );
				this._animateOff = false;
				break;
			case "values":
				this._animateOff = true;
				this._refreshValue();

				// Start from the last handle to prevent unreachable handles (#9046)
				for ( i = valsLength - 1; i >= 0; i-- ) {
					this._change( null, i );
				}
				this._animateOff = false;
				break;
			case "step":
			case "min":
			case "max":
				this._animateOff = true;
				this._calculateNewMax();
				this._refreshValue();
				this._animateOff = false;
				break;
			case "range":
				this._animateOff = true;
				this._refresh();
				this._animateOff = false;
				break;
		}
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this._toggleClass( null, "ui-state-disabled", !!value );
	},

	//internal value getter
	// _value() returns value trimmed by min and max, aligned by step
	_value: function() {
		var val = this.options.value;
		val = this._trimAlignValue( val );

		return val;
	},

	//internal values getter
	// _values() returns array of values trimmed by min and max, aligned by step
	// _values( index ) returns single value trimmed by min and max, aligned by step
	_values: function( index ) {
		var val,
			vals,
			i;

		if ( arguments.length ) {
			val = this.options.values[ index ];
			val = this._trimAlignValue( val );

			return val;
		} else if ( this._hasMultipleValues() ) {

			// .slice() creates a copy of the array
			// this copy gets trimmed by min and max and then returned
			vals = this.options.values.slice();
			for ( i = 0; i < vals.length; i += 1 ) {
				vals[ i ] = this._trimAlignValue( vals[ i ] );
			}

			return vals;
		} else {
			return [];
		}
	},

	// Returns the step-aligned value that val is closest to, between (inclusive) min and max
	_trimAlignValue: function( val ) {
		if ( val <= this._valueMin() ) {
			return this._valueMin();
		}
		if ( val >= this._valueMax() ) {
			return this._valueMax();
		}
		var step = ( this.options.step > 0 ) ? this.options.step : 1,
			valModStep = ( val - this._valueMin() ) % step,
			alignValue = val - valModStep;

		if ( Math.abs( valModStep ) * 2 >= step ) {
			alignValue += ( valModStep > 0 ) ? step : ( -step );
		}

		// Since JavaScript has problems with large floats, round
		// the final value to 5 digits after the decimal point (see #4124)
		return parseFloat( alignValue.toFixed( 5 ) );
	},

	_calculateNewMax: function() {
		var max = this.options.max,
			min = this._valueMin(),
			step = this.options.step,
			aboveMin = Math.round( ( max - min ) / step ) * step;
		max = aboveMin + min;
		if ( max > this.options.max ) {

			//If max is not divisible by step, rounding off may increase its value
			max -= step;
		}
		this.max = parseFloat( max.toFixed( this._precision() ) );
	},

	_precision: function() {
		var precision = this._precisionOf( this.options.step );
		if ( this.options.min !== null ) {
			precision = Math.max( precision, this._precisionOf( this.options.min ) );
		}
		return precision;
	},

	_precisionOf: function( num ) {
		var str = num.toString(),
			decimal = str.indexOf( "." );
		return decimal === -1 ? 0 : str.length - decimal - 1;
	},

	_valueMin: function() {
		return this.options.min;
	},

	_valueMax: function() {
		return this.max;
	},

	_refreshRange: function( orientation ) {
		if ( orientation === "vertical" ) {
			this.range.css( { "width": "", "left": "" } );
		}
		if ( orientation === "horizontal" ) {
			this.range.css( { "height": "", "bottom": "" } );
		}
	},

	_refreshValue: function() {
		var lastValPercent, valPercent, value, valueMin, valueMax,
			oRange = this.options.range,
			o = this.options,
			that = this,
			animate = ( !this._animateOff ) ? o.animate : false,
			_set = {};

		if ( this._hasMultipleValues() ) {
			this.handles.each( function( i ) {
				valPercent = ( that.values( i ) - that._valueMin() ) / ( that._valueMax() -
					that._valueMin() ) * 100;
				_set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
				$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
				if ( that.options.range === true ) {
					if ( that.orientation === "horizontal" ) {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
								left: valPercent + "%"
							}, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( {
								width: ( valPercent - lastValPercent ) + "%"
							}, {
								queue: false,
								duration: o.animate
							} );
						}
					} else {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
								bottom: ( valPercent ) + "%"
							}, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( {
								height: ( valPercent - lastValPercent ) + "%"
							}, {
								queue: false,
								duration: o.animate
							} );
						}
					}
				}
				lastValPercent = valPercent;
			} );
		} else {
			value = this.value();
			valueMin = this._valueMin();
			valueMax = this._valueMax();
			valPercent = ( valueMax !== valueMin ) ?
					( value - valueMin ) / ( valueMax - valueMin ) * 100 :
					0;
			_set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
			this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

			if ( oRange === "min" && this.orientation === "horizontal" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					width: valPercent + "%"
				}, o.animate );
			}
			if ( oRange === "max" && this.orientation === "horizontal" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					width: ( 100 - valPercent ) + "%"
				}, o.animate );
			}
			if ( oRange === "min" && this.orientation === "vertical" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					height: valPercent + "%"
				}, o.animate );
			}
			if ( oRange === "max" && this.orientation === "vertical" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( {
					height: ( 100 - valPercent ) + "%"
				}, o.animate );
			}
		}
	},

	_handleEvents: {
		keydown: function( event ) {
			var allowed, curVal, newVal, step,
				index = $( event.target ).data( "ui-slider-handle-index" );

			switch ( event.keyCode ) {
				case $.ui.keyCode.HOME:
				case $.ui.keyCode.END:
				case $.ui.keyCode.PAGE_UP:
				case $.ui.keyCode.PAGE_DOWN:
				case $.ui.keyCode.UP:
				case $.ui.keyCode.RIGHT:
				case $.ui.keyCode.DOWN:
				case $.ui.keyCode.LEFT:
					event.preventDefault();
					if ( !this._keySliding ) {
						this._keySliding = true;
						this._addClass( $( event.target ), null, "ui-state-active" );
						allowed = this._start( event, index );
						if ( allowed === false ) {
							return;
						}
					}
					break;
			}

			step = this.options.step;
			if ( this._hasMultipleValues() ) {
				curVal = newVal = this.values( index );
			} else {
				curVal = newVal = this.value();
			}

			switch ( event.keyCode ) {
				case $.ui.keyCode.HOME:
					newVal = this._valueMin();
					break;
				case $.ui.keyCode.END:
					newVal = this._valueMax();
					break;
				case $.ui.keyCode.PAGE_UP:
					newVal = this._trimAlignValue(
						curVal + ( ( this._valueMax() - this._valueMin() ) / this.numPages )
					);
					break;
				case $.ui.keyCode.PAGE_DOWN:
					newVal = this._trimAlignValue(
						curVal - ( ( this._valueMax() - this._valueMin() ) / this.numPages ) );
					break;
				case $.ui.keyCode.UP:
				case $.ui.keyCode.RIGHT:
					if ( curVal === this._valueMax() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal + step );
					break;
				case $.ui.keyCode.DOWN:
				case $.ui.keyCode.LEFT:
					if ( curVal === this._valueMin() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal - step );
					break;
			}

			this._slide( event, index, newVal );
		},
		keyup: function( event ) {
			var index = $( event.target ).data( "ui-slider-handle-index" );

			if ( this._keySliding ) {
				this._keySliding = false;
				this._stop( event, index );
				this._change( event, index );
				this._removeClass( $( event.target ), null, "ui-state-active" );
			}
		}
	}
} );


/*!
 * jQuery UI Sortable 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Sortable
//>>group: Interactions
//>>description: Enables items in a list to be sorted using the mouse.
//>>docs: http://api.jqueryui.com/sortable/
//>>demos: http://jqueryui.com/sortable/
//>>css.structure: ../../themes/base/sortable.css


var widgetsSortable = $.widget( "ui.sortable", $.ui.mouse, {
	version: "1.13.2",
	widgetEventPrefix: "sort",
	ready: false,
	options: {
		appendTo: "parent",
		axis: false,
		connectWith: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		dropOnEmpty: true,
		forcePlaceholderSize: false,
		forceHelperSize: false,
		grid: false,
		handle: false,
		helper: "original",
		items: "> *",
		opacity: false,
		placeholder: false,
		revert: false,
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		scope: "default",
		tolerance: "intersect",
		zIndex: 1000,

		// Callbacks
		activate: null,
		beforeStop: null,
		change: null,
		deactivate: null,
		out: null,
		over: null,
		receive: null,
		remove: null,
		sort: null,
		start: null,
		stop: null,
		update: null
	},

	_isOverAxis: function( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	},

	_isFloating: function( item ) {
		return ( /left|right/ ).test( item.css( "float" ) ) ||
			( /inline|table-cell/ ).test( item.css( "display" ) );
	},

	_create: function() {
		this.containerCache = {};
		this._addClass( "ui-sortable" );

		//Get the items
		this.refresh();

		//Let's determine the parent's offset
		this.offset = this.element.offset();

		//Initialize mouse events for interaction
		this._mouseInit();

		this._setHandleClassName();

		//We're ready to go
		this.ready = true;

	},

	_setOption: function( key, value ) {
		this._super( key, value );

		if ( key === "handle" ) {
			this._setHandleClassName();
		}
	},

	_setHandleClassName: function() {
		var that = this;
		this._removeClass( this.element.find( ".ui-sortable-handle" ), "ui-sortable-handle" );
		$.each( this.items, function() {
			that._addClass(
				this.instance.options.handle ?
					this.item.find( this.instance.options.handle ) :
					this.item,
				"ui-sortable-handle"
			);
		} );
	},

	_destroy: function() {
		this._mouseDestroy();

		for ( var i = this.items.length - 1; i >= 0; i-- ) {
			this.items[ i ].item.removeData( this.widgetName + "-item" );
		}

		return this;
	},

	_mouseCapture: function( event, overrideHandle ) {
		var currentItem = null,
			validHandle = false,
			that = this;

		if ( this.reverting ) {
			return false;
		}

		if ( this.options.disabled || this.options.type === "static" ) {
			return false;
		}

		//We have to refresh the items data once first
		this._refreshItems( event );

		//Find out if the clicked node (or one of its parents) is a actual item in this.items
		$( event.target ).parents().each( function() {
			if ( $.data( this, that.widgetName + "-item" ) === that ) {
				currentItem = $( this );
				return false;
			}
		} );
		if ( $.data( event.target, that.widgetName + "-item" ) === that ) {
			currentItem = $( event.target );
		}

		if ( !currentItem ) {
			return false;
		}
		if ( this.options.handle && !overrideHandle ) {
			$( this.options.handle, currentItem ).find( "*" ).addBack().each( function() {
				if ( this === event.target ) {
					validHandle = true;
				}
			} );
			if ( !validHandle ) {
				return false;
			}
		}

		this.currentItem = currentItem;
		this._removeCurrentsFromItems();
		return true;

	},

	_mouseStart: function( event, overrideHandle, noActivation ) {

		var i, body,
			o = this.options;

		this.currentContainer = this;

		//We only need to call refreshPositions, because the refreshItems call has been moved to
		// mouseCapture
		this.refreshPositions();

		//Prepare the dragged items parent
		this.appendTo = $( o.appendTo !== "parent" ?
				o.appendTo :
				this.currentItem.parent() );

		//Create and append the visible helper
		this.helper = this._createHelper( event );

		//Cache the helper size
		this._cacheHelperProportions();

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//The element's absolute position on the page minus margins
		this.offset = this.currentItem.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		$.extend( this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},

			// This is a relative to absolute position minus the actual position calculation -
			// only used for relative positioned helper
			relative: this._getRelativeOffset()
		} );

		// After we get the helper offset, but before we get the parent offset we can
		// change the helper's position to absolute
		// TODO: Still need to figure out a way to make relative sorting possible
		this.helper.css( "position", "absolute" );
		this.cssPosition = this.helper.css( "position" );

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		if ( o.cursorAt ) {
			this._adjustOffsetFromHelper( o.cursorAt );
		}

		//Cache the former DOM position
		this.domPosition = {
			prev: this.currentItem.prev()[ 0 ],
			parent: this.currentItem.parent()[ 0 ]
		};

		// If the helper is not the original, hide the original so it's not playing any role during
		// the drag, won't cause anything bad this way
		if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
			this.currentItem.hide();
		}

		//Create the placeholder
		this._createPlaceholder();

		//Get the next scrolling parent
		this.scrollParent = this.placeholder.scrollParent();

		$.extend( this.offset, {
			parent: this._getParentOffset()
		} );

		//Set a containment if given in the options
		if ( o.containment ) {
			this._setContainment();
		}

		if ( o.cursor && o.cursor !== "auto" ) { // cursor option
			body = this.document.find( "body" );

			// Support: IE
			this.storedCursor = body.css( "cursor" );
			body.css( "cursor", o.cursor );

			this.storedStylesheet =
				$( "<style>*{ cursor: " + o.cursor + " !important; }</style>" ).appendTo( body );
		}

		// We need to make sure to grab the zIndex before setting the
		// opacity, because setting the opacity to anything lower than 1
		// causes the zIndex to change from "auto" to 0.
		if ( o.zIndex ) { // zIndex option
			if ( this.helper.css( "zIndex" ) ) {
				this._storedZIndex = this.helper.css( "zIndex" );
			}
			this.helper.css( "zIndex", o.zIndex );
		}

		if ( o.opacity ) { // opacity option
			if ( this.helper.css( "opacity" ) ) {
				this._storedOpacity = this.helper.css( "opacity" );
			}
			this.helper.css( "opacity", o.opacity );
		}

		//Prepare scrolling
		if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				this.scrollParent[ 0 ].tagName !== "HTML" ) {
			this.overflowOffset = this.scrollParent.offset();
		}

		//Call callbacks
		this._trigger( "start", event, this._uiHash() );

		//Recache the helper size
		if ( !this._preserveHelperProportions ) {
			this._cacheHelperProportions();
		}

		//Post "activate" events to possible containers
		if ( !noActivation ) {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
			}
		}

		//Prepare possible droppables
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.current = this;
		}

		if ( $.ui.ddmanager && !o.dropBehaviour ) {
			$.ui.ddmanager.prepareOffsets( this, event );
		}

		this.dragging = true;

		this._addClass( this.helper, "ui-sortable-helper" );

		//Move the helper, if needed
		if ( !this.helper.parent().is( this.appendTo ) ) {
			this.helper.detach().appendTo( this.appendTo );

			//Update position
			this.offset.parent = this._getParentOffset();
		}

		//Generate the original position
		this.position = this.originalPosition = this._generatePosition( event );
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;
		this.lastPositionAbs = this.positionAbs = this._convertPositionTo( "absolute" );

		this._mouseDrag( event );

		return true;

	},

	_scroll: function( event ) {
		var o = this.options,
			scrolled = false;

		if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				this.scrollParent[ 0 ].tagName !== "HTML" ) {

			if ( ( this.overflowOffset.top + this.scrollParent[ 0 ].offsetHeight ) -
					event.pageY < o.scrollSensitivity ) {
				this.scrollParent[ 0 ].scrollTop =
					scrolled = this.scrollParent[ 0 ].scrollTop + o.scrollSpeed;
			} else if ( event.pageY - this.overflowOffset.top < o.scrollSensitivity ) {
				this.scrollParent[ 0 ].scrollTop =
					scrolled = this.scrollParent[ 0 ].scrollTop - o.scrollSpeed;
			}

			if ( ( this.overflowOffset.left + this.scrollParent[ 0 ].offsetWidth ) -
					event.pageX < o.scrollSensitivity ) {
				this.scrollParent[ 0 ].scrollLeft = scrolled =
					this.scrollParent[ 0 ].scrollLeft + o.scrollSpeed;
			} else if ( event.pageX - this.overflowOffset.left < o.scrollSensitivity ) {
				this.scrollParent[ 0 ].scrollLeft = scrolled =
					this.scrollParent[ 0 ].scrollLeft - o.scrollSpeed;
			}

		} else {

			if ( event.pageY - this.document.scrollTop() < o.scrollSensitivity ) {
				scrolled = this.document.scrollTop( this.document.scrollTop() - o.scrollSpeed );
			} else if ( this.window.height() - ( event.pageY - this.document.scrollTop() ) <
					o.scrollSensitivity ) {
				scrolled = this.document.scrollTop( this.document.scrollTop() + o.scrollSpeed );
			}

			if ( event.pageX - this.document.scrollLeft() < o.scrollSensitivity ) {
				scrolled = this.document.scrollLeft(
					this.document.scrollLeft() - o.scrollSpeed
				);
			} else if ( this.window.width() - ( event.pageX - this.document.scrollLeft() ) <
					o.scrollSensitivity ) {
				scrolled = this.document.scrollLeft(
					this.document.scrollLeft() + o.scrollSpeed
				);
			}

		}

		return scrolled;
	},

	_mouseDrag: function( event ) {
		var i, item, itemElement, intersection,
			o = this.options;

		//Compute the helpers position
		this.position = this._generatePosition( event );
		this.positionAbs = this._convertPositionTo( "absolute" );

		//Set the helper position
		if ( !this.options.axis || this.options.axis !== "y" ) {
			this.helper[ 0 ].style.left = this.position.left + "px";
		}
		if ( !this.options.axis || this.options.axis !== "x" ) {
			this.helper[ 0 ].style.top = this.position.top + "px";
		}

		//Do scrolling
		if ( o.scroll ) {
			if ( this._scroll( event ) !== false ) {

				//Update item positions used in position checks
				this._refreshItemPositions( true );

				if ( $.ui.ddmanager && !o.dropBehaviour ) {
					$.ui.ddmanager.prepareOffsets( this, event );
				}
			}
		}

		this.dragDirection = {
			vertical: this._getDragVerticalDirection(),
			horizontal: this._getDragHorizontalDirection()
		};

		//Rearrange
		for ( i = this.items.length - 1; i >= 0; i-- ) {

			//Cache variables and intersection, continue if no intersection
			item = this.items[ i ];
			itemElement = item.item[ 0 ];
			intersection = this._intersectsWithPointer( item );
			if ( !intersection ) {
				continue;
			}

			// Only put the placeholder inside the current Container, skip all
			// items from other containers. This works because when moving
			// an item from one container to another the
			// currentContainer is switched before the placeholder is moved.
			//
			// Without this, moving items in "sub-sortables" can cause
			// the placeholder to jitter between the outer and inner container.
			if ( item.instance !== this.currentContainer ) {
				continue;
			}

			// Cannot intersect with itself
			// no useless actions that have been done before
			// no action if the item moved is the parent of the item checked
			if ( itemElement !== this.currentItem[ 0 ] &&
				this.placeholder[ intersection === 1 ?
				"next" : "prev" ]()[ 0 ] !== itemElement &&
				!$.contains( this.placeholder[ 0 ], itemElement ) &&
				( this.options.type === "semi-dynamic" ?
					!$.contains( this.element[ 0 ], itemElement ) :
					true
				)
			) {

				this.direction = intersection === 1 ? "down" : "up";

				if ( this.options.tolerance === "pointer" ||
						this._intersectsWithSides( item ) ) {
					this._rearrange( event, item );
				} else {
					break;
				}

				this._trigger( "change", event, this._uiHash() );
				break;
			}
		}

		//Post events to containers
		this._contactContainers( event );

		//Interconnect with droppables
		if ( $.ui.ddmanager ) {
			$.ui.ddmanager.drag( this, event );
		}

		//Call callbacks
		this._trigger( "sort", event, this._uiHash() );

		this.lastPositionAbs = this.positionAbs;
		return false;

	},

	_mouseStop: function( event, noPropagation ) {

		if ( !event ) {
			return;
		}

		//If we are using droppables, inform the manager about the drop
		if ( $.ui.ddmanager && !this.options.dropBehaviour ) {
			$.ui.ddmanager.drop( this, event );
		}

		if ( this.options.revert ) {
			var that = this,
				cur = this.placeholder.offset(),
				axis = this.options.axis,
				animation = {};

			if ( !axis || axis === "x" ) {
				animation.left = cur.left - this.offset.parent.left - this.margins.left +
					( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
						0 :
						this.offsetParent[ 0 ].scrollLeft
					);
			}
			if ( !axis || axis === "y" ) {
				animation.top = cur.top - this.offset.parent.top - this.margins.top +
					( this.offsetParent[ 0 ] === this.document[ 0 ].body ?
						0 :
						this.offsetParent[ 0 ].scrollTop
					);
			}
			this.reverting = true;
			$( this.helper ).animate(
				animation,
				parseInt( this.options.revert, 10 ) || 500,
				function() {
					that._clear( event );
				}
			);
		} else {
			this._clear( event, noPropagation );
		}

		return false;

	},

	cancel: function() {

		if ( this.dragging ) {

			this._mouseUp( new $.Event( "mouseup", { target: null } ) );

			if ( this.options.helper === "original" ) {
				this.currentItem.css( this._storedCSS );
				this._removeClass( this.currentItem, "ui-sortable-helper" );
			} else {
				this.currentItem.show();
			}

			//Post deactivating events to containers
			for ( var i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "deactivate", null, this._uiHash( this ) );
				if ( this.containers[ i ].containerCache.over ) {
					this.containers[ i ]._trigger( "out", null, this._uiHash( this ) );
					this.containers[ i ].containerCache.over = 0;
				}
			}

		}

		if ( this.placeholder ) {

			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
			// it unbinds ALL events from the original node!
			if ( this.placeholder[ 0 ].parentNode ) {
				this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );
			}
			if ( this.options.helper !== "original" && this.helper &&
					this.helper[ 0 ].parentNode ) {
				this.helper.remove();
			}

			$.extend( this, {
				helper: null,
				dragging: false,
				reverting: false,
				_noFinalSort: null
			} );

			if ( this.domPosition.prev ) {
				$( this.domPosition.prev ).after( this.currentItem );
			} else {
				$( this.domPosition.parent ).prepend( this.currentItem );
			}
		}

		return this;

	},

	serialize: function( o ) {

		var items = this._getItemsAsjQuery( o && o.connected ),
			str = [];
		o = o || {};

		$( items ).each( function() {
			var res = ( $( o.item || this ).attr( o.attribute || "id" ) || "" )
				.match( o.expression || ( /(.+)[\-=_](.+)/ ) );
			if ( res ) {
				str.push(
					( o.key || res[ 1 ] + "[]" ) +
					"=" + ( o.key && o.expression ? res[ 1 ] : res[ 2 ] ) );
			}
		} );

		if ( !str.length && o.key ) {
			str.push( o.key + "=" );
		}

		return str.join( "&" );

	},

	toArray: function( o ) {

		var items = this._getItemsAsjQuery( o && o.connected ),
			ret = [];

		o = o || {};

		items.each( function() {
			ret.push( $( o.item || this ).attr( o.attribute || "id" ) || "" );
		} );
		return ret;

	},

	/* Be careful with the following core functions */
	_intersectsWith: function( item ) {

		var x1 = this.positionAbs.left,
			x2 = x1 + this.helperProportions.width,
			y1 = this.positionAbs.top,
			y2 = y1 + this.helperProportions.height,
			l = item.left,
			r = l + item.width,
			t = item.top,
			b = t + item.height,
			dyClick = this.offset.click.top,
			dxClick = this.offset.click.left,
			isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t &&
				( y1 + dyClick ) < b ),
			isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l &&
				( x1 + dxClick ) < r ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( this.options.tolerance === "pointer" ||
			this.options.forcePointerForContainers ||
			( this.options.tolerance !== "pointer" &&
				this.helperProportions[ this.floating ? "width" : "height" ] >
				item[ this.floating ? "width" : "height" ] )
		) {
			return isOverElement;
		} else {

			return ( l < x1 + ( this.helperProportions.width / 2 ) && // Right Half
				x2 - ( this.helperProportions.width / 2 ) < r && // Left Half
				t < y1 + ( this.helperProportions.height / 2 ) && // Bottom Half
				y2 - ( this.helperProportions.height / 2 ) < b ); // Top Half

		}
	},

	_intersectsWithPointer: function( item ) {
		var verticalDirection, horizontalDirection,
			isOverElementHeight = ( this.options.axis === "x" ) ||
				this._isOverAxis(
					this.positionAbs.top + this.offset.click.top, item.top, item.height ),
			isOverElementWidth = ( this.options.axis === "y" ) ||
				this._isOverAxis(
					this.positionAbs.left + this.offset.click.left, item.left, item.width ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( !isOverElement ) {
			return false;
		}

		verticalDirection = this.dragDirection.vertical;
		horizontalDirection = this.dragDirection.horizontal;

		return this.floating ?
			( ( horizontalDirection === "right" || verticalDirection === "down" ) ? 2 : 1 ) :
			( verticalDirection && ( verticalDirection === "down" ? 2 : 1 ) );

	},

	_intersectsWithSides: function( item ) {

		var isOverBottomHalf = this._isOverAxis( this.positionAbs.top +
				this.offset.click.top, item.top + ( item.height / 2 ), item.height ),
			isOverRightHalf = this._isOverAxis( this.positionAbs.left +
				this.offset.click.left, item.left + ( item.width / 2 ), item.width ),
			verticalDirection = this.dragDirection.vertical,
			horizontalDirection = this.dragDirection.horizontal;

		if ( this.floating && horizontalDirection ) {
			return ( ( horizontalDirection === "right" && isOverRightHalf ) ||
				( horizontalDirection === "left" && !isOverRightHalf ) );
		} else {
			return verticalDirection && ( ( verticalDirection === "down" && isOverBottomHalf ) ||
				( verticalDirection === "up" && !isOverBottomHalf ) );
		}

	},

	_getDragVerticalDirection: function() {
		var delta = this.positionAbs.top - this.lastPositionAbs.top;
		return delta !== 0 && ( delta > 0 ? "down" : "up" );
	},

	_getDragHorizontalDirection: function() {
		var delta = this.positionAbs.left - this.lastPositionAbs.left;
		return delta !== 0 && ( delta > 0 ? "right" : "left" );
	},

	refresh: function( event ) {
		this._refreshItems( event );
		this._setHandleClassName();
		this.refreshPositions();
		return this;
	},

	_connectWith: function() {
		var options = this.options;
		return options.connectWith.constructor === String ?
			[ options.connectWith ] :
			options.connectWith;
	},

	_getItemsAsjQuery: function( connected ) {

		var i, j, cur, inst,
			items = [],
			queries = [],
			connectWith = this._connectWith();

		if ( connectWith && connected ) {
			for ( i = connectWith.length - 1; i >= 0; i-- ) {
				cur = $( connectWith[ i ], this.document[ 0 ] );
				for ( j = cur.length - 1; j >= 0; j-- ) {
					inst = $.data( cur[ j ], this.widgetFullName );
					if ( inst && inst !== this && !inst.options.disabled ) {
						queries.push( [ typeof inst.options.items === "function" ?
							inst.options.items.call( inst.element ) :
							$( inst.options.items, inst.element )
								.not( ".ui-sortable-helper" )
								.not( ".ui-sortable-placeholder" ), inst ] );
					}
				}
			}
		}

		queries.push( [ typeof this.options.items === "function" ?
			this.options.items
				.call( this.element, null, { options: this.options, item: this.currentItem } ) :
			$( this.options.items, this.element )
				.not( ".ui-sortable-helper" )
				.not( ".ui-sortable-placeholder" ), this ] );

		function addItems() {
			items.push( this );
		}
		for ( i = queries.length - 1; i >= 0; i-- ) {
			queries[ i ][ 0 ].each( addItems );
		}

		return $( items );

	},

	_removeCurrentsFromItems: function() {

		var list = this.currentItem.find( ":data(" + this.widgetName + "-item)" );

		this.items = $.grep( this.items, function( item ) {
			for ( var j = 0; j < list.length; j++ ) {
				if ( list[ j ] === item.item[ 0 ] ) {
					return false;
				}
			}
			return true;
		} );

	},

	_refreshItems: function( event ) {

		this.items = [];
		this.containers = [ this ];

		var i, j, cur, inst, targetData, _queries, item, queriesLength,
			items = this.items,
			queries = [ [ typeof this.options.items === "function" ?
				this.options.items.call( this.element[ 0 ], event, { item: this.currentItem } ) :
				$( this.options.items, this.element ), this ] ],
			connectWith = this._connectWith();

		//Shouldn't be run the first time through due to massive slow-down
		if ( connectWith && this.ready ) {
			for ( i = connectWith.length - 1; i >= 0; i-- ) {
				cur = $( connectWith[ i ], this.document[ 0 ] );
				for ( j = cur.length - 1; j >= 0; j-- ) {
					inst = $.data( cur[ j ], this.widgetFullName );
					if ( inst && inst !== this && !inst.options.disabled ) {
						queries.push( [ typeof inst.options.items === "function" ?
							inst.options.items
								.call( inst.element[ 0 ], event, { item: this.currentItem } ) :
							$( inst.options.items, inst.element ), inst ] );
						this.containers.push( inst );
					}
				}
			}
		}

		for ( i = queries.length - 1; i >= 0; i-- ) {
			targetData = queries[ i ][ 1 ];
			_queries = queries[ i ][ 0 ];

			for ( j = 0, queriesLength = _queries.length; j < queriesLength; j++ ) {
				item = $( _queries[ j ] );

				// Data for target checking (mouse manager)
				item.data( this.widgetName + "-item", targetData );

				items.push( {
					item: item,
					instance: targetData,
					width: 0, height: 0,
					left: 0, top: 0
				} );
			}
		}

	},

	_refreshItemPositions: function( fast ) {
		var i, item, t, p;

		for ( i = this.items.length - 1; i >= 0; i-- ) {
			item = this.items[ i ];

			//We ignore calculating positions of all connected containers when we're not over them
			if ( this.currentContainer && item.instance !== this.currentContainer &&
					item.item[ 0 ] !== this.currentItem[ 0 ] ) {
				continue;
			}

			t = this.options.toleranceElement ?
				$( this.options.toleranceElement, item.item ) :
				item.item;

			if ( !fast ) {
				item.width = t.outerWidth();
				item.height = t.outerHeight();
			}

			p = t.offset();
			item.left = p.left;
			item.top = p.top;
		}
	},

	refreshPositions: function( fast ) {

		// Determine whether items are being displayed horizontally
		this.floating = this.items.length ?
			this.options.axis === "x" || this._isFloating( this.items[ 0 ].item ) :
			false;

		// This has to be redone because due to the item being moved out/into the offsetParent,
		// the offsetParent's position will change
		if ( this.offsetParent && this.helper ) {
			this.offset.parent = this._getParentOffset();
		}

		this._refreshItemPositions( fast );

		var i, p;

		if ( this.options.custom && this.options.custom.refreshContainers ) {
			this.options.custom.refreshContainers.call( this );
		} else {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				p = this.containers[ i ].element.offset();
				this.containers[ i ].containerCache.left = p.left;
				this.containers[ i ].containerCache.top = p.top;
				this.containers[ i ].containerCache.width =
					this.containers[ i ].element.outerWidth();
				this.containers[ i ].containerCache.height =
					this.containers[ i ].element.outerHeight();
			}
		}

		return this;
	},

	_createPlaceholder: function( that ) {
		that = that || this;
		var className, nodeName,
			o = that.options;

		if ( !o.placeholder || o.placeholder.constructor === String ) {
			className = o.placeholder;
			nodeName = that.currentItem[ 0 ].nodeName.toLowerCase();
			o.placeholder = {
				element: function() {

					var element = $( "<" + nodeName + ">", that.document[ 0 ] );

					that._addClass( element, "ui-sortable-placeholder",
							className || that.currentItem[ 0 ].className )
						._removeClass( element, "ui-sortable-helper" );

					if ( nodeName === "tbody" ) {
						that._createTrPlaceholder(
							that.currentItem.find( "tr" ).eq( 0 ),
							$( "<tr>", that.document[ 0 ] ).appendTo( element )
						);
					} else if ( nodeName === "tr" ) {
						that._createTrPlaceholder( that.currentItem, element );
					} else if ( nodeName === "img" ) {
						element.attr( "src", that.currentItem.attr( "src" ) );
					}

					if ( !className ) {
						element.css( "visibility", "hidden" );
					}

					return element;
				},
				update: function( container, p ) {

					// 1. If a className is set as 'placeholder option, we don't force sizes -
					// the class is responsible for that
					// 2. The option 'forcePlaceholderSize can be enabled to force it even if a
					// class name is specified
					if ( className && !o.forcePlaceholderSize ) {
						return;
					}

					// If the element doesn't have a actual height or width by itself (without
					// styles coming from a stylesheet), it receives the inline height and width
					// from the dragged item. Or, if it's a tbody or tr, it's going to have a height
					// anyway since we're populating them with <td>s above, but they're unlikely to
					// be the correct height on their own if the row heights are dynamic, so we'll
					// always assign the height of the dragged item given forcePlaceholderSize
					// is true.
					if ( !p.height() || ( o.forcePlaceholderSize &&
							( nodeName === "tbody" || nodeName === "tr" ) ) ) {
						p.height(
							that.currentItem.innerHeight() -
							parseInt( that.currentItem.css( "paddingTop" ) || 0, 10 ) -
							parseInt( that.currentItem.css( "paddingBottom" ) || 0, 10 ) );
					}
					if ( !p.width() ) {
						p.width(
							that.currentItem.innerWidth() -
							parseInt( that.currentItem.css( "paddingLeft" ) || 0, 10 ) -
							parseInt( that.currentItem.css( "paddingRight" ) || 0, 10 ) );
					}
				}
			};
		}

		//Create the placeholder
		that.placeholder = $( o.placeholder.element.call( that.element, that.currentItem ) );

		//Append it after the actual current item
		that.currentItem.after( that.placeholder );

		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
		o.placeholder.update( that, that.placeholder );

	},

	_createTrPlaceholder: function( sourceTr, targetTr ) {
		var that = this;

		sourceTr.children().each( function() {
			$( "<td>&#160;</td>", that.document[ 0 ] )
				.attr( "colspan", $( this ).attr( "colspan" ) || 1 )
				.appendTo( targetTr );
		} );
	},

	_contactContainers: function( event ) {
		var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom,
			floating, axis,
			innermostContainer = null,
			innermostIndex = null;

		// Get innermost container that intersects with item
		for ( i = this.containers.length - 1; i >= 0; i-- ) {

			// Never consider a container that's located within the item itself
			if ( $.contains( this.currentItem[ 0 ], this.containers[ i ].element[ 0 ] ) ) {
				continue;
			}

			if ( this._intersectsWith( this.containers[ i ].containerCache ) ) {

				// If we've already found a container and it's more "inner" than this, then continue
				if ( innermostContainer &&
						$.contains(
							this.containers[ i ].element[ 0 ],
							innermostContainer.element[ 0 ] ) ) {
					continue;
				}

				innermostContainer = this.containers[ i ];
				innermostIndex = i;

			} else {

				// container doesn't intersect. trigger "out" event if necessary
				if ( this.containers[ i ].containerCache.over ) {
					this.containers[ i ]._trigger( "out", event, this._uiHash( this ) );
					this.containers[ i ].containerCache.over = 0;
				}
			}

		}

		// If no intersecting containers found, return
		if ( !innermostContainer ) {
			return;
		}

		// Move the item into the container if it's not there already
		if ( this.containers.length === 1 ) {
			if ( !this.containers[ innermostIndex ].containerCache.over ) {
				this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
				this.containers[ innermostIndex ].containerCache.over = 1;
			}
		} else {

			// When entering a new container, we will find the item with the least distance and
			// append our item near it
			dist = 10000;
			itemWithLeastDistance = null;
			floating = innermostContainer.floating || this._isFloating( this.currentItem );
			posProperty = floating ? "left" : "top";
			sizeProperty = floating ? "width" : "height";
			axis = floating ? "pageX" : "pageY";

			for ( j = this.items.length - 1; j >= 0; j-- ) {
				if ( !$.contains(
						this.containers[ innermostIndex ].element[ 0 ], this.items[ j ].item[ 0 ] )
				) {
					continue;
				}
				if ( this.items[ j ].item[ 0 ] === this.currentItem[ 0 ] ) {
					continue;
				}

				cur = this.items[ j ].item.offset()[ posProperty ];
				nearBottom = false;
				if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {
					nearBottom = true;
				}

				if ( Math.abs( event[ axis ] - cur ) < dist ) {
					dist = Math.abs( event[ axis ] - cur );
					itemWithLeastDistance = this.items[ j ];
					this.direction = nearBottom ? "up" : "down";
				}
			}

			//Check if dropOnEmpty is enabled
			if ( !itemWithLeastDistance && !this.options.dropOnEmpty ) {
				return;
			}

			if ( this.currentContainer === this.containers[ innermostIndex ] ) {
				if ( !this.currentContainer.containerCache.over ) {
					this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash() );
					this.currentContainer.containerCache.over = 1;
				}
				return;
			}

			if ( itemWithLeastDistance ) {
				this._rearrange( event, itemWithLeastDistance, null, true );
			} else {
				this._rearrange( event, null, this.containers[ innermostIndex ].element, true );
			}
			this._trigger( "change", event, this._uiHash() );
			this.containers[ innermostIndex ]._trigger( "change", event, this._uiHash( this ) );
			this.currentContainer = this.containers[ innermostIndex ];

			//Update the placeholder
			this.options.placeholder.update( this.currentContainer, this.placeholder );

			//Update scrollParent
			this.scrollParent = this.placeholder.scrollParent();

			//Update overflowOffset
			if ( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
					this.scrollParent[ 0 ].tagName !== "HTML" ) {
				this.overflowOffset = this.scrollParent.offset();
			}

			this.containers[ innermostIndex ]._trigger( "over", event, this._uiHash( this ) );
			this.containers[ innermostIndex ].containerCache.over = 1;
		}

	},

	_createHelper: function( event ) {

		var o = this.options,
			helper = typeof o.helper === "function" ?
				$( o.helper.apply( this.element[ 0 ], [ event, this.currentItem ] ) ) :
				( o.helper === "clone" ? this.currentItem.clone() : this.currentItem );

		//Add the helper to the DOM if that didn't happen already
		if ( !helper.parents( "body" ).length ) {
			this.appendTo[ 0 ].appendChild( helper[ 0 ] );
		}

		if ( helper[ 0 ] === this.currentItem[ 0 ] ) {
			this._storedCSS = {
				width: this.currentItem[ 0 ].style.width,
				height: this.currentItem[ 0 ].style.height,
				position: this.currentItem.css( "position" ),
				top: this.currentItem.css( "top" ),
				left: this.currentItem.css( "left" )
			};
		}

		if ( !helper[ 0 ].style.width || o.forceHelperSize ) {
			helper.width( this.currentItem.width() );
		}
		if ( !helper[ 0 ].style.height || o.forceHelperSize ) {
			helper.height( this.currentItem.height() );
		}

		return helper;

	},

	_adjustOffsetFromHelper: function( obj ) {
		if ( typeof obj === "string" ) {
			obj = obj.split( " " );
		}
		if ( Array.isArray( obj ) ) {
			obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };
		}
		if ( "left" in obj ) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ( "right" in obj ) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ( "top" in obj ) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ( "bottom" in obj ) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		this.offsetParent = this.helper.offsetParent();
		var po = this.offsetParent.offset();

		// This is a special case where we need to modify a offset calculated on start, since the
		// following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the
		// next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't
		// the document, which means that the scroll is included in the initial calculation of the
		// offset of the parent, and never recalculated upon drag
		if ( this.cssPosition === "absolute" && this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		// This needs to be actually done for all browsers, since pageX/pageY includes this
		// information with an ugly IE fix
		if ( this.offsetParent[ 0 ] === this.document[ 0 ].body ||
				( this.offsetParent[ 0 ].tagName &&
				this.offsetParent[ 0 ].tagName.toLowerCase() === "html" && $.ui.ie ) ) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + ( parseInt( this.offsetParent.css( "borderTopWidth" ), 10 ) || 0 ),
			left: po.left + ( parseInt( this.offsetParent.css( "borderLeftWidth" ), 10 ) || 0 )
		};

	},

	_getRelativeOffset: function() {

		if ( this.cssPosition === "relative" ) {
			var p = this.currentItem.position();
			return {
				top: p.top - ( parseInt( this.helper.css( "top" ), 10 ) || 0 ) +
					this.scrollParent.scrollTop(),
				left: p.left - ( parseInt( this.helper.css( "left" ), 10 ) || 0 ) +
					this.scrollParent.scrollLeft()
			};
		} else {
			return { top: 0, left: 0 };
		}

	},

	_cacheMargins: function() {
		this.margins = {
			left: ( parseInt( this.currentItem.css( "marginLeft" ), 10 ) || 0 ),
			top: ( parseInt( this.currentItem.css( "marginTop" ), 10 ) || 0 )
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var ce, co, over,
			o = this.options;
		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}
		if ( o.containment === "document" || o.containment === "window" ) {
			this.containment = [
				0 - this.offset.relative.left - this.offset.parent.left,
				0 - this.offset.relative.top - this.offset.parent.top,
				o.containment === "document" ?
					this.document.width() :
					this.window.width() - this.helperProportions.width - this.margins.left,
				( o.containment === "document" ?
					( this.document.height() || document.body.parentNode.scrollHeight ) :
					this.window.height() || this.document[ 0 ].body.parentNode.scrollHeight
				) - this.helperProportions.height - this.margins.top
			];
		}

		if ( !( /^(document|window|parent)$/ ).test( o.containment ) ) {
			ce = $( o.containment )[ 0 ];
			co = $( o.containment ).offset();
			over = ( $( ce ).css( "overflow" ) !== "hidden" );

			this.containment = [
				co.left + ( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) +
					( parseInt( $( ce ).css( "paddingLeft" ), 10 ) || 0 ) - this.margins.left,
				co.top + ( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) +
					( parseInt( $( ce ).css( "paddingTop" ), 10 ) || 0 ) - this.margins.top,
				co.left + ( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -
					( parseInt( $( ce ).css( "borderLeftWidth" ), 10 ) || 0 ) -
					( parseInt( $( ce ).css( "paddingRight" ), 10 ) || 0 ) -
					this.helperProportions.width - this.margins.left,
				co.top + ( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -
					( parseInt( $( ce ).css( "borderTopWidth" ), 10 ) || 0 ) -
					( parseInt( $( ce ).css( "paddingBottom" ), 10 ) || 0 ) -
					this.helperProportions.height - this.margins.top
			];
		}

	},

	_convertPositionTo: function( d, pos ) {

		if ( !pos ) {
			pos = this.position;
		}
		var mod = d === "absolute" ? 1 : -1,
			scroll = this.cssPosition === "absolute" &&
				!( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
					this.offsetParent :
					this.scrollParent,
			scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );

		return {
			top: (

				// The absolute mouse position
				pos.top	+

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top * mod -
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollTop() :
					( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod )
			),
			left: (

				// The absolute mouse position
				pos.left +

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left * mod +

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left * mod	-
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 :
					scroll.scrollLeft() ) * mod )
			)
		};

	},

	_generatePosition: function( event ) {

		var top, left,
			o = this.options,
			pageX = event.pageX,
			pageY = event.pageY,
			scroll = this.cssPosition === "absolute" &&
				!( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				$.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ?
					this.offsetParent :
					this.scrollParent,
				scrollIsRootNode = ( /(html|body)/i ).test( scroll[ 0 ].tagName );

		// This is another very weird special case that only happens for relative elements:
		// 1. If the css position is relative
		// 2. and the scroll parent is the document or similar to the offset parent
		// we have to refresh the relative offset during the scroll so there are no jumps
		if ( this.cssPosition === "relative" && !( this.scrollParent[ 0 ] !== this.document[ 0 ] &&
				this.scrollParent[ 0 ] !== this.offsetParent[ 0 ] ) ) {
			this.offset.relative = this._getRelativeOffset();
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		if ( this.originalPosition ) { //If we are not dragging yet, we won't check for options

			if ( this.containment ) {
				if ( event.pageX - this.offset.click.left < this.containment[ 0 ] ) {
					pageX = this.containment[ 0 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top < this.containment[ 1 ] ) {
					pageY = this.containment[ 1 ] + this.offset.click.top;
				}
				if ( event.pageX - this.offset.click.left > this.containment[ 2 ] ) {
					pageX = this.containment[ 2 ] + this.offset.click.left;
				}
				if ( event.pageY - this.offset.click.top > this.containment[ 3 ] ) {
					pageY = this.containment[ 3 ] + this.offset.click.top;
				}
			}

			if ( o.grid ) {
				top = this.originalPageY + Math.round( ( pageY - this.originalPageY ) /
					o.grid[ 1 ] ) * o.grid[ 1 ];
				pageY = this.containment ?
					( ( top - this.offset.click.top >= this.containment[ 1 ] &&
						top - this.offset.click.top <= this.containment[ 3 ] ) ?
							top :
							( ( top - this.offset.click.top >= this.containment[ 1 ] ) ?
								top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) :
								top;

				left = this.originalPageX + Math.round( ( pageX - this.originalPageX ) /
					o.grid[ 0 ] ) * o.grid[ 0 ];
				pageX = this.containment ?
					( ( left - this.offset.click.left >= this.containment[ 0 ] &&
						left - this.offset.click.left <= this.containment[ 2 ] ) ?
							left :
							( ( left - this.offset.click.left >= this.containment[ 0 ] ) ?
								left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) :
								left;
			}

		}

		return {
			top: (

				// The absolute mouse position
				pageY -

				// Click offset (relative to the element)
				this.offset.click.top -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.top -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.top +
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollTop() :
					( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) )
			),
			left: (

				// The absolute mouse position
				pageX -

				// Click offset (relative to the element)
				this.offset.click.left -

				// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.relative.left -

				// The offsetParent's offset without borders (offset + border)
				this.offset.parent.left +
				( ( this.cssPosition === "fixed" ?
					-this.scrollParent.scrollLeft() :
					scrollIsRootNode ? 0 : scroll.scrollLeft() ) )
			)
		};

	},

	_rearrange: function( event, i, a, hardRefresh ) {

		if ( a ) {
			a[ 0 ].appendChild( this.placeholder[ 0 ] );
		} else {
			i.item[ 0 ].parentNode.insertBefore( this.placeholder[ 0 ],
				( this.direction === "down" ? i.item[ 0 ] : i.item[ 0 ].nextSibling ) );
		}

		//Various things done here to improve the performance:
		// 1. we create a setTimeout, that calls refreshPositions
		// 2. on the instance, we have a counter variable, that get's higher after every append
		// 3. on the local scope, we copy the counter variable, and check in the timeout,
		// if it's still the same
		// 4. this lets only the last addition to the timeout stack through
		this.counter = this.counter ? ++this.counter : 1;
		var counter = this.counter;

		this._delay( function() {
			if ( counter === this.counter ) {

				//Precompute after each DOM insertion, NOT on mousemove
				this.refreshPositions( !hardRefresh );
			}
		} );

	},

	_clear: function( event, noPropagation ) {

		this.reverting = false;

		// We delay all events that have to be triggered to after the point where the placeholder
		// has been removed and everything else normalized again
		var i,
			delayedTriggers = [];

		// We first have to update the dom position of the actual currentItem
		// Note: don't do it if the current item is already removed (by a user), or it gets
		// reappended (see #4088)
		if ( !this._noFinalSort && this.currentItem.parent().length ) {
			this.placeholder.before( this.currentItem );
		}
		this._noFinalSort = null;

		if ( this.helper[ 0 ] === this.currentItem[ 0 ] ) {
			for ( i in this._storedCSS ) {
				if ( this._storedCSS[ i ] === "auto" || this._storedCSS[ i ] === "static" ) {
					this._storedCSS[ i ] = "";
				}
			}
			this.currentItem.css( this._storedCSS );
			this._removeClass( this.currentItem, "ui-sortable-helper" );
		} else {
			this.currentItem.show();
		}

		if ( this.fromOutside && !noPropagation ) {
			delayedTriggers.push( function( event ) {
				this._trigger( "receive", event, this._uiHash( this.fromOutside ) );
			} );
		}
		if ( ( this.fromOutside ||
				this.domPosition.prev !==
				this.currentItem.prev().not( ".ui-sortable-helper" )[ 0 ] ||
				this.domPosition.parent !== this.currentItem.parent()[ 0 ] ) && !noPropagation ) {

			// Trigger update callback if the DOM position has changed
			delayedTriggers.push( function( event ) {
				this._trigger( "update", event, this._uiHash() );
			} );
		}

		// Check if the items Container has Changed and trigger appropriate
		// events.
		if ( this !== this.currentContainer ) {
			if ( !noPropagation ) {
				delayedTriggers.push( function( event ) {
					this._trigger( "remove", event, this._uiHash() );
				} );
				delayedTriggers.push( ( function( c ) {
					return function( event ) {
						c._trigger( "receive", event, this._uiHash( this ) );
					};
				} ).call( this, this.currentContainer ) );
				delayedTriggers.push( ( function( c ) {
					return function( event ) {
						c._trigger( "update", event, this._uiHash( this ) );
					};
				} ).call( this, this.currentContainer ) );
			}
		}

		//Post events to containers
		function delayEvent( type, instance, container ) {
			return function( event ) {
				container._trigger( type, event, instance._uiHash( instance ) );
			};
		}
		for ( i = this.containers.length - 1; i >= 0; i-- ) {
			if ( !noPropagation ) {
				delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
			}
			if ( this.containers[ i ].containerCache.over ) {
				delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
				this.containers[ i ].containerCache.over = 0;
			}
		}

		//Do what was originally in plugins
		if ( this.storedCursor ) {
			this.document.find( "body" ).css( "cursor", this.storedCursor );
			this.storedStylesheet.remove();
		}
		if ( this._storedOpacity ) {
			this.helper.css( "opacity", this._storedOpacity );
		}
		if ( this._storedZIndex ) {
			this.helper.css( "zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex );
		}

		this.dragging = false;

		if ( !noPropagation ) {
			this._trigger( "beforeStop", event, this._uiHash() );
		}

		//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately,
		// it unbinds ALL events from the original node!
		this.placeholder[ 0 ].parentNode.removeChild( this.placeholder[ 0 ] );

		if ( !this.cancelHelperRemoval ) {
			if ( this.helper[ 0 ] !== this.currentItem[ 0 ] ) {
				this.helper.remove();
			}
			this.helper = null;
		}

		if ( !noPropagation ) {
			for ( i = 0; i < delayedTriggers.length; i++ ) {

				// Trigger all delayed events
				delayedTriggers[ i ].call( this, event );
			}
			this._trigger( "stop", event, this._uiHash() );
		}

		this.fromOutside = false;
		return !this.cancelHelperRemoval;

	},

	_trigger: function() {
		if ( $.Widget.prototype._trigger.apply( this, arguments ) === false ) {
			this.cancel();
		}
	},

	_uiHash: function( _inst ) {
		var inst = _inst || this;
		return {
			helper: inst.helper,
			placeholder: inst.placeholder || $( [] ),
			position: inst.position,
			originalPosition: inst.originalPosition,
			offset: inst.positionAbs,
			item: inst.currentItem,
			sender: _inst ? _inst.element : null
		};
	}

} );


/*!
 * jQuery UI Spinner 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Spinner
//>>group: Widgets
//>>description: Displays buttons to easily input numbers via the keyboard or mouse.
//>>docs: http://api.jqueryui.com/spinner/
//>>demos: http://jqueryui.com/spinner/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/spinner.css
//>>css.theme: ../../themes/base/theme.css


function spinnerModifier( fn ) {
	return function() {
		var previous = this.element.val();
		fn.apply( this, arguments );
		this._refresh();
		if ( previous !== this.element.val() ) {
			this._trigger( "change" );
		}
	};
}

$.widget( "ui.spinner", {
	version: "1.13.2",
	defaultElement: "<input>",
	widgetEventPrefix: "spin",
	options: {
		classes: {
			"ui-spinner": "ui-corner-all",
			"ui-spinner-down": "ui-corner-br",
			"ui-spinner-up": "ui-corner-tr"
		},
		culture: null,
		icons: {
			down: "ui-icon-triangle-1-s",
			up: "ui-icon-triangle-1-n"
		},
		incremental: true,
		max: null,
		min: null,
		numberFormat: null,
		page: 10,
		step: 1,

		change: null,
		spin: null,
		start: null,
		stop: null
	},

	_create: function() {

		// handle string values that need to be parsed
		this._setOption( "max", this.options.max );
		this._setOption( "min", this.options.min );
		this._setOption( "step", this.options.step );

		// Only format if there is a value, prevents the field from being marked
		// as invalid in Firefox, see #9573.
		if ( this.value() !== "" ) {

			// Format the value, but don't constrain.
			this._value( this.element.val(), true );
		}

		this._draw();
		this._on( this._events );
		this._refresh();

		// Turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the widget is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		} );
	},

	_getCreateOptions: function() {
		var options = this._super();
		var element = this.element;

		$.each( [ "min", "max", "step" ], function( i, option ) {
			var value = element.attr( option );
			if ( value != null && value.length ) {
				options[ option ] = value;
			}
		} );

		return options;
	},

	_events: {
		keydown: function( event ) {
			if ( this._start( event ) && this._keydown( event ) ) {
				event.preventDefault();
			}
		},
		keyup: "_stop",
		focus: function() {
			this.previous = this.element.val();
		},
		blur: function( event ) {
			if ( this.cancelBlur ) {
				delete this.cancelBlur;
				return;
			}

			this._stop();
			this._refresh();
			if ( this.previous !== this.element.val() ) {
				this._trigger( "change", event );
			}
		},
		mousewheel: function( event, delta ) {
			var activeElement = $.ui.safeActiveElement( this.document[ 0 ] );
			var isActive = this.element[ 0 ] === activeElement;

			if ( !isActive || !delta ) {
				return;
			}

			if ( !this.spinning && !this._start( event ) ) {
				return false;
			}

			this._spin( ( delta > 0 ? 1 : -1 ) * this.options.step, event );
			clearTimeout( this.mousewheelTimer );
			this.mousewheelTimer = this._delay( function() {
				if ( this.spinning ) {
					this._stop( event );
				}
			}, 100 );
			event.preventDefault();
		},
		"mousedown .ui-spinner-button": function( event ) {
			var previous;

			// We never want the buttons to have focus; whenever the user is
			// interacting with the spinner, the focus should be on the input.
			// If the input is focused then this.previous is properly set from
			// when the input first received focus. If the input is not focused
			// then we need to set this.previous based on the value before spinning.
			previous = this.element[ 0 ] === $.ui.safeActiveElement( this.document[ 0 ] ) ?
				this.previous : this.element.val();
			function checkFocus() {
				var isActive = this.element[ 0 ] === $.ui.safeActiveElement( this.document[ 0 ] );
				if ( !isActive ) {
					this.element.trigger( "focus" );
					this.previous = previous;

					// support: IE
					// IE sets focus asynchronously, so we need to check if focus
					// moved off of the input because the user clicked on the button.
					this._delay( function() {
						this.previous = previous;
					} );
				}
			}

			// Ensure focus is on (or stays on) the text field
			event.preventDefault();
			checkFocus.call( this );

			// Support: IE
			// IE doesn't prevent moving focus even with event.preventDefault()
			// so we set a flag to know when we should ignore the blur event
			// and check (again) if focus moved off of the input.
			this.cancelBlur = true;
			this._delay( function() {
				delete this.cancelBlur;
				checkFocus.call( this );
			} );

			if ( this._start( event ) === false ) {
				return;
			}

			this._repeat( null, $( event.currentTarget )
				.hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},
		"mouseup .ui-spinner-button": "_stop",
		"mouseenter .ui-spinner-button": function( event ) {

			// button will add ui-state-active if mouse was down while mouseleave and kept down
			if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
				return;
			}

			if ( this._start( event ) === false ) {
				return false;
			}
			this._repeat( null, $( event.currentTarget )
				.hasClass( "ui-spinner-up" ) ? 1 : -1, event );
		},

		// TODO: do we really want to consider this a stop?
		// shouldn't we just stop the repeater and wait until mouseup before
		// we trigger the stop event?
		"mouseleave .ui-spinner-button": "_stop"
	},

	// Support mobile enhanced option and make backcompat more sane
	_enhance: function() {
		this.uiSpinner = this.element
			.attr( "autocomplete", "off" )
			.wrap( "<span>" )
			.parent()

				// Add buttons
				.append(
					"<a></a><a></a>"
				);
	},

	_draw: function() {
		this._enhance();

		this._addClass( this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content" );
		this._addClass( "ui-spinner-input" );

		this.element.attr( "role", "spinbutton" );

		// Button bindings
		this.buttons = this.uiSpinner.children( "a" )
			.attr( "tabIndex", -1 )
			.attr( "aria-hidden", true )
			.button( {
				classes: {
					"ui-button": ""
				}
			} );

		// TODO: Right now button does not support classes this is already updated in button PR
		this._removeClass( this.buttons, "ui-corner-all" );

		this._addClass( this.buttons.first(), "ui-spinner-button ui-spinner-up" );
		this._addClass( this.buttons.last(), "ui-spinner-button ui-spinner-down" );
		this.buttons.first().button( {
			"icon": this.options.icons.up,
			"showLabel": false
		} );
		this.buttons.last().button( {
			"icon": this.options.icons.down,
			"showLabel": false
		} );

		// IE 6 doesn't understand height: 50% for the buttons
		// unless the wrapper has an explicit height
		if ( this.buttons.height() > Math.ceil( this.uiSpinner.height() * 0.5 ) &&
				this.uiSpinner.height() > 0 ) {
			this.uiSpinner.height( this.uiSpinner.height() );
		}
	},

	_keydown: function( event ) {
		var options = this.options,
			keyCode = $.ui.keyCode;

		switch ( event.keyCode ) {
		case keyCode.UP:
			this._repeat( null, 1, event );
			return true;
		case keyCode.DOWN:
			this._repeat( null, -1, event );
			return true;
		case keyCode.PAGE_UP:
			this._repeat( null, options.page, event );
			return true;
		case keyCode.PAGE_DOWN:
			this._repeat( null, -options.page, event );
			return true;
		}

		return false;
	},

	_start: function( event ) {
		if ( !this.spinning && this._trigger( "start", event ) === false ) {
			return false;
		}

		if ( !this.counter ) {
			this.counter = 1;
		}
		this.spinning = true;
		return true;
	},

	_repeat: function( i, steps, event ) {
		i = i || 500;

		clearTimeout( this.timer );
		this.timer = this._delay( function() {
			this._repeat( 40, steps, event );
		}, i );

		this._spin( steps * this.options.step, event );
	},

	_spin: function( step, event ) {
		var value = this.value() || 0;

		if ( !this.counter ) {
			this.counter = 1;
		}

		value = this._adjustValue( value + step * this._increment( this.counter ) );

		if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false ) {
			this._value( value );
			this.counter++;
		}
	},

	_increment: function( i ) {
		var incremental = this.options.incremental;

		if ( incremental ) {
			return typeof incremental === "function" ?
				incremental( i ) :
				Math.floor( i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1 );
		}

		return 1;
	},

	_precision: function() {
		var precision = this._precisionOf( this.options.step );
		if ( this.options.min !== null ) {
			precision = Math.max( precision, this._precisionOf( this.options.min ) );
		}
		return precision;
	},

	_precisionOf: function( num ) {
		var str = num.toString(),
			decimal = str.indexOf( "." );
		return decimal === -1 ? 0 : str.length - decimal - 1;
	},

	_adjustValue: function( value ) {
		var base, aboveMin,
			options = this.options;

		// Make sure we're at a valid step
		// - find out where we are relative to the base (min or 0)
		base = options.min !== null ? options.min : 0;
		aboveMin = value - base;

		// - round to the nearest step
		aboveMin = Math.round( aboveMin / options.step ) * options.step;

		// - rounding is based on 0, so adjust back to our base
		value = base + aboveMin;

		// Fix precision from bad JS floating point math
		value = parseFloat( value.toFixed( this._precision() ) );

		// Clamp the value
		if ( options.max !== null && value > options.max ) {
			return options.max;
		}
		if ( options.min !== null && value < options.min ) {
			return options.min;
		}

		return value;
	},

	_stop: function( event ) {
		if ( !this.spinning ) {
			return;
		}

		clearTimeout( this.timer );
		clearTimeout( this.mousewheelTimer );
		this.counter = 0;
		this.spinning = false;
		this._trigger( "stop", event );
	},

	_setOption: function( key, value ) {
		var prevValue, first, last;

		if ( key === "culture" || key === "numberFormat" ) {
			prevValue = this._parse( this.element.val() );
			this.options[ key ] = value;
			this.element.val( this._format( prevValue ) );
			return;
		}

		if ( key === "max" || key === "min" || key === "step" ) {
			if ( typeof value === "string" ) {
				value = this._parse( value );
			}
		}
		if ( key === "icons" ) {
			first = this.buttons.first().find( ".ui-icon" );
			this._removeClass( first, null, this.options.icons.up );
			this._addClass( first, null, value.up );
			last = this.buttons.last().find( ".ui-icon" );
			this._removeClass( last, null, this.options.icons.down );
			this._addClass( last, null, value.down );
		}

		this._super( key, value );
	},

	_setOptionDisabled: function( value ) {
		this._super( value );

		this._toggleClass( this.uiSpinner, null, "ui-state-disabled", !!value );
		this.element.prop( "disabled", !!value );
		this.buttons.button( value ? "disable" : "enable" );
	},

	_setOptions: spinnerModifier( function( options ) {
		this._super( options );
	} ),

	_parse: function( val ) {
		if ( typeof val === "string" && val !== "" ) {
			val = window.Globalize && this.options.numberFormat ?
				Globalize.parseFloat( val, 10, this.options.culture ) : +val;
		}
		return val === "" || isNaN( val ) ? null : val;
	},

	_format: function( value ) {
		if ( value === "" ) {
			return "";
		}
		return window.Globalize && this.options.numberFormat ?
			Globalize.format( value, this.options.numberFormat, this.options.culture ) :
			value;
	},

	_refresh: function() {
		this.element.attr( {
			"aria-valuemin": this.options.min,
			"aria-valuemax": this.options.max,

			// TODO: what should we do with values that can't be parsed?
			"aria-valuenow": this._parse( this.element.val() )
		} );
	},

	isValid: function() {
		var value = this.value();

		// Null is invalid
		if ( value === null ) {
			return false;
		}

		// If value gets adjusted, it's invalid
		return value === this._adjustValue( value );
	},

	// Update the value without triggering change
	_value: function( value, allowAny ) {
		var parsed;
		if ( value !== "" ) {
			parsed = this._parse( value );
			if ( parsed !== null ) {
				if ( !allowAny ) {
					parsed = this._adjustValue( parsed );
				}
				value = this._format( parsed );
			}
		}
		this.element.val( value );
		this._refresh();
	},

	_destroy: function() {
		this.element
			.prop( "disabled", false )
			.removeAttr( "autocomplete role aria-valuemin aria-valuemax aria-valuenow" );

		this.uiSpinner.replaceWith( this.element );
	},

	stepUp: spinnerModifier( function( steps ) {
		this._stepUp( steps );
	} ),
	_stepUp: function( steps ) {
		if ( this._start() ) {
			this._spin( ( steps || 1 ) * this.options.step );
			this._stop();
		}
	},

	stepDown: spinnerModifier( function( steps ) {
		this._stepDown( steps );
	} ),
	_stepDown: function( steps ) {
		if ( this._start() ) {
			this._spin( ( steps || 1 ) * -this.options.step );
			this._stop();
		}
	},

	pageUp: spinnerModifier( function( pages ) {
		this._stepUp( ( pages || 1 ) * this.options.page );
	} ),

	pageDown: spinnerModifier( function( pages ) {
		this._stepDown( ( pages || 1 ) * this.options.page );
	} ),

	value: function( newVal ) {
		if ( !arguments.length ) {
			return this._parse( this.element.val() );
		}
		spinnerModifier( this._value ).call( this, newVal );
	},

	widget: function() {
		return this.uiSpinner;
	}
} );

// DEPRECATED
// TODO: switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for spinner html extension points
	$.widget( "ui.spinner", $.ui.spinner, {
		_enhance: function() {
			this.uiSpinner = this.element
				.attr( "autocomplete", "off" )
				.wrap( this._uiSpinnerHtml() )
				.parent()

					// Add buttons
					.append( this._buttonHtml() );
		},
		_uiSpinnerHtml: function() {
			return "<span>";
		},

		_buttonHtml: function() {
			return "<a></a><a></a>";
		}
	} );
}

var widgetsSpinner = $.ui.spinner;


/*!
 * jQuery UI Tabs 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Tabs
//>>group: Widgets
//>>description: Transforms a set of container elements into a tab structure.
//>>docs: http://api.jqueryui.com/tabs/
//>>demos: http://jqueryui.com/tabs/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/tabs.css
//>>css.theme: ../../themes/base/theme.css


$.widget( "ui.tabs", {
	version: "1.13.2",
	delay: 300,
	options: {
		active: null,
		classes: {
			"ui-tabs": "ui-corner-all",
			"ui-tabs-nav": "ui-corner-all",
			"ui-tabs-panel": "ui-corner-bottom",
			"ui-tabs-tab": "ui-corner-top"
		},
		collapsible: false,
		event: "click",
		heightStyle: "content",
		hide: null,
		show: null,

		// Callbacks
		activate: null,
		beforeActivate: null,
		beforeLoad: null,
		load: null
	},

	_isLocal: ( function() {
		var rhash = /#.*$/;

		return function( anchor ) {
			var anchorUrl, locationUrl;

			anchorUrl = anchor.href.replace( rhash, "" );
			locationUrl = location.href.replace( rhash, "" );

			// Decoding may throw an error if the URL isn't UTF-8 (#9518)
			try {
				anchorUrl = decodeURIComponent( anchorUrl );
			} catch ( error ) {}
			try {
				locationUrl = decodeURIComponent( locationUrl );
			} catch ( error ) {}

			return anchor.hash.length > 1 && anchorUrl === locationUrl;
		};
	} )(),

	_create: function() {
		var that = this,
			options = this.options;

		this.running = false;

		this._addClass( "ui-tabs", "ui-widget ui-widget-content" );
		this._toggleClass( "ui-tabs-collapsible", null, options.collapsible );

		this._processTabs();
		options.active = this._initialActive();

		// Take disabling tabs via class attribute from HTML
		// into account and update option properly.
		if ( Array.isArray( options.disabled ) ) {
			options.disabled = $.uniqueSort( options.disabled.concat(
				$.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
					return that.tabs.index( li );
				} )
			) ).sort();
		}

		// Check for length avoids error when initializing empty list
		if ( this.options.active !== false && this.anchors.length ) {
			this.active = this._findActive( options.active );
		} else {
			this.active = $();
		}

		this._refresh();

		if ( this.active.length ) {
			this.load( options.active );
		}
	},

	_initialActive: function() {
		var active = this.options.active,
			collapsible = this.options.collapsible,
			locationHash = location.hash.substring( 1 );

		if ( active === null ) {

			// check the fragment identifier in the URL
			if ( locationHash ) {
				this.tabs.each( function( i, tab ) {
					if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
						active = i;
						return false;
					}
				} );
			}

			// Check for a tab marked active via a class
			if ( active === null ) {
				active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
			}

			// No active tab, set to false
			if ( active === null || active === -1 ) {
				active = this.tabs.length ? 0 : false;
			}
		}

		// Handle numbers: negative, out of range
		if ( active !== false ) {
			active = this.tabs.index( this.tabs.eq( active ) );
			if ( active === -1 ) {
				active = collapsible ? false : 0;
			}
		}

		// Don't allow collapsible: false and active: false
		if ( !collapsible && active === false && this.anchors.length ) {
			active = 0;
		}

		return active;
	},

	_getCreateEventData: function() {
		return {
			tab: this.active,
			panel: !this.active.length ? $() : this._getPanelForTab( this.active )
		};
	},

	_tabKeydown: function( event ) {
		var focusedTab = $( $.ui.safeActiveElement( this.document[ 0 ] ) ).closest( "li" ),
			selectedIndex = this.tabs.index( focusedTab ),
			goingForward = true;

		if ( this._handlePageNav( event ) ) {
			return;
		}

		switch ( event.keyCode ) {
		case $.ui.keyCode.RIGHT:
		case $.ui.keyCode.DOWN:
			selectedIndex++;
			break;
		case $.ui.keyCode.UP:
		case $.ui.keyCode.LEFT:
			goingForward = false;
			selectedIndex--;
			break;
		case $.ui.keyCode.END:
			selectedIndex = this.anchors.length - 1;
			break;
		case $.ui.keyCode.HOME:
			selectedIndex = 0;
			break;
		case $.ui.keyCode.SPACE:

			// Activate only, no collapsing
			event.preventDefault();
			clearTimeout( this.activating );
			this._activate( selectedIndex );
			return;
		case $.ui.keyCode.ENTER:

			// Toggle (cancel delayed activation, allow collapsing)
			event.preventDefault();
			clearTimeout( this.activating );

			// Determine if we should collapse or activate
			this._activate( selectedIndex === this.options.active ? false : selectedIndex );
			return;
		default:
			return;
		}

		// Focus the appropriate tab, based on which key was pressed
		event.preventDefault();
		clearTimeout( this.activating );
		selectedIndex = this._focusNextTab( selectedIndex, goingForward );

		// Navigating with control/command key will prevent automatic activation
		if ( !event.ctrlKey && !event.metaKey ) {

			// Update aria-selected immediately so that AT think the tab is already selected.
			// Otherwise AT may confuse the user by stating that they need to activate the tab,
			// but the tab will already be activated by the time the announcement finishes.
			focusedTab.attr( "aria-selected", "false" );
			this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

			this.activating = this._delay( function() {
				this.option( "active", selectedIndex );
			}, this.delay );
		}
	},

	_panelKeydown: function( event ) {
		if ( this._handlePageNav( event ) ) {
			return;
		}

		// Ctrl+up moves focus to the current tab
		if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
			event.preventDefault();
			this.active.trigger( "focus" );
		}
	},

	// Alt+page up/down moves focus to the previous/next tab (and activates)
	_handlePageNav: function( event ) {
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
			this._activate( this._focusNextTab( this.options.active - 1, false ) );
			return true;
		}
		if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
			this._activate( this._focusNextTab( this.options.active + 1, true ) );
			return true;
		}
	},

	_findNextTab: function( index, goingForward ) {
		var lastTabIndex = this.tabs.length - 1;

		function constrain() {
			if ( index > lastTabIndex ) {
				index = 0;
			}
			if ( index < 0 ) {
				index = lastTabIndex;
			}
			return index;
		}

		while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
			index = goingForward ? index + 1 : index - 1;
		}

		return index;
	},

	_focusNextTab: function( index, goingForward ) {
		index = this._findNextTab( index, goingForward );
		this.tabs.eq( index ).trigger( "focus" );
		return index;
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {

			// _activate() will handle invalid values and update this.options
			this._activate( value );
			return;
		}

		this._super( key, value );

		if ( key === "collapsible" ) {
			this._toggleClass( "ui-tabs-collapsible", null, value );

			// Setting collapsible: false while collapsed; open first panel
			if ( !value && this.options.active === false ) {
				this._activate( 0 );
			}
		}

		if ( key === "event" ) {
			this._setupEvents( value );
		}

		if ( key === "heightStyle" ) {
			this._setupHeightStyle( value );
		}
	},

	_sanitizeSelector: function( hash ) {
		return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
	},

	refresh: function() {
		var options = this.options,
			lis = this.tablist.children( ":has(a[href])" );

		// Get disabled tabs from class attribute from HTML
		// this will get converted to a boolean if needed in _refresh()
		options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
			return lis.index( tab );
		} );

		this._processTabs();

		// Was collapsed or no tabs
		if ( options.active === false || !this.anchors.length ) {
			options.active = false;
			this.active = $();

		// was active, but active tab is gone
		} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {

			// all remaining tabs are disabled
			if ( this.tabs.length === options.disabled.length ) {
				options.active = false;
				this.active = $();

			// activate previous tab
			} else {
				this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
			}

		// was active, active tab still exists
		} else {

			// make sure active index is correct
			options.active = this.tabs.index( this.active );
		}

		this._refresh();
	},

	_refresh: function() {
		this._setOptionDisabled( this.options.disabled );
		this._setupEvents( this.options.event );
		this._setupHeightStyle( this.options.heightStyle );

		this.tabs.not( this.active ).attr( {
			"aria-selected": "false",
			"aria-expanded": "false",
			tabIndex: -1
		} );
		this.panels.not( this._getPanelForTab( this.active ) )
			.hide()
			.attr( {
				"aria-hidden": "true"
			} );

		// Make sure one tab is in the tab order
		if ( !this.active.length ) {
			this.tabs.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active
				.attr( {
					"aria-selected": "true",
					"aria-expanded": "true",
					tabIndex: 0
				} );
			this._addClass( this.active, "ui-tabs-active", "ui-state-active" );
			this._getPanelForTab( this.active )
				.show()
				.attr( {
					"aria-hidden": "false"
				} );
		}
	},

	_processTabs: function() {
		var that = this,
			prevTabs = this.tabs,
			prevAnchors = this.anchors,
			prevPanels = this.panels;

		this.tablist = this._getList().attr( "role", "tablist" );
		this._addClass( this.tablist, "ui-tabs-nav",
			"ui-helper-reset ui-helper-clearfix ui-widget-header" );

		// Prevent users from focusing disabled tabs via click
		this.tablist
			.on( "mousedown" + this.eventNamespace, "> li", function( event ) {
				if ( $( this ).is( ".ui-state-disabled" ) ) {
					event.preventDefault();
				}
			} )

			// Support: IE <9
			// Preventing the default action in mousedown doesn't prevent IE
			// from focusing the element, so if the anchor gets focused, blur.
			// We don't have to worry about focusing the previously focused
			// element since clicking on a non-focusable element should focus
			// the body anyway.
			.on( "focus" + this.eventNamespace, ".ui-tabs-anchor", function() {
				if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {
					this.blur();
				}
			} );

		this.tabs = this.tablist.find( "> li:has(a[href])" )
			.attr( {
				role: "tab",
				tabIndex: -1
			} );
		this._addClass( this.tabs, "ui-tabs-tab", "ui-state-default" );

		this.anchors = this.tabs.map( function() {
			return $( "a", this )[ 0 ];
		} )
			.attr( {
				tabIndex: -1
			} );
		this._addClass( this.anchors, "ui-tabs-anchor" );

		this.panels = $();

		this.anchors.each( function( i, anchor ) {
			var selector, panel, panelId,
				anchorId = $( anchor ).uniqueId().attr( "id" ),
				tab = $( anchor ).closest( "li" ),
				originalAriaControls = tab.attr( "aria-controls" );

			// Inline tab
			if ( that._isLocal( anchor ) ) {
				selector = anchor.hash;
				panelId = selector.substring( 1 );
				panel = that.element.find( that._sanitizeSelector( selector ) );

			// remote tab
			} else {

				// If the tab doesn't already have aria-controls,
				// generate an id by using a throw-away element
				panelId = tab.attr( "aria-controls" ) || $( {} ).uniqueId()[ 0 ].id;
				selector = "#" + panelId;
				panel = that.element.find( selector );
				if ( !panel.length ) {
					panel = that._createPanel( panelId );
					panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
				}
				panel.attr( "aria-live", "polite" );
			}

			if ( panel.length ) {
				that.panels = that.panels.add( panel );
			}
			if ( originalAriaControls ) {
				tab.data( "ui-tabs-aria-controls", originalAriaControls );
			}
			tab.attr( {
				"aria-controls": panelId,
				"aria-labelledby": anchorId
			} );
			panel.attr( "aria-labelledby", anchorId );
		} );

		this.panels.attr( "role", "tabpanel" );
		this._addClass( this.panels, "ui-tabs-panel", "ui-widget-content" );

		// Avoid memory leaks (#10056)
		if ( prevTabs ) {
			this._off( prevTabs.not( this.tabs ) );
			this._off( prevAnchors.not( this.anchors ) );
			this._off( prevPanels.not( this.panels ) );
		}
	},

	// Allow overriding how to find the list for rare usage scenarios (#7715)
	_getList: function() {
		return this.tablist || this.element.find( "ol, ul" ).eq( 0 );
	},

	_createPanel: function( id ) {
		return $( "<div>" )
			.attr( "id", id )
			.data( "ui-tabs-destroy", true );
	},

	_setOptionDisabled: function( disabled ) {
		var currentItem, li, i;

		if ( Array.isArray( disabled ) ) {
			if ( !disabled.length ) {
				disabled = false;
			} else if ( disabled.length === this.anchors.length ) {
				disabled = true;
			}
		}

		// Disable tabs
		for ( i = 0; ( li = this.tabs[ i ] ); i++ ) {
			currentItem = $( li );
			if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
				currentItem.attr( "aria-disabled", "true" );
				this._addClass( currentItem, null, "ui-state-disabled" );
			} else {
				currentItem.removeAttr( "aria-disabled" );
				this._removeClass( currentItem, null, "ui-state-disabled" );
			}
		}

		this.options.disabled = disabled;

		this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null,
			disabled === true );
	},

	_setupEvents: function( event ) {
		var events = {};
		if ( event ) {
			$.each( event.split( " " ), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			} );
		}

		this._off( this.anchors.add( this.tabs ).add( this.panels ) );

		// Always prevent the default action, even when disabled
		this._on( true, this.anchors, {
			click: function( event ) {
				event.preventDefault();
			}
		} );
		this._on( this.anchors, events );
		this._on( this.tabs, { keydown: "_tabKeydown" } );
		this._on( this.panels, { keydown: "_panelKeydown" } );

		this._focusable( this.tabs );
		this._hoverable( this.tabs );
	},

	_setupHeightStyle: function( heightStyle ) {
		var maxHeight,
			parent = this.element.parent();

		if ( heightStyle === "fill" ) {
			maxHeight = parent.height();
			maxHeight -= this.element.outerHeight() - this.element.height();

			this.element.siblings( ":visible" ).each( function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			} );

			this.element.children().not( this.panels ).each( function() {
				maxHeight -= $( this ).outerHeight( true );
			} );

			this.panels.each( function() {
				$( this ).height( Math.max( 0, maxHeight -
					$( this ).innerHeight() + $( this ).height() ) );
			} )
				.css( "overflow", "auto" );
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.panels.each( function() {
				maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
			} ).height( maxHeight );
		}
	},

	_eventHandler: function( event ) {
		var options = this.options,
			active = this.active,
			anchor = $( event.currentTarget ),
			tab = anchor.closest( "li" ),
			clickedIsActive = tab[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : this._getPanelForTab( tab ),
			toHide = !active.length ? $() : this._getPanelForTab( active ),
			eventData = {
				oldTab: active,
				oldPanel: toHide,
				newTab: collapsing ? $() : tab,
				newPanel: toShow
			};

		event.preventDefault();

		if ( tab.hasClass( "ui-state-disabled" ) ||

				// tab is already loading
				tab.hasClass( "ui-tabs-loading" ) ||

				// can't switch durning an animation
				this.running ||

				// click on active header, but not collapsible
				( clickedIsActive && !options.collapsible ) ||

				// allow canceling activation
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.tabs.index( tab );

		this.active = clickedIsActive ? $() : tab;
		if ( this.xhr ) {
			this.xhr.abort();
		}

		if ( !toHide.length && !toShow.length ) {
			$.error( "jQuery UI Tabs: Mismatching fragment identifier." );
		}

		if ( toShow.length ) {
			this.load( this.tabs.index( tab ), event );
		}
		this._toggle( event, eventData );
	},

	// Handles show/hide for selecting tabs
	_toggle: function( event, eventData ) {
		var that = this,
			toShow = eventData.newPanel,
			toHide = eventData.oldPanel;

		this.running = true;

		function complete() {
			that.running = false;
			that._trigger( "activate", event, eventData );
		}

		function show() {
			that._addClass( eventData.newTab.closest( "li" ), "ui-tabs-active", "ui-state-active" );

			if ( toShow.length && that.options.show ) {
				that._show( toShow, that.options.show, complete );
			} else {
				toShow.show();
				complete();
			}
		}

		// Start out by hiding, then showing, then completing
		if ( toHide.length && this.options.hide ) {
			this._hide( toHide, this.options.hide, function() {
				that._removeClass( eventData.oldTab.closest( "li" ),
					"ui-tabs-active", "ui-state-active" );
				show();
			} );
		} else {
			this._removeClass( eventData.oldTab.closest( "li" ),
				"ui-tabs-active", "ui-state-active" );
			toHide.hide();
			show();
		}

		toHide.attr( "aria-hidden", "true" );
		eventData.oldTab.attr( {
			"aria-selected": "false",
			"aria-expanded": "false"
		} );

		// If we're switching tabs, remove the old tab from the tab order.
		// If we're opening from collapsed state, remove the previous tab from the tab order.
		// If we're collapsing, then keep the collapsing tab in the tab order.
		if ( toShow.length && toHide.length ) {
			eventData.oldTab.attr( "tabIndex", -1 );
		} else if ( toShow.length ) {
			this.tabs.filter( function() {
				return $( this ).attr( "tabIndex" ) === 0;
			} )
				.attr( "tabIndex", -1 );
		}

		toShow.attr( "aria-hidden", "false" );
		eventData.newTab.attr( {
			"aria-selected": "true",
			"aria-expanded": "true",
			tabIndex: 0
		} );
	},

	_activate: function( index ) {
		var anchor,
			active = this._findActive( index );

		// Trying to activate the already active panel
		if ( active[ 0 ] === this.active[ 0 ] ) {
			return;
		}

		// Trying to collapse, simulate a click on the current active header
		if ( !active.length ) {
			active = this.active;
		}

		anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
		this._eventHandler( {
			target: anchor,
			currentTarget: anchor,
			preventDefault: $.noop
		} );
	},

	_findActive: function( index ) {
		return index === false ? $() : this.tabs.eq( index );
	},

	_getIndex: function( index ) {

		// meta-function to give users option to provide a href string instead of a numerical index.
		if ( typeof index === "string" ) {
			index = this.anchors.index( this.anchors.filter( "[href$='" +
				$.escapeSelector( index ) + "']" ) );
		}

		return index;
	},

	_destroy: function() {
		if ( this.xhr ) {
			this.xhr.abort();
		}

		this.tablist
			.removeAttr( "role" )
			.off( this.eventNamespace );

		this.anchors
			.removeAttr( "role tabIndex" )
			.removeUniqueId();

		this.tabs.add( this.panels ).each( function() {
			if ( $.data( this, "ui-tabs-destroy" ) ) {
				$( this ).remove();
			} else {
				$( this ).removeAttr( "role tabIndex " +
					"aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded" );
			}
		} );

		this.tabs.each( function() {
			var li = $( this ),
				prev = li.data( "ui-tabs-aria-controls" );
			if ( prev ) {
				li
					.attr( "aria-controls", prev )
					.removeData( "ui-tabs-aria-controls" );
			} else {
				li.removeAttr( "aria-controls" );
			}
		} );

		this.panels.show();

		if ( this.options.heightStyle !== "content" ) {
			this.panels.css( "height", "" );
		}
	},

	enable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === false ) {
			return;
		}

		if ( index === undefined ) {
			disabled = false;
		} else {
			index = this._getIndex( index );
			if ( Array.isArray( disabled ) ) {
				disabled = $.map( disabled, function( num ) {
					return num !== index ? num : null;
				} );
			} else {
				disabled = $.map( this.tabs, function( li, num ) {
					return num !== index ? num : null;
				} );
			}
		}
		this._setOptionDisabled( disabled );
	},

	disable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === true ) {
			return;
		}

		if ( index === undefined ) {
			disabled = true;
		} else {
			index = this._getIndex( index );
			if ( $.inArray( index, disabled ) !== -1 ) {
				return;
			}
			if ( Array.isArray( disabled ) ) {
				disabled = $.merge( [ index ], disabled ).sort();
			} else {
				disabled = [ index ];
			}
		}
		this._setOptionDisabled( disabled );
	},

	load: function( index, event ) {
		index = this._getIndex( index );
		var that = this,
			tab = this.tabs.eq( index ),
			anchor = tab.find( ".ui-tabs-anchor" ),
			panel = this._getPanelForTab( tab ),
			eventData = {
				tab: tab,
				panel: panel
			},
			complete = function( jqXHR, status ) {
				if ( status === "abort" ) {
					that.panels.stop( false, true );
				}

				that._removeClass( tab, "ui-tabs-loading" );
				panel.removeAttr( "aria-busy" );

				if ( jqXHR === that.xhr ) {
					delete that.xhr;
				}
			};

		// Not remote
		if ( this._isLocal( anchor[ 0 ] ) ) {
			return;
		}

		this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );

		// Support: jQuery <1.8
		// jQuery <1.8 returns false if the request is canceled in beforeSend,
		// but as of 1.8, $.ajax() always returns a jqXHR object.
		if ( this.xhr && this.xhr.statusText !== "canceled" ) {
			this._addClass( tab, "ui-tabs-loading" );
			panel.attr( "aria-busy", "true" );

			this.xhr
				.done( function( response, status, jqXHR ) {

					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout( function() {
						panel.html( response );
						that._trigger( "load", event, eventData );

						complete( jqXHR, status );
					}, 1 );
				} )
				.fail( function( jqXHR, status ) {

					// support: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout( function() {
						complete( jqXHR, status );
					}, 1 );
				} );
		}
	},

	_ajaxSettings: function( anchor, event, eventData ) {
		var that = this;
		return {

			// Support: IE <11 only
			// Strip any hash that exists to prevent errors with the Ajax request
			url: anchor.attr( "href" ).replace( /#.*$/, "" ),
			beforeSend: function( jqXHR, settings ) {
				return that._trigger( "beforeLoad", event,
					$.extend( { jqXHR: jqXHR, ajaxSettings: settings }, eventData ) );
			}
		};
	},

	_getPanelForTab: function( tab ) {
		var id = $( tab ).attr( "aria-controls" );
		return this.element.find( this._sanitizeSelector( "#" + id ) );
	}
} );

// DEPRECATED
// TODO: Switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for ui-tab class (now ui-tabs-tab)
	$.widget( "ui.tabs", $.ui.tabs, {
		_processTabs: function() {
			this._superApply( arguments );
			this._addClass( this.tabs, "ui-tab" );
		}
	} );
}

var widgetsTabs = $.ui.tabs;


/*!
 * jQuery UI Tooltip 1.13.2
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Tooltip
//>>group: Widgets
//>>description: Shows additional information for any element on hover or focus.
//>>docs: http://api.jqueryui.com/tooltip/
//>>demos: http://jqueryui.com/tooltip/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/tooltip.css
//>>css.theme: ../../themes/base/theme.css


$.widget( "ui.tooltip", {
	version: "1.13.2",
	options: {
		classes: {
			"ui-tooltip": "ui-corner-all ui-widget-shadow"
		},
		content: function() {
			var title = $( this ).attr( "title" );

			// Escape title, since we're going from an attribute to raw HTML
			return $( "<a>" ).text( title ).html();
		},
		hide: true,

		// Disabled elements have inconsistent behavior across browsers (#8661)
		items: "[title]:not([disabled])",
		position: {
			my: "left top+15",
			at: "left bottom",
			collision: "flipfit flip"
		},
		show: true,
		track: false,

		// Callbacks
		close: null,
		open: null
	},

	_addDescribedBy: function( elem, id ) {
		var describedby = ( elem.attr( "aria-describedby" ) || "" ).split( /\s+/ );
		describedby.push( id );
		elem
			.data( "ui-tooltip-id", id )
			.attr( "aria-describedby", String.prototype.trim.call( describedby.join( " " ) ) );
	},

	_removeDescribedBy: function( elem ) {
		var id = elem.data( "ui-tooltip-id" ),
			describedby = ( elem.attr( "aria-describedby" ) || "" ).split( /\s+/ ),
			index = $.inArray( id, describedby );

		if ( index !== -1 ) {
			describedby.splice( index, 1 );
		}

		elem.removeData( "ui-tooltip-id" );
		describedby = String.prototype.trim.call( describedby.join( " " ) );
		if ( describedby ) {
			elem.attr( "aria-describedby", describedby );
		} else {
			elem.removeAttr( "aria-describedby" );
		}
	},

	_create: function() {
		this._on( {
			mouseover: "open",
			focusin: "open"
		} );

		// IDs of generated tooltips, needed for destroy
		this.tooltips = {};

		// IDs of parent tooltips where we removed the title attribute
		this.parents = {};

		// Append the aria-live region so tooltips announce correctly
		this.liveRegion = $( "<div>" )
			.attr( {
				role: "log",
				"aria-live": "assertive",
				"aria-relevant": "additions"
			} )
			.appendTo( this.document[ 0 ].body );
		this._addClass( this.liveRegion, null, "ui-helper-hidden-accessible" );

		this.disabledTitles = $( [] );
	},

	_setOption: function( key, value ) {
		var that = this;

		this._super( key, value );

		if ( key === "content" ) {
			$.each( this.tooltips, function( id, tooltipData ) {
				that._updateContent( tooltipData.element );
			} );
		}
	},

	_setOptionDisabled: function( value ) {
		this[ value ? "_disable" : "_enable" ]();
	},

	_disable: function() {
		var that = this;

		// Close open tooltips
		$.each( this.tooltips, function( id, tooltipData ) {
			var event = $.Event( "blur" );
			event.target = event.currentTarget = tooltipData.element[ 0 ];
			that.close( event, true );
		} );

		// Remove title attributes to prevent native tooltips
		this.disabledTitles = this.disabledTitles.add(
			this.element.find( this.options.items ).addBack()
				.filter( function() {
					var element = $( this );
					if ( element.is( "[title]" ) ) {
						return element
							.data( "ui-tooltip-title", element.attr( "title" ) )
							.removeAttr( "title" );
					}
				} )
		);
	},

	_enable: function() {

		// restore title attributes
		this.disabledTitles.each( function() {
			var element = $( this );
			if ( element.data( "ui-tooltip-title" ) ) {
				element.attr( "title", element.data( "ui-tooltip-title" ) );
			}
		} );
		this.disabledTitles = $( [] );
	},

	open: function( event ) {
		var that = this,
			target = $( event ? event.target : this.element )

				// we need closest here due to mouseover bubbling,
				// but always pointing at the same event target
				.closest( this.options.items );

		// No element to show a tooltip for or the tooltip is already open
		if ( !target.length || target.data( "ui-tooltip-id" ) ) {
			return;
		}

		if ( target.attr( "title" ) ) {
			target.data( "ui-tooltip-title", target.attr( "title" ) );
		}

		target.data( "ui-tooltip-open", true );

		// Kill parent tooltips, custom or native, for hover
		if ( event && event.type === "mouseover" ) {
			target.parents().each( function() {
				var parent = $( this ),
					blurEvent;
				if ( parent.data( "ui-tooltip-open" ) ) {
					blurEvent = $.Event( "blur" );
					blurEvent.target = blurEvent.currentTarget = this;
					that.close( blurEvent, true );
				}
				if ( parent.attr( "title" ) ) {
					parent.uniqueId();
					that.parents[ this.id ] = {
						element: this,
						title: parent.attr( "title" )
					};
					parent.attr( "title", "" );
				}
			} );
		}

		this._registerCloseHandlers( event, target );
		this._updateContent( target, event );
	},

	_updateContent: function( target, event ) {
		var content,
			contentOption = this.options.content,
			that = this,
			eventType = event ? event.type : null;

		if ( typeof contentOption === "string" || contentOption.nodeType ||
				contentOption.jquery ) {
			return this._open( event, target, contentOption );
		}

		content = contentOption.call( target[ 0 ], function( response ) {

			// IE may instantly serve a cached response for ajax requests
			// delay this call to _open so the other call to _open runs first
			that._delay( function() {

				// Ignore async response if tooltip was closed already
				if ( !target.data( "ui-tooltip-open" ) ) {
					return;
				}

				// JQuery creates a special event for focusin when it doesn't
				// exist natively. To improve performance, the native event
				// object is reused and the type is changed. Therefore, we can't
				// rely on the type being correct after the event finished
				// bubbling, so we set it back to the previous value. (#8740)
				if ( event ) {
					event.type = eventType;
				}
				this._open( event, target, response );
			} );
		} );
		if ( content ) {
			this._open( event, target, content );
		}
	},

	_open: function( event, target, content ) {
		var tooltipData, tooltip, delayedShow, a11yContent,
			positionOption = $.extend( {}, this.options.position );

		if ( !content ) {
			return;
		}

		// Content can be updated multiple times. If the tooltip already
		// exists, then just update the content and bail.
		tooltipData = this._find( target );
		if ( tooltipData ) {
			tooltipData.tooltip.find( ".ui-tooltip-content" ).html( content );
			return;
		}

		// If we have a title, clear it to prevent the native tooltip
		// we have to check first to avoid defining a title if none exists
		// (we don't want to cause an element to start matching [title])
		//
		// We use removeAttr only for key events, to allow IE to export the correct
		// accessible attributes. For mouse events, set to empty string to avoid
		// native tooltip showing up (happens only when removing inside mouseover).
		if ( target.is( "[title]" ) ) {
			if ( event && event.type === "mouseover" ) {
				target.attr( "title", "" );
			} else {
				target.removeAttr( "title" );
			}
		}

		tooltipData = this._tooltip( target );
		tooltip = tooltipData.tooltip;
		this._addDescribedBy( target, tooltip.attr( "id" ) );
		tooltip.find( ".ui-tooltip-content" ).html( content );

		// Support: Voiceover on OS X, JAWS on IE <= 9
		// JAWS announces deletions even when aria-relevant="additions"
		// Voiceover will sometimes re-read the entire log region's contents from the beginning
		this.liveRegion.children().hide();
		a11yContent = $( "<div>" ).html( tooltip.find( ".ui-tooltip-content" ).html() );
		a11yContent.removeAttr( "name" ).find( "[name]" ).removeAttr( "name" );
		a11yContent.removeAttr( "id" ).find( "[id]" ).removeAttr( "id" );
		a11yContent.appendTo( this.liveRegion );

		function position( event ) {
			positionOption.of = event;
			if ( tooltip.is( ":hidden" ) ) {
				return;
			}
			tooltip.position( positionOption );
		}
		if ( this.options.track && event && /^mouse/.test( event.type ) ) {
			this._on( this.document, {
				mousemove: position
			} );

			// trigger once to override element-relative positioning
			position( event );
		} else {
			tooltip.position( $.extend( {
				of: target
			}, this.options.position ) );
		}

		tooltip.hide();

		this._show( tooltip, this.options.show );

		// Handle tracking tooltips that are shown with a delay (#8644). As soon
		// as the tooltip is visible, position the tooltip using the most recent
		// event.
		// Adds the check to add the timers only when both delay and track options are set (#14682)
		if ( this.options.track && this.options.show && this.options.show.delay ) {
			delayedShow = this.delayedShow = setInterval( function() {
				if ( tooltip.is( ":visible" ) ) {
					position( positionOption.of );
					clearInterval( delayedShow );
				}
			}, 13 );
		}

		this._trigger( "open", event, { tooltip: tooltip } );
	},

	_registerCloseHandlers: function( event, target ) {
		var events = {
			keyup: function( event ) {
				if ( event.keyCode === $.ui.keyCode.ESCAPE ) {
					var fakeEvent = $.Event( event );
					fakeEvent.currentTarget = target[ 0 ];
					this.close( fakeEvent, true );
				}
			}
		};

		// Only bind remove handler for delegated targets. Non-delegated
		// tooltips will handle this in destroy.
		if ( target[ 0 ] !== this.element[ 0 ] ) {
			events.remove = function() {
				var targetElement = this._find( target );
				if ( targetElement ) {
					this._removeTooltip( targetElement.tooltip );
				}
			};
		}

		if ( !event || event.type === "mouseover" ) {
			events.mouseleave = "close";
		}
		if ( !event || event.type === "focusin" ) {
			events.focusout = "close";
		}
		this._on( true, target, events );
	},

	close: function( event ) {
		var tooltip,
			that = this,
			target = $( event ? event.currentTarget : this.element ),
			tooltipData = this._find( target );

		// The tooltip may already be closed
		if ( !tooltipData ) {

			// We set ui-tooltip-open immediately upon open (in open()), but only set the
			// additional data once there's actually content to show (in _open()). So even if the
			// tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in
			// the period between open() and _open().
			target.removeData( "ui-tooltip-open" );
			return;
		}

		tooltip = tooltipData.tooltip;

		// Disabling closes the tooltip, so we need to track when we're closing
		// to avoid an infinite loop in case the tooltip becomes disabled on close
		if ( tooltipData.closing ) {
			return;
		}

		// Clear the interval for delayed tracking tooltips
		clearInterval( this.delayedShow );

		// Only set title if we had one before (see comment in _open())
		// If the title attribute has changed since open(), don't restore
		if ( target.data( "ui-tooltip-title" ) && !target.attr( "title" ) ) {
			target.attr( "title", target.data( "ui-tooltip-title" ) );
		}

		this._removeDescribedBy( target );

		tooltipData.hiding = true;
		tooltip.stop( true );
		this._hide( tooltip, this.options.hide, function() {
			that._removeTooltip( $( this ) );
		} );

		target.removeData( "ui-tooltip-open" );
		this._off( target, "mouseleave focusout keyup" );

		// Remove 'remove' binding only on delegated targets
		if ( target[ 0 ] !== this.element[ 0 ] ) {
			this._off( target, "remove" );
		}
		this._off( this.document, "mousemove" );

		if ( event && event.type === "mouseleave" ) {
			$.each( this.parents, function( id, parent ) {
				$( parent.element ).attr( "title", parent.title );
				delete that.parents[ id ];
			} );
		}

		tooltipData.closing = true;
		this._trigger( "close", event, { tooltip: tooltip } );
		if ( !tooltipData.hiding ) {
			tooltipData.closing = false;
		}
	},

	_tooltip: function( element ) {
		var tooltip = $( "<div>" ).attr( "role", "tooltip" ),
			content = $( "<div>" ).appendTo( tooltip ),
			id = tooltip.uniqueId().attr( "id" );

		this._addClass( content, "ui-tooltip-content" );
		this._addClass( tooltip, "ui-tooltip", "ui-widget ui-widget-content" );

		tooltip.appendTo( this._appendTo( element ) );

		return this.tooltips[ id ] = {
			element: element,
			tooltip: tooltip
		};
	},

	_find: function( target ) {
		var id = target.data( "ui-tooltip-id" );
		return id ? this.tooltips[ id ] : null;
	},

	_removeTooltip: function( tooltip ) {

		// Clear the interval for delayed tracking tooltips
		clearInterval( this.delayedShow );

		tooltip.remove();
		delete this.tooltips[ tooltip.attr( "id" ) ];
	},

	_appendTo: function( target ) {
		var element = target.closest( ".ui-front, dialog" );

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},

	_destroy: function() {
		var that = this;

		// Close open tooltips
		$.each( this.tooltips, function( id, tooltipData ) {

			// Delegate to close method to handle common cleanup
			var event = $.Event( "blur" ),
				element = tooltipData.element;
			event.target = event.currentTarget = element[ 0 ];
			that.close( event, true );

			// Remove immediately; destroying an open tooltip doesn't use the
			// hide animation
			$( "#" + id ).remove();

			// Restore the title
			if ( element.data( "ui-tooltip-title" ) ) {

				// If the title attribute has changed since open(), don't restore
				if ( !element.attr( "title" ) ) {
					element.attr( "title", element.data( "ui-tooltip-title" ) );
				}
				element.removeData( "ui-tooltip-title" );
			}
		} );
		this.liveRegion.remove();
	}
} );

// DEPRECATED
// TODO: Switch return back to widget declaration at top of file when this is removed
if ( $.uiBackCompat !== false ) {

	// Backcompat for tooltipClass option
	$.widget( "ui.tooltip", $.ui.tooltip, {
		options: {
			tooltipClass: null
		},
		_tooltip: function() {
			var tooltipData = this._superApply( arguments );
			if ( this.options.tooltipClass ) {
				tooltipData.tooltip.addClass( this.options.tooltipClass );
			}
			return tooltipData;
		}
	} );
}

var widgetsTooltip = $.ui.tooltip;




} );

/***/ }),

/***/ "./style/visual.less":
/*!***************************!*\
  !*** ./style/visual.less ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axis.js":
/*!************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axis.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LabelLayoutStrategy": () => (/* reexport module object */ _labelLayoutStrategy__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   "applyCustomizedDomain": () => (/* binding */ applyCustomizedDomain),
/* harmony export */   "calculateAxisPrecision": () => (/* binding */ calculateAxisPrecision),
/* harmony export */   "columnDataTypeHasValue": () => (/* binding */ columnDataTypeHasValue),
/* harmony export */   "combineDomain": () => (/* binding */ combineDomain),
/* harmony export */   "createAxis": () => (/* binding */ createAxis),
/* harmony export */   "createAxisLabel": () => (/* binding */ createAxisLabel),
/* harmony export */   "createDomain": () => (/* binding */ createDomain),
/* harmony export */   "createFormatter": () => (/* binding */ createFormatter),
/* harmony export */   "createLinearScale": () => (/* binding */ createLinearScale),
/* harmony export */   "createNumericalScale": () => (/* binding */ createNumericalScale),
/* harmony export */   "createOrdinalScale": () => (/* binding */ createOrdinalScale),
/* harmony export */   "createOrdinalType": () => (/* binding */ createOrdinalType),
/* harmony export */   "createPointScale": () => (/* binding */ createPointScale),
/* harmony export */   "createScale": () => (/* binding */ createScale),
/* harmony export */   "createStackedAxis": () => (/* binding */ createStackedAxis),
/* harmony export */   "createValueDomain": () => (/* binding */ createValueDomain),
/* harmony export */   "diffScaled": () => (/* binding */ diffScaled),
/* harmony export */   "emptyDomain": () => (/* binding */ emptyDomain),
/* harmony export */   "ensureValuesInRange": () => (/* binding */ ensureValuesInRange),
/* harmony export */   "extent": () => (/* binding */ extent),
/* harmony export */   "findClosestXAxisIndex": () => (/* binding */ findClosestXAxisIndex),
/* harmony export */   "getBestNumberOfTicks": () => (/* binding */ getBestNumberOfTicks),
/* harmony export */   "getCategoryThickness": () => (/* binding */ getCategoryThickness),
/* harmony export */   "getCategoryValueType": () => (/* binding */ getCategoryValueType),
/* harmony export */   "getMargin": () => (/* binding */ getMargin),
/* harmony export */   "getMinTickValueInterval": () => (/* binding */ getMinTickValueInterval),
/* harmony export */   "getRangeForColumn": () => (/* binding */ getRangeForColumn),
/* harmony export */   "getRecommendedNumberOfTicksForXAxis": () => (/* binding */ getRecommendedNumberOfTicksForXAxis),
/* harmony export */   "getRecommendedNumberOfTicksForYAxis": () => (/* binding */ getRecommendedNumberOfTicksForYAxis),
/* harmony export */   "getRecommendedTickValues": () => (/* binding */ getRecommendedTickValues),
/* harmony export */   "getRecommendedTickValuesForAQuantitativeRange": () => (/* binding */ getRecommendedTickValuesForAQuantitativeRange),
/* harmony export */   "getRecommendedTickValuesForAnOrdinalRange": () => (/* binding */ getRecommendedTickValuesForAnOrdinalRange),
/* harmony export */   "getTickLabelMargins": () => (/* binding */ getTickLabelMargins),
/* harmony export */   "hasNonIntegerData": () => (/* binding */ hasNonIntegerData),
/* harmony export */   "invertOrdinalScale": () => (/* binding */ invertOrdinalScale),
/* harmony export */   "invertScale": () => (/* binding */ invertScale),
/* harmony export */   "isDateTime": () => (/* binding */ isDateTime),
/* harmony export */   "isLogScalePossible": () => (/* binding */ isLogScalePossible),
/* harmony export */   "isOrdinal": () => (/* binding */ isOrdinal),
/* harmony export */   "isOrdinalScale": () => (/* binding */ isOrdinalScale),
/* harmony export */   "lookupOrdinalIndex": () => (/* binding */ lookupOrdinalIndex),
/* harmony export */   "normalizeInfinityInScale": () => (/* binding */ normalizeInfinityInScale),
/* harmony export */   "normalizeNonFiniteNumber": () => (/* binding */ normalizeNonFiniteNumber),
/* harmony export */   "powerOfTen": () => (/* binding */ powerOfTen),
/* harmony export */   "scaleShouldClamp": () => (/* binding */ scaleShouldClamp),
/* harmony export */   "stackedAxisPadding": () => (/* binding */ stackedAxisPadding)
/* harmony export */ });
/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! d3-scale */ "./node_modules/d3-scale/src/band.js");
/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! d3-scale */ "./node_modules/d3-scale/src/log.js");
/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! d3-scale */ "./node_modules/d3-scale/src/linear.js");
/* harmony import */ var d3_axis__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-axis */ "./node_modules/d3-axis/src/axis.js");
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-array */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/bisect.js");
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! d3-array */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/min.js");
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! d3-array */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/max.js");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/valueType.js");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/* harmony import */ var _axisInterfaces__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./axisInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisInterfaces.js");
/* harmony import */ var _axisScale__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./axisScale */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisScale.js");
/* harmony import */ var _axisStyle__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./axisStyle */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisStyle.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var _labelLayoutStrategy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./labelLayoutStrategy */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/labelLayoutStrategy.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/



// powerbi.extensibility.utils.type

var ValueType = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.ValueType;



// powerbi.extensibility.utils.formatting

var DateTimeSequence = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_1__.dateTimeSequence.DateTimeSequence;
var valueFormatter = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_1__.valueFormatter;
var numberFormat = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_1__.formattingService.numberFormat;
const XLabelMaxAllowedOverflow = 35;
const TextHeightConstant = 10;
const MinTickCount = 2;
const DefaultBestTickCount = 3;
const ScalarTickLabelPadding = 3;
const TickLabelPadding = 2;
const MinOrdinalRectThickness = 20;
/**
 * Default ranges are for when we have a field chosen for the axis,
 * but no values are returned by the query.
 */
const emptyDomain = [0, 0];
const stackedAxisPadding = 5;
function getRecommendedNumberOfTicksForXAxis(availableWidth) {
    if (availableWidth < 300) {
        return 3;
    }
    if (availableWidth < 500) {
        return 5;
    }
    return 8;
}
function getRecommendedNumberOfTicksForYAxis(availableWidth) {
    if (availableWidth < 150) {
        return 3;
    }
    if (availableWidth < 300) {
        return 5;
    }
    return 8;
}
/**
 * Get the best number of ticks based on minimum value, maximum value,
 * measure metadata and max tick count.
 *
 * @param min The minimum of the data domain.
 * @param max The maximum of the data domain.
 * @param valuesMetadata The measure metadata array.
 * @param maxTickCount The max count of intervals.
 * @param isDateTime - flag to show single tick when min is equal to max.
 */
function getBestNumberOfTicks(min, max, valuesMetadata, maxTickCount, isDateTime) {
    if (isNaN(min) || isNaN(max)) {
        return DefaultBestTickCount;
    }
    if (maxTickCount <= 1 || (max <= 1 && min >= -1)) {
        return maxTickCount;
    }
    if (min === max) {
        // datetime needs to only show one tick value in this case so formatting works correctly
        if (isDateTime) {
            return 1;
        }
        return DefaultBestTickCount;
    }
    if (hasNonIntegerData(valuesMetadata)) {
        return maxTickCount;
    }
    // e.g. 5 - 2 + 1 = 4, => [2,3,4,5]
    return Math.min(max - min + 1, maxTickCount);
}
function hasNonIntegerData(valuesMetadata) {
    for (let i = 0, len = valuesMetadata.length; i < len; i++) {
        const currentMetadata = valuesMetadata[i];
        if (currentMetadata && currentMetadata.type && !currentMetadata.type.integer) {
            return true;
        }
    }
    return false;
}
function getRecommendedTickValues(maxTicks, scale, axisType, isScalar, minTickInterval) {
    if (!isScalar || isOrdinalScale(scale)) {
        return getRecommendedTickValuesForAnOrdinalRange(maxTicks, scale.domain());
    }
    else if (isDateTime(axisType)) {
        return getRecommendedTickValuesForADateTimeRange(maxTicks, scale.domain());
    }
    return getRecommendedTickValuesForAQuantitativeRange(maxTicks, scale, minTickInterval);
}
function getRecommendedTickValuesForAnOrdinalRange(maxTicks, labels) {
    const tickLabels = [];
    // return no ticks in this case
    if (maxTicks <= 0)
        return tickLabels;
    const len = labels.length;
    if (maxTicks > len)
        return labels;
    for (let i = 0, step = Math.ceil(len / maxTicks); i < len; i += step) {
        tickLabels.push(labels[i]);
    }
    return tickLabels;
}
function getRecommendedTickValuesForAQuantitativeRange(maxTicks, scale, minInterval) {
    let tickLabels = [];
    // if maxticks is zero return none
    if (maxTicks === 0)
        return tickLabels;
    const quantitiveScale = scale;
    if (quantitiveScale.ticks) {
        tickLabels = quantitiveScale.ticks(maxTicks);
        if (tickLabels.length > maxTicks && maxTicks > 1)
            tickLabels = quantitiveScale.ticks(maxTicks - 1);
        if (tickLabels.length < MinTickCount) {
            tickLabels = quantitiveScale.ticks(maxTicks + 1);
        }
        tickLabels = createTrueZeroTickLabel(tickLabels);
        if (minInterval && tickLabels.length > 1) {
            let tickInterval = tickLabels[1] - tickLabels[0];
            while (tickInterval > 0 && tickInterval < minInterval) {
                for (let i = 1; i < tickLabels.length; i++) {
                    tickLabels.splice(i, 1);
                }
                tickInterval = tickInterval * 2;
            }
            // keep at least two labels - the loop above may trim all but one if we have odd # of tick labels and dynamic range < minInterval
            if (tickLabels.length === 1) {
                tickLabels.push(tickLabels[0] + minInterval);
            }
        }
        return tickLabels;
    }
    return tickLabels;
}
/**
 * Round out very small zero tick values (e.g. -1e-33 becomes 0).
 *
 * @param ticks Array of numbers (from d3.scale.ticks([maxTicks])).
 * @param epsilon Max ratio of calculated tick interval which we will recognize as zero.
 *
 * e.g.
 *     ticks = [-2, -1, 1e-10, 3, 4]; epsilon = 1e-5;
 *     closeZero = 1e-5 * | 2 - 1 | = 1e-5
 *     // Tick values <= 1e-5 replaced with 0
 *     return [-2, -1, 0, 3, 4];
 */
function createTrueZeroTickLabel(ticks, epsilon = 1e-5) {
    if (!ticks || ticks.length < 2)
        return ticks;
    const closeZero = epsilon * Math.abs(ticks[1] - ticks[0]);
    return ticks.map((tick) => Math.abs(tick) <= closeZero ? 0 : tick);
}
function getRecommendedTickValuesForADateTimeRange(maxTicks, dataDomain) {
    let tickLabels = [];
    if (dataDomain[0] === 0 && dataDomain[1] === 0)
        return [];
    const dateTimeTickLabels = DateTimeSequence.CALCULATE(new Date(dataDomain[0]), new Date(dataDomain[1]), maxTicks).sequence;
    tickLabels = dateTimeTickLabels.map(d => d.getTime());
    tickLabels = ensureValuesInRange(tickLabels, dataDomain[0], dataDomain[1]);
    return tickLabels;
}
function normalizeLinearDomain(domain) {
    if (isNaN(domain.min) || isNaN(domain.max)) {
        domain.min = emptyDomain[0];
        domain.max = emptyDomain[1];
    }
    else if (domain.min === domain.max) {
        // d3 linear scale will give zero tickValues if max === min, so extend a little
        domain.min = domain.min < 0 ? domain.min * 1.2 : domain.min * 0.8;
        domain.max = domain.max < 0 ? domain.max * 0.8 : domain.max * 1.2;
    }
    else {
        // Check that min is very small and is a negligable portion of the whole domain.
        // (fix floating pt precision bugs)
        // sometimes highlight value math causes small negative numbers which makes the axis add
        // a large tick interval instead of just rendering at zero.
        if (Math.abs(domain.min) < 0.0001 && domain.min / (domain.max - domain.min) < 0.0001) {
            domain.min = 0;
        }
    }
    return domain;
}
/* eslint-disable-next-line @typescript-eslint/no-unused-vars */
function getMargin(availableWidth, availableHeight, xMargin, yMargin) {
    return {
        top: 20,
        right: 30,
        bottom: 40,
        left: 30
    };
}
// TODO: Put the parameters into one object
/* eslint-disable-next-line max-lines-per-function*/
function getTickLabelMargins(viewport, yMarginLimit, textWidthMeasurer, textHeightMeasurer, axes, bottomMarginLimit, properties, scrollbarVisible, showOnRight, renderXAxis, renderY1Axis, renderY2Axis) {
    const xAxisProperties = axes.x;
    const y1AxisProperties = axes.y1;
    const y2AxisProperties = axes.y2;
    const xLabels = xAxisProperties.values;
    const y1Labels = y1AxisProperties.values;
    let leftOverflow = 0;
    let rightOverflow = 0;
    let maxWidthY1 = 0;
    let maxWidthY2 = 0;
    let xMax = 0; // bottom margin
    const ordinalLabelOffset = xAxisProperties.categoryThickness ? xAxisProperties.categoryThickness / 2 : 0;
    const scaleIsOrdinal = isOrdinalScale(xAxisProperties.scale);
    const hasHierarchy = !arrayIsEmpty(axes.xStack);
    let xLabelOuterPadding = 0;
    if (xAxisProperties.outerPadding !== undefined) {
        xLabelOuterPadding = xAxisProperties.outerPadding;
    }
    else if (xAxisProperties.xLabelMaxWidth !== undefined) {
        xLabelOuterPadding = Math.max(0, (viewport.width - xAxisProperties.xLabelMaxWidth * xLabels.length) / 2);
    }
    let rotation;
    if (scrollbarVisible || hasHierarchy)
        rotation = _labelLayoutStrategy__WEBPACK_IMPORTED_MODULE_2__.DefaultRotationWithScrollbar;
    else
        rotation = _labelLayoutStrategy__WEBPACK_IMPORTED_MODULE_2__.DefaultRotation;
    if (renderY1Axis) {
        for (let i = 0, len = y1Labels.length; i < len; i++) {
            properties.text = y1Labels[i];
            maxWidthY1 = Math.max(maxWidthY1, textWidthMeasurer(properties));
        }
    }
    if (y2AxisProperties && renderY2Axis) {
        const y2Labels = y2AxisProperties.values;
        for (let i = 0, len = y2Labels.length; i < len; i++) {
            properties.text = y2Labels[i];
            maxWidthY2 = Math.max(maxWidthY2, textWidthMeasurer(properties));
        }
    }
    const textHeight = textHeightMeasurer(properties);
    const maxNumLines = Math.floor(bottomMarginLimit / textHeight);
    const xScale = xAxisProperties.scale;
    const xDomain = xScale.domain();
    if (renderXAxis && xLabels.length > 0) {
        for (let i = 0, len = xLabels.length; i < len; i++) {
            // find the max height of the x-labels, perhaps rotated or wrapped
            let height;
            properties.text = xLabels[i];
            let width = textWidthMeasurer(properties);
            if (xAxisProperties.willLabelsWordBreak) {
                // Split label and count rows
                const wordBreaks = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_1__.wordBreaker.splitByWidth(properties.text, properties, textWidthMeasurer, xAxisProperties.xLabelMaxWidth, maxNumLines);
                height = wordBreaks.length * textHeight;
                // word wrapping will truncate at xLabelMaxWidth
                width = xAxisProperties.xLabelMaxWidth;
            }
            else if (!xAxisProperties.willLabelsFit && scaleIsOrdinal) {
                height = width * rotation.sine;
                width = width * rotation.cosine;
            }
            else {
                height = TextHeightConstant;
            }
            // calculate left and right overflow due to wide X labels
            // (Note: no right overflow when rotated)
            if (i === 0) {
                if (scaleIsOrdinal) {
                    if (!xAxisProperties.willLabelsFit /*rotated text*/)
                        leftOverflow = width - ordinalLabelOffset - xLabelOuterPadding;
                    else
                        leftOverflow = (width / 2) - ordinalLabelOffset - xLabelOuterPadding;
                    leftOverflow = Math.max(leftOverflow, 0);
                }
                else if (xDomain.length > 1) {
                    // Scalar - do some math
                    const xPos = xScale(xDomain[0]);
                    // xPos already incorporates xLabelOuterPadding, don't subtract it twice
                    leftOverflow = (width / 2) - xPos;
                    leftOverflow = Math.max(leftOverflow, 0);
                }
            }
            else if (i === len - 1) {
                if (scaleIsOrdinal) {
                    // if we are rotating text (!willLabelsFit) there won't be any right overflow
                    if (xAxisProperties.willLabelsFit || xAxisProperties.willLabelsWordBreak) {
                        // assume this label is placed near the edge
                        rightOverflow = (width / 2) - ordinalLabelOffset - xLabelOuterPadding;
                        rightOverflow = Math.max(rightOverflow, 0);
                    }
                }
                else if (xDomain.length > 1) {
                    // Scalar - do some math
                    const xPos = xScale(xDomain[1]);
                    // xPos already incorporates xLabelOuterPadding, don't subtract it twice
                    rightOverflow = (width / 2) - (viewport.width - xPos);
                    rightOverflow = Math.max(rightOverflow, 0);
                }
            }
            xMax = Math.max(xMax, height);
        }
        // trim any actual overflow to the limit
        leftOverflow = Math.min(leftOverflow, XLabelMaxAllowedOverflow);
        rightOverflow = Math.min(rightOverflow, XLabelMaxAllowedOverflow);
    }
    let rightMargin = 0, leftMargin = 0, bottomMargin = Math.min(Math.ceil(xMax), bottomMarginLimit);
    if (showOnRight) {
        leftMargin = Math.min(Math.max(leftOverflow, maxWidthY2), yMarginLimit);
        rightMargin = Math.min(Math.max(rightOverflow, maxWidthY1), yMarginLimit);
    }
    else {
        leftMargin = Math.min(Math.max(leftOverflow, maxWidthY1), yMarginLimit);
        rightMargin = Math.min(Math.max(rightOverflow, maxWidthY2), yMarginLimit);
    }
    if (hasHierarchy) {
        bottomMargin += (textHeight + stackedAxisPadding) * (axes.xStack.length - 1);
    }
    return {
        xMax: Math.ceil(bottomMargin),
        yLeft: Math.ceil(leftMargin),
        yRight: Math.ceil(rightMargin),
        stackHeight: textHeight + stackedAxisPadding,
    };
}
function columnDataTypeHasValue(dataType) {
    return dataType && (dataType.bool || dataType.numeric || dataType.text || dataType.dateTime);
}
function createOrdinalType() {
    return ValueType.fromDescriptor({ text: true });
}
function isOrdinal(dataType) {
    return !!(dataType && (dataType.text || dataType.bool || (dataType.misc && dataType.misc.barcode) || (dataType.geography && dataType.geography.postalCode)));
}
function isOrdinalScale(scale) {
    return typeof scale.bandwidth === "function";
}
function isDateTime(dataType) {
    return !!(dataType && dataType.dateTime);
}
function invertScale(scale, x) {
    if (isOrdinalScale(scale)) {
        return invertOrdinalScale(scale, x);
    }
    return scale.invert(x);
}
function extent(scale) {
    const range = scale.range();
    return [range[0], range[range.length - 1]];
}
/**
 * Uses the D3 scale to get the actual category thickness.
 * @return The difference between the 1st and 2nd items in the range if there are 2 or more items in the range.
 * Otherwise, the length of the entire range.
 */
function getCategoryThickness(scale) {
    const leftEdges = scale.range();
    if (leftEdges.length < 2) {
        // We have 1 item if we don't have 2 edges. If we have 1 item, just use the entire axis length as the thickness.
        if (isOrdinalScale(scale)) {
            // We should only hit this if we have an ordinal scale. Other scales should always have 2 items in their range.
            const rangeExtent = scale.range();
            return rangeExtent[1] - rangeExtent[0];
        }
    }
    return leftEdges[1] - leftEdges[0];
}
/**
 * Inverts the ordinal scale. If x < scale.range()[0], then scale.domain()[0] is returned.
 * Otherwise, it returns the greatest item in scale.domain() that's <= x.
 */
function invertOrdinalScale(scale, x) {
    const domain = scale.domain();
    const range = domain.map(d => scale(d));
    if (range.length < 2) {
        return 0;
    }
    const leftEdges = [];
    leftEdges[0] = range[0];
    leftEdges[1] = range[range.length - 1];
    const halfInnerPadding = 0;
    // If x is less than the range, just return the 1st item in the domain
    if (range[0] > x) {
        return domain[0];
    }
    // d3.bisect returns the index at which we can insert something so that everything before it is lesser and everything after it is greater.
    // The leftEdges don't include the inner padding, so we need to shift x over by halfInnerPadding to account it.
    // We want index - 1 since that's the greatest value less than x, meaning that's the band we're in.
    // Use that index to find the right value in the domain.
    return domain[(0,d3_array__WEBPACK_IMPORTED_MODULE_3__["default"])(range, x + halfInnerPadding) - 1];
}
function findClosestXAxisIndex(categoryValue, categoryAxisValues) {
    let closestValueIndex = -1, minDistance = Number.MAX_VALUE;
    for (const i in categoryAxisValues) {
        const distance = Math.abs(categoryValue - categoryAxisValues[i].categoryValue);
        if (distance < minDistance) {
            minDistance = distance;
            closestValueIndex = parseInt(i, 10);
        }
    }
    return closestValueIndex;
}
function lookupOrdinalIndex(scale, pixelValue) {
    let closestValueIndex = -1;
    let minDistance = Number.MAX_VALUE;
    const domain = scale.domain();
    if (domain.length < 2) {
        return 0;
    }
    const halfWidth = (scale(1) - scale(0)) / 2;
    for (const idx in domain) {
        const leftEdgeInPixels = scale(idx);
        const midPoint = leftEdgeInPixels + halfWidth;
        const distance = Math.abs(pixelValue - midPoint);
        if (distance < minDistance) {
            minDistance = distance;
            closestValueIndex = parseInt(idx, 10);
        }
    }
    return closestValueIndex;
}
/** scale(value1) - scale(value2) with zero checking and min(+/-1, result) */
function diffScaled(scale, value1, value2) {
    const value = scale(value1) - scale(value2);
    if (value === 0) {
        return 0;
    }
    if (value < 0) {
        return Math.min(value, -1);
    }
    return Math.max(value, 1);
}
function createDomain(data, axisType, isScalar, forcedScalarDomain, ensureDomain) {
    if (isScalar && !isOrdinal(axisType)) {
        let userMin, userMax;
        if (forcedScalarDomain && forcedScalarDomain.length === 2) {
            userMin = forcedScalarDomain[0];
            userMax = forcedScalarDomain[1];
        }
        return createScalarDomain(data, userMin, userMax, axisType, ensureDomain);
    }
    return createOrdinalDomain(data);
}
function ensureValuesInRange(values, min, max) {
    let filteredValues = values.filter(v => v >= min && v <= max);
    if (filteredValues.length < 2) {
        filteredValues = [min, max];
    }
    return filteredValues;
}
/**
 * Gets the ValueType of a category column, defaults to Text if the type is not present.
 */
function getCategoryValueType(metadataColumn, isScalar) {
    if (metadataColumn && columnDataTypeHasValue(metadataColumn.type)) {
        return metadataColumn.type;
    }
    if (isScalar) {
        return ValueType.fromDescriptor({ numeric: true });
    }
    return ValueType.fromDescriptor({ text: true });
}
/**
 * Create a D3 axis including scale. Can be vertical or horizontal, and either datetime, numeric, or text.
 * @param options The properties used to create the axis.
 */
function createAxis(options) {
    const pixelSpan = options.pixelSpan, dataDomain = options.dataDomain, metaDataColumn = options.metaDataColumn, formatString = options.formatString, outerPadding = options.outerPadding || 0, isCategoryAxis = !!options.isCategoryAxis, isScalar = !!options.isScalar, isVertical = !!options.isVertical, useTickIntervalForDisplayUnits = !!options.useTickIntervalForDisplayUnits, // DEPRECATE: same meaning as isScalar?
    getValueFn = options.getValueFn, axisDisplayUnits = options.axisDisplayUnits, axisPrecision = options.axisPrecision, is100Pct = !!options.is100Pct, dataType = getCategoryValueType(metaDataColumn, isScalar);
    let categoryThickness = options.categoryThickness;
    // Create the Scale
    const scaleResult = createScale(options);
    const scale = scaleResult.scale;
    const bestTickCount = scaleResult.bestTickCount;
    const scaleDomain = scale.domain();
    const isLogScaleAllowed = isLogScalePossible(dataDomain, dataType);
    // fix categoryThickness if scalar and the domain was adjusted when making the scale "nice"
    if (categoryThickness && isScalar && dataDomain && dataDomain.length === 2) {
        const oldSpan = dataDomain[1] - dataDomain[0];
        const newSpan = scaleDomain[1] - scaleDomain[0];
        if (oldSpan > 0 && newSpan > 0) {
            categoryThickness = categoryThickness * oldSpan / newSpan;
        }
    }
    // Prepare Tick Values for formatting
    let tickValues;
    if (isScalar && bestTickCount === 1 && !arrayIsEmpty(dataDomain)) {
        tickValues = [dataDomain[0]];
    }
    else {
        const minTickInterval = isScalar ? getMinTickValueInterval(formatString, dataType, is100Pct) : undefined;
        tickValues = getRecommendedTickValues(bestTickCount, scale, dataType, isScalar, minTickInterval);
    }
    if (options.scaleType && options.scaleType === _axisScale__WEBPACK_IMPORTED_MODULE_4__.log && isLogScaleAllowed) {
        tickValues = tickValues.filter((d) => { return powerOfTen(d); });
    }
    const formatter = createFormatter(scaleDomain, dataDomain, dataType, isScalar, formatString, bestTickCount, tickValues, getValueFn, useTickIntervalForDisplayUnits, axisDisplayUnits, axisPrecision);
    // sets default orientation only, cartesianChart will fix y2 for comboChart
    // tickSize(pixelSpan) is used to create gridLines
    const axisFunction = isVertical ? d3_axis__WEBPACK_IMPORTED_MODULE_5__.axisLeft : d3_axis__WEBPACK_IMPORTED_MODULE_5__.axisBottom;
    const axis = axisFunction(scale)
        .tickSize(6)
        .ticks(bestTickCount)
        .tickValues(tickValues);
    let formattedTickValues = [];
    if (metaDataColumn)
        formattedTickValues = formatAxisTickValues(axis, tickValues, formatter, dataType, getValueFn);
    let xLabelMaxWidth;
    // Use category layout of labels if specified, otherwise use scalar layout of labels
    if (!isScalar && categoryThickness) {
        xLabelMaxWidth = Math.max(1, categoryThickness - TickLabelPadding * 2);
    }
    else {
        // When there are 0 or 1 ticks, then xLabelMaxWidth = pixelSpan
        xLabelMaxWidth = tickValues.length > 1 ? getScalarLabelMaxWidth(scale, tickValues) : pixelSpan;
        xLabelMaxWidth = xLabelMaxWidth - ScalarTickLabelPadding * 2;
    }
    return {
        scale: scale,
        axis: axis,
        formatter: formatter,
        values: formattedTickValues,
        axisType: dataType,
        axisLabel: null,
        isCategoryAxis: isCategoryAxis,
        xLabelMaxWidth: xLabelMaxWidth,
        categoryThickness: categoryThickness,
        outerPadding: outerPadding,
        usingDefaultDomain: scaleResult.usingDefaultDomain,
        isLogScaleAllowed: isLogScaleAllowed,
        dataDomain: dataDomain,
    };
}
/**
 * Creates a D3 axis for stacked axis usage. `options.innerTickSize` and `options.outerTickSize` will be defaulted to 0 if not set.
 * `options.orientation` will be defaulted to "bottom" if not specified.
 */
function createStackedAxis(options) {
    const axis = options.axis;
    const orientation = options.orient;
    let axisFunction;
    // TODO: possible breaking changes
    switch (orientation) {
        case _axisInterfaces__WEBPACK_IMPORTED_MODULE_6__.AxisOrientation.bottom:
            axisFunction = d3_axis__WEBPACK_IMPORTED_MODULE_5__.axisBottom;
            break;
        case _axisInterfaces__WEBPACK_IMPORTED_MODULE_6__.AxisOrientation.top:
            axisFunction = d3_axis__WEBPACK_IMPORTED_MODULE_5__.axisTop;
            break;
        case _axisInterfaces__WEBPACK_IMPORTED_MODULE_6__.AxisOrientation.left:
            axisFunction = d3_axis__WEBPACK_IMPORTED_MODULE_5__.axisLeft;
            break;
        case _axisInterfaces__WEBPACK_IMPORTED_MODULE_6__.AxisOrientation.right:
            axisFunction = d3_axis__WEBPACK_IMPORTED_MODULE_5__.axisRight;
    }
    return axisFunction(options.scale)
        .tickSize(options.innerTickSize || 0, options.outerTickSize || 0)
        .ticks(axis.tickValues())
        .tickValues(axis.tickValues())
        .tickFormat(options.tickFormat);
}
function getScalarLabelMaxWidth(scale, tickValues) {
    // find the distance between two ticks. scalar ticks can be anywhere, such as:
    // |---50----------100--------|
    if (scale && !arrayIsEmpty(tickValues)) {
        return Math.abs(scale(tickValues[1]) - scale(tickValues[0]));
    }
    return 1;
}
function createScale(options) {
    const pixelSpan = options.pixelSpan, metaDataColumn = options.metaDataColumn, outerPadding = options.outerPadding || 0, isScalar = !!options.isScalar, isVertical = !!options.isVertical, forcedTickCount = options.forcedTickCount, categoryThickness = options.categoryThickness, shouldClamp = !!options.shouldClamp, maxTickCount = options.maxTickCount, disableNice = options.disableNice, disableNiceOnlyForScale = options.disableNiceOnlyForScale, innerPadding = options.innerPadding, useRangePoint = options.useRangePoints, dataType = getCategoryValueType(metaDataColumn, isScalar);
    let dataDomain = options.dataDomain;
    let maxTicks = isVertical ? getRecommendedNumberOfTicksForYAxis(pixelSpan) : getRecommendedNumberOfTicksForXAxis(pixelSpan);
    if (maxTickCount &&
        maxTicks > maxTickCount)
        maxTicks = maxTickCount;
    let scalarDomain = dataDomain ? dataDomain.slice() : null;
    let bestTickCount = maxTicks;
    if (disableNice) {
        bestTickCount = null;
    }
    let scale;
    let usingDefaultDomain = false;
    if (dataDomain == null || (dataDomain.length === 2 && dataDomain[0] == null && dataDomain[1] == null) || (dataDomain.length !== 2 && isScalar)) {
        usingDefaultDomain = true;
        if (dataType.dateTime || !isOrdinal(dataType))
            dataDomain = emptyDomain;
        else // ordinal
            dataDomain = [];
        if (isOrdinal(dataType)) {
            scale = createOrdinalScale(pixelSpan, dataDomain, categoryThickness ? outerPadding / categoryThickness : 0, innerPadding, useRangePoint);
        }
        else {
            scale = createNumericalScale(options.scaleType, pixelSpan, dataDomain, dataType, outerPadding, bestTickCount);
        }
    }
    else {
        if (isScalar && dataDomain.length > 0) {
            if (!disableNice) {
                bestTickCount = forcedTickCount !== undefined
                    ? (maxTicks !== 0 ? forcedTickCount : 0)
                    : getBestNumberOfTicks(dataDomain[0], dataDomain[dataDomain.length - 1], [metaDataColumn], maxTicks, dataType.dateTime);
            }
            const normalizedRange = normalizeLinearDomain({ min: dataDomain[0], max: dataDomain[dataDomain.length - 1] });
            scalarDomain = [normalizedRange.min, normalizedRange.max];
        }
        if (isScalar && dataType.numeric && !dataType.dateTime) {
            if (scalarDomain && scalarDomain.length === 2 && scalarDomain[0] === 0 && scalarDomain[1] === 0 && options.zeroScalarDomain) {
                scalarDomain[0] = options.zeroScalarDomain[0];
                scalarDomain[1] = options.zeroScalarDomain[1];
            }
            let bestTickCountForNumericalScale = bestTickCount;
            if (disableNiceOnlyForScale) {
                bestTickCountForNumericalScale = null;
            }
            scale = createNumericalScale(options.scaleType, pixelSpan, scalarDomain, dataType, outerPadding, bestTickCountForNumericalScale, shouldClamp);
        }
        else if (isScalar && dataType.dateTime) {
            // Use of a linear scale, instead of a D3.time.scale, is intentional since we want
            // to control the formatting of the time values, since d3's implementation isn't
            // in accordance to our design.
            //     scalarDomain: should already be in long-int time (via category.values[0].getTime())
            scale = createLinearScale(pixelSpan, scalarDomain, outerPadding, null, shouldClamp); // DO NOT PASS TICKCOUNT
        }
        else if (dataType.text || dataType.dateTime || dataType.numeric || dataType.bool) {
            scale = createOrdinalScale(pixelSpan, scalarDomain, categoryThickness ? outerPadding / categoryThickness : 0, innerPadding, useRangePoint);
            bestTickCount = maxTicks === 0 ? 0
                : Math.min(scalarDomain.length, (pixelSpan - outerPadding * 2) / MinOrdinalRectThickness);
        }
    }
    // vertical ordinal axis (e.g. categorical bar chart) does not need to reverse
    if (isVertical && isScalar) {
        scale.range(scale.range().reverse());
    }
    normalizeInfinityInScale(scale);
    return {
        scale: scale,
        bestTickCount: bestTickCount,
        usingDefaultDomain: usingDefaultDomain,
    };
}
function normalizeInfinityInScale(scale) {
    // When large values (eg Number.MAX_VALUE) are involved, a call to scale.nice occasionally
    // results in infinite values being included in the domain. To correct for that, we need to
    // re-normalize the domain now to not include infinities.
    const scaledDomain = scale.domain();
    for (let i = 0, len = scaledDomain.length; i < len; ++i) {
        if (scaledDomain[i] === Number.POSITIVE_INFINITY) {
            scaledDomain[i] = Number.MAX_VALUE;
        }
        else if (scaledDomain[i] === Number.NEGATIVE_INFINITY) {
            scaledDomain[i] = -Number.MAX_VALUE;
        }
    }
    scale.domain(scaledDomain);
}
function createFormatter(scaleDomain, dataDomain, dataType, isScalar, formatString, bestTickCount, tickValues, getValueFn, useTickIntervalForDisplayUnits = false, axisDisplayUnits, axisPrecision) {
    let formatter;
    if (dataType.dateTime) {
        if (isScalar) {
            let value = new Date(scaleDomain[0]);
            let value2 = new Date(scaleDomain[1]);
            // datetime with only one value needs to pass the same value
            // (from the original dataDomain value, not the adjusted scaleDomain)
            // so formatting works correctly.
            if (bestTickCount === 1)
                value = value2 = new Date(dataDomain[0]);
            // this will ignore the formatString and create one based on the smallest non-zero portion of the values supplied.
            formatter = valueFormatter.create({
                format: formatString,
                value: value,
                value2: value2,
                tickCount: bestTickCount,
            });
        }
        else {
            // Use the model formatString for ordinal datetime
            formatter = valueFormatter.createDefaultFormatter(formatString, true);
        }
    }
    else {
        if (useTickIntervalForDisplayUnits && isScalar && tickValues.length > 1) {
            const value1 = axisDisplayUnits ? axisDisplayUnits : tickValues[1] - tickValues[0];
            const options = {
                format: formatString,
                value: value1,
                value2: 0,
                allowFormatBeautification: true,
            };
            if (axisPrecision)
                options.precision = axisPrecision;
            else
                options.precision = calculateAxisPrecision(tickValues[0], tickValues[1], axisDisplayUnits, formatString);
            formatter = valueFormatter.create(options);
        }
        else {
            // do not use display units, just the basic value formatter
            // datetime is handled above, so we are ordinal and either boolean, numeric, or text.
            formatter = valueFormatter.createDefaultFormatter(formatString, true);
        }
    }
    return formatter;
}
// returns # of decimal places necessary to distinguish between tick mark values
function calculateAxisPrecision(tickValue0, tickValue1, axisDisplayUnits, formatString) {
    if (!axisDisplayUnits) {
        const displayUnitSystem = valueFormatter.createDisplayUnitSystem();
        displayUnitSystem.update(tickValue1 - tickValue0);
        axisDisplayUnits = displayUnitSystem.displayUnit && displayUnitSystem.displayUnit.value || 1;
    }
    let value0 = (tickValue0 || 0) / axisDisplayUnits;
    let value1 = (tickValue1 || 0) / axisDisplayUnits;
    if (formatString) {
        const partsPerScale = numberFormat.getCustomFormatMetadata(formatString, false, false, true).partsPerScale;
        value0 *= partsPerScale;
        value1 *= partsPerScale;
    }
    return Math.max(calculateAxisPrecisionForValue(value0), calculateAxisPrecisionForValue(value1));
}
function calculateAxisPrecisionForValue(value) {
    if (value === 0)
        return 0;
    if (value < 0)
        value = -value;
    // calculate place of of the most significant decimal digit.
    // 1 means tens digit
    // 0 means the ones digit
    // -1 means tenths digit
    const mostSignificantDigit = Math.floor(powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_7__.log10(value));
    // rounding in various calculations can introduce extraneous amounts of precision in the number
    // no need in an axis label to allow more than this number of digits as the *difference* between
    // ticks
    const MaxDigits = 5;
    if (mostSignificantDigit >= 0) {
        // value has an integer part but may also have a fraction part. get the number of significant
        // digits in the integer part then see how many that leaves us for the fractional part
        const integerSignificantDigits = mostSignificantDigit + 1;
        const maxFractionDigits = MaxDigits - integerSignificantDigits;
        if (maxFractionDigits <= 0) {
            // the value's integer part has at least MaxDigits of precision
            // so there aren't any left for the fractional part
            return 0;
        }
        return numberOfDecimalPlaces(value, maxFractionDigits);
    }
    else {
        // the interval has no integer part - it is a pure decimal fraction. we want the number
        // of decimal places we have to allow so the precision doesn't exceed MaxDigits.
        // knowing where there most significant digit is in the fraction, we can scale
        // the number to the range [0.1, 1)
        const rescaledValue = value / powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_7__.pow10(mostSignificantDigit + 1);
        // get the actual number of significant digits respecting the maximum
        const fractionSignificantDigits = numberOfDecimalPlaces(rescaledValue, MaxDigits);
        // this is the number of zeroes that are required due to the true scale of the decimal fraction
        const fractionScaleDigits = -mostSignificantDigit - 1;
        // number of decimal places is the number of zeros plus the limited number of significant digits
        return fractionScaleDigits + fractionSignificantDigits;
    }
}
// if we're limiting the decimal places to maxDecimalPlaces, how many decimal places do
// we actually need to avoid trailing zeroes? for example, if the value is 1.500001 and
// we want a maximum of three decimal places, the number rounded to three places is 1.500
// so only one decimal place is necessary.
function numberOfDecimalPlaces(value, maxDecimalPlaces) {
    const formattedValue = value.toFixed(maxDecimalPlaces);
    const decimalPoint = formattedValue.indexOf(".");
    if (decimalPoint !== -1) {
        for (let i = formattedValue.length; i-- > decimalPoint;) {
            if (formattedValue[i] !== "0") {
                return i - decimalPoint;
            }
        }
    }
    return 0;
}
/**
 * Format the linear tick labels or the category labels.
 */
function formatAxisTickValues(axis, tickValues, formatter, dataType, getValueFn) {
    let formattedTickValues = [];
    if (!getValueFn)
        getValueFn = data => data;
    if (formatter) {
        axis.tickFormat(d => formatter.format(getValueFn(d, dataType)));
        formattedTickValues = tickValues.map(d => formatter.format(getValueFn(d, dataType)));
    }
    else {
        formattedTickValues = tickValues.map((d) => getValueFn(d, dataType));
    }
    return formattedTickValues;
}
function getMinTickValueInterval(formatString, columnType, is100Pct) {
    const isCustomFormat = formatString && !numberFormat.isStandardFormat(formatString);
    if (isCustomFormat) {
        let precision = numberFormat.getCustomFormatMetadata(formatString, true /*calculatePrecision*/).precision;
        if (formatString.indexOf("%") > -1)
            precision += 2; // percent values are multiplied by 100 during formatting
        return Math.pow(10, -precision);
    }
    else if (is100Pct) {
        return 0.01;
    }
    else if (columnType.integer) {
        return 1;
    }
    return 0;
}
function createScalarDomain(data, userMin, userMax, axisType, ensureDomain) {
    if (data.length === 0) {
        return null;
    }
    const defaultMinX = (0,d3_array__WEBPACK_IMPORTED_MODULE_8__["default"])(data, (kv) => { return (0,d3_array__WEBPACK_IMPORTED_MODULE_8__["default"])(kv.data, d => { return d && d.categoryValue; }); });
    const defaultMaxX = (0,d3_array__WEBPACK_IMPORTED_MODULE_9__["default"])(data, (kv) => { return (0,d3_array__WEBPACK_IMPORTED_MODULE_9__["default"])(kv.data, d => { return d && d.categoryValue; }); });
    return combineDomain([userMin, userMax], [defaultMinX, defaultMaxX], ensureDomain);
}
/**
 * Creates a [min,max] from your Cartiesian data values.
 *
 * @param data The series array of CartesianDataPoints.
 * @param includeZero Columns and bars includeZero, line and scatter do not.
 */
function createValueDomain(data, includeZero) {
    if (data.length === 0)
        return null;
    const minY = (0,d3_array__WEBPACK_IMPORTED_MODULE_8__["default"])(data, (kv) => { return (0,d3_array__WEBPACK_IMPORTED_MODULE_8__["default"])(kv.data, d => { return d && d.value; }); });
    const maxY = (0,d3_array__WEBPACK_IMPORTED_MODULE_9__["default"])(data, (kv) => { return (0,d3_array__WEBPACK_IMPORTED_MODULE_9__["default"])(kv.data, d => { return d && d.value; }); });
    if (includeZero) {
        return [Math.min(minY, 0), Math.max(maxY, 0)];
    }
    return [minY, maxY];
}
function createOrdinalDomain(data) {
    if (arrayIsEmpty(data)) {
        return [];
    }
    // each series shares the same categories for oridinal axes (even if a series has some nulls)
    const domain = [];
    const firstSeries = data[0];
    for (const dp of firstSeries.data) {
        if (!dp.highlight) {
            domain.push(dp.categoryIndex);
        }
    }
    return domain;
}


/* eslint-disable-next-line @typescript-eslint/no-unused-vars */
function createPointScale(pixelSpan, dataDomain, outerPaddingRatio = 0, innerPaddingRatio = 0.2, useRangePoints = false) {
    return (0,d3_scale__WEBPACK_IMPORTED_MODULE_10__.point)()
        .range([0, pixelSpan])
        .padding(outerPaddingRatio)
        /* Avoid using rangeRoundBands here as it is adding some extra padding to the axis*/
        .domain(dataDomain);
}
function createOrdinalScale(pixelSpan, dataDomain, outerPaddingRatio = 0, innerPaddingRatio = 0.2, useRangePoints = false) {
    if (useRangePoints) {
        return (0,d3_scale__WEBPACK_IMPORTED_MODULE_10__.point)()
            .rangeRound([0, pixelSpan])
            .padding(innerPaddingRatio)
            /* Avoid using rangeRoundBands here as it is adding some extra padding to the axis*/
            .domain(dataDomain);
    }
    return (0,d3_scale__WEBPACK_IMPORTED_MODULE_10__["default"])()
        .range([0, pixelSpan])
        .paddingInner(innerPaddingRatio)
        .paddingOuter(outerPaddingRatio)
        /* Avoid using rangeRoundBands here as it is adding some extra padding to the axis*/
        .domain(dataDomain);
}
function isLogScalePossible(domain, axisType) {
    if (domain == null) {
        return false;
    }
    if (isDateTime(axisType)) {
        return false;
    }
    return (domain[0] > 0 && domain[1] > 0) || (domain[0] < 0 && domain[1] < 0); // doman must exclude 0
}
// this function can return different scales e.g. log, linear
// NOTE: export only for testing, do not access directly
function createNumericalScale(axisScaleType, pixelSpan, dataDomain, dataType, outerPadding = 0, niceCount, shouldClamp) {
    if (axisScaleType === _axisScale__WEBPACK_IMPORTED_MODULE_4__.log && isLogScalePossible(dataDomain, dataType)) {
        return createLogScale(pixelSpan, dataDomain, outerPadding, niceCount);
    }
    return createLinearScale(pixelSpan, dataDomain, outerPadding, niceCount, shouldClamp);
}
function createLogScale(pixelSpan, dataDomain, outerPadding = 0, niceCount) {
    const logScale = (0,d3_scale__WEBPACK_IMPORTED_MODULE_11__["default"])()
        .range([outerPadding, pixelSpan - outerPadding])
        .domain([dataDomain[0], dataDomain[1]])
        .clamp(true);
    if (niceCount) {
        logScale.nice();
    }
    return logScale;
}
// NOTE: export only for testing, do not access directly
function createLinearScale(pixelSpan, dataDomain, outerPadding = 0, niceCount, shouldClamp) {
    const linearScale = (0,d3_scale__WEBPACK_IMPORTED_MODULE_12__["default"])()
        .range([outerPadding, pixelSpan - outerPadding])
        .domain([dataDomain[0], dataDomain[1]])
        .clamp(shouldClamp);
    // .nice(undefined) still modifies the scale boundaries, and for datetime this messes things up.
    // we use millisecond ticks since epoch for datetime, so we don't want any "nice" with numbers like 17398203392.
    if (niceCount) {
        linearScale.nice(niceCount);
    }
    return linearScale;
}
function getRangeForColumn(sizeColumn) {
    const result = {};
    if (sizeColumn) {
        result.min = (sizeColumn.min == null
            ? sizeColumn.minLocal == null ? (0,d3_array__WEBPACK_IMPORTED_MODULE_8__["default"])(sizeColumn.values) : sizeColumn.minLocal
            : sizeColumn.min);
        result.max = (sizeColumn.max == null
            ? sizeColumn.maxLocal == null ? (0,d3_array__WEBPACK_IMPORTED_MODULE_9__["default"])(sizeColumn.values) : sizeColumn.maxLocal
            : sizeColumn.max);
    }
    return result;
}
/**
 * Set customized domain, but don't change when nothing is set
 */
function applyCustomizedDomain(customizedDomain, forcedDomain) {
    let domain = [undefined, undefined];
    if (forcedDomain && forcedDomain.length === 2) {
        domain = [forcedDomain[0], forcedDomain[1]];
    }
    if (customizedDomain && customizedDomain.length === 2) {
        if (customizedDomain[0] != null) {
            domain[0] = customizedDomain[0];
        }
        if (customizedDomain[1] != null) {
            domain[1] = customizedDomain[1];
        }
    }
    if (domain[0] == null && domain[1] == null) {
        return forcedDomain; // return untouched object
    }
    // do extra check to see if the user input was valid with the merged axis values.
    if (domain[0] != null && domain[1] != null) {
        if (domain[0] > domain[1]) {
            return forcedDomain;
        }
    }
    return domain;
}
/**
 * Combine the forced domain with the actual domain if one of the values was set.
 * The forcedDomain is in 1st priority. Extends the domain if the any reference point requires it.
 */
function combineDomain(forcedDomain, domain, ensureDomain) {
    let combinedDomain = domain ? [domain[0], domain[1]] : [];
    if (ensureDomain) {
        if (combinedDomain[0] == null || ensureDomain.min < combinedDomain[0])
            combinedDomain[0] = ensureDomain.min;
        if (combinedDomain[1] == null || ensureDomain.max > combinedDomain[1])
            combinedDomain[1] = ensureDomain.max;
    }
    const domainBeforeForced = [combinedDomain[0], combinedDomain[1]];
    if (forcedDomain && forcedDomain.length === 2) {
        if (forcedDomain[0] != null) {
            combinedDomain[0] = forcedDomain[0];
        }
        if (forcedDomain[1] != null) {
            combinedDomain[1] = forcedDomain[1];
        }
        if (combinedDomain[0] > combinedDomain[1]) {
            combinedDomain = domainBeforeForced; // this is invalid, so take the original domain considering the values and the reference line
        }
    }
    return combinedDomain;
}
function createAxisLabel(properties, label, unitType, y2 = false) {
    const propertyName = y2 ? "secAxisStyle" : "axisStyle";
    if (!properties || !properties[propertyName]) {
        return label;
    }
    let modifiedLabel;
    if (properties[propertyName] === _axisStyle__WEBPACK_IMPORTED_MODULE_13__.showBoth) {
        modifiedLabel = label + " (" + unitType + ")";
    }
    else if (properties[propertyName] === _axisStyle__WEBPACK_IMPORTED_MODULE_13__.showUnitOnly) {
        modifiedLabel = unitType;
    }
    else {
        modifiedLabel = label;
    }
    return modifiedLabel;
}
function scaleShouldClamp(combinedDomain, domain) {
    if (!combinedDomain || !domain || combinedDomain.length < 2 || domain.length < 2) {
        return false;
    }
    // when the start or end is different, clamp it
    return combinedDomain[0] !== domain[0] || combinedDomain[1] !== domain[1];
}
function normalizeNonFiniteNumber(value) {
    if (isNaN(value)) {
        return null;
    }
    else if (value === Number.POSITIVE_INFINITY) {
        return Number.MAX_VALUE;
    }
    else if (value === Number.NEGATIVE_INFINITY) {
        return -Number.MAX_VALUE;
    }
    return value;
}
/**
 * Indicates whether the number is power of 10.
 */
function powerOfTen(d) {
    const value = Math.abs(d);
    // formula log2(Y)/log2(10) = log10(Y)
    // because double issues this won't return exact value
    // we need to ceil it to nearest number.
    let log10 = Math.log(value) / Math.LN10;
    log10 = Math.ceil(log10 - 1e-12);
    return value / Math.pow(10, log10) === 1;
}
function arrayIsEmpty(array) {
    return !(array && array.length);
}
//# sourceMappingURL=axis.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisInterfaces.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisInterfaces.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AxisOrientation": () => (/* binding */ AxisOrientation)
/* harmony export */ });
var AxisOrientation;
(function (AxisOrientation) {
    // Names of these enums match the values passed into axis.orient([orientation])
    AxisOrientation[AxisOrientation["top"] = 0] = "top";
    AxisOrientation[AxisOrientation["bottom"] = 1] = "bottom";
    AxisOrientation[AxisOrientation["left"] = 2] = "left";
    AxisOrientation[AxisOrientation["right"] = 3] = "right";
})(AxisOrientation || (AxisOrientation = {}));
//# sourceMappingURL=axisInterfaces.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisScale.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisScale.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linear": () => (/* binding */ linear),
/* harmony export */   "log": () => (/* binding */ log)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
const linear = "linear";
const log = "log";
//# sourceMappingURL=axisScale.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisStyle.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisStyle.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "showBoth": () => (/* binding */ showBoth),
/* harmony export */   "showTitleOnly": () => (/* binding */ showTitleOnly),
/* harmony export */   "showUnitOnly": () => (/* binding */ showUnitOnly)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
const showBoth = "showBoth";
const showTitleOnly = "showTitleOnly";
const showUnitOnly = "showUnitOnly";
//# sourceMappingURL=axisStyle.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/labelLayoutStrategy.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/axis/labelLayoutStrategy.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefaultRotation": () => (/* binding */ DefaultRotation),
/* harmony export */   "DefaultRotationWithScrollbar": () => (/* binding */ DefaultRotationWithScrollbar),
/* harmony export */   "DefaultRotationWithScrollbarTickSizeZero": () => (/* binding */ DefaultRotationWithScrollbarTickSizeZero),
/* harmony export */   "clip": () => (/* binding */ clip),
/* harmony export */   "rotate": () => (/* binding */ rotate),
/* harmony export */   "willLabelsFit": () => (/* binding */ willLabelsFit),
/* harmony export */   "willLabelsWordBreak": () => (/* binding */ willLabelsWordBreak),
/* harmony export */   "wordBreak": () => (/* binding */ wordBreak)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");


const LeftPadding = 10;
function willLabelsFit(axisProperties, availableWidth, textMeasurer, properties) {
    const labels = axisProperties.values;
    if (labels.length === 0)
        return false;
    const labelMaxWidth = axisProperties.xLabelMaxWidth !== undefined
        ? axisProperties.xLabelMaxWidth
        : availableWidth / labels.length;
    return !labels.some(d => {
        properties.text = d;
        return textMeasurer(properties) > labelMaxWidth;
    });
}
function willLabelsWordBreak(axisProperties, margin, availableWidth, textWidthMeasurer, textHeightMeasurer, textTruncator, properties) {
    const labels = axisProperties.values;
    const labelMaxWidth = axisProperties.xLabelMaxWidth !== undefined
        ? axisProperties.xLabelMaxWidth
        : availableWidth / labels.length;
    const maxRotatedLength = margin.bottom / DefaultRotation.sine;
    const height = textHeightMeasurer(properties);
    const maxNumLines = Math.max(1, Math.floor(margin.bottom / height));
    if (labels.length === 0)
        return false;
    // If no break character and exceeds max width, word breaking will not work, return false
    const mustRotate = labels.some(label => {
        // Detect must rotate and return immediately
        properties.text = label;
        return !powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.wordBreaker.hasBreakers(label) && textWidthMeasurer(properties) > labelMaxWidth;
    });
    if (mustRotate) {
        return false;
    }
    const moreWordBreakChars = labels.filter((label, index) => {
        // ...otherwise compare rotation versus word breaking
        const allowedLengthProjectedOnXAxis = 
        // Left margin is the width of Y axis.
        margin.left
            // There could be a padding before the first category.
            + axisProperties.outerPadding
            // Align the rotated text's top right corner to the middle of the corresponding category first.
            + axisProperties.categoryThickness * (index + 0.5)
            // Subtracting the left padding space from the allowed length
            - LeftPadding;
        const allowedLength = allowedLengthProjectedOnXAxis / DefaultRotation.cosine;
        const rotatedLength = Math.min(allowedLength, maxRotatedLength);
        // Which shows more characters? Rotated or maxNumLines truncated to labelMaxWidth?
        const wordBreakChars = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.wordBreaker.splitByWidth(label, properties, textWidthMeasurer, labelMaxWidth, maxNumLines, textTruncator).join(" ");
        properties.text = label;
        const rotateChars = textTruncator(properties, rotatedLength);
        // prefer word break (>=) as it takes up less plot area
        return powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.textUtil.removeEllipses(wordBreakChars).length >= powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.textUtil.removeEllipses(rotateChars).length;
    });
    // prefer word break (>=) as it takes up less plot area
    return moreWordBreakChars.length >= Math.floor(labels.length / 2);
}
const DefaultRotation = {
    sine: Math.sin(Math.PI * (35 / 180)),
    cosine: Math.cos(Math.PI * (35 / 180)),
    tangent: Math.tan(Math.PI * (35 / 180)),
    transform: "rotate(-35)",
    dy: "-0.5em",
};
const DefaultRotationWithScrollbar = {
    sine: Math.sin(Math.PI * (90 / 180)),
    cosine: Math.cos(Math.PI * (90 / 180)),
    tangent: Math.tan(Math.PI * (90 / 180)),
    transform: "rotate(-90)",
    dy: "-0.8em",
};
// NOTE: the above rotations are matched to D3 tickSize(6,0) and do not work with other tick sizes.
// we hide these default ticks anyway (on category axes that require rotation), we should make this work
// with any tick size. For now just hardcode a TickSizeZero structure
const DefaultRotationWithScrollbarTickSizeZero = {
    sine: Math.sin(Math.PI * (90 / 180)),
    cosine: Math.cos(Math.PI * (90 / 180)),
    tangent: Math.tan(Math.PI * (90 / 180)),
    transform: "rotate(-90)",
    dy: "-0.3em",
};
/**
 * Perform rotation and/or truncation of axis tick labels (SVG text) with ellipsis
 */
function rotate(labelSelection, maxBottomMargin, textTruncator, textProperties, needRotate, needEllipsis, axisProperties, margin, scrollbarVisible) {
    let rotatedLength;
    let defaultRotation;
    const tickSize = axisProperties.axis.tickSize();
    if (scrollbarVisible) {
        if (!tickSize) // zero or undefined
            defaultRotation = DefaultRotationWithScrollbarTickSizeZero;
        else
            defaultRotation = DefaultRotationWithScrollbar;
    }
    else {
        defaultRotation = DefaultRotation;
    }
    if (needRotate) {
        rotatedLength = maxBottomMargin / defaultRotation.sine;
    }
    labelSelection.each(function (datum) {
        const axisLabel = (0,d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"])(this);
        let labelText = axisLabel.text();
        textProperties.text = labelText;
        if (needRotate) {
            const textContentIndex = axisProperties.values.indexOf(this.textContent);
            let allowedLengthProjectedOnXAxis = 
            // Left margin is the width of Y axis.
            margin.left
                // There could be a padding before the first category.
                + axisProperties.outerPadding
                // Align the rotated text's top right corner to the middle of the corresponding category first.
                + axisProperties.categoryThickness * (textContentIndex + 0.5);
            // Subtracting the left padding space from the allowed length.
            if (!scrollbarVisible)
                allowedLengthProjectedOnXAxis -= LeftPadding;
            // Truncate if scrollbar is visible or rotatedLength exceeds allowedLength
            const allowedLength = allowedLengthProjectedOnXAxis / defaultRotation.cosine;
            if (scrollbarVisible || needEllipsis || (allowedLength < rotatedLength)) {
                labelText = textTruncator(textProperties, Math.min(allowedLength, rotatedLength));
                axisLabel.text(labelText);
            }
            // NOTE: see note above - rotation only lines up with default d3 tickSize(6,0)
            // TODO don't do these rotations if we already did them
            axisLabel.style("text-anchor", "end")
                .attr("dx", "-0.5em")
                .attr("dy", defaultRotation.dy)
                .attr("transform", defaultRotation.transform);
        }
        else {
            const maxLabelWidth = !arrayIsEmpty(axisProperties.xLabelMaxWidths) ? axisProperties.xLabelMaxWidths[datum] : axisProperties.xLabelMaxWidth;
            const newLabelText = textTruncator(textProperties, maxLabelWidth);
            if (newLabelText !== labelText)
                axisLabel.text(newLabelText);
            // TODO don't do these rotations if we already did them
            axisLabel.style("text-anchor", "middle")
                .attr("dx", "0em")
                .attr("dy", "1em")
                .attr("transform", "rotate(0)");
        }
    });
}
function wordBreak(text, axisProperties, maxHeight) {
    const allowedLength = axisProperties.xLabelMaxWidth;
    text.each(function () {
        const node = (0,d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"])(this);
        // Reset style of text node
        node
            .style("text-anchor", "middle")
            .attr("dx", "0em")
            .attr("dy", "1em")
            .attr("transform", "rotate(0)");
        powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.textMeasurementService.wordBreak(this, allowedLength, maxHeight);
    });
}
function clip(text, availableWidth, svgEllipsis) {
    if (text.size() === 0) {
        return;
    }
    text.each(function () {
        const text = (0,d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"])(this);
        svgEllipsis(text.node(), availableWidth);
    });
}
function arrayIsEmpty(array) {
    return !(array && array.length);
}
//# sourceMappingURL=labelLayoutStrategy.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelArrangeGrid.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelArrangeGrid.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataLabelArrangeGrid)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/shapes/shapes.js");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/prototype.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var _dataLabelUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataLabelUtils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelUtils.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
// powerbi.extensibility.utils.svg.shapes

// powerbi.extensibility.utils.type

// powerbi.extensibility.utils.formatting


/**
 * Utility class to speed up the conflict detection by collecting the arranged items in the DataLabelsPanel.
 */
class DataLabelArrangeGrid {
    /**
     * Creates new ArrangeGrid.
     * @param size The available size
     */
    constructor(size, elements, layout) {
        this.grid = [];
        if (size.width === 0 || size.height === 0) {
            this.cellSize = size;
            this.rowCount = this.colCount = 0;
        }
        const baseProperties = {
            fontFamily: _dataLabelUtils__WEBPACK_IMPORTED_MODULE_0__.LabelTextProperties.fontFamily,
            fontSize: _dataLabelUtils__WEBPACK_IMPORTED_MODULE_0__.LabelTextProperties.fontSize,
            fontWeight: _dataLabelUtils__WEBPACK_IMPORTED_MODULE_0__.LabelTextProperties.fontWeight,
        };
        // sets the cell size to be twice of the Max with and Max height of the elements
        this.cellSize = { width: 0, height: 0 };
        for (let i = 0, len = elements.length; i < len; i++) {
            const child = elements[i];
            // Fill label field
            child.labeltext = layout.labelText(child);
            const properties = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_1__.inherit(baseProperties);
            properties.text = child.labeltext;
            properties.fontSize = child.data
                ? child.data.labelFontSize
                : child.labelFontSize
                    ? child.labelFontSize
                    : _dataLabelUtils__WEBPACK_IMPORTED_MODULE_0__.LabelTextProperties.fontSize;
            child.size = {
                width: powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_2__.textMeasurementService.measureSvgTextWidth(properties),
                height: powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_2__.textMeasurementService.estimateSvgTextHeight(properties),
            };
            const w = child.size.width * 2, h = child.size.height * 2;
            if (w > this.cellSize.width) {
                this.cellSize.width = w;
            }
            if (h > this.cellSize.height) {
                this.cellSize.height = h;
            }
        }
        if (this.cellSize.width === 0) {
            this.cellSize.width = size.width;
        }
        if (this.cellSize.height === 0) {
            this.cellSize.height = size.height;
        }
        this.colCount = this.getGridRowColCount(this.cellSize.width, size.width, DataLabelArrangeGrid.ARRANGEGRID_MIN_COUNT, DataLabelArrangeGrid.ARRANGEGRID_MAX_COUNT);
        this.rowCount = this.getGridRowColCount(this.cellSize.height, size.height, DataLabelArrangeGrid.ARRANGEGRID_MIN_COUNT, DataLabelArrangeGrid.ARRANGEGRID_MAX_COUNT);
        this.cellSize.width = size.width / this.colCount;
        this.cellSize.height = size.height / this.rowCount;
        const grid = this.grid;
        for (let x = 0; x < this.colCount; x++) {
            grid[x] = [];
            for (let y = 0; y < this.rowCount; y++) {
                grid[x][y] = [];
            }
        }
    }
    /**
     * Register a new label element.
     * @param element The label element to register.
     * @param rect The label element position rectangle.
     */
    add(element, rect) {
        const indexRect = this.getGridIndexRect(rect), grid = this.grid;
        for (let x = indexRect.left; x < indexRect.right; x++) {
            for (let y = indexRect.top; y < indexRect.bottom; y++) {
                grid[x][y].push({ element: element, rect: rect });
            }
        }
    }
    /**
     * Checks for conflict of given rectangle in registered elements.
     * @param rect The rectengle to check.
     * @return True if conflict is detected.
     */
    hasConflict(rect) {
        const indexRect = this.getGridIndexRect(rect), grid = this.grid, isIntersecting = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_3__.isIntersecting;
        for (let x = indexRect.left; x < indexRect.right; x++) {
            for (let y = indexRect.top; y < indexRect.bottom; y++) {
                for (let z = 0; z < grid[x][y].length; z++) {
                    const item = grid[x][y][z];
                    if (isIntersecting(item.rect, rect)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    /**
     * Calculates the number of rows or columns in a grid
     * @param step is the largest label size (width or height)
     * @param length is the grid size (width or height)
     * @param minCount is the minimum allowed size
     * @param maxCount is the maximum allowed size
     * @return the number of grid rows or columns
     */
    getGridRowColCount(step, length, minCount, maxCount) {
        return Math.min(Math.max(Math.ceil(length / step), minCount), maxCount);
    }
    /**
     * Returns the grid index of a given recangle
     * @param rect The rectengle to check.
     * @return grid index as a thickness object.
     */
    getGridIndexRect(rect) {
        const restrict = (n, min, max) => Math.min(Math.max(n, min), max);
        return {
            left: restrict(Math.floor(rect.left / this.cellSize.width), 0, this.colCount),
            top: restrict(Math.floor(rect.top / this.cellSize.height), 0, this.rowCount),
            right: restrict(Math.ceil((rect.left + rect.width) / this.cellSize.width), 0, this.colCount),
            bottom: restrict(Math.ceil((rect.top + rect.height) / this.cellSize.height), 0, this.rowCount)
        };
    }
}
DataLabelArrangeGrid.ARRANGEGRID_MIN_COUNT = 1;
DataLabelArrangeGrid.ARRANGEGRID_MAX_COUNT = 100;
//# sourceMappingURL=dataLabelArrangeGrid.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelInterfaces.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelInterfaces.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ContentPositions": () => (/* binding */ ContentPositions),
/* harmony export */   "OutsidePlacement": () => (/* binding */ OutsidePlacement),
/* harmony export */   "PointLabelPosition": () => (/* binding */ PointLabelPosition),
/* harmony export */   "RectOrientation": () => (/* binding */ RectOrientation)
/* harmony export */ });
/** Defines possible content positions.  */
var ContentPositions;
(function (ContentPositions) {
    /** Content position is not defined. */
    ContentPositions[ContentPositions["None"] = 0] = "None";
    /** Content aligned top left. */
    ContentPositions[ContentPositions["TopLeft"] = 1] = "TopLeft";
    /** Content aligned top center. */
    ContentPositions[ContentPositions["TopCenter"] = 2] = "TopCenter";
    /** Content aligned top right. */
    ContentPositions[ContentPositions["TopRight"] = 4] = "TopRight";
    /** Content aligned middle left. */
    ContentPositions[ContentPositions["MiddleLeft"] = 8] = "MiddleLeft";
    /** Content aligned middle center. */
    ContentPositions[ContentPositions["MiddleCenter"] = 16] = "MiddleCenter";
    /** Content aligned middle right. */
    ContentPositions[ContentPositions["MiddleRight"] = 32] = "MiddleRight";
    /** Content aligned bottom left. */
    ContentPositions[ContentPositions["BottomLeft"] = 64] = "BottomLeft";
    /** Content aligned bottom center. */
    ContentPositions[ContentPositions["BottomCenter"] = 128] = "BottomCenter";
    /** Content aligned bottom right. */
    ContentPositions[ContentPositions["BottomRight"] = 256] = "BottomRight";
    /** Content is placed inside the bounding rectangle in the center. */
    ContentPositions[ContentPositions["InsideCenter"] = 512] = "InsideCenter";
    /** Content is placed inside the bounding rectangle at the base. */
    ContentPositions[ContentPositions["InsideBase"] = 1024] = "InsideBase";
    /** Content is placed inside the bounding rectangle at the end. */
    ContentPositions[ContentPositions["InsideEnd"] = 2048] = "InsideEnd";
    /** Content is placed outside the bounding rectangle at the base. */
    ContentPositions[ContentPositions["OutsideBase"] = 4096] = "OutsideBase";
    /** Content is placed outside the bounding rectangle at the end. */
    ContentPositions[ContentPositions["OutsideEnd"] = 8192] = "OutsideEnd";
    /** Content supports all possible positions. */
    ContentPositions[ContentPositions["All"] = 16383] = "All";
})(ContentPositions || (ContentPositions = {}));
/**
 * Rectangle orientation. Rectangle orientation is used to define vertical or horizontal orientation
 * and starting/ending side of the rectangle.
 */
var RectOrientation;
(function (RectOrientation) {
    /** Rectangle with no specific orientation. */
    RectOrientation[RectOrientation["None"] = 0] = "None";
    /** Vertical rectangle with base at the bottom. */
    RectOrientation[RectOrientation["VerticalBottomTop"] = 1] = "VerticalBottomTop";
    /** Vertical rectangle with base at the top. */
    RectOrientation[RectOrientation["VerticalTopBottom"] = 2] = "VerticalTopBottom";
    /** Horizontal rectangle with base at the left. */
    RectOrientation[RectOrientation["HorizontalLeftRight"] = 3] = "HorizontalLeftRight";
    /** Horizontal rectangle with base at the right. */
    RectOrientation[RectOrientation["HorizontalRightLeft"] = 4] = "HorizontalRightLeft";
})(RectOrientation || (RectOrientation = {}));
/**
 * Defines if panel elements are allowed to be positioned
 * outside of the panel boundaries.
 */
var OutsidePlacement;
(function (OutsidePlacement) {
    /** Elements can be positioned outside of the panel. */
    OutsidePlacement[OutsidePlacement["Allowed"] = 0] = "Allowed";
    /** Elements can not be positioned outside of the panel. */
    OutsidePlacement[OutsidePlacement["Disallowed"] = 1] = "Disallowed";
    /** Elements can be partially outside of the panel. */
    OutsidePlacement[OutsidePlacement["Partial"] = 2] = "Partial";
})(OutsidePlacement || (OutsidePlacement = {}));
var PointLabelPosition;
(function (PointLabelPosition) {
    PointLabelPosition[PointLabelPosition["Above"] = 0] = "Above";
    PointLabelPosition[PointLabelPosition["Below"] = 1] = "Below";
})(PointLabelPosition || (PointLabelPosition = {}));
//# sourceMappingURL=dataLabelInterfaces.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelManager.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelManager.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataLabelManager)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/shapes/shapes.js");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/* harmony import */ var _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataLabelInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelInterfaces.js");
/* harmony import */ var _locationConverter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locationConverter */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/locationConverter.js");
/* harmony import */ var _dataLabelArrangeGrid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataLabelArrangeGrid */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelArrangeGrid.js");
// powerbi.extensibility.utils.svg

// powerbi.extensibility.utils.formatting




/**
* Arranges label elements using the anchor point or rectangle. Collisions
* between elements can be automatically detected and as a result elements
* can be repositioned or get hidden.
*/
class DataLabelManager {
    constructor() {
        this.movingStep = 3;
        this.hideOverlapped = true;
        // The global settings for all labels.
        // They can be oweridden by each label we add into the panel, because contains same properties.
        this.defaultDataLabelSettings = {
            anchorMargin: DataLabelManager.DefaultAnchorMargin,
            anchorRectOrientation: _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.None,
            contentPosition: _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.BottomCenter,
            outsidePlacement: _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.OutsidePlacement.Disallowed,
            maximumMovingDistance: DataLabelManager.DefaultMaximumMovingDistance,
            minimumMovingDistance: DataLabelManager.DefaultMinimumMovingDistance,
            validContentPositions: _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.BottomCenter,
            opacity: 1
        };
    }
    get defaultSettings() {
        return this.defaultDataLabelSettings;
    }
    /** Arranges the lables position and visibility*/
    hideCollidedLabels(viewport, data, layout, addTransform = false, hideCollidedLabels = true) {
        // Split size into a grid
        const arrangeGrid = new _dataLabelArrangeGrid__WEBPACK_IMPORTED_MODULE_1__["default"](viewport, data, layout);
        const filteredData = [];
        const transform = { x: 0, y: 0 };
        if (addTransform) {
            transform.x = viewport.width / 2;
            transform.y = viewport.height / 2;
        }
        for (let i = 0, len = data.length; i < len; i++) {
            // Filter unwanted data points
            if (!layout.filter(data[i])) {
                continue;
            }
            // Set default values where properties values are undefined
            const info = this.getLabelInfo(data[i]);
            info.anchorPoint = {
                x: layout.labelLayout.x(data[i]) + transform.x,
                y: layout.labelLayout.y(data[i]) + transform.y,
            };
            const position = this.calculateContentPosition(info, info.contentPosition, data[i].size, info.anchorMargin);
            if (DataLabelManager.isValid(position) && (!this.hasCollisions(arrangeGrid, info, position, viewport) || !hideCollidedLabels)) {
                data[i].labelX = position.left - transform.x;
                data[i].labelY = position.top - transform.y;
                // Keep track of all panel elements positions.
                arrangeGrid.add(info, position);
                // Save all data points to display
                filteredData.push(data[i]);
            }
        }
        return filteredData;
    }
    /**
     * Merges the label element info with the panel element info and returns correct label info.
     * @param source The label info.
     */
    getLabelInfo(source) {
        const settings = this.defaultDataLabelSettings;
        source.anchorMargin = source.anchorMargin !== undefined
            ? source.anchorMargin
            : settings.anchorMargin;
        source.anchorRectOrientation = source.anchorRectOrientation !== undefined
            ? source.anchorRectOrientation
            : settings.anchorRectOrientation;
        source.contentPosition = source.contentPosition !== undefined
            ? source.contentPosition
            : settings.contentPosition;
        source.maximumMovingDistance = source.maximumMovingDistance !== undefined
            ? source.maximumMovingDistance
            : settings.maximumMovingDistance;
        source.minimumMovingDistance = source.minimumMovingDistance !== undefined
            ? source.minimumMovingDistance
            : settings.minimumMovingDistance;
        source.outsidePlacement = source.outsidePlacement !== undefined
            ? source.outsidePlacement
            : settings.outsidePlacement;
        source.validContentPositions = source.validContentPositions !== undefined
            ? source.validContentPositions
            : settings.validContentPositions;
        source.opacity = source.opacity !== undefined
            ? source.opacity
            : settings.opacity;
        source.maximumMovingDistance += source.anchorMargin;
        return source;
    }
    /**
    * (Private) Calculates element position using anchor point..
    */
    calculateContentPositionFromPoint(anchorPoint, contentPosition, contentSize, offset) {
        const position = { x: 0, y: 0 };
        if (anchorPoint) {
            if (anchorPoint.x !== undefined && isFinite(anchorPoint.x)) {
                position.x = anchorPoint.x;
                switch (contentPosition) {
                    // D3 positions the label in the middle by default.
                    // The algorithem asumed the label was positioned in right so this is why we add/substract half width
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopLeft:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleLeft:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.BottomLeft:
                        position.x -= contentSize.width / 2.0;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopRight:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleRight:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.BottomRight:
                        position.x += contentSize.width / 2.0;
                        break;
                }
            }
            if (anchorPoint.y !== undefined && isFinite(anchorPoint.y)) {
                position.y = anchorPoint.y;
                switch (contentPosition) {
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleLeft:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleCenter:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleRight:
                        position.y -= contentSize.height / 2.0;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopRight:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopLeft:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopCenter:
                        position.y -= contentSize.height;
                        break;
                }
            }
            if (offset !== undefined && isFinite(offset)) {
                switch (contentPosition) {
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopLeft:
                        position.x -= offset;
                        position.y -= offset;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleLeft:
                        position.x -= offset;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.BottomLeft:
                        position.x -= offset;
                        position.y += offset;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopCenter:
                        position.y -= offset;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleCenter:
                        // Offset is not applied
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.BottomCenter:
                        position.y += offset;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopRight:
                        position.x += offset;
                        position.y -= offset;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleRight:
                        position.x += offset;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.BottomRight:
                        position.x += offset;
                        position.y += offset;
                        break;
                }
            }
        }
        return {
            left: position.x,
            top: position.y,
            width: contentSize.width,
            height: contentSize.height
        };
    }
    /** (Private) Calculates element position using anchor rect. */
    calculateContentPositionFromRect(anchorRect, anchorRectOrientation, contentPosition, contentSize, offset) {
        switch (contentPosition) {
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.InsideCenter:
                return this.handleInsideCenterPosition(anchorRectOrientation, contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.InsideEnd:
                return this.handleInsideEndPosition(anchorRectOrientation, contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.InsideBase:
                return this.handleInsideBasePosition(anchorRectOrientation, contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.OutsideEnd:
                return this.handleOutsideEndPosition(anchorRectOrientation, contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.OutsideBase:
                return this.handleOutsideBasePosition(anchorRectOrientation, contentSize, anchorRect, offset);
        }
        return { left: 0, top: 0, width: -1, height: -1 };
    }
    /** (Private) Calculates element inside center position using anchor rect. */
    handleInsideCenterPosition(anchorRectOrientation, contentSize, anchorRect, offset) {
        switch (anchorRectOrientation) {
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalBottomTop:
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalTopBottom:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.middleVertical(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalLeftRight:
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalRightLeft:
            default:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.middleHorizontal(contentSize, anchorRect, offset);
        }
    }
    /** (Private) Calculates element inside end position using anchor rect. */
    handleInsideEndPosition(anchorRectOrientation, contentSize, anchorRect, offset) {
        switch (anchorRectOrientation) {
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalBottomTop:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.topInside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalTopBottom:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.bottomInside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalRightLeft:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.leftInside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalLeftRight:
            default:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.rightInside(contentSize, anchorRect, offset);
        }
    }
    /** (Private) Calculates element inside base position using anchor rect. */
    handleInsideBasePosition(anchorRectOrientation, contentSize, anchorRect, offset) {
        switch (anchorRectOrientation) {
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalBottomTop:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.bottomInside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalTopBottom:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.topInside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalRightLeft:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.rightInside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalLeftRight:
            default:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.leftInside(contentSize, anchorRect, offset);
        }
    }
    /** (Private) Calculates element outside end position using anchor rect. */
    handleOutsideEndPosition(anchorRectOrientation, contentSize, anchorRect, offset) {
        switch (anchorRectOrientation) {
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalBottomTop:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.topOutside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalTopBottom:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.bottomOutside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalRightLeft:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.leftOutside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalLeftRight:
            default:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.rightOutside(contentSize, anchorRect, offset);
        }
    }
    /** (Private) Calculates element outside base position using anchor rect. */
    handleOutsideBasePosition(anchorRectOrientation, contentSize, anchorRect, offset) {
        switch (anchorRectOrientation) {
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalBottomTop:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.bottomOutside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalTopBottom:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.topOutside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalRightLeft:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.rightOutside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalLeftRight:
            default:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.leftOutside(contentSize, anchorRect, offset);
        }
    }
    /**  (Private) Calculates element position. */
    calculateContentPosition(anchoredElementInfo, contentPosition, contentSize, offset) {
        if (contentPosition !== _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.InsideEnd &&
            contentPosition !== _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.InsideCenter &&
            contentPosition !== _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.InsideBase &&
            contentPosition !== _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.OutsideBase &&
            contentPosition !== _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.OutsideEnd) {
            // Determine position using anchor point.
            return this.calculateContentPositionFromPoint(anchoredElementInfo.anchorPoint, contentPosition, contentSize, offset);
        }
        // Determine position using anchor rectangle.
        return this.calculateContentPositionFromRect(anchoredElementInfo.anchorRect, anchoredElementInfo.anchorRectOrientation, contentPosition, contentSize, offset);
    }
    /** (Private) Check for collisions. */
    hasCollisions(arrangeGrid, info, position, size) {
        if (arrangeGrid.hasConflict(position)) {
            return true;
        }
        // Since we divide the height by 2 we add it back to the top of the view port so labels won't be cut off
        let intersection = { left: 0, top: position.height / 2, width: size.width, height: size.height };
        intersection = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_3__.inflate(intersection, { left: DataLabelManager.InflateAmount, top: 0, right: DataLabelManager.InflateAmount, bottom: 0 });
        intersection = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_3__.intersect(intersection, position);
        if (powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_3__.isEmpty(intersection)) {
            // Empty rectangle means there is a collision
            return true;
        }
        switch (info.outsidePlacement) {
            // D3 positions the label in the middle by default.
            // The algorithem asumed the label was positioned in right so this is why we devide by 2 or 4
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.OutsidePlacement.Disallowed:
                return powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_4__.lessWithPrecision(intersection.width, position.width) ||
                    powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_4__.lessWithPrecision(intersection.height, position.height / 2);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.OutsidePlacement.Partial:
                return powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_4__.lessWithPrecision(intersection.width, position.width / 2) ||
                    powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_4__.lessWithPrecision(intersection.height, position.height / 4);
        }
        return false;
    }
    static isValid(rect) {
        return !powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_3__.isEmpty(rect) && (rect.width > 0 && rect.height > 0);
    }
}
DataLabelManager.DefaultAnchorMargin = 0; // For future use
DataLabelManager.DefaultMaximumMovingDistance = 12;
DataLabelManager.DefaultMinimumMovingDistance = 3;
DataLabelManager.InflateAmount = 5;
//# sourceMappingURL=dataLabelManager.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelUtils.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelUtils.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefaultDy": () => (/* binding */ DefaultDy),
/* harmony export */   "DefaultFontSizeInPt": () => (/* binding */ DefaultFontSizeInPt),
/* harmony export */   "LabelTextProperties": () => (/* binding */ LabelTextProperties),
/* harmony export */   "StandardFontFamily": () => (/* binding */ StandardFontFamily),
/* harmony export */   "cleanDataLabels": () => (/* binding */ cleanDataLabels),
/* harmony export */   "createColumnFormatterCacheManager": () => (/* binding */ createColumnFormatterCacheManager),
/* harmony export */   "defaultInsideLabelColor": () => (/* binding */ defaultInsideLabelColor),
/* harmony export */   "defaultLabelColor": () => (/* binding */ defaultLabelColor),
/* harmony export */   "defaultLabelDensity": () => (/* binding */ defaultLabelDensity),
/* harmony export */   "defaultLabelPrecision": () => (/* binding */ defaultLabelPrecision),
/* harmony export */   "drawDefaultLabelsForDataPointChart": () => (/* binding */ drawDefaultLabelsForDataPointChart),
/* harmony export */   "enumerateCategoryLabels": () => (/* binding */ enumerateCategoryLabels),
/* harmony export */   "enumerateDataLabels": () => (/* binding */ enumerateDataLabels),
/* harmony export */   "getDefaultColumnLabelSettings": () => (/* binding */ getDefaultColumnLabelSettings),
/* harmony export */   "getDefaultLabelSettings": () => (/* binding */ getDefaultLabelSettings),
/* harmony export */   "getDefaultPointLabelSettings": () => (/* binding */ getDefaultPointLabelSettings),
/* harmony export */   "getLabelFormattedText": () => (/* binding */ getLabelFormattedText),
/* harmony export */   "getLabelPrecision": () => (/* binding */ getLabelPrecision),
/* harmony export */   "getOptionsForLabelFormatter": () => (/* binding */ getOptionsForLabelFormatter),
/* harmony export */   "hundredPercentFormat": () => (/* binding */ hundredPercentFormat),
/* harmony export */   "isTextHeightOverflows": () => (/* binding */ isTextHeightOverflows),
/* harmony export */   "isTextWidthOverflows": () => (/* binding */ isTextWidthOverflows),
/* harmony export */   "maxLabelWidth": () => (/* binding */ maxLabelWidth),
/* harmony export */   "setHighlightedLabelsOpacity": () => (/* binding */ setHighlightedLabelsOpacity),
/* harmony export */   "updateLabelSettingsFromLabelsObject": () => (/* binding */ updateLabelSettingsFromLabelsObject)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/cssConstants.js");
/* harmony import */ var _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dataLabelInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelInterfaces.js");
/* harmony import */ var _dataLabelManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dataLabelManager */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelManager.js");
// powerbi.extensibility.utils.type

// powerbi.extensibility.utils.formatting

var font = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.font;
var numberFormat = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.formattingService.numberFormat;
var formattingService = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.formattingService.formattingService;
var textMeasurementService = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.textMeasurementService;
var valueFormatter = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.valueFormatter;
var DisplayUnitSystemType = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.displayUnitSystemType.DisplayUnitSystemType;
// powerbi.extensibility.utils.svg

var createClassAndSelector = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_1__.createClassAndSelector;


const maxLabelWidth = 50;
const defaultLabelDensity = "50";
const DefaultDy = "-0.15em";
const DefaultFontSizeInPt = 9;
const StandardFontFamily = font.Family.regular.css;
const LabelTextProperties = {
    fontFamily: font.Family.regularSecondary.css,
    fontSize: powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_2__.fromPoint(DefaultFontSizeInPt),
    fontWeight: "normal",
};
const defaultLabelColor = "#777777";
const defaultInsideLabelColor = "#ffffff";
const hundredPercentFormat = "0.00 %;-0.00 %;0.00 %";
const defaultLabelPrecision = undefined;
const defaultCountLabelPrecision = 0;
const labelGraphicsContextClass = createClassAndSelector("labels");
const linesGraphicsContextClass = createClassAndSelector("lines");
const labelsClass = createClassAndSelector("data-labels");
const lineClass = createClassAndSelector("line-label");
const DimmedOpacity = 0.4;
const DefaultOpacity = 1.0;
function getFillOpacity(selected, highlight, hasSelection, hasPartialHighlights) {
    if ((hasPartialHighlights && !highlight) || (hasSelection && !selected)) {
        return DimmedOpacity;
    }
    return DefaultOpacity;
}
function updateLabelSettingsFromLabelsObject(labelsObj, labelSettings) {
    if (labelsObj) {
        if (labelsObj.show !== undefined) {
            labelSettings.show = labelsObj.show;
        }
        if (labelsObj.showSeries !== undefined) {
            labelSettings.show = labelsObj.showSeries;
        }
        if (labelsObj.color !== undefined) {
            labelSettings.labelColor = labelsObj.color.solid.color;
        }
        if (labelsObj.labelDisplayUnits !== undefined) {
            labelSettings.displayUnits = labelsObj.labelDisplayUnits;
        }
        if (labelsObj.labelPrecision !== undefined) {
            labelSettings.precision = (labelsObj.labelPrecision >= 0)
                ? labelsObj.labelPrecision
                : defaultLabelPrecision;
        }
        if (labelsObj.fontSize !== undefined) {
            labelSettings.fontSize = labelsObj.fontSize;
        }
        if (labelsObj.showAll !== undefined) {
            labelSettings.showLabelPerSeries = labelsObj.showAll;
        }
        if (labelsObj.labelStyle !== undefined) {
            labelSettings.labelStyle = labelsObj.labelStyle;
        }
        if (labelsObj.labelPosition) {
            labelSettings.position = labelsObj.labelPosition;
        }
    }
}
function getDefaultLabelSettings(show = false, labelColor, fontSize) {
    return {
        show: show,
        position: _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_3__.PointLabelPosition.Above,
        displayUnits: 0,
        precision: defaultLabelPrecision,
        labelColor: labelColor || defaultLabelColor,
        fontSize: fontSize || DefaultFontSizeInPt,
    };
}
/* eslint-disable-next-line @typescript-eslint/no-unused-vars */
function getDefaultColumnLabelSettings(isLabelPositionInside) {
    const labelSettings = getDefaultLabelSettings(false, undefined);
    labelSettings.position = null;
    labelSettings.labelColor = undefined;
    return labelSettings;
}
function getDefaultPointLabelSettings() {
    return {
        show: false,
        position: _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_3__.PointLabelPosition.Above,
        displayUnits: 0,
        precision: defaultLabelPrecision,
        labelColor: defaultLabelColor,
        fontSize: DefaultFontSizeInPt,
    };
}
function getLabelPrecision(precision, format) {
    if (precision !== defaultLabelPrecision) {
        return precision;
    }
    if (format === "g" || format === "G") {
        return;
    }
    if (format) {
        // Calculate precision from positive format by default
        const positiveFormat = numberFormat.getComponents(format).positive, formatMetadata = numberFormat.getCustomFormatMetadata(positiveFormat, true /*calculatePrecision*/);
        if (formatMetadata.hasDots) {
            return formatMetadata.precision;
        }
    }
    // For count fields we do not want a precision by default
    return defaultCountLabelPrecision;
}
function drawDefaultLabelsForDataPointChart(data, context, layout, viewport, isAnimator = false, animationDuration, hasSelection, hideCollidedLabels = true) {
    // Hide and reposition labels that overlap
    const dataLabelManager = new _dataLabelManager__WEBPACK_IMPORTED_MODULE_4__["default"]();
    const filteredData = dataLabelManager.hideCollidedLabels(viewport, data, layout, false, hideCollidedLabels);
    const hasAnimation = isAnimator && !!animationDuration;
    let selectedLabels = selectLabels(filteredData, context, false, hasAnimation, animationDuration);
    if (!selectedLabels) {
        return;
    }
    if (hasAnimation) {
        selectedLabels
            .text((d) => d.labeltext)
            .transition("")
            .duration(animationDuration)
            // .style(layout.style as any)
            .style("opacity", (hasSelection ? (d) => getFillOpacity(d.selected, false, hasSelection, false) : 1))
            .attr("x", (d) => d.labelX)
            .attr("y", (d) => d.labelY);
        layout && layout.style && Object.keys(layout.style).forEach(style => selectedLabels = selectedLabels.style(style, layout.style[style]));
    }
    else {
        selectedLabels
            .attr("x", (d) => d.labelX)
            .attr("y", (d) => d.labelY)
            .text((d) => d.labeltext)
            .style(layout.style);
        layout && layout.style && Object.keys(layout.style).forEach(style => selectedLabels = selectedLabels.style(style, layout.style[style]));
    }
    return selectedLabels;
}
function selectLabels(filteredData, context, isDonut = false, forAnimation = false, animationDuration) {
    // Check for a case where resizing leaves no labels - then we need to remove the labels "g"
    if (filteredData.length === 0) {
        cleanDataLabels(context, true);
        return null;
    }
    if (context.select(labelGraphicsContextClass.selectorName).empty()) {
        context.append("g").classed(labelGraphicsContextClass.className, true);
    }
    // line chart ViewModel has a special "key" property for point identification since the "identity" field is set to the series identity
    const hasKey = filteredData[0].key != null;
    const hasDataPointIdentity = filteredData[0].identity != null;
    const getIdentifier = hasKey ?
        (d) => d.key
        : hasDataPointIdentity ?
            (d) => d.identity.getKey()
            : undefined;
    const labels = isDonut ?
        context.select(labelGraphicsContextClass.selectorName).selectAll(labelsClass.selectorName).data(filteredData, (d) => d.data.identity.getKey())
        : getIdentifier != null ?
            context.select(labelGraphicsContextClass.selectorName).selectAll(labelsClass.selectorName).data(filteredData, getIdentifier)
            : context.select(labelGraphicsContextClass.selectorName).selectAll(labelsClass.selectorName).data(filteredData);
    if (forAnimation) {
        labels
            .exit()
            .transition()
            .duration(animationDuration)
            .style("opacity", 0) // fade out labels that are removed
            .remove();
    }
    else {
        labels.exit().remove();
    }
    const allLabels = labels.enter()
        .append("text")
        .classed(labelsClass.className, true)
        .merge(labels);
    if (forAnimation) {
        allLabels.style("opacity", 0);
    }
    return allLabels;
}
function cleanDataLabels(context, removeLines = false) {
    const empty = [], labels = context.selectAll(labelsClass.selectorName).data(empty);
    labels
        .exit()
        .remove();
    context
        .selectAll(labelGraphicsContextClass.selectorName)
        .remove();
    if (removeLines) {
        const lines = context
            .selectAll(lineClass.selectorName)
            .data(empty);
        lines
            .exit()
            .remove();
        context
            .selectAll(linesGraphicsContextClass.selectorName)
            .remove();
    }
}
function setHighlightedLabelsOpacity(context, hasSelection, hasHighlights) {
    context
        .selectAll(labelsClass.selectorName)
        .style("fill-opacity", (d) => {
        const labelOpacity = getFillOpacity(d.selected, d.highlight, !d.highlight && hasSelection, !d.selected && hasHighlights) < 1 ? 0 : 1;
        return labelOpacity;
    });
}
function getLabelFormattedText(options) {
    const properties = {
        text: options.formatter
            ? options.formatter.format(options.label)
            : formattingService.formatValue(options.label, options.format),
        fontFamily: LabelTextProperties.fontFamily,
        fontSize: powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_2__.fromPoint(options.fontSize),
        fontWeight: LabelTextProperties.fontWeight,
    };
    return textMeasurementService.getTailoredTextOrDefault(properties, options.maxWidth
        ? options.maxWidth
        : maxLabelWidth);
}
function enumerateDataLabels(options) {
    if (!options.dataLabelsSettings) {
        return;
    }
    const instance = {
        objectName: "labels",
        selector: options.selector,
        properties: {},
    };
    if (options.show && options.selector) {
        instance.properties["showSeries"] = options.dataLabelsSettings.show;
    }
    else if (options.show) {
        instance.properties["show"] = options.dataLabelsSettings.show;
    }
    instance.properties["color"] = options.dataLabelsSettings.labelColor || defaultLabelColor;
    if (options.displayUnits) {
        instance.properties["labelDisplayUnits"] = options.dataLabelsSettings.displayUnits;
    }
    if (options.precision) {
        const precision = options.dataLabelsSettings.precision;
        instance.properties["labelPrecision"] = precision === defaultLabelPrecision ? null : precision;
    }
    if (options.position) {
        instance.properties["labelPosition"] = options.dataLabelsSettings.position;
        if (options.positionObject) {
            instance.validValues = { "labelPosition": options.positionObject };
        }
    }
    if (options.labelStyle) {
        instance.properties["labelStyle"] = options.dataLabelsSettings.labelStyle;
    }
    if (options.fontSize) {
        instance.properties["fontSize"] = options.dataLabelsSettings.fontSize;
    }
    if (options.labelDensity) {
        const lineChartSettings = options.dataLabelsSettings;
        if (lineChartSettings) {
            instance.properties["labelDensity"] = lineChartSettings.labelDensity;
        }
    }
    // Keep show all as the last property of the instance.
    if (options.showAll) {
        instance.properties["showAll"] = options.dataLabelsSettings.showLabelPerSeries;
    }
    options.instances.push(instance);
    return instance;
}
function enumerateCategoryLabels(enumeration, dataLabelsSettings, withFill, isShowCategory = false, fontSize) {
    const labelSettings = (dataLabelsSettings)
        ? dataLabelsSettings
        : getDefaultPointLabelSettings();
    const instance = {
        objectName: "categoryLabels",
        selector: null,
        properties: {
            show: isShowCategory
                ? labelSettings.showCategory
                : labelSettings.show,
            fontSize: dataLabelsSettings ? dataLabelsSettings.fontSize : DefaultFontSizeInPt,
        },
    };
    if (withFill) {
        instance.properties["color"] = labelSettings.categoryLabelColor
            ? labelSettings.categoryLabelColor
            : labelSettings.labelColor;
    }
    if (fontSize) {
        instance.properties["fontSize"] = fontSize;
    }
    enumeration.instances.push(instance);
}
function createColumnFormatterCacheManager() {
    return {
        cache: { defaultFormatter: null },
        getOrCreate(formatString, labelSetting, value2) {
            if (formatString) {
                const cacheKeyObject = {
                    formatString: formatString,
                    displayUnits: labelSetting.displayUnits,
                    precision: getLabelPrecision(labelSetting.precision, formatString),
                    value2: value2
                };
                const cacheKey = JSON.stringify(cacheKeyObject);
                if (!this.cache[cacheKey]) {
                    this.cache[cacheKey] = valueFormatter.create(getOptionsForLabelFormatter(labelSetting, formatString, value2, cacheKeyObject.precision));
                }
                return this.cache[cacheKey];
            }
            if (!this.cache.defaultFormatter) {
                this.cache.defaultFormatter = valueFormatter.create(getOptionsForLabelFormatter(labelSetting, formatString, value2, labelSetting.precision));
            }
            return this.cache.defaultFormatter;
        }
    };
}
function getOptionsForLabelFormatter(labelSetting, formatString, value2, precision) {
    return {
        displayUnitSystemType: DisplayUnitSystemType.DataLabels,
        format: formatString,
        precision: precision,
        value: labelSetting.displayUnits,
        value2: value2,
        allowFormatBeautification: true,
    };
}
function isTextWidthOverflows(textWidth, maxTextWidth) {
    return textWidth > maxTextWidth;
}
function isTextHeightOverflows(textHeight, innerChordLength) {
    return textHeight > innerChordLength;
}
//# sourceMappingURL=dataLabelUtils.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/locationConverter.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/locationConverter.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bottomInside": () => (/* binding */ bottomInside),
/* harmony export */   "bottomOutside": () => (/* binding */ bottomOutside),
/* harmony export */   "leftInside": () => (/* binding */ leftInside),
/* harmony export */   "leftOutside": () => (/* binding */ leftOutside),
/* harmony export */   "middleHorizontal": () => (/* binding */ middleHorizontal),
/* harmony export */   "middleVertical": () => (/* binding */ middleVertical),
/* harmony export */   "rightInside": () => (/* binding */ rightInside),
/* harmony export */   "rightOutside": () => (/* binding */ rightOutside),
/* harmony export */   "topInside": () => (/* binding */ topInside),
/* harmony export */   "topOutside": () => (/* binding */ topOutside)
/* harmony export */ });
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
function topInside(size, rect, offset) {
    return {
        left: rect.left + rect.width / 2.0 - size.width / 2.0,
        top: rect.top + offset,
        width: size.width,
        height: size.height
    };
}
function bottomInside(size, rect, offset) {
    return {
        left: rect.left + rect.width / 2.0 - size.width / 2.0,
        top: (rect.top + rect.height) - size.height - offset,
        width: size.width,
        height: size.height
    };
}
function rightInside(size, rect, offset) {
    return {
        left: (rect.left + rect.width) - size.width - offset,
        top: rect.top + rect.height / 2.0 - size.height / 2.0,
        width: size.width,
        height: size.height
    };
}
function leftInside(size, rect, offset) {
    return {
        left: rect.left + offset,
        top: rect.top + rect.height / 2.0 - size.height / 2.0,
        width: size.width,
        height: size.height
    };
}
function topOutside(size, rect, offset) {
    return {
        left: rect.left + rect.width / 2.0 - size.width / 2.0,
        top: rect.top - size.height - offset,
        width: size.width,
        height: size.height
    };
}
function bottomOutside(size, rect, offset) {
    return {
        left: rect.left + rect.width / 2.0 - size.width / 2.0,
        top: (rect.top + rect.height) + offset,
        width: size.width,
        height: size.height
    };
}
function rightOutside(size, rect, offset) {
    return {
        left: (rect.left + rect.width) + offset,
        top: rect.top + rect.height / 2.0 - size.height / 2.0,
        width: size.width,
        height: size.height
    };
}
function leftOutside(size, rect, offset) {
    return {
        left: rect.left - size.width - offset,
        top: rect.top + rect.height / 2.0 - size.height / 2.0,
        width: size.width,
        height: size.height
    };
}
function middleHorizontal(size, rect, offset) {
    return {
        left: rect.left + rect.width / 2.0 - size.width / 2.0 + offset,
        top: rect.top + rect.height / 2.0 - size.height / 2.0,
        width: size.width,
        height: size.height
    };
}
function middleVertical(size, rect, offset) {
    return {
        left: rect.left + rect.width / 2.0 - size.width / 2.0,
        top: rect.top + rect.height / 2.0 - size.height / 2.0 + offset,
        width: size.width,
        height: size.height
    };
}
//# sourceMappingURL=locationConverter.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/behavior/legendBehavior.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/behavior/legendBehavior.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LegendBehavior": () => (/* binding */ LegendBehavior)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_interactivityutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-interactivityutils */ "./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivityUtils.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/

class LegendBehavior {
    bindEvents(options, selectionHandler) {
        const legendItems = options.legendItems;
        this.legendIcons = options.legendIcons;
        const clearCatcher = options.clearCatcher;
        powerbi_visuals_utils_interactivityutils__WEBPACK_IMPORTED_MODULE_0__.registerStandardSelectionHandler(legendItems, selectionHandler);
        clearCatcher.on("click", () => {
            selectionHandler.handleClearSelection();
        });
    }
    renderSelection(hasSelection) {
        if (hasSelection) {
            this.legendIcons.style("fill", (d) => {
                if (!d.selected) {
                    return LegendBehavior.dimmedLegendColor;
                }
                else {
                    return d.color;
                }
            });
        }
        else {
            this.legendIcons.style("fill", (d) => {
                return d.color;
            });
        }
    }
}
LegendBehavior.dimmedLegendColor = "#A6A6A6";
//# sourceMappingURL=legendBehavior.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/interactiveLegend.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/interactiveLegend.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InteractiveLegend": () => (/* binding */ InteractiveLegend)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var _legendInterfaces__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./legendInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
/* eslint-disable powerbi-visuals/no-implied-inner-html */



class InteractiveLegend {
    constructor(element) {
        this.legendContainerParent = (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
    }
    getMargins() {
        return {
            height: InteractiveLegend.LegendHeight,
            width: 0
        };
    }
    drawLegend(legendData) {
        const data = legendData.dataPoints;
        if (data.length < 1) {
            return;
        }
        let legendContainerDiv = this.legendContainerParent.select(InteractiveLegend.LegendContainerSelector);
        if (legendContainerDiv.empty()) {
            if (!data.length) {
                return;
            }
            legendContainerDiv = this.legendContainerParent
                .insert("div", ":first-child")
                .style("height", this.getMargins().height)
                .classed(InteractiveLegend.LegendContainerClass, true);
        }
        this.legendContainerDiv = legendContainerDiv;
        // Construct the legend title and items.
        this.drawTitle(data);
        this.drawLegendItems(data);
    }
    reset() {
        if (this.legendContainerDiv) {
            this.legendContainerDiv.remove();
            this.legendContainerDiv = null;
        }
    }
    isVisible() {
        return true;
    }
    /**
     * Not supported
     */
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function */
    changeOrientation(orientation) { }
    getOrientation() {
        return _legendInterfaces__WEBPACK_IMPORTED_MODULE_1__.LegendPosition.Top;
    }
    /**
     * Draw the legend title
     */
    drawTitle(data) {
        const titleDiv = this.legendContainerDiv.selectAll(`div.${InteractiveLegend.LegendTitleClass}`), item = titleDiv.data([data[0]]);
        // Enter
        const itemEnter = item.enter(), titleDivEnter = itemEnter
            .append("div")
            .attr("class", InteractiveLegend.LegendTitleClass);
        titleDivEnter
            .filter((d) => d.iconOnlyOnLabel)
            .append("span")
            .attr("class", InteractiveLegend.legendIconClass)
            .html(InteractiveLegend.legendPlaceSelector);
        titleDivEnter.append("span");
        // Update
        item.filter((d) => d.iconOnlyOnLabel)
            .merge(itemEnter)
            .select("span." + InteractiveLegend.legendIconClass)
            .style(InteractiveLegend.legendColorCss, (d) => d.color);
        item
            .merge(itemEnter)
            .select("span:last-child")
            .text((d) => d.category);
    }
    /**
     * Draw the legend items
     */
    drawLegendItems(data) {
        // Add Mesaures - the items of the category in the legend
        this.ensureLegendTableCreated();
        const dataPointsMatrix = [data];
        const legendItemsContainer = this.legendContainerDiv
            .select("tbody")
            .selectAll("tr")
            .data(dataPointsMatrix);
        // Enter
        const legendItemsEnter = legendItemsContainer.enter(), rowEnter = legendItemsEnter.append("tr");
        const cellEnter = rowEnter
            .selectAll("td")
            .data((d) => d, (d) => d.label)
            .enter()
            .append("td")
            .attr("class", InteractiveLegend.LegendItem);
        const cellSpanEnter = cellEnter.append("span");
        cellSpanEnter.filter((d) => !d.iconOnlyOnLabel)
            .append("span")
            .html(InteractiveLegend.legendPlaceSelector)
            .attr("class", InteractiveLegend.legendIconClass)
            .attr("white-space", "nowrap")
            .style("font-size", "20px" // this creates a circle of 10px
        )
            .style("margin-bottom", "7px");
        cellSpanEnter
            .append("span")
            .attr("class", InteractiveLegend.legendItemNameClass);
        cellSpanEnter
            .append("span")
            .attr("class", InteractiveLegend.legendItemMeasureClass);
        // Update
        const legendCells = legendItemsContainer
            .merge(legendItemsEnter)
            .selectAll("td")
            .data((d) => d, (d) => d.label);
        legendCells
            .merge(legendItemsEnter)
            .select(`span.${InteractiveLegend.legendItemNameClass}`)
            .html((d) => powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_2__.textUtil.removeBreakingSpaces(d.label));
        legendCells
            .merge(legendItemsEnter)
            .select(`span.${InteractiveLegend.legendItemMeasureClass}`)
            .html((d) => `&nbsp;${d.measure}`);
        legendCells
            .merge(legendItemsEnter)
            .select("span." + InteractiveLegend.legendIconClass)
            .style("color", (d) => d.color);
        // Exit
        legendCells
            .exit()
            .remove();
    }
    /**
     * Ensure legend table is created and set horizontal pan gestures on it
     */
    ensureLegendTableCreated() {
        if (this.legendContainerDiv.select("div table").empty()) {
            const legendTable = this.legendContainerDiv
                .append("div")
                .append("table");
            legendTable.style("table-layout", "fixed").append("tbody");
            // Setup Pan Gestures of the legend
            // this.setPanGestureOnLegend(legendTable);
        }
    }
    /**
     * Set Horizontal Pan gesture for the legend
     */
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    setPanGestureOnLegend(legendTable) {
        throw "Not implemented";
        // let parentNode = <HTMLElement>this.legendContainerParent.node();
        // let viewportWidth: number = parentNode.getBoundingClientRect().width;
        // let xscale: d3.ScaleLinear<number, number> = d3.scaleLinear()
        //     .domain([0, viewportWidth])
        //     .range([0, viewportWidth]);
        // let legendZoom: d3.ZoomBehavior<any, any> = d3.zoom()
        //     .scaleExtent([1, 1]) // disable scaling
        //     // .x(xscale) ? ? ?
        //     .on("zoom", () => {
        //         // horizontal pan is valid only in case the legend items width are bigger than the viewport width
        //         if ($(legendTable[0]).width() > viewportWidth) {
        //             let t: number[] = legendZoom;
        //             let tx: number = t[0];
        //             let ty: number = t[1];
        //             tx = Math.min(tx, 0);
        //             tx = Math.max(tx, viewportWidth - $(legendTable[0]).width());
        //             legendZoom.translate([tx, ty]);
        //             legendTable.style("-ms-transform", () => { /* IE 9 */
        //                 return translateXWithPixels(tx);
        //             });
        //             legendTable.style("-webkit-transform", () => { /* Safari */
        //                 return translateXWithPixels(tx);
        //             });
        //             legendTable.style("transform", () => {
        //                 return translateXWithPixels(tx);
        //             });
        //         }
        //     });
        // if (this.legendContainerDiv) {
        //     this.legendContainerDiv.call(legendZoom);
        // } else {
        //     legendTable.call(legendZoom);
        // }
    }
}
InteractiveLegend.LegendHeight = 70;
InteractiveLegend.LegendContainerClass = "interactive-legend";
InteractiveLegend.LegendContainerSelector = ".interactive-legend";
InteractiveLegend.LegendTitleClass = "title";
InteractiveLegend.LegendItem = "item";
InteractiveLegend.legendPlaceSelector = "\u25CF";
InteractiveLegend.legendIconClass = "icon";
InteractiveLegend.legendColorCss = "color";
InteractiveLegend.legendItemNameClass = "itemName";
InteractiveLegend.legendItemMeasureClass = "itemMeasure";
//# sourceMappingURL=interactiveLegend.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legend.js":
/*!****************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legend.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLegend": () => (/* binding */ createLegend),
/* harmony export */   "isLeft": () => (/* binding */ isLeft),
/* harmony export */   "isTop": () => (/* binding */ isTop),
/* harmony export */   "positionChartArea": () => (/* binding */ positionChartArea)
/* harmony export */ });
/* harmony import */ var _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./legendInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js");
/* harmony import */ var _interactiveLegend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interactiveLegend */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/interactiveLegend.js");
/* harmony import */ var _svgLegend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./svgLegend */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/svgLegend.js");



function createLegend(legendParentElement, interactive, interactivityService, isScrollable = false, legendPosition = _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.LegendPosition.Top, interactiveBehavior) {
    if (interactive) {
        return new _interactiveLegend__WEBPACK_IMPORTED_MODULE_1__.InteractiveLegend(legendParentElement);
    }
    return new _svgLegend__WEBPACK_IMPORTED_MODULE_2__.SVGLegend(legendParentElement, legendPosition, interactivityService, isScrollable, interactiveBehavior);
}
function isLeft(orientation) {
    switch (orientation) {
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.LegendPosition.Left:
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.LegendPosition.LeftCenter:
            return true;
        default:
            return false;
    }
}
function isTop(orientation) {
    switch (orientation) {
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.LegendPosition.Top:
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.LegendPosition.TopCenter:
            return true;
        default:
            return false;
    }
}
function positionChartArea(chartArea, legend) {
    const legendMargins = legend.getMargins(), legendOrientation = legend.getOrientation();
    chartArea.style("margin-left", isLeft(legendOrientation)
        ? legendMargins.width + "px"
        : null);
    chartArea.style("margin-top", isTop(legendOrientation)
        ? legendMargins.height + "px"
        : null);
}
//# sourceMappingURL=legend.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendData.js":
/*!********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendData.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefaultLegendLabelFillColor": () => (/* binding */ DefaultLegendLabelFillColor),
/* harmony export */   "update": () => (/* binding */ update)
/* harmony export */ });
/* harmony import */ var _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./legendInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js");
/* harmony import */ var _legendPosition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./legendPosition */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendPosition.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/


const DefaultLegendLabelFillColor = "#666666";
function update(legendData, legendObject) {
    if (legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.show] == null) {
        legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.show] = true;
    }
    if (legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.show] === false) {
        legendData.dataPoints = [];
    }
    if (legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.show] === true && legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.position] == null) {
        legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.position] = _legendPosition__WEBPACK_IMPORTED_MODULE_1__.top;
    }
    if (legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.fontSize] !== undefined) {
        legendData.fontSize = legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.fontSize];
    }
    if (legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.labelColor] !== undefined) {
        const fillColor = legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.labelColor];
        if (fillColor != null) {
            legendData.labelColor = fillColor.solid.color;
        }
    }
    if (legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.showTitle] === false) {
        legendData.title = "";
    }
    else if (legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.titleText] !== undefined) {
        legendData.title = legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.titleText];
    }
}
//# sourceMappingURL=legendData.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LegendPosition": () => (/* binding */ LegendPosition),
/* harmony export */   "LineStyle": () => (/* binding */ LineStyle),
/* harmony export */   "MarkerShape": () => (/* binding */ MarkerShape),
/* harmony export */   "legendProps": () => (/* binding */ legendProps)
/* harmony export */ });
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
var LegendPosition;
(function (LegendPosition) {
    LegendPosition[LegendPosition["Top"] = 0] = "Top";
    LegendPosition[LegendPosition["Bottom"] = 1] = "Bottom";
    LegendPosition[LegendPosition["Right"] = 2] = "Right";
    LegendPosition[LegendPosition["Left"] = 3] = "Left";
    LegendPosition[LegendPosition["None"] = 4] = "None";
    LegendPosition[LegendPosition["TopCenter"] = 5] = "TopCenter";
    LegendPosition[LegendPosition["BottomCenter"] = 6] = "BottomCenter";
    LegendPosition[LegendPosition["RightCenter"] = 7] = "RightCenter";
    LegendPosition[LegendPosition["LeftCenter"] = 8] = "LeftCenter";
})(LegendPosition || (LegendPosition = {}));
var MarkerShape;
(function (MarkerShape) {
    MarkerShape["circle"] = "circle";
    MarkerShape["square"] = "square";
    MarkerShape["longDash"] = "longDash";
})(MarkerShape || (MarkerShape = {}));
var LineStyle;
(function (LineStyle) {
    LineStyle["dashed"] = "dashed";
    LineStyle["solid"] = "solid";
    LineStyle["dotted"] = "dotted";
    LineStyle["dotdash"] = "dotdash";
    LineStyle["dashdot"] = "dashdot";
})(LineStyle || (LineStyle = {}));
const legendProps = {
    show: "show",
    position: "position",
    titleText: "titleText",
    showTitle: "showTitle",
    labelColor: "labelColor",
    fontSize: "fontSize",
};
//# sourceMappingURL=legendInterfaces.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendPosition.js":
/*!************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendPosition.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bottom": () => (/* binding */ bottom),
/* harmony export */   "bottomCenter": () => (/* binding */ bottomCenter),
/* harmony export */   "left": () => (/* binding */ left),
/* harmony export */   "leftCenter": () => (/* binding */ leftCenter),
/* harmony export */   "right": () => (/* binding */ right),
/* harmony export */   "rightCenter": () => (/* binding */ rightCenter),
/* harmony export */   "top": () => (/* binding */ top),
/* harmony export */   "topCenter": () => (/* binding */ topCenter)
/* harmony export */ });
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
const top = "Top";
const bottom = "Bottom";
const left = "Left";
const right = "Right";
const topCenter = "TopCenter";
const bottomCenter = "BottomCenter";
const leftCenter = "LeftCenter";
const rightCenter = "RightCenter";
//# sourceMappingURL=legendPosition.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/markers.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/markers.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LegendIconLineTotalWidth": () => (/* binding */ LegendIconLineTotalWidth),
/* harmony export */   "defaultSize": () => (/* binding */ defaultSize),
/* harmony export */   "getPath": () => (/* binding */ getPath),
/* harmony export */   "getStrokeWidth": () => (/* binding */ getStrokeWidth)
/* harmony export */ });
/* harmony import */ var _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./legendInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js");

const defaultSize = 5;
const LegendIconLineTotalWidth = 31;
const circlePath = "M 0 0 m -5 0 a 5 5 0 1 0 10 0 a 5 5 0 1 0 -10 0";
const squarePath = "M 0 0 m -5 -5 l 10 0 l 0 10 l -10 0 z";
const longDashPath = "M -" + (LegendIconLineTotalWidth / 2) + " 0 L " + (LegendIconLineTotalWidth / 2) + " 0";
const shapeStroke = 0;
const thickStroke = 2;
function getPath(shape) {
    switch (shape) {
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.MarkerShape.circle: {
            return circlePath;
        }
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.MarkerShape.square: {
            return squarePath;
        }
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.MarkerShape.longDash: {
            return longDashPath;
        }
        default: {
            return undefined;
        }
    }
}
function getStrokeWidth(shape) {
    switch (shape) {
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.MarkerShape.longDash: {
            return thickStroke;
        }
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.MarkerShape.circle:
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.MarkerShape.square:
        default: {
            return shapeStroke;
        }
    }
}
//# sourceMappingURL=markers.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/svgLegend.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/svgLegend.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SVGLegend": () => (/* binding */ SVGLegend)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/prototype.js");
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/cssConstants.js");
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/manipulation.js");
/* harmony import */ var _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./legendInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js");
/* harmony import */ var _behavior_legendBehavior__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./behavior/legendBehavior */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/behavior/legendBehavior.js");
/* harmony import */ var powerbi_visuals_utils_interactivityutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-interactivityutils */ "./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivityBaseService.js");
/* harmony import */ var _markers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./markers */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/markers.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/









var createClassAndSelector = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_0__.createClassAndSelector;
// powerbi.extensibility.utils.interactivity
var appendClearCatcher = powerbi_visuals_utils_interactivityutils__WEBPACK_IMPORTED_MODULE_1__.appendClearCatcher;
var dataHasSelection = powerbi_visuals_utils_interactivityutils__WEBPACK_IMPORTED_MODULE_1__.dataHasSelection;
class SVGLegend {
    constructor(element, legendPosition, interactivityService, isScrollable, interactiveBehavior) {
        this.legendDataStartIndex = 0;
        this.arrowPosWindow = 1;
        this.lastCalculatedWidth = 0;
        this.visibleLegendWidth = 0;
        this.visibleLegendHeight = 0;
        this.legendFontSizeMarginDifference = 0;
        this.legendFontSizeMarginValue = 0;
        this.svg = (0,d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"])(element)
            .append("svg")
            .style("position", "absolute");
        this.svg.style("display", "inherit");
        this.svg.classed("legend", true);
        if (interactivityService) {
            this.clearCatcher = appendClearCatcher(this.svg);
        }
        this.group = this.svg
            .append("g")
            .attr("id", "legendGroup");
        this.interactiveBehavior = interactiveBehavior ? interactiveBehavior : new _behavior_legendBehavior__WEBPACK_IMPORTED_MODULE_3__.LegendBehavior();
        this.interactivityService = interactivityService;
        this.isScrollable = isScrollable;
        this.element = element;
        this.changeOrientation(legendPosition);
        this.parentViewport = { height: 0, width: 0 };
        this.calculateViewport();
        this.updateLayout();
    }
    updateLayout() {
        const legendViewport = this.viewport;
        const orientation = this.orientation;
        this.svg.attr("height", legendViewport.height || (orientation === _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.None ? 0 : this.parentViewport.height));
        this.svg.attr("width", legendViewport.width || (orientation === _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.None ? 0 : this.parentViewport.width));
        const isRight = orientation === _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Right || orientation === _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.RightCenter, isBottom = orientation === _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Bottom || orientation === _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.BottomCenter;
        this.svg.style("margin-left", isRight ? (this.parentViewport.width - legendViewport.width) + "px" : null);
        this.svg.style("margin-top", isBottom ? (this.parentViewport.height - legendViewport.height) + "px" : null);
    }
    calculateViewport() {
        switch (this.orientation) {
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Top:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Bottom:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.TopCenter:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.BottomCenter:
                const pixelHeight = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_5__.fromPointToPixel(this.data && this.data.fontSize
                    ? this.data.fontSize
                    : SVGLegend.DefaultFontSizeInPt);
                const fontHeightSize = SVGLegend.TopLegendHeight + (pixelHeight - SVGLegend.DefaultFontSizeInPt);
                this.viewport = { height: fontHeightSize, width: 0 };
                return;
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Right:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Left:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.RightCenter:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.LeftCenter:
                const width = this.lastCalculatedWidth
                    ? this.lastCalculatedWidth
                    : this.parentViewport.width * SVGLegend.LegendMaxWidthFactor;
                this.viewport = { height: 0, width: width };
                return;
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.None:
                this.viewport = { height: 0, width: 0 };
        }
    }
    getMargins() {
        return this.viewport;
    }
    isVisible() {
        return this.orientation !== _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.None;
    }
    changeOrientation(orientation) {
        if (orientation) {
            this.orientation = orientation;
        }
        else {
            this.orientation = _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Top;
        }
        this.svg.attr("orientation", orientation);
    }
    getOrientation() {
        return this.orientation;
    }
    drawLegend(data, viewport) {
        // clone because we modify legend item label with ellipsis if it is truncated
        const clonedData = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_6__.inherit(data), newDataPoints = [];
        for (const dp of data.dataPoints) {
            newDataPoints.push(powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_6__.inherit(dp));
        }
        clonedData.dataPoints = newDataPoints;
        this.setTooltipToLegendItems(clonedData);
        this.drawLegendInternal(clonedData, viewport, true /* perform auto width */);
    }
    /* eslint-disable-next-line max-lines-per-function */
    drawLegendInternal(data, viewport, autoWidth) {
        this.parentViewport = viewport;
        this.data = data;
        if (this.interactivityService)
            this.interactivityService.applySelectionStateToData(data.dataPoints);
        if (data.dataPoints.length === 0) {
            this.changeOrientation(_legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.None);
        }
        if (this.getOrientation() === _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.None) {
            data.dataPoints = [];
        }
        // Adding back the workaround for Legend Left/Right position for Map
        const mapControls = this.element.getElementsByClassName("mapControl");
        if (mapControls.length > 0 && !this.isTopOrBottom(this.orientation)) {
            for (let i = 0; i < mapControls.length; ++i) {
                const element = mapControls[i];
                element.style.display = "inline-block";
            }
        }
        this.calculateViewport();
        const layout = this.calculateLayout(data, autoWidth);
        const titleLayout = layout.title;
        const titleData = titleLayout ? [titleLayout] : [];
        const hasSelection = this.interactivityService && dataHasSelection(data.dataPoints);
        const group = this.group;
        // transform the wrapping group if position is centered
        if (this.isCentered(this.orientation)) {
            let centerOffset = 0;
            if (this.isTopOrBottom(this.orientation)) {
                centerOffset = Math.max(0, (this.parentViewport.width - this.visibleLegendWidth) / 2);
                group.attr("transform", powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.translate(centerOffset, 0));
            }
            else {
                centerOffset = Math.max((this.parentViewport.height - this.visibleLegendHeight) / 2);
                group.attr("transform", powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.translate(0, centerOffset));
            }
        }
        else {
            group.attr("transform", null);
        }
        const legendTitle = group
            .selectAll(SVGLegend.LegendTitle.selectorName);
        const legendTitleData = legendTitle.data(titleData);
        const enteredLegendTitle = legendTitleData
            .enter()
            .append("text")
            .classed(SVGLegend.LegendTitle.className, true);
        legendTitleData
            .merge(enteredLegendTitle)
            .style("fill", data.labelColor)
            .style("font-size", powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_5__.fromPoint(data.fontSize))
            .style("font-family", data.fontFamily)
            .text((d) => d.text)
            .attr("x", (d) => d.x)
            .attr("y", (d) => d.y)
            .append("title")
            .text(data.title);
        legendTitleData
            .exit()
            .remove();
        const virtualizedDataPoints = data.dataPoints.slice(this.legendDataStartIndex, this.legendDataStartIndex + layout.numberOfItems);
        const legendItems = group
            .selectAll(SVGLegend.LegendItem.selectorName)
            .data(virtualizedDataPoints, (d) => {
            return d.identity.getKey() + (d.layerNumber != null ? d.layerNumber : "");
        });
        const itemsEnter = legendItems.enter()
            .append("g")
            .classed(SVGLegend.LegendItem.className, true);
        itemsEnter
            .append("path")
            .classed(SVGLegend.LegendIcon.className, true);
        itemsEnter
            .append("text")
            .classed(SVGLegend.LegendText.className, true);
        itemsEnter
            .append("title")
            .text((d) => d.tooltip);
        const mergedLegendIcons = legendItems
            .merge(itemsEnter)
            .select(SVGLegend.LegendIcon.selectorName)
            .attr("transform", (dataPoint) => {
            return powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.translateAndScale(dataPoint.glyphPosition.x, dataPoint.glyphPosition.y, this.getIconScale(dataPoint.markerShape));
        })
            .attr("d", (dataPoint) => {
            return _markers__WEBPACK_IMPORTED_MODULE_8__.getPath(dataPoint.markerShape || _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.MarkerShape.circle);
        })
            .attr("stroke-width", (dataPoint) => {
            if (dataPoint.lineStyle) {
                return 2;
            }
            return _markers__WEBPACK_IMPORTED_MODULE_8__.getStrokeWidth(dataPoint.markerShape || _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.MarkerShape.circle);
        })
            .style("fill", (dataPoint) => {
            if (dataPoint.lineStyle) {
                return null;
            }
            return dataPoint.color;
        })
            .style("stroke", (dataPoint) => dataPoint.color)
            .style("stroke-dasharray", (dataPoint) => {
            if (dataPoint.lineStyle) {
                return SVGLegend.getStrokeDashArrayForLegend(dataPoint.lineStyle);
            }
            return null;
        })
            .style("stroke-linejoin", "round");
        legendItems
            .merge(itemsEnter)
            .select("title")
            .text((dataPoint) => dataPoint.tooltip);
        const mergedLegendItems = legendItems.merge(itemsEnter);
        mergedLegendItems
            .select(SVGLegend.LegendText.selectorName)
            .attr("x", (dataPoint) => dataPoint.textPosition.x)
            .attr("y", (dataPoint) => dataPoint.textPosition.y)
            .text((d) => d.label)
            .style("fill", data.labelColor)
            .style("font-size", powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_5__.fromPoint(data.fontSize))
            .style("font-family", data.fontFamily);
        if (this.interactivityService) {
            const behaviorOptions = {
                legendItems: mergedLegendItems,
                legendIcons: mergedLegendIcons,
                clearCatcher: this.clearCatcher,
                dataPoints: data.dataPoints,
                behavior: this.interactiveBehavior,
                interactivityServiceOptions: {
                    isLegend: true
                }
            };
            this.interactivityService.bind(behaviorOptions);
            this.interactiveBehavior.renderSelection(hasSelection);
        }
        legendItems
            .exit()
            .remove();
        this.drawNavigationArrows(layout.navigationArrows);
        this.updateLayout();
    }
    static getStrokeDashArrayForLegend(style) {
        switch (style) {
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LineStyle.dashed: {
                return "7,5";
            }
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LineStyle.dotted: {
                return "2.5,3.1";
            }
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LineStyle.dotdash: {
                return "2.5,3.1,7,3.1";
            }
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LineStyle.dashdot: {
                return "7,3.1,2.5,3.1";
            }
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LineStyle.solid: {
                return null;
            }
        }
    }
    normalizePosition(points) {
        if (this.legendDataStartIndex >= points.length) {
            this.legendDataStartIndex = points.length - 1;
        }
        if (this.legendDataStartIndex < 0) {
            this.legendDataStartIndex = 0;
        }
    }
    calculateTitleLayout(title) {
        let width = 0;
        const hasTitle = !!title;
        if (hasTitle) {
            const isHorizontal = this.isTopOrBottom(this.orientation);
            const textProperties = SVGLegend.getTextProperties(title, this.data.fontSize, this.data.fontFamily);
            let text = title;
            width = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.measureSvgTextWidth(textProperties);
            if (isHorizontal) {
                width += SVGLegend.TitlePadding;
            }
            else {
                text = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.getTailoredTextOrDefault(textProperties, this.viewport.width);
            }
            return {
                text,
                width,
                x: 0,
                y: 0,
                height: powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.estimateSvgTextHeight(textProperties)
            };
        }
        return null;
    }
    /** Performs layout offline for optimal perfomance */
    calculateLayout(data, autoWidth) {
        let dataPoints = data.dataPoints;
        if (data.dataPoints.length === 0) {
            return {
                numberOfItems: 0,
                title: null,
                navigationArrows: []
            };
        }
        this.legendFontSizeMarginValue = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_5__.fromPointToPixel(this.data && this.data.fontSize !== undefined ? this.data.fontSize : SVGLegend.DefaultFontSizeInPt);
        this.legendFontSizeMarginDifference = (this.legendFontSizeMarginValue - SVGLegend.DefaultTextMargin);
        this.normalizePosition(dataPoints);
        if (this.legendDataStartIndex < dataPoints.length) {
            dataPoints = dataPoints.slice(this.legendDataStartIndex);
        }
        const title = this.calculateTitleLayout(data.title);
        let navArrows;
        let numberOfItems;
        if (this.isTopOrBottom(this.orientation)) {
            navArrows = this.isScrollable ? this.calculateHorizontalNavigationArrowsLayout(title) : [];
            numberOfItems = this.calculateHorizontalLayout(dataPoints, title, navArrows);
        }
        else {
            navArrows = this.isScrollable ? this.calculateVerticalNavigationArrowsLayout(title) : [];
            numberOfItems = this.calculateVerticalLayout(dataPoints, title, navArrows, autoWidth);
        }
        return {
            numberOfItems,
            title,
            navigationArrows: navArrows
        };
    }
    updateNavigationArrowLayout(navigationArrows, remainingDataLength, visibleDataLength) {
        if (this.legendDataStartIndex === 0) {
            navigationArrows.shift();
        }
        const lastWindow = this.arrowPosWindow;
        this.arrowPosWindow = visibleDataLength;
        if (navigationArrows && navigationArrows.length > 0 && this.arrowPosWindow === remainingDataLength) {
            this.arrowPosWindow = lastWindow;
            navigationArrows.length = navigationArrows.length - 1;
        }
    }
    calculateHorizontalNavigationArrowsLayout(title) {
        const height = SVGLegend.LegendArrowHeight;
        const width = SVGLegend.LegendArrowWidth;
        const translateY = (this.viewport.height / 2) - (height / 2);
        const data = [];
        const rightShift = title ? title.x + title.width : 0;
        const arrowLeft = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.createArrow(width, height, 180 /*angle*/);
        const arrowRight = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.createArrow(width, height, 0 /*angle*/);
        data.push({
            x: rightShift,
            y: translateY,
            path: arrowLeft.path,
            rotateTransform: arrowLeft.transform,
            dataType: 1 /* NavigationArrowType.Decrease */
        });
        data.push({
            x: this.parentViewport.width - width,
            y: translateY,
            path: arrowRight.path,
            rotateTransform: arrowRight.transform,
            dataType: 0 /* NavigationArrowType.Increase */
        });
        return data;
    }
    calculateVerticalNavigationArrowsLayout(title) {
        const height = SVGLegend.LegendArrowHeight;
        const width = SVGLegend.LegendArrowWidth;
        const verticalCenter = this.viewport.height / 2;
        const data = [];
        const rightShift = verticalCenter + height / 2;
        const arrowTop = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.createArrow(width, height, 270 /*angle*/);
        const arrowBottom = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.createArrow(width, height, 90 /*angle*/);
        const titleHeight = title ? title.height : 0;
        data.push({
            x: rightShift,
            y: width + titleHeight,
            path: arrowTop.path,
            rotateTransform: arrowTop.transform,
            dataType: 1 /* NavigationArrowType.Decrease */
        });
        data.push({
            x: rightShift,
            y: this.parentViewport.height - height,
            path: arrowBottom.path,
            rotateTransform: arrowBottom.transform,
            dataType: 0 /* NavigationArrowType.Increase */
        });
        return data;
    }
    /**
     * Calculates the widths for each horizontal legend item.
     */
    static calculateHorizontalLegendItemsWidths(dataPoints, availableWidth, iconPadding, fontSize, fontFamily) {
        const dataPointsLength = dataPoints.length;
        // Set the maximum amount of space available to each item. They can use less, but can"t go over this number.
        let maxItemWidth = dataPointsLength > 0 ? availableWidth / dataPointsLength | 0 : 0;
        let maxItemTextWidth = maxItemWidth - iconPadding;
        // Makes sure the amount of space available to each item is at least SVGLegend.MaxTextLength wide.
        // If you had many items and/or a narrow amount of available width, the availableTextWidthPerItem would be small, essentially making everything ellipsis.
        // This prevents that from happening by giving each item at least SVGLegend.MaxTextLength of space.
        if (maxItemTextWidth < SVGLegend.MaxTextLength) {
            maxItemTextWidth = SVGLegend.MaxTextLength;
            maxItemWidth = maxItemTextWidth + iconPadding;
        }
        // Make sure the availableWidthPerItem is less than the availableWidth. This lets the long text properly add ellipsis when we"re displaying one item at a time.
        if (maxItemWidth > availableWidth) {
            maxItemWidth = availableWidth;
            maxItemTextWidth = maxItemWidth - iconPadding;
        }
        let occupiedWidth = 0;
        const legendItems = [];
        // Add legend items until we can"t fit any more (the last one doesn"t fit) or we"ve added all of them
        for (const dataPoint of dataPoints) {
            const textProperties = SVGLegend.getTextProperties(dataPoint.label, fontSize, fontFamily);
            const itemTextWidth = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.measureSvgTextWidth(textProperties);
            const desiredWidth = itemTextWidth + iconPadding;
            const overMaxWidth = desiredWidth > maxItemWidth;
            const actualWidth = overMaxWidth ? maxItemWidth : desiredWidth;
            occupiedWidth += actualWidth;
            if (occupiedWidth >= availableWidth) {
                // Always add at least 1 element
                if (legendItems.length === 0) {
                    legendItems.push({
                        dataPoint: dataPoint,
                        textProperties: textProperties,
                        desiredWidth: desiredWidth,
                        desiredOverMaxWidth: true,
                        width: desiredWidth
                    });
                    // Set the width to the amount of space we actually have
                    occupiedWidth = availableWidth;
                }
                else {
                    // Subtract the width from what was just added since it won"t fit
                    occupiedWidth -= actualWidth;
                }
                break;
            }
            legendItems.push({
                dataPoint: dataPoint,
                textProperties: textProperties,
                desiredWidth: desiredWidth,
                desiredOverMaxWidth: overMaxWidth,
                width: desiredWidth
            });
        }
        // If there are items at max width, evenly redistribute the extra space to them
        const itemsOverMax = legendItems.filter((li) => li.desiredOverMaxWidth);
        let numItemsOverMax = itemsOverMax.length;
        if (numItemsOverMax > 0) {
            let extraWidth = availableWidth - occupiedWidth;
            for (const item of itemsOverMax) {
                // Divvy up the extra space and add it to the max
                // We need to do this calculation in every loop since the remainingWidth may not be changed by the same amount every time
                const extraWidthPerItem = extraWidth / numItemsOverMax;
                const newMaxItemWidth = maxItemWidth + extraWidthPerItem;
                let usedExtraWidth;
                if (item.desiredWidth <= newMaxItemWidth) {
                    // If the item doesn"t need all the extra space, it"s not at max anymore
                    item.desiredOverMaxWidth = false;
                    usedExtraWidth = item.desiredWidth - maxItemWidth;
                }
                else {
                    // Otherwise the item is taking up all the extra space so update the actual width to indicate that
                    item.width = newMaxItemWidth;
                    usedExtraWidth = newMaxItemWidth - maxItemWidth;
                }
                extraWidth -= usedExtraWidth;
                numItemsOverMax--;
            }
        }
        return legendItems;
    }
    calculateHorizontalLayout(dataPoints, title, navigationArrows) {
        const fontSizeBiggerThanDefault = this.legendFontSizeMarginDifference > 0;
        const fontSizeMargin = fontSizeBiggerThanDefault
            ? SVGLegend.TextAndIconPadding + this.legendFontSizeMarginDifference
            : SVGLegend.TextAndIconPadding;
        let occupiedWidth = 0;
        const firstDataPointMarkerShape = dataPoints && dataPoints[0] && dataPoints[0].markerShape;
        const iconTotalItemPadding = this.getMarkerShapeWidth(firstDataPointMarkerShape) + fontSizeMargin * 1.5;
        let numberOfItems = dataPoints.length;
        // get the Y coordinate which is the middle of the container + the middle of the text height - the delta of the text
        const defaultTextProperties = SVGLegend.getTextProperties("", this.data.fontSize, this.data.fontFamily);
        const verticalCenter = this.viewport.height / 2;
        const textYCoordinate = verticalCenter + powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.estimateSvgTextHeight(defaultTextProperties) / 2
            - powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.estimateSvgTextBaselineDelta(defaultTextProperties);
        if (title) {
            occupiedWidth += title.width;
            // get the Y coordinate which is the middle of the container + the middle of the text height - the delta of the text
            title.y = verticalCenter
                + title.height / 2
                - powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.estimateSvgTextBaselineDelta(SVGLegend.getTextProperties(title.text, this.data.fontSize, this.data.fontFamily));
        }
        // if an arrow should be added, we add space for it
        if (this.legendDataStartIndex > 0) {
            occupiedWidth += SVGLegend.LegendArrowOffset;
        }
        // Calculate the width for each of the legend items
        const dataPointsLength = dataPoints.length;
        let availableWidth = this.parentViewport.width - occupiedWidth;
        let legendItems = SVGLegend.calculateHorizontalLegendItemsWidths(dataPoints, availableWidth, iconTotalItemPadding, this.data.fontSize, this.data.fontFamily);
        numberOfItems = legendItems.length;
        // If we can"t show all the legend items, subtract the "next" arrow space from the available space and re-run the width calculations
        if (numberOfItems !== dataPointsLength) {
            availableWidth -= SVGLegend.LegendArrowOffset;
            legendItems = SVGLegend.calculateHorizontalLegendItemsWidths(dataPoints, availableWidth, iconTotalItemPadding, this.data.fontSize, this.data.fontFamily);
            numberOfItems = legendItems.length;
        }
        for (const legendItem of legendItems) {
            const { dataPoint } = legendItem;
            const markerShapeWidth = this.getMarkerShapeWidth(dataPoint.markerShape);
            dataPoint.glyphPosition = {
                // the space taken so far + the radius + the margin / radiusFactor to prevent huge spaces
                x: occupiedWidth + markerShapeWidth / 2 + (this.legendFontSizeMarginDifference / this.getLegendIconFactor(dataPoint.markerShape)),
                // The middle of the container but a bit lower due to text not being in the middle (qP for example making middle between q and P)
                y: this.viewport.height * SVGLegend.LegendIconYRatio,
            };
            const fixedTextShift = (fontSizeMargin / (this.getLegendIconFactor(dataPoint.markerShape) / 2)) + markerShapeWidth;
            dataPoint.textPosition = {
                x: occupiedWidth + fixedTextShift,
                y: textYCoordinate,
            };
            // If we're over the max width, process it so it fits
            if (legendItem.desiredOverMaxWidth) {
                const textWidth = legendItem.width - iconTotalItemPadding;
                dataPoint.label = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.getTailoredTextOrDefault(legendItem.textProperties, textWidth);
            }
            occupiedWidth += legendItem.width;
        }
        this.visibleLegendWidth = occupiedWidth;
        this.updateNavigationArrowLayout(navigationArrows, dataPointsLength, numberOfItems);
        return numberOfItems;
    }
    getMarkerShapeWidth(markerShape) {
        switch (markerShape) {
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.MarkerShape.longDash: {
                return _markers__WEBPACK_IMPORTED_MODULE_8__.LegendIconLineTotalWidth;
            }
            default: {
                return SVGLegend.LegendIconRadius * 2;
            }
        }
    }
    getLegendIconFactor(markerShape) {
        switch (markerShape) {
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.MarkerShape.circle:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.MarkerShape.square: {
                return 5;
            }
            default: {
                return 6;
            }
        }
    }
    getIconScale(markerShape) {
        switch (markerShape) {
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.MarkerShape.circle:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.MarkerShape.square: {
                return SVGLegend.LegendIconRadius / _markers__WEBPACK_IMPORTED_MODULE_8__.defaultSize;
            }
            default: {
                return 1;
            }
        }
    }
    calculateVerticalLayout(dataPoints, title, navigationArrows, autoWidth) {
        // check if we need more space for the margin, or use the default text padding
        const fontSizeBiggerThenDefault = this.legendFontSizeMarginDifference > 0;
        const fontFactor = fontSizeBiggerThenDefault ? this.legendFontSizeMarginDifference : 0;
        // calculate the size needed after font size change
        const verticalLegendHeight = 20 + fontFactor;
        const spaceNeededByTitle = 15 + fontFactor;
        const extraShiftForTextAlignmentToIcon = 4 + fontFactor;
        let totalSpaceOccupiedThusFar = verticalLegendHeight;
        // the default space for text and icon radius + the margin after the font size change
        const firstDataPointMarkerShape = dataPoints && dataPoints[0] && dataPoints[0].markerShape;
        const fixedHorizontalIconShift = SVGLegend.TextAndIconPadding
            + this.getMarkerShapeWidth(firstDataPointMarkerShape) / 2
            + this.legendFontSizeMarginDifference;
        const fixedHorizontalTextShift = fixedHorizontalIconShift * 2;
        // check how much space is needed
        const maxHorizontalSpaceAvaliable = autoWidth
            ? this.parentViewport.width * SVGLegend.LegendMaxWidthFactor
                - fixedHorizontalTextShift - SVGLegend.LegendEdgeMariginWidth
            : this.lastCalculatedWidth
                - fixedHorizontalTextShift - SVGLegend.LegendEdgeMariginWidth;
        let numberOfItems = dataPoints.length;
        let maxHorizontalSpaceUsed = 0;
        const parentHeight = this.parentViewport.height;
        if (title) {
            totalSpaceOccupiedThusFar += spaceNeededByTitle;
            title.x = SVGLegend.TextAndIconPadding;
            title.y = spaceNeededByTitle;
            maxHorizontalSpaceUsed = title.width || 0;
        }
        // if an arrow should be added, we add space for it
        if (this.legendDataStartIndex > 0)
            totalSpaceOccupiedThusFar += SVGLegend.LegendArrowOffset;
        const dataPointsLength = dataPoints.length;
        for (let i = 0; i < dataPointsLength; i++) {
            const dp = dataPoints[i];
            const textProperties = SVGLegend.getTextProperties(dp.label, this.data.fontSize, this.data.fontFamily);
            dp.glyphPosition = {
                x: fixedHorizontalIconShift,
                y: (totalSpaceOccupiedThusFar + extraShiftForTextAlignmentToIcon) - powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.estimateSvgTextBaselineDelta(textProperties)
            };
            dp.textPosition = {
                x: fixedHorizontalTextShift,
                y: totalSpaceOccupiedThusFar + extraShiftForTextAlignmentToIcon
            };
            // TODO: [PERF] Get rid of this extra measurement, and modify
            // getTailoredTextToReturnWidth + Text
            const width = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.measureSvgTextWidth(textProperties);
            if (width > maxHorizontalSpaceUsed) {
                maxHorizontalSpaceUsed = width;
            }
            if (width > maxHorizontalSpaceAvaliable) {
                const text = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.getTailoredTextOrDefault(textProperties, maxHorizontalSpaceAvaliable);
                dp.label = text;
            }
            totalSpaceOccupiedThusFar += verticalLegendHeight;
            if (totalSpaceOccupiedThusFar > parentHeight) {
                numberOfItems = i;
                break;
            }
        }
        if (autoWidth) {
            if (maxHorizontalSpaceUsed < maxHorizontalSpaceAvaliable) {
                this.lastCalculatedWidth = this.viewport.width = Math.ceil(maxHorizontalSpaceUsed + fixedHorizontalTextShift + SVGLegend.LegendEdgeMariginWidth);
            }
            else {
                this.lastCalculatedWidth = this.viewport.width = Math.ceil(this.parentViewport.width * SVGLegend.LegendMaxWidthFactor);
            }
        }
        else {
            this.viewport.width = this.lastCalculatedWidth;
        }
        this.visibleLegendHeight = totalSpaceOccupiedThusFar;
        navigationArrows.forEach(d => d.x = this.lastCalculatedWidth / 2);
        this.updateNavigationArrowLayout(navigationArrows, dataPointsLength, numberOfItems);
        return numberOfItems;
    }
    drawNavigationArrows(layout) {
        let arrows = this.group.selectAll(SVGLegend.NavigationArrow.selectorName)
            .data(layout);
        arrows.exit().remove();
        arrows = arrows.merge(arrows
            .enter()
            .append("g")
            .classed(SVGLegend.NavigationArrow.className, true))
            .on("click", (event, d) => {
            const pos = this.legendDataStartIndex;
            this.legendDataStartIndex = d.dataType === 0 /* NavigationArrowType.Increase */
                ? pos + this.arrowPosWindow : pos - this.arrowPosWindow;
            this.drawLegendInternal(this.data, this.parentViewport, false);
        })
            .attr("transform", (d) => powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.translate(d.x, d.y));
        let path = arrows.selectAll("path")
            .data((data) => [data]);
        path.exit().remove();
        path = path
            .enter()
            .append("path")
            .merge(path);
        path.attr("d", (d) => d.path)
            .attr("transform", (d) => d.rotateTransform);
    }
    isTopOrBottom(orientation) {
        switch (orientation) {
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Top:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Bottom:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.BottomCenter:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.TopCenter:
                return true;
            default:
                return false;
        }
    }
    isCentered(orientation) {
        switch (orientation) {
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.BottomCenter:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.LeftCenter:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.RightCenter:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.TopCenter:
                return true;
            default:
                return false;
        }
    }
    /* eslint-disable-next-line @typescript-eslint/no-empty-function */
    reset() { }
    static getTextProperties(text, fontSize, fontFamily) {
        return {
            fontFamily,
            fontSize: powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_5__.fromPoint(fontSize || SVGLegend.DefaultFontSizeInPt),
            text,
        };
    }
    setTooltipToLegendItems(data) {
        // we save the values to tooltip before cut
        for (const dataPoint of data.dataPoints) {
            dataPoint.tooltip = dataPoint.label;
        }
    }
}
SVGLegend.DefaultFontSizeInPt = 8;
SVGLegend.LegendIconRadius = 5;
SVGLegend.MaxTextLength = 60;
SVGLegend.TextAndIconPadding = 5;
SVGLegend.TitlePadding = 15;
SVGLegend.LegendEdgeMariginWidth = 10;
SVGLegend.LegendMaxWidthFactor = 0.3;
SVGLegend.TopLegendHeight = 24;
SVGLegend.DefaultTextMargin = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_5__.fromPointToPixel(SVGLegend.DefaultFontSizeInPt);
SVGLegend.LegendIconYRatio = 0.52;
// Navigation Arrow constants
SVGLegend.LegendArrowOffset = 10;
SVGLegend.LegendArrowHeight = 15;
SVGLegend.LegendArrowWidth = 7.5;
SVGLegend.LegendItem = createClassAndSelector("legendItem");
SVGLegend.LegendText = createClassAndSelector("legendText");
SVGLegend.LegendIcon = createClassAndSelector("legendIcon");
SVGLegend.LegendTitle = createClassAndSelector("legendTitle");
SVGLegend.NavigationArrow = createClassAndSelector("navArrow");
//# sourceMappingURL=svgLegend.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-colorutils/lib/colorHelper.js":
/*!**************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-colorutils/lib/colorHelper.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ColorHelper": () => (/* binding */ ColorHelper)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils */ "./node_modules/powerbi-visuals-utils-colorutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js");
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

class ColorHelper {
    constructor(colors, fillProp, defaultDataPointColor) {
        this.colorPalette = colors;
        this.fillProp = fillProp;
        this.defaultDataPointColor = defaultDataPointColor;
    }
    /**
     * Gets the color for the given series value.
     * If no explicit color or default color has been set then the color is
     * allocated from the color scale for this series.
     */
    getColorForSeriesValue(objects, value, themeColorName) {
        if (this.isHighContrast) {
            return this.getThemeColor(themeColorName);
        }
        return (this.fillProp && powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__.getFillColor(objects, this.fillProp))
            || this.defaultDataPointColor
            || this.colorPalette.getColor(String(value)).value;
    }
    /**
     * Gets the color for the given measure.
     */
    getColorForMeasure(objects, measureKey, themeColorName) {
        if (this.isHighContrast) {
            return this.getThemeColor(themeColorName);
        }
        // Note, this allocates the color from the scale regardless of if we use it or not which helps keep colors stable.
        const scaleColor = this.colorPalette.getColor(measureKey).value;
        return (this.fillProp && powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__.getFillColor(objects, this.fillProp))
            || this.defaultDataPointColor
            || scaleColor;
    }
    static normalizeSelector(selector, isSingleSeries) {
        // For dynamic series charts, colors are set per category.  So, exclude any measure (metadata repetition) from the selector.
        if (selector && (isSingleSeries || selector.data)) {
            return { data: selector.data };
        }
        return selector;
    }
    get isHighContrast() {
        return !!(this.colorPalette && this.colorPalette.isHighContrast);
    }
    getThemeColor(themeColorName = "background") {
        return this.colorPalette
            && this.colorPalette[themeColorName]
            && this.colorPalette[themeColorName].value;
    }
    getHighContrastColor(themeColorName = "background", defaultColor) {
        return this.isHighContrast
            ? this.getThemeColor(themeColorName)
            : defaultColor;
    }
}
//# sourceMappingURL=colorHelper.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-colorutils/lib/colorUtils.js":
/*!*************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-colorutils/lib/colorUtils.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calculateHighlightColor": () => (/* binding */ calculateHighlightColor),
/* harmony export */   "channelBlend": () => (/* binding */ channelBlend),
/* harmony export */   "createLinearColorScale": () => (/* binding */ createLinearColorScale),
/* harmony export */   "darken": () => (/* binding */ darken),
/* harmony export */   "hexBlend": () => (/* binding */ hexBlend),
/* harmony export */   "hexString": () => (/* binding */ hexString),
/* harmony export */   "hexToRGBString": () => (/* binding */ hexToRGBString),
/* harmony export */   "normalizeToHexString": () => (/* binding */ normalizeToHexString),
/* harmony export */   "parseColorString": () => (/* binding */ parseColorString),
/* harmony export */   "rgbBlend": () => (/* binding */ rgbBlend),
/* harmony export */   "rgbString": () => (/* binding */ rgbString),
/* harmony export */   "rotate": () => (/* binding */ rotate),
/* harmony export */   "shadeColor": () => (/* binding */ shadeColor)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/

function hexToRGBString(hex, transparency) {
    // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
    const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function (m, r, g, b) {
        return r + r + g + g + b + b;
    });
    // Hex format which return the format r-g-b
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    const rgb = result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
    // Wrong input
    if (rgb === null) {
        return "";
    }
    if (!transparency && transparency !== 0) {
        return "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
    }
    else {
        return "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + transparency + ")";
    }
}
function rotate(rgbString, rotateFactor) {
    if (rotateFactor === 0)
        return rgbString;
    const originalRgb = parseColorString(rgbString);
    const originalHsv = rgbToHsv(originalRgb);
    const rotatedHsv = rotateHsv(originalHsv, rotateFactor);
    const rotatedRgb = hsvToRgb(rotatedHsv);
    return hexString(rotatedRgb);
}
function normalizeToHexString(color) {
    const rgb = parseColorString(color);
    return hexString(rgb);
}
function parseColorString(color) {
    if (color.indexOf("#") >= 0) {
        if (color.length === 7) {
            // #RRGGBB
            const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(color);
            if (result == null || result.length < 4)
                return;
            return {
                R: parseInt(result[1], 16),
                G: parseInt(result[2], 16),
                B: parseInt(result[3], 16),
            };
        }
        else if (color.length === 4) {
            // #RGB
            const result = /^#?([a-f\d])([a-f\d])([a-f\d])$/i.exec(color);
            if (result == null || result.length < 4)
                return;
            return {
                R: parseInt(result[1] + result[1], 16),
                G: parseInt(result[2] + result[2], 16),
                B: parseInt(result[3] + result[3], 16),
            };
        }
    }
    else if (color.indexOf("rgb(") >= 0) {
        // rgb(R, G, B)
        const result = /^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/.exec(color);
        if (result == null || result.length < 4)
            return;
        return {
            R: parseInt(result[1], 10),
            G: parseInt(result[2], 10),
            B: parseInt(result[3], 10),
        };
    }
    else if (color.indexOf("rgba(") >= 0) {
        // rgba(R, G, B, A)
        const result = /^rgba\((\d+),\s*(\d+),\s*(\d+),\s*(\d*(?:\.\d+)?)\)$/.exec(color);
        if (result == null || result.length < 5)
            return;
        return {
            R: parseInt(result[1], 10),
            G: parseInt(result[2], 10),
            B: parseInt(result[3], 10),
            A: parseFloat(result[4]),
        };
    }
}
function rgbToHsv(rgbColor) {
    let s, h;
    const r = rgbColor.R / 255, g = rgbColor.G / 255, b = rgbColor.B / 255;
    const min = Math.min(r, Math.min(g, b));
    const max = Math.max(r, Math.max(g, b));
    const v = max;
    const delta = max - min;
    if (max === 0 || delta === 0) {
        // R, G, and B must be 0.0, or all the same.
        // In this case, S is 0.0, and H is undefined.
        // Using H = 0.0 is as good as any...
        s = 0;
        h = 0;
    }
    else {
        s = delta / max;
        if (r === max) {
            // Between Yellow and Magenta
            h = (g - b) / delta;
        }
        else if (g === max) {
            // Between Cyan and Yellow
            h = 2 + (b - r) / delta;
        }
        else {
            // Between Magenta and Cyan
            h = 4 + (r - g) / delta;
        }
    }
    // Scale h to be between 0.0 and 1.
    // This may require adding 1, if the value
    // is negative.
    h /= 6;
    if (h < 0) {
        h += 1;
    }
    return {
        H: h,
        S: s,
        V: v,
    };
}
function hsvToRgb(hsvColor) {
    let r, g, b;
    const h = hsvColor.H, s = hsvColor.S, v = hsvColor.V;
    if (s === 0) {
        // If s is 0, all colors are the same.
        // This is some flavor of gray.
        r = v;
        g = v;
        b = v;
    }
    else {
        // The color wheel consists of 6 sectors.
        // Figure out which sector you//re in.
        const sectorPos = h * 6;
        const sectorNumber = Math.floor(sectorPos);
        // get the fractional part of the sector.
        // That is, how many degrees into the sector
        // are you?
        const fractionalSector = sectorPos - sectorNumber;
        // Calculate values for the three axes
        // of the color.
        const p = v * (1.0 - s);
        const q = v * (1.0 - (s * fractionalSector));
        const t = v * (1.0 - (s * (1 - fractionalSector)));
        // Assign the fractional colors to r, g, and b
        // based on the sector the angle is in.
        switch (sectorNumber) {
            case 0:
                r = v;
                g = t;
                b = p;
                break;
            case 1:
                r = q;
                g = v;
                b = p;
                break;
            case 2:
                r = p;
                g = v;
                b = t;
                break;
            case 3:
                r = p;
                g = q;
                b = v;
                break;
            case 4:
                r = t;
                g = p;
                b = v;
                break;
            case 5:
                r = v;
                g = p;
                b = q;
                break;
        }
    }
    return {
        R: Math.floor(r * 255),
        G: Math.floor(g * 255),
        B: Math.floor(b * 255),
    };
}
function rotateHsv(hsvColor, rotateFactor) {
    const newH = hsvColor.H + rotateFactor;
    return {
        H: newH > 1 ? newH - 1 : newH,
        S: hsvColor.S,
        V: hsvColor.V,
    };
}
function darken(color, diff) {
    const flooredNumber = Math.floor(diff);
    return {
        R: Math.max(0, color.R - flooredNumber),
        G: Math.max(0, color.G - flooredNumber),
        B: Math.max(0, color.B - flooredNumber),
    };
}
function rgbString(color) {
    if (color.A == null)
        return "rgb(" + color.R + "," + color.G + "," + color.B + ")";
    return "rgba(" + color.R + "," + color.G + "," + color.B + "," + color.A + ")";
}
function hexString(color) {
    return "#" + componentToHex(color.R) + componentToHex(color.G) + componentToHex(color.B);
}
/**
 * Overlays a color with opacity over a background color
 * @param {string} foreColor Color to overlay
 * @param {number} opacity number between 0 (transparent) to 1 (opaque)
 * @param {string} backColor Background color
 * @returns Result color
 */
function hexBlend(foreColor, opacity, backColor) {
    return hexString(rgbBlend(parseColorString(foreColor), opacity, parseColorString(backColor)));
}
/**
 * Overlays a color with opacity over a background color. Any alpha-channel is ignored.
 * @param {RgbColor} foreColor Color to overlay
 * @param {number} opacity number between 0 (transparent) to 1 (opaque). Any value out of range will be corrected.
 * @param {RgbColor} backColor Background color
 * @returns
 */
function rgbBlend(foreColor, opacity, backColor) {
    // correct opacity
    opacity = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(opacity, 0, 1);
    return {
        R: channelBlend(foreColor.R, opacity, backColor.R),
        G: channelBlend(foreColor.G, opacity, backColor.G),
        B: channelBlend(foreColor.B, opacity, backColor.B)
    };
}
/**
 * Blend a single channel for two colors
 * @param {number} foreChannel Channel of foreground color. Will be enforced to be between 0 and 255.
 * @param {number} opacity opacity of the foreground color. Will be enforced to be between 0 and 1.
 * @param {number} backChannel channel of the background color. Will be enforced to be between 0 and 255.
 * @returns result channel value
 */
function channelBlend(foreChannel, opacity, backChannel) {
    opacity = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(opacity, 0, 1);
    foreChannel = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(foreChannel, 0, 255);
    backChannel = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(backChannel, 0, 255);
    return Math.round((opacity * foreChannel) +
        ((1 - opacity) * backChannel));
}
/**
 * Calculate the highlight color from the rgbColor based on the lumianceThreshold and delta.
 * @param {RgbColor} rgbColor The original color.
 * @param {number} lumianceThreshold The lumiance threshold used, the highlight color will be brighter when the lumiance is smaller the threshold, otherwise the highlight color will be darker. Will be enforced to be between 0 and 1.
 * @param {number} delta the highlight color will be calculated based on the delta. Will be enforced to be between 0 and 1. lumianceThreshold + delta cannot greater than 1.
 * @returns result highlight color value
 */
function calculateHighlightColor(rgbColor, lumianceThreshold, delta) {
    const hsvColor = rgbToHsv(rgbColor);
    // For invalid lumianceThreshold and delta value, use default.
    if (lumianceThreshold + delta > 1 || lumianceThreshold <= 0 || delta <= 0) {
        lumianceThreshold = 0.8;
        delta = 0.2;
    }
    // Make it lighter when the lumianceValue is less than 200, otherwise make it darker.
    if (hsvColor.V < lumianceThreshold)
        hsvColor.V = hsvColor.V + delta;
    else
        hsvColor.V = hsvColor.V - delta;
    return hexString(hsvToRgb(hsvColor));
}
function componentToHex(hexComponent) {
    const clamped = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(hexComponent, 0, 255);
    const hex = clamped.toString(16).toUpperCase();
    return hex.length === 1 ? "0" + hex : hex;
}
function createLinearColorScale(domain, range, clamp) {
    const rangeColors = range.map(v => parseColorString(v));
    return value => {
        // treat undefined and NULL as 0
        if (value == null)
            value = 0;
        // Returns undefined for NaN values
        if (isNaN(value))
            return undefined;
        if (clamp) {
            if (value >= domain[domain.length - 1])
                return range[range.length - 1];
            if (value <= domain[0])
                return range[0];
        }
        let domainMin, domainMax, rangeMin, rangeMax;
        for (let i = 1, len = domain.length; i < len; i++) {
            domainMin = domain[i - 1];
            domainMax = domain[i];
            if (domainMax === value) {
                return range[i];
            }
            else if (value >= domainMin && value <= domainMax) {
                rangeMin = rangeColors[i - 1];
                rangeMax = rangeColors[i];
                break;
            }
        }
        const newValue = {
            R: Math.round((((value - domainMin) * (rangeMax.R - rangeMin.R)) / (domainMax - domainMin)) + rangeMin.R),
            G: Math.round((((value - domainMin) * (rangeMax.G - rangeMin.G)) / (domainMax - domainMin)) + rangeMin.G),
            B: Math.round((((value - domainMin) * (rangeMax.B - rangeMin.B)) / (domainMax - domainMin)) + rangeMin.B)
        };
        return hexString(newValue);
    };
}
/**
 * Convert string hex expression to number, calculate percentage and R, G, B channels.
 * Apply percentage for each channel and return back hex value as string with pound sign.
 */
function shadeColor(color, percent) {
    const hexNum = parseInt(color.slice(1), 16);
    const t = percent < 0 ? 0 : 255;
    const p = percent < 0 ? percent * -1 : percent;
    const R = hexNum >> 16;
    const G = hexNum >> 8 & 0x00FF;
    const B = hexNum & 0x0000FF;
    const hexString = "#" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);
    return hexString;
}
//# sourceMappingURL=colorUtils.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-colorutils/lib/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-colorutils/lib/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ColorHelper": () => (/* reexport safe */ _colorHelper__WEBPACK_IMPORTED_MODULE_0__.ColorHelper),
/* harmony export */   "calculateHighlightColor": () => (/* binding */ calculateHighlightColor),
/* harmony export */   "channelBlend": () => (/* binding */ channelBlend),
/* harmony export */   "createLinearColorScale": () => (/* binding */ createLinearColorScale),
/* harmony export */   "darken": () => (/* binding */ darken),
/* harmony export */   "hexBlend": () => (/* binding */ hexBlend),
/* harmony export */   "hexString": () => (/* binding */ hexString),
/* harmony export */   "hexToRGBString": () => (/* binding */ hexToRGBString),
/* harmony export */   "normalizeToHexString": () => (/* binding */ normalizeToHexString),
/* harmony export */   "parseColorString": () => (/* binding */ parseColorString),
/* harmony export */   "rgbBlend": () => (/* binding */ rgbBlend),
/* harmony export */   "rgbString": () => (/* binding */ rgbString),
/* harmony export */   "rotate": () => (/* binding */ rotate),
/* harmony export */   "shadeColor": () => (/* binding */ shadeColor)
/* harmony export */ });
/* harmony import */ var _colorHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./colorHelper */ "./node_modules/powerbi-visuals-utils-colorutils/lib/colorHelper.js");
/* harmony import */ var _colorUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./colorUtils */ "./node_modules/powerbi-visuals-utils-colorutils/lib/colorUtils.js");


var calculateHighlightColor = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.calculateHighlightColor;
var channelBlend = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.channelBlend;
var createLinearColorScale = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.createLinearColorScale;
var darken = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.darken;
var hexBlend = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.hexBlend;
var hexString = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.hexString;
var hexToRGBString = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.hexToRGBString;
var normalizeToHexString = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.normalizeToHexString;
var parseColorString = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.parseColorString;
var rgbBlend = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.rgbBlend;
var rgbString = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.rgbString;
var rotate = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.rotate;
var shadeColor = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.shadeColor;

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-colorutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-colorutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFillColorByPropertyName": () => (/* binding */ getFillColorByPropertyName),
/* harmony export */   "getValue": () => (/* binding */ getValue)
/* harmony export */ });
function getValue(object, propertyName, defaultValue) {
    if (!object) {
        return defaultValue;
    }
    const propertyValue = object[propertyName];
    if (propertyValue === undefined) {
        return defaultValue;
    }
    return propertyValue;
}
/** Gets the solid color from a fill property using only a propertyName */
function getFillColorByPropertyName(object, propertyName, defaultColor) {
    const value = getValue(object, propertyName);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
//# sourceMappingURL=dataViewObject.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-colorutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-colorutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCommonValue": () => (/* binding */ getCommonValue),
/* harmony export */   "getFillColor": () => (/* binding */ getFillColor),
/* harmony export */   "getObject": () => (/* binding */ getObject),
/* harmony export */   "getValue": () => (/* binding */ getValue)
/* harmony export */ });
/* harmony import */ var _dataViewObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataViewObject */ "./node_modules/powerbi-visuals-utils-colorutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js");

/** Gets the value of the given object/property pair. */
function getValue(objects, propertyId, defaultValue) {
    if (!objects) {
        return defaultValue;
    }
    return _dataViewObject__WEBPACK_IMPORTED_MODULE_0__.getValue(objects[propertyId.objectName], propertyId.propertyName, defaultValue);
}
/** Gets an object from objects. */
function getObject(objects, objectName, defaultValue) {
    if (objects && objects[objectName]) {
        return objects[objectName];
    }
    return defaultValue;
}
/** Gets the solid color from a fill property. */
function getFillColor(objects, propertyId, defaultColor) {
    const value = getValue(objects, propertyId);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
function getCommonValue(objects, propertyId, defaultValue) {
    const value = getValue(objects, propertyId, defaultValue);
    if (value && value.solid) {
        return value.solid.color;
    }
    if (value === undefined
        || value === null
        || (typeof value === "object" && !value.solid)) {
        return defaultValue;
    }
    return value;
}
//# sourceMappingURL=dataViewObjects.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js":
/*!********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCategoryIndexOfRole": () => (/* binding */ getCategoryIndexOfRole),
/* harmony export */   "getMeasureIndexOfRole": () => (/* binding */ getMeasureIndexOfRole),
/* harmony export */   "hasRole": () => (/* binding */ hasRole),
/* harmony export */   "hasRoleInDataView": () => (/* binding */ hasRoleInDataView),
/* harmony export */   "hasRoleInValueColumn": () => (/* binding */ hasRoleInValueColumn)
/* harmony export */ });
function getMeasureIndexOfRole(grouped, roleName) {
    if (!grouped || !grouped.length) {
        return -1;
    }
    let firstGroup = grouped[0];
    if (firstGroup.values && firstGroup.values.length > 0) {
        for (let i = 0, len = firstGroup.values.length; i < len; ++i) {
            let value = firstGroup.values[i];
            if (value && value.source) {
                if (hasRole(value.source, roleName)) {
                    return i;
                }
            }
        }
    }
    return -1;
}
function getCategoryIndexOfRole(categories, roleName) {
    if (categories && categories.length) {
        for (let i = 0, ilen = categories.length; i < ilen; i++) {
            if (hasRole(categories[i].source, roleName)) {
                return i;
            }
        }
    }
    return -1;
}
function hasRole(column, name) {
    let roles = column.roles;
    return roles && roles[name];
}
function hasRoleInDataView(dataView, name) {
    return dataView != null
        && dataView.metadata != null
        && dataView.metadata.columns
        && dataView.metadata.columns.some((c) => c.roles && c.roles[name] !== undefined); // any is an alias of some
}
function hasRoleInValueColumn(valueColumn, name) {
    return valueColumn
        && valueColumn.source
        && valueColumn.source.roles
        && (valueColumn.source.roles[name] === true);
}
//# sourceMappingURL=dataRoleHelper.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js":
/*!********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFillColorByPropertyName": () => (/* binding */ getFillColorByPropertyName),
/* harmony export */   "getValue": () => (/* binding */ getValue)
/* harmony export */ });
function getValue(object, propertyName, defaultValue) {
    if (!object) {
        return defaultValue;
    }
    let propertyValue = object[propertyName];
    if (propertyValue === undefined) {
        return defaultValue;
    }
    return propertyValue;
}
/** Gets the solid color from a fill property using only a propertyName */
function getFillColorByPropertyName(object, propertyName, defaultColor) {
    let value = getValue(object, propertyName);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
//# sourceMappingURL=dataViewObject.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCommonValue": () => (/* binding */ getCommonValue),
/* harmony export */   "getFillColor": () => (/* binding */ getFillColor),
/* harmony export */   "getObject": () => (/* binding */ getObject),
/* harmony export */   "getValue": () => (/* binding */ getValue)
/* harmony export */ });
/* harmony import */ var _dataViewObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataViewObject */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js");

/** Gets the value of the given object/property pair. */
function getValue(objects, propertyId, defaultValue) {
    if (!objects) {
        return defaultValue;
    }
    return _dataViewObject__WEBPACK_IMPORTED_MODULE_0__.getValue(objects[propertyId.objectName], propertyId.propertyName, defaultValue);
}
/** Gets an object from objects. */
function getObject(objects, objectName, defaultValue) {
    if (objects && objects[objectName]) {
        return objects[objectName];
    }
    return defaultValue;
}
/** Gets the solid color from a fill property. */
function getFillColor(objects, propertyId, defaultColor) {
    const value = getValue(objects, propertyId);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
function getCommonValue(objects, propertyId, defaultValue) {
    const value = getValue(objects, propertyId, defaultValue);
    if (value && value.solid) {
        return value.solid.color;
    }
    if (value === undefined
        || value === null
        || (typeof value === "object" && !value.solid)) {
        return defaultValue;
    }
    return value;
}
//# sourceMappingURL=dataViewObjects.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataViewObjectsParser": () => (/* binding */ DataViewObjectsParser)
/* harmony export */ });
/* harmony import */ var _dataViewObjects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataViewObjects */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js");

class DataViewObjectsParser {
    static getDefault() {
        return new this();
    }
    static createPropertyIdentifier(objectName, propertyName) {
        return {
            objectName,
            propertyName
        };
    }
    static parse(dataView) {
        let dataViewObjectParser = this.getDefault(), properties;
        if (!dataView || !dataView.metadata || !dataView.metadata.objects) {
            return dataViewObjectParser;
        }
        properties = dataViewObjectParser.getProperties();
        for (let objectName in properties) {
            for (let propertyName in properties[objectName]) {
                const defaultValue = dataViewObjectParser[objectName][propertyName];
                dataViewObjectParser[objectName][propertyName] = _dataViewObjects__WEBPACK_IMPORTED_MODULE_0__.getCommonValue(dataView.metadata.objects, properties[objectName][propertyName], defaultValue);
            }
        }
        return dataViewObjectParser;
    }
    static isPropertyEnumerable(propertyName) {
        return !DataViewObjectsParser.InnumerablePropertyPrefix.test(propertyName);
    }
    static enumerateObjectInstances(dataViewObjectParser, options) {
        let dataViewProperties = dataViewObjectParser && dataViewObjectParser[options.objectName];
        if (!dataViewProperties) {
            return [];
        }
        let instance = {
            objectName: options.objectName,
            selector: null,
            properties: {}
        };
        for (let key in dataViewProperties) {
            if (dataViewProperties.hasOwnProperty(key)) {
                instance.properties[key] = dataViewProperties[key];
            }
        }
        return {
            instances: [instance]
        };
    }
    getProperties() {
        let properties = {}, objectNames = Object.keys(this);
        objectNames.forEach((objectName) => {
            if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {
                let propertyNames = Object.keys(this[objectName]);
                properties[objectName] = {};
                propertyNames.forEach((propertyName) => {
                    if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {
                        properties[objectName][propertyName] =
                            DataViewObjectsParser.createPropertyIdentifier(objectName, propertyName);
                    }
                });
            }
        });
        return properties;
    }
}
DataViewObjectsParser.InnumerablePropertyPrefix = /^_/;
//# sourceMappingURL=dataViewObjectsParser.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.cultures.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.cultures.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/*
 * Globalize Cultures
 *
 * http://github.com/jquery/globalize
 *
 * Copyright Software Freedom Conservancy, Inc.
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * This file was generated by the Globalize Culture Generator
 * Translation: bugs found in this file need to be fixed in the generator
 */
var powerbiGlobalizeLocales_1 = __webpack_require__(/*! ./powerbiGlobalizeLocales */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/powerbiGlobalizeLocales.js");
function injectCultures(Globalize) {
    Object.keys(powerbiGlobalizeLocales_1.locales).forEach(function (locale) { return Globalize.addCultureInfo.apply(Globalize, powerbiGlobalizeLocales_1.locales[locale]); });
}
exports["default"] = injectCultures;
//# sourceMappingURL=globalize.cultures.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseNegativePattern = exports.parseExact = exports.getEraYear = exports.getEra = exports.getTokenRegExp = exports.formatNumber = exports.formatDate = exports.expandFormat = exports.appendPreOrPostMatch = exports.zeroPad = exports.trim = exports.startsWith = exports.isObject = exports.isFunction = exports.isArray = exports.extend = exports.endsWith = exports.arrayIndexOf = exports.regexTrim = exports.regexParseFloat = exports.regexInfinity = exports.regexHex = exports.Globalize = void 0;
// Global variable (Globalize) or CommonJS module (globalize)
exports.Globalize = function (cultureSelector) {
    return new exports.Globalize.prototype.init(cultureSelector);
};
exports.Globalize.cultures = {};
exports.Globalize.prototype = {
    constructor: exports.Globalize,
    init: function (cultureSelector) {
        this.cultures = exports.Globalize.cultures;
        this.cultureSelector = cultureSelector;
        return this;
    }
};
exports.Globalize.prototype.init.prototype = exports.Globalize.prototype;
// 1.	 When defining a culture, all fields are required except the ones stated as optional.
// 2.	 Each culture should have a ".calendars" object with at least one calendar named "standard"
//		 which serves as the default calendar in use by that culture.
// 3.	 Each culture should have a ".calendar" object which is the current calendar being used,
//		 it may be dynamically changed at any time to one of the calendars in ".calendars".
exports.Globalize.cultures["default"] = {
    // A unique name for the culture in the form <language code>-<country/region code>
    name: "en",
    // the name of the culture in the english language
    englishName: "English",
    // the name of the culture in its own language
    nativeName: "English",
    // whether the culture uses right-to-left text
    isRTL: false,
    // "language" is used for so-called "specific" cultures.
    // For example, the culture "es-CL" means "Spanish, in Chili".
    // It represents the Spanish-speaking culture as it is in Chili,
    // which might have different formatting rules or even translations
    // than Spanish in Spain. A "neutral" culture is one that is not
    // specific to a region. For example, the culture "es" is the generic
    // Spanish culture, which may be a more generalized version of the language
    // that may or may not be what a specific culture expects.
    // For a specific culture like "es-CL", the "language" field refers to the
    // neutral, generic culture information for the language it is using.
    // This is not always a simple matter of the string before the dash.
    // For example, the "zh-Hans" culture is netural (Simplified Chinese).
    // And the "zh-SG" culture is Simplified Chinese in Singapore, whose lanugage
    // field is "zh-CHS", not "zh".
    // This field should be used to navigate from a specific culture to it's
    // more general, neutral culture. If a culture is already as general as it
    // can get, the language may refer to itself.
    language: "en",
    // numberFormat defines general number formatting rules, like the digits in
    // each grouping, the group separator, and how negative numbers are displayed.
    numberFormat: {
        // [negativePattern]
        // Note, numberFormat.pattern has no "positivePattern" unlike percent and currency,
        // but is still defined as an array for consistency with them.
        //   negativePattern: one of "(n)|-n|- n|n-|n -"
        pattern: ["-n"],
        // number of decimal places normally shown
        decimals: 2,
        // string that separates number groups, as in 1,000,000
        ",": ",",
        // string that separates a number from the fractional portion, as in 1.99
        ".": ".",
        // array of numbers indicating the size of each number group.
        // TODO: more detailed description and example
        groupSizes: [3],
        // symbol used for positive numbers
        "+": "+",
        // symbol used for negative numbers
        "-": "-",
        percent: {
            // [negativePattern, positivePattern]
            //   negativePattern: one of "-n %|-n%|-%n|%-n|%n-|n-%|n%-|-% n|n %-|% n-|% -n|n- %"
            //   positivePattern: one of "n %|n%|%n|% n"
            pattern: ["-n %", "n %"],
            // number of decimal places normally shown
            decimals: 2,
            // array of numbers indicating the size of each number group.
            // TODO: more detailed description and example
            groupSizes: [3],
            // string that separates number groups, as in 1,000,000
            ",": ",",
            // string that separates a number from the fractional portion, as in 1.99
            ".": ".",
            // symbol used to represent a percentage
            symbol: "%"
        },
        currency: {
            // [negativePattern, positivePattern]
            //   negativePattern: one of "($n)|-$n|$-n|$n-|(n$)|-n$|n-$|n$-|-n $|-$ n|n $-|$ n-|$ -n|n- $|($ n)|(n $)"
            //   positivePattern: one of "$n|n$|$ n|n $"
            pattern: ["($n)", "$n"],
            // number of decimal places normally shown
            decimals: 2,
            // array of numbers indicating the size of each number group.
            // TODO: more detailed description and example
            groupSizes: [3],
            // string that separates number groups, as in 1,000,000
            ",": ",",
            // string that separates a number from the fractional portion, as in 1.99
            ".": ".",
            // symbol used to represent currency
            symbol: "$"
        }
    },
    // calendars defines all the possible calendars used by this culture.
    // There should be at least one defined with name "standard", and is the default
    // calendar used by the culture.
    // A calendar contains information about how dates are formatted, information about
    // the calendar's eras, a standard set of the date formats,
    // translations for day and month names, and if the calendar is not based on the Gregorian
    // calendar, conversion functions to and from the Gregorian calendar.
    calendars: {
        standard: {
            // name that identifies the type of calendar this is
            name: "Gregorian_USEnglish",
            // separator of parts of a date (e.g. "/" in 11/05/1955)
            "/": "/",
            // separator of parts of a time (e.g. ":" in 05:44 PM)
            ":": ":",
            // the first day of the week (0 = Sunday, 1 = Monday, etc)
            firstDay: 0,
            days: {
                // full day names
                names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                // abbreviated day names
                namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                // shortest day names
                namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
            },
            months: {
                // full month names (13 months for lunar calendards -- 13th month should be "" if not lunar)
                names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
                // abbreviated month names
                namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""]
            },
            // AM and PM designators in one of these forms:
            // The usual view, and the upper and lower case versions
            //   [ standard, lowercase, uppercase ]
            // The culture does not use AM or PM (likely all standard date formats use 24 hour time)
            //   null
            AM: ["AM", "am", "AM"],
            PM: ["PM", "pm", "PM"],
            eras: [
                // eras in reverse chronological order.
                // name: the name of the era in this culture (e.g. A.D., C.E.)
                // start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.
                // offset: offset in years from gregorian calendar
                {
                    "name": "A.D.",
                    "start": null,
                    "offset": 0
                }
            ],
            // when a two digit year is given, it will never be parsed as a four digit
            // year greater than this year (in the appropriate era for the culture)
            // Set it as a full year (e.g. 2029) or use an offset format starting from
            // the current year: "+19" would correspond to 2029 if the current year 2010.
            twoDigitYearMax: 2029,
            // set of predefined date and time patterns used by the culture
            // these represent the format someone in this culture would expect
            // to see given the portions of the date that are shown.
            patterns: {
                // short date pattern
                d: "M/d/yyyy",
                // long date pattern
                D: "dddd, MMMM dd, yyyy",
                // short time pattern
                t: "h:mm tt",
                // long time pattern
                T: "h:mm:ss tt",
                // long date, short time pattern
                f: "dddd, MMMM dd, yyyy h:mm tt",
                // long date, long time pattern
                F: "dddd, MMMM dd, yyyy h:mm:ss tt",
                // month/day pattern
                M: "MMMM dd",
                // month/year pattern
                Y: "yyyy MMMM",
                // S is a sortable format that does not vary by culture
                S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss"
            }
            // optional fields for each calendar:
            /*
            monthsGenitive:
                Same as months but used when the day preceeds the month.
                Omit if the culture has no genitive distinction in month names.
                For an explaination of genitive months, see http://blogs.msdn.com/michkap/archive/2004/12/25/332259.aspx
            convert:
                Allows for the support of non-gregorian based calendars. This convert object is used to
                to convert a date to and from a gregorian calendar date to handle parsing and formatting.
                The two functions:
                    fromGregorian( date )
                        Given the date as a parameter, return an array with parts [ year, month, day ]
                        corresponding to the non-gregorian based year, month, and day for the calendar.
                    toGregorian( year, month, day )
                        Given the non-gregorian year, month, and day, return a new Date() object
                        set to the corresponding date in the gregorian calendar.
            */
        }
    },
    // For localized strings
    messages: {}
};
exports.Globalize.cultures["default"].calendar = exports.Globalize.cultures["default"].calendars.standard;
exports.Globalize.cultures.en = exports.Globalize.cultures["default"];
exports.Globalize.cultureSelector = "en";
//
// private variables
//
exports.regexHex = /^0x[a-f0-9]+$/i;
exports.regexInfinity = /^[+-]?infinity$/i;
exports.regexParseFloat = /^[+-]?\d*\.?\d*(e[+-]?\d+)?$/;
exports.regexTrim = /^\s+|\s+$/g;
//
// private JavaScript utility functions
//
exports.arrayIndexOf = function (array, item) {
    if (array.indexOf) {
        return array.indexOf(item);
    }
    for (var i = 0, length = array.length; i < length; i++) {
        if (array[i] === item) {
            return i;
        }
    }
    return -1;
};
exports.endsWith = function (value, pattern) {
    return value.substring(value.length - pattern.length) === pattern;
};
exports.extend = function (deep) {
    var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
    // Handle a deep copy situation
    if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2;
    }
    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== "object" && !(0, exports.isFunction)(target)) {
        target = {};
    }
    for (; i < length; i++) {
        // Only deal with non-null/undefined values
        if ((options = arguments[i]) != null) {
            // Extend the base object
            for (name in options) {
                src = target[name];
                copy = options[name];
                // Prevent never-ending loop
                if (target === copy) {
                    continue;
                }
                // Recurse if we're merging plain objects or arrays
                if (deep && copy && ((0, exports.isObject)(copy) || (copyIsArray = (0, exports.isArray)(copy)))) {
                    if (copyIsArray) {
                        copyIsArray = false;
                        clone = src && (0, exports.isArray)(src) ? src : [];
                    }
                    else {
                        clone = src && (0, exports.isObject)(src) ? src : {};
                    }
                    // Never move original objects, clone them
                    target[name] = (0, exports.extend)(deep, clone, copy);
                    // Don't bring in undefined values
                }
                else if (copy !== undefined) {
                    target[name] = copy;
                }
            }
        }
    }
    // Return the modified object
    return target;
};
exports.isArray = Array.isArray || function (obj) {
    return Object.prototype.toString.call(obj) === "[object Array]";
};
exports.isFunction = function (obj) {
    return Object.prototype.toString.call(obj) === "[object Function]";
};
exports.isObject = function (obj) {
    return Object.prototype.toString.call(obj) === "[object Object]";
};
exports.startsWith = function (value, pattern) {
    return value.indexOf(pattern) === 0;
};
exports.trim = function (value) {
    return (value + "").replace(exports.regexTrim, "");
};
exports.zeroPad = function (str, count, left) {
    var l;
    for (l = str.length; l < count; l += 1) {
        str = (left ? ("0" + str) : (str + "0"));
    }
    return str;
};
//
// private Globalization utility functions
//
exports.appendPreOrPostMatch = function (preMatch, strings) {
    // appends pre- and post- token match strings while removing escaped characters.
    // Returns a single quote count which is used to determine if the token occurs
    // in a string literal.
    var quoteCount = 0, escaped = false;
    for (var i = 0, il = preMatch.length; i < il; i++) {
        var c = preMatch.charAt(i);
        switch (c) {
            case "\'":
                if (escaped) {
                    strings.push("\'");
                }
                else {
                    quoteCount++;
                }
                escaped = false;
                break;
            case "\\":
                if (escaped) {
                    strings.push("\\");
                }
                escaped = !escaped;
                break;
            default:
                strings.push(c);
                escaped = false;
                break;
        }
    }
    return quoteCount;
};
exports.expandFormat = function (cal, format) {
    // expands unspecified or single character date formats into the full pattern.
    format = format || "F";
    var pattern, patterns = cal.patterns, len = format.length;
    if (len === 1) {
        pattern = patterns[format];
        if (!pattern) {
            throw "Invalid date format string \'" + format + "\'.";
        }
        format = pattern;
    }
    else if (len === 2 && format.charAt(0) === "%") {
        // %X escape format -- intended as a custom format string that is only one character, not a built-in format.
        format = format.charAt(1);
    }
    return format;
};
exports.formatDate = function (value, format, culture) {
    var cal = culture.calendar, convert = cal.convert;
    if (!format || !format.length || format === "i") {
        var ret;
        if (culture && culture.name.length) {
            if (convert) {
                // non-gregorian calendar, so we cannot use built-in toLocaleString()
                ret = (0, exports.formatDate)(value, cal.patterns.F, culture);
            }
            else {
                var eraDate = new Date(value.getTime()), era = (0, exports.getEra)(value, cal.eras);
                eraDate.setFullYear((0, exports.getEraYear)(value, cal, era));
                ret = eraDate.toLocaleString();
            }
        }
        else {
            ret = value.toString();
        }
        return ret;
    }
    var eras = cal.eras, sortable = format === "s";
    format = (0, exports.expandFormat)(cal, format);
    // Start with an empty string
    ret = [];
    var hour, zeros = ["0", "00", "000"], foundDay, checkedDay, dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g, quoteCount = 0, tokenRegExp = (0, exports.getTokenRegExp)(), converted;
    function padZeros(num, c) {
        var r, s = num + "";
        if (c > 1 && s.length < c) {
            r = (zeros[c - 2] + s);
            return r.substring(r.length - c, r.length);
        }
        else {
            r = s;
        }
        return r;
    }
    function hasDay() {
        if (foundDay || checkedDay) {
            return foundDay;
        }
        foundDay = dayPartRegExp.test(format);
        checkedDay = true;
        return foundDay;
    }
    function getPart(date, part) {
        if (converted) {
            return converted[part];
        }
        switch (part) {
            case 0: return date.getFullYear();
            case 1: return date.getMonth();
            case 2: return date.getDate();
        }
    }
    if (!sortable && convert) {
        converted = convert.fromGregorian(value);
    }
    for (;;) {
        // Save the current index
        var index = tokenRegExp.lastIndex, 
        // Look for the next pattern
        ar = tokenRegExp.exec(format);
        // Append the text before the pattern (or the end of the string if not found)
        var preMatch = format.slice(index, ar ? ar.index : format.length);
        quoteCount += (0, exports.appendPreOrPostMatch)(preMatch, ret);
        if (!ar) {
            break;
        }
        // do not replace any matches that occur inside a string literal.
        if (quoteCount % 2) {
            ret.push(ar[0]);
            continue;
        }
        var current = ar[0], clength = current.length;
        switch (current) {
            case "ddd":
            //Day of the week, as a three-letter abbreviation
            case "dddd":
                // Day of the week, using the full name
                var names = (clength === 3) ? cal.days.namesAbbr : cal.days.names;
                ret.push(names[value.getDay()]);
                break;
            case "d":
            // Day of month, without leading zero for single-digit days
            case "dd":
                // Day of month, with leading zero for single-digit days
                foundDay = true;
                ret.push(padZeros(getPart(value, 2), clength));
                break;
            case "MMM":
            // Month, as a three-letter abbreviation
            case "MMMM":
                // Month, using the full name
                var part = getPart(value, 1);
                ret.push((cal.monthsGenitive && hasDay())
                    ?
                        cal.monthsGenitive[clength === 3 ? "namesAbbr" : "names"][part]
                    :
                        cal.months[clength === 3 ? "namesAbbr" : "names"][part]);
                break;
            case "M":
            // Month, as digits, with no leading zero for single-digit months
            case "MM":
                // Month, as digits, with leading zero for single-digit months
                ret.push(padZeros(getPart(value, 1) + 1, clength));
                break;
            case "y":
            // Year, as two digits, but with no leading zero for years less than 10
            case "yy":
            // Year, as two digits, with leading zero for years less than 10
            case "yyyy":
                // Year represented by four full digits
                part = converted ? converted[0] : (0, exports.getEraYear)(value, cal, (0, exports.getEra)(value, eras), sortable);
                if (clength < 4) {
                    part = part % 100;
                }
                ret.push(padZeros(part, clength));
                break;
            case "h":
            // Hours with no leading zero for single-digit hours, using 12-hour clock
            case "hh":
                // Hours with leading zero for single-digit hours, using 12-hour clock
                hour = value.getHours() % 12;
                if (hour === 0)
                    hour = 12;
                ret.push(padZeros(hour, clength));
                break;
            case "H":
            // Hours with no leading zero for single-digit hours, using 24-hour clock
            case "HH":
                // Hours with leading zero for single-digit hours, using 24-hour clock
                ret.push(padZeros(value.getHours(), clength));
                break;
            case "m":
            // Minutes with no leading zero for single-digit minutes
            case "mm":
                // Minutes with leading zero for single-digit minutes
                ret.push(padZeros(value.getMinutes(), clength));
                break;
            case "s":
            // Seconds with no leading zero for single-digit seconds
            case "ss":
                // Seconds with leading zero for single-digit seconds
                ret.push(padZeros(value.getSeconds(), clength));
                break;
            case "t":
            // One character am/pm indicator ("a" or "p")
            case "tt":
                // Multicharacter am/pm indicator
                part = value.getHours() < 12 ? (cal.AM ? cal.AM[0] : " ") : (cal.PM ? cal.PM[0] : " ");
                ret.push(clength === 1 ? part.charAt(0) : part);
                break;
            case "f":
            // Deciseconds
            case "ff":
            // Centiseconds
            case "fff":
                // Milliseconds
                ret.push(padZeros(value.getMilliseconds(), 3).substring(0, clength));
                break;
            case "z":
            // Time zone offset, no leading zero
            case "zz":
                // Time zone offset with leading zero
                hour = value.getTimezoneOffset() / 60;
                ret.push((hour <= 0 ? "+" : "-") + padZeros(Math.floor(Math.abs(hour)), clength));
                break;
            case "zzz":
                // Time zone offset with leading zero
                hour = value.getTimezoneOffset() / 60;
                ret.push((hour <= 0 ? "+" : "-") + padZeros(Math.floor(Math.abs(hour)), 2)
                    // Hard coded ":" separator, rather than using cal.TimeSeparator
                    // Repeated here for consistency, plus ":" was already assumed in date parsing.
                    + ":" + padZeros(Math.abs(value.getTimezoneOffset() % 60), 2));
                break;
            case "g":
            case "gg":
                if (cal.eras) {
                    ret.push(cal.eras[(0, exports.getEra)(value, eras)].name);
                }
                break;
            case "/":
                ret.push(cal["/"]);
                break;
            default:
                throw "Invalid date format pattern \'" + current + "\'.";
        }
    }
    return ret.join("");
};
// formatNumber
(function () {
    var expandNumber;
    expandNumber = function (number, precision, formatInfo) {
        var groupSizes = formatInfo.groupSizes, curSize = groupSizes[0], curGroupIndex = 1, factor = Math.pow(10, precision), rounded = Math.round(number * factor) / factor;
        if (!isFinite(rounded)) {
            rounded = number;
        }
        number = rounded;
        var numberString = number + "", right = "", split = numberString.split(/e/i), exponent = split.length > 1 ? parseInt(split[1], 10) : 0;
        numberString = split[0];
        split = numberString.split(".");
        numberString = split[0];
        right = split.length > 1 ? split[1] : "";
        var l;
        if (exponent > 0) {
            right = (0, exports.zeroPad)(right, exponent, false);
            numberString += right.slice(0, exponent);
            right = right.substring(exponent);
        }
        else if (exponent < 0) {
            exponent = -exponent;
            numberString = (0, exports.zeroPad)(numberString, exponent + 1);
            right = numberString.slice(-exponent, numberString.length) + right;
            numberString = numberString.slice(0, -exponent);
        }
        if (precision > 0) {
            right = formatInfo["."] +
                ((right.length > precision) ? right.slice(0, precision) : (0, exports.zeroPad)(right, precision));
        }
        else {
            right = "";
        }
        var stringIndex = numberString.length - 1, sep = formatInfo[","], ret = "";
        while (stringIndex >= 0) {
            if (curSize === 0 || curSize > stringIndex) {
                return numberString.slice(0, stringIndex + 1) + (ret.length ? (sep + ret + right) : right);
            }
            ret = numberString.slice(stringIndex - curSize + 1, stringIndex + 1) + (ret.length ? (sep + ret) : "");
            stringIndex -= curSize;
            if (curGroupIndex < groupSizes.length) {
                curSize = groupSizes[curGroupIndex];
                curGroupIndex++;
            }
        }
        return numberString.slice(0, stringIndex + 1) + sep + ret + right;
    };
    exports.formatNumber = function (value, format, culture) {
        if (!format || format === "i") {
            return culture.name.length ? value.toLocaleString() : value.toString();
        }
        format = format || "D";
        var nf = culture.numberFormat, number = Math.abs(value), precision = -1, pattern;
        if (format.length > 1)
            precision = parseInt(format.slice(1), 10);
        var current = format.charAt(0).toUpperCase(), formatInfo;
        switch (current) {
            case "D":
                pattern = "n";
                if (precision !== -1) {
                    number = (0, exports.zeroPad)("" + number, precision, true);
                }
                if (value < 0)
                    number = -number;
                break;
            case "N":
                formatInfo = nf;
            // fall through
            case "C":
                formatInfo = formatInfo || nf.currency;
            // fall through
            case "P":
                formatInfo = formatInfo || nf.percent;
                pattern = value < 0 ? formatInfo.pattern[0] : (formatInfo.pattern[1] || "n");
                if (precision === -1)
                    precision = formatInfo.decimals;
                number = expandNumber(number * (current === "P" ? 100 : 1), precision, formatInfo);
                break;
            default:
                throw "Bad number format specifier: " + current;
        }
        var patternParts = /n|\$|-|%/g, ret = "";
        for (;;) {
            var index = patternParts.lastIndex, ar = patternParts.exec(pattern);
            ret += pattern.slice(index, ar ? ar.index : pattern.length);
            if (!ar) {
                break;
            }
            switch (ar[0]) {
                case "n":
                    ret += number;
                    break;
                case "$":
                    ret += nf.currency.symbol;
                    break;
                case "-":
                    // don't make 0 negative
                    if (/[1-9]/.test(number.toString())) {
                        ret += nf["-"];
                    }
                    break;
                case "%":
                    ret += nf.percent.symbol;
                    break;
            }
        }
        return ret;
    };
}());
exports.getTokenRegExp = function () {
    // regular expression for matching date and time tokens in format strings.
    return /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;
};
exports.getEra = function (date, eras) {
    if (!eras)
        return 0;
    var start, ticks = date.getTime();
    for (var i = 0, l = eras.length; i < l; i++) {
        start = eras[i].start;
        if (start === null || ticks >= start) {
            return i;
        }
    }
    return 0;
};
exports.getEraYear = function (date, cal, era, sortable) {
    var year = date.getFullYear();
    if (!sortable && cal.eras) {
        // convert normal gregorian year to era-shifted gregorian
        // year by subtracting the era offset
        year -= cal.eras[era].offset;
    }
    return year;
};
// parseExact
(function () {
    var expandYear, getDayIndex, getMonthIndex, getParseRegExp, outOfRange, toUpper, toUpperArray;
    expandYear = function (cal, year) {
        // expands 2-digit year into 4 digits.
        var now = new Date(), era = (0, exports.getEra)(now);
        if (year < 100) {
            var twoDigitYearMax = cal.twoDigitYearMax;
            twoDigitYearMax = typeof twoDigitYearMax === "string" ? new Date().getFullYear() % 100 + parseInt(twoDigitYearMax, 10) : twoDigitYearMax;
            var curr = (0, exports.getEraYear)(now, cal, era);
            year += curr - (curr % 100);
            if (year > twoDigitYearMax) {
                year -= 100;
            }
        }
        return year;
    };
    getDayIndex = function (cal, value, abbr) {
        var ret, days = cal.days, upperDays = cal._upperDays;
        if (!upperDays) {
            cal._upperDays = upperDays = [
                toUpperArray(days.names),
                toUpperArray(days.namesAbbr),
                toUpperArray(days.namesShort)
            ];
        }
        value = toUpper(value);
        if (abbr) {
            ret = (0, exports.arrayIndexOf)(upperDays[1], value);
            if (ret === -1) {
                ret = (0, exports.arrayIndexOf)(upperDays[2], value);
            }
        }
        else {
            ret = (0, exports.arrayIndexOf)(upperDays[0], value);
        }
        return ret;
    };
    getMonthIndex = function (cal, value, abbr) {
        var months = cal.months, monthsGen = cal.monthsGenitive || cal.months, upperMonths = cal._upperMonths, upperMonthsGen = cal._upperMonthsGen;
        if (!upperMonths) {
            cal._upperMonths = upperMonths = [
                toUpperArray(months.names),
                toUpperArray(months.namesAbbr)
            ];
            cal._upperMonthsGen = upperMonthsGen = [
                toUpperArray(monthsGen.names),
                toUpperArray(monthsGen.namesAbbr)
            ];
        }
        value = toUpper(value);
        var i = (0, exports.arrayIndexOf)(abbr ? upperMonths[1] : upperMonths[0], value);
        if (i < 0) {
            i = (0, exports.arrayIndexOf)(abbr ? upperMonthsGen[1] : upperMonthsGen[0], value);
        }
        return i;
    };
    getParseRegExp = function (cal, format) {
        // converts a format string into a regular expression with groups that
        // can be used to extract date fields from a date string.
        // check for a cached parse regex.
        var re = cal._parseRegExp;
        if (!re) {
            cal._parseRegExp = re = {};
        }
        else {
            var reFormat = re[format];
            if (reFormat) {
                return reFormat;
            }
        }
        // expand single digit formats, then escape regular expression characters.
        var expFormat = (0, exports.expandFormat)(cal, format).replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1"), regexp = ["^"], groups = [], index = 0, quoteCount = 0, tokenRegExp = (0, exports.getTokenRegExp)(), match;
        // iterate through each date token found.
        while ((match = tokenRegExp.exec(expFormat)) !== null) {
            var preMatch = expFormat.slice(index, match.index);
            index = tokenRegExp.lastIndex;
            // don't replace any matches that occur inside a string literal.
            quoteCount += (0, exports.appendPreOrPostMatch)(preMatch, regexp);
            if (quoteCount % 2) {
                regexp.push(match[0]);
                continue;
            }
            // add a regex group for the token.
            var m = match[0], len = m.length, add;
            switch (m) {
                case "dddd":
                case "ddd":
                case "MMMM":
                case "MMM":
                case "gg":
                case "g":
                    add = "(\\D+)";
                    break;
                case "tt":
                case "t":
                    add = "(\\D*)";
                    break;
                case "yyyy":
                case "fff":
                case "ff":
                case "f":
                    add = "(\\d{" + len + "})";
                    break;
                case "dd":
                case "d":
                case "MM":
                case "M":
                case "yy":
                case "y":
                case "HH":
                case "H":
                case "hh":
                case "h":
                case "mm":
                case "m":
                case "ss":
                case "s":
                    add = "(\\d\\d?)";
                    break;
                case "zzz":
                    add = "([+-]?\\d\\d?:\\d{2})";
                    break;
                case "zz":
                case "z":
                    add = "([+-]?\\d\\d?)";
                    break;
                case "/":
                    add = "(\\" + cal["/"] + ")";
                    break;
                default:
                    throw "Invalid date format pattern \'" + m + "\'.";
            }
            if (add) {
                regexp.push(add);
            }
            groups.push(match[0]);
        }
        (0, exports.appendPreOrPostMatch)(expFormat.slice(index), regexp);
        regexp.push("$");
        // allow whitespace to differ when matching formats.
        var regexpStr = regexp.join("").replace(/\s+/g, "\\s+"), parseRegExp = { "regExp": regexpStr, "groups": groups };
        // cache the regex for this format.
        return re[format] = parseRegExp;
    };
    outOfRange = function (value, low, high) {
        return value < low || value > high;
    };
    toUpper = function (value) {
        // "he-IL" has non-breaking space in weekday names.
        return value.split("\u00A0").join(" ").toUpperCase();
    };
    toUpperArray = function (arr) {
        var results = [];
        for (var i = 0, l = arr.length; i < l; i++) {
            results[i] = toUpper(arr[i]);
        }
        return results;
    };
    exports.parseExact = function (value, format, culture) {
        // try to parse the date string by matching against the format string
        // while using the specified culture for date field names.
        value = (0, exports.trim)(value);
        var cal = culture.calendar, 
        // convert date formats into regular expressions with groupings.
        // use the regexp to determine the input format and extract the date fields.
        parseInfo = getParseRegExp(cal, format), match = new RegExp(parseInfo.regExp).exec(value);
        if (match === null) {
            return null;
        }
        // found a date format that matches the input.
        var groups = parseInfo.groups, era = null, year = null, month = null, date = null, weekDay = null, hour = 0, hourOffset, min = 0, sec = 0, msec = 0, tzMinOffset = null, pmHour = false;
        // iterate the format groups to extract and set the date fields.
        for (var j = 0, jl = groups.length; j < jl; j++) {
            var matchGroup = match[j + 1];
            if (matchGroup) {
                var current = groups[j], clength = current.length, matchInt = parseInt(matchGroup, 10);
                switch (current) {
                    case "dd":
                    case "d":
                        // Day of month.
                        date = matchInt;
                        // check that date is generally in valid range, also checking overflow below.
                        if (outOfRange(date, 1, 31))
                            return null;
                        break;
                    case "MMM":
                    case "MMMM":
                        month = getMonthIndex(cal, matchGroup, clength === 3);
                        if (outOfRange(month, 0, 11))
                            return null;
                        break;
                    case "M":
                    case "MM":
                        // Month.
                        month = matchInt - 1;
                        if (outOfRange(month, 0, 11))
                            return null;
                        break;
                    case "y":
                    case "yy":
                    case "yyyy":
                        year = clength < 4 ? expandYear(cal, matchInt) : matchInt;
                        if (outOfRange(year, 0, 9999))
                            return null;
                        break;
                    case "h":
                    case "hh":
                        // Hours (12-hour clock).
                        hour = matchInt;
                        if (hour === 12)
                            hour = 0;
                        if (outOfRange(hour, 0, 11))
                            return null;
                        break;
                    case "H":
                    case "HH":
                        // Hours (24-hour clock).
                        hour = matchInt;
                        if (outOfRange(hour, 0, 23))
                            return null;
                        break;
                    case "m":
                    case "mm":
                        // Minutes.
                        min = matchInt;
                        if (outOfRange(min, 0, 59))
                            return null;
                        break;
                    case "s":
                    case "ss":
                        // Seconds.
                        sec = matchInt;
                        if (outOfRange(sec, 0, 59))
                            return null;
                        break;
                    case "tt":
                    case "t":
                        // AM/PM designator.
                        // see if it is standard, upper, or lower case PM. If not, ensure it is at least one of
                        // the AM tokens. If not, fail the parse for this format.
                        pmHour = cal.PM && (matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2]);
                        if (!pmHour && (!cal.AM || (matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2])))
                            return null;
                        break;
                    case "f":
                    // Deciseconds.
                    case "ff":
                    // Centiseconds.
                    case "fff":
                        // Milliseconds.
                        msec = matchInt * Math.pow(10, 3 - clength);
                        if (outOfRange(msec, 0, 999))
                            return null;
                        break;
                    case "ddd":
                    // Day of week.
                    case "dddd":
                        // Day of week.
                        weekDay = getDayIndex(cal, matchGroup, clength === 3);
                        if (outOfRange(weekDay, 0, 6))
                            return null;
                        break;
                    case "zzz":
                        // Time zone offset in +/- hours:min.
                        var offsets = matchGroup.split(/:/);
                        if (offsets.length !== 2)
                            return null;
                        hourOffset = parseInt(offsets[0], 10);
                        if (outOfRange(hourOffset, -12, 13))
                            return null;
                        var minOffset = parseInt(offsets[1], 10);
                        if (outOfRange(minOffset, 0, 59))
                            return null;
                        tzMinOffset = (hourOffset * 60) + ((0, exports.startsWith)(matchGroup, "-") ? -minOffset : minOffset);
                        break;
                    case "z":
                    case "zz":
                        // Time zone offset in +/- hours.
                        hourOffset = matchInt;
                        if (outOfRange(hourOffset, -12, 13))
                            return null;
                        tzMinOffset = hourOffset * 60;
                        break;
                    case "g":
                    case "gg":
                        var eraName = matchGroup;
                        if (!eraName || !cal.eras)
                            return null;
                        eraName = (0, exports.trim)(eraName.toLowerCase());
                        for (var i = 0, l = cal.eras.length; i < l; i++) {
                            if (eraName === cal.eras[i].name.toLowerCase()) {
                                era = i;
                                break;
                            }
                        }
                        // could not find an era with that name
                        if (era === null)
                            return null;
                        break;
                }
            }
        }
        var result = new Date(), defaultYear, convert = cal.convert;
        defaultYear = convert ? convert.fromGregorian(result)[0] : result.getFullYear();
        if (year === null) {
            year = defaultYear;
        }
        else if (cal.eras) {
            // year must be shifted to normal gregorian year
            // but not if year was not specified, its already normal gregorian
            // per the main if clause above.
            year += cal.eras[(era || 0)].offset;
        }
        // set default day and month to 1 and January, so if unspecified, these are the defaults
        // instead of the current day/month.
        if (month === null) {
            month = 0;
        }
        if (date === null) {
            date = 1;
        }
        // now have year, month, and date, but in the culture's calendar.
        // convert to gregorian if necessary
        if (convert) {
            result = convert.toGregorian(year, month, date);
            // conversion failed, must be an invalid match
            if (result === null)
                return null;
        }
        else {
            // have to set year, month and date together to avoid overflow based on current date.
            result.setFullYear(year, month, date);
            // check to see if date overflowed for specified month (only checked 1-31 above).
            if (result.getDate() !== date)
                return null;
            // invalid day of week.
            if (weekDay !== null && result.getDay() !== weekDay) {
                return null;
            }
        }
        // if pm designator token was found make sure the hours fit the 24-hour clock.
        if (pmHour && hour < 12) {
            hour += 12;
        }
        result.setHours(hour, min, sec, msec);
        if (tzMinOffset !== null) {
            // adjust timezone to utc before applying local offset.
            var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());
            // Safari limits hours and minutes to the range of -127 to 127.	 We need to use setHours
            // to ensure both these fields will not exceed this range.	adjustedMin will range
            // somewhere between -1440 and 1500, so we only need to split this into hours.
            result.setHours(result.getHours() + parseInt((adjustedMin / 60).toString(), 10), adjustedMin % 60);
        }
        return result;
    };
}());
exports.parseNegativePattern = function (value, nf, negativePattern) {
    var neg = nf["-"], pos = nf["+"], ret;
    switch (negativePattern) {
        case "n -":
            neg = " " + neg;
            pos = " " + pos;
        // fall through
        case "n-":
            if ((0, exports.endsWith)(value, neg)) {
                ret = ["-", value.substring(0, value.length - neg.length)];
            }
            else if ((0, exports.endsWith)(value, pos)) {
                ret = ["+", value.substring(0, value.length - pos.length)];
            }
            break;
        case "- n":
            neg += " ";
            pos += " ";
        // fall through
        case "-n":
            if ((0, exports.startsWith)(value, neg)) {
                ret = ["-", value.substring(neg.length)];
            }
            else if ((0, exports.startsWith)(value, pos)) {
                ret = ["+", value.substring(pos.length)];
            }
            break;
        case "(n)":
            if ((0, exports.startsWith)(value, "(") && (0, exports.endsWith)(value, ")")) {
                ret = ["-", value.substring(1, value.length - 1)];
            }
            break;
    }
    return ret || ["", value];
};
//
// public instance functions
//
exports.Globalize.prototype.findClosestCulture = function (cultureSelector) {
    return exports.Globalize.findClosestCulture.call(this, cultureSelector);
};
exports.Globalize.prototype.format = function (value, format, cultureSelector) {
    return exports.Globalize.format.call(this, value, format, cultureSelector);
};
exports.Globalize.prototype.localize = function (key, cultureSelector) {
    return exports.Globalize.localize.call(this, key, cultureSelector);
};
exports.Globalize.prototype.parseInt = function (value, radix, cultureSelector) {
    return exports.Globalize.parseInt.call(this, value, radix, cultureSelector);
};
exports.Globalize.prototype.parseFloat = function (value, radix, cultureSelector) {
    return exports.Globalize.parseFloat.call(this, value, radix, cultureSelector);
};
exports.Globalize.prototype.culture = function (cultureSelector) {
    return exports.Globalize.culture.call(this, cultureSelector);
};
//
// public singleton functions
//
exports.Globalize.addCultureInfo = function (cultureName, baseCultureName, info) {
    var base = {}, isNew = false;
    if (typeof cultureName !== "string") {
        // cultureName argument is optional string. If not specified, assume info is first
        // and only argument. Specified info deep-extends current culture.
        info = cultureName;
        cultureName = this.culture().name;
        base = this.cultures[cultureName];
    }
    else if (typeof baseCultureName !== "string") {
        // baseCultureName argument is optional string. If not specified, assume info is second
        // argument. Specified info deep-extends specified culture.
        // If specified culture does not exist, create by deep-extending default
        info = baseCultureName;
        isNew = (this.cultures[cultureName] == null);
        base = this.cultures[cultureName] || this.cultures["default"];
    }
    else {
        // cultureName and baseCultureName specified. Assume a new culture is being created
        // by deep-extending an specified base culture
        isNew = true;
        base = this.cultures[baseCultureName];
    }
    this.cultures[cultureName] = (0, exports.extend)(true, {}, base, info);
    // Make the standard calendar the current culture if it's a new culture
    if (isNew) {
        this.cultures[cultureName].calendar = this.cultures[cultureName].calendars.standard;
    }
};
exports.Globalize.findClosestCulture = function (name) {
    var match;
    if (!name) {
        return this.cultures[this.cultureSelector] || this.cultures["default"];
    }
    if (typeof name === "string") {
        name = name.split(",");
    }
    if ((0, exports.isArray)(name)) {
        var lang, cultures = this.cultures, list = name, i, l = list.length, prioritized = [];
        for (i = 0; i < l; i++) {
            name = (0, exports.trim)(list[i]);
            var pri, parts = name.split(";");
            lang = (0, exports.trim)(parts[0]);
            if (parts.length === 1) {
                pri = 1;
            }
            else {
                name = (0, exports.trim)(parts[1]);
                if (name.indexOf("q=") === 0) {
                    name = name.substring(2);
                    pri = parseFloat(name);
                    pri = isNaN(pri) ? 0 : pri;
                }
                else {
                    pri = 1;
                }
            }
            prioritized.push({ lang: lang, pri: pri });
        }
        prioritized.sort(function (a, b) {
            return a.pri < b.pri ? 1 : -1;
        });
        // exact match
        for (i = 0; i < l; i++) {
            lang = prioritized[i].lang;
            match = cultures[lang];
            if (match) {
                return match;
            }
        }
        // neutral language match
        for (i = 0; i < l; i++) {
            lang = prioritized[i].lang;
            do {
                var index = lang.lastIndexOf("-");
                if (index === -1) {
                    break;
                }
                // strip off the last part. e.g. en-US => en
                lang = lang.substring(0, index);
                match = cultures[lang];
                if (match) {
                    return match;
                }
            } while (1);
        }
        // last resort: match first culture using that language
        for (i = 0; i < l; i++) {
            lang = prioritized[i].lang;
            for (var cultureKey in cultures) {
                var culture = cultures[cultureKey];
                if (culture.language == lang) {
                    return culture;
                }
            }
        }
    }
    else if (typeof name === "object") {
        return name;
    }
    return match || null;
};
exports.Globalize.format = function (value, format, cultureSelector) {
    var culture = this.findClosestCulture(cultureSelector);
    if (value instanceof Date) {
        value = (0, exports.formatDate)(value, format, culture);
    }
    else if (typeof value === "number") {
        value = (0, exports.formatNumber)(value, format, culture);
    }
    return value;
};
exports.Globalize.localize = function (key, cultureSelector) {
    return (this.findClosestCulture(cultureSelector).messages[key]
        ||
            this.cultures["default"].messages["key"]);
};
exports.Globalize.parseDate = function (value, formats, culture) {
    culture = this.findClosestCulture(culture);
    var date, prop, patterns;
    if (formats) {
        if (typeof formats === "string") {
            formats = [formats];
        }
        if (formats.length) {
            for (var i = 0, l = formats.length; i < l; i++) {
                var format = formats[i];
                if (format) {
                    date = (0, exports.parseExact)(value, format, culture);
                    if (date) {
                        break;
                    }
                }
            }
        }
    }
    else {
        patterns = culture.calendar.patterns;
        for (prop in patterns) {
            date = (0, exports.parseExact)(value, patterns[prop], culture);
            if (date) {
                break;
            }
        }
    }
    return date || null;
};
exports.Globalize.parseInt = function (value, radix, cultureSelector) {
    return Math.floor(exports.Globalize.parseFloat(value, radix, cultureSelector));
};
exports.Globalize.parseFloat = function (value, radix, cultureSelector) {
    // radix argument is optional
    if (typeof radix !== "number") {
        cultureSelector = radix;
        radix = 10;
    }
    var culture = this.findClosestCulture(cultureSelector);
    var ret = NaN, nf = culture.numberFormat;
    if (value.indexOf(culture.numberFormat.currency.symbol) > -1) {
        // remove currency symbol
        value = value.replace(culture.numberFormat.currency.symbol, "");
        // replace decimal seperator
        value = value.replace(culture.numberFormat.currency["."], culture.numberFormat["."]);
    }
    // trim leading and trailing whitespace
    value = (0, exports.trim)(value);
    // allow infinity or hexidecimal
    if (exports.regexInfinity.test(value)) {
        ret = parseFloat(value);
    }
    else if (!radix && exports.regexHex.test(value)) {
        ret = parseInt(value, 16);
    }
    else {
        var signInfo = (0, exports.parseNegativePattern)(value, nf, nf.pattern[0]), sign = signInfo[0], num = signInfo[1];
        // determine sign and number
        if (sign === "" && nf.pattern[0] !== "-n") {
            signInfo = (0, exports.parseNegativePattern)(value, nf, "-n");
            sign = signInfo[0];
            num = signInfo[1];
        }
        sign = sign || "+";
        // determine exponent and number
        var exponent, intAndFraction, exponentPos = num.indexOf("e");
        if (exponentPos < 0)
            exponentPos = num.indexOf("E");
        if (exponentPos < 0) {
            intAndFraction = num;
            exponent = null;
        }
        else {
            intAndFraction = num.substring(0, exponentPos);
            exponent = num.substring(exponentPos + 1);
        }
        // determine decimal position
        var integer, fraction, decSep = nf["."], decimalPos = intAndFraction.indexOf(decSep);
        if (decimalPos < 0) {
            integer = intAndFraction;
            fraction = null;
        }
        else {
            integer = intAndFraction.substring(0, decimalPos);
            fraction = intAndFraction.substring(decimalPos + decSep.length);
        }
        // handle groups (e.g. 1,000,000)
        var groupSep = nf[","];
        integer = integer.split(groupSep).join("");
        var altGroupSep = groupSep.replace(/\u00A0/g, " ");
        if (groupSep !== altGroupSep) {
            integer = integer.split(altGroupSep).join("");
        }
        // build a natively parsable number string
        var p = sign + integer;
        if (fraction !== null) {
            p += "." + fraction;
        }
        if (exponent !== null) {
            // exponent itself may have a number patternd
            var expSignInfo = (0, exports.parseNegativePattern)(exponent, nf, "-n");
            p += "e" + (expSignInfo[0] || "+") + expSignInfo[1];
        }
        if (exports.regexParseFloat.test(p)) {
            ret = parseFloat(p);
        }
    }
    return ret;
};
exports.Globalize.culture = function (cultureSelector) {
    // setter
    if (typeof cultureSelector !== "undefined") {
        this.cultureSelector = cultureSelector;
    }
    // getter
    return this.findClosestCulture(cultureSelector) || this.culture["default"];
};
//# sourceMappingURL=globalize.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/powerbiGlobalizeLocales.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/powerbiGlobalizeLocales.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.locales = void 0;
exports.locales = {
    "ar": ["ar", "default", {
            "name": "ar",
            "englishName": "Arabic",
            "nativeName": "العربية",
            "language": "ar",
            "isRTL": true,
            "numberFormat": {
                "pattern": ["n-"],
                "currency": {
                    "pattern": ["$n-", "$ n"],
                    "symbol": "ر.س.‏"
                }
            },
            "calendars": {
                "standard": {
                    "name": "UmAlQura",
                    "firstDay": 6,
                    "days": {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    "months": {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "bg": ["bg", "default", {
            name: "bg",
            englishName: "Bulgarian",
            nativeName: "български",
            language: "bg",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "лв."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["неделя", "понеделник", "вторник", "сряда", "четвъртък", "петък", "събота"],
                        namesAbbr: ["нед", "пон", "вт", "ср", "четв", "пет", "съб"],
                        namesShort: ["н", "п", "в", "с", "ч", "п", "с"]
                    },
                    months: {
                        names: ["януари", "февруари", "март", "април", "май", "юни", "юли", "август", "септември", "октомври", "ноември", "декември", ""],
                        namesAbbr: ["ян", "февр", "март", "апр", "май", "юни", "юли", "авг", "септ", "окт", "ноември", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "след новата ера", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy 'г.'",
                        D: "dd MMMM yyyy 'г.'",
                        t: "HH:mm 'ч.'",
                        T: "HH:mm:ss 'ч.'",
                        f: "dd MMMM yyyy 'г.' HH:mm 'ч.'",
                        F: "dd MMMM yyyy 'г.' HH:mm:ss 'ч.'",
                        M: "dd MMMM",
                        Y: "MMMM yyyy 'г.'"
                    }
                }
            }
        }],
    "ca": ["ca", "default", {
            name: "ca",
            englishName: "Catalan",
            nativeName: "català",
            language: "ca",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"],
                        namesAbbr: ["dg.", "dl.", "dt.", "dc.", "dj.", "dv.", "ds."],
                        namesShort: ["dg", "dl", "dt", "dc", "dj", "dv", "ds"]
                    },
                    months: {
                        names: ["gener", "febrer", "març", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre", ""],
                        namesAbbr: ["gen", "feb", "març", "abr", "maig", "juny", "jul", "ag", "set", "oct", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' / 'MMMM' / 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' / 'MMMM' / 'yyyy HH:mm",
                        F: "dddd, d' / 'MMMM' / 'yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' / 'yyyy"
                    }
                }
            }
        }],
    "zh-Hans": ["zh-Hans", "default", {
            name: "zh-Hans",
            englishName: "Chinese (Simplified)",
            nativeName: "中文(简体)",
            language: "zh-Hans",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "cs": ["cs", "default", {
            name: "cs",
            englishName: "Czech",
            nativeName: "čeština",
            language: "cs",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Kč"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["neděle", "pondělí", "úterý", "středa", "čtvrtek", "pátek", "sobota"],
                        namesAbbr: ["ne", "po", "út", "st", "čt", "pá", "so"],
                        namesShort: ["ne", "po", "út", "st", "čt", "pá", "so"]
                    },
                    months: {
                        names: ["leden", "únor", "březen", "duben", "květen", "červen", "červenec", "srpen", "září", "říjen", "listopad", "prosinec", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    monthsGenitive: {
                        names: ["ledna", "února", "března", "dubna", "května", "června", "července", "srpna", "září", "října", "listopadu", "prosince", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["dop.", "dop.", "DOP."],
                    PM: ["odp.", "odp.", "ODP."],
                    eras: [{ "name": "n. l.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "da": ["da", "default", {
            name: "da",
            englishName: "Danish",
            nativeName: "dansk",
            language: "da",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                        namesAbbr: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
                        namesShort: ["sø", "ma", "ti", "on", "to", "fr", "lø"]
                    },
                    months: {
                        names: ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "de": ["de", "default", {
            name: "de",
            englishName: "German",
            nativeName: "Deutsch",
            language: "de",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "el": ["el", "default", {
            name: "el",
            englishName: "Greek",
            nativeName: "Ελληνικά",
            language: "el",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"],
                        namesAbbr: ["Κυρ", "Δευ", "Τρι", "Τετ", "Πεμ", "Παρ", "Σαβ"],
                        namesShort: ["Κυ", "Δε", "Τρ", "Τε", "Πε", "Πα", "Σά"]
                    },
                    months: {
                        names: ["Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος", ""],
                        namesAbbr: ["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαϊ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ", ""]
                    },
                    monthsGenitive: {
                        names: ["Ιανουαρίου", "Φεβρουαρίου", "Μαρτίου", "Απριλίου", "Μαΐου", "Ιουνίου", "Ιουλίου", "Αυγούστου", "Σεπτεμβρίου", "Οκτωβρίου", "Νοεμβρίου", "Δεκεμβρίου", ""],
                        namesAbbr: ["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαϊ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ", ""]
                    },
                    AM: ["πμ", "πμ", "ΠΜ"],
                    PM: ["μμ", "μμ", "ΜΜ"],
                    eras: [{ "name": "μ.Χ.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd, d MMMM yyyy",
                        f: "dddd, d MMMM yyyy h:mm tt",
                        F: "dddd, d MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es": ["es", "default", {
            name: "es",
            englishName: "Spanish",
            nativeName: "español",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fi": ["fi", "default", {
            name: "fi",
            englishName: "Finnish",
            nativeName: "suomi",
            language: "fi",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"],
                        namesAbbr: ["su", "ma", "ti", "ke", "to", "pe", "la"],
                        namesShort: ["su", "ma", "ti", "ke", "to", "pe", "la"]
                    },
                    months: {
                        names: ["tammikuu", "helmikuu", "maaliskuu", "huhtikuu", "toukokuu", "kesäkuu", "heinäkuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu", ""],
                        namesAbbr: ["tammi", "helmi", "maalis", "huhti", "touko", "kesä", "heinä", "elo", "syys", "loka", "marras", "joulu", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM'ta 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM'ta 'yyyy H:mm",
                        F: "d. MMMM'ta 'yyyy H:mm:ss",
                        M: "d. MMMM'ta'",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fr": ["fr", "default", {
            name: "fr",
            englishName: "French",
            nativeName: "français",
            language: "fr",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "he": ["he", "default", {
            name: "he",
            englishName: "Hebrew",
            nativeName: "עברית",
            language: "he",
            isRTL: true,
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "₪"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "שבת"],
                        namesAbbr: ["יום א", "יום ב", "יום ג", "יום ד", "יום ה", "יום ו", "שבת"],
                        namesShort: ["א", "ב", "ג", "ד", "ה", "ו", "ש"]
                    },
                    months: {
                        names: ["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר", ""],
                        namesAbbr: ["ינו", "פבר", "מרץ", "אפר", "מאי", "יונ", "יול", "אוג", "ספט", "אוק", "נוב", "דצמ", ""]
                    },
                    eras: [{ "name": "לספירה", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd dd MMMM yyyy HH:mm",
                        F: "dddd dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                },
                Hebrew: {
                    name: "Hebrew",
                    "/": " ",
                    days: {
                        names: ["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "שבת"],
                        namesAbbr: ["א", "ב", "ג", "ד", "ה", "ו", "ש"],
                        namesShort: ["א", "ב", "ג", "ד", "ה", "ו", "ש"]
                    },
                    months: {
                        names: ["תשרי", "חשון", "כסלו", "טבת", "שבט", "אדר", "אדר ב", "ניסן", "אייר", "סיון", "תמוז", "אב", "אלול"],
                        namesAbbr: ["תשרי", "חשון", "כסלו", "טבת", "שבט", "אדר", "אדר ב", "ניסן", "אייר", "סיון", "תמוז", "אב", "אלול"]
                    },
                    eras: [{ "name": "C.E.", "start": null, "offset": 0 }],
                    twoDigitYearMax: 5790,
                    patterns: {
                        d: "dd MMMM yyyy",
                        D: "dddd dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd dd MMMM yyyy HH:mm",
                        F: "dddd dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hu": ["hu", "default", {
            name: "hu",
            englishName: "Hungarian",
            nativeName: "magyar",
            language: "hu",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Ft"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["vasárnap", "hétfő", "kedd", "szerda", "csütörtök", "péntek", "szombat"],
                        namesAbbr: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
                        namesShort: ["V", "H", "K", "Sze", "Cs", "P", "Szo"]
                    },
                    months: {
                        names: ["január", "február", "március", "április", "május", "június", "július", "augusztus", "szeptember", "október", "november", "december", ""],
                        namesAbbr: ["jan.", "febr.", "márc.", "ápr.", "máj.", "jún.", "júl.", "aug.", "szept.", "okt.", "nov.", "dec.", ""]
                    },
                    AM: ["de.", "de.", "DE."],
                    PM: ["du.", "du.", "DU."],
                    eras: [{ "name": "i.sz.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy.MM.dd.",
                        D: "yyyy. MMMM d.",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy. MMMM d. H:mm",
                        F: "yyyy. MMMM d. H:mm:ss",
                        M: "MMMM d.",
                        Y: "yyyy. MMMM"
                    }
                }
            }
        }],
    "is": ["is", "default", {
            name: "is",
            englishName: "Icelandic",
            nativeName: "íslenska",
            language: "is",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    decimals: 0,
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sunnudagur", "mánudagur", "þriðjudagur", "miðvikudagur", "fimmtudagur", "föstudagur", "laugardagur"],
                        namesAbbr: ["sun.", "mán.", "þri.", "mið.", "fim.", "fös.", "lau."],
                        namesShort: ["su", "má", "þr", "mi", "fi", "fö", "la"]
                    },
                    months: {
                        names: ["janúar", "febrúar", "mars", "apríl", "maí", "júní", "júlí", "ágúst", "september", "október", "nóvember", "desember", ""],
                        namesAbbr: ["jan.", "feb.", "mar.", "apr.", "maí", "jún.", "júl.", "ágú.", "sep.", "okt.", "nóv.", "des.", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "it": ["it", "default", {
            name: "it",
            englishName: "Italian",
            nativeName: "italiano",
            language: "it",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"],
                        namesAbbr: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
                        namesShort: ["do", "lu", "ma", "me", "gi", "ve", "sa"]
                    },
                    months: {
                        names: ["gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""],
                        namesAbbr: ["gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ja": ["ja", "default", {
            name: "ja",
            englishName: "Japanese",
            nativeName: "日本語",
            language: "ja",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    decimals: 0,
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
                        namesAbbr: ["日", "月", "火", "水", "木", "金", "土"],
                        namesShort: ["日", "月", "火", "水", "木", "金", "土"]
                    },
                    months: {
                        names: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["午前", "午前", "午前"],
                    PM: ["午後", "午後", "午後"],
                    eras: [{ "name": "西暦", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                },
                Japanese: {
                    name: "Japanese",
                    days: {
                        names: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
                        namesAbbr: ["日", "月", "火", "水", "木", "金", "土"],
                        namesShort: ["日", "月", "火", "水", "木", "金", "土"]
                    },
                    months: {
                        names: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["午前", "午前", "午前"],
                    PM: ["午後", "午後", "午後"],
                    eras: [{ "name": "平成", "start": null, "offset": 1867 }, { "name": "昭和", "start": -1812153600000, "offset": 1911 }, { "name": "大正", "start": -1357603200000, "offset": 1925 }, { "name": "明治", "start": 60022080000, "offset": 1988 }],
                    twoDigitYearMax: 99,
                    patterns: {
                        d: "gg y/M/d",
                        D: "gg y'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "gg y'年'M'月'd'日' H:mm",
                        F: "gg y'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "gg y'年'M'月'"
                    }
                }
            }
        }],
    "ko": ["ko", "default", {
            name: "ko",
            englishName: "Korean",
            nativeName: "한국어",
            language: "ko",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    decimals: 0,
                    symbol: "₩"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
                        namesAbbr: ["일", "월", "화", "수", "목", "금", "토"],
                        namesShort: ["일", "월", "화", "수", "목", "금", "토"]
                    },
                    months: {
                        names: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["오전", "오전", "오전"],
                    PM: ["오후", "오후", "오후"],
                    eras: [{ "name": "서기", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy'년' M'월' d'일' dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "yyyy'년' M'월' d'일' dddd tt h:mm",
                        F: "yyyy'년' M'월' d'일' dddd tt h:mm:ss",
                        M: "M'월' d'일'",
                        Y: "yyyy'년' M'월'"
                    }
                },
                Korean: {
                    name: "Korean",
                    "/": "-",
                    days: {
                        names: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
                        namesAbbr: ["일", "월", "화", "수", "목", "금", "토"],
                        namesShort: ["일", "월", "화", "수", "목", "금", "토"]
                    },
                    months: {
                        names: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["오전", "오전", "오전"],
                    PM: ["오후", "오후", "오후"],
                    eras: [{ "name": "단기", "start": null, "offset": -2333 }],
                    twoDigitYearMax: 4362,
                    patterns: {
                        d: "gg yyyy-MM-dd",
                        D: "gg yyyy'년' M'월' d'일' dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "gg yyyy'년' M'월' d'일' dddd tt h:mm",
                        F: "gg yyyy'년' M'월' d'일' dddd tt h:mm:ss",
                        M: "M'월' d'일'",
                        Y: "gg yyyy'년' M'월'"
                    }
                }
            }
        }],
    "nl": ["nl", "default", {
            name: "nl",
            englishName: "Dutch",
            nativeName: "Nederlands",
            language: "nl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"],
                        namesAbbr: ["zo", "ma", "di", "wo", "do", "vr", "za"],
                        namesShort: ["zo", "ma", "di", "wo", "do", "vr", "za"]
                    },
                    months: {
                        names: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d-M-yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd d MMMM yyyy H:mm",
                        F: "dddd d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "no": ["no", "default", {
            name: "no",
            englishName: "Norwegian",
            nativeName: "norsk",
            language: "no",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                        namesAbbr: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
                        namesShort: ["sø", "ma", "ti", "on", "to", "fr", "lø"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "pl": ["pl", "default", {
            name: "pl",
            englishName: "Polish",
            nativeName: "polski",
            language: "pl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "zł"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["niedziela", "poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota"],
                        namesAbbr: ["N", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
                        namesShort: ["N", "Pn", "Wt", "Śr", "Cz", "Pt", "So"]
                    },
                    months: {
                        names: ["styczeń", "luty", "marzec", "kwiecień", "maj", "czerwiec", "lipiec", "sierpień", "wrzesień", "październik", "listopad", "grudzień", ""],
                        namesAbbr: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""]
                    },
                    monthsGenitive: {
                        names: ["stycznia", "lutego", "marca", "kwietnia", "maja", "czerwca", "lipca", "sierpnia", "września", "października", "listopada", "grudnia", ""],
                        namesAbbr: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "pt": ["pt", "default", {
            name: "pt",
            englishName: "Portuguese",
            nativeName: "Português",
            language: "pt",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "R$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"],
                        namesAbbr: ["dom", "seg", "ter", "qua", "qui", "sex", "sáb"],
                        namesShort: ["D", "S", "T", "Q", "Q", "S", "S"]
                    },
                    months: {
                        names: ["janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""],
                        namesAbbr: ["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' de 'MMMM' de 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' de 'MMMM' de 'yyyy HH:mm",
                        F: "dddd, d' de 'MMMM' de 'yyyy HH:mm:ss",
                        M: "dd' de 'MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "rm": ["rm", "default", {
            name: "rm",
            englishName: "Romansh",
            nativeName: "Rumantsch",
            language: "rm",
            numberFormat: {
                ",": "'",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "fr."
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dumengia", "glindesdi", "mardi", "mesemna", "gievgia", "venderdi", "sonda"],
                        namesAbbr: ["du", "gli", "ma", "me", "gie", "ve", "so"],
                        namesShort: ["du", "gli", "ma", "me", "gie", "ve", "so"]
                    },
                    months: {
                        names: ["schaner", "favrer", "mars", "avrigl", "matg", "zercladur", "fanadur", "avust", "settember", "october", "november", "december", ""],
                        namesAbbr: ["schan", "favr", "mars", "avr", "matg", "zercl", "fan", "avust", "sett", "oct", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "s. Cr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d MMMM yyyy HH:mm",
                        F: "dddd, d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ro": ["ro", "default", {
            name: "ro",
            englishName: "Romanian",
            nativeName: "română",
            language: "ro",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "lei"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["duminică", "luni", "marţi", "miercuri", "joi", "vineri", "sâmbătă"],
                        namesAbbr: ["D", "L", "Ma", "Mi", "J", "V", "S"],
                        namesShort: ["D", "L", "Ma", "Mi", "J", "V", "S"]
                    },
                    months: {
                        names: ["ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie", ""],
                        namesAbbr: ["ian.", "feb.", "mar.", "apr.", "mai.", "iun.", "iul.", "aug.", "sep.", "oct.", "nov.", "dec.", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ru": ["ru", "default", {
            name: "ru",
            englishName: "Russian",
            nativeName: "русский",
            language: "ru",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"],
                        namesAbbr: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                        namesShort: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"]
                    },
                    months: {
                        names: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    monthsGenitive: {
                        names: ["января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря", ""],
                        namesAbbr: ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy 'г.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'г.' H:mm",
                        F: "d MMMM yyyy 'г.' H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hr": ["hr", "default", {
            name: "hr",
            englishName: "Croatian",
            nativeName: "hrvatski",
            language: "hr",
            numberFormat: {
                pattern: ["- n"],
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kn"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["siječanj", "veljača", "ožujak", "travanj", "svibanj", "lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    monthsGenitive: {
                        names: ["siječnja", "veljače", "ožujka", "travnja", "svibnja", "lipnja", "srpnja", "kolovoza", "rujna", "listopada", "studenog", "prosinca", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy.",
                        D: "d. MMMM yyyy.",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy. H:mm",
                        F: "d. MMMM yyyy. H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "sk": ["sk", "default", {
            name: "sk",
            englishName: "Slovak",
            nativeName: "slovenčina",
            language: "sk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["nedeľa", "pondelok", "utorok", "streda", "štvrtok", "piatok", "sobota"],
                        namesAbbr: ["ne", "po", "ut", "st", "št", "pi", "so"],
                        namesShort: ["ne", "po", "ut", "st", "št", "pi", "so"]
                    },
                    months: {
                        names: ["január", "február", "marec", "apríl", "máj", "jún", "júl", "august", "september", "október", "november", "december", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    monthsGenitive: {
                        names: ["januára", "februára", "marca", "apríla", "mája", "júna", "júla", "augusta", "septembra", "októbra", "novembra", "decembra", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. l.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sq": ["sq", "default", {
            name: "sq",
            englishName: "Albanian",
            nativeName: "shqipe",
            language: "sq",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": ".",
                    ".": ",",
                    symbol: "Lek"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["e diel", "e hënë", "e martë", "e mërkurë", "e enjte", "e premte", "e shtunë"],
                        namesAbbr: ["Die", "Hën", "Mar", "Mër", "Enj", "Pre", "Sht"],
                        namesShort: ["Di", "Hë", "Ma", "Më", "En", "Pr", "Sh"]
                    },
                    months: {
                        names: ["janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nëntor", "dhjetor", ""],
                        namesAbbr: ["Jan", "Shk", "Mar", "Pri", "Maj", "Qer", "Kor", "Gsh", "Sht", "Tet", "Nën", "Dhj", ""]
                    },
                    AM: ["PD", "pd", "PD"],
                    PM: ["MD", "md", "MD"],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy-MM-dd",
                        t: "h:mm.tt",
                        T: "h:mm:ss.tt",
                        f: "yyyy-MM-dd h:mm.tt",
                        F: "yyyy-MM-dd h:mm:ss.tt",
                        Y: "yyyy-MM"
                    }
                }
            }
        }],
    "sv": ["sv", "default", {
            name: "sv",
            englishName: "Swedish",
            nativeName: "svenska",
            language: "sv",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"],
                        namesAbbr: ["sö", "må", "ti", "on", "to", "fr", "lö"],
                        namesShort: ["sö", "må", "ti", "on", "to", "fr", "lö"]
                    },
                    months: {
                        names: ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "'den 'd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "'den 'd MMMM yyyy HH:mm",
                        F: "'den 'd MMMM yyyy HH:mm:ss",
                        M: "'den 'd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "th": ["th", "default", {
            name: "th",
            englishName: "Thai",
            nativeName: "ไทย",
            language: "th",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "฿"
                }
            },
            calendars: {
                standard: {
                    name: "ThaiBuddhist",
                    firstDay: 1,
                    days: {
                        names: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"],
                        namesAbbr: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
                        namesShort: ["อ", "จ", "อ", "พ", "พ", "ศ", "ส"]
                    },
                    months: {
                        names: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""],
                        namesAbbr: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""]
                    },
                    eras: [{ "name": "พ.ศ.", "start": null, "offset": -543 }],
                    twoDigitYearMax: 2572,
                    patterns: {
                        d: "d/M/yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 1,
                    days: {
                        names: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"],
                        namesAbbr: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
                        namesShort: ["อ", "จ", "อ", "พ", "พ", "ศ", "ส"]
                    },
                    months: {
                        names: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""],
                        namesAbbr: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "'วัน'dddd'ที่' d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "'วัน'dddd'ที่' d MMMM yyyy H:mm",
                        F: "'วัน'dddd'ที่' d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tr": ["tr", "default", {
            name: "tr",
            englishName: "Turkish",
            nativeName: "Türkçe",
            language: "tr",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "TL"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"],
                        namesAbbr: ["Paz", "Pzt", "Sal", "Çar", "Per", "Cum", "Cmt"],
                        namesShort: ["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"]
                    },
                    months: {
                        names: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık", ""],
                        namesAbbr: ["Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dd MMMM yyyy dddd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy dddd HH:mm",
                        F: "dd MMMM yyyy dddd HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ur": ["ur", "default", {
            name: "ur",
            englishName: "Urdu",
            nativeName: "اُردو",
            language: "ur",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["$n-", "$n"],
                    symbol: "Rs"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"],
                        namesAbbr: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"],
                        namesShort: ["ا", "پ", "م", "ب", "ج", "ج", "ه"]
                    },
                    months: {
                        names: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""],
                        namesAbbr: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""]
                    },
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        f: "dd MMMM, yyyy h:mm tt",
                        F: "dd MMMM, yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                }
            }
        }],
    "id": ["id", "default", {
            name: "id",
            englishName: "Indonesian",
            nativeName: "Bahasa Indonesia",
            language: "id",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    decimals: 0,
                    ",": ".",
                    ".": ",",
                    symbol: "Rp"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"],
                        namesAbbr: ["Minggu", "Sen", "Sel", "Rabu", "Kamis", "Jumat", "Sabtu"],
                        namesShort: ["M", "S", "S", "R", "K", "J", "S"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "Nopember", "Desember", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agust", "Sep", "Okt", "Nop", "Des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM yyyy H:mm",
                        F: "dd MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "uk": ["uk", "default", {
            name: "uk",
            englishName: "Ukrainian",
            nativeName: "українська",
            language: "uk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "₴"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["неділя", "понеділок", "вівторок", "середа", "четвер", "п'ятниця", "субота"],
                        namesAbbr: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                        namesShort: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"]
                    },
                    months: {
                        names: ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень", ""],
                        namesAbbr: ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру", ""]
                    },
                    monthsGenitive: {
                        names: ["січня", "лютого", "березня", "квітня", "травня", "червня", "липня", "серпня", "вересня", "жовтня", "листопада", "грудня", ""],
                        namesAbbr: ["січ", "лют", "бер", "кві", "тра", "чер", "лип", "сер", "вер", "жов", "лис", "гру", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy' р.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy' р.' H:mm",
                        F: "d MMMM yyyy' р.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy' р.'"
                    }
                }
            }
        }],
    "be": ["be", "default", {
            name: "be",
            englishName: "Belarusian",
            nativeName: "Беларускі",
            language: "be",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["нядзеля", "панядзелак", "аўторак", "серада", "чацвер", "пятніца", "субота"],
                        namesAbbr: ["нд", "пн", "аў", "ср", "чц", "пт", "сб"],
                        namesShort: ["нд", "пн", "аў", "ср", "чц", "пт", "сб"]
                    },
                    months: {
                        names: ["Студзень", "Люты", "Сакавік", "Красавік", "Май", "Чэрвень", "Ліпень", "Жнівень", "Верасень", "Кастрычнік", "Лістапад", "Снежань", ""],
                        namesAbbr: ["Сту", "Лют", "Сак", "Кра", "Май", "Чэр", "Ліп", "Жні", "Вер", "Кас", "Ліс", "Сне", ""]
                    },
                    monthsGenitive: {
                        names: ["студзеня", "лютага", "сакавіка", "красавіка", "мая", "чэрвеня", "ліпеня", "жніўня", "верасня", "кастрычніка", "лістапада", "снежня", ""],
                        namesAbbr: ["Сту", "Лют", "Сак", "Кра", "Май", "Чэр", "Ліп", "Жні", "Вер", "Кас", "Ліс", "Сне", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sl": ["sl", "default", {
            name: "sl",
            englishName: "Slovenian",
            nativeName: "slovenski",
            language: "sl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljek", "torek", "sreda", "četrtek", "petek", "sobota"],
                        namesAbbr: ["ned", "pon", "tor", "sre", "čet", "pet", "sob"],
                        namesShort: ["ne", "po", "to", "sr", "če", "pe", "so"]
                    },
                    months: {
                        names: ["januar", "februar", "marec", "april", "maj", "junij", "julij", "avgust", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "et": ["et", "default", {
            name: "et",
            englishName: "Estonian",
            nativeName: "eesti",
            language: "et",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pühapäev", "esmaspäev", "teisipäev", "kolmapäev", "neljapäev", "reede", "laupäev"],
                        namesAbbr: ["P", "E", "T", "K", "N", "R", "L"],
                        namesShort: ["P", "E", "T", "K", "N", "R", "L"]
                    },
                    months: {
                        names: ["jaanuar", "veebruar", "märts", "aprill", "mai", "juuni", "juuli", "august", "september", "oktoober", "november", "detsember", ""],
                        namesAbbr: ["jaan", "veebr", "märts", "apr", "mai", "juuni", "juuli", "aug", "sept", "okt", "nov", "dets", ""]
                    },
                    AM: ["EL", "el", "EL"],
                    PM: ["PL", "pl", "PL"],
                    patterns: {
                        d: "d.MM.yyyy",
                        D: "d. MMMM yyyy'. a.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy'. a.' H:mm",
                        F: "d. MMMM yyyy'. a.' H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy'. a.'"
                    }
                }
            }
        }],
    "lv": ["lv", "default", {
            name: "lv",
            englishName: "Latvian",
            nativeName: "latviešu",
            language: "lv",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "Ls"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["svētdiena", "pirmdiena", "otrdiena", "trešdiena", "ceturtdiena", "piektdiena", "sestdiena"],
                        namesAbbr: ["sv", "pr", "ot", "tr", "ce", "pk", "se"],
                        namesShort: ["sv", "pr", "ot", "tr", "ce", "pk", "se"]
                    },
                    months: {
                        names: ["janvāris", "februāris", "marts", "aprīlis", "maijs", "jūnijs", "jūlijs", "augusts", "septembris", "oktobris", "novembris", "decembris", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jūn", "jūl", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["janvārī", "februārī", "martā", "aprīlī", "maijā", "jūnijā", "jūlijā", "augustā", "septembrī", "oktobrī", "novembrī", "decembrī", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jūn", "jūl", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy.MM.dd.",
                        D: "dddd, yyyy'. gada 'd. MMMM",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, yyyy'. gada 'd. MMMM H:mm",
                        F: "dddd, yyyy'. gada 'd. MMMM H:mm:ss",
                        M: "d. MMMM",
                        Y: "yyyy. MMMM"
                    }
                }
            }
        }],
    "lt": ["lt", "default", {
            name: "lt",
            englishName: "Lithuanian",
            nativeName: "lietuvių",
            language: "lt",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Lt"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sekmadienis", "pirmadienis", "antradienis", "trečiadienis", "ketvirtadienis", "penktadienis", "šeštadienis"],
                        namesAbbr: ["Sk", "Pr", "An", "Tr", "Kt", "Pn", "Št"],
                        namesShort: ["S", "P", "A", "T", "K", "Pn", "Š"]
                    },
                    months: {
                        names: ["sausis", "vasaris", "kovas", "balandis", "gegužė", "birželis", "liepa", "rugpjūtis", "rugsėjis", "spalis", "lapkritis", "gruodis", ""],
                        namesAbbr: ["Sau", "Vas", "Kov", "Bal", "Geg", "Bir", "Lie", "Rgp", "Rgs", "Spl", "Lap", "Grd", ""]
                    },
                    monthsGenitive: {
                        names: ["sausio", "vasario", "kovo", "balandžio", "gegužės", "birželio", "liepos", "rugpjūčio", "rugsėjo", "spalio", "lapkričio", "gruodžio", ""],
                        namesAbbr: ["Sau", "Vas", "Kov", "Bal", "Geg", "Bir", "Lie", "Rgp", "Rgs", "Spl", "Lap", "Grd", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy.MM.dd",
                        D: "yyyy 'm.' MMMM d 'd.'",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'm.' MMMM d 'd.' HH:mm",
                        F: "yyyy 'm.' MMMM d 'd.' HH:mm:ss",
                        M: "MMMM d 'd.'",
                        Y: "yyyy 'm.' MMMM"
                    }
                }
            }
        }],
    "tg": ["tg", "default", {
            name: "tg",
            englishName: "Tajik",
            nativeName: "Тоҷикӣ",
            language: "tg",
            numberFormat: {
                ",": " ",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ";",
                    symbol: "т.р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    days: {
                        names: ["Яш", "Душанбе", "Сешанбе", "Чоршанбе", "Панҷшанбе", "Ҷумъа", "Шанбе"],
                        namesAbbr: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"],
                        namesShort: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"]
                    },
                    months: {
                        names: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["январи", "феврали", "марти", "апрели", "маи", "июни", "июли", "августи", "сентябри", "октябри", "ноябри", "декабри", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fa": ["fa", "default", {
            name: "fa",
            englishName: "Persian",
            nativeName: "فارسى",
            language: "fa",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    ".": "/",
                    symbol: "ريال"
                }
            },
            calendars: {
                standard: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["يكشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["يكشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["ژانويه", "فوريه", "مارس", "آوريل", "مى", "ژوئن", "ژوئيه", "اوت", "سپتامبر", "اُكتبر", "نوامبر", "دسامبر", ""],
                        namesAbbr: ["ژانويه", "فوريه", "مارس", "آوريل", "مى", "ژوئن", "ژوئيه", "اوت", "سپتامبر", "اُكتبر", "نوامبر", "دسامبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "yyyy/MM/dd",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "yyyy/MM/dd hh:mm tt",
                        F: "yyyy/MM/dd hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "vi": ["vi", "default", {
            name: "vi",
            englishName: "Vietnamese",
            nativeName: "Tiếng Việt",
            language: "vi",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "₫"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"],
                        namesAbbr: ["CN", "Hai", "Ba", "Tư", "Năm", "Sáu", "Bảy"],
                        namesShort: ["C", "H", "B", "T", "N", "S", "B"]
                    },
                    months: {
                        names: ["Tháng Giêng", "Tháng Hai", "Tháng Ba", "Tháng Tư", "Tháng Năm", "Tháng Sáu", "Tháng Bảy", "Tháng Tám", "Tháng Chín", "Tháng Mười", "Tháng Mười Một", "Tháng Mười Hai", ""],
                        namesAbbr: ["Thg1", "Thg2", "Thg3", "Thg4", "Thg5", "Thg6", "Thg7", "Thg8", "Thg9", "Thg10", "Thg11", "Thg12", ""]
                    },
                    AM: ["SA", "sa", "SA"],
                    PM: ["CH", "ch", "CH"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        f: "dd MMMM yyyy h:mm tt",
                        F: "dd MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hy": ["hy", "default", {
            name: "hy",
            englishName: "Armenian",
            nativeName: "Հայերեն",
            language: "hy",
            numberFormat: {
                currency: {
                    pattern: ["-n $", "n $"],
                    symbol: "դր."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Կիրակի", "Երկուշաբթի", "Երեքշաբթի", "Չորեքշաբթի", "Հինգշաբթի", "ՈՒրբաթ", "Շաբաթ"],
                        namesAbbr: ["Կիր", "Երկ", "Երք", "Չրք", "Հնգ", "ՈՒր", "Շբթ"],
                        namesShort: ["Կ", "Ե", "Ե", "Չ", "Հ", "Ո", "Շ"]
                    },
                    months: {
                        names: ["Հունվար", "Փետրվար", "Մարտ", "Ապրիլ", "Մայիս", "Հունիս", "Հուլիս", "Օգոստոս", "Սեպտեմբեր", "Հոկտեմբեր", "Նոյեմբեր", "Դեկտեմբեր", ""],
                        namesAbbr: ["ՀՆՎ", "ՓՏՎ", "ՄՐՏ", "ԱՊՐ", "ՄՅՍ", "ՀՆՍ", "ՀԼՍ", "ՕԳՍ", "ՍԵՊ", "ՀՈԿ", "ՆՈՅ", "ԴԵԿ", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM, yyyy H:mm",
                        F: "d MMMM, yyyy H:mm:ss",
                        M: "d MMMM"
                    }
                }
            }
        }],
    "az": ["az", "default", {
            name: "az",
            englishName: "Azeri",
            nativeName: "Azərbaycan­ılı",
            language: "az",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "man."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Bazar", "Bazar ertəsi", "Çərşənbə axşamı", "Çərşənbə", "Cümə axşamı", "Cümə", "Şənbə"],
                        namesAbbr: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"],
                        namesShort: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"]
                    },
                    months: {
                        names: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "İyun", "İyul", "Avgust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    monthsGenitive: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "eu": ["eu", "default", {
            name: "eu",
            englishName: "Basque",
            nativeName: "euskara",
            language: "eu",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["igandea", "astelehena", "asteartea", "asteazkena", "osteguna", "ostirala", "larunbata"],
                        namesAbbr: ["ig.", "al.", "as.", "az.", "og.", "or.", "lr."],
                        namesShort: ["ig", "al", "as", "az", "og", "or", "lr"]
                    },
                    months: {
                        names: ["urtarrila", "otsaila", "martxoa", "apirila", "maiatza", "ekaina", "uztaila", "abuztua", "iraila", "urria", "azaroa", "abendua", ""],
                        namesAbbr: ["urt.", "ots.", "mar.", "api.", "mai.", "eka.", "uzt.", "abu.", "ira.", "urr.", "aza.", "abe.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dddd, yyyy.'eko' MMMM'k 'd",
                        t: "HH:mm",
                        T: "H:mm:ss",
                        f: "dddd, yyyy.'eko' MMMM'k 'd HH:mm",
                        F: "dddd, yyyy.'eko' MMMM'k 'd H:mm:ss",
                        Y: "yyyy.'eko' MMMM"
                    }
                }
            }
        }],
    "hsb": ["hsb", "default", {
            name: "hsb",
            englishName: "Upper Sorbian",
            nativeName: "hornjoserbšćina",
            language: "hsb",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["njedźela", "póndźela", "wutora", "srjeda", "štwórtk", "pjatk", "sobota"],
                        namesAbbr: ["nje", "pón", "wut", "srj", "štw", "pja", "sob"],
                        namesShort: ["n", "p", "w", "s", "š", "p", "s"]
                    },
                    months: {
                        names: ["januar", "februar", "měrc", "apryl", "meja", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "mej", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["januara", "februara", "měrca", "apryla", "meje", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "mej", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "po Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "dddd, 'dnja' d. MMMM yyyy",
                        t: "H.mm 'hodź.'",
                        T: "H:mm:ss",
                        f: "dddd, 'dnja' d. MMMM yyyy H.mm 'hodź.'",
                        F: "dddd, 'dnja' d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "mk": ["mk", "default", {
            name: "mk",
            englishName: "Macedonian (FYROM)",
            nativeName: "македонски јазик",
            language: "mk",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "ден."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недела", "понеделник", "вторник", "среда", "четврток", "петок", "сабота"],
                        namesAbbr: ["нед", "пон", "втр", "срд", "чет", "пет", "саб"],
                        namesShort: ["не", "по", "вт", "ср", "че", "пе", "са"]
                    },
                    months: {
                        names: ["јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември", ""],
                        namesAbbr: ["јан", "фев", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "ное", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, dd MMMM yyyy HH:mm",
                        F: "dddd, dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tn": ["tn", "default", {
            name: "tn",
            englishName: "Setswana",
            nativeName: "Setswana",
            language: "tn",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Latshipi", "Mosupologo", "Labobedi", "Laboraro", "Labone", "Labotlhano", "Lamatlhatso"],
                        namesAbbr: ["Ltp.", "Mos.", "Lbd.", "Lbr.", "Lbn.", "Lbt.", "Lmt."],
                        namesShort: ["Lp", "Ms", "Lb", "Lr", "Ln", "Lt", "Lm"]
                    },
                    months: {
                        names: ["Ferikgong", "Tlhakole", "Mopitloe", "Moranang", "Motsheganong", "Seetebosigo", "Phukwi", "Phatwe", "Lwetse", "Diphalane", "Ngwanatsele", "Sedimothole", ""],
                        namesAbbr: ["Fer.", "Tlhak.", "Mop.", "Mor.", "Motsh.", "Seet.", "Phukw.", "Phatw.", "Lwets.", "Diph.", "Ngwan.", "Sed.", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "xh": ["xh", "default", {
            name: "xh",
            englishName: "isiXhosa",
            nativeName: "isiXhosa",
            language: "xh",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["iCawa", "uMvulo", "uLwesibini", "uLwesithathu", "uLwesine", "uLwesihlanu", "uMgqibelo"],
                        namesShort: ["Ca", "Mv", "Lb", "Lt", "Ln", "Lh", "Mg"]
                    },
                    months: {
                        names: ["Mqungu", "Mdumba", "Kwindla", "Tshazimpuzi", "Canzibe", "Silimela", "Khala", "Thupha", "Msintsi", "Dwarha", "Nkanga", "Mnga", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "zu": ["zu", "default", {
            name: "zu",
            englishName: "isiZulu",
            nativeName: "isiZulu",
            language: "zu",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["iSonto", "uMsombuluko", "uLwesibili", "uLwesithathu", "uLwesine", "uLwesihlanu", "uMgqibelo"],
                        namesAbbr: ["Son.", "Mso.", "Bi.", "Tha.", "Ne.", "Hla.", "Mgq."]
                    },
                    months: {
                        names: ["uMasingana", "uNhlolanja", "uNdasa", "uMbaso", "uNhlaba", "uNhlangulana", "uNtulikazi", "uNcwaba", "uMandulo", "uMfumfu", "uLwezi", "uZibandlela", ""],
                        namesAbbr: ["Mas.", "Nhlo.", "Nda.", "Mba.", "Nhla.", "Nhlang.", "Ntu.", "Ncwa.", "Man.", "Mfu.", "Lwe.", "Zib.", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "af": ["af", "default", {
            name: "af",
            englishName: "Afrikaans",
            nativeName: "Afrikaans",
            language: "af",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"],
                        namesAbbr: ["Son", "Maan", "Dins", "Woen", "Dond", "Vry", "Sat"],
                        namesShort: ["So", "Ma", "Di", "Wo", "Do", "Vr", "Sa"]
                    },
                    months: {
                        names: ["Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ka": ["ka", "default", {
            name: "ka",
            englishName: "Georgian",
            nativeName: "ქართული",
            language: "ka",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Lari"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"],
                        namesAbbr: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"],
                        namesShort: ["კ", "ო", "ს", "ო", "ხ", "პ", "შ"]
                    },
                    months: {
                        names: ["იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი", ""],
                        namesAbbr: ["იან", "თებ", "მარ", "აპრ", "მაის", "ივნ", "ივლ", "აგვ", "სექ", "ოქტ", "ნოემ", "დეკ", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "yyyy 'წლის' dd MM, dddd",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'წლის' dd MM, dddd H:mm",
                        F: "yyyy 'წლის' dd MM, dddd H:mm:ss",
                        M: "dd MM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fo": ["fo", "default", {
            name: "fo",
            englishName: "Faroese",
            nativeName: "føroyskt",
            language: "fo",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["sunnudagur", "mánadagur", "týsdagur", "mikudagur", "hósdagur", "fríggjadagur", "leygardagur"],
                        namesAbbr: ["sun", "mán", "týs", "mik", "hós", "frí", "leyg"],
                        namesShort: ["su", "má", "tý", "mi", "hó", "fr", "ley"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "apríl", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hi": ["hi", "default", {
            name: "hi",
            englishName: "Hindi",
            nativeName: "हिंदी",
            language: "hi",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["रवि.", "सोम.", "मंगल.", "बुध.", "गुरु.", "शुक्र.", "शनि."],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""],
                        namesAbbr: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""]
                    },
                    AM: ["पूर्वाह्न", "पूर्वाह्न", "पूर्वाह्न"],
                    PM: ["अपराह्न", "अपराह्न", "अपराह्न"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "mt": ["mt", "default", {
            name: "mt",
            englishName: "Maltese",
            nativeName: "Malti",
            language: "mt",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Il-Ħadd", "It-Tnejn", "It-Tlieta", "L-Erbgħa", "Il-Ħamis", "Il-Ġimgħa", "Is-Sibt"],
                        namesAbbr: ["Ħad", "Tne", "Tli", "Erb", "Ħam", "Ġim", "Sib"],
                        namesShort: ["I", "I", "I", "L", "I", "I", "I"]
                    },
                    months: {
                        names: ["Jannar", "Frar", "Marzu", "April", "Mejju", "Ġunju", "Lulju", "Awissu", "Settembru", "Ottubru", "Novembru", "Diċembru", ""],
                        namesAbbr: ["Jan", "Fra", "Mar", "Apr", "Mej", "Ġun", "Lul", "Awi", "Set", "Ott", "Nov", "Diċ", ""]
                    },
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' ta\\' 'MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' ta\\' 'MMMM yyyy HH:mm",
                        F: "dddd, d' ta\\' 'MMMM yyyy HH:mm:ss",
                        M: "d' ta\\' 'MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "se": ["se", "default", {
            name: "se",
            englishName: "Sami (Northern)",
            nativeName: "davvisámegiella",
            language: "se",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sotnabeaivi", "vuossárga", "maŋŋebárga", "gaskavahkku", "duorastat", "bearjadat", "lávvardat"],
                        namesAbbr: ["sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"],
                        namesShort: ["s", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđajagimánu", "guovvamánu", "njukčamánu", "cuoŋománu", "miessemánu", "geassemánu", "suoidnemánu", "borgemánu", "čakčamánu", "golggotmánu", "skábmamánu", "juovlamánu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ga": ["ga", "default", {
            name: "ga",
            englishName: "Irish",
            nativeName: "Gaeilge",
            language: "ga",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Dé Domhnaigh", "Dé Luain", "Dé Máirt", "Dé Céadaoin", "Déardaoin", "Dé hAoine", "Dé Sathairn"],
                        namesAbbr: ["Domh", "Luan", "Máir", "Céad", "Déar", "Aoi", "Sath"],
                        namesShort: ["Do", "Lu", "Má", "Cé", "De", "Ao", "Sa"]
                    },
                    months: {
                        names: ["Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", "Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig", ""],
                        namesAbbr: ["Ean", "Feabh", "Már", "Aib", "Bealt", "Meith", "Iúil", "Lún", "M.Fómh", "D.Fómh", "Samh", "Noll", ""]
                    },
                    AM: ["r.n.", "r.n.", "R.N."],
                    PM: ["i.n.", "i.n.", "I.N."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ms": ["ms", "default", {
            name: "ms",
            englishName: "Malay",
            nativeName: "Bahasa Melayu",
            language: "ms",
            numberFormat: {
                currency: {
                    decimals: 0,
                    symbol: "RM"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesAbbr: ["Ahad", "Isnin", "Sel", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesShort: ["A", "I", "S", "R", "K", "J", "S"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""],
                        namesAbbr: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogos", "Sept", "Okt", "Nov", "Dis", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM yyyy H:mm",
                        F: "dd MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "kk": ["kk", "default", {
            name: "kk",
            englishName: "Kazakh",
            nativeName: "Қазақ",
            language: "kk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    ",": " ",
                    ".": "-",
                    symbol: "Т"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Жексенбі", "Дүйсенбі", "Сейсенбі", "Сәрсенбі", "Бейсенбі", "Жұма", "Сенбі"],
                        namesAbbr: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"],
                        namesShort: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"]
                    },
                    months: {
                        names: ["қаңтар", "ақпан", "наурыз", "сәуір", "мамыр", "маусым", "шілде", "тамыз", "қыркүйек", "қазан", "қараша", "желтоқсан", ""],
                        namesAbbr: ["Қаң", "Ақп", "Нау", "Сәу", "Мам", "Мау", "Шіл", "Там", "Қыр", "Қаз", "Қар", "Жел", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy 'ж.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'ж.' H:mm",
                        F: "d MMMM yyyy 'ж.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ky": ["ky", "default", {
            name: "ky",
            englishName: "Kyrgyz",
            nativeName: "Кыргыз",
            language: "ky",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": "-",
                    symbol: "сом"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Жекшемби", "Дүйшөмбү", "Шейшемби", "Шаршемби", "Бейшемби", "Жума", "Ишемби"],
                        namesAbbr: ["Жш", "Дш", "Шш", "Шр", "Бш", "Жм", "Иш"],
                        namesShort: ["Жш", "Дш", "Шш", "Шр", "Бш", "Жм", "Иш"]
                    },
                    months: {
                        names: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d'-'MMMM yyyy'-ж.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d'-'MMMM yyyy'-ж.' H:mm",
                        F: "d'-'MMMM yyyy'-ж.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy'-ж.'"
                    }
                }
            }
        }],
    "sw": ["sw", "default", {
            name: "sw",
            englishName: "Kiswahili",
            nativeName: "Kiswahili",
            language: "sw",
            numberFormat: {
                currency: {
                    symbol: "S"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"],
                        namesAbbr: ["Jumap.", "Jumat.", "Juman.", "Jumat.", "Alh.", "Iju.", "Jumam."],
                        namesShort: ["P", "T", "N", "T", "A", "I", "M"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Decemba", ""],
                        namesAbbr: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Dec", ""]
                    }
                }
            }
        }],
    "tk": ["tk", "default", {
            name: "tk",
            englishName: "Turkmen",
            nativeName: "türkmençe",
            language: "tk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "m."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Duşenbe", "Sişenbe", "Çarşenbe", "Penşenbe", "Anna", "Şenbe", "Ýekşenbe"],
                        namesAbbr: ["Db", "Sb", "Çb", "Pb", "An", "Şb", "Ýb"],
                        namesShort: ["D", "S", "Ç", "P", "A", "Ş", "Ý"]
                    },
                    months: {
                        names: ["Ýanwar", "Fewral", "Mart", "Aprel", "Maý", "lýun", "lýul", "Awgust", "Sentýabr", "Oktýabr", "Noýabr", "Dekabr", ""],
                        namesAbbr: ["Ýan", "Few", "Mart", "Apr", "Maý", "lýun", "lýul", "Awg", "Sen", "Okt", "Not", "Dek", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "yyyy 'ý.' MMMM d",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'ý.' MMMM d H:mm",
                        F: "yyyy 'ý.' MMMM d H:mm:ss",
                        Y: "yyyy 'ý.' MMMM"
                    }
                }
            }
        }],
    "uz": ["uz", "default", {
            name: "uz",
            englishName: "Uzbek",
            nativeName: "U'zbek",
            language: "uz",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    decimals: 0,
                    ",": " ",
                    ".": ",",
                    symbol: "so'm"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["yakshanba", "dushanba", "seshanba", "chorshanba", "payshanba", "juma", "shanba"],
                        namesAbbr: ["yak.", "dsh.", "sesh.", "chr.", "psh.", "jm.", "sh."],
                        namesShort: ["ya", "d", "s", "ch", "p", "j", "sh"]
                    },
                    months: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM yyyy",
                        D: "yyyy 'yil' d-MMMM",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'yil' d-MMMM HH:mm",
                        F: "yyyy 'yil' d-MMMM HH:mm:ss",
                        M: "d-MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tt": ["tt", "default", {
            name: "tt",
            englishName: "Tatar",
            nativeName: "Татар",
            language: "tt",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Якшәмбе", "Дүшәмбе", "Сишәмбе", "Чәршәмбе", "Пәнҗешәмбе", "Җомга", "Шимбә"],
                        namesAbbr: ["Якш", "Дүш", "Сиш", "Чәрш", "Пәнҗ", "Җом", "Шим"],
                        namesShort: ["Я", "Д", "С", "Ч", "П", "Җ", "Ш"]
                    },
                    months: {
                        names: ["Гыйнвар", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["Гыйн.", "Фев.", "Мар.", "Апр.", "Май", "Июнь", "Июль", "Авг.", "Сен.", "Окт.", "Нояб.", "Дек.", ""]
                    },
                    monthsGenitive: {
                        names: ["Гыйнварның", "Февральнең", "Мартның", "Апрельнең", "Майның", "Июньнең", "Июльнең", "Августның", "Сентябрьның", "Октябрьның", "Ноябрьның", "Декабрьның", ""],
                        namesAbbr: ["Гыйн.-ның", "Фев.-нең", "Мар.-ның", "Апр.-нең", "Майның", "Июньнең", "Июльнең", "Авг.-ның", "Сен.-ның", "Окт.-ның", "Нояб.-ның", "Дек.-ның", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "bn": ["bn", "default", {
            name: "bn",
            englishName: "Bengali",
            nativeName: "বাংলা",
            language: "bn",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-%n", "%n"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "টা"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    ":": ".",
                    firstDay: 1,
                    days: {
                        names: ["রবিবার", "সোমবার", "মঙ্গলবার", "বুধবার", "বৃহস্পতিবার", "শুক্রবার", "শনিবার"],
                        namesAbbr: ["রবি.", "সোম.", "মঙ্গল.", "বুধ.", "বৃহস্পতি.", "শুক্র.", "শনি."],
                        namesShort: ["র", "স", "ম", "ব", "ব", "শ", "শ"]
                    },
                    months: {
                        names: ["জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""],
                        namesAbbr: ["জানু.", "ফেব্রু.", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগ.", "সেপ্টে.", "অক্টো.", "নভে.", "ডিসে.", ""]
                    },
                    AM: ["পুর্বাহ্ন", "পুর্বাহ্ন", "পুর্বাহ্ন"],
                    PM: ["অপরাহ্ন", "অপরাহ্ন", "অপরাহ্ন"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH.mm",
                        T: "HH.mm.ss",
                        f: "dd MMMM yyyy HH.mm",
                        F: "dd MMMM yyyy HH.mm.ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "pa": ["pa", "default", {
            name: "pa",
            englishName: "Punjabi",
            nativeName: "ਪੰਜਾਬੀ",
            language: "pa",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ਰੁ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ਐਤਵਾਰ", "ਸੋਮਵਾਰ", "ਮੰਗਲਵਾਰ", "ਬੁੱਧਵਾਰ", "ਵੀਰਵਾਰ", "ਸ਼ੁੱਕਰਵਾਰ", "ਸ਼ਨਿੱਚਰਵਾਰ"],
                        namesAbbr: ["ਐਤ.", "ਸੋਮ.", "ਮੰਗਲ.", "ਬੁੱਧ.", "ਵੀਰ.", "ਸ਼ੁਕਰ.", "ਸ਼ਨਿੱਚਰ."],
                        namesShort: ["ਐ", "ਸ", "ਮ", "ਬ", "ਵ", "ਸ਼", "ਸ਼"]
                    },
                    months: {
                        names: ["ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""],
                        namesAbbr: ["ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""]
                    },
                    AM: ["ਸਵੇਰ", "ਸਵੇਰ", "ਸਵੇਰ"],
                    PM: ["ਸ਼ਾਮ", "ਸ਼ਾਮ", "ਸ਼ਾਮ"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy dddd",
                        t: "tt hh:mm",
                        T: "tt hh:mm:ss",
                        f: "dd MMMM yyyy dddd tt hh:mm",
                        F: "dd MMMM yyyy dddd tt hh:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "gu": ["gu", "default", {
            name: "gu",
            englishName: "Gujarati",
            nativeName: "ગુજરાતી",
            language: "gu",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "રૂ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["રવિવાર", "સોમવાર", "મંગળવાર", "બુધવાર", "ગુરુવાર", "શુક્રવાર", "શનિવાર"],
                        namesAbbr: ["રવિ", "સોમ", "મંગળ", "બુધ", "ગુરુ", "શુક્ર", "શનિ"],
                        namesShort: ["ર", "સ", "મ", "બ", "ગ", "શ", "શ"]
                    },
                    months: {
                        names: ["જાન્યુઆરી", "ફેબ્રુઆરી", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટેમ્બર", "ઑક્ટ્બર", "નવેમ્બર", "ડિસેમ્બર", ""],
                        namesAbbr: ["જાન્યુ", "ફેબ્રુ", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટે", "ઑક્ટો", "નવે", "ડિસે", ""]
                    },
                    AM: ["પૂર્વ મધ્યાહ્ન", "પૂર્વ મધ્યાહ્ન", "પૂર્વ મધ્યાહ્ન"],
                    PM: ["ઉત્તર મધ્યાહ્ન", "ઉત્તર મધ્યાહ્ન", "ઉત્તર મધ્યાહ્ન"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "or": ["or", "default", {
            name: "or",
            englishName: "Oriya",
            nativeName: "ଓଡ଼ିଆ",
            language: "or",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ଟ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["ରବିବାର", "ସୋମବାର", "ମଙ୍ଗଳବାର", "ବୁଧବାର", "ଗୁରୁବାର", "ଶୁକ୍ରବାର", "ଶନିବାର"],
                        namesAbbr: ["ରବି.", "ସୋମ.", "ମଙ୍ଗଳ.", "ବୁଧ.", "ଗୁରୁ.", "ଶୁକ୍ର.", "ଶନି."],
                        namesShort: ["ର", "ସୋ", "ମ", "ବୁ", "ଗୁ", "ଶୁ", "ଶ"]
                    },
                    months: {
                        names: ["ଜାନୁୟାରୀ", "ଫ୍ରେବୃୟାରୀ", "ମାର୍ଚ୍ଚ", "ଏପ୍ରିଲ୍‌", "ମେ", "ଜୁନ୍‌", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "(ଡିସେମ୍ବର", ""],
                        namesAbbr: ["ଜାନୁୟାରୀ", "ଫ୍ରେବୃୟାରୀ", "ମାର୍ଚ୍ଚ", "ଏପ୍ରିଲ୍‌", "ମେ", "ଜୁନ୍‌", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "(ଡିସେମ୍ବର", ""]
                    },
                    eras: [{ "name": "ଖ୍ରୀଷ୍ଟାବ୍ଦ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ta": ["ta", "default", {
            name: "ta",
            englishName: "Tamil",
            nativeName: "தமிழ்",
            language: "ta",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ரூ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ஞாயிற்றுக்கிழமை", "திங்கள்கிழமை", "செவ்வாய்கிழமை", "புதன்கிழமை", "வியாழக்கிழமை", "வெள்ளிக்கிழமை", "சனிக்கிழமை"],
                        namesAbbr: ["ஞாயிறு", "திங்கள்", "செவ்வாய்", "புதன்", "வியாழன்", "வெள்ளி", "சனி"],
                        namesShort: ["ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"]
                    },
                    months: {
                        names: ["ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""],
                        namesAbbr: ["ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""]
                    },
                    AM: ["காலை", "காலை", "காலை"],
                    PM: ["மாலை", "மாலை", "மாலை"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "te": ["te", "default", {
            name: "te",
            englishName: "Telugu",
            nativeName: "తెలుగు",
            language: "te",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "రూ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ఆదివారం", "సోమవారం", "మంగళవారం", "బుధవారం", "గురువారం", "శుక్రవారం", "శనివారం"],
                        namesAbbr: ["ఆది.", "సోమ.", "మంగళ.", "బుధ.", "గురు.", "శుక్ర.", "శని."],
                        namesShort: ["ఆ", "సో", "మం", "బు", "గు", "శు", "శ"]
                    },
                    months: {
                        names: ["జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జూలై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""],
                        namesAbbr: ["జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జూలై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""]
                    },
                    AM: ["పూర్వాహ్న", "పూర్వాహ్న", "పూర్వాహ్న"],
                    PM: ["అపరాహ్న", "అపరాహ్న", "అపరాహ్న"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "kn": ["kn", "default", {
            name: "kn",
            englishName: "Kannada",
            nativeName: "ಕನ್ನಡ",
            language: "kn",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ರೂ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ಭಾನುವಾರ", "ಸೋಮವಾರ", "ಮಂಗಳವಾರ", "ಬುಧವಾರ", "ಗುರುವಾರ", "ಶುಕ್ರವಾರ", "ಶನಿವಾರ"],
                        namesAbbr: ["ಭಾನು.", "ಸೋಮ.", "ಮಂಗಳ.", "ಬುಧ.", "ಗುರು.", "ಶುಕ್ರ.", "ಶನಿ."],
                        namesShort: ["ರ", "ಸ", "ಮ", "ಬ", "ಗ", "ಶ", "ಶ"]
                    },
                    months: {
                        names: ["ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಎಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""],
                        namesAbbr: ["ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಎಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""]
                    },
                    AM: ["ಪೂರ್ವಾಹ್ನ", "ಪೂರ್ವಾಹ್ನ", "ಪೂರ್ವಾಹ್ನ"],
                    PM: ["ಅಪರಾಹ್ನ", "ಅಪರಾಹ್ನ", "ಅಪರಾಹ್ನ"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ml": ["ml", "default", {
            name: "ml",
            englishName: "Malayalam",
            nativeName: "മലയാളം",
            language: "ml",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-%n", "%n"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ക"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    ":": ".",
                    firstDay: 1,
                    days: {
                        names: ["ഞായറാഴ്ച", "തിങ്കളാഴ്ച", "ചൊവ്വാഴ്ച", "ബുധനാഴ്ച", "വ്യാഴാഴ്ച", "വെള്ളിയാഴ്ച", "ശനിയാഴ്ച"],
                        namesAbbr: ["ഞായർ.", "തിങ്കൾ.", "ചൊവ്വ.", "ബുധൻ.", "വ്യാഴം.", "വെള്ളി.", "ശനി."],
                        namesShort: ["ഞ", "ത", "ച", "ബ", "വ", "വെ", "ശ"]
                    },
                    months: {
                        names: ["ജനുവരി", "ഫെബ്റുവരി", "മാറ്ച്ച്", "ഏപ്റില്", "മെയ്", "ജൂണ്", "ജൂലൈ", "ഓഗസ്ററ്", "സെപ്ററംബറ്", "ഒക്ടോബറ്", "നവംബറ്", "ഡിസംബറ്", ""],
                        namesAbbr: ["ജനുവരി", "ഫെബ്റുവരി", "മാറ്ച്ച്", "ഏപ്റില്", "മെയ്", "ജൂണ്", "ജൂലൈ", "ഓഗസ്ററ്", "സെപ്ററംബറ്", "ഒക്ടോബറ്", "നവംബറ്", "ഡിസംബറ്", ""]
                    },
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH.mm",
                        T: "HH.mm.ss",
                        f: "dd MMMM yyyy HH.mm",
                        F: "dd MMMM yyyy HH.mm.ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "as": ["as", "default", {
            name: "as",
            englishName: "Assamese",
            nativeName: "অসমীয়া",
            language: "as",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "n$"],
                    groupSizes: [3, 2],
                    symbol: "ট"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["সোমবাৰ", "মঙ্গলবাৰ", "বুধবাৰ", "বৃহস্পতিবাৰ", "শুক্রবাৰ", "শনিবাৰ", "ৰবিবাৰ"],
                        namesAbbr: ["সোম.", "মঙ্গল.", "বুধ.", "বৃহ.", "শুক্র.", "শনি.", "ৰবি."],
                        namesShort: ["সো", "ম", "বু", "বৃ", "শু", "শ", "র"]
                    },
                    months: {
                        names: ["জানুৱাৰী", "ফেব্রুৱাৰী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টেম্বর", "অক্টোবর", "নবেম্বর", "ডিচেম্বর", ""],
                        namesAbbr: ["জানু", "ফেব্রু", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টে", "অক্টো", "নবে", "ডিচে", ""]
                    },
                    AM: ["ৰাতিপু", "ৰাতিপু", "ৰাতিপু"],
                    PM: ["আবেলি", "আবেলি", "আবেলি"],
                    eras: [{ "name": "খ্রীষ্টাব্দ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "yyyy,MMMM dd, dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "yyyy,MMMM dd, dddd tt h:mm",
                        F: "yyyy,MMMM dd, dddd tt h:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM,yy"
                    }
                }
            }
        }],
    "mr": ["mr", "default", {
            name: "mr",
            englishName: "Marathi",
            nativeName: "मराठी",
            language: "mr",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["रविवार", "सोमवार", "मंगळवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["रवि.", "सोम.", "मंगळ.", "बुध.", "गुरु.", "शुक्र.", "शनि."],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""],
                        namesAbbr: ["जाने.", "फेब्रु.", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टें.", "ऑक्टो.", "नोव्हें.", "डिसें.", ""]
                    },
                    AM: ["म.पू.", "म.पू.", "म.पू."],
                    PM: ["म.नं.", "म.नं.", "म.नं."],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "sa": ["sa", "default", {
            name: "sa",
            englishName: "Sanskrit",
            nativeName: "संस्कृत",
            language: "sa",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["रविवासरः", "सोमवासरः", "मङ्गलवासरः", "बुधवासरः", "गुरुवासरः", "शुक्रवासरः", "शनिवासरः"],
                        namesAbbr: ["रविवासरः", "सोमवासरः", "मङ्गलवासरः", "बुधवासरः", "गुरुवासरः", "शुक्रवासरः", "शनिवासरः"],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""],
                        namesAbbr: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""]
                    },
                    AM: ["पूर्वाह्न", "पूर्वाह्न", "पूर्वाह्न"],
                    PM: ["अपराह्न", "अपराह्न", "अपराह्न"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy dddd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy dddd HH:mm",
                        F: "dd MMMM yyyy dddd HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "mn": ["mn", "default", {
            name: "mn",
            englishName: "Mongolian",
            nativeName: "Монгол хэл",
            language: "mn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "₮"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Ням", "Даваа", "Мягмар", "Лхагва", "Пүрэв", "Баасан", "Бямба"],
                        namesAbbr: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"],
                        namesShort: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"]
                    },
                    months: {
                        names: ["1 дүгээр сар", "2 дугаар сар", "3 дугаар сар", "4 дүгээр сар", "5 дугаар сар", "6 дугаар сар", "7 дугаар сар", "8 дугаар сар", "9 дүгээр сар", "10 дугаар сар", "11 дүгээр сар", "12 дугаар сар", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    monthsGenitive: {
                        names: ["1 дүгээр сарын", "2 дугаар сарын", "3 дугаар сарын", "4 дүгээр сарын", "5 дугаар сарын", "6 дугаар сарын", "7 дугаар сарын", "8 дугаар сарын", "9 дүгээр сарын", "10 дугаар сарын", "11 дүгээр сарын", "12 дугаар сарын", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yy.MM.dd",
                        D: "yyyy 'оны' MMMM d",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'оны' MMMM d H:mm",
                        F: "yyyy 'оны' MMMM d H:mm:ss",
                        M: "d MMMM",
                        Y: "yyyy 'он' MMMM"
                    }
                }
            }
        }],
    "bo": ["bo", "default", {
            name: "bo",
            englishName: "Tibetan",
            nativeName: "བོད་ཡིག",
            language: "bo",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["གཟའ་ཉི་མ།", "གཟའ་ཟླ་བ།", "གཟའ་མིག་དམར།", "གཟའ་ལྷག་པ།", "གཟའ་ཕུར་བུ།", "གཟའ་པ་སངས།", "གཟའ་སྤེན་པ།"],
                        namesAbbr: ["ཉི་མ།", "ཟླ་བ།", "མིག་དམར།", "ལྷག་པ།", "ཕུར་བུ།", "པ་སངས།", "སྤེན་པ།"],
                        namesShort: ["༧", "༡", "༢", "༣", "༤", "༥", "༦"]
                    },
                    months: {
                        names: ["སྤྱི་ཟླ་དང་པོ།", "སྤྱི་ཟླ་གཉིས་པ།", "སྤྱི་ཟླ་གསུམ་པ།", "སྤྱི་ཟླ་བཞི་པ།", "སྤྱི་ཟླ་ལྔ་པ།", "སྤྱི་ཟླ་དྲུག་པ།", "སྤྱི་ཟླ་བདུན་པ།", "སྤྱི་ཟླ་བརྒྱད་པ།", "སྤྱི་ཟླ་དགུ་པ།", "སྤྱི་ཟླ་བཅུ་པོ།", "སྤྱི་ཟླ་བཅུ་གཅིག་པ།", "སྤྱི་ཟླ་བཅུ་གཉིས་པ།", ""],
                        namesAbbr: ["ཟླ་ ༡", "ཟླ་ ༢", "ཟླ་ ༣", "ཟླ་ ༤", "ཟླ་ ༥", "ཟླ་ ༦", "ཟླ་ ༧", "ཟླ་ ༨", "ཟླ་ ༩", "ཟླ་ ༡༠", "ཟླ་ ༡༡", "ཟླ་ ༡༢", ""]
                    },
                    AM: ["སྔ་དྲོ", "སྔ་དྲོ", "སྔ་དྲོ"],
                    PM: ["ཕྱི་དྲོ", "ཕྱི་དྲོ", "ཕྱི་དྲོ"],
                    eras: [{ "name": "སྤྱི་ལོ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ལོའི་ཟླ' M'ཚེས' d",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm",
                        F: "yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm:ss",
                        M: "'ཟླ་' M'ཚེས'd",
                        Y: "yyyy.M"
                    }
                }
            }
        }],
    "cy": ["cy", "default", {
            name: "cy",
            englishName: "Welsh",
            nativeName: "Cymraeg",
            language: "cy",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "£"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Dydd Sul", "Dydd Llun", "Dydd Mawrth", "Dydd Mercher", "Dydd Iau", "Dydd Gwener", "Dydd Sadwrn"],
                        namesAbbr: ["Sul", "Llun", "Maw", "Mer", "Iau", "Gwe", "Sad"],
                        namesShort: ["Su", "Ll", "Ma", "Me", "Ia", "Gw", "Sa"]
                    },
                    months: {
                        names: ["Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr", ""],
                        namesAbbr: ["Ion", "Chwe", "Maw", "Ebr", "Mai", "Meh", "Gor", "Aws", "Med", "Hyd", "Tach", "Rhag", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "km": ["km", "default", {
            name: "km",
            englishName: "Khmer",
            nativeName: "ខ្មែរ",
            language: "km",
            numberFormat: {
                pattern: ["- n"],
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    symbol: "៛"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["ថ្ងៃអាទិត្យ", "ថ្ងៃច័ន្ទ", "ថ្ងៃអង្គារ", "ថ្ងៃពុធ", "ថ្ងៃព្រហស្បតិ៍", "ថ្ងៃសុក្រ", "ថ្ងៃសៅរ៍"],
                        namesAbbr: ["អាទិ.", "ច.", "អ.", "ពុ", "ព្រហ.", "សុ.", "ស."],
                        namesShort: ["អា", "ច", "អ", "ពុ", "ព្", "សុ", "ស"]
                    },
                    months: {
                        names: ["មករា", "កុម្ភៈ", "មិនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ", ""],
                        namesAbbr: ["១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩", "១០", "១១", "១២", ""]
                    },
                    AM: ["ព្រឹក", "ព្រឹក", "ព្រឹក"],
                    PM: ["ល្ងាច", "ល្ងាច", "ល្ងាច"],
                    eras: [{ "name": "មុនគ.ស.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "d MMMM yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy H:mm tt",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "'ថ្ងៃទី' dd 'ខែ' MM",
                        Y: "'ខែ' MM 'ឆ្នាំ' yyyy"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ព្រឹក", "ព្រឹក", "ព្រឹក"],
                    PM: ["ល្ងាច", "ល្ងាច", "ល្ងាច"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm tt",
                        F: "dddd, MMMM dd, yyyy HH:mm:ss"
                    }
                }
            }
        }],
    "lo": ["lo", "default", {
            name: "lo",
            englishName: "Lao",
            nativeName: "ລາວ",
            language: "lo",
            numberFormat: {
                pattern: ["(n)"],
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["(n$)", "n$"],
                    groupSizes: [3, 0],
                    symbol: "₭"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["ວັນອາທິດ", "ວັນຈັນ", "ວັນອັງຄານ", "ວັນພຸດ", "ວັນພະຫັດ", "ວັນສຸກ", "ວັນເສົາ"],
                        namesAbbr: ["ອາທິດ", "ຈັນ", "ອັງຄານ", "ພຸດ", "ພະຫັດ", "ສຸກ", "ເສົາ"],
                        namesShort: ["ອ", "ຈ", "ອ", "ພ", "ພ", "ສ", "ເ"]
                    },
                    months: {
                        names: ["ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""],
                        namesAbbr: ["ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""]
                    },
                    AM: ["ເຊົ້າ", "ເຊົ້າ", "ເຊົ້າ"],
                    PM: ["ແລງ", "ແລງ", "ແລງ"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy H:mm tt",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gl": ["gl", "default", {
            name: "gl",
            englishName: "Galician",
            nativeName: "galego",
            language: "gl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "luns", "martes", "mércores", "xoves", "venres", "sábado"],
                        namesAbbr: ["dom", "luns", "mar", "mér", "xov", "ven", "sáb"],
                        namesShort: ["do", "lu", "ma", "mé", "xo", "ve", "sá"]
                    },
                    months: {
                        names: ["xaneiro", "febreiro", "marzo", "abril", "maio", "xuño", "xullo", "agosto", "setembro", "outubro", "novembro", "decembro", ""],
                        namesAbbr: ["xan", "feb", "mar", "abr", "maio", "xuñ", "xull", "ago", "set", "out", "nov", "dec", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "kok": ["kok", "default", {
            name: "kok",
            englishName: "Konkani",
            nativeName: "कोंकणी",
            language: "kok",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["आयतार", "सोमार", "मंगळार", "बुधवार", "बिरेस्तार", "सुक्रार", "शेनवार"],
                        namesAbbr: ["आय.", "सोम.", "मंगळ.", "बुध.", "बिरे.", "सुक्र.", "शेन."],
                        namesShort: ["आ", "स", "म", "ब", "ब", "स", "श"]
                    },
                    months: {
                        names: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोवेम्बर", "डिसेंबर", ""],
                        namesAbbr: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोवेम्बर", "डिसेंबर", ""]
                    },
                    AM: ["म.पू.", "म.पू.", "म.पू."],
                    PM: ["म.नं.", "म.नं.", "म.नं."],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "syr": ["syr", "default", {
            name: "syr",
            englishName: "Syriac",
            nativeName: "ܣܘܪܝܝܐ",
            language: "syr",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ل.س.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["ܚܕ ܒܫܒܐ", "ܬܪܝܢ ܒܫܒܐ", "ܬܠܬܐ ܒܫܒܐ", "ܐܪܒܥܐ ܒܫܒܐ", "ܚܡܫܐ ܒܫܒܐ", "ܥܪܘܒܬܐ", "ܫܒܬܐ"],
                        namesAbbr: ["܏ܐ ܏ܒܫ", "܏ܒ ܏ܒܫ", "܏ܓ ܏ܒܫ", "܏ܕ ܏ܒܫ", "܏ܗ ܏ܒܫ", "܏ܥܪܘܒ", "܏ܫܒ"],
                        namesShort: ["ܐ", "ܒ", "ܓ", "ܕ", "ܗ", "ܥ", "ܫ"]
                    },
                    months: {
                        names: ["ܟܢܘܢ ܐܚܪܝ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝ ܩܕܝܡ", "ܬܫܪܝ ܐܚܪܝ", "ܟܢܘܢ ܩܕܝܡ", ""],
                        namesAbbr: ["܏ܟܢ ܏ܒ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "܏ܬܫ ܏ܐ", "܏ܬܫ ܏ܒ", "܏ܟܢ ܏ܐ", ""]
                    },
                    AM: ["ܩ.ܛ", "ܩ.ܛ", "ܩ.ܛ"],
                    PM: ["ܒ.ܛ", "ܒ.ܛ", "ܒ.ܛ"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "si": ["si", "default", {
            name: "si",
            englishName: "Sinhala",
            nativeName: "සිංහල",
            language: "si",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    symbol: "රු."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ඉරිදා", "සඳුදා", "අඟහරුවාදා", "බදාදා", "බ්‍රහස්පතින්දා", "සිකුරාදා", "සෙනසුරාදා"],
                        namesAbbr: ["ඉරිදා", "සඳුදා", "කුජදා", "බුදදා", "ගුරුදා", "කිවිදා", "ශනිදා"],
                        namesShort: ["ඉ", "ස", "අ", "බ", "බ්‍ර", "සි", "සෙ"]
                    },
                    months: {
                        names: ["ජනවාරි", "පෙබරවාරි", "මාර්තු", "අ‌ප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අ‌ගෝස්තු", "සැප්තැම්බර්", "ඔක්තෝබර්", "නොවැම්බර්", "දෙසැම්බර්", ""],
                        namesAbbr: ["ජන.", "පෙබ.", "මාර්තු.", "අප්‍රේල්.", "මැයි.", "ජූනි.", "ජූලි.", "අගෝ.", "සැප්.", "ඔක්.", "නොවැ.", "දෙසැ.", ""]
                    },
                    AM: ["පෙ.ව.", "පෙ.ව.", "පෙ.ව."],
                    PM: ["ප.ව.", "ප.ව.", "ප.ව."],
                    eras: [{ "name": "ක්‍රි.ව.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy MMMM' මස 'dd' වැනිදා 'dddd",
                        f: "yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm tt",
                        F: "yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm:ss tt",
                        Y: "yyyy MMMM"
                    }
                }
            }
        }],
    "iu": ["iu", "default", {
            name: "iu",
            englishName: "Inuktitut",
            nativeName: "Inuktitut",
            language: "iu",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Naattiinguja", "Naggajjau", "Aippiq", "Pingatsiq", "Sitammiq", "Tallirmiq", "Sivataarvik"],
                        namesAbbr: ["Nat", "Nag", "Aip", "Pi", "Sit", "Tal", "Siv"],
                        namesShort: ["N", "N", "A", "P", "S", "T", "S"]
                    },
                    months: {
                        names: ["Jaannuari", "Viivvuari", "Maatsi", "Iipuri", "Mai", "Juuni", "Julai", "Aaggiisi", "Sitipiri", "Utupiri", "Nuvipiri", "Tisipiri", ""],
                        namesAbbr: ["Jan", "Viv", "Mas", "Ipu", "Mai", "Jun", "Jul", "Agi", "Sii", "Uut", "Nuv", "Tis", ""]
                    },
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "ddd, MMMM dd,yyyy",
                        f: "ddd, MMMM dd,yyyy h:mm tt",
                        F: "ddd, MMMM dd,yyyy h:mm:ss tt"
                    }
                }
            }
        }],
    "am": ["am", "default", {
            name: "am",
            englishName: "Amharic",
            nativeName: "አማርኛ",
            language: "am",
            numberFormat: {
                decimals: 1,
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    decimals: 1,
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "ETB"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["እሑድ", "ሰኞ", "ማክሰኞ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"],
                        namesAbbr: ["እሑድ", "ሰኞ", "ማክሰ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"],
                        namesShort: ["እ", "ሰ", "ማ", "ረ", "ሐ", "ዓ", "ቅ"]
                    },
                    months: {
                        names: ["ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕረል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክተውበር", "ኖቬምበር", "ዲሴምበር", ""],
                        namesAbbr: ["ጃንዩ", "ፌብሩ", "ማርች", "ኤፕረ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክተ", "ኖቬም", "ዲሴም", ""]
                    },
                    AM: ["ጡዋት", "ጡዋት", "ጡዋት"],
                    PM: ["ከሰዓት", "ከሰዓት", "ከሰዓት"],
                    eras: [{ "name": "ዓመተ  ምሕረት", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd '፣' MMMM d 'ቀን' yyyy",
                        f: "dddd '፣' MMMM d 'ቀን' yyyy h:mm tt",
                        F: "dddd '፣' MMMM d 'ቀን' yyyy h:mm:ss tt",
                        M: "MMMM d ቀን",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tzm": ["tzm", "default", {
            name: "tzm",
            englishName: "Tamazight",
            nativeName: "Tamazight",
            language: "tzm",
            numberFormat: {
                pattern: ["n-"],
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    symbol: "DZD"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 6,
                    days: {
                        names: ["Acer", "Arime", "Aram", "Ahad", "Amhadh", "Sem", "Sedh"],
                        namesAbbr: ["Ace", "Ari", "Ara", "Aha", "Amh", "Sem", "Sed"],
                        namesShort: ["Ac", "Ar", "Ar", "Ah", "Am", "Se", "Se"]
                    },
                    months: {
                        names: ["Yenayer", "Furar", "Maghres", "Yebrir", "Mayu", "Yunyu", "Yulyu", "Ghuct", "Cutenber", "Ktuber", "Wambir", "Dujanbir", ""],
                        namesAbbr: ["Yen", "Fur", "Mag", "Yeb", "May", "Yun", "Yul", "Ghu", "Cut", "Ktu", "Wam", "Duj", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ne": ["ne", "default", {
            name: "ne",
            englishName: "Nepali",
            nativeName: "नेपाली",
            language: "ne",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["आइतवार", "सोमवार", "मङ्गलवार", "बुधवार", "बिहीवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["आइत", "सोम", "मङ्गल", "बुध", "बिही", "शुक्र", "शनि"],
                        namesShort: ["आ", "सो", "म", "बु", "बि", "शु", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जून", "जुलाई", "अगस्त", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""],
                        namesAbbr: ["जन", "फेब", "मार्च", "अप्रिल", "मे", "जून", "जुलाई", "अग", "सेप्ट", "अक्ट", "नोभ", "डिस", ""]
                    },
                    AM: ["विहानी", "विहानी", "विहानी"],
                    PM: ["बेलुकी", "बेलुकी", "बेलुकी"],
                    eras: [{ "name": "a.d.", "start": null, "offset": 0 }],
                    patterns: {
                        Y: "MMMM,yyyy"
                    }
                }
            }
        }],
    "fy": ["fy", "default", {
            name: "fy",
            englishName: "Frisian",
            nativeName: "Frysk",
            language: "fy",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["Snein", "Moandei", "Tiisdei", "Woansdei", "Tongersdei", "Freed", "Sneon"],
                        namesAbbr: ["Sn", "Mo", "Ti", "Wo", "To", "Fr", "Sn"],
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    months: {
                        names: ["jannewaris", "febrewaris", "maart", "april", "maaie", "juny", "july", "augustus", "septimber", "oktober", "novimber", "desimber", ""],
                        namesAbbr: ["jann", "febr", "mrt", "apr", "maaie", "jun", "jul", "aug", "sept", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d-M-yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd d MMMM yyyy H:mm",
                        F: "dddd d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ps": ["ps", "default", {
            name: "ps",
            englishName: "Pashto",
            nativeName: "پښتو",
            language: "ps",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                ",": "،",
                ".": ",",
                percent: {
                    pattern: ["%n-", "%n"],
                    ",": "،",
                    ".": ","
                },
                currency: {
                    pattern: ["$n-", "$n"],
                    ",": "٬",
                    ".": "٫",
                    symbol: "؋"
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګا ښزمرى", "زمرى", "وږى", "تله", "لړم", "لنڈ ۍ", "مرغومى", ""],
                        namesAbbr: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګا ښ", "زمرى", "وږى", "تله", "لړم", "لنڈ ۍ", "مرغومى", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "ل.ه", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy, dd, MMMM, dddd",
                        f: "yyyy, dd, MMMM, dddd h:mm tt",
                        F: "yyyy, dd, MMMM, dddd h:mm:ss tt",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fil": ["fil", "default", {
            name: "fil",
            englishName: "Filipino",
            nativeName: "Filipino",
            language: "fil",
            numberFormat: {
                currency: {
                    symbol: "PhP"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Linggo", "Lunes", "Martes", "Mierkoles", "Huebes", "Biernes", "Sabado"],
                        namesAbbr: ["Lin", "Lun", "Mar", "Mier", "Hueb", "Bier", "Saba"],
                        namesShort: ["L", "L", "M", "M", "H", "B", "S"]
                    },
                    months: {
                        names: ["Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Septyembre", "Oktubre", "Nobyembre", "Disyembre", ""],
                        namesAbbr: ["En", "Peb", "Mar", "Abr", "Mayo", "Hun", "Hul", "Agos", "Sept", "Okt", "Nob", "Dis", ""]
                    },
                    eras: [{ "name": "Anno Domini", "start": null, "offset": 0 }],
                }
            }
        }],
    "dv": ["dv", "default", {
            name: "dv",
            englishName: "Divehi",
            nativeName: "ދިވެހިބަސް",
            language: "dv",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["n $-", "n $"],
                    symbol: "ރ."
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    days: {
                        names: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesAbbr: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesShort: ["އާ", "ހޯ", "އަ", "ބު", "ބު", "ހު", "ހޮ"]
                    },
                    months: {
                        names: ["މުޙައްރަމް", "ޞަފަރު", "ރަބީޢުލްއައްވަލް", "ރަބީޢުލްއާޚިރު", "ޖުމާދަލްއޫލާ", "ޖުމާދަލްއާޚިރާ", "ރަޖަބް", "ޝަޢްބާން", "ރަމަޟާން", "ޝައްވާލް", "ޛުލްޤަޢިދާ", "ޛުލްޙިއްޖާ", ""],
                        namesAbbr: ["މުޙައްރަމް", "ޞަފަރު", "ރަބީޢުލްއައްވަލް", "ރަބީޢުލްއާޚިރު", "ޖުމާދަލްއޫލާ", "ޖުމާދަލްއާޚިރާ", "ރަޖަބް", "ޝަޢްބާން", "ރަމަޟާން", "ޝައްވާލް", "ޛުލްޤަޢިދާ", "ޛުލްޙިއްޖާ", ""]
                    },
                    AM: ["މކ", "މކ", "މކ"],
                    PM: ["މފ", "މފ", "މފ"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd/MM/yyyy HH:mm",
                        F: "dd/MM/yyyy HH:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    days: {
                        names: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesAbbr: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesShort: ["އާ", "ހޯ", "އަ", "ބު", "ބު", "ހު", "ހޮ"]
                    },
                    months: {
                        names: ["ޖަނަވަރީ", "ފެބްރުއަރީ", "މާޗް", "އޭޕްރިލް", "މެއި", "ޖޫން", "ޖުލައި", "އޯގަސްޓް", "ސެޕްޓެމްބަރ", "އޮކްޓޯބަރ", "ނޮވެމްބަރ", "ޑިސެމްބަރ", ""],
                        namesAbbr: ["ޖަނަވަރީ", "ފެބްރުއަރީ", "މާޗް", "އޭޕްރިލް", "މެއި", "ޖޫން", "ޖުލައި", "އޯގަސްޓް", "ސެޕްޓެމްބަރ", "އޮކްޓޯބަރ", "ނޮވެމްބަރ", "ޑިސެމްބަރ", ""]
                    },
                    AM: ["މކ", "މކ", "މކ"],
                    PM: ["މފ", "މފ", "މފ"],
                    eras: [{ "name": "މީލާދީ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yy",
                        D: "ddd, yyyy MMMM dd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "ddd, yyyy MMMM dd HH:mm",
                        F: "ddd, yyyy MMMM dd HH:mm:ss",
                        Y: "yyyy, MMMM"
                    }
                }
            }
        }],
    "ha": ["ha", "default", {
            name: "ha",
            englishName: "Hausa",
            nativeName: "Hausa",
            language: "ha",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Lahadi", "Litinin", "Talata", "Laraba", "Alhamis", "Juma'a", "Asabar"],
                        namesAbbr: ["Lah", "Lit", "Tal", "Lar", "Alh", "Jum", "Asa"],
                        namesShort: ["L", "L", "T", "L", "A", "J", "A"]
                    },
                    months: {
                        names: ["Januwaru", "Febreru", "Maris", "Afrilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktocba", "Nuwamba", "Disamba", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Afr", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""]
                    },
                    AM: ["Safe", "safe", "SAFE"],
                    PM: ["Yamma", "yamma", "YAMMA"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "yo": ["yo", "default", {
            name: "yo",
            englishName: "Yoruba",
            nativeName: "Yoruba",
            language: "yo",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Aiku", "Aje", "Isegun", "Ojo'ru", "Ojo'bo", "Eti", "Abameta"],
                        namesAbbr: ["Aik", "Aje", "Ise", "Ojo", "Ojo", "Eti", "Aba"],
                        namesShort: ["A", "A", "I", "O", "O", "E", "A"]
                    },
                    months: {
                        names: ["Osu kinni", "Osu keji", "Osu keta", "Osu kerin", "Osu karun", "Osu kefa", "Osu keje", "Osu kejo", "Osu kesan", "Osu kewa", "Osu kokanla", "Osu keresi", ""],
                        namesAbbr: ["kin.", "kej.", "ket.", "ker.", "kar.", "kef.", "kej.", "kej.", "kes.", "kew.", "kok.", "ker.", ""]
                    },
                    AM: ["Owuro", "owuro", "OWURO"],
                    PM: ["Ale", "ale", "ALE"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "quz": ["quz", "default", {
            name: "quz",
            englishName: "Quechua",
            nativeName: "runasimi",
            language: "quz",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "$b"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["intichaw", "killachaw", "atipachaw", "quyllurchaw", "Ch' askachaw", "Illapachaw", "k'uychichaw"],
                        namesAbbr: ["int", "kil", "ati", "quy", "Ch'", "Ill", "k'u"],
                        namesShort: ["d", "k", "a", "m", "h", "b", "k"]
                    },
                    months: {
                        names: ["Qulla puquy", "Hatun puquy", "Pauqar waray", "ayriwa", "Aymuray", "Inti raymi", "Anta Sitwa", "Qhapaq Sitwa", "Uma raymi", "Kantaray", "Ayamarq'a", "Kapaq Raymi", ""],
                        namesAbbr: ["Qul", "Hat", "Pau", "ayr", "Aym", "Int", "Ant", "Qha", "Uma", "Kan", "Aya", "Kap", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "nso": ["nso", "default", {
            name: "nso",
            englishName: "Sesotho sa Leboa",
            nativeName: "Sesotho sa Leboa",
            language: "nso",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Lamorena", "Mošupologo", "Labobedi", "Laboraro", "Labone", "Labohlano", "Mokibelo"],
                        namesAbbr: ["Lam", "Moš", "Lbb", "Lbr", "Lbn", "Lbh", "Mok"],
                        namesShort: ["L", "M", "L", "L", "L", "L", "M"]
                    },
                    months: {
                        names: ["Pherekgong", "Hlakola", "Mopitlo", "Moranang", "Mosegamanye", "Ngoatobošego", "Phuphu", "Phato", "Lewedi", "Diphalana", "Dibatsela", "Manthole", ""],
                        namesAbbr: ["Pher", "Hlak", "Mop", "Mor", "Mos", "Ngwat", "Phup", "Phat", "Lew", "Dip", "Dib", "Man", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ba": ["ba", "default", {
            name: "ba",
            englishName: "Bashkir",
            nativeName: "Башҡорт",
            language: "ba",
            numberFormat: {
                ",": " ",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ",",
                    symbol: "һ."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Йәкшәмбе", "Дүшәмбе", "Шишәмбе", "Шаршамбы", "Кесаҙна", "Йома", "Шәмбе"],
                        namesAbbr: ["Йш", "Дш", "Шш", "Шр", "Кс", "Йм", "Шб"],
                        namesShort: ["Йш", "Дш", "Шш", "Шр", "Кс", "Йм", "Шб"]
                    },
                    months: {
                        names: ["ғинуар", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""],
                        namesAbbr: ["ғин", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d MMMM yyyy 'й'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'й' H:mm",
                        F: "d MMMM yyyy 'й' H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "lb": ["lb", "default", {
            name: "lb",
            englishName: "Luxembourgish",
            nativeName: "Lëtzebuergesch",
            language: "lb",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sonndeg", "Méindeg", "Dënschdeg", "Mëttwoch", "Donneschdeg", "Freideg", "Samschdeg"],
                        namesAbbr: ["Son", "Méi", "Dën", "Mët", "Don", "Fre", "Sam"],
                        namesShort: ["So", "Mé", "Dë", "Më", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "Mäerz", "Abrëll", "Mee", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mäe", "Abr", "Mee", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "kl": ["kl", "default", {
            name: "kl",
            englishName: "Greenlandic",
            nativeName: "kalaallisut",
            language: "kl",
            numberFormat: {
                ",": ".",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 0],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["sapaat", "ataasinngorneq", "marlunngorneq", "pingasunngorneq", "sisamanngorneq", "tallimanngorneq", "arfininngorneq"],
                        namesAbbr: ["sap", "ata", "mar", "ping", "sis", "tal", "arf"],
                        namesShort: ["sa", "at", "ma", "pi", "si", "ta", "ar"]
                    },
                    months: {
                        names: ["januari", "februari", "martsi", "apriili", "maaji", "juni", "juli", "aggusti", "septembari", "oktobari", "novembari", "decembari", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ig": ["ig", "default", {
            name: "ig",
            englishName: "Igbo",
            nativeName: "Igbo",
            language: "ig",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Aiku", "Aje", "Isegun", "Ojo'ru", "Ojo'bo", "Eti", "Abameta"],
                        namesAbbr: ["Aik", "Aje", "Ise", "Ojo", "Ojo", "Eti", "Aba"],
                        namesShort: ["A", "A", "I", "O", "O", "E", "A"]
                    },
                    months: {
                        names: ["Onwa mbu", "Onwa ibua", "Onwa ato", "Onwa ano", "Onwa ise", "Onwa isi", "Onwa asa", "Onwa asato", "Onwa itolu", "Onwa iri", "Onwa iri n'ofu", "Onwa iri n'ibua", ""],
                        namesAbbr: ["mbu.", "ibu.", "ato.", "ano.", "ise", "isi", "asa", "asa.", "ito.", "iri.", "n'of.", "n'ib.", ""]
                    },
                    AM: ["Ututu", "ututu", "UTUTU"],
                    PM: ["Efifie", "efifie", "EFIFIE"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "ii": ["ii", "default", {
            name: "ii",
            englishName: "Yi",
            nativeName: "ꆈꌠꁱꂷ",
            language: "ii",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["ꑭꆏꑍ", "ꆏꊂ꒔", "ꆏꊂꑍ", "ꆏꊂꌕ", "ꆏꊂꇖ", "ꆏꊂꉬ", "ꆏꊂꃘ"],
                        namesAbbr: ["ꑭꆏ", "ꆏ꒔", "ꆏꑍ", "ꆏꌕ", "ꆏꇖ", "ꆏꉬ", "ꆏꃘ"],
                        namesShort: ["ꆏ", "꒔", "ꑍ", "ꌕ", "ꇖ", "ꉬ", "ꃘ"]
                    },
                    months: {
                        names: ["ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""],
                        namesAbbr: ["ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""]
                    },
                    AM: ["ꂵꆪꈌꈐ", "ꂵꆪꈌꈐ", "ꂵꆪꈌꈐ"],
                    PM: ["ꂵꆪꈌꉈ", "ꂵꆪꈌꉈ", "ꂵꆪꈌꉈ"],
                    eras: [{ "name": "ꇬꑼ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ꈎ' M'ꆪ' d'ꑍ'",
                        t: "tt h:mm",
                        T: "H:mm:ss",
                        f: "yyyy'ꈎ' M'ꆪ' d'ꑍ' tt h:mm",
                        F: "yyyy'ꈎ' M'ꆪ' d'ꑍ' H:mm:ss",
                        M: "M'ꆪ' d'ꑍ'",
                        Y: "yyyy'ꈎ' M'ꆪ'"
                    }
                }
            }
        }],
    "arn": ["arn", "default", {
            name: "arn",
            englishName: "Mapudungun",
            nativeName: "Mapudungun",
            language: "arn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "moh": ["moh", "default", {
            name: "moh",
            englishName: "Mohawk",
            nativeName: "Kanien'kéha",
            language: "moh",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Awentatokentì:ke", "Awentataón'ke", "Ratironhia'kehronòn:ke", "Soséhne", "Okaristiiáhne", "Ronwaia'tanentaktonhne", "Entákta"],
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    months: {
                        names: ["Tsothohrkó:Wa", "Enniska", "Enniskó:Wa", "Onerahtókha", "Onerahtohkó:Wa", "Ohiari:Ha", "Ohiarihkó:Wa", "Seskéha", "Seskehkó:Wa", "Kenténha", "Kentenhkó:Wa", "Tsothóhrha", ""]
                    }
                }
            }
        }],
    "br": ["br", "default", {
            name: "br",
            englishName: "Breton",
            nativeName: "brezhoneg",
            language: "br",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sul", "Lun", "Meurzh", "Merc'her", "Yaou", "Gwener", "Sadorn"],
                        namesAbbr: ["Sul", "Lun", "Meu.", "Mer.", "Yaou", "Gwe.", "Sad."],
                        namesShort: ["Su", "Lu", "Mz", "Mc", "Ya", "Gw", "Sa"]
                    },
                    months: {
                        names: ["Genver", "C'hwevrer", "Meurzh", "Ebrel", "Mae", "Mezheven", "Gouere", "Eost", "Gwengolo", "Here", "Du", "Kerzu", ""],
                        namesAbbr: ["Gen.", "C'hwe.", "Meur.", "Ebr.", "Mae", "Mezh.", "Goue.", "Eost", "Gwen.", "Here", "Du", "Kzu", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "g. J.-K.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ug": ["ug", "default", {
            name: "ug",
            englishName: "Uyghur",
            nativeName: "ئۇيغۇرچە",
            language: "ug",
            isRTL: true,
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["يەكشەنبە", "دۈشەنبە", "سەيشەنبە", "چارشەنبە", "پەيشەنبە", "جۈمە", "شەنبە"],
                        namesAbbr: ["يە", "دۈ", "سە", "چا", "پە", "جۈ", "شە"],
                        namesShort: ["ي", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["1-ئاي", "2-ئاي", "3-ئاي", "4-ئاي", "5-ئاي", "6-ئاي", "7-ئاي", "8-ئاي", "9-ئاي", "10-ئاي", "11-ئاي", "12-ئاي", ""],
                        namesAbbr: ["1-ئاي", "2-ئاي", "3-ئاي", "4-ئاي", "5-ئاي", "6-ئاي", "7-ئاي", "8-ئاي", "9-ئاي", "10-ئاي", "11-ئاي", "12-ئاي", ""]
                    },
                    AM: ["چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن"],
                    PM: ["چۈشتىن كېيىن", "چۈشتىن كېيىن", "چۈشتىن كېيىن"],
                    eras: [{ "name": "مىلادى", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-M-d",
                        D: "yyyy-'يىلى' MMMM d-'كۈنى،'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy-'يىلى' MMMM d-'كۈنى،' H:mm",
                        F: "yyyy-'يىلى' MMMM d-'كۈنى،' H:mm:ss",
                        M: "MMMM d'-كۈنى'",
                        Y: "yyyy-'يىلى' MMMM"
                    }
                }
            }
        }],
    "mi": ["mi", "default", {
            name: "mi",
            englishName: "Maori",
            nativeName: "Reo Māori",
            language: "mi",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Rātapu", "Rāhina", "Rātū", "Rāapa", "Rāpare", "Rāmere", "Rāhoroi"],
                        namesAbbr: ["Ta", "Hi", "Tū", "Apa", "Pa", "Me", "Ho"],
                        namesShort: ["Ta", "Hi", "Tū", "Aa", "Pa", "Me", "Ho"]
                    },
                    months: {
                        names: ["Kohi-tātea", "Hui-tanguru", "Poutū-te-rangi", "Paenga-whāwhā", "Haratua", "Pipiri", "Hōngongoi", "Here-turi-kōkā", "Mahuru", "Whiringa-ā-nuku", "Whiringa-ā-rangi", "Hakihea", ""],
                        namesAbbr: ["Kohi", "Hui", "Pou", "Pae", "Hara", "Pipi", "Hōngo", "Here", "Mahu", "Nuku", "Rangi", "Haki", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd MMMM, yyyy",
                        f: "dddd, dd MMMM, yyyy h:mm tt",
                        F: "dddd, dd MMMM, yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM, yy"
                    }
                }
            }
        }],
    "oc": ["oc", "default", {
            name: "oc",
            englishName: "Occitan",
            nativeName: "Occitan",
            language: "oc",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimenge", "diluns", "dimars", "dimècres", "dijòus", "divendres", "dissabte"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mèc.", "jòu.", "ven.", "sab."],
                        namesShort: ["di", "lu", "ma", "mè", "jò", "ve", "sa"]
                    },
                    months: {
                        names: ["genier", "febrier", "març", "abril", "mai", "junh", "julh", "agost", "setembre", "octobre", "novembre", "desembre", ""],
                        namesAbbr: ["gen.", "feb.", "mar.", "abr.", "mai.", "jun.", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""]
                    },
                    monthsGenitive: {
                        names: ["de genier", "de febrier", "de març", "d'abril", "de mai", "de junh", "de julh", "d'agost", "de setembre", "d'octobre", "de novembre", "de desembre", ""],
                        namesAbbr: ["gen.", "feb.", "mar.", "abr.", "mai.", "jun.", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "après Jèsus-Crist", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd,' lo 'd MMMM' de 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd,' lo 'd MMMM' de 'yyyy HH:mm",
                        F: "dddd,' lo 'd MMMM' de 'yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "co": ["co", "default", {
            name: "co",
            englishName: "Corsican",
            nativeName: "Corsu",
            language: "co",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dumenica", "luni", "marti", "mercuri", "ghjovi", "venderi", "sabbatu"],
                        namesAbbr: ["dum.", "lun.", "mar.", "mer.", "ghj.", "ven.", "sab."],
                        namesShort: ["du", "lu", "ma", "me", "gh", "ve", "sa"]
                    },
                    months: {
                        names: ["ghjennaghju", "ferraghju", "marzu", "aprile", "maghju", "ghjunghju", "lugliu", "aostu", "settembre", "ottobre", "nuvembre", "dicembre", ""],
                        namesAbbr: ["ghje", "ferr", "marz", "apri", "magh", "ghju", "lugl", "aost", "sett", "otto", "nuve", "dice", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "dopu J-C", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gsw": ["gsw", "default", {
            name: "gsw",
            englishName: "Alsatian",
            nativeName: "Elsässisch",
            language: "gsw",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sundàà", "Mondàà", "Dienschdàà", "Mittwuch", "Dunnerschdàà", "Fridàà", "Sàmschdàà"],
                        namesAbbr: ["Su.", "Mo.", "Di.", "Mi.", "Du.", "Fr.", "Sà."],
                        namesShort: ["Su", "Mo", "Di", "Mi", "Du", "Fr", "Sà"]
                    },
                    months: {
                        names: ["Jänner", "Feverje", "März", "Àpril", "Mai", "Jüni", "Jüli", "Augscht", "September", "Oktower", "Nowember", "Dezember", ""],
                        namesAbbr: ["Jän.", "Fev.", "März", "Apr.", "Mai", "Jüni", "Jüli", "Aug.", "Sept.", "Okt.", "Now.", "Dez.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "Vor J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sah": ["sah", "default", {
            name: "sah",
            englishName: "Yakut",
            nativeName: "саха",
            language: "sah",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "с."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["баскыһыанньа", "бэнидиэнньик", "оптуорунньук", "сэрэдэ", "чэппиэр", "бээтинсэ", "субуота"],
                        namesAbbr: ["Бс", "Бн", "Оп", "Ср", "Чп", "Бт", "Сб"],
                        namesShort: ["Бс", "Бн", "Оп", "Ср", "Чп", "Бт", "Сб"]
                    },
                    months: {
                        names: ["Тохсунньу", "Олунньу", "Кулун тутар", "Муус устар", "Ыам ыйа", "Бэс ыйа", "От ыйа", "Атырдьах ыйа", "Балаҕан ыйа", "Алтынньы", "Сэтинньи", "Ахсынньы", ""],
                        namesAbbr: ["тхс", "олн", "кул", "мст", "ыам", "бэс", "отй", "атр", "блҕ", "алт", "стн", "ахс", ""]
                    },
                    monthsGenitive: {
                        names: ["тохсунньу", "олунньу", "кулун тутар", "муус устар", "ыам ыйын", "бэс ыйын", "от ыйын", "атырдьах ыйын", "балаҕан ыйын", "алтынньы", "сэтинньи", "ахсынньы", ""],
                        namesAbbr: ["тхс", "олн", "кул", "мст", "ыам", "бэс", "отй", "атр", "блҕ", "алт", "стн", "ахс", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "MM.dd.yyyy",
                        D: "MMMM d yyyy 'с.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d yyyy 'с.' H:mm",
                        F: "MMMM d yyyy 'с.' H:mm:ss",
                        Y: "MMMM yyyy 'с.'"
                    }
                }
            }
        }],
    "qut": ["qut", "default", {
            name: "qut",
            englishName: "K'iche",
            nativeName: "K'iche",
            language: "qut",
            numberFormat: {
                currency: {
                    symbol: "Q"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["juq'ij", "kaq'ij", "oxq'ij", "kajq'ij", "joq'ij", "waqq'ij", "wuqq'ij"],
                        namesAbbr: ["juq", "kaq", "oxq", "kajq", "joq", "waqq", "wuqq"],
                        namesShort: ["ju", "ka", "ox", "ka", "jo", "wa", "wu"]
                    },
                    months: {
                        names: ["nab'e ik'", "ukab' ik'", "rox ik'", "ukaj ik'", "uro' ik'", "uwaq ik'", "uwuq ik'", "uwajxaq ik'", "ub'elej ik'", "ulaj ik'", "ujulaj ik'", "ukab'laj ik'", ""],
                        namesAbbr: ["nab'e", "ukab", "rox", "ukaj", "uro", "uwaq", "uwuq", "uwajxaq", "ub'elej", "ulaj", "ujulaj", "ukab'laj", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "rw": ["rw", "default", {
            name: "rw",
            englishName: "Kinyarwanda",
            nativeName: "Kinyarwanda",
            language: "rw",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "RWF"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Ku wa mbere", "Ku wa kabiri", "Ku wa gatatu", "Ku wa kane", "Ku wa gatanu", "Ku wa gatandatu", "Ku cyumweru"],
                        namesAbbr: ["mbe.", "kab.", "gat.", "kan.", "gat.", "gat.", "cyu."],
                        namesShort: ["mb", "ka", "ga", "ka", "ga", "ga", "cy"]
                    },
                    months: {
                        names: ["Mutarama", "Gashyantare", "Werurwe", "Mata", "Gicurasi", "Kamena", "Nyakanga", "Kanama", "Nzeli", "Ukwakira", "Ugushyingo", "Ukuboza", ""],
                        namesAbbr: ["Mut", "Gas", "Wer", "Mat", "Gic", "Kam", "Nya", "Kan", "Nze", "Ukwa", "Ugu", "Uku", ""]
                    },
                    AM: ["saa moya z.m.", "saa moya z.m.", "SAA MOYA Z.M."],
                    PM: ["saa moya z.n.", "saa moya z.n.", "SAA MOYA Z.N."],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                }
            }
        }],
    "wo": ["wo", "default", {
            name: "wo",
            englishName: "Wolof",
            nativeName: "Wolof",
            language: "wo",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "XOF"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "prs": ["prs", "default", {
            name: "prs",
            englishName: "Dari",
            nativeName: "درى",
            language: "prs",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["%n-", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$n-", "$n"],
                    symbol: "؋"
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    firstDay: 5,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    firstDay: 5,
                    days: {
                        names: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګاښ", "زمرى", "وږى", "تله", "لړم", "ليندۍ", "مرغومى", ""],
                        namesAbbr: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګاښ", "زمرى", "وږى", "تله", "لړم", "ليندۍ", "مرغومى", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "ل.ه", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy, dd, MMMM, dddd",
                        f: "yyyy, dd, MMMM, dddd h:mm tt",
                        F: "yyyy, dd, MMMM, dddd h:mm:ss tt",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gd": ["gd", "default", {
            name: "gd",
            englishName: "Scottish Gaelic",
            nativeName: "Gàidhlig",
            language: "gd",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "£"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Didòmhnaich", "Diluain", "Dimàirt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne"],
                        namesAbbr: ["Dòm", "Lua", "Mài", "Cia", "Ard", "Hao", "Sat"],
                        namesShort: ["D", "L", "M", "C", "A", "H", "S"]
                    },
                    months: {
                        names: ["Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd", ""],
                        namesAbbr: ["Fao", "Gea", "Màr", "Gib", "Cèi", "Ògm", "Iuc", "Lùn", "Sul", "Dàm", "Sam", "Dùb", ""]
                    },
                    AM: ["m", "m", "M"],
                    PM: ["f", "f", "F"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-SA": ["ar-SA", "default", {
            name: "ar-SA",
            englishName: "Arabic (Saudi Arabia)",
            nativeName: "العربية (المملكة العربية السعودية)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ر.س.‏"
                }
            },
            calendars: {
                standard: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /*  remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "bg-BG": ["bg-BG", "default", {
            name: "bg-BG",
            englishName: "Bulgarian (Bulgaria)",
            nativeName: "български (България)",
            language: "bg",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "лв."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["неделя", "понеделник", "вторник", "сряда", "четвъртък", "петък", "събота"],
                        namesAbbr: ["нед", "пон", "вт", "ср", "четв", "пет", "съб"],
                        namesShort: ["н", "п", "в", "с", "ч", "п", "с"]
                    },
                    months: {
                        names: ["януари", "февруари", "март", "април", "май", "юни", "юли", "август", "септември", "октомври", "ноември", "декември", ""],
                        namesAbbr: ["ян", "февр", "март", "апр", "май", "юни", "юли", "авг", "септ", "окт", "ноември", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "след новата ера", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy 'г.'",
                        D: "dd MMMM yyyy 'г.'",
                        t: "HH:mm 'ч.'",
                        T: "HH:mm:ss 'ч.'",
                        f: "dd MMMM yyyy 'г.' HH:mm 'ч.'",
                        F: "dd MMMM yyyy 'г.' HH:mm:ss 'ч.'",
                        M: "dd MMMM",
                        Y: "MMMM yyyy 'г.'"
                    }
                }
            }
        }],
    "ca-ES": ["ca-ES", "default", {
            name: "ca-ES",
            englishName: "Catalan (Catalan)",
            nativeName: "català (català)",
            language: "ca",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"],
                        namesAbbr: ["dg.", "dl.", "dt.", "dc.", "dj.", "dv.", "ds."],
                        namesShort: ["dg", "dl", "dt", "dc", "dj", "dv", "ds"]
                    },
                    months: {
                        names: ["gener", "febrer", "març", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre", ""],
                        namesAbbr: ["gen", "feb", "març", "abr", "maig", "juny", "jul", "ag", "set", "oct", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' / 'MMMM' / 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' / 'MMMM' / 'yyyy HH:mm",
                        F: "dddd, d' / 'MMMM' / 'yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' / 'yyyy"
                    }
                }
            }
        }],
    "zh-TW": ["zh-TW", "default", {
            name: "zh-TW",
            englishName: "Chinese (Traditional, Taiwan)",
            nativeName: "中文(台灣)",
            language: "zh-CHT",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "NT$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "西元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "tt hh:mm",
                        T: "tt hh:mm:ss",
                        f: "yyyy'年'M'月'd'日' tt hh:mm",
                        F: "yyyy'年'M'月'd'日' tt hh:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                },
                Taiwan: {
                    name: "Taiwan",
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "", "start": null, "offset": 1911 }],
                    twoDigitYearMax: 99,
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "tt hh:mm",
                        T: "tt hh:mm:ss",
                        f: "yyyy'年'M'月'd'日' tt hh:mm",
                        F: "yyyy'年'M'月'd'日' tt hh:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "cs-CZ": ["cs-CZ", "default", {
            name: "cs-CZ",
            englishName: "Czech (Czech Republic)",
            nativeName: "čeština (Česká republika)",
            language: "cs",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Kč"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["neděle", "pondělí", "úterý", "středa", "čtvrtek", "pátek", "sobota"],
                        namesAbbr: ["ne", "po", "út", "st", "čt", "pá", "so"],
                        namesShort: ["ne", "po", "út", "st", "čt", "pá", "so"]
                    },
                    months: {
                        names: ["leden", "únor", "březen", "duben", "květen", "červen", "červenec", "srpen", "září", "říjen", "listopad", "prosinec", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    monthsGenitive: {
                        names: ["ledna", "února", "března", "dubna", "května", "června", "července", "srpna", "září", "října", "listopadu", "prosince", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["dop.", "dop.", "DOP."],
                    PM: ["odp.", "odp.", "ODP."],
                    eras: [{ "name": "n. l.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "da-DK": ["da-DK", "default", {
            name: "da-DK",
            englishName: "Danish (Denmark)",
            nativeName: "dansk (Danmark)",
            language: "da",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                        namesAbbr: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
                        namesShort: ["sø", "ma", "ti", "on", "to", "fr", "lø"]
                    },
                    months: {
                        names: ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "de-DE": ["de-DE", "default", {
            name: "de-DE",
            englishName: "German (Germany)",
            nativeName: "Deutsch (Deutschland)",
            language: "de",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "el-GR": ["el-GR", "default", {
            name: "el-GR",
            englishName: "Greek (Greece)",
            nativeName: "Ελληνικά (Ελλάδα)",
            language: "el",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"],
                        namesAbbr: ["Κυρ", "Δευ", "Τρι", "Τετ", "Πεμ", "Παρ", "Σαβ"],
                        namesShort: ["Κυ", "Δε", "Τρ", "Τε", "Πε", "Πα", "Σά"]
                    },
                    months: {
                        names: ["Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος", ""],
                        namesAbbr: ["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαϊ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ", ""]
                    },
                    monthsGenitive: {
                        names: ["Ιανουαρίου", "Φεβρουαρίου", "Μαρτίου", "Απριλίου", "Μαΐου", "Ιουνίου", "Ιουλίου", "Αυγούστου", "Σεπτεμβρίου", "Οκτωβρίου", "Νοεμβρίου", "Δεκεμβρίου", ""],
                        namesAbbr: ["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαϊ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ", ""]
                    },
                    AM: ["πμ", "πμ", "ΠΜ"],
                    PM: ["μμ", "μμ", "ΜΜ"],
                    eras: [{ "name": "μ.Χ.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd, d MMMM yyyy",
                        f: "dddd, d MMMM yyyy h:mm tt",
                        F: "dddd, d MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "en-US": ["en-US", "default", {
            englishName: "English (United States)"
        }],
    "fi-FI": ["fi-FI", "default", {
            name: "fi-FI",
            englishName: "Finnish (Finland)",
            nativeName: "suomi (Suomi)",
            language: "fi",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"],
                        namesAbbr: ["su", "ma", "ti", "ke", "to", "pe", "la"],
                        namesShort: ["su", "ma", "ti", "ke", "to", "pe", "la"]
                    },
                    months: {
                        names: ["tammikuu", "helmikuu", "maaliskuu", "huhtikuu", "toukokuu", "kesäkuu", "heinäkuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu", ""],
                        namesAbbr: ["tammi", "helmi", "maalis", "huhti", "touko", "kesä", "heinä", "elo", "syys", "loka", "marras", "joulu", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM'ta 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM'ta 'yyyy H:mm",
                        F: "d. MMMM'ta 'yyyy H:mm:ss",
                        M: "d. MMMM'ta'",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fr-FR": ["fr-FR", "default", {
            name: "fr-FR",
            englishName: "French (France)",
            nativeName: "français (France)",
            language: "fr",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "he-IL": ["he-IL", "default", {
            name: "he-IL",
            englishName: "Hebrew (Israel)",
            nativeName: "עברית (ישראל)",
            language: "he",
            isRTL: true,
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "₪"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "שבת"],
                        namesAbbr: ["יום א", "יום ב", "יום ג", "יום ד", "יום ה", "יום ו", "שבת"],
                        namesShort: ["א", "ב", "ג", "ד", "ה", "ו", "ש"]
                    },
                    months: {
                        names: ["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר", ""],
                        namesAbbr: ["ינו", "פבר", "מרץ", "אפר", "מאי", "יונ", "יול", "אוג", "ספט", "אוק", "נוב", "דצמ", ""]
                    },
                    eras: [{ "name": "לספירה", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd dd MMMM yyyy HH:mm",
                        F: "dddd dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                },
                Hebrew: {
                    name: "Hebrew",
                    "/": " ",
                    days: {
                        names: ["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "שבת"],
                        namesAbbr: ["א", "ב", "ג", "ד", "ה", "ו", "ש"],
                        namesShort: ["א", "ב", "ג", "ד", "ה", "ו", "ש"]
                    },
                    months: {
                        names: ["תשרי", "חשון", "כסלו", "טבת", "שבט", "אדר", "אדר ב", "ניסן", "אייר", "סיון", "תמוז", "אב", "אלול"],
                        namesAbbr: ["תשרי", "חשון", "כסלו", "טבת", "שבט", "אדר", "אדר ב", "ניסן", "אייר", "סיון", "תמוז", "אב", "אלול"]
                    },
                    eras: [{ "name": "C.E.", "start": null, "offset": 0 }],
                    twoDigitYearMax: 5790,
                    patterns: {
                        d: "dd MMMM yyyy",
                        D: "dddd dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd dd MMMM yyyy HH:mm",
                        F: "dddd dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hu-HU": ["hu-HU", "default", {
            name: "hu-HU",
            englishName: "Hungarian (Hungary)",
            nativeName: "magyar (Magyarország)",
            language: "hu",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Ft"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["vasárnap", "hétfő", "kedd", "szerda", "csütörtök", "péntek", "szombat"],
                        namesAbbr: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
                        namesShort: ["V", "H", "K", "Sze", "Cs", "P", "Szo"]
                    },
                    months: {
                        names: ["január", "február", "március", "április", "május", "június", "július", "augusztus", "szeptember", "október", "november", "december", ""],
                        namesAbbr: ["jan.", "febr.", "márc.", "ápr.", "máj.", "jún.", "júl.", "aug.", "szept.", "okt.", "nov.", "dec.", ""]
                    },
                    AM: ["de.", "de.", "DE."],
                    PM: ["du.", "du.", "DU."],
                    eras: [{ "name": "i.sz.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy.MM.dd.",
                        D: "yyyy. MMMM d.",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy. MMMM d. H:mm",
                        F: "yyyy. MMMM d. H:mm:ss",
                        M: "MMMM d.",
                        Y: "yyyy. MMMM"
                    }
                }
            }
        }],
    "is-IS": ["is-IS", "default", {
            name: "is-IS",
            englishName: "Icelandic (Iceland)",
            nativeName: "íslenska (Ísland)",
            language: "is",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    decimals: 0,
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sunnudagur", "mánudagur", "þriðjudagur", "miðvikudagur", "fimmtudagur", "föstudagur", "laugardagur"],
                        namesAbbr: ["sun.", "mán.", "þri.", "mið.", "fim.", "fös.", "lau."],
                        namesShort: ["su", "má", "þr", "mi", "fi", "fö", "la"]
                    },
                    months: {
                        names: ["janúar", "febrúar", "mars", "apríl", "maí", "júní", "júlí", "ágúst", "september", "október", "nóvember", "desember", ""],
                        namesAbbr: ["jan.", "feb.", "mar.", "apr.", "maí", "jún.", "júl.", "ágú.", "sep.", "okt.", "nóv.", "des.", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "it-IT": ["it-IT", "default", {
            name: "it-IT",
            englishName: "Italian (Italy)",
            nativeName: "italiano (Italia)",
            language: "it",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"],
                        namesAbbr: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
                        namesShort: ["do", "lu", "ma", "me", "gi", "ve", "sa"]
                    },
                    months: {
                        names: ["gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""],
                        namesAbbr: ["gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ja-JP": ["ja-JP", "default", {
            name: "ja-JP",
            englishName: "Japanese (Japan)",
            nativeName: "日本語 (日本)",
            language: "ja",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    decimals: 0,
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
                        namesAbbr: ["日", "月", "火", "水", "木", "金", "土"],
                        namesShort: ["日", "月", "火", "水", "木", "金", "土"]
                    },
                    months: {
                        names: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["午前", "午前", "午前"],
                    PM: ["午後", "午後", "午後"],
                    eras: [{ "name": "西暦", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                },
                Japanese: {
                    name: "Japanese",
                    days: {
                        names: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
                        namesAbbr: ["日", "月", "火", "水", "木", "金", "土"],
                        namesShort: ["日", "月", "火", "水", "木", "金", "土"]
                    },
                    months: {
                        names: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["午前", "午前", "午前"],
                    PM: ["午後", "午後", "午後"],
                    eras: [{ "name": "平成", "start": null, "offset": 1867 }, { "name": "昭和", "start": -1812153600000, "offset": 1911 }, { "name": "大正", "start": -1357603200000, "offset": 1925 }, { "name": "明治", "start": 60022080000, "offset": 1988 }],
                    twoDigitYearMax: 99,
                    patterns: {
                        d: "gg y/M/d",
                        D: "gg y'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "gg y'年'M'月'd'日' H:mm",
                        F: "gg y'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "gg y'年'M'月'"
                    }
                }
            }
        }],
    "ko-KR": ["ko-KR", "default", {
            name: "ko-KR",
            englishName: "Korean (Korea)",
            nativeName: "한국어 (대한민국)",
            language: "ko",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    decimals: 0,
                    symbol: "₩"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
                        namesAbbr: ["일", "월", "화", "수", "목", "금", "토"],
                        namesShort: ["일", "월", "화", "수", "목", "금", "토"]
                    },
                    months: {
                        names: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["오전", "오전", "오전"],
                    PM: ["오후", "오후", "오후"],
                    eras: [{ "name": "서기", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy'년' M'월' d'일' dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "yyyy'년' M'월' d'일' dddd tt h:mm",
                        F: "yyyy'년' M'월' d'일' dddd tt h:mm:ss",
                        M: "M'월' d'일'",
                        Y: "yyyy'년' M'월'"
                    }
                },
                Korean: {
                    name: "Korean",
                    "/": "-",
                    days: {
                        names: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
                        namesAbbr: ["일", "월", "화", "수", "목", "금", "토"],
                        namesShort: ["일", "월", "화", "수", "목", "금", "토"]
                    },
                    months: {
                        names: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["오전", "오전", "오전"],
                    PM: ["오후", "오후", "오후"],
                    eras: [{ "name": "단기", "start": null, "offset": -2333 }],
                    twoDigitYearMax: 4362,
                    patterns: {
                        d: "gg yyyy-MM-dd",
                        D: "gg yyyy'년' M'월' d'일' dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "gg yyyy'년' M'월' d'일' dddd tt h:mm",
                        F: "gg yyyy'년' M'월' d'일' dddd tt h:mm:ss",
                        M: "M'월' d'일'",
                        Y: "gg yyyy'년' M'월'"
                    }
                }
            }
        }],
    "nl-NL": ["nl-NL", "default", {
            name: "nl-NL",
            englishName: "Dutch (Netherlands)",
            nativeName: "Nederlands (Nederland)",
            language: "nl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"],
                        namesAbbr: ["zo", "ma", "di", "wo", "do", "vr", "za"],
                        namesShort: ["zo", "ma", "di", "wo", "do", "vr", "za"]
                    },
                    months: {
                        names: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d-M-yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd d MMMM yyyy H:mm",
                        F: "dddd d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "nb-NO": ["nb-NO", "default", {
            name: "nb-NO",
            englishName: "Norwegian, Bokmål (Norway)",
            nativeName: "norsk, bokmål (Norge)",
            language: "nb",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                        namesAbbr: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
                        namesShort: ["sø", "ma", "ti", "on", "to", "fr", "lø"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "pl-PL": ["pl-PL", "default", {
            name: "pl-PL",
            englishName: "Polish (Poland)",
            nativeName: "polski (Polska)",
            language: "pl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "zł"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["niedziela", "poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota"],
                        namesAbbr: ["N", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
                        namesShort: ["N", "Pn", "Wt", "Śr", "Cz", "Pt", "So"]
                    },
                    months: {
                        names: ["styczeń", "luty", "marzec", "kwiecień", "maj", "czerwiec", "lipiec", "sierpień", "wrzesień", "październik", "listopad", "grudzień", ""],
                        namesAbbr: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""]
                    },
                    monthsGenitive: {
                        names: ["stycznia", "lutego", "marca", "kwietnia", "maja", "czerwca", "lipca", "sierpnia", "września", "października", "listopada", "grudnia", ""],
                        namesAbbr: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "pt-BR": ["pt-BR", "default", {
            name: "pt-BR",
            englishName: "Portuguese (Brazil)",
            nativeName: "Português (Brasil)",
            language: "pt",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "R$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"],
                        namesAbbr: ["dom", "seg", "ter", "qua", "qui", "sex", "sáb"],
                        namesShort: ["D", "S", "T", "Q", "Q", "S", "S"]
                    },
                    months: {
                        names: ["janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""],
                        namesAbbr: ["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' de 'MMMM' de 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' de 'MMMM' de 'yyyy HH:mm",
                        F: "dddd, d' de 'MMMM' de 'yyyy HH:mm:ss",
                        M: "dd' de 'MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "rm-CH": ["rm-CH", "default", {
            name: "rm-CH",
            englishName: "Romansh (Switzerland)",
            nativeName: "Rumantsch (Svizra)",
            language: "rm",
            numberFormat: {
                ",": "'",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "fr."
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dumengia", "glindesdi", "mardi", "mesemna", "gievgia", "venderdi", "sonda"],
                        namesAbbr: ["du", "gli", "ma", "me", "gie", "ve", "so"],
                        namesShort: ["du", "gli", "ma", "me", "gie", "ve", "so"]
                    },
                    months: {
                        names: ["schaner", "favrer", "mars", "avrigl", "matg", "zercladur", "fanadur", "avust", "settember", "october", "november", "december", ""],
                        namesAbbr: ["schan", "favr", "mars", "avr", "matg", "zercl", "fan", "avust", "sett", "oct", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "s. Cr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d MMMM yyyy HH:mm",
                        F: "dddd, d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ro-RO": ["ro-RO", "default", {
            name: "ro-RO",
            englishName: "Romanian (Romania)",
            nativeName: "română (România)",
            language: "ro",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "lei"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["duminică", "luni", "marţi", "miercuri", "joi", "vineri", "sâmbătă"],
                        namesAbbr: ["D", "L", "Ma", "Mi", "J", "V", "S"],
                        namesShort: ["D", "L", "Ma", "Mi", "J", "V", "S"]
                    },
                    months: {
                        names: ["ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie", ""],
                        namesAbbr: ["ian.", "feb.", "mar.", "apr.", "mai.", "iun.", "iul.", "aug.", "sep.", "oct.", "nov.", "dec.", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ru-RU": ["ru-RU", "default", {
            name: "ru-RU",
            englishName: "Russian (Russia)",
            nativeName: "русский (Россия)",
            language: "ru",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"],
                        namesAbbr: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                        namesShort: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"]
                    },
                    months: {
                        names: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    monthsGenitive: {
                        names: ["января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря", ""],
                        namesAbbr: ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy 'г.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'г.' H:mm",
                        F: "d MMMM yyyy 'г.' H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hr-HR": ["hr-HR", "default", {
            name: "hr-HR",
            englishName: "Croatian (Croatia)",
            nativeName: "hrvatski (Hrvatska)",
            language: "hr",
            numberFormat: {
                pattern: ["- n"],
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kn"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["siječanj", "veljača", "ožujak", "travanj", "svibanj", "lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    monthsGenitive: {
                        names: ["siječnja", "veljače", "ožujka", "travnja", "svibnja", "lipnja", "srpnja", "kolovoza", "rujna", "listopada", "studenog", "prosinca", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy.",
                        D: "d. MMMM yyyy.",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy. H:mm",
                        F: "d. MMMM yyyy. H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "sk-SK": ["sk-SK", "default", {
            name: "sk-SK",
            englishName: "Slovak (Slovakia)",
            nativeName: "slovenčina (Slovenská republika)",
            language: "sk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["nedeľa", "pondelok", "utorok", "streda", "štvrtok", "piatok", "sobota"],
                        namesAbbr: ["ne", "po", "ut", "st", "št", "pi", "so"],
                        namesShort: ["ne", "po", "ut", "st", "št", "pi", "so"]
                    },
                    months: {
                        names: ["január", "február", "marec", "apríl", "máj", "jún", "júl", "august", "september", "október", "november", "december", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    monthsGenitive: {
                        names: ["januára", "februára", "marca", "apríla", "mája", "júna", "júla", "augusta", "septembra", "októbra", "novembra", "decembra", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. l.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sq-AL": ["sq-AL", "default", {
            name: "sq-AL",
            englishName: "Albanian (Albania)",
            nativeName: "shqipe (Shqipëria)",
            language: "sq",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": ".",
                    ".": ",",
                    symbol: "Lek"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["e diel", "e hënë", "e martë", "e mërkurë", "e enjte", "e premte", "e shtunë"],
                        namesAbbr: ["Die", "Hën", "Mar", "Mër", "Enj", "Pre", "Sht"],
                        namesShort: ["Di", "Hë", "Ma", "Më", "En", "Pr", "Sh"]
                    },
                    months: {
                        names: ["janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nëntor", "dhjetor", ""],
                        namesAbbr: ["Jan", "Shk", "Mar", "Pri", "Maj", "Qer", "Kor", "Gsh", "Sht", "Tet", "Nën", "Dhj", ""]
                    },
                    AM: ["PD", "pd", "PD"],
                    PM: ["MD", "md", "MD"],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy-MM-dd",
                        t: "h:mm.tt",
                        T: "h:mm:ss.tt",
                        f: "yyyy-MM-dd h:mm.tt",
                        F: "yyyy-MM-dd h:mm:ss.tt",
                        Y: "yyyy-MM"
                    }
                }
            }
        }],
    "sv-SE": ["sv-SE", "default", {
            name: "sv-SE",
            englishName: "Swedish (Sweden)",
            nativeName: "svenska (Sverige)",
            language: "sv",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"],
                        namesAbbr: ["sö", "må", "ti", "on", "to", "fr", "lö"],
                        namesShort: ["sö", "må", "ti", "on", "to", "fr", "lö"]
                    },
                    months: {
                        names: ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "'den 'd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "'den 'd MMMM yyyy HH:mm",
                        F: "'den 'd MMMM yyyy HH:mm:ss",
                        M: "'den 'd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "th-TH": ["th-TH", "default", {
            name: "th-TH",
            englishName: "Thai (Thailand)",
            nativeName: "ไทย (ไทย)",
            language: "th",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "฿"
                }
            },
            calendars: {
                standard: {
                    name: "ThaiBuddhist",
                    firstDay: 1,
                    days: {
                        names: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"],
                        namesAbbr: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
                        namesShort: ["อ", "จ", "อ", "พ", "พ", "ศ", "ส"]
                    },
                    months: {
                        names: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""],
                        namesAbbr: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""]
                    },
                    eras: [{ "name": "พ.ศ.", "start": null, "offset": -543 }],
                    twoDigitYearMax: 2572,
                    patterns: {
                        d: "d/M/yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 1,
                    days: {
                        names: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"],
                        namesAbbr: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
                        namesShort: ["อ", "จ", "อ", "พ", "พ", "ศ", "ส"]
                    },
                    months: {
                        names: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""],
                        namesAbbr: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "'วัน'dddd'ที่' d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "'วัน'dddd'ที่' d MMMM yyyy H:mm",
                        F: "'วัน'dddd'ที่' d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tr-TR": ["tr-TR", "default", {
            name: "tr-TR",
            englishName: "Turkish (Turkey)",
            nativeName: "Türkçe (Türkiye)",
            language: "tr",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "TL"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"],
                        namesAbbr: ["Paz", "Pzt", "Sal", "Çar", "Per", "Cum", "Cmt"],
                        namesShort: ["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"]
                    },
                    months: {
                        names: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık", ""],
                        namesAbbr: ["Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dd MMMM yyyy dddd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy dddd HH:mm",
                        F: "dd MMMM yyyy dddd HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ur-PK": ["ur-PK", "default", {
            name: "ur-PK",
            englishName: "Urdu (Islamic Republic of Pakistan)",
            nativeName: "اُردو (پاکستان)",
            language: "ur",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["$n-", "$n"],
                    symbol: "Rs"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"],
                        namesAbbr: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"],
                        namesShort: ["ا", "پ", "م", "ب", "ج", "ج", "ه"]
                    },
                    months: {
                        names: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""],
                        namesAbbr: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""]
                    },
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        f: "dd MMMM, yyyy h:mm tt",
                        F: "dd MMMM, yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                }
            }
        }],
    "id-ID": ["id-ID", "default", {
            name: "id-ID",
            englishName: "Indonesian (Indonesia)",
            nativeName: "Bahasa Indonesia (Indonesia)",
            language: "id",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    decimals: 0,
                    ",": ".",
                    ".": ",",
                    symbol: "Rp"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"],
                        namesAbbr: ["Minggu", "Sen", "Sel", "Rabu", "Kamis", "Jumat", "Sabtu"],
                        namesShort: ["M", "S", "S", "R", "K", "J", "S"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "Nopember", "Desember", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agust", "Sep", "Okt", "Nop", "Des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM yyyy H:mm",
                        F: "dd MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "uk-UA": ["uk-UA", "default", {
            name: "uk-UA",
            englishName: "Ukrainian (Ukraine)",
            nativeName: "українська (Україна)",
            language: "uk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "₴"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["неділя", "понеділок", "вівторок", "середа", "четвер", "п'ятниця", "субота"],
                        namesAbbr: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                        namesShort: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"]
                    },
                    months: {
                        names: ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень", ""],
                        namesAbbr: ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру", ""]
                    },
                    monthsGenitive: {
                        names: ["січня", "лютого", "березня", "квітня", "травня", "червня", "липня", "серпня", "вересня", "жовтня", "листопада", "грудня", ""],
                        namesAbbr: ["січ", "лют", "бер", "кві", "тра", "чер", "лип", "сер", "вер", "жов", "лис", "гру", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy' р.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy' р.' H:mm",
                        F: "d MMMM yyyy' р.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy' р.'"
                    }
                }
            }
        }],
    "be-BY": ["be-BY", "default", {
            name: "be-BY",
            englishName: "Belarusian (Belarus)",
            nativeName: "Беларускі (Беларусь)",
            language: "be",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["нядзеля", "панядзелак", "аўторак", "серада", "чацвер", "пятніца", "субота"],
                        namesAbbr: ["нд", "пн", "аў", "ср", "чц", "пт", "сб"],
                        namesShort: ["нд", "пн", "аў", "ср", "чц", "пт", "сб"]
                    },
                    months: {
                        names: ["Студзень", "Люты", "Сакавік", "Красавік", "Май", "Чэрвень", "Ліпень", "Жнівень", "Верасень", "Кастрычнік", "Лістапад", "Снежань", ""],
                        namesAbbr: ["Сту", "Лют", "Сак", "Кра", "Май", "Чэр", "Ліп", "Жні", "Вер", "Кас", "Ліс", "Сне", ""]
                    },
                    monthsGenitive: {
                        names: ["студзеня", "лютага", "сакавіка", "красавіка", "мая", "чэрвеня", "ліпеня", "жніўня", "верасня", "кастрычніка", "лістапада", "снежня", ""],
                        namesAbbr: ["Сту", "Лют", "Сак", "Кра", "Май", "Чэр", "Ліп", "Жні", "Вер", "Кас", "Ліс", "Сне", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sl-SI": ["sl-SI", "default", {
            name: "sl-SI",
            englishName: "Slovenian (Slovenia)",
            nativeName: "slovenski (Slovenija)",
            language: "sl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljek", "torek", "sreda", "četrtek", "petek", "sobota"],
                        namesAbbr: ["ned", "pon", "tor", "sre", "čet", "pet", "sob"],
                        namesShort: ["ne", "po", "to", "sr", "če", "pe", "so"]
                    },
                    months: {
                        names: ["januar", "februar", "marec", "april", "maj", "junij", "julij", "avgust", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "et-EE": ["et-EE", "default", {
            name: "et-EE",
            englishName: "Estonian (Estonia)",
            nativeName: "eesti (Eesti)",
            language: "et",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pühapäev", "esmaspäev", "teisipäev", "kolmapäev", "neljapäev", "reede", "laupäev"],
                        namesAbbr: ["P", "E", "T", "K", "N", "R", "L"],
                        namesShort: ["P", "E", "T", "K", "N", "R", "L"]
                    },
                    months: {
                        names: ["jaanuar", "veebruar", "märts", "aprill", "mai", "juuni", "juuli", "august", "september", "oktoober", "november", "detsember", ""],
                        namesAbbr: ["jaan", "veebr", "märts", "apr", "mai", "juuni", "juuli", "aug", "sept", "okt", "nov", "dets", ""]
                    },
                    AM: ["EL", "el", "EL"],
                    PM: ["PL", "pl", "PL"],
                    patterns: {
                        d: "d.MM.yyyy",
                        D: "d. MMMM yyyy'. a.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy'. a.' H:mm",
                        F: "d. MMMM yyyy'. a.' H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy'. a.'"
                    }
                }
            }
        }],
    "lv-LV": ["lv-LV", "default", {
            name: "lv-LV",
            englishName: "Latvian (Latvia)",
            nativeName: "latviešu (Latvija)",
            language: "lv",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "Ls"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["svētdiena", "pirmdiena", "otrdiena", "trešdiena", "ceturtdiena", "piektdiena", "sestdiena"],
                        namesAbbr: ["sv", "pr", "ot", "tr", "ce", "pk", "se"],
                        namesShort: ["sv", "pr", "ot", "tr", "ce", "pk", "se"]
                    },
                    months: {
                        names: ["janvāris", "februāris", "marts", "aprīlis", "maijs", "jūnijs", "jūlijs", "augusts", "septembris", "oktobris", "novembris", "decembris", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jūn", "jūl", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["janvārī", "februārī", "martā", "aprīlī", "maijā", "jūnijā", "jūlijā", "augustā", "septembrī", "oktobrī", "novembrī", "decembrī", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jūn", "jūl", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy.MM.dd.",
                        D: "dddd, yyyy'. gada 'd. MMMM",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, yyyy'. gada 'd. MMMM H:mm",
                        F: "dddd, yyyy'. gada 'd. MMMM H:mm:ss",
                        M: "d. MMMM",
                        Y: "yyyy. MMMM"
                    }
                }
            }
        }],
    "lt-LT": ["lt-LT", "default", {
            name: "lt-LT",
            englishName: "Lithuanian (Lithuania)",
            nativeName: "lietuvių (Lietuva)",
            language: "lt",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Lt"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sekmadienis", "pirmadienis", "antradienis", "trečiadienis", "ketvirtadienis", "penktadienis", "šeštadienis"],
                        namesAbbr: ["Sk", "Pr", "An", "Tr", "Kt", "Pn", "Št"],
                        namesShort: ["S", "P", "A", "T", "K", "Pn", "Š"]
                    },
                    months: {
                        names: ["sausis", "vasaris", "kovas", "balandis", "gegužė", "birželis", "liepa", "rugpjūtis", "rugsėjis", "spalis", "lapkritis", "gruodis", ""],
                        namesAbbr: ["Sau", "Vas", "Kov", "Bal", "Geg", "Bir", "Lie", "Rgp", "Rgs", "Spl", "Lap", "Grd", ""]
                    },
                    monthsGenitive: {
                        names: ["sausio", "vasario", "kovo", "balandžio", "gegužės", "birželio", "liepos", "rugpjūčio", "rugsėjo", "spalio", "lapkričio", "gruodžio", ""],
                        namesAbbr: ["Sau", "Vas", "Kov", "Bal", "Geg", "Bir", "Lie", "Rgp", "Rgs", "Spl", "Lap", "Grd", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy.MM.dd",
                        D: "yyyy 'm.' MMMM d 'd.'",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'm.' MMMM d 'd.' HH:mm",
                        F: "yyyy 'm.' MMMM d 'd.' HH:mm:ss",
                        M: "MMMM d 'd.'",
                        Y: "yyyy 'm.' MMMM"
                    }
                }
            }
        }],
    "tg-Cyrl-TJ": ["tg-Cyrl-TJ", "default", {
            name: "tg-Cyrl-TJ",
            englishName: "Tajik (Cyrillic, Tajikistan)",
            nativeName: "Тоҷикӣ (Тоҷикистон)",
            language: "tg-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ";",
                    symbol: "т.р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    days: {
                        names: ["Яш", "Душанбе", "Сешанбе", "Чоршанбе", "Панҷшанбе", "Ҷумъа", "Шанбе"],
                        namesAbbr: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"],
                        namesShort: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"]
                    },
                    months: {
                        names: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["январи", "феврали", "марти", "апрели", "маи", "июни", "июли", "августи", "сентябри", "октябри", "ноябри", "декабри", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fa-IR": ["fa-IR", "default", {
            name: "fa-IR",
            englishName: "Persian",
            nativeName: "فارسى (ایران)",
            language: "fa",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    ".": "/",
                    symbol: "ريال"
                }
            },
            calendars: {
                standard: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["يكشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["يكشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["ژانويه", "فوريه", "مارس", "آوريل", "مى", "ژوئن", "ژوئيه", "اوت", "سپتامبر", "اُكتبر", "نوامبر", "دسامبر", ""],
                        namesAbbr: ["ژانويه", "فوريه", "مارس", "آوريل", "مى", "ژوئن", "ژوئيه", "اوت", "سپتامبر", "اُكتبر", "نوامبر", "دسامبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "yyyy/MM/dd",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "yyyy/MM/dd hh:mm tt",
                        F: "yyyy/MM/dd hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "vi-VN": ["vi-VN", "default", {
            name: "vi-VN",
            englishName: "Vietnamese (Vietnam)",
            nativeName: "Tiếng Việt (Việt Nam)",
            language: "vi",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "₫"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"],
                        namesAbbr: ["CN", "Hai", "Ba", "Tư", "Năm", "Sáu", "Bảy"],
                        namesShort: ["C", "H", "B", "T", "N", "S", "B"]
                    },
                    months: {
                        names: ["Tháng Giêng", "Tháng Hai", "Tháng Ba", "Tháng Tư", "Tháng Năm", "Tháng Sáu", "Tháng Bảy", "Tháng Tám", "Tháng Chín", "Tháng Mười", "Tháng Mười Một", "Tháng Mười Hai", ""],
                        namesAbbr: ["Thg1", "Thg2", "Thg3", "Thg4", "Thg5", "Thg6", "Thg7", "Thg8", "Thg9", "Thg10", "Thg11", "Thg12", ""]
                    },
                    AM: ["SA", "sa", "SA"],
                    PM: ["CH", "ch", "CH"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        f: "dd MMMM yyyy h:mm tt",
                        F: "dd MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hy-AM": ["hy-AM", "default", {
            name: "hy-AM",
            englishName: "Armenian (Armenia)",
            nativeName: "Հայերեն (Հայաստան)",
            language: "hy",
            numberFormat: {
                currency: {
                    pattern: ["-n $", "n $"],
                    symbol: "դր."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Կիրակի", "Երկուշաբթի", "Երեքշաբթի", "Չորեքշաբթի", "Հինգշաբթի", "ՈՒրբաթ", "Շաբաթ"],
                        namesAbbr: ["Կիր", "Երկ", "Երք", "Չրք", "Հնգ", "ՈՒր", "Շբթ"],
                        namesShort: ["Կ", "Ե", "Ե", "Չ", "Հ", "Ո", "Շ"]
                    },
                    months: {
                        names: ["Հունվար", "Փետրվար", "Մարտ", "Ապրիլ", "Մայիս", "Հունիս", "Հուլիս", "Օգոստոս", "Սեպտեմբեր", "Հոկտեմբեր", "Նոյեմբեր", "Դեկտեմբեր", ""],
                        namesAbbr: ["ՀՆՎ", "ՓՏՎ", "ՄՐՏ", "ԱՊՐ", "ՄՅՍ", "ՀՆՍ", "ՀԼՍ", "ՕԳՍ", "ՍԵՊ", "ՀՈԿ", "ՆՈՅ", "ԴԵԿ", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM, yyyy H:mm",
                        F: "d MMMM, yyyy H:mm:ss",
                        M: "d MMMM"
                    }
                }
            }
        }],
    "az-Latn-AZ": ["az-Latn-AZ", "default", {
            name: "az-Latn-AZ",
            englishName: "Azeri (Latin, Azerbaijan)",
            nativeName: "Azərbaycan­ılı (Azərbaycan)",
            language: "az-Latn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "man."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Bazar", "Bazar ertəsi", "Çərşənbə axşamı", "Çərşənbə", "Cümə axşamı", "Cümə", "Şənbə"],
                        namesAbbr: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"],
                        namesShort: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"]
                    },
                    months: {
                        names: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "İyun", "İyul", "Avgust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    monthsGenitive: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "eu-ES": ["eu-ES", "default", {
            name: "eu-ES",
            englishName: "Basque (Basque)",
            nativeName: "euskara (euskara)",
            language: "eu",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["igandea", "astelehena", "asteartea", "asteazkena", "osteguna", "ostirala", "larunbata"],
                        namesAbbr: ["ig.", "al.", "as.", "az.", "og.", "or.", "lr."],
                        namesShort: ["ig", "al", "as", "az", "og", "or", "lr"]
                    },
                    months: {
                        names: ["urtarrila", "otsaila", "martxoa", "apirila", "maiatza", "ekaina", "uztaila", "abuztua", "iraila", "urria", "azaroa", "abendua", ""],
                        namesAbbr: ["urt.", "ots.", "mar.", "api.", "mai.", "eka.", "uzt.", "abu.", "ira.", "urr.", "aza.", "abe.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dddd, yyyy.'eko' MMMM'k 'd",
                        t: "HH:mm",
                        T: "H:mm:ss",
                        f: "dddd, yyyy.'eko' MMMM'k 'd HH:mm",
                        F: "dddd, yyyy.'eko' MMMM'k 'd H:mm:ss",
                        Y: "yyyy.'eko' MMMM"
                    }
                }
            }
        }],
    "hsb-DE": ["hsb-DE", "default", {
            name: "hsb-DE",
            englishName: "Upper Sorbian (Germany)",
            nativeName: "hornjoserbšćina (Němska)",
            language: "hsb",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["njedźela", "póndźela", "wutora", "srjeda", "štwórtk", "pjatk", "sobota"],
                        namesAbbr: ["nje", "pón", "wut", "srj", "štw", "pja", "sob"],
                        namesShort: ["n", "p", "w", "s", "š", "p", "s"]
                    },
                    months: {
                        names: ["januar", "februar", "měrc", "apryl", "meja", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "mej", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["januara", "februara", "měrca", "apryla", "meje", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "mej", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "po Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "dddd, 'dnja' d. MMMM yyyy",
                        t: "H.mm 'hodź.'",
                        T: "H:mm:ss",
                        f: "dddd, 'dnja' d. MMMM yyyy H.mm 'hodź.'",
                        F: "dddd, 'dnja' d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "mk-MK": ["mk-MK", "default", {
            name: "mk-MK",
            englishName: "Macedonian (Former Yugoslav Republic of Macedonia)",
            nativeName: "македонски јазик (Македонија)",
            language: "mk",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "ден."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недела", "понеделник", "вторник", "среда", "четврток", "петок", "сабота"],
                        namesAbbr: ["нед", "пон", "втр", "срд", "чет", "пет", "саб"],
                        namesShort: ["не", "по", "вт", "ср", "че", "пе", "са"]
                    },
                    months: {
                        names: ["јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември", ""],
                        namesAbbr: ["јан", "фев", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "ное", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, dd MMMM yyyy HH:mm",
                        F: "dddd, dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tn-ZA": ["tn-ZA", "default", {
            name: "tn-ZA",
            englishName: "Setswana (South Africa)",
            nativeName: "Setswana (Aforika Borwa)",
            language: "tn",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Latshipi", "Mosupologo", "Labobedi", "Laboraro", "Labone", "Labotlhano", "Lamatlhatso"],
                        namesAbbr: ["Ltp.", "Mos.", "Lbd.", "Lbr.", "Lbn.", "Lbt.", "Lmt."],
                        namesShort: ["Lp", "Ms", "Lb", "Lr", "Ln", "Lt", "Lm"]
                    },
                    months: {
                        names: ["Ferikgong", "Tlhakole", "Mopitloe", "Moranang", "Motsheganong", "Seetebosigo", "Phukwi", "Phatwe", "Lwetse", "Diphalane", "Ngwanatsele", "Sedimothole", ""],
                        namesAbbr: ["Fer.", "Tlhak.", "Mop.", "Mor.", "Motsh.", "Seet.", "Phukw.", "Phatw.", "Lwets.", "Diph.", "Ngwan.", "Sed.", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "xh-ZA": ["xh-ZA", "default", {
            name: "xh-ZA",
            englishName: "isiXhosa (South Africa)",
            nativeName: "isiXhosa (uMzantsi Afrika)",
            language: "xh",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["iCawa", "uMvulo", "uLwesibini", "uLwesithathu", "uLwesine", "uLwesihlanu", "uMgqibelo"],
                        namesShort: ["Ca", "Mv", "Lb", "Lt", "Ln", "Lh", "Mg"]
                    },
                    months: {
                        names: ["Mqungu", "Mdumba", "Kwindla", "Tshazimpuzi", "Canzibe", "Silimela", "Khala", "Thupha", "Msintsi", "Dwarha", "Nkanga", "Mnga", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "zu-ZA": ["zu-ZA", "default", {
            name: "zu-ZA",
            englishName: "isiZulu (South Africa)",
            nativeName: "isiZulu (iNingizimu Afrika)",
            language: "zu",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["iSonto", "uMsombuluko", "uLwesibili", "uLwesithathu", "uLwesine", "uLwesihlanu", "uMgqibelo"],
                        namesAbbr: ["Son.", "Mso.", "Bi.", "Tha.", "Ne.", "Hla.", "Mgq."]
                    },
                    months: {
                        names: ["uMasingana", "uNhlolanja", "uNdasa", "uMbaso", "uNhlaba", "uNhlangulana", "uNtulikazi", "uNcwaba", "uMandulo", "uMfumfu", "uLwezi", "uZibandlela", ""],
                        namesAbbr: ["Mas.", "Nhlo.", "Nda.", "Mba.", "Nhla.", "Nhlang.", "Ntu.", "Ncwa.", "Man.", "Mfu.", "Lwe.", "Zib.", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "af-ZA": ["af-ZA", "default", {
            name: "af-ZA",
            englishName: "Afrikaans (South Africa)",
            nativeName: "Afrikaans (Suid Afrika)",
            language: "af",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"],
                        namesAbbr: ["Son", "Maan", "Dins", "Woen", "Dond", "Vry", "Sat"],
                        namesShort: ["So", "Ma", "Di", "Wo", "Do", "Vr", "Sa"]
                    },
                    months: {
                        names: ["Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ka-GE": ["ka-GE", "default", {
            name: "ka-GE",
            englishName: "Georgian (Georgia)",
            nativeName: "ქართული (საქართველო)",
            language: "ka",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Lari"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"],
                        namesAbbr: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"],
                        namesShort: ["კ", "ო", "ს", "ო", "ხ", "პ", "შ"]
                    },
                    months: {
                        names: ["იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი", ""],
                        namesAbbr: ["იან", "თებ", "მარ", "აპრ", "მაის", "ივნ", "ივლ", "აგვ", "სექ", "ოქტ", "ნოემ", "დეკ", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "yyyy 'წლის' dd MM, dddd",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'წლის' dd MM, dddd H:mm",
                        F: "yyyy 'წლის' dd MM, dddd H:mm:ss",
                        M: "dd MM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fo-FO": ["fo-FO", "default", {
            name: "fo-FO",
            englishName: "Faroese (Faroe Islands)",
            nativeName: "føroyskt (Føroyar)",
            language: "fo",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["sunnudagur", "mánadagur", "týsdagur", "mikudagur", "hósdagur", "fríggjadagur", "leygardagur"],
                        namesAbbr: ["sun", "mán", "týs", "mik", "hós", "frí", "leyg"],
                        namesShort: ["su", "má", "tý", "mi", "hó", "fr", "ley"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "apríl", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hi-IN": ["hi-IN", "default", {
            name: "hi-IN",
            englishName: "Hindi (India)",
            nativeName: "हिंदी (भारत)",
            language: "hi",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["रवि.", "सोम.", "मंगल.", "बुध.", "गुरु.", "शुक्र.", "शनि."],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""],
                        namesAbbr: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""]
                    },
                    AM: ["पूर्वाह्न", "पूर्वाह्न", "पूर्वाह्न"],
                    PM: ["अपराह्न", "अपराह्न", "अपराह्न"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "mt-MT": ["mt-MT", "default", {
            name: "mt-MT",
            englishName: "Maltese (Malta)",
            nativeName: "Malti (Malta)",
            language: "mt",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Il-Ħadd", "It-Tnejn", "It-Tlieta", "L-Erbgħa", "Il-Ħamis", "Il-Ġimgħa", "Is-Sibt"],
                        namesAbbr: ["Ħad", "Tne", "Tli", "Erb", "Ħam", "Ġim", "Sib"],
                        namesShort: ["I", "I", "I", "L", "I", "I", "I"]
                    },
                    months: {
                        names: ["Jannar", "Frar", "Marzu", "April", "Mejju", "Ġunju", "Lulju", "Awissu", "Settembru", "Ottubru", "Novembru", "Diċembru", ""],
                        namesAbbr: ["Jan", "Fra", "Mar", "Apr", "Mej", "Ġun", "Lul", "Awi", "Set", "Ott", "Nov", "Diċ", ""]
                    },
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' ta\\' 'MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' ta\\' 'MMMM yyyy HH:mm",
                        F: "dddd, d' ta\\' 'MMMM yyyy HH:mm:ss",
                        M: "d' ta\\' 'MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "se-NO": ["se-NO", "default", {
            name: "se-NO",
            englishName: "Sami, Northern (Norway)",
            nativeName: "davvisámegiella (Norga)",
            language: "se",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sotnabeaivi", "vuossárga", "maŋŋebárga", "gaskavahkku", "duorastat", "bearjadat", "lávvardat"],
                        namesAbbr: ["sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"],
                        namesShort: ["s", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđajagimánu", "guovvamánu", "njukčamánu", "cuoŋománu", "miessemánu", "geassemánu", "suoidnemánu", "borgemánu", "čakčamánu", "golggotmánu", "skábmamánu", "juovlamánu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ms-MY": ["ms-MY", "default", {
            name: "ms-MY",
            englishName: "Malay (Malaysia)",
            nativeName: "Bahasa Melayu (Malaysia)",
            language: "ms",
            numberFormat: {
                currency: {
                    decimals: 0,
                    symbol: "RM"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesAbbr: ["Ahad", "Isnin", "Sel", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesShort: ["A", "I", "S", "R", "K", "J", "S"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""],
                        namesAbbr: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogos", "Sept", "Okt", "Nov", "Dis", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM yyyy H:mm",
                        F: "dd MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "kk-KZ": ["kk-KZ", "default", {
            name: "kk-KZ",
            englishName: "Kazakh (Kazakhstan)",
            nativeName: "Қазақ (Қазақстан)",
            language: "kk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    ",": " ",
                    ".": "-",
                    symbol: "Т"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Жексенбі", "Дүйсенбі", "Сейсенбі", "Сәрсенбі", "Бейсенбі", "Жұма", "Сенбі"],
                        namesAbbr: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"],
                        namesShort: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"]
                    },
                    months: {
                        names: ["қаңтар", "ақпан", "наурыз", "сәуір", "мамыр", "маусым", "шілде", "тамыз", "қыркүйек", "қазан", "қараша", "желтоқсан", ""],
                        namesAbbr: ["Қаң", "Ақп", "Нау", "Сәу", "Мам", "Мау", "Шіл", "Там", "Қыр", "Қаз", "Қар", "Жел", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy 'ж.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'ж.' H:mm",
                        F: "d MMMM yyyy 'ж.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ky-KG": ["ky-KG", "default", {
            name: "ky-KG",
            englishName: "Kyrgyz (Kyrgyzstan)",
            nativeName: "Кыргыз (Кыргызстан)",
            language: "ky",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": "-",
                    symbol: "сом"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Жекшемби", "Дүйшөмбү", "Шейшемби", "Шаршемби", "Бейшемби", "Жума", "Ишемби"],
                        namesAbbr: ["Жш", "Дш", "Шш", "Шр", "Бш", "Жм", "Иш"],
                        namesShort: ["Жш", "Дш", "Шш", "Шр", "Бш", "Жм", "Иш"]
                    },
                    months: {
                        names: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d'-'MMMM yyyy'-ж.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d'-'MMMM yyyy'-ж.' H:mm",
                        F: "d'-'MMMM yyyy'-ж.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy'-ж.'"
                    }
                }
            }
        }],
    "sw-KE": ["sw-KE", "default", {
            name: "sw-KE",
            englishName: "Kiswahili (Kenya)",
            nativeName: "Kiswahili (Kenya)",
            language: "sw",
            numberFormat: {
                currency: {
                    symbol: "S"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"],
                        namesAbbr: ["Jumap.", "Jumat.", "Juman.", "Jumat.", "Alh.", "Iju.", "Jumam."],
                        namesShort: ["P", "T", "N", "T", "A", "I", "M"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Decemba", ""],
                        namesAbbr: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Dec", ""]
                    }
                }
            }
        }],
    "tk-TM": ["tk-TM", "default", {
            name: "tk-TM",
            englishName: "Turkmen (Turkmenistan)",
            nativeName: "türkmençe (Türkmenistan)",
            language: "tk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "m."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Duşenbe", "Sişenbe", "Çarşenbe", "Penşenbe", "Anna", "Şenbe", "Ýekşenbe"],
                        namesAbbr: ["Db", "Sb", "Çb", "Pb", "An", "Şb", "Ýb"],
                        namesShort: ["D", "S", "Ç", "P", "A", "Ş", "Ý"]
                    },
                    months: {
                        names: ["Ýanwar", "Fewral", "Mart", "Aprel", "Maý", "lýun", "lýul", "Awgust", "Sentýabr", "Oktýabr", "Noýabr", "Dekabr", ""],
                        namesAbbr: ["Ýan", "Few", "Mart", "Apr", "Maý", "lýun", "lýul", "Awg", "Sen", "Okt", "Not", "Dek", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "yyyy 'ý.' MMMM d",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'ý.' MMMM d H:mm",
                        F: "yyyy 'ý.' MMMM d H:mm:ss",
                        Y: "yyyy 'ý.' MMMM"
                    }
                }
            }
        }],
    "uz-Latn-UZ": ["uz-Latn-UZ", "default", {
            name: "uz-Latn-UZ",
            englishName: "Uzbek (Latin, Uzbekistan)",
            nativeName: "U'zbek (U'zbekiston Respublikasi)",
            language: "uz-Latn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    decimals: 0,
                    ",": " ",
                    ".": ",",
                    symbol: "so'm"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["yakshanba", "dushanba", "seshanba", "chorshanba", "payshanba", "juma", "shanba"],
                        namesAbbr: ["yak.", "dsh.", "sesh.", "chr.", "psh.", "jm.", "sh."],
                        namesShort: ["ya", "d", "s", "ch", "p", "j", "sh"]
                    },
                    months: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM yyyy",
                        D: "yyyy 'yil' d-MMMM",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'yil' d-MMMM HH:mm",
                        F: "yyyy 'yil' d-MMMM HH:mm:ss",
                        M: "d-MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tt-RU": ["tt-RU", "default", {
            name: "tt-RU",
            englishName: "Tatar (Russia)",
            nativeName: "Татар (Россия)",
            language: "tt",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Якшәмбе", "Дүшәмбе", "Сишәмбе", "Чәршәмбе", "Пәнҗешәмбе", "Җомга", "Шимбә"],
                        namesAbbr: ["Якш", "Дүш", "Сиш", "Чәрш", "Пәнҗ", "Җом", "Шим"],
                        namesShort: ["Я", "Д", "С", "Ч", "П", "Җ", "Ш"]
                    },
                    months: {
                        names: ["Гыйнвар", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["Гыйн.", "Фев.", "Мар.", "Апр.", "Май", "Июнь", "Июль", "Авг.", "Сен.", "Окт.", "Нояб.", "Дек.", ""]
                    },
                    monthsGenitive: {
                        names: ["Гыйнварның", "Февральнең", "Мартның", "Апрельнең", "Майның", "Июньнең", "Июльнең", "Августның", "Сентябрьның", "Октябрьның", "Ноябрьның", "Декабрьның", ""],
                        namesAbbr: ["Гыйн.-ның", "Фев.-нең", "Мар.-ның", "Апр.-нең", "Майның", "Июньнең", "Июльнең", "Авг.-ның", "Сен.-ның", "Окт.-ның", "Нояб.-ның", "Дек.-ның", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "bn-IN": ["bn-IN", "default", {
            name: "bn-IN",
            englishName: "Bengali (India)",
            nativeName: "বাংলা (ভারত)",
            language: "bn",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-%n", "%n"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "টা"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    ":": ".",
                    firstDay: 1,
                    days: {
                        names: ["রবিবার", "সোমবার", "মঙ্গলবার", "বুধবার", "বৃহস্পতিবার", "শুক্রবার", "শনিবার"],
                        namesAbbr: ["রবি.", "সোম.", "মঙ্গল.", "বুধ.", "বৃহস্পতি.", "শুক্র.", "শনি."],
                        namesShort: ["র", "স", "ম", "ব", "ব", "শ", "শ"]
                    },
                    months: {
                        names: ["জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""],
                        namesAbbr: ["জানু.", "ফেব্রু.", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগ.", "সেপ্টে.", "অক্টো.", "নভে.", "ডিসে.", ""]
                    },
                    AM: ["পুর্বাহ্ন", "পুর্বাহ্ন", "পুর্বাহ্ন"],
                    PM: ["অপরাহ্ন", "অপরাহ্ন", "অপরাহ্ন"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH.mm",
                        T: "HH.mm.ss",
                        f: "dd MMMM yyyy HH.mm",
                        F: "dd MMMM yyyy HH.mm.ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "pa-IN": ["pa-IN", "default", {
            name: "pa-IN",
            englishName: "Punjabi (India)",
            nativeName: "ਪੰਜਾਬੀ (ਭਾਰਤ)",
            language: "pa",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ਰੁ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ਐਤਵਾਰ", "ਸੋਮਵਾਰ", "ਮੰਗਲਵਾਰ", "ਬੁੱਧਵਾਰ", "ਵੀਰਵਾਰ", "ਸ਼ੁੱਕਰਵਾਰ", "ਸ਼ਨਿੱਚਰਵਾਰ"],
                        namesAbbr: ["ਐਤ.", "ਸੋਮ.", "ਮੰਗਲ.", "ਬੁੱਧ.", "ਵੀਰ.", "ਸ਼ੁਕਰ.", "ਸ਼ਨਿੱਚਰ."],
                        namesShort: ["ਐ", "ਸ", "ਮ", "ਬ", "ਵ", "ਸ਼", "ਸ਼"]
                    },
                    months: {
                        names: ["ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""],
                        namesAbbr: ["ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""]
                    },
                    AM: ["ਸਵੇਰ", "ਸਵੇਰ", "ਸਵੇਰ"],
                    PM: ["ਸ਼ਾਮ", "ਸ਼ਾਮ", "ਸ਼ਾਮ"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy dddd",
                        t: "tt hh:mm",
                        T: "tt hh:mm:ss",
                        f: "dd MMMM yyyy dddd tt hh:mm",
                        F: "dd MMMM yyyy dddd tt hh:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "gu-IN": ["gu-IN", "default", {
            name: "gu-IN",
            englishName: "Gujarati (India)",
            nativeName: "ગુજરાતી (ભારત)",
            language: "gu",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "રૂ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["રવિવાર", "સોમવાર", "મંગળવાર", "બુધવાર", "ગુરુવાર", "શુક્રવાર", "શનિવાર"],
                        namesAbbr: ["રવિ", "સોમ", "મંગળ", "બુધ", "ગુરુ", "શુક્ર", "શનિ"],
                        namesShort: ["ર", "સ", "મ", "બ", "ગ", "શ", "શ"]
                    },
                    months: {
                        names: ["જાન્યુઆરી", "ફેબ્રુઆરી", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટેમ્બર", "ઑક્ટ્બર", "નવેમ્બર", "ડિસેમ્બર", ""],
                        namesAbbr: ["જાન્યુ", "ફેબ્રુ", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટે", "ઑક્ટો", "નવે", "ડિસે", ""]
                    },
                    AM: ["પૂર્વ મધ્યાહ્ન", "પૂર્વ મધ્યાહ્ન", "પૂર્વ મધ્યાહ્ન"],
                    PM: ["ઉત્તર મધ્યાહ્ન", "ઉત્તર મધ્યાહ્ન", "ઉત્તર મધ્યાહ્ન"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "or-IN": ["or-IN", "default", {
            name: "or-IN",
            englishName: "Oriya (India)",
            nativeName: "ଓଡ଼ିଆ (ଭାରତ)",
            language: "or",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ଟ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["ରବିବାର", "ସୋମବାର", "ମଙ୍ଗଳବାର", "ବୁଧବାର", "ଗୁରୁବାର", "ଶୁକ୍ରବାର", "ଶନିବାର"],
                        namesAbbr: ["ରବି.", "ସୋମ.", "ମଙ୍ଗଳ.", "ବୁଧ.", "ଗୁରୁ.", "ଶୁକ୍ର.", "ଶନି."],
                        namesShort: ["ର", "ସୋ", "ମ", "ବୁ", "ଗୁ", "ଶୁ", "ଶ"]
                    },
                    months: {
                        names: ["ଜାନୁୟାରୀ", "ଫ୍ରେବୃୟାରୀ", "ମାର୍ଚ୍ଚ", "ଏପ୍ରିଲ୍‌", "ମେ", "ଜୁନ୍‌", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "(ଡିସେମ୍ବର", ""],
                        namesAbbr: ["ଜାନୁୟାରୀ", "ଫ୍ରେବୃୟାରୀ", "ମାର୍ଚ୍ଚ", "ଏପ୍ରିଲ୍‌", "ମେ", "ଜୁନ୍‌", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "(ଡିସେମ୍ବର", ""]
                    },
                    eras: [{ "name": "ଖ୍ରୀଷ୍ଟାବ୍ଦ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ta-IN": ["ta-IN", "default", {
            name: "ta-IN",
            englishName: "Tamil (India)",
            nativeName: "தமிழ் (இந்தியா)",
            language: "ta",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ரூ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ஞாயிற்றுக்கிழமை", "திங்கள்கிழமை", "செவ்வாய்கிழமை", "புதன்கிழமை", "வியாழக்கிழமை", "வெள்ளிக்கிழமை", "சனிக்கிழமை"],
                        namesAbbr: ["ஞாயிறு", "திங்கள்", "செவ்வாய்", "புதன்", "வியாழன்", "வெள்ளி", "சனி"],
                        namesShort: ["ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"]
                    },
                    months: {
                        names: ["ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""],
                        namesAbbr: ["ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""]
                    },
                    AM: ["காலை", "காலை", "காலை"],
                    PM: ["மாலை", "மாலை", "மாலை"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "te-IN": ["te-IN", "default", {
            name: "te-IN",
            englishName: "Telugu (India)",
            nativeName: "తెలుగు (భారత దేశం)",
            language: "te",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "రూ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ఆదివారం", "సోమవారం", "మంగళవారం", "బుధవారం", "గురువారం", "శుక్రవారం", "శనివారం"],
                        namesAbbr: ["ఆది.", "సోమ.", "మంగళ.", "బుధ.", "గురు.", "శుక్ర.", "శని."],
                        namesShort: ["ఆ", "సో", "మం", "బు", "గు", "శు", "శ"]
                    },
                    months: {
                        names: ["జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జూలై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""],
                        namesAbbr: ["జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జూలై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""]
                    },
                    AM: ["పూర్వాహ్న", "పూర్వాహ్న", "పూర్వాహ్న"],
                    PM: ["అపరాహ్న", "అపరాహ్న", "అపరాహ్న"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "kn-IN": ["kn-IN", "default", {
            name: "kn-IN",
            englishName: "Kannada (India)",
            nativeName: "ಕನ್ನಡ (ಭಾರತ)",
            language: "kn",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ರೂ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ಭಾನುವಾರ", "ಸೋಮವಾರ", "ಮಂಗಳವಾರ", "ಬುಧವಾರ", "ಗುರುವಾರ", "ಶುಕ್ರವಾರ", "ಶನಿವಾರ"],
                        namesAbbr: ["ಭಾನು.", "ಸೋಮ.", "ಮಂಗಳ.", "ಬುಧ.", "ಗುರು.", "ಶುಕ್ರ.", "ಶನಿ."],
                        namesShort: ["ರ", "ಸ", "ಮ", "ಬ", "ಗ", "ಶ", "ಶ"]
                    },
                    months: {
                        names: ["ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಎಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""],
                        namesAbbr: ["ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಎಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""]
                    },
                    AM: ["ಪೂರ್ವಾಹ್ನ", "ಪೂರ್ವಾಹ್ನ", "ಪೂರ್ವಾಹ್ನ"],
                    PM: ["ಅಪರಾಹ್ನ", "ಅಪರಾಹ್ನ", "ಅಪರಾಹ್ನ"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ml-IN": ["ml-IN", "default", {
            name: "ml-IN",
            englishName: "Malayalam (India)",
            nativeName: "മലയാളം (ഭാരതം)",
            language: "ml",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-%n", "%n"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ക"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    ":": ".",
                    firstDay: 1,
                    days: {
                        names: ["ഞായറാഴ്ച", "തിങ്കളാഴ്ച", "ചൊവ്വാഴ്ച", "ബുധനാഴ്ച", "വ്യാഴാഴ്ച", "വെള്ളിയാഴ്ച", "ശനിയാഴ്ച"],
                        namesAbbr: ["ഞായർ.", "തിങ്കൾ.", "ചൊവ്വ.", "ബുധൻ.", "വ്യാഴം.", "വെള്ളി.", "ശനി."],
                        namesShort: ["ഞ", "ത", "ച", "ബ", "വ", "വെ", "ശ"]
                    },
                    months: {
                        names: ["ജനുവരി", "ഫെബ്റുവരി", "മാറ്ച്ച്", "ഏപ്റില്", "മെയ്", "ജൂണ്", "ജൂലൈ", "ഓഗസ്ററ്", "സെപ്ററംബറ്", "ഒക്ടോബറ്", "നവംബറ്", "ഡിസംബറ്", ""],
                        namesAbbr: ["ജനുവരി", "ഫെബ്റുവരി", "മാറ്ച്ച്", "ഏപ്റില്", "മെയ്", "ജൂണ്", "ജൂലൈ", "ഓഗസ്ററ്", "സെപ്ററംബറ്", "ഒക്ടോബറ്", "നവംബറ്", "ഡിസംബറ്", ""]
                    },
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH.mm",
                        T: "HH.mm.ss",
                        f: "dd MMMM yyyy HH.mm",
                        F: "dd MMMM yyyy HH.mm.ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "as-IN": ["as-IN", "default", {
            name: "as-IN",
            englishName: "Assamese (India)",
            nativeName: "অসমীয়া (ভাৰত)",
            language: "as",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "n$"],
                    groupSizes: [3, 2],
                    symbol: "ট"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["সোমবাৰ", "মঙ্গলবাৰ", "বুধবাৰ", "বৃহস্পতিবাৰ", "শুক্রবাৰ", "শনিবাৰ", "ৰবিবাৰ"],
                        namesAbbr: ["সোম.", "মঙ্গল.", "বুধ.", "বৃহ.", "শুক্র.", "শনি.", "ৰবি."],
                        namesShort: ["সো", "ম", "বু", "বৃ", "শু", "শ", "র"]
                    },
                    months: {
                        names: ["জানুৱাৰী", "ফেব্রুৱাৰী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টেম্বর", "অক্টোবর", "নবেম্বর", "ডিচেম্বর", ""],
                        namesAbbr: ["জানু", "ফেব্রু", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টে", "অক্টো", "নবে", "ডিচে", ""]
                    },
                    AM: ["ৰাতিপু", "ৰাতিপু", "ৰাতিপু"],
                    PM: ["আবেলি", "আবেলি", "আবেলি"],
                    eras: [{ "name": "খ্রীষ্টাব্দ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "yyyy,MMMM dd, dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "yyyy,MMMM dd, dddd tt h:mm",
                        F: "yyyy,MMMM dd, dddd tt h:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM,yy"
                    }
                }
            }
        }],
    "mr-IN": ["mr-IN", "default", {
            name: "mr-IN",
            englishName: "Marathi (India)",
            nativeName: "मराठी (भारत)",
            language: "mr",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["रविवार", "सोमवार", "मंगळवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["रवि.", "सोम.", "मंगळ.", "बुध.", "गुरु.", "शुक्र.", "शनि."],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""],
                        namesAbbr: ["जाने.", "फेब्रु.", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टें.", "ऑक्टो.", "नोव्हें.", "डिसें.", ""]
                    },
                    AM: ["म.पू.", "म.पू.", "म.पू."],
                    PM: ["म.नं.", "म.नं.", "म.नं."],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "sa-IN": ["sa-IN", "default", {
            name: "sa-IN",
            englishName: "Sanskrit (India)",
            nativeName: "संस्कृत (भारतम्)",
            language: "sa",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["रविवासरः", "सोमवासरः", "मङ्गलवासरः", "बुधवासरः", "गुरुवासरः", "शुक्रवासरः", "शनिवासरः"],
                        namesAbbr: ["रविवासरः", "सोमवासरः", "मङ्गलवासरः", "बुधवासरः", "गुरुवासरः", "शुक्रवासरः", "शनिवासरः"],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""],
                        namesAbbr: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""]
                    },
                    AM: ["पूर्वाह्न", "पूर्वाह्न", "पूर्वाह्न"],
                    PM: ["अपराह्न", "अपराह्न", "अपराह्न"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy dddd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy dddd HH:mm",
                        F: "dd MMMM yyyy dddd HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "mn-MN": ["mn-MN", "default", {
            name: "mn-MN",
            englishName: "Mongolian (Cyrillic, Mongolia)",
            nativeName: "Монгол хэл (Монгол улс)",
            language: "mn-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "₮"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Ням", "Даваа", "Мягмар", "Лхагва", "Пүрэв", "Баасан", "Бямба"],
                        namesAbbr: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"],
                        namesShort: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"]
                    },
                    months: {
                        names: ["1 дүгээр сар", "2 дугаар сар", "3 дугаар сар", "4 дүгээр сар", "5 дугаар сар", "6 дугаар сар", "7 дугаар сар", "8 дугаар сар", "9 дүгээр сар", "10 дугаар сар", "11 дүгээр сар", "12 дугаар сар", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    monthsGenitive: {
                        names: ["1 дүгээр сарын", "2 дугаар сарын", "3 дугаар сарын", "4 дүгээр сарын", "5 дугаар сарын", "6 дугаар сарын", "7 дугаар сарын", "8 дугаар сарын", "9 дүгээр сарын", "10 дугаар сарын", "11 дүгээр сарын", "12 дугаар сарын", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yy.MM.dd",
                        D: "yyyy 'оны' MMMM d",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'оны' MMMM d H:mm",
                        F: "yyyy 'оны' MMMM d H:mm:ss",
                        M: "d MMMM",
                        Y: "yyyy 'он' MMMM"
                    }
                }
            }
        }],
    "bo-CN": ["bo-CN", "default", {
            name: "bo-CN",
            englishName: "Tibetan (PRC)",
            nativeName: "བོད་ཡིག (ཀྲུང་ཧྭ་མི་དམངས་སྤྱི་མཐུན་རྒྱལ་ཁབ།)",
            language: "bo",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["གཟའ་ཉི་མ།", "གཟའ་ཟླ་བ།", "གཟའ་མིག་དམར།", "གཟའ་ལྷག་པ།", "གཟའ་ཕུར་བུ།", "གཟའ་པ་སངས།", "གཟའ་སྤེན་པ།"],
                        namesAbbr: ["ཉི་མ།", "ཟླ་བ།", "མིག་དམར།", "ལྷག་པ།", "ཕུར་བུ།", "པ་སངས།", "སྤེན་པ།"],
                        namesShort: ["༧", "༡", "༢", "༣", "༤", "༥", "༦"]
                    },
                    months: {
                        names: ["སྤྱི་ཟླ་དང་པོ།", "སྤྱི་ཟླ་གཉིས་པ།", "སྤྱི་ཟླ་གསུམ་པ།", "སྤྱི་ཟླ་བཞི་པ།", "སྤྱི་ཟླ་ལྔ་པ།", "སྤྱི་ཟླ་དྲུག་པ།", "སྤྱི་ཟླ་བདུན་པ།", "སྤྱི་ཟླ་བརྒྱད་པ།", "སྤྱི་ཟླ་དགུ་པ།", "སྤྱི་ཟླ་བཅུ་པོ།", "སྤྱི་ཟླ་བཅུ་གཅིག་པ།", "སྤྱི་ཟླ་བཅུ་གཉིས་པ།", ""],
                        namesAbbr: ["ཟླ་ ༡", "ཟླ་ ༢", "ཟླ་ ༣", "ཟླ་ ༤", "ཟླ་ ༥", "ཟླ་ ༦", "ཟླ་ ༧", "ཟླ་ ༨", "ཟླ་ ༩", "ཟླ་ ༡༠", "ཟླ་ ༡༡", "ཟླ་ ༡༢", ""]
                    },
                    AM: ["སྔ་དྲོ", "སྔ་དྲོ", "སྔ་དྲོ"],
                    PM: ["ཕྱི་དྲོ", "ཕྱི་དྲོ", "ཕྱི་དྲོ"],
                    eras: [{ "name": "སྤྱི་ལོ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ལོའི་ཟླ' M'ཚེས' d",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm",
                        F: "yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm:ss",
                        M: "'ཟླ་' M'ཚེས'd",
                        Y: "yyyy.M"
                    }
                }
            }
        }],
    "cy-GB": ["cy-GB", "default", {
            name: "cy-GB",
            englishName: "Welsh (United Kingdom)",
            nativeName: "Cymraeg (y Deyrnas Unedig)",
            language: "cy",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "£"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Dydd Sul", "Dydd Llun", "Dydd Mawrth", "Dydd Mercher", "Dydd Iau", "Dydd Gwener", "Dydd Sadwrn"],
                        namesAbbr: ["Sul", "Llun", "Maw", "Mer", "Iau", "Gwe", "Sad"],
                        namesShort: ["Su", "Ll", "Ma", "Me", "Ia", "Gw", "Sa"]
                    },
                    months: {
                        names: ["Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr", ""],
                        namesAbbr: ["Ion", "Chwe", "Maw", "Ebr", "Mai", "Meh", "Gor", "Aws", "Med", "Hyd", "Tach", "Rhag", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "km-KH": ["km-KH", "default", {
            name: "km-KH",
            englishName: "Khmer (Cambodia)",
            nativeName: "ខ្មែរ (កម្ពុជា)",
            language: "km",
            numberFormat: {
                pattern: ["- n"],
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    symbol: "៛"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["ថ្ងៃអាទិត្យ", "ថ្ងៃច័ន្ទ", "ថ្ងៃអង្គារ", "ថ្ងៃពុធ", "ថ្ងៃព្រហស្បតិ៍", "ថ្ងៃសុក្រ", "ថ្ងៃសៅរ៍"],
                        namesAbbr: ["អាទិ.", "ច.", "អ.", "ពុ", "ព្រហ.", "សុ.", "ស."],
                        namesShort: ["អា", "ច", "អ", "ពុ", "ព្", "សុ", "ស"]
                    },
                    months: {
                        names: ["មករា", "កុម្ភៈ", "មិនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ", ""],
                        namesAbbr: ["១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩", "១០", "១១", "១២", ""]
                    },
                    AM: ["ព្រឹក", "ព្រឹក", "ព្រឹក"],
                    PM: ["ល្ងាច", "ល្ងាច", "ល្ងាច"],
                    eras: [{ "name": "មុនគ.ស.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "d MMMM yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy H:mm tt",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "'ថ្ងៃទី' dd 'ខែ' MM",
                        Y: "'ខែ' MM 'ឆ្នាំ' yyyy"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ព្រឹក", "ព្រឹក", "ព្រឹក"],
                    PM: ["ល្ងាច", "ល្ងាច", "ល្ងាច"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm tt",
                        F: "dddd, MMMM dd, yyyy HH:mm:ss"
                    }
                }
            }
        }],
    "lo-LA": ["lo-LA", "default", {
            name: "lo-LA",
            englishName: "Lao (Lao P.D.R.)",
            nativeName: "ລາວ (ສ.ປ.ປ. ລາວ)",
            language: "lo",
            numberFormat: {
                pattern: ["(n)"],
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["(n$)", "n$"],
                    groupSizes: [3, 0],
                    symbol: "₭"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["ວັນອາທິດ", "ວັນຈັນ", "ວັນອັງຄານ", "ວັນພຸດ", "ວັນພະຫັດ", "ວັນສຸກ", "ວັນເສົາ"],
                        namesAbbr: ["ອາທິດ", "ຈັນ", "ອັງຄານ", "ພຸດ", "ພະຫັດ", "ສຸກ", "ເສົາ"],
                        namesShort: ["ອ", "ຈ", "ອ", "ພ", "ພ", "ສ", "ເ"]
                    },
                    months: {
                        names: ["ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""],
                        namesAbbr: ["ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""]
                    },
                    AM: ["ເຊົ້າ", "ເຊົ້າ", "ເຊົ້າ"],
                    PM: ["ແລງ", "ແລງ", "ແລງ"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy H:mm tt",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gl-ES": ["gl-ES", "default", {
            name: "gl-ES",
            englishName: "Galician (Galician)",
            nativeName: "galego (galego)",
            language: "gl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "luns", "martes", "mércores", "xoves", "venres", "sábado"],
                        namesAbbr: ["dom", "luns", "mar", "mér", "xov", "ven", "sáb"],
                        namesShort: ["do", "lu", "ma", "mé", "xo", "ve", "sá"]
                    },
                    months: {
                        names: ["xaneiro", "febreiro", "marzo", "abril", "maio", "xuño", "xullo", "agosto", "setembro", "outubro", "novembro", "decembro", ""],
                        namesAbbr: ["xan", "feb", "mar", "abr", "maio", "xuñ", "xull", "ago", "set", "out", "nov", "dec", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "kok-IN": ["kok-IN", "default", {
            name: "kok-IN",
            englishName: "Konkani (India)",
            nativeName: "कोंकणी (भारत)",
            language: "kok",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["आयतार", "सोमार", "मंगळार", "बुधवार", "बिरेस्तार", "सुक्रार", "शेनवार"],
                        namesAbbr: ["आय.", "सोम.", "मंगळ.", "बुध.", "बिरे.", "सुक्र.", "शेन."],
                        namesShort: ["आ", "स", "म", "ब", "ब", "स", "श"]
                    },
                    months: {
                        names: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोवेम्बर", "डिसेंबर", ""],
                        namesAbbr: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोवेम्बर", "डिसेंबर", ""]
                    },
                    AM: ["म.पू.", "म.पू.", "म.पू."],
                    PM: ["म.नं.", "म.नं.", "म.नं."],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "syr-SY": ["syr-SY", "default", {
            name: "syr-SY",
            englishName: "Syriac (Syria)",
            nativeName: "ܣܘܪܝܝܐ (سوريا)",
            language: "syr",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ل.س.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["ܚܕ ܒܫܒܐ", "ܬܪܝܢ ܒܫܒܐ", "ܬܠܬܐ ܒܫܒܐ", "ܐܪܒܥܐ ܒܫܒܐ", "ܚܡܫܐ ܒܫܒܐ", "ܥܪܘܒܬܐ", "ܫܒܬܐ"],
                        namesAbbr: ["܏ܐ ܏ܒܫ", "܏ܒ ܏ܒܫ", "܏ܓ ܏ܒܫ", "܏ܕ ܏ܒܫ", "܏ܗ ܏ܒܫ", "܏ܥܪܘܒ", "܏ܫܒ"],
                        namesShort: ["ܐ", "ܒ", "ܓ", "ܕ", "ܗ", "ܥ", "ܫ"]
                    },
                    months: {
                        names: ["ܟܢܘܢ ܐܚܪܝ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝ ܩܕܝܡ", "ܬܫܪܝ ܐܚܪܝ", "ܟܢܘܢ ܩܕܝܡ", ""],
                        namesAbbr: ["܏ܟܢ ܏ܒ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "܏ܬܫ ܏ܐ", "܏ܬܫ ܏ܒ", "܏ܟܢ ܏ܐ", ""]
                    },
                    AM: ["ܩ.ܛ", "ܩ.ܛ", "ܩ.ܛ"],
                    PM: ["ܒ.ܛ", "ܒ.ܛ", "ܒ.ܛ"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "si-LK": ["si-LK", "default", {
            name: "si-LK",
            englishName: "Sinhala (Sri Lanka)",
            nativeName: "සිංහල (ශ්‍රී ලංකා)",
            language: "si",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    symbol: "රු."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ඉරිදා", "සඳුදා", "අඟහරුවාදා", "බදාදා", "බ්‍රහස්පතින්දා", "සිකුරාදා", "සෙනසුරාදා"],
                        namesAbbr: ["ඉරිදා", "සඳුදා", "කුජදා", "බුදදා", "ගුරුදා", "කිවිදා", "ශනිදා"],
                        namesShort: ["ඉ", "ස", "අ", "බ", "බ්‍ර", "සි", "සෙ"]
                    },
                    months: {
                        names: ["ජනවාරි", "පෙබරවාරි", "මාර්තු", "අ‌ප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අ‌ගෝස්තු", "සැප්තැම්බර්", "ඔක්තෝබර්", "නොවැම්බර්", "දෙසැම්බර්", ""],
                        namesAbbr: ["ජන.", "පෙබ.", "මාර්තු.", "අප්‍රේල්.", "මැයි.", "ජූනි.", "ජූලි.", "අගෝ.", "සැප්.", "ඔක්.", "නොවැ.", "දෙසැ.", ""]
                    },
                    AM: ["පෙ.ව.", "පෙ.ව.", "පෙ.ව."],
                    PM: ["ප.ව.", "ප.ව.", "ප.ව."],
                    eras: [{ "name": "ක්‍රි.ව.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy MMMM' මස 'dd' වැනිදා 'dddd",
                        f: "yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm tt",
                        F: "yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm:ss tt",
                        Y: "yyyy MMMM"
                    }
                }
            }
        }],
    "iu-Cans-CA": ["iu-Cans-CA", "default", {
            name: "iu-Cans-CA",
            englishName: "Inuktitut (Syllabics, Canada)",
            nativeName: "ᐃᓄᒃᑎᑐᑦ (ᑲᓇᑕᒥ)",
            language: "iu-Cans",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["ᓈᑦᑏᖑᔭ", "ᓇᒡᒐᔾᔭᐅ", "ᐊᐃᑉᐱᖅ", "ᐱᖓᑦᓯᖅ", "ᓯᑕᒻᒥᖅ", "ᑕᓪᓕᕐᒥᖅ", "ᓯᕙᑖᕐᕕᒃ"],
                        namesAbbr: ["ᓈᑦᑏ", "ᓇᒡᒐ", "ᐊᐃᑉᐱ", "ᐱᖓᑦᓯ", "ᓯᑕ", "ᑕᓪᓕ", "ᓯᕙᑖᕐᕕᒃ"],
                        namesShort: ["ᓈ", "ᓇ", "ᐊ", "ᐱ", "ᓯ", "ᑕ", "ᓯ"]
                    },
                    months: {
                        names: ["ᔮᓐᓄᐊᕆ", "ᕖᕝᕗᐊᕆ", "ᒫᑦᓯ", "ᐄᐳᕆ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐋᒡᒌᓯ", "ᓯᑎᐱᕆ", "ᐅᑐᐱᕆ", "ᓄᕕᐱᕆ", "ᑎᓯᐱᕆ", ""],
                        namesAbbr: ["ᔮᓐᓄ", "ᕖᕝᕗ", "ᒫᑦᓯ", "ᐄᐳᕆ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐋᒡᒌ", "ᓯᑎᐱ", "ᐅᑐᐱ", "ᓄᕕᐱ", "ᑎᓯᐱ", ""]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd,MMMM dd,yyyy",
                        f: "dddd,MMMM dd,yyyy h:mm tt",
                        F: "dddd,MMMM dd,yyyy h:mm:ss tt",
                        Y: "MMMM,yyyy"
                    }
                }
            }
        }],
    "am-ET": ["am-ET", "default", {
            name: "am-ET",
            englishName: "Amharic (Ethiopia)",
            nativeName: "አማርኛ (ኢትዮጵያ)",
            language: "am",
            numberFormat: {
                decimals: 1,
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    decimals: 1,
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "ETB"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["እሑድ", "ሰኞ", "ማክሰኞ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"],
                        namesAbbr: ["እሑድ", "ሰኞ", "ማክሰ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"],
                        namesShort: ["እ", "ሰ", "ማ", "ረ", "ሐ", "ዓ", "ቅ"]
                    },
                    months: {
                        names: ["ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕረል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክተውበር", "ኖቬምበር", "ዲሴምበር", ""],
                        namesAbbr: ["ጃንዩ", "ፌብሩ", "ማርች", "ኤፕረ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክተ", "ኖቬም", "ዲሴም", ""]
                    },
                    AM: ["ጡዋት", "ጡዋት", "ጡዋት"],
                    PM: ["ከሰዓት", "ከሰዓት", "ከሰዓት"],
                    eras: [{ "name": "ዓመተ  ምሕረት", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd '፣' MMMM d 'ቀን' yyyy",
                        f: "dddd '፣' MMMM d 'ቀን' yyyy h:mm tt",
                        F: "dddd '፣' MMMM d 'ቀን' yyyy h:mm:ss tt",
                        M: "MMMM d ቀን",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ne-NP": ["ne-NP", "default", {
            name: "ne-NP",
            englishName: "Nepali (Nepal)",
            nativeName: "नेपाली (नेपाल)",
            language: "ne",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["आइतवार", "सोमवार", "मङ्गलवार", "बुधवार", "बिहीवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["आइत", "सोम", "मङ्गल", "बुध", "बिही", "शुक्र", "शनि"],
                        namesShort: ["आ", "सो", "म", "बु", "बि", "शु", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जून", "जुलाई", "अगस्त", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""],
                        namesAbbr: ["जन", "फेब", "मार्च", "अप्रिल", "मे", "जून", "जुलाई", "अग", "सेप्ट", "अक्ट", "नोभ", "डिस", ""]
                    },
                    AM: ["विहानी", "विहानी", "विहानी"],
                    PM: ["बेलुकी", "बेलुकी", "बेलुकी"],
                    eras: [{ "name": "a.d.", "start": null, "offset": 0 }],
                    patterns: {
                        Y: "MMMM,yyyy"
                    }
                }
            }
        }],
    "fy-NL": ["fy-NL", "default", {
            name: "fy-NL",
            englishName: "Frisian (Netherlands)",
            nativeName: "Frysk (Nederlân)",
            language: "fy",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["Snein", "Moandei", "Tiisdei", "Woansdei", "Tongersdei", "Freed", "Sneon"],
                        namesAbbr: ["Sn", "Mo", "Ti", "Wo", "To", "Fr", "Sn"],
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    months: {
                        names: ["jannewaris", "febrewaris", "maart", "april", "maaie", "juny", "july", "augustus", "septimber", "oktober", "novimber", "desimber", ""],
                        namesAbbr: ["jann", "febr", "mrt", "apr", "maaie", "jun", "jul", "aug", "sept", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d-M-yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd d MMMM yyyy H:mm",
                        F: "dddd d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ps-AF": ["ps-AF", "default", {
            name: "ps-AF",
            englishName: "Pashto (Afghanistan)",
            nativeName: "پښتو (افغانستان)",
            language: "ps",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                ",": "،",
                ".": ",",
                percent: {
                    pattern: ["%n-", "%n"],
                    ",": "،",
                    ".": ","
                },
                currency: {
                    pattern: ["$n-", "$n"],
                    ",": "٬",
                    ".": "٫",
                    symbol: "؋"
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګا ښزمرى", "زمرى", "وږى", "تله", "لړم", "لنڈ ۍ", "مرغومى", ""],
                        namesAbbr: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګا ښ", "زمرى", "وږى", "تله", "لړم", "لنڈ ۍ", "مرغومى", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "ل.ه", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy, dd, MMMM, dddd",
                        f: "yyyy, dd, MMMM, dddd h:mm tt",
                        F: "yyyy, dd, MMMM, dddd h:mm:ss tt",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fil-PH": ["fil-PH", "default", {
            name: "fil-PH",
            englishName: "Filipino (Philippines)",
            nativeName: "Filipino (Pilipinas)",
            language: "fil",
            numberFormat: {
                currency: {
                    symbol: "PhP"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Linggo", "Lunes", "Martes", "Mierkoles", "Huebes", "Biernes", "Sabado"],
                        namesAbbr: ["Lin", "Lun", "Mar", "Mier", "Hueb", "Bier", "Saba"],
                        namesShort: ["L", "L", "M", "M", "H", "B", "S"]
                    },
                    months: {
                        names: ["Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Septyembre", "Oktubre", "Nobyembre", "Disyembre", ""],
                        namesAbbr: ["En", "Peb", "Mar", "Abr", "Mayo", "Hun", "Hul", "Agos", "Sept", "Okt", "Nob", "Dis", ""]
                    },
                    eras: [{ "name": "Anno Domini", "start": null, "offset": 0 }],
                }
            }
        }],
    "dv-MV": ["dv-MV", "default", {
            name: "dv-MV",
            englishName: "Divehi (Maldives)",
            nativeName: "ދިވެހިބަސް (ދިވެހި ރާއްޖެ)",
            language: "dv",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["n $-", "n $"],
                    symbol: "ރ."
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    days: {
                        names: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesAbbr: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesShort: ["އާ", "ހޯ", "އަ", "ބު", "ބު", "ހު", "ހޮ"]
                    },
                    months: {
                        names: ["މުޙައްރަމް", "ޞަފަރު", "ރަބީޢުލްއައްވަލް", "ރަބީޢުލްއާޚިރު", "ޖުމާދަލްއޫލާ", "ޖުމާދަލްއާޚިރާ", "ރަޖަބް", "ޝަޢްބާން", "ރަމަޟާން", "ޝައްވާލް", "ޛުލްޤަޢިދާ", "ޛުލްޙިއްޖާ", ""],
                        namesAbbr: ["މުޙައްރަމް", "ޞަފަރު", "ރަބީޢުލްއައްވަލް", "ރަބީޢުލްއާޚިރު", "ޖުމާދަލްއޫލާ", "ޖުމާދަލްއާޚިރާ", "ރަޖަބް", "ޝަޢްބާން", "ރަމަޟާން", "ޝައްވާލް", "ޛުލްޤަޢިދާ", "ޛުލްޙިއްޖާ", ""]
                    },
                    AM: ["މކ", "މކ", "މކ"],
                    PM: ["މފ", "މފ", "މފ"],
                    eras: [{ "name": "ހިޖްރީ", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd/MM/yyyy HH:mm",
                        F: "dd/MM/yyyy HH:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    days: {
                        names: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesAbbr: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesShort: ["އާ", "ހޯ", "އަ", "ބު", "ބު", "ހު", "ހޮ"]
                    },
                    months: {
                        names: ["ޖަނަވަރީ", "ފެބްރުއަރީ", "މާޗް", "އޭޕްރިލް", "މެއި", "ޖޫން", "ޖުލައި", "އޯގަސްޓް", "ސެޕްޓެމްބަރ", "އޮކްޓޯބަރ", "ނޮވެމްބަރ", "ޑިސެމްބަރ", ""],
                        namesAbbr: ["ޖަނަވަރީ", "ފެބްރުއަރީ", "މާޗް", "އޭޕްރިލް", "މެއި", "ޖޫން", "ޖުލައި", "އޯގަސްޓް", "ސެޕްޓެމްބަރ", "އޮކްޓޯބަރ", "ނޮވެމްބަރ", "ޑިސެމްބަރ", ""]
                    },
                    AM: ["މކ", "މކ", "މކ"],
                    PM: ["މފ", "މފ", "މފ"],
                    eras: [{ "name": "މީލާދީ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yy",
                        D: "ddd, yyyy MMMM dd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "ddd, yyyy MMMM dd HH:mm",
                        F: "ddd, yyyy MMMM dd HH:mm:ss",
                        Y: "yyyy, MMMM"
                    }
                }
            }
        }],
    "ha-Latn-NG": ["ha-Latn-NG", "default", {
            name: "ha-Latn-NG",
            englishName: "Hausa (Latin, Nigeria)",
            nativeName: "Hausa (Nigeria)",
            language: "ha-Latn",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Lahadi", "Litinin", "Talata", "Laraba", "Alhamis", "Juma'a", "Asabar"],
                        namesAbbr: ["Lah", "Lit", "Tal", "Lar", "Alh", "Jum", "Asa"],
                        namesShort: ["L", "L", "T", "L", "A", "J", "A"]
                    },
                    months: {
                        names: ["Januwaru", "Febreru", "Maris", "Afrilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktocba", "Nuwamba", "Disamba", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Afr", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""]
                    },
                    AM: ["Safe", "safe", "SAFE"],
                    PM: ["Yamma", "yamma", "YAMMA"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "yo-NG": ["yo-NG", "default", {
            name: "yo-NG",
            englishName: "Yoruba (Nigeria)",
            nativeName: "Yoruba (Nigeria)",
            language: "yo",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Aiku", "Aje", "Isegun", "Ojo'ru", "Ojo'bo", "Eti", "Abameta"],
                        namesAbbr: ["Aik", "Aje", "Ise", "Ojo", "Ojo", "Eti", "Aba"],
                        namesShort: ["A", "A", "I", "O", "O", "E", "A"]
                    },
                    months: {
                        names: ["Osu kinni", "Osu keji", "Osu keta", "Osu kerin", "Osu karun", "Osu kefa", "Osu keje", "Osu kejo", "Osu kesan", "Osu kewa", "Osu kokanla", "Osu keresi", ""],
                        namesAbbr: ["kin.", "kej.", "ket.", "ker.", "kar.", "kef.", "kej.", "kej.", "kes.", "kew.", "kok.", "ker.", ""]
                    },
                    AM: ["Owuro", "owuro", "OWURO"],
                    PM: ["Ale", "ale", "ALE"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "quz-BO": ["quz-BO", "default", {
            name: "quz-BO",
            englishName: "Quechua (Bolivia)",
            nativeName: "runasimi (Qullasuyu)",
            language: "quz",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "$b"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["intichaw", "killachaw", "atipachaw", "quyllurchaw", "Ch' askachaw", "Illapachaw", "k'uychichaw"],
                        namesAbbr: ["int", "kil", "ati", "quy", "Ch'", "Ill", "k'u"],
                        namesShort: ["d", "k", "a", "m", "h", "b", "k"]
                    },
                    months: {
                        names: ["Qulla puquy", "Hatun puquy", "Pauqar waray", "ayriwa", "Aymuray", "Inti raymi", "Anta Sitwa", "Qhapaq Sitwa", "Uma raymi", "Kantaray", "Ayamarq'a", "Kapaq Raymi", ""],
                        namesAbbr: ["Qul", "Hat", "Pau", "ayr", "Aym", "Int", "Ant", "Qha", "Uma", "Kan", "Aya", "Kap", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "nso-ZA": ["nso-ZA", "default", {
            name: "nso-ZA",
            englishName: "Sesotho sa Leboa (South Africa)",
            nativeName: "Sesotho sa Leboa (Afrika Borwa)",
            language: "nso",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Lamorena", "Mošupologo", "Labobedi", "Laboraro", "Labone", "Labohlano", "Mokibelo"],
                        namesAbbr: ["Lam", "Moš", "Lbb", "Lbr", "Lbn", "Lbh", "Mok"],
                        namesShort: ["L", "M", "L", "L", "L", "L", "M"]
                    },
                    months: {
                        names: ["Pherekgong", "Hlakola", "Mopitlo", "Moranang", "Mosegamanye", "Ngoatobošego", "Phuphu", "Phato", "Lewedi", "Diphalana", "Dibatsela", "Manthole", ""],
                        namesAbbr: ["Pher", "Hlak", "Mop", "Mor", "Mos", "Ngwat", "Phup", "Phat", "Lew", "Dip", "Dib", "Man", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ba-RU": ["ba-RU", "default", {
            name: "ba-RU",
            englishName: "Bashkir (Russia)",
            nativeName: "Башҡорт (Россия)",
            language: "ba",
            numberFormat: {
                ",": " ",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ",",
                    symbol: "һ."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Йәкшәмбе", "Дүшәмбе", "Шишәмбе", "Шаршамбы", "Кесаҙна", "Йома", "Шәмбе"],
                        namesAbbr: ["Йш", "Дш", "Шш", "Шр", "Кс", "Йм", "Шб"],
                        namesShort: ["Йш", "Дш", "Шш", "Шр", "Кс", "Йм", "Шб"]
                    },
                    months: {
                        names: ["ғинуар", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""],
                        namesAbbr: ["ғин", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d MMMM yyyy 'й'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'й' H:mm",
                        F: "d MMMM yyyy 'й' H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "lb-LU": ["lb-LU", "default", {
            name: "lb-LU",
            englishName: "Luxembourgish (Luxembourg)",
            nativeName: "Lëtzebuergesch (Luxembourg)",
            language: "lb",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sonndeg", "Méindeg", "Dënschdeg", "Mëttwoch", "Donneschdeg", "Freideg", "Samschdeg"],
                        namesAbbr: ["Son", "Méi", "Dën", "Mët", "Don", "Fre", "Sam"],
                        namesShort: ["So", "Mé", "Dë", "Më", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "Mäerz", "Abrëll", "Mee", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mäe", "Abr", "Mee", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "kl-GL": ["kl-GL", "default", {
            name: "kl-GL",
            englishName: "Greenlandic (Greenland)",
            nativeName: "kalaallisut (Kalaallit Nunaat)",
            language: "kl",
            numberFormat: {
                ",": ".",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 0],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["sapaat", "ataasinngorneq", "marlunngorneq", "pingasunngorneq", "sisamanngorneq", "tallimanngorneq", "arfininngorneq"],
                        namesAbbr: ["sap", "ata", "mar", "ping", "sis", "tal", "arf"],
                        namesShort: ["sa", "at", "ma", "pi", "si", "ta", "ar"]
                    },
                    months: {
                        names: ["januari", "februari", "martsi", "apriili", "maaji", "juni", "juli", "aggusti", "septembari", "oktobari", "novembari", "decembari", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ig-NG": ["ig-NG", "default", {
            name: "ig-NG",
            englishName: "Igbo (Nigeria)",
            nativeName: "Igbo (Nigeria)",
            language: "ig",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Aiku", "Aje", "Isegun", "Ojo'ru", "Ojo'bo", "Eti", "Abameta"],
                        namesAbbr: ["Aik", "Aje", "Ise", "Ojo", "Ojo", "Eti", "Aba"],
                        namesShort: ["A", "A", "I", "O", "O", "E", "A"]
                    },
                    months: {
                        names: ["Onwa mbu", "Onwa ibua", "Onwa ato", "Onwa ano", "Onwa ise", "Onwa isi", "Onwa asa", "Onwa asato", "Onwa itolu", "Onwa iri", "Onwa iri n'ofu", "Onwa iri n'ibua", ""],
                        namesAbbr: ["mbu.", "ibu.", "ato.", "ano.", "ise", "isi", "asa", "asa.", "ito.", "iri.", "n'of.", "n'ib.", ""]
                    },
                    AM: ["Ututu", "ututu", "UTUTU"],
                    PM: ["Efifie", "efifie", "EFIFIE"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "ii-CN": ["ii-CN", "default", {
            name: "ii-CN",
            englishName: "Yi (PRC)",
            nativeName: "ꆈꌠꁱꂷ (ꍏꉸꏓꂱꇭꉼꇩ)",
            language: "ii",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["ꑭꆏꑍ", "ꆏꊂ꒔", "ꆏꊂꑍ", "ꆏꊂꌕ", "ꆏꊂꇖ", "ꆏꊂꉬ", "ꆏꊂꃘ"],
                        namesAbbr: ["ꑭꆏ", "ꆏ꒔", "ꆏꑍ", "ꆏꌕ", "ꆏꇖ", "ꆏꉬ", "ꆏꃘ"],
                        namesShort: ["ꆏ", "꒔", "ꑍ", "ꌕ", "ꇖ", "ꉬ", "ꃘ"]
                    },
                    months: {
                        names: ["ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""],
                        namesAbbr: ["ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""]
                    },
                    AM: ["ꂵꆪꈌꈐ", "ꂵꆪꈌꈐ", "ꂵꆪꈌꈐ"],
                    PM: ["ꂵꆪꈌꉈ", "ꂵꆪꈌꉈ", "ꂵꆪꈌꉈ"],
                    eras: [{ "name": "ꇬꑼ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ꈎ' M'ꆪ' d'ꑍ'",
                        t: "tt h:mm",
                        T: "H:mm:ss",
                        f: "yyyy'ꈎ' M'ꆪ' d'ꑍ' tt h:mm",
                        F: "yyyy'ꈎ' M'ꆪ' d'ꑍ' H:mm:ss",
                        M: "M'ꆪ' d'ꑍ'",
                        Y: "yyyy'ꈎ' M'ꆪ'"
                    }
                }
            }
        }],
    "arn-CL": ["arn-CL", "default", {
            name: "arn-CL",
            englishName: "Mapudungun (Chile)",
            nativeName: "Mapudungun (Chile)",
            language: "arn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "moh-CA": ["moh-CA", "default", {
            name: "moh-CA",
            englishName: "Mohawk (Mohawk)",
            nativeName: "Kanien'kéha",
            language: "moh",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Awentatokentì:ke", "Awentataón'ke", "Ratironhia'kehronòn:ke", "Soséhne", "Okaristiiáhne", "Ronwaia'tanentaktonhne", "Entákta"],
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    months: {
                        names: ["Tsothohrkó:Wa", "Enniska", "Enniskó:Wa", "Onerahtókha", "Onerahtohkó:Wa", "Ohiari:Ha", "Ohiarihkó:Wa", "Seskéha", "Seskehkó:Wa", "Kenténha", "Kentenhkó:Wa", "Tsothóhrha", ""]
                    }
                }
            }
        }],
    "br-FR": ["br-FR", "default", {
            name: "br-FR",
            englishName: "Breton (France)",
            nativeName: "brezhoneg (Frañs)",
            language: "br",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sul", "Lun", "Meurzh", "Merc'her", "Yaou", "Gwener", "Sadorn"],
                        namesAbbr: ["Sul", "Lun", "Meu.", "Mer.", "Yaou", "Gwe.", "Sad."],
                        namesShort: ["Su", "Lu", "Mz", "Mc", "Ya", "Gw", "Sa"]
                    },
                    months: {
                        names: ["Genver", "C'hwevrer", "Meurzh", "Ebrel", "Mae", "Mezheven", "Gouere", "Eost", "Gwengolo", "Here", "Du", "Kerzu", ""],
                        namesAbbr: ["Gen.", "C'hwe.", "Meur.", "Ebr.", "Mae", "Mezh.", "Goue.", "Eost", "Gwen.", "Here", "Du", "Kzu", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "g. J.-K.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ug-CN": ["ug-CN", "default", {
            name: "ug-CN",
            englishName: "Uyghur (PRC)",
            nativeName: "ئۇيغۇرچە (جۇڭخۇا خەلق جۇمھۇرىيىتى)",
            language: "ug",
            isRTL: true,
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["يەكشەنبە", "دۈشەنبە", "سەيشەنبە", "چارشەنبە", "پەيشەنبە", "جۈمە", "شەنبە"],
                        namesAbbr: ["يە", "دۈ", "سە", "چا", "پە", "جۈ", "شە"],
                        namesShort: ["ي", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["1-ئاي", "2-ئاي", "3-ئاي", "4-ئاي", "5-ئاي", "6-ئاي", "7-ئاي", "8-ئاي", "9-ئاي", "10-ئاي", "11-ئاي", "12-ئاي", ""],
                        namesAbbr: ["1-ئاي", "2-ئاي", "3-ئاي", "4-ئاي", "5-ئاي", "6-ئاي", "7-ئاي", "8-ئاي", "9-ئاي", "10-ئاي", "11-ئاي", "12-ئاي", ""]
                    },
                    AM: ["چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن"],
                    PM: ["چۈشتىن كېيىن", "چۈشتىن كېيىن", "چۈشتىن كېيىن"],
                    eras: [{ "name": "مىلادى", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-M-d",
                        D: "yyyy-'يىلى' MMMM d-'كۈنى،'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy-'يىلى' MMMM d-'كۈنى،' H:mm",
                        F: "yyyy-'يىلى' MMMM d-'كۈنى،' H:mm:ss",
                        M: "MMMM d'-كۈنى'",
                        Y: "yyyy-'يىلى' MMMM"
                    }
                }
            }
        }],
    "mi-NZ": ["mi-NZ", "default", {
            name: "mi-NZ",
            englishName: "Maori (New Zealand)",
            nativeName: "Reo Māori (Aotearoa)",
            language: "mi",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Rātapu", "Rāhina", "Rātū", "Rāapa", "Rāpare", "Rāmere", "Rāhoroi"],
                        namesAbbr: ["Ta", "Hi", "Tū", "Apa", "Pa", "Me", "Ho"],
                        namesShort: ["Ta", "Hi", "Tū", "Aa", "Pa", "Me", "Ho"]
                    },
                    months: {
                        names: ["Kohi-tātea", "Hui-tanguru", "Poutū-te-rangi", "Paenga-whāwhā", "Haratua", "Pipiri", "Hōngongoi", "Here-turi-kōkā", "Mahuru", "Whiringa-ā-nuku", "Whiringa-ā-rangi", "Hakihea", ""],
                        namesAbbr: ["Kohi", "Hui", "Pou", "Pae", "Hara", "Pipi", "Hōngo", "Here", "Mahu", "Nuku", "Rangi", "Haki", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd MMMM, yyyy",
                        f: "dddd, dd MMMM, yyyy h:mm tt",
                        F: "dddd, dd MMMM, yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM, yy"
                    }
                }
            }
        }],
    "oc-FR": ["oc-FR", "default", {
            name: "oc-FR",
            englishName: "Occitan (France)",
            nativeName: "Occitan (França)",
            language: "oc",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimenge", "diluns", "dimars", "dimècres", "dijòus", "divendres", "dissabte"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mèc.", "jòu.", "ven.", "sab."],
                        namesShort: ["di", "lu", "ma", "mè", "jò", "ve", "sa"]
                    },
                    months: {
                        names: ["genier", "febrier", "març", "abril", "mai", "junh", "julh", "agost", "setembre", "octobre", "novembre", "desembre", ""],
                        namesAbbr: ["gen.", "feb.", "mar.", "abr.", "mai.", "jun.", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""]
                    },
                    monthsGenitive: {
                        names: ["de genier", "de febrier", "de març", "d'abril", "de mai", "de junh", "de julh", "d'agost", "de setembre", "d'octobre", "de novembre", "de desembre", ""],
                        namesAbbr: ["gen.", "feb.", "mar.", "abr.", "mai.", "jun.", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "après Jèsus-Crist", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd,' lo 'd MMMM' de 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd,' lo 'd MMMM' de 'yyyy HH:mm",
                        F: "dddd,' lo 'd MMMM' de 'yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "co-FR": ["co-FR", "default", {
            name: "co-FR",
            englishName: "Corsican (France)",
            nativeName: "Corsu (France)",
            language: "co",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dumenica", "luni", "marti", "mercuri", "ghjovi", "venderi", "sabbatu"],
                        namesAbbr: ["dum.", "lun.", "mar.", "mer.", "ghj.", "ven.", "sab."],
                        namesShort: ["du", "lu", "ma", "me", "gh", "ve", "sa"]
                    },
                    months: {
                        names: ["ghjennaghju", "ferraghju", "marzu", "aprile", "maghju", "ghjunghju", "lugliu", "aostu", "settembre", "ottobre", "nuvembre", "dicembre", ""],
                        namesAbbr: ["ghje", "ferr", "marz", "apri", "magh", "ghju", "lugl", "aost", "sett", "otto", "nuve", "dice", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "dopu J-C", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gsw-FR": ["gsw-FR", "default", {
            name: "gsw-FR",
            englishName: "Alsatian (France)",
            nativeName: "Elsässisch (Frànkrisch)",
            language: "gsw",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sundàà", "Mondàà", "Dienschdàà", "Mittwuch", "Dunnerschdàà", "Fridàà", "Sàmschdàà"],
                        namesAbbr: ["Su.", "Mo.", "Di.", "Mi.", "Du.", "Fr.", "Sà."],
                        namesShort: ["Su", "Mo", "Di", "Mi", "Du", "Fr", "Sà"]
                    },
                    months: {
                        names: ["Jänner", "Feverje", "März", "Àpril", "Mai", "Jüni", "Jüli", "Augscht", "September", "Oktower", "Nowember", "Dezember", ""],
                        namesAbbr: ["Jän.", "Fev.", "März", "Apr.", "Mai", "Jüni", "Jüli", "Aug.", "Sept.", "Okt.", "Now.", "Dez.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "Vor J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sah-RU": ["sah-RU", "default", {
            name: "sah-RU",
            englishName: "Yakut (Russia)",
            nativeName: "саха (Россия)",
            language: "sah",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "с."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["баскыһыанньа", "бэнидиэнньик", "оптуорунньук", "сэрэдэ", "чэппиэр", "бээтинсэ", "субуота"],
                        namesAbbr: ["Бс", "Бн", "Оп", "Ср", "Чп", "Бт", "Сб"],
                        namesShort: ["Бс", "Бн", "Оп", "Ср", "Чп", "Бт", "Сб"]
                    },
                    months: {
                        names: ["Тохсунньу", "Олунньу", "Кулун тутар", "Муус устар", "Ыам ыйа", "Бэс ыйа", "От ыйа", "Атырдьах ыйа", "Балаҕан ыйа", "Алтынньы", "Сэтинньи", "Ахсынньы", ""],
                        namesAbbr: ["тхс", "олн", "кул", "мст", "ыам", "бэс", "отй", "атр", "блҕ", "алт", "стн", "ахс", ""]
                    },
                    monthsGenitive: {
                        names: ["тохсунньу", "олунньу", "кулун тутар", "муус устар", "ыам ыйын", "бэс ыйын", "от ыйын", "атырдьах ыйын", "балаҕан ыйын", "алтынньы", "сэтинньи", "ахсынньы", ""],
                        namesAbbr: ["тхс", "олн", "кул", "мст", "ыам", "бэс", "отй", "атр", "блҕ", "алт", "стн", "ахс", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "MM.dd.yyyy",
                        D: "MMMM d yyyy 'с.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d yyyy 'с.' H:mm",
                        F: "MMMM d yyyy 'с.' H:mm:ss",
                        Y: "MMMM yyyy 'с.'"
                    }
                }
            }
        }],
    "qut-GT": ["qut-GT", "default", {
            name: "qut-GT",
            englishName: "K'iche (Guatemala)",
            nativeName: "K'iche (Guatemala)",
            language: "qut",
            numberFormat: {
                currency: {
                    symbol: "Q"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["juq'ij", "kaq'ij", "oxq'ij", "kajq'ij", "joq'ij", "waqq'ij", "wuqq'ij"],
                        namesAbbr: ["juq", "kaq", "oxq", "kajq", "joq", "waqq", "wuqq"],
                        namesShort: ["ju", "ka", "ox", "ka", "jo", "wa", "wu"]
                    },
                    months: {
                        names: ["nab'e ik'", "ukab' ik'", "rox ik'", "ukaj ik'", "uro' ik'", "uwaq ik'", "uwuq ik'", "uwajxaq ik'", "ub'elej ik'", "ulaj ik'", "ujulaj ik'", "ukab'laj ik'", ""],
                        namesAbbr: ["nab'e", "ukab", "rox", "ukaj", "uro", "uwaq", "uwuq", "uwajxaq", "ub'elej", "ulaj", "ujulaj", "ukab'laj", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "rw-RW": ["rw-RW", "default", {
            name: "rw-RW",
            englishName: "Kinyarwanda (Rwanda)",
            nativeName: "Kinyarwanda (Rwanda)",
            language: "rw",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "RWF"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Ku wa mbere", "Ku wa kabiri", "Ku wa gatatu", "Ku wa kane", "Ku wa gatanu", "Ku wa gatandatu", "Ku cyumweru"],
                        namesAbbr: ["mbe.", "kab.", "gat.", "kan.", "gat.", "gat.", "cyu."],
                        namesShort: ["mb", "ka", "ga", "ka", "ga", "ga", "cy"]
                    },
                    months: {
                        names: ["Mutarama", "Gashyantare", "Werurwe", "Mata", "Gicurasi", "Kamena", "Nyakanga", "Kanama", "Nzeli", "Ukwakira", "Ugushyingo", "Ukuboza", ""],
                        namesAbbr: ["Mut", "Gas", "Wer", "Mat", "Gic", "Kam", "Nya", "Kan", "Nze", "Ukwa", "Ugu", "Uku", ""]
                    },
                    AM: ["saa moya z.m.", "saa moya z.m.", "SAA MOYA Z.M."],
                    PM: ["saa moya z.n.", "saa moya z.n.", "SAA MOYA Z.N."],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                }
            }
        }],
    "wo-SN": ["wo-SN", "default", {
            name: "wo-SN",
            englishName: "Wolof (Senegal)",
            nativeName: "Wolof (Sénégal)",
            language: "wo",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "XOF"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "prs-AF": ["prs-AF", "default", {
            name: "prs-AF",
            englishName: "Dari (Afghanistan)",
            nativeName: "درى (افغانستان)",
            language: "prs",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["%n-", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$n-", "$n"],
                    symbol: "؋"
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    firstDay: 5,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    firstDay: 5,
                    days: {
                        names: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګاښ", "زمرى", "وږى", "تله", "لړم", "ليندۍ", "مرغومى", ""],
                        namesAbbr: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګاښ", "زمرى", "وږى", "تله", "لړم", "ليندۍ", "مرغومى", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "ل.ه", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy, dd, MMMM, dddd",
                        f: "yyyy, dd, MMMM, dddd h:mm tt",
                        F: "yyyy, dd, MMMM, dddd h:mm:ss tt",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gd-GB": ["gd-GB", "default", {
            name: "gd-GB",
            englishName: "Scottish Gaelic (United Kingdom)",
            nativeName: "Gàidhlig (An Rìoghachd Aonaichte)",
            language: "gd",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "£"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Didòmhnaich", "Diluain", "Dimàirt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne"],
                        namesAbbr: ["Dòm", "Lua", "Mài", "Cia", "Ard", "Hao", "Sat"],
                        namesShort: ["D", "L", "M", "C", "A", "H", "S"]
                    },
                    months: {
                        names: ["Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd", ""],
                        namesAbbr: ["Fao", "Gea", "Màr", "Gib", "Cèi", "Ògm", "Iuc", "Lùn", "Sul", "Dàm", "Sam", "Dùb", ""]
                    },
                    AM: ["m", "m", "M"],
                    PM: ["f", "f", "F"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-IQ": ["ar-IQ", "default", {
            name: "ar-IQ",
            englishName: "Arabic (Iraq)",
            nativeName: "العربية (العراق)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "د.ع.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "zh-CN": ["zh-CN", "default", {
            name: "zh-CN",
            englishName: "Chinese (Simplified, PRC)",
            nativeName: "中文(中华人民共和国)",
            language: "zh-CHS",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "de-CH": ["de-CH", "default", {
            name: "de-CH",
            englishName: "German (Switzerland)",
            nativeName: "Deutsch (Schweiz)",
            language: "de",
            numberFormat: {
                ",": "'",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "Fr."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "en-GB": ["en-GB", "default", {
            name: "en-GB",
            englishName: "English (United Kingdom)",
            nativeName: "English (United Kingdom)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "£"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-MX": ["es-MX", "default", {
            name: "es-MX",
            englishName: "Spanish (Mexico)",
            nativeName: "Español (México)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fr-BE": ["fr-BE", "default", {
            name: "fr-BE",
            englishName: "French (Belgium)",
            nativeName: "français (Belgique)",
            language: "fr",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "it-CH": ["it-CH", "default", {
            name: "it-CH",
            englishName: "Italian (Switzerland)",
            nativeName: "italiano (Svizzera)",
            language: "it",
            numberFormat: {
                ",": "'",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "fr."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"],
                        namesAbbr: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
                        namesShort: ["do", "lu", "ma", "me", "gi", "ve", "sa"]
                    },
                    months: {
                        names: ["gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""],
                        namesAbbr: ["gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "nl-BE": ["nl-BE", "default", {
            name: "nl-BE",
            englishName: "Dutch (Belgium)",
            nativeName: "Nederlands (België)",
            language: "nl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"],
                        namesAbbr: ["zo", "ma", "di", "wo", "do", "vr", "za"],
                        namesShort: ["zo", "ma", "di", "wo", "do", "vr", "za"]
                    },
                    months: {
                        names: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd d MMMM yyyy H:mm",
                        F: "dddd d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "nn-NO": ["nn-NO", "default", {
            name: "nn-NO",
            englishName: "Norwegian, Nynorsk (Norway)",
            nativeName: "norsk, nynorsk (Noreg)",
            language: "nn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "måndag", "tysdag", "onsdag", "torsdag", "fredag", "laurdag"],
                        namesAbbr: ["sø", "må", "ty", "on", "to", "fr", "la"],
                        namesShort: ["sø", "må", "ty", "on", "to", "fr", "la"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "pt-PT": ["pt-PT", "default", {
            name: "pt-PT",
            englishName: "Portuguese (Portugal)",
            nativeName: "português (Portugal)",
            language: "pt",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"],
                        namesAbbr: ["dom", "seg", "ter", "qua", "qui", "sex", "sáb"],
                        namesShort: ["D", "S", "T", "Q", "Q", "S", "S"]
                    },
                    months: {
                        names: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro", ""],
                        namesAbbr: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dddd, d' de 'MMMM' de 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' de 'MMMM' de 'yyyy HH:mm",
                        F: "dddd, d' de 'MMMM' de 'yyyy HH:mm:ss",
                        M: "d/M",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Latn-CS": ["sr-Latn-CS", "default", {
            name: "sr-Latn-CS",
            englishName: "Serbian (Latin, Serbia and Montenegro (Former))",
            nativeName: "srpski (Srbija i Crna Gora (Prethodno))",
            language: "sr-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Din."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sv-FI": ["sv-FI", "default", {
            name: "sv-FI",
            englishName: "Swedish (Finland)",
            nativeName: "svenska (Finland)",
            language: "sv",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"],
                        namesAbbr: ["sö", "må", "ti", "on", "to", "fr", "lö"],
                        namesShort: ["sö", "må", "ti", "on", "to", "fr", "lö"]
                    },
                    months: {
                        names: ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "'den 'd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "'den 'd MMMM yyyy HH:mm",
                        F: "'den 'd MMMM yyyy HH:mm:ss",
                        M: "'den 'd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "az-Cyrl-AZ": ["az-Cyrl-AZ", "default", {
            name: "az-Cyrl-AZ",
            englishName: "Azeri (Cyrillic, Azerbaijan)",
            nativeName: "Азәрбајҹан (Азәрбајҹан)",
            language: "az-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "ман."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Базар", "Базар ертәси", "Чәршәнбә ахшамы", "Чәршәнбә", "Ҹүмә ахшамы", "Ҹүмә", "Шәнбә"],
                        namesAbbr: ["Б", "Бе", "Ча", "Ч", "Ҹа", "Ҹ", "Ш"],
                        namesShort: ["Б", "Бе", "Ча", "Ч", "Ҹа", "Ҹ", "Ш"]
                    },
                    months: {
                        names: ["Јанвар", "Феврал", "Март", "Апрел", "Мај", "Ијун", "Ијул", "Август", "Сентјабр", "Октјабр", "Нојабр", "Декабр", ""],
                        namesAbbr: ["Јан", "Фев", "Мар", "Апр", "Мај", "Ијун", "Ијул", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["јанвар", "феврал", "март", "апрел", "мај", "ијун", "ијул", "август", "сентјабр", "октјабр", "нојабр", "декабр", ""],
                        namesAbbr: ["Јан", "Фев", "Мар", "Апр", "мая", "ијун", "ијул", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "dsb-DE": ["dsb-DE", "default", {
            name: "dsb-DE",
            englishName: "Lower Sorbian (Germany)",
            nativeName: "dolnoserbšćina (Nimska)",
            language: "dsb",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["njeźela", "ponjeźele", "wałtora", "srjoda", "stwortk", "pětk", "sobota"],
                        namesAbbr: ["nje", "pon", "wał", "srj", "stw", "pět", "sob"],
                        namesShort: ["n", "p", "w", "s", "s", "p", "s"]
                    },
                    months: {
                        names: ["januar", "februar", "měrc", "apryl", "maj", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "maj", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["januara", "februara", "měrca", "apryla", "maja", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "maj", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "po Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "dddd, 'dnja' d. MMMM yyyy",
                        t: "H.mm 'goź.'",
                        T: "H:mm:ss",
                        f: "dddd, 'dnja' d. MMMM yyyy H.mm 'goź.'",
                        F: "dddd, 'dnja' d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "se-SE": ["se-SE", "default", {
            name: "se-SE",
            englishName: "Sami, Northern (Sweden)",
            nativeName: "davvisámegiella (Ruoŧŧa)",
            language: "se",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["sotnabeaivi", "mánnodat", "disdat", "gaskavahkku", "duorastat", "bearjadat", "lávvardat"],
                        namesAbbr: ["sotn", "mán", "dis", "gask", "duor", "bear", "láv"],
                        namesShort: ["s", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđajagimánu", "guovvamánu", "njukčamánu", "cuoŋománu", "miessemánu", "geassemánu", "suoidnemánu", "borgemánu", "čakčamánu", "golggotmánu", "skábmamánu", "juovlamánu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ga-IE": ["ga-IE", "default", {
            name: "ga-IE",
            englishName: "Irish (Ireland)",
            nativeName: "Gaeilge (Éire)",
            language: "ga",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Dé Domhnaigh", "Dé Luain", "Dé Máirt", "Dé Céadaoin", "Déardaoin", "Dé hAoine", "Dé Sathairn"],
                        namesAbbr: ["Domh", "Luan", "Máir", "Céad", "Déar", "Aoi", "Sath"],
                        namesShort: ["Do", "Lu", "Má", "Cé", "De", "Ao", "Sa"]
                    },
                    months: {
                        names: ["Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", "Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig", ""],
                        namesAbbr: ["Ean", "Feabh", "Már", "Aib", "Bealt", "Meith", "Iúil", "Lún", "M.Fómh", "D.Fómh", "Samh", "Noll", ""]
                    },
                    AM: ["r.n.", "r.n.", "R.N."],
                    PM: ["i.n.", "i.n.", "I.N."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ms-BN": ["ms-BN", "default", {
            name: "ms-BN",
            englishName: "Malay (Brunei Darussalam)",
            nativeName: "Bahasa Melayu (Brunei Darussalam)",
            language: "ms",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    decimals: 0,
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesAbbr: ["Ahad", "Isnin", "Sel", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesShort: ["A", "I", "S", "R", "K", "J", "S"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""],
                        namesAbbr: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogos", "Sept", "Okt", "Nov", "Dis", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM yyyy H:mm",
                        F: "dd MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "uz-Cyrl-UZ": ["uz-Cyrl-UZ", "default", {
            name: "uz-Cyrl-UZ",
            englishName: "Uzbek (Cyrillic, Uzbekistan)",
            nativeName: "Ўзбек (Ўзбекистон)",
            language: "uz-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "сўм"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["якшанба", "душанба", "сешанба", "чоршанба", "пайшанба", "жума", "шанба"],
                        namesAbbr: ["якш", "дш", "сш", "чш", "пш", "ж", "ш"],
                        namesShort: ["я", "д", "с", "ч", "п", "ж", "ш"]
                    },
                    months: {
                        names: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["январ", "феврал", "март", "апрел", "май", "июн", "июл", "август", "сентябр", "октябр", "ноябр", "декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "мая", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "yyyy 'йил' d-MMMM",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'йил' d-MMMM HH:mm",
                        F: "yyyy 'йил' d-MMMM HH:mm:ss",
                        M: "d-MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "bn-BD": ["bn-BD", "default", {
            name: "bn-BD",
            englishName: "Bengali (Bangladesh)",
            nativeName: "বাংলা (বাংলাদেশ)",
            language: "bn",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-%n", "%n"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "৳"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    ":": ".",
                    firstDay: 1,
                    days: {
                        names: ["রবিবার", "সোমবার", "মঙ্গলবার", "বুধবার", "বৃহস্পতিবার", "শুক্রবার", "শনিবার"],
                        namesAbbr: ["রবি.", "সোম.", "মঙ্গল.", "বুধ.", "বৃহস্পতি.", "শুক্র.", "শনি."],
                        namesShort: ["র", "স", "ম", "ব", "ব", "শ", "শ"]
                    },
                    months: {
                        names: ["জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""],
                        namesAbbr: ["জানু.", "ফেব্রু.", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগ.", "সেপ্টে.", "অক্টো.", "নভে.", "ডিসে.", ""]
                    },
                    AM: ["পুর্বাহ্ন", "পুর্বাহ্ন", "পুর্বাহ্ন"],
                    PM: ["অপরাহ্ন", "অপরাহ্ন", "অপরাহ্ন"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH.mm",
                        T: "HH.mm.ss",
                        f: "dd MMMM yyyy HH.mm",
                        F: "dd MMMM yyyy HH.mm.ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "mn-Mong-CN": ["mn-Mong-CN", "default", {
            name: "mn-Mong-CN",
            englishName: "Mongolian (Traditional Mongolian, PRC)",
            nativeName: "ᠮᠤᠨᠭᠭᠤᠯ ᠬᠡᠯᠡ (ᠪᠦᠭᠦᠳᠡ ᠨᠠᠢᠷᠠᠮᠳᠠᠬᠤ ᠳᠤᠮᠳᠠᠳᠤ ᠠᠷᠠᠳ ᠣᠯᠣᠰ)",
            language: "mn-Mong",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ"],
                        namesAbbr: ["ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ"],
                        namesShort: ["ᠡ‍", "ᠨᠢ‍", "ᠬᠣ‍", "ᠭᠤ‍", "ᠳᠥ‍", "ᠲᠠ‍", "ᠵᠢ‍"]
                    },
                    months: {
                        names: ["ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", ""],
                        namesAbbr: ["ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ᠣᠨ ᠲᠣᠭᠠᠯᠠᠯ ᠤᠨ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm",
                        F: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm:ss",
                        M: "M'ᠰᠠᠷ᠎ᠠ' d'ᠡᠳᠦᠷ'",
                        Y: "yyyy'ᠣᠨ' M'ᠰᠠᠷ᠎ᠠ'"
                    }
                }
            }
        }],
    "iu-Latn-CA": ["iu-Latn-CA", "default", {
            name: "iu-Latn-CA",
            englishName: "Inuktitut (Latin, Canada)",
            nativeName: "Inuktitut (Kanatami)",
            language: "iu-Latn",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Naattiinguja", "Naggajjau", "Aippiq", "Pingatsiq", "Sitammiq", "Tallirmiq", "Sivataarvik"],
                        namesAbbr: ["Nat", "Nag", "Aip", "Pi", "Sit", "Tal", "Siv"],
                        namesShort: ["N", "N", "A", "P", "S", "T", "S"]
                    },
                    months: {
                        names: ["Jaannuari", "Viivvuari", "Maatsi", "Iipuri", "Mai", "Juuni", "Julai", "Aaggiisi", "Sitipiri", "Utupiri", "Nuvipiri", "Tisipiri", ""],
                        namesAbbr: ["Jan", "Viv", "Mas", "Ipu", "Mai", "Jun", "Jul", "Agi", "Sii", "Uut", "Nuv", "Tis", ""]
                    },
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "ddd, MMMM dd,yyyy",
                        f: "ddd, MMMM dd,yyyy h:mm tt",
                        F: "ddd, MMMM dd,yyyy h:mm:ss tt"
                    }
                }
            }
        }],
    "tzm-Latn-DZ": ["tzm-Latn-DZ", "default", {
            name: "tzm-Latn-DZ",
            englishName: "Tamazight (Latin, Algeria)",
            nativeName: "Tamazight (Djazaïr)",
            language: "tzm-Latn",
            numberFormat: {
                pattern: ["n-"],
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    symbol: "DZD"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 6,
                    days: {
                        names: ["Acer", "Arime", "Aram", "Ahad", "Amhadh", "Sem", "Sedh"],
                        namesAbbr: ["Ace", "Ari", "Ara", "Aha", "Amh", "Sem", "Sed"],
                        namesShort: ["Ac", "Ar", "Ar", "Ah", "Am", "Se", "Se"]
                    },
                    months: {
                        names: ["Yenayer", "Furar", "Maghres", "Yebrir", "Mayu", "Yunyu", "Yulyu", "Ghuct", "Cutenber", "Ktuber", "Wambir", "Dujanbir", ""],
                        namesAbbr: ["Yen", "Fur", "Mag", "Yeb", "May", "Yun", "Yul", "Ghu", "Cut", "Ktu", "Wam", "Duj", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "quz-EC": ["quz-EC", "default", {
            name: "quz-EC",
            englishName: "Quechua (Ecuador)",
            nativeName: "runasimi (Ecuador)",
            language: "quz",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["intichaw", "killachaw", "atipachaw", "quyllurchaw", "Ch' askachaw", "Illapachaw", "k'uychichaw"],
                        namesAbbr: ["int", "kil", "ati", "quy", "Ch'", "Ill", "k'u"],
                        namesShort: ["d", "k", "a", "m", "h", "b", "k"]
                    },
                    months: {
                        names: ["Qulla puquy", "Hatun puquy", "Pauqar waray", "ayriwa", "Aymuray", "Inti raymi", "Anta Sitwa", "Qhapaq Sitwa", "Uma raymi", "Kantaray", "Ayamarq'a", "Kapaq Raymi", ""],
                        namesAbbr: ["Qul", "Hat", "Pau", "ayr", "Aym", "Int", "Ant", "Qha", "Uma", "Kan", "Aya", "Kap", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "ar-EG": ["ar-EG", "default", {
            name: "ar-EG",
            englishName: "Arabic (Egypt)",
            nativeName: "العربية (مصر)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ج.م.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "zh-HK": ["zh-HK", "default", {
            name: "zh-HK",
            englishName: "Chinese (Traditional, Hong Kong S.A.R.)",
            nativeName: "中文(香港特別行政區)",
            language: "zh-CHT",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    symbol: "HK$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "de-AT": ["de-AT", "default", {
            name: "de-AT",
            englishName: "German (Austria)",
            nativeName: "Deutsch (Österreich)",
            language: "de",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Jänner", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jän", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, dd. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, dd. MMMM yyyy HH:mm",
                        F: "dddd, dd. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "en-AU": ["en-AU", "default", {
            name: "en-AU",
            englishName: "English (Australia)",
            nativeName: "English (Australia)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "dddd, d MMMM yyyy",
                        f: "dddd, d MMMM yyyy h:mm tt",
                        F: "dddd, d MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-ES": ["es-ES", "default", {
            name: "es-ES",
            englishName: "Spanish (Spain, International Sort)",
            nativeName: "Español (España, alfabetización internacional)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fr-CA": ["fr-CA", "default", {
            name: "fr-CA",
            englishName: "French (Canada)",
            nativeName: "français (Canada)",
            language: "fr",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["(n $)", "n $"],
                    ",": " ",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "d MMMM"
                    }
                }
            }
        }],
    "sr-Cyrl-CS": ["sr-Cyrl-CS", "default", {
            name: "sr-Cyrl-CS",
            englishName: "Serbian (Cyrillic, Serbia and Montenegro (Former))",
            nativeName: "српски (Србија и Црна Гора (Претходно))",
            language: "sr-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Дин."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["не", "по", "ут", "ср", "че", "пе", "су"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "se-FI": ["se-FI", "default", {
            name: "se-FI",
            englishName: "Sami, Northern (Finland)",
            nativeName: "davvisámegiella (Suopma)",
            language: "se",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sotnabeaivi", "vuossárga", "maŋŋebárga", "gaskavahkku", "duorastat", "bearjadat", "lávvardat"],
                        namesAbbr: ["sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"],
                        namesShort: ["s", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđajagimánu", "guovvamánu", "njukčamánu", "cuoŋománu", "miessemánu", "geassemánu", "suoidnemánu", "borgemánu", "čakčamánu", "golggotmánu", "skábmamánu", "juovlamánu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "MMMM d'. b. 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d'. b. 'yyyy H:mm",
                        F: "MMMM d'. b. 'yyyy H:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "quz-PE": ["quz-PE", "default", {
            name: "quz-PE",
            englishName: "Quechua (Peru)",
            nativeName: "runasimi (Piruw)",
            language: "quz",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    symbol: "S/."
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["intichaw", "killachaw", "atipachaw", "quyllurchaw", "Ch' askachaw", "Illapachaw", "k'uychichaw"],
                        namesAbbr: ["int", "kil", "ati", "quy", "Ch'", "Ill", "k'u"],
                        namesShort: ["d", "k", "a", "m", "h", "b", "k"]
                    },
                    months: {
                        names: ["Qulla puquy", "Hatun puquy", "Pauqar waray", "ayriwa", "Aymuray", "Inti raymi", "Anta Sitwa", "Qhapaq Sitwa", "Uma raymi", "Kantaray", "Ayamarq'a", "Kapaq Raymi", ""],
                        namesAbbr: ["Qul", "Hat", "Pau", "ayr", "Aym", "Int", "Ant", "Qha", "Uma", "Kan", "Aya", "Kap", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "ar-LY": ["ar-LY", "default", {
            name: "ar-LY",
            englishName: "Arabic (Libya)",
            nativeName: "العربية (ليبيا)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$n"],
                    decimals: 3,
                    symbol: "د.ل.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "zh-SG": ["zh-SG", "default", {
            name: "zh-SG",
            englishName: "Chinese (Simplified, Singapore)",
            nativeName: "中文(新加坡)",
            language: "zh-CHS",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "yyyy'年'M'月'd'日'",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "yyyy'年'M'月'd'日' tt h:mm",
                        F: "yyyy'年'M'月'd'日' tt h:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "de-LU": ["de-LU", "default", {
            name: "de-LU",
            englishName: "German (Luxembourg)",
            nativeName: "Deutsch (Luxemburg)",
            language: "de",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "en-CA": ["en-CA", "default", {
            name: "en-CA",
            englishName: "English (Canada)",
            nativeName: "English (Canada)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "MMMM-dd-yy",
                        f: "MMMM-dd-yy h:mm tt",
                        F: "MMMM-dd-yy h:mm:ss tt"
                    }
                }
            }
        }],
    "es-GT": ["es-GT", "default", {
            name: "es-GT",
            englishName: "Spanish (Guatemala)",
            nativeName: "Español (Guatemala)",
            language: "es",
            numberFormat: {
                currency: {
                    symbol: "Q"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fr-CH": ["fr-CH", "default", {
            name: "fr-CH",
            englishName: "French (Switzerland)",
            nativeName: "français (Suisse)",
            language: "fr",
            numberFormat: {
                ",": "'",
                percent: {
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "fr."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hr-BA": ["hr-BA", "default", {
            name: "hr-BA",
            englishName: "Croatian (Latin, Bosnia and Herzegovina)",
            nativeName: "hrvatski (Bosna i Hercegovina)",
            language: "hr",
            numberFormat: {
                pattern: ["- n"],
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "KM"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["siječanj", "veljača", "ožujak", "travanj", "svibanj", "lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    monthsGenitive: {
                        names: ["siječnja", "veljače", "ožujka", "travnja", "svibnja", "lipnja", "srpnja", "kolovoza", "rujna", "listopada", "studenog", "prosinca", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy.",
                        D: "d. MMMM yyyy.",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy. H:mm",
                        F: "d. MMMM yyyy. H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "smj-NO": ["smj-NO", "default", {
            name: "smj-NO",
            englishName: "Sami, Lule (Norway)",
            nativeName: "julevusámegiella (Vuodna)",
            language: "smj",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sådnåbiejvve", "mánnodahka", "dijstahka", "gasskavahkko", "duorastahka", "bierjjedahka", "lávvodahka"],
                        namesAbbr: ["såd", "mán", "dis", "gas", "duor", "bier", "láv"],
                        namesShort: ["s", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ådåjakmánno", "guovvamánno", "sjnjuktjamánno", "vuoratjismánno", "moarmesmánno", "biehtsemánno", "sjnjilltjamánno", "bårggemánno", "ragátmánno", "gålgådismánno", "basádismánno", "javllamánno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    monthsGenitive: {
                        names: ["ådåjakmáno", "guovvamáno", "sjnjuktjamáno", "vuoratjismáno", "moarmesmáno", "biehtsemáno", "sjnjilltjamáno", "bårggemáno", "ragátmáno", "gålgådismáno", "basádismáno", "javllamáno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-DZ": ["ar-DZ", "default", {
            name: "ar-DZ",
            englishName: "Arabic (Algeria)",
            nativeName: "العربية (الجزائر)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "د.ج.‏"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MM/yyyy H:mm",
                        F: "dd/MM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MMMM/yyyy H:mm",
                        F: "dd/MMMM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                }
            }
        }],
    "zh-MO": ["zh-MO", "default", {
            name: "zh-MO",
            englishName: "Chinese (Traditional, Macao S.A.R.)",
            nativeName: "中文(澳門特別行政區)",
            language: "zh-CHT",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    symbol: "MOP"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "de-LI": ["de-LI", "default", {
            name: "de-LI",
            englishName: "German (Liechtenstein)",
            nativeName: "Deutsch (Liechtenstein)",
            language: "de",
            numberFormat: {
                ",": "'",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "CHF"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "en-NZ": ["en-NZ", "default", {
            name: "en-NZ",
            englishName: "English (New Zealand)",
            nativeName: "English (New Zealand)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "dddd, d MMMM yyyy",
                        f: "dddd, d MMMM yyyy h:mm tt",
                        F: "dddd, d MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-CR": ["es-CR", "default", {
            name: "es-CR",
            englishName: "Spanish (Costa Rica)",
            nativeName: "Español (Costa Rica)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    ",": ".",
                    ".": ",",
                    symbol: "₡"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fr-LU": ["fr-LU", "default", {
            name: "fr-LU",
            englishName: "French (Luxembourg)",
            nativeName: "français (Luxembourg)",
            language: "fr",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "bs-Latn-BA": ["bs-Latn-BA", "default", {
            name: "bs-Latn-BA",
            englishName: "Bosnian (Latin, Bosnia and Herzegovina)",
            nativeName: "bosanski (Bosna i Hercegovina)",
            language: "bs-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "KM"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "juni", "juli", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "smj-SE": ["smj-SE", "default", {
            name: "smj-SE",
            englishName: "Sami, Lule (Sweden)",
            nativeName: "julevusámegiella (Svierik)",
            language: "smj",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ájllek", "mánnodahka", "dijstahka", "gasskavahkko", "duorastahka", "bierjjedahka", "lávvodahka"],
                        namesAbbr: ["ájl", "mán", "dis", "gas", "duor", "bier", "láv"],
                        namesShort: ["á", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ådåjakmánno", "guovvamánno", "sjnjuktjamánno", "vuoratjismánno", "moarmesmánno", "biehtsemánno", "sjnjilltjamánno", "bårggemánno", "ragátmánno", "gålgådismánno", "basádismánno", "javllamánno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    monthsGenitive: {
                        names: ["ådåjakmáno", "guovvamáno", "sjnjuktjamáno", "vuoratjismáno", "moarmesmáno", "biehtsemáno", "sjnjilltjamáno", "bårggemáno", "ragátmáno", "gålgådismáno", "basádismáno", "javllamáno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-MA": ["ar-MA", "default", {
            name: "ar-MA",
            englishName: "Arabic (Morocco)",
            nativeName: "العربية (المملكة المغربية)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "د.م.‏"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "ماي", "يونيو", "يوليوز", "غشت", "شتنبر", "أكتوبر", "نونبر", "دجنبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "ماي", "يونيو", "يوليوز", "غشت", "شتنبر", "أكتوبر", "نونبر", "دجنبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MM/yyyy H:mm",
                        F: "dd/MM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MMMM/yyyy H:mm",
                        F: "dd/MMMM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                }
            }
        }],
    "en-IE": ["en-IE", "default", {
            name: "en-IE",
            englishName: "English (Ireland)",
            nativeName: "English (Ireland)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-PA": ["es-PA", "default", {
            name: "es-PA",
            englishName: "Spanish (Panama)",
            nativeName: "Español (Panamá)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["($ n)", "$ n"],
                    symbol: "B/."
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fr-MC": ["fr-MC", "default", {
            name: "fr-MC",
            englishName: "French (Monaco)",
            nativeName: "français (Principauté de Monaco)",
            language: "fr",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sr-Latn-BA": ["sr-Latn-BA", "default", {
            name: "sr-Latn-BA",
            englishName: "Serbian (Latin, Bosnia and Herzegovina)",
            nativeName: "srpski (Bosna i Hercegovina)",
            language: "sr-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "KM"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sma-NO": ["sma-NO", "default", {
            name: "sma-NO",
            englishName: "Sami, Southern (Norway)",
            nativeName: "åarjelsaemiengiele (Nöörje)",
            language: "sma",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["aejlege", "måanta", "dæjsta", "gaskevåhkoe", "duarsta", "bearjadahke", "laavvardahke"],
                        namesAbbr: ["aej", "måa", "dæj", "gask", "duar", "bearj", "laav"],
                        namesShort: ["a", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["tsïengele", "goevte", "njoktje", "voerhtje", "suehpede", "ruffie", "snjaltje", "mïetske", "skïerede", "golke", "rahka", "goeve", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    monthsGenitive: {
                        names: ["tsïengelen", "goevten", "njoktjen", "voerhtjen", "suehpeden", "ruffien", "snjaltjen", "mïetsken", "skïereden", "golken", "rahkan", "goeven", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-TN": ["ar-TN", "default", {
            name: "ar-TN",
            englishName: "Arabic (Tunisia)",
            nativeName: "العربية (تونس)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$ n"],
                    decimals: 3,
                    symbol: "د.ت.‏"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MM/yyyy H:mm",
                        F: "dd/MM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MMMM/yyyy H:mm",
                        F: "dd/MMMM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                }
            }
        }],
    "en-ZA": ["en-ZA", "default", {
            name: "en-ZA",
            englishName: "English (South Africa)",
            nativeName: "English (South Africa)",
            numberFormat: {
                ",": " ",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " "
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-DO": ["es-DO", "default", {
            name: "es-DO",
            englishName: "Spanish (Dominican Republic)",
            nativeName: "Español (República Dominicana)",
            language: "es",
            numberFormat: {
                currency: {
                    symbol: "RD$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Cyrl-BA": ["sr-Cyrl-BA", "default", {
            name: "sr-Cyrl-BA",
            englishName: "Serbian (Cyrillic, Bosnia and Herzegovina)",
            nativeName: "српски (Босна и Херцеговина)",
            language: "sr-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "КМ"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["н", "п", "у", "с", "ч", "п", "с"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "sma-SE": ["sma-SE", "default", {
            name: "sma-SE",
            englishName: "Sami, Southern (Sweden)",
            nativeName: "åarjelsaemiengiele (Sveerje)",
            language: "sma",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["aejlege", "måanta", "dæjsta", "gaskevåhkoe", "duarsta", "bearjadahke", "laavvardahke"],
                        namesAbbr: ["aej", "måa", "dæj", "gask", "duar", "bearj", "laav"],
                        namesShort: ["a", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["tsïengele", "goevte", "njoktje", "voerhtje", "suehpede", "ruffie", "snjaltje", "mïetske", "skïerede", "golke", "rahka", "goeve", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    monthsGenitive: {
                        names: ["tsïengelen", "goevten", "njoktjen", "voerhtjen", "suehpeden", "ruffien", "snjaltjen", "mïetsken", "skïereden", "golken", "rahkan", "goeven", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-OM": ["ar-OM", "default", {
            name: "ar-OM",
            englishName: "Arabic (Oman)",
            nativeName: "العربية (عمان)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    decimals: 3,
                    symbol: "ر.ع.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-JM": ["en-JM", "default", {
            name: "en-JM",
            englishName: "English (Jamaica)",
            nativeName: "English (Jamaica)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "J$"
                }
            },
            calendars: {
                standard: {
                    patterns: {
                        d: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "es-VE": ["es-VE", "default", {
            name: "es-VE",
            englishName: "Spanish (Bolivarian Republic of Venezuela)",
            nativeName: "Español (Republica Bolivariana de Venezuela)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "Bs. F."
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "bs-Cyrl-BA": ["bs-Cyrl-BA", "default", {
            name: "bs-Cyrl-BA",
            englishName: "Bosnian (Cyrillic, Bosnia and Herzegovina)",
            nativeName: "босански (Босна и Херцеговина)",
            language: "bs-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "КМ"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недјеља", "понедјељак", "уторак", "сриједа", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["н", "п", "у", "с", "ч", "п", "с"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "sms-FI": ["sms-FI", "default", {
            name: "sms-FI",
            englishName: "Sami, Skolt (Finland)",
            nativeName: "sääm´ǩiõll (Lää´ddjânnam)",
            language: "sms",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pâ´sspei´vv", "vuõssargg", "mââibargg", "seärad", "nelljdpei´vv", "piâtnâc", "sue´vet"],
                        namesAbbr: ["pâ", "vu", "mâ", "se", "ne", "pi", "su"],
                        namesShort: ["p", "v", "m", "s", "n", "p", "s"]
                    },
                    months: {
                        names: ["ođđee´jjmään", "tä´lvvmään", "pâ´zzlâšttammään", "njuhččmään", "vue´ssmään", "ǩie´ssmään", "suei´nnmään", "på´rǧǧmään", "čõhččmään", "kålggmään", "skamm´mään", "rosttovmään", ""],
                        namesAbbr: ["ođjm", "tä´lvv", "pâzl", "njuh", "vue", "ǩie", "suei", "på´r", "čõh", "kålg", "ska", "rost", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđee´jjmannu", "tä´lvvmannu", "pâ´zzlâšttammannu", "njuhččmannu", "vue´ssmannu", "ǩie´ssmannu", "suei´nnmannu", "på´rǧǧmannu", "čõhččmannu", "kålggmannu", "skamm´mannu", "rosttovmannu", ""],
                        namesAbbr: ["ođjm", "tä´lvv", "pâzl", "njuh", "vue", "ǩie", "suei", "på´r", "čõh", "kålg", "ska", "rost", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "MMMM d'. p. 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d'. p. 'yyyy H:mm",
                        F: "MMMM d'. p. 'yyyy H:mm:ss",
                        M: "MMMM d'. p. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-YE": ["ar-YE", "default", {
            name: "ar-YE",
            englishName: "Arabic (Yemen)",
            nativeName: "العربية (اليمن)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ر.ي.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-029": ["en-029", "default", {
            name: "en-029",
            englishName: "English (Caribbean)",
            nativeName: "English (Caribbean)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    patterns: {
                        d: "MM/dd/yyyy"
                    }
                }
            }
        }],
    "es-CO": ["es-CO", "default", {
            name: "es-CO",
            englishName: "Spanish (Colombia)",
            nativeName: "Español (Colombia)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Latn-RS": ["sr-Latn-RS", "default", {
            name: "sr-Latn-RS",
            englishName: "Serbian (Latin, Serbia)",
            nativeName: "srpski (Srbija)",
            language: "sr-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Din."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "smn-FI": ["smn-FI", "default", {
            name: "smn-FI",
            englishName: "Sami, Inari (Finland)",
            nativeName: "sämikielâ (Suomâ)",
            language: "smn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pasepeivi", "vuossargâ", "majebargâ", "koskokko", "tuorâstâh", "vástuppeivi", "lávárdâh"],
                        namesAbbr: ["pa", "vu", "ma", "ko", "tu", "vá", "lá"],
                        namesShort: ["p", "v", "m", "k", "t", "v", "l"]
                    },
                    months: {
                        names: ["uđđâivemáánu", "kuovâmáánu", "njuhčâmáánu", "cuáŋuimáánu", "vyesimáánu", "kesimáánu", "syeinimáánu", "porgemáánu", "čohčâmáánu", "roovvâdmáánu", "skammâmáánu", "juovlâmáánu", ""],
                        namesAbbr: ["uđiv", "kuov", "njuh", "cuoŋ", "vyes", "kesi", "syei", "porg", "čoh", "roov", "ska", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "MMMM d'. p. 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d'. p. 'yyyy H:mm",
                        F: "MMMM d'. p. 'yyyy H:mm:ss",
                        M: "MMMM d'. p. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-SY": ["ar-SY", "default", {
            name: "ar-SY",
            englishName: "Arabic (Syria)",
            nativeName: "العربية (سوريا)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ل.س.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-BZ": ["en-BZ", "default", {
            name: "en-BZ",
            englishName: "English (Belize)",
            nativeName: "English (Belize)",
            numberFormat: {
                currency: {
                    groupSizes: [3, 0],
                    symbol: "BZ$"
                }
            },
            calendars: {
                standard: {
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd MMMM yyyy hh:mm tt",
                        F: "dddd, dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-PE": ["es-PE", "default", {
            name: "es-PE",
            englishName: "Spanish (Peru)",
            nativeName: "Español (Perú)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["$ -n", "$ n"],
                    symbol: "S/."
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Cyrl-RS": ["sr-Cyrl-RS", "default", {
            name: "sr-Cyrl-RS",
            englishName: "Serbian (Cyrillic, Serbia)",
            nativeName: "српски (Србија)",
            language: "sr-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Дин."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["не", "по", "ут", "ср", "че", "пе", "су"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-JO": ["ar-JO", "default", {
            name: "ar-JO",
            englishName: "Arabic (Jordan)",
            nativeName: "العربية (الأردن)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$ n"],
                    decimals: 3,
                    symbol: "د.ا.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-TT": ["en-TT", "default", {
            name: "en-TT",
            englishName: "English (Trinidad and Tobago)",
            nativeName: "English (Trinidad y Tobago)",
            numberFormat: {
                currency: {
                    groupSizes: [3, 0],
                    symbol: "TT$"
                }
            },
            calendars: {
                standard: {
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd MMMM yyyy hh:mm tt",
                        F: "dddd, dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-AR": ["es-AR", "default", {
            name: "es-AR",
            englishName: "Spanish (Argentina)",
            nativeName: "Español (Argentina)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Latn-ME": ["sr-Latn-ME", "default", {
            name: "sr-Latn-ME",
            englishName: "Serbian (Latin, Montenegro)",
            nativeName: "srpski (Crna Gora)",
            language: "sr-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-LB": ["ar-LB", "default", {
            name: "ar-LB",
            englishName: "Arabic (Lebanon)",
            nativeName: "العربية (لبنان)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ل.ل.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-ZW": ["en-ZW", "default", {
            name: "en-ZW",
            englishName: "English (Zimbabwe)",
            nativeName: "English (Zimbabwe)",
            numberFormat: {
                currency: {
                    symbol: "Z$"
                }
            }
        }],
    "es-EC": ["es-EC", "default", {
            name: "es-EC",
            englishName: "Spanish (Ecuador)",
            nativeName: "Español (Ecuador)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Cyrl-ME": ["sr-Cyrl-ME", "default", {
            name: "sr-Cyrl-ME",
            englishName: "Serbian (Cyrillic, Montenegro)",
            nativeName: "српски (Црна Гора)",
            language: "sr-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["не", "по", "ут", "ср", "че", "пе", "су"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-KW": ["ar-KW", "default", {
            name: "ar-KW",
            englishName: "Arabic (Kuwait)",
            nativeName: "العربية (الكويت)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$ n"],
                    decimals: 3,
                    symbol: "د.ك.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-PH": ["en-PH", "default", {
            name: "en-PH",
            englishName: "English (Republic of the Philippines)",
            nativeName: "English (Philippines)",
            numberFormat: {
                currency: {
                    symbol: "Php"
                }
            }
        }],
    "es-CL": ["es-CL", "default", {
            name: "es-CL",
            englishName: "Spanish (Chile)",
            nativeName: "Español (Chile)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "ar-AE": ["ar-AE", "default", {
            name: "ar-AE",
            englishName: "Arabic (U.A.E.)",
            nativeName: "العربية (الإمارات العربية المتحدة)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "د.إ.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "es-UY": ["es-UY", "default", {
            name: "es-UY",
            englishName: "Spanish (Uruguay)",
            nativeName: "Español (Uruguay)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "$U"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "ar-BH": ["ar-BH", "default", {
            name: "ar-BH",
            englishName: "Arabic (Bahrain)",
            nativeName: "العربية (البحرين)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$ n"],
                    decimals: 3,
                    symbol: "د.ب.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "es-PY": ["es-PY", "default", {
            name: "es-PY",
            englishName: "Spanish (Paraguay)",
            nativeName: "Español (Paraguay)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "Gs"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "ar-QA": ["ar-QA", "default", {
            name: "ar-QA",
            englishName: "Arabic (Qatar)",
            nativeName: "العربية (قطر)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ر.ق.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-IN": ["en-IN", "default", {
            name: "en-IN",
            englishName: "English (India)",
            nativeName: "English (India)",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "Rs."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "es-BO": ["es-BO", "default", {
            name: "es-BO",
            englishName: "Spanish (Bolivia)",
            nativeName: "Español (Bolivia)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "$b"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "en-MY": ["en-MY", "default", {
            name: "en-MY",
            englishName: "English (Malaysia)",
            nativeName: "English (Malaysia)",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    symbol: "RM"
                }
            },
            calendars: {
                standard: {
                    days: {
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd, d MMMM, yyyy",
                        f: "dddd, d MMMM, yyyy h:mm tt",
                        F: "dddd, d MMMM, yyyy h:mm:ss tt",
                        M: "d MMMM"
                    }
                }
            }
        }],
    "es-SV": ["es-SV", "default", {
            name: "es-SV",
            englishName: "Spanish (El Salvador)",
            nativeName: "Español (El Salvador)",
            language: "es",
            numberFormat: {
                currency: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "en-SG": ["en-SG", "default", {
            name: "en-SG",
            englishName: "English (Singapore)",
            nativeName: "English (Singapore)",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                }
            },
            calendars: {
                standard: {
                    days: {
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd, d MMMM, yyyy",
                        f: "dddd, d MMMM, yyyy h:mm tt",
                        F: "dddd, d MMMM, yyyy h:mm:ss tt",
                        M: "d MMMM"
                    }
                }
            }
        }],
    "es-HN": ["es-HN", "default", {
            name: "es-HN",
            englishName: "Spanish (Honduras)",
            nativeName: "Español (Honduras)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 0],
                    symbol: "L."
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "es-NI": ["es-NI", "default", {
            name: "es-NI",
            englishName: "Spanish (Nicaragua)",
            nativeName: "Español (Nicaragua)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["($ n)", "$ n"],
                    groupSizes: [3, 0],
                    symbol: "C$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "es-PR": ["es-PR", "default", {
            name: "es-PR",
            englishName: "Spanish (Puerto Rico)",
            nativeName: "Español (Puerto Rico)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["($ n)", "$ n"],
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "es-US": ["es-US", "default", {
            name: "es-US",
            englishName: "Spanish (United States)",
            nativeName: "Español (Estados Unidos)",
            language: "es",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sa"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        M: "dd' de 'MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "bs-Cyrl": ["bs-Cyrl", "default", {
            name: "bs-Cyrl",
            englishName: "Bosnian (Cyrillic)",
            nativeName: "босански",
            language: "bs-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "КМ"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недјеља", "понедјељак", "уторак", "сриједа", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["н", "п", "у", "с", "ч", "п", "с"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "bs-Latn": ["bs-Latn", "default", {
            name: "bs-Latn",
            englishName: "Bosnian (Latin)",
            nativeName: "bosanski",
            language: "bs-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "KM"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "juni", "juli", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sr-Cyrl": ["sr-Cyrl", "default", {
            name: "sr-Cyrl",
            englishName: "Serbian (Cyrillic)",
            nativeName: "српски",
            language: "sr-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Дин."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["не", "по", "ут", "ср", "че", "пе", "су"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sr-Latn": ["sr-Latn", "default", {
            name: "sr-Latn",
            englishName: "Serbian (Latin)",
            nativeName: "srpski",
            language: "sr-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Din."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "smn": ["smn", "default", {
            name: "smn",
            englishName: "Sami (Inari)",
            nativeName: "sämikielâ",
            language: "smn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pasepeivi", "vuossargâ", "majebargâ", "koskokko", "tuorâstâh", "vástuppeivi", "lávárdâh"],
                        namesAbbr: ["pa", "vu", "ma", "ko", "tu", "vá", "lá"],
                        namesShort: ["p", "v", "m", "k", "t", "v", "l"]
                    },
                    months: {
                        names: ["uđđâivemáánu", "kuovâmáánu", "njuhčâmáánu", "cuáŋuimáánu", "vyesimáánu", "kesimáánu", "syeinimáánu", "porgemáánu", "čohčâmáánu", "roovvâdmáánu", "skammâmáánu", "juovlâmáánu", ""],
                        namesAbbr: ["uđiv", "kuov", "njuh", "cuoŋ", "vyes", "kesi", "syei", "porg", "čoh", "roov", "ska", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "MMMM d'. p. 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d'. p. 'yyyy H:mm",
                        F: "MMMM d'. p. 'yyyy H:mm:ss",
                        M: "MMMM d'. p. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "az-Cyrl": ["az-Cyrl", "default", {
            name: "az-Cyrl",
            englishName: "Azeri (Cyrillic)",
            nativeName: "Азәрбајҹан дили",
            language: "az-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "ман."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Базар", "Базар ертәси", "Чәршәнбә ахшамы", "Чәршәнбә", "Ҹүмә ахшамы", "Ҹүмә", "Шәнбә"],
                        namesAbbr: ["Б", "Бе", "Ча", "Ч", "Ҹа", "Ҹ", "Ш"],
                        namesShort: ["Б", "Бе", "Ча", "Ч", "Ҹа", "Ҹ", "Ш"]
                    },
                    months: {
                        names: ["Јанвар", "Феврал", "Март", "Апрел", "Мај", "Ијун", "Ијул", "Август", "Сентјабр", "Октјабр", "Нојабр", "Декабр", ""],
                        namesAbbr: ["Јан", "Фев", "Мар", "Апр", "Мај", "Ијун", "Ијул", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["јанвар", "феврал", "март", "апрел", "мај", "ијун", "ијул", "август", "сентјабр", "октјабр", "нојабр", "декабр", ""],
                        namesAbbr: ["Јан", "Фев", "Мар", "Апр", "мая", "ијун", "ијул", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sms": ["sms", "default", {
            name: "sms",
            englishName: "Sami (Skolt)",
            nativeName: "sääm´ǩiõll",
            language: "sms",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pâ´sspei´vv", "vuõssargg", "mââibargg", "seärad", "nelljdpei´vv", "piâtnâc", "sue´vet"],
                        namesAbbr: ["pâ", "vu", "mâ", "se", "ne", "pi", "su"],
                        namesShort: ["p", "v", "m", "s", "n", "p", "s"]
                    },
                    months: {
                        names: ["ođđee´jjmään", "tä´lvvmään", "pâ´zzlâšttammään", "njuhččmään", "vue´ssmään", "ǩie´ssmään", "suei´nnmään", "på´rǧǧmään", "čõhččmään", "kålggmään", "skamm´mään", "rosttovmään", ""],
                        namesAbbr: ["ođjm", "tä´lvv", "pâzl", "njuh", "vue", "ǩie", "suei", "på´r", "čõh", "kålg", "ska", "rost", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđee´jjmannu", "tä´lvvmannu", "pâ´zzlâšttammannu", "njuhččmannu", "vue´ssmannu", "ǩie´ssmannu", "suei´nnmannu", "på´rǧǧmannu", "čõhččmannu", "kålggmannu", "skamm´mannu", "rosttovmannu", ""],
                        namesAbbr: ["ođjm", "tä´lvv", "pâzl", "njuh", "vue", "ǩie", "suei", "på´r", "čõh", "kålg", "ska", "rost", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "MMMM d'. p. 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d'. p. 'yyyy H:mm",
                        F: "MMMM d'. p. 'yyyy H:mm:ss",
                        M: "MMMM d'. p. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "zh": ["zh", "default", {
            name: "zh",
            englishName: "Chinese",
            nativeName: "中文",
            language: "zh",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "nn": ["nn", "default", {
            name: "nn",
            englishName: "Norwegian (Nynorsk)",
            nativeName: "norsk (nynorsk)",
            language: "nn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "måndag", "tysdag", "onsdag", "torsdag", "fredag", "laurdag"],
                        namesAbbr: ["sø", "må", "ty", "on", "to", "fr", "la"],
                        namesShort: ["sø", "må", "ty", "on", "to", "fr", "la"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "bs": ["bs", "default", {
            name: "bs",
            englishName: "Bosnian",
            nativeName: "bosanski",
            language: "bs",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "KM"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "juni", "juli", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "az-Latn": ["az-Latn", "default", {
            name: "az-Latn",
            englishName: "Azeri (Latin)",
            nativeName: "Azərbaycan­ılı",
            language: "az-Latn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "man."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Bazar", "Bazar ertəsi", "Çərşənbə axşamı", "Çərşənbə", "Cümə axşamı", "Cümə", "Şənbə"],
                        namesAbbr: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"],
                        namesShort: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"]
                    },
                    months: {
                        names: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "İyun", "İyul", "Avgust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    monthsGenitive: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sma": ["sma", "default", {
            name: "sma",
            englishName: "Sami (Southern)",
            nativeName: "åarjelsaemiengiele",
            language: "sma",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["aejlege", "måanta", "dæjsta", "gaskevåhkoe", "duarsta", "bearjadahke", "laavvardahke"],
                        namesAbbr: ["aej", "måa", "dæj", "gask", "duar", "bearj", "laav"],
                        namesShort: ["a", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["tsïengele", "goevte", "njoktje", "voerhtje", "suehpede", "ruffie", "snjaltje", "mïetske", "skïerede", "golke", "rahka", "goeve", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    monthsGenitive: {
                        names: ["tsïengelen", "goevten", "njoktjen", "voerhtjen", "suehpeden", "ruffien", "snjaltjen", "mïetsken", "skïereden", "golken", "rahkan", "goeven", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "uz-Cyrl": ["uz-Cyrl", "default", {
            name: "uz-Cyrl",
            englishName: "Uzbek (Cyrillic)",
            nativeName: "Ўзбек",
            language: "uz-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "сўм"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["якшанба", "душанба", "сешанба", "чоршанба", "пайшанба", "жума", "шанба"],
                        namesAbbr: ["якш", "дш", "сш", "чш", "пш", "ж", "ш"],
                        namesShort: ["я", "д", "с", "ч", "п", "ж", "ш"]
                    },
                    months: {
                        names: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["январ", "феврал", "март", "апрел", "май", "июн", "июл", "август", "сентябр", "октябр", "ноябр", "декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "мая", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "yyyy 'йил' d-MMMM",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'йил' d-MMMM HH:mm",
                        F: "yyyy 'йил' d-MMMM HH:mm:ss",
                        M: "d-MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "mn-Cyrl": ["mn-Cyrl", "default", {
            name: "mn-Cyrl",
            englishName: "Mongolian (Cyrillic)",
            nativeName: "Монгол хэл",
            language: "mn-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "₮"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Ням", "Даваа", "Мягмар", "Лхагва", "Пүрэв", "Баасан", "Бямба"],
                        namesAbbr: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"],
                        namesShort: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"]
                    },
                    months: {
                        names: ["1 дүгээр сар", "2 дугаар сар", "3 дугаар сар", "4 дүгээр сар", "5 дугаар сар", "6 дугаар сар", "7 дугаар сар", "8 дугаар сар", "9 дүгээр сар", "10 дугаар сар", "11 дүгээр сар", "12 дугаар сар", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    monthsGenitive: {
                        names: ["1 дүгээр сарын", "2 дугаар сарын", "3 дугаар сарын", "4 дүгээр сарын", "5 дугаар сарын", "6 дугаар сарын", "7 дугаар сарын", "8 дугаар сарын", "9 дүгээр сарын", "10 дугаар сарын", "11 дүгээр сарын", "12 дугаар сарын", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yy.MM.dd",
                        D: "yyyy 'оны' MMMM d",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'оны' MMMM d H:mm",
                        F: "yyyy 'оны' MMMM d H:mm:ss",
                        M: "d MMMM",
                        Y: "yyyy 'он' MMMM"
                    }
                }
            }
        }],
    "iu-Cans": ["iu-Cans", "default", {
            name: "iu-Cans",
            englishName: "Inuktitut (Syllabics)",
            nativeName: "ᐃᓄᒃᑎᑐᑦ",
            language: "iu-Cans",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["ᓈᑦᑏᖑᔭ", "ᓇᒡᒐᔾᔭᐅ", "ᐊᐃᑉᐱᖅ", "ᐱᖓᑦᓯᖅ", "ᓯᑕᒻᒥᖅ", "ᑕᓪᓕᕐᒥᖅ", "ᓯᕙᑖᕐᕕᒃ"],
                        namesAbbr: ["ᓈᑦᑏ", "ᓇᒡᒐ", "ᐊᐃᑉᐱ", "ᐱᖓᑦᓯ", "ᓯᑕ", "ᑕᓪᓕ", "ᓯᕙᑖᕐᕕᒃ"],
                        namesShort: ["ᓈ", "ᓇ", "ᐊ", "ᐱ", "ᓯ", "ᑕ", "ᓯ"]
                    },
                    months: {
                        names: ["ᔮᓐᓄᐊᕆ", "ᕖᕝᕗᐊᕆ", "ᒫᑦᓯ", "ᐄᐳᕆ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐋᒡᒌᓯ", "ᓯᑎᐱᕆ", "ᐅᑐᐱᕆ", "ᓄᕕᐱᕆ", "ᑎᓯᐱᕆ", ""],
                        namesAbbr: ["ᔮᓐᓄ", "ᕖᕝᕗ", "ᒫᑦᓯ", "ᐄᐳᕆ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐋᒡᒌ", "ᓯᑎᐱ", "ᐅᑐᐱ", "ᓄᕕᐱ", "ᑎᓯᐱ", ""]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd,MMMM dd,yyyy",
                        f: "dddd,MMMM dd,yyyy h:mm tt",
                        F: "dddd,MMMM dd,yyyy h:mm:ss tt",
                        Y: "MMMM,yyyy"
                    }
                }
            }
        }],
    "zh-Hant": ["zh-Hant", "default", {
            name: "zh-Hant",
            englishName: "Chinese (Traditional)",
            nativeName: "中文(繁體)",
            language: "zh-Hant",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    symbol: "HK$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "nb": ["nb", "default", {
            name: "nb",
            englishName: "Norwegian (Bokmål)",
            nativeName: "norsk (bokmål)",
            language: "nb",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                        namesAbbr: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
                        namesShort: ["sø", "ma", "ti", "on", "to", "fr", "lø"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sr": ["sr", "default", {
            name: "sr",
            englishName: "Serbian",
            nativeName: "srpski",
            language: "sr",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Din."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tg-Cyrl": ["tg-Cyrl", "default", {
            name: "tg-Cyrl",
            englishName: "Tajik (Cyrillic)",
            nativeName: "Тоҷикӣ",
            language: "tg-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ";",
                    symbol: "т.р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    days: {
                        names: ["Яш", "Душанбе", "Сешанбе", "Чоршанбе", "Панҷшанбе", "Ҷумъа", "Шанбе"],
                        namesAbbr: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"],
                        namesShort: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"]
                    },
                    months: {
                        names: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["январи", "феврали", "марти", "апрели", "маи", "июни", "июли", "августи", "сентябри", "октябри", "ноябри", "декабри", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "dsb": ["dsb", "default", {
            name: "dsb",
            englishName: "Lower Sorbian",
            nativeName: "dolnoserbšćina",
            language: "dsb",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["njeźela", "ponjeźele", "wałtora", "srjoda", "stwortk", "pětk", "sobota"],
                        namesAbbr: ["nje", "pon", "wał", "srj", "stw", "pět", "sob"],
                        namesShort: ["n", "p", "w", "s", "s", "p", "s"]
                    },
                    months: {
                        names: ["januar", "februar", "měrc", "apryl", "maj", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "maj", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["januara", "februara", "měrca", "apryla", "maja", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "maj", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "po Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "dddd, 'dnja' d. MMMM yyyy",
                        t: "H.mm 'goź.'",
                        T: "H:mm:ss",
                        f: "dddd, 'dnja' d. MMMM yyyy H.mm 'goź.'",
                        F: "dddd, 'dnja' d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "smj": ["smj", "default", {
            name: "smj",
            englishName: "Sami (Lule)",
            nativeName: "julevusámegiella",
            language: "smj",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ájllek", "mánnodahka", "dijstahka", "gasskavahkko", "duorastahka", "bierjjedahka", "lávvodahka"],
                        namesAbbr: ["ájl", "mán", "dis", "gas", "duor", "bier", "láv"],
                        namesShort: ["á", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ådåjakmánno", "guovvamánno", "sjnjuktjamánno", "vuoratjismánno", "moarmesmánno", "biehtsemánno", "sjnjilltjamánno", "bårggemánno", "ragátmánno", "gålgådismánno", "basádismánno", "javllamánno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    monthsGenitive: {
                        names: ["ådåjakmáno", "guovvamáno", "sjnjuktjamáno", "vuoratjismáno", "moarmesmáno", "biehtsemáno", "sjnjilltjamáno", "bårggemáno", "ragátmáno", "gålgådismáno", "basádismáno", "javllamáno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "uz-Latn": ["uz-Latn", "default", {
            name: "uz-Latn",
            englishName: "Uzbek (Latin)",
            nativeName: "U'zbek",
            language: "uz-Latn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    decimals: 0,
                    ",": " ",
                    ".": ",",
                    symbol: "so'm"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["yakshanba", "dushanba", "seshanba", "chorshanba", "payshanba", "juma", "shanba"],
                        namesAbbr: ["yak.", "dsh.", "sesh.", "chr.", "psh.", "jm.", "sh."],
                        namesShort: ["ya", "d", "s", "ch", "p", "j", "sh"]
                    },
                    months: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM yyyy",
                        D: "yyyy 'yil' d-MMMM",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'yil' d-MMMM HH:mm",
                        F: "yyyy 'yil' d-MMMM HH:mm:ss",
                        M: "d-MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "mn-Mong": ["mn-Mong", "default", {
            name: "mn-Mong",
            englishName: "Mongolian (Traditional Mongolian)",
            nativeName: "ᠮᠤᠨᠭᠭᠤᠯ ᠬᠡᠯᠡ",
            language: "mn-Mong",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ"],
                        namesAbbr: ["ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ"],
                        namesShort: ["ᠡ‍", "ᠨᠢ‍", "ᠬᠣ‍", "ᠭᠤ‍", "ᠳᠥ‍", "ᠲᠠ‍", "ᠵᠢ‍"]
                    },
                    months: {
                        names: ["ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", ""],
                        namesAbbr: ["ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ᠣᠨ ᠲᠣᠭᠠᠯᠠᠯ ᠤᠨ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm",
                        F: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm:ss",
                        M: "M'ᠰᠠᠷ᠎ᠠ' d'ᠡᠳᠦᠷ'",
                        Y: "yyyy'ᠣᠨ' M'ᠰᠠᠷ᠎ᠠ'"
                    }
                }
            }
        }],
    "iu-Latn": ["iu-Latn", "default", {
            name: "iu-Latn",
            englishName: "Inuktitut (Latin)",
            nativeName: "Inuktitut",
            language: "iu-Latn",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Naattiinguja", "Naggajjau", "Aippiq", "Pingatsiq", "Sitammiq", "Tallirmiq", "Sivataarvik"],
                        namesAbbr: ["Nat", "Nag", "Aip", "Pi", "Sit", "Tal", "Siv"],
                        namesShort: ["N", "N", "A", "P", "S", "T", "S"]
                    },
                    months: {
                        names: ["Jaannuari", "Viivvuari", "Maatsi", "Iipuri", "Mai", "Juuni", "Julai", "Aaggiisi", "Sitipiri", "Utupiri", "Nuvipiri", "Tisipiri", ""],
                        namesAbbr: ["Jan", "Viv", "Mas", "Ipu", "Mai", "Jun", "Jul", "Agi", "Sii", "Uut", "Nuv", "Tis", ""]
                    },
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "ddd, MMMM dd,yyyy",
                        f: "ddd, MMMM dd,yyyy h:mm tt",
                        F: "ddd, MMMM dd,yyyy h:mm:ss tt"
                    }
                }
            }
        }],
    "tzm-Latn": ["tzm-Latn", "default", {
            name: "tzm-Latn",
            englishName: "Tamazight (Latin)",
            nativeName: "Tamazight",
            language: "tzm-Latn",
            numberFormat: {
                pattern: ["n-"],
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    symbol: "DZD"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 6,
                    days: {
                        names: ["Acer", "Arime", "Aram", "Ahad", "Amhadh", "Sem", "Sedh"],
                        namesAbbr: ["Ace", "Ari", "Ara", "Aha", "Amh", "Sem", "Sed"],
                        namesShort: ["Ac", "Ar", "Ar", "Ah", "Am", "Se", "Se"]
                    },
                    months: {
                        names: ["Yenayer", "Furar", "Maghres", "Yebrir", "Mayu", "Yunyu", "Yulyu", "Ghuct", "Cutenber", "Ktuber", "Wambir", "Dujanbir", ""],
                        namesAbbr: ["Yen", "Fur", "Mag", "Yeb", "May", "Yun", "Yul", "Ghu", "Cut", "Ktu", "Wam", "Duj", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ha-Latn": ["ha-Latn", "default", {
            name: "ha-Latn",
            englishName: "Hausa (Latin)",
            nativeName: "Hausa",
            language: "ha-Latn",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Lahadi", "Litinin", "Talata", "Laraba", "Alhamis", "Juma'a", "Asabar"],
                        namesAbbr: ["Lah", "Lit", "Tal", "Lar", "Alh", "Jum", "Asa"],
                        namesShort: ["L", "L", "T", "L", "A", "J", "A"]
                    },
                    months: {
                        names: ["Januwaru", "Febreru", "Maris", "Afrilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktocba", "Nuwamba", "Disamba", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Afr", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""]
                    },
                    AM: ["Safe", "safe", "SAFE"],
                    PM: ["Yamma", "yamma", "YAMMA"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "zh-CHS": ["zh-CHS", "default", {
            name: "zh-CHS",
            englishName: "Chinese (Simplified) Legacy",
            nativeName: "中文(简体) 旧版",
            language: "zh-CHS",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "zh-CHT": ["zh-CHT", "default", {
            name: "zh-CHT",
            englishName: "Chinese (Traditional) Legacy",
            nativeName: "中文(繁體) 舊版",
            language: "zh-CHT",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    symbol: "HK$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }]
};
//# sourceMappingURL=powerbiGlobalizeLocales.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateTimeSequence.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateTimeSequence.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DateTimeSequence = void 0;
var dateUtils = __webpack_require__(/*! ./dateUtils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateUtils.js");
// powerbi.extensibility.utils.type
var powerbi_visuals_utils_typeutils_1 = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/index.js");
var NumericSequence = powerbi_visuals_utils_typeutils_1.numericSequence.NumericSequence;
var NumericSequenceRange = powerbi_visuals_utils_typeutils_1.numericSequenceRange.NumericSequenceRange;
// powerbi.extensibility.utils.formatting
var iFormattingService_1 = __webpack_require__(/*! ./../formattingService/iFormattingService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/iFormattingService.js");
// Repreasents the sequence of the dates/times
var DateTimeSequence = /** @class */ (function () {
    // Constructors
    // Creates new instance of the DateTimeSequence
    function DateTimeSequence(unit) {
        this.unit = unit;
        this.sequence = [];
        this.min = new Date("9999-12-31T23:59:59.999");
        this.max = new Date("0001-01-01T00:00:00.000");
    }
    // Methods
    /**
     * Add a new Date to a sequence.
     * @param date - date to add
     */
    DateTimeSequence.prototype.add = function (date) {
        if (date < this.min) {
            this.min = date;
        }
        if (date > this.max) {
            this.max = date;
        }
        this.sequence.push(date);
    };
    // Methods
    /**
     * Extends the sequence to cover new date range
     * @param min - new min to be covered by sequence
     * @param max - new max to be covered by sequence
     */
    DateTimeSequence.prototype.extendToCover = function (min, max) {
        var x = this.min;
        while (min < x) {
            x = DateTimeSequence.ADD_INTERVAL(x, -this.interval, this.unit);
            this.sequence.splice(0, 0, x);
        }
        this.min = x;
        x = this.max;
        while (x < max) {
            x = DateTimeSequence.ADD_INTERVAL(x, this.interval, this.unit);
            this.sequence.push(x);
        }
        this.max = x;
    };
    /**
     * Move the sequence to cover new date range
     * @param min - new min to be covered by sequence
     * @param max - new max to be covered by sequence
     */
    DateTimeSequence.prototype.moveToCover = function (min, max) {
        var delta = DateTimeSequence.getDelta(min, max, this.unit);
        var count = Math.floor(delta / this.interval);
        this.min = DateTimeSequence.ADD_INTERVAL(this.min, count * this.interval, this.unit);
        this.sequence = [];
        this.sequence.push(this.min);
        this.max = this.min;
        while (this.max < max) {
            this.max = DateTimeSequence.ADD_INTERVAL(this.max, this.interval, this.unit);
            this.sequence.push(this.max);
        }
    };
    // Static
    /**
     * Calculate a new DateTimeSequence
     * @param dataMin - Date representing min of the data range
     * @param dataMax - Date representing max of the data range
     * @param expectedCount - expected number of intervals in the sequence
     * @param unit - of the intervals in the sequence
     */
    DateTimeSequence.CALCULATE = function (dataMin, dataMax, expectedCount, unit) {
        if (!unit) {
            unit = DateTimeSequence.GET_INTERVAL_UNIT(dataMin, dataMax, expectedCount);
        }
        switch (unit) {
            case iFormattingService_1.DateTimeUnit.Year:
                return DateTimeSequence.CALCULATE_YEARS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Month:
                return DateTimeSequence.CALCULATE_MONTHS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Week:
                return DateTimeSequence.CALCULATE_WEEKS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Day:
                return DateTimeSequence.CALCULATE_DAYS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Hour:
                return DateTimeSequence.CALCULATE_HOURS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Minute:
                return DateTimeSequence.CALCULATE_MINUTES(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Second:
                return DateTimeSequence.CALCULATE_SECONDS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Millisecond:
                return DateTimeSequence.CALCULATE_MILLISECONDS(dataMin, dataMax, expectedCount);
        }
    };
    DateTimeSequence.CALCULATE_YEARS = function (dataMin, dataMax, expectedCount) {
        // Calculate range and sequence
        var yearsRange = NumericSequenceRange.calculateDataRange(dataMin.getFullYear(), dataMax.getFullYear(), false);
        // Calculate year sequence
        var sequence = NumericSequence.calculate(NumericSequenceRange.calculate(0, yearsRange.max - yearsRange.min), expectedCount, 0, null, null, [1, 2, 5]);
        var newMinYear = Math.floor(yearsRange.min / sequence.interval) * sequence.interval;
        var date = new Date(newMinYear, 0, 1);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Year);
    };
    DateTimeSequence.CALCULATE_MONTHS = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var minYear = dataMin.getFullYear();
        var maxYear = dataMax.getFullYear();
        var minMonth = dataMin.getMonth();
        var maxMonth = (maxYear - minYear) * 12 + dataMax.getMonth();
        var date = new Date(minYear, 0, 1);
        // Calculate month sequence
        var sequence = NumericSequence.calculateUnits(minMonth, maxMonth, expectedCount, [1, 2, 3, 6, 12]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Month);
    };
    DateTimeSequence.CALCULATE_WEEKS = function (dataMin, dataMax, expectedCount) {
        var firstDayOfWeek = 0;
        var minDayOfWeek = dataMin.getDay();
        var dayOffset = (minDayOfWeek - firstDayOfWeek + 7) % 7;
        var minDay = dataMin.getDate() - dayOffset;
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), minDay);
        var min = 0;
        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Week));
        // Calculate week sequence
        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 4, 8]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Week);
    };
    DateTimeSequence.CALCULATE_DAYS = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate());
        var min = 0;
        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(dataMin, dataMax, iFormattingService_1.DateTimeUnit.Day));
        // Calculate day sequence
        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 7, 14]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Day);
    };
    DateTimeSequence.CALCULATE_HOURS = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate());
        var min = powerbi_visuals_utils_typeutils_1.double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Hour));
        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Hour));
        // Calculate hour sequence
        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 3, 6, 12, 24]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Hour);
    };
    DateTimeSequence.CALCULATE_MINUTES = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours());
        var min = powerbi_visuals_utils_typeutils_1.double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Minute));
        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Minute));
        // Calculate minutes numeric sequence
        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 5, 10, 15, 30, 60, 60 * 2, 60 * 3, 60 * 6, 60 * 12, 60 * 24]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Minute);
    };
    DateTimeSequence.CALCULATE_SECONDS = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours(), dataMin.getMinutes());
        var min = powerbi_visuals_utils_typeutils_1.double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Second));
        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Second));
        // Calculate minutes numeric sequence
        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 5, 10, 15, 30, 60, 60 * 2, 60 * 5, 60 * 10, 60 * 15, 60 * 30, 60 * 60]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Second);
    };
    DateTimeSequence.CALCULATE_MILLISECONDS = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours(), dataMin.getMinutes(), dataMin.getSeconds());
        var min = DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Millisecond);
        var max = DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Millisecond);
        // Calculate milliseconds numeric sequence
        var sequence = NumericSequence.calculate(NumericSequenceRange.calculate(min, max), expectedCount, 0);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Millisecond);
    };
    DateTimeSequence.ADD_INTERVAL = function (value, interval, unit) {
        interval = Math.round(interval);
        switch (unit) {
            case iFormattingService_1.DateTimeUnit.Year:
                return dateUtils.addYears(value, interval);
            case iFormattingService_1.DateTimeUnit.Month:
                return dateUtils.addMonths(value, interval);
            case iFormattingService_1.DateTimeUnit.Week:
                return dateUtils.addWeeks(value, interval);
            case iFormattingService_1.DateTimeUnit.Day:
                return dateUtils.addDays(value, interval);
            case iFormattingService_1.DateTimeUnit.Hour:
                return dateUtils.addHours(value, interval);
            case iFormattingService_1.DateTimeUnit.Minute:
                return dateUtils.addMinutes(value, interval);
            case iFormattingService_1.DateTimeUnit.Second:
                return dateUtils.addSeconds(value, interval);
            case iFormattingService_1.DateTimeUnit.Millisecond:
                return dateUtils.addMilliseconds(value, interval);
        }
    };
    DateTimeSequence.fromNumericSequence = function (date, sequence, unit) {
        var result = new DateTimeSequence(unit);
        for (var i = 0; i < sequence.sequence.length; i++) {
            var x = sequence.sequence[i];
            var d = DateTimeSequence.ADD_INTERVAL(date, x, unit);
            result.add(d);
        }
        result.interval = sequence.interval;
        result.intervalOffset = sequence.intervalOffset;
        return result;
    };
    DateTimeSequence.getDelta = function (min, max, unit) {
        var delta = 0;
        switch (unit) {
            case iFormattingService_1.DateTimeUnit.Year:
                delta = max.getFullYear() - min.getFullYear();
                break;
            case iFormattingService_1.DateTimeUnit.Month:
                delta = (max.getFullYear() - min.getFullYear()) * 12 + max.getMonth() - min.getMonth();
                break;
            case iFormattingService_1.DateTimeUnit.Week:
                delta = (max.getTime() - min.getTime()) / (7 * 24 * 3600000);
                break;
            case iFormattingService_1.DateTimeUnit.Day:
                delta = (max.getTime() - min.getTime()) / (24 * 3600000);
                break;
            case iFormattingService_1.DateTimeUnit.Hour:
                delta = (max.getTime() - min.getTime()) / 3600000;
                break;
            case iFormattingService_1.DateTimeUnit.Minute:
                delta = (max.getTime() - min.getTime()) / 60000;
                break;
            case iFormattingService_1.DateTimeUnit.Second:
                delta = (max.getTime() - min.getTime()) / 1000;
                break;
            case iFormattingService_1.DateTimeUnit.Millisecond:
                delta = max.getTime() - min.getTime();
                break;
        }
        return delta;
    };
    DateTimeSequence.GET_INTERVAL_UNIT = function (min, max, maxCount) {
        maxCount = Math.max(maxCount, 2);
        var totalDays = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Day);
        if (totalDays > 356 && totalDays >= 30 * 6 * maxCount)
            return iFormattingService_1.DateTimeUnit.Year;
        if (totalDays > 60 && totalDays > 7 * maxCount)
            return iFormattingService_1.DateTimeUnit.Month;
        if (totalDays > 14 && totalDays > 2 * maxCount)
            return iFormattingService_1.DateTimeUnit.Week;
        var totalHours = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Hour);
        if (totalDays > 2 && totalHours > 12 * maxCount)
            return iFormattingService_1.DateTimeUnit.Day;
        if (totalHours >= 24 && totalHours >= maxCount)
            return iFormattingService_1.DateTimeUnit.Hour;
        var totalMinutes = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Minute);
        if (totalMinutes > 2 && totalMinutes >= maxCount)
            return iFormattingService_1.DateTimeUnit.Minute;
        var totalSeconds = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Second);
        if (totalSeconds > 2 && totalSeconds >= 0.8 * maxCount)
            return iFormattingService_1.DateTimeUnit.Second;
        var totalMilliseconds = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Millisecond);
        if (totalMilliseconds > 0)
            return iFormattingService_1.DateTimeUnit.Millisecond;
        // If the size of the range is 0 we need to guess the unit based on the date's non-zero values starting with milliseconds
        var date = min;
        if (date.getMilliseconds() !== 0)
            return iFormattingService_1.DateTimeUnit.Millisecond;
        if (date.getSeconds() !== 0)
            return iFormattingService_1.DateTimeUnit.Second;
        if (date.getMinutes() !== 0)
            return iFormattingService_1.DateTimeUnit.Minute;
        if (date.getHours() !== 0)
            return iFormattingService_1.DateTimeUnit.Hour;
        if (date.getDate() !== 1)
            return iFormattingService_1.DateTimeUnit.Day;
        if (date.getMonth() !== 0)
            return iFormattingService_1.DateTimeUnit.Month;
        return iFormattingService_1.DateTimeUnit.Year;
    };
    // Constants
    DateTimeSequence.MIN_COUNT = 1;
    DateTimeSequence.MAX_COUNT = 1000;
    return DateTimeSequence;
}());
exports.DateTimeSequence = DateTimeSequence;
//# sourceMappingURL=dateTimeSequence.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateUtils.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateUtils.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addMilliseconds = exports.addSeconds = exports.addMinutes = exports.addHours = exports.addDays = exports.addWeeks = exports.addMonths = exports.addYears = void 0;
// dateUtils module provides DateTimeSequence with set of additional date manipulation routines
var MonthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var MonthDaysLeap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
/**
 * Returns bool indicating weither the provided year is a leap year.
 * @param year - year value
 */
function isLeap(year) {
    return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);
}
/**
 * Returns number of days in the provided year/month.
 * @param year - year value
 * @param month - month value
 */
function getMonthDays(year, month) {
    return isLeap(year) ? MonthDaysLeap[month] : MonthDays[month];
}
/**
 * Adds a specified number of years to the provided date.
 * @param date - date value
 * @param yearDelta - number of years to add
 */
function addYears(date, yearDelta) {
    var year = date.getFullYear();
    var month = date.getMonth();
    var day = date.getDate();
    var isLeapDay = month === 2 && day === 29;
    var result = new Date(date.getTime());
    year = year + yearDelta;
    if (isLeapDay && !isLeap(year)) {
        day = 28;
    }
    result.setFullYear(year, month, day);
    return result;
}
exports.addYears = addYears;
/**
 * Adds a specified number of months to the provided date.
 * @param date - date value
 * @param monthDelta - number of months to add
 */
function addMonths(date, monthDelta) {
    var year = date.getFullYear();
    var month = date.getMonth();
    var day = date.getDate();
    var result = new Date(date.getTime());
    year += (monthDelta - (monthDelta % 12)) / 12;
    month += monthDelta % 12;
    // VSTS 1325771: Certain column charts don't display any data
    // Wrap arround the month if is after december (value 11)
    if (month > 11) {
        month = month % 12;
        year++;
    }
    day = Math.min(day, getMonthDays(year, month));
    result.setFullYear(year, month, day);
    return result;
}
exports.addMonths = addMonths;
/**
 * Adds a specified number of weeks to the provided date.
 * @param date - date value
 * @param weeks - number of weeks to add
 */
function addWeeks(date, weeks) {
    return addDays(date, weeks * 7);
}
exports.addWeeks = addWeeks;
/**
 * Adds a specified number of days to the provided date.
 * @param date - date value
 * @param days - number of days to add
 */
function addDays(date, days) {
    var year = date.getFullYear();
    var month = date.getMonth();
    var day = date.getDate();
    var result = new Date(date.getTime());
    result.setFullYear(year, month, day + days);
    return result;
}
exports.addDays = addDays;
/**
 * Adds a specified number of hours to the provided date.
 * @param date - date value
 * @param hours - number of hours to add
 */
function addHours(date, hours) {
    return new Date(date.getTime() + hours * 3600000);
}
exports.addHours = addHours;
/**
 * Adds a specified number of minutes to the provided date.
 * @param date - date value
 * @param minutes - number of minutes to add
 */
function addMinutes(date, minutes) {
    return new Date(date.getTime() + minutes * 60000);
}
exports.addMinutes = addMinutes;
/**
 * Adds a specified number of seconds to the provided date.
 * @param date - date value
 * @param seconds - number of seconds to add
 */
function addSeconds(date, seconds) {
    return new Date(date.getTime() + seconds * 1000);
}
exports.addSeconds = addSeconds;
/**
 * Adds a specified number of milliseconds to the provided date.
 * @param date - date value
 * @param milliseconds - number of milliseconds to add
 */
function addMilliseconds(date, milliseconds) {
    return new Date(date.getTime() + milliseconds);
}
exports.addMilliseconds = addMilliseconds;
//# sourceMappingURL=dateUtils.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystem.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystem.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLabelsDisplayUnitSystem = exports.WholeUnitsDisplayUnitSystem = exports.DefaultDisplayUnitSystem = exports.NoDisplayUnitSystem = exports.DisplayUnitSystem = exports.DisplayUnit = void 0;
/* eslint-disable no-useless-escape */
var formattingService_1 = __webpack_require__(/*! ./../formattingService/formattingService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingService.js");
var powerbi_visuals_utils_typeutils_1 = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/index.js");
// Constants
var maxExponent = 24;
var defaultScientificBigNumbersBoundary = 1E15;
var scientificSmallNumbersBoundary = 1E-4;
var PERCENTAGE_FORMAT = "%";
var SCIENTIFIC_FORMAT = "E+0";
var DEFAULT_SCIENTIFIC_FORMAT = "0.##" + SCIENTIFIC_FORMAT;
// Regular expressions
/**
 * This regex looks for strings that match one of the following conditions:
 *   - Optionally contain "0", "#", followed by a period, followed by at least one "0" or "#" (Ex. ###,000.###)
 *   - Contains at least one of "0", "#", or "," (Ex. ###,000)
 *   - Contain a "g" (indicates to use the general .NET numeric format string)
 * The entire string (start to end) must match, and the match is not case-sensitive.
 */
var SUPPORTED_SCIENTIFIC_FORMATS = /^([0\#,]*\.[0\#]+|[0\#,]+|g)$/i;
var DisplayUnit = /** @class */ (function () {
    function DisplayUnit() {
    }
    // Methods
    DisplayUnit.prototype.project = function (value) {
        if (this.value) {
            return powerbi_visuals_utils_typeutils_1.double.removeDecimalNoise(value / this.value);
        }
        else {
            return value;
        }
    };
    DisplayUnit.prototype.reverseProject = function (value) {
        if (this.value) {
            return value * this.value;
        }
        else {
            return value;
        }
    };
    DisplayUnit.prototype.isApplicableTo = function (value) {
        value = Math.abs(value);
        var precision = powerbi_visuals_utils_typeutils_1.double.getPrecision(value, 3);
        return powerbi_visuals_utils_typeutils_1.double.greaterOrEqualWithPrecision(value, this.applicableRangeMin, precision) && powerbi_visuals_utils_typeutils_1.double.lessWithPrecision(value, this.applicableRangeMax, precision);
    };
    DisplayUnit.prototype.isScaling = function () {
        return this.value > 1;
    };
    return DisplayUnit;
}());
exports.DisplayUnit = DisplayUnit;
var DisplayUnitSystem = /** @class */ (function () {
    // Constructor
    function DisplayUnitSystem(units) {
        this.units = units ? units : [];
    }
    Object.defineProperty(DisplayUnitSystem.prototype, "title", {
        // Properties
        get: function () {
            return this.displayUnit ? this.displayUnit.title : undefined;
        },
        enumerable: false,
        configurable: true
    });
    // Methods
    DisplayUnitSystem.prototype.update = function (value) {
        if (value === undefined)
            return;
        this.unitBaseValue = value;
        this.displayUnit = this.findApplicableDisplayUnit(value);
    };
    DisplayUnitSystem.prototype.findApplicableDisplayUnit = function (value) {
        for (var _i = 0, _a = this.units; _i < _a.length; _i++) {
            var unit = _a[_i];
            if (unit.isApplicableTo(value))
                return unit;
        }
        return undefined;
    };
    DisplayUnitSystem.prototype.format = function (value, format, decimals, trailingZeros, cultureSelector) {
        decimals = this.getNumberOfDecimalsForFormatting(format, decimals);
        var nonScientificFormat = "";
        if (this.isFormatSupported(format)
            && !this.hasScientitifcFormat(format)
            && this.isScalingUnit()
            && this.shouldRespectScalingUnit(format)) {
            value = this.displayUnit.project(value);
            nonScientificFormat = this.displayUnit.labelFormat;
        }
        return this.formatHelper({
            value: value,
            nonScientificFormat: nonScientificFormat,
            format: format,
            decimals: decimals,
            trailingZeros: trailingZeros,
            cultureSelector: cultureSelector
        });
    };
    DisplayUnitSystem.prototype.isFormatSupported = function (format) {
        return !DisplayUnitSystem.UNSUPPORTED_FORMATS.test(format);
    };
    DisplayUnitSystem.prototype.isPercentageFormat = function (format) {
        return format && format.indexOf(PERCENTAGE_FORMAT) >= 0;
    };
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    DisplayUnitSystem.prototype.shouldRespectScalingUnit = function (format) {
        return true;
    };
    DisplayUnitSystem.prototype.getNumberOfDecimalsForFormatting = function (format, decimals) {
        return decimals;
    };
    DisplayUnitSystem.prototype.isScalingUnit = function () {
        return this.displayUnit && this.displayUnit.isScaling();
    };
    DisplayUnitSystem.prototype.formatHelper = function (options) {
        var value = options.value, cultureSelector = options.cultureSelector, decimals = options.decimals, trailingZeros = options.trailingZeros;
        var nonScientificFormat = options.nonScientificFormat, format = options.format;
        // If the format is "general" and we want to override the number of decimal places then use the default numeric format string.
        if ((format === "g" || format === "G") && decimals != null) {
            format = "#,0.00";
        }
        format = formattingService_1.numberFormat.addDecimalsToFormat(format, decimals, trailingZeros);
        if (format && !formattingService_1.formattingService.isStandardNumberFormat(format)) {
            return formattingService_1.formattingService.formatNumberWithCustomOverride(value, format, nonScientificFormat, cultureSelector);
        }
        if (!format) {
            format = "G";
        }
        if (!nonScientificFormat) {
            nonScientificFormat = "{0}";
        }
        var text = formattingService_1.formattingService.formatValue(value, format, cultureSelector);
        return formattingService_1.formattingService.format(nonScientificFormat, [text]);
    };
    //  Formats a single value by choosing an appropriate base for the DisplayUnitSystem before formatting.
    DisplayUnitSystem.prototype.formatSingleValue = function (value, format, decimals, trailingZeros, cultureSelector) {
        // Change unit base to a value appropriate for this value
        this.update(this.shouldUseValuePrecision(value) ? powerbi_visuals_utils_typeutils_1.double.getPrecision(value, 8) : value);
        return this.format(value, format, decimals, trailingZeros, cultureSelector);
    };
    DisplayUnitSystem.prototype.shouldUseValuePrecision = function (value) {
        if (this.units.length === 0)
            return true;
        // Check if the value is big enough to have a valid unit by checking against the smallest unit (that it's value bigger than 1).
        var applicableRangeMin = 0;
        for (var i = 0; i < this.units.length; i++) {
            if (this.units[i].isScaling()) {
                applicableRangeMin = this.units[i].applicableRangeMin;
                break;
            }
        }
        return Math.abs(value) < applicableRangeMin;
    };
    DisplayUnitSystem.prototype.isScientific = function (value) {
        return value < -defaultScientificBigNumbersBoundary || value > defaultScientificBigNumbersBoundary ||
            (-scientificSmallNumbersBoundary < value && value < scientificSmallNumbersBoundary && value !== 0);
    };
    DisplayUnitSystem.prototype.hasScientitifcFormat = function (format) {
        return format && format.toUpperCase().indexOf("E") !== -1;
    };
    DisplayUnitSystem.prototype.supportsScientificFormat = function (format) {
        if (format)
            return SUPPORTED_SCIENTIFIC_FORMATS.test(format);
        return true;
    };
    DisplayUnitSystem.prototype.shouldFallbackToScientific = function (value, format) {
        return !this.hasScientitifcFormat(format)
            && this.supportsScientificFormat(format)
            && this.isScientific(value);
    };
    DisplayUnitSystem.prototype.getScientificFormat = function (data, format, decimals, trailingZeros) {
        // Use scientific format outside of the range
        if (this.isFormatSupported(format) && this.shouldFallbackToScientific(data, format)) {
            var numericFormat = formattingService_1.numberFormat.getNumericFormat(data, format);
            if (decimals)
                numericFormat = formattingService_1.numberFormat.addDecimalsToFormat(numericFormat ? numericFormat : "0", Math.abs(decimals), trailingZeros);
            if (numericFormat)
                return numericFormat + SCIENTIFIC_FORMAT;
            else
                return DEFAULT_SCIENTIFIC_FORMAT;
        }
        return format;
    };
    DisplayUnitSystem.UNSUPPORTED_FORMATS = /^(p\d*)|(e\d*)$/i;
    return DisplayUnitSystem;
}());
exports.DisplayUnitSystem = DisplayUnitSystem;
// Provides a unit system that is defined by formatting in the model, and is suitable for visualizations shown in single number visuals in explore mode.
var NoDisplayUnitSystem = /** @class */ (function (_super) {
    __extends(NoDisplayUnitSystem, _super);
    // Constructor
    function NoDisplayUnitSystem() {
        return _super.call(this, []) || this;
    }
    return NoDisplayUnitSystem;
}(DisplayUnitSystem));
exports.NoDisplayUnitSystem = NoDisplayUnitSystem;
/** Provides a unit system that creates a more concise format for displaying values. This is suitable for most of the cases where
    we are showing values (chart axes) and as such it is the default unit system. */
var DefaultDisplayUnitSystem = /** @class */ (function (_super) {
    __extends(DefaultDisplayUnitSystem, _super);
    // Constructor
    function DefaultDisplayUnitSystem(unitLookup) {
        return _super.call(this, DefaultDisplayUnitSystem.getUnits(unitLookup)) || this;
    }
    // Methods
    DefaultDisplayUnitSystem.prototype.format = function (data, format, decimals, trailingZeros, cultureSelector) {
        format = this.getScientificFormat(data, format, decimals, trailingZeros);
        return _super.prototype.format.call(this, data, format, decimals, trailingZeros, cultureSelector);
    };
    DefaultDisplayUnitSystem.RESET = function () {
        DefaultDisplayUnitSystem.units = null;
    };
    DefaultDisplayUnitSystem.getUnits = function (unitLookup) {
        if (!DefaultDisplayUnitSystem.units) {
            DefaultDisplayUnitSystem.units = createDisplayUnits(unitLookup, function (value, previousUnitValue, min) {
                // When dealing with millions/billions/trillions we need to switch to millions earlier: for example instead of showing 100K 200K 300K we should show 0.1M 0.2M 0.3M etc
                if (value - previousUnitValue >= 1000) {
                    return value / 10;
                }
                return min;
            });
            // Ensure last unit has max of infinity
            DefaultDisplayUnitSystem.units[DefaultDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;
        }
        return DefaultDisplayUnitSystem.units;
    };
    return DefaultDisplayUnitSystem;
}(DisplayUnitSystem));
exports.DefaultDisplayUnitSystem = DefaultDisplayUnitSystem;
/** Provides a unit system that creates a more concise format for displaying values, but only allows showing a unit if we have at least
    one of those units (e.g. 0.9M is not allowed since it's less than 1 million). This is suitable for cases such as dashboard tiles
    where we have restricted space but do not want to show partial units. */
var WholeUnitsDisplayUnitSystem = /** @class */ (function (_super) {
    __extends(WholeUnitsDisplayUnitSystem, _super);
    // Constructor
    function WholeUnitsDisplayUnitSystem(unitLookup) {
        return _super.call(this, WholeUnitsDisplayUnitSystem.getUnits(unitLookup)) || this;
    }
    WholeUnitsDisplayUnitSystem.RESET = function () {
        WholeUnitsDisplayUnitSystem.units = null;
    };
    WholeUnitsDisplayUnitSystem.getUnits = function (unitLookup) {
        if (!WholeUnitsDisplayUnitSystem.units) {
            WholeUnitsDisplayUnitSystem.units = createDisplayUnits(unitLookup);
            // Ensure last unit has max of infinity
            WholeUnitsDisplayUnitSystem.units[WholeUnitsDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;
        }
        return WholeUnitsDisplayUnitSystem.units;
    };
    WholeUnitsDisplayUnitSystem.prototype.format = function (data, format, decimals, trailingZeros, cultureSelector) {
        format = this.getScientificFormat(data, format, decimals, trailingZeros);
        return _super.prototype.format.call(this, data, format, decimals, trailingZeros, cultureSelector);
    };
    return WholeUnitsDisplayUnitSystem;
}(DisplayUnitSystem));
exports.WholeUnitsDisplayUnitSystem = WholeUnitsDisplayUnitSystem;
var DataLabelsDisplayUnitSystem = /** @class */ (function (_super) {
    __extends(DataLabelsDisplayUnitSystem, _super);
    function DataLabelsDisplayUnitSystem(unitLookup) {
        return _super.call(this, DataLabelsDisplayUnitSystem.getUnits(unitLookup)) || this;
    }
    DataLabelsDisplayUnitSystem.prototype.isFormatSupported = function (format) {
        return !DataLabelsDisplayUnitSystem.UNSUPPORTED_FORMATS.test(format);
    };
    DataLabelsDisplayUnitSystem.getUnits = function (unitLookup) {
        if (!DataLabelsDisplayUnitSystem.units) {
            var units = [];
            var adjustMinBasedOnPreviousUnit = function (value, previousUnitValue, min) {
                // Never returns true, we are always ignoring
                // We do not early switch (e.g. 100K instead of 0.1M)
                // Intended? If so, remove this function, otherwise, remove if statement
                if (value === -1)
                    if (value - previousUnitValue >= 1000) {
                        return value / 10;
                    }
                return min;
            };
            // Add Auto & None
            var names = unitLookup(-1);
            addUnitIfNonEmpty(units, DataLabelsDisplayUnitSystem.AUTO_DISPLAYUNIT_VALUE, names.title, names.format, adjustMinBasedOnPreviousUnit);
            names = unitLookup(0);
            addUnitIfNonEmpty(units, DataLabelsDisplayUnitSystem.NONE_DISPLAYUNIT_VALUE, names.title, names.format, adjustMinBasedOnPreviousUnit);
            // Add normal units
            DataLabelsDisplayUnitSystem.units = units.concat(createDisplayUnits(unitLookup, adjustMinBasedOnPreviousUnit));
            // Ensure last unit has max of infinity
            DataLabelsDisplayUnitSystem.units[DataLabelsDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;
        }
        return DataLabelsDisplayUnitSystem.units;
    };
    DataLabelsDisplayUnitSystem.prototype.format = function (data, format, decimals, trailingZeros, cultureSelector) {
        format = this.getScientificFormat(data, format, decimals, trailingZeros);
        return _super.prototype.format.call(this, data, format, decimals, trailingZeros, cultureSelector);
    };
    // Constants
    DataLabelsDisplayUnitSystem.AUTO_DISPLAYUNIT_VALUE = 0;
    DataLabelsDisplayUnitSystem.NONE_DISPLAYUNIT_VALUE = 1;
    DataLabelsDisplayUnitSystem.UNSUPPORTED_FORMATS = /^(e\d*)$/i;
    return DataLabelsDisplayUnitSystem;
}(DisplayUnitSystem));
exports.DataLabelsDisplayUnitSystem = DataLabelsDisplayUnitSystem;
function createDisplayUnits(unitLookup, adjustMinBasedOnPreviousUnit) {
    var units = [];
    for (var i = 3; i < maxExponent; i++) {
        var names = unitLookup(i);
        if (names)
            addUnitIfNonEmpty(units, powerbi_visuals_utils_typeutils_1.double.pow10(i), names.title, names.format, adjustMinBasedOnPreviousUnit);
    }
    return units;
}
function addUnitIfNonEmpty(units, value, title, labelFormat, adjustMinBasedOnPreviousUnit) {
    if (title || labelFormat) {
        var min = value;
        if (units.length > 0) {
            var previousUnit = units[units.length - 1];
            if (adjustMinBasedOnPreviousUnit)
                min = adjustMinBasedOnPreviousUnit(value, previousUnit.value, min);
            previousUnit.applicableRangeMax = min;
        }
        var unit = new DisplayUnit();
        unit.value = value;
        unit.applicableRangeMin = min;
        unit.applicableRangeMax = min * 1000;
        unit.title = title;
        unit.labelFormat = labelFormat;
        units.push(unit);
    }
}
//# sourceMappingURL=displayUnitSystem.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystemType.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystemType.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisplayUnitSystemType = void 0;
// The system used to determine display units used during formatting
var DisplayUnitSystemType;
(function (DisplayUnitSystemType) {
    // Default display unit system, which saves space by using units such as K, M, bn with PowerView rules for when to pick a unit. Suitable for chart axes.
    DisplayUnitSystemType[DisplayUnitSystemType["Default"] = 0] = "Default";
    // A verbose display unit system that will only respect the formatting defined in the model. Suitable for explore mode single-value cards.
    DisplayUnitSystemType[DisplayUnitSystemType["Verbose"] = 1] = "Verbose";
    /**
     * A display unit system that uses units such as K, M, bn if we have at least one of those units (e.g. 0.9M is not valid as it's less than 1 million).
     * Suitable for dashboard tile cards
     */
    DisplayUnitSystemType[DisplayUnitSystemType["WholeUnits"] = 2] = "WholeUnits";
    // A display unit system that also contains Auto and None units for data labels
    DisplayUnitSystemType[DisplayUnitSystemType["DataLabels"] = 3] = "DataLabels";
})(DisplayUnitSystemType = exports.DisplayUnitSystemType || (exports.DisplayUnitSystemType = {}));
//# sourceMappingURL=displayUnitSystemType.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/family.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/family.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Family = exports.fallbackFonts = void 0;
var familyInfo_1 = __webpack_require__(/*! ./familyInfo */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/familyInfo.js");
exports.fallbackFonts = ["helvetica", "arial", "sans-serif"];
exports.Family = {
    light: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    semilight: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    regular: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    semibold: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    bold: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    lightSecondary: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    regularSecondary: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    boldSecondary: new familyInfo_1.FamilyInfo(exports.fallbackFonts)
};
//# sourceMappingURL=family.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/familyInfo.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/familyInfo.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FamilyInfo = void 0;
var FamilyInfo = /** @class */ (function () {
    function FamilyInfo(families) {
        this.families = families;
    }
    Object.defineProperty(FamilyInfo.prototype, "family", {
        /**
         * Gets the first font "wf_" font family since it will always be loaded.
         */
        get: function () {
            return this.getFamily();
        },
        enumerable: false,
        configurable: true
    });
    /**
    * Gets the first font family that matches regex (if provided).
    * Default regex looks for "wf_" fonts which are always loaded.
    */
    FamilyInfo.prototype.getFamily = function (regex) {
        if (regex === void 0) { regex = /^wf_/; }
        if (!this.families) {
            return null;
        }
        if (regex) {
            for (var _i = 0, _a = this.families; _i < _a.length; _i++) {
                var fontFamily = _a[_i];
                if (regex.test(fontFamily)) {
                    return fontFamily;
                }
            }
        }
        return this.families[0];
    };
    Object.defineProperty(FamilyInfo.prototype, "css", {
        /**
         * Gets the CSS string for the "font-family" CSS attribute.
         */
        get: function () {
            return this.getCSS();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets the CSS string for the "font-family" CSS attribute.
     */
    FamilyInfo.prototype.getCSS = function () {
        return this.families ? this.families.map((function (font) { return font.indexOf(" ") > 0 ? "'" + font + "'" : font; })).join(", ") : null;
    };
    return FamilyInfo;
}());
exports.FamilyInfo = FamilyInfo;
//# sourceMappingURL=familyInfo.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formatting.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formatting.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
/* eslint-disable no-useless-escape */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fixDateTimeFormat = exports.findDateFormat = void 0;
var regexCache;
/**
 * Translate .NET format into something supported by Globalize.
 */
function findDateFormat(value, format, cultureName) {
    switch (format) {
        case "m":
            // Month + day
            format = "M";
            break;
        case "O":
        case "o":
            // Roundtrip
            format = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'0000'";
            break;
        case "R":
        case "r":
            // RFC1123 pattern - - time must be converted to UTC before formatting
            value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());
            format = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
            break;
        case "s":
            // Sortable - should use invariant culture
            format = "S";
            break;
        case "u":
            // Universal sortable - should convert to UTC before applying the "yyyy'-'MM'-'dd HH':'mm':'ss'Z' format.
            value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());
            format = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
            break;
        case "U":
            // Universal full - the pattern is same as F but the time must be converted to UTC before formatting
            value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());
            format = "F";
            break;
        case "y":
        case "Y":
            // Year and month
            switch (cultureName) {
                case "default":
                case "en":
                case "en-US":
                    format = "MMMM, yyyy"; // Fix the default year-month pattern for english
                    break;
                default:
                    format = "Y"; // For other cultures - use the localized pattern
            }
            break;
    }
    return { value: value, format: format };
}
exports.findDateFormat = findDateFormat;
/**
 * Translates unsupported .NET custom format expressions to the custom expressions supported by Globalize.
 */
function fixDateTimeFormat(format) {
    // Fix for the "K" format (timezone):
    // T he js dates don't have a kind property so we'll support only local kind which is equavalent to zzz format.
    format = format.replace(/%K/g, "zzz");
    format = format.replace(/K/g, "zzz");
    format = format.replace(/fffffff/g, "fff0000");
    format = format.replace(/ffffff/g, "fff000");
    format = format.replace(/fffff/g, "fff00");
    format = format.replace(/ffff/g, "fff0");
    // Fix for the 5 digit year: "yyyyy" format.
    // The Globalize doesn't support dates greater than 9999 so we replace the "yyyyy" with "0yyyy".
    format = format.replace(/yyyyy/g, "0yyyy");
    // Fix for the 3 digit year: "yyy" format.
    // The Globalize doesn't support this formatting so we need to replace it with the 4 digit year "yyyy" format.
    format = format.replace(/(^y|^)yyy(^y|$)/g, "yyyy");
    if (!regexCache) {
        // Creating Regexes for cases "Using single format specifier"
        // - http://msdn.microsoft.com/en-us/library/8kb3ddd4.aspx#UsingSingleSpecifiers
        // This is not supported from The Globalize.
        // The case covers all single "%" lead specifier (like "%d" but not %dd)
        // The cases as single "%d" are filtered in if the bellow.
        // (?!S) where S is the specifier make sure that we only one symbol for specifier.
        regexCache = ["d", "f", "F", "g", "h", "H", "K", "m", "M", "s", "t", "y", "z", ":", "/"].map(function (s) {
            return { r: new RegExp("\%" + s + "(?!" + s + ")", "g"), s: s };
        });
    }
    if (format.indexOf("%") !== -1 && format.length > 2) {
        for (var i = 0; i < regexCache.length; i++) {
            format = format.replace(regexCache[i].r, regexCache[i].s);
        }
    }
    return format;
}
exports.fixDateTimeFormat = fixDateTimeFormat;
//# sourceMappingURL=formatting.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/dateTimeFormat.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/dateTimeFormat.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.format = exports.canFormat = void 0;
var formatting_1 = __webpack_require__(/*! ./../formatting */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formatting.js");
var formattingEncoder = __webpack_require__(/*! ./formattingEncoder */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingEncoder.js");
var stringExtensions = __webpack_require__(/*! ./../stringExtensions */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/stringExtensions.js");
var globalize_1 = __webpack_require__(/*! ./../../globalize/globalize */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.js");
var _currentCachedFormat;
var _currentCachedProcessedFormat;
// Evaluates if the value can be formatted using the NumberFormat
function canFormat(value) {
    return value instanceof Date;
}
exports.canFormat = canFormat;
// Formats the date using provided format and culture
function format(value, format, culture) {
    format = format || "G";
    var isStandard = format.length === 1;
    try {
        if (isStandard) {
            return formatDateStandard(value, format, culture);
        }
        else {
            return formatDateCustom(value, format, culture);
        }
    }
    catch (e) {
        return formatDateStandard(value, "G", culture);
    }
}
exports.format = format;
// Formats the date using standard format expression
function formatDateStandard(value, format, culture) {
    // In order to provide parity with .NET we have to support additional set of DateTime patterns.
    var patterns = culture.calendar.patterns;
    // Extend supported set of patterns
    ensurePatterns(culture.calendar);
    // Handle extended set of formats
    var output = (0, formatting_1.findDateFormat)(value, format, culture.name);
    if (output.format.length === 1)
        format = patterns[output.format];
    else
        format = output.format;
    // need to revisit when globalization is enabled
    if (!culture) {
        culture = this.getCurrentCulture();
    }
    return globalize_1.Globalize.format(output.value, format, culture);
}
// Formats the date using custom format expression
function formatDateCustom(value, format, culture) {
    var result;
    var literals = [];
    format = formattingEncoder.preserveLiterals(format, literals);
    if (format.indexOf("F") > -1) {
        // F is not supported so we need to replace the F with f based on the milliseconds
        // Replace all sequences of F longer than 3 with "FFF"
        format = stringExtensions.replaceAll(format, "FFFF", "FFF");
        // Based on milliseconds update the format to use fff
        var milliseconds = value.getMilliseconds();
        if (milliseconds % 10 >= 1) {
            format = stringExtensions.replaceAll(format, "FFF", "fff");
        }
        format = stringExtensions.replaceAll(format, "FFF", "FF");
        if ((milliseconds % 100) / 10 >= 1) {
            format = stringExtensions.replaceAll(format, "FF", "ff");
        }
        format = stringExtensions.replaceAll(format, "FF", "F");
        if ((milliseconds % 1000) / 100 >= 1) {
            format = stringExtensions.replaceAll(format, "F", "f");
        }
        format = stringExtensions.replaceAll(format, "F", "");
        if (format === "" || format === "%")
            return "";
    }
    format = processCustomDateTimeFormat(format);
    result = globalize_1.Globalize.format(value, format, culture);
    result = localize(result, culture.calendar);
    result = formattingEncoder.restoreLiterals(result, literals, false);
    return result;
}
// Translates unsupported .NET custom format expressions to the custom expressions supported by JQuery.Globalize
function processCustomDateTimeFormat(format) {
    if (format === _currentCachedFormat) {
        return _currentCachedProcessedFormat;
    }
    _currentCachedFormat = format;
    format = (0, formatting_1.fixDateTimeFormat)(format);
    _currentCachedProcessedFormat = format;
    return format;
}
// Localizes the time separator symbol
function localize(value, dictionary) {
    var timeSeparator = dictionary[":"];
    if (timeSeparator === ":") {
        return value;
    }
    var result = "";
    var count = value.length;
    for (var i = 0; i < count; i++) {
        var char = value.charAt(i);
        switch (char) {
            case ":":
                result += timeSeparator;
                break;
            default:
                result += char;
                break;
        }
    }
    return result;
}
function ensurePatterns(calendar) {
    var patterns = calendar.patterns;
    if (patterns["g"] === undefined) {
        patterns["g"] = patterns["f"].replace(patterns["D"], patterns["d"]); // Generic: Short date, short time
        patterns["G"] = patterns["F"].replace(patterns["D"], patterns["d"]); // Generic: Short date, long time
    }
}
//# sourceMappingURL=dateTimeFormat.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingEncoder.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingEncoder.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.restoreLiterals = exports.preserveLiterals = exports.removeLiterals = void 0;
// quoted and escaped literal patterns
// NOTE: the final three cases match .NET behavior
var literalPatterns = [
    "'[^']*'",
    "\"[^\"]*\"",
    "\\\\.",
    "'[^']*$",
    "\"[^\"]*$",
    "\\\\$", // backslash at end of string
];
var literalMatcher = new RegExp(literalPatterns.join("|"), "g");
// Unicode U+E000 - U+F8FF is a private area and so we can use the chars from the range to encode the escaped sequences
function removeLiterals(format) {
    literalMatcher.lastIndex = 0;
    // just in case consecutive non-literals have some meaning
    return format.replace(literalMatcher, "\uE100");
}
exports.removeLiterals = removeLiterals;
function preserveLiterals(format, literals) {
    literalMatcher.lastIndex = 0;
    for (;;) {
        var match = literalMatcher.exec(format);
        if (!match)
            break;
        var literal = match[0];
        var literalOffset = literalMatcher.lastIndex - literal.length;
        var token = String.fromCharCode(0xE100 + literals.length);
        literals.push(literal);
        format = format.substring(0, literalOffset) + token + format.substring(literalMatcher.lastIndex);
        // back to avoid skipping due to removed literal substring
        literalMatcher.lastIndex = literalOffset + 1;
    }
    return format;
}
exports.preserveLiterals = preserveLiterals;
function restoreLiterals(format, literals, quoted) {
    if (quoted === void 0) { quoted = true; }
    var count = literals.length;
    for (var i = 0; i < count; i++) {
        var token = String.fromCharCode(0xE100 + i);
        var literal = literals[i];
        if (!quoted) {
            // caller wants literals to be re-inserted without escaping
            var firstChar = literal[0];
            if (firstChar === "\\" || literal.length === 1 || literal[literal.length - 1] !== firstChar) {
                // either escaped literal OR quoted literal that's missing the trailing quote
                // in either case we only remove the leading character
                literal = literal.substring(1);
            }
            else {
                // so must be a quoted literal with both starting and ending quote
                literal = literal.substring(1, literal.length - 1);
            }
        }
        format = format.replace(token, literal);
    }
    return format;
}
exports.restoreLiterals = restoreLiterals;
//# sourceMappingURL=formattingEncoder.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingService.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingService.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/* eslint-disable no-useless-escape */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formattingEncoder = exports.dateTimeFormat = exports.numberFormat = exports.formattingService = exports.FormattingService = void 0;
var globalize_1 = __webpack_require__(/*! ./../../globalize/globalize */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.js");
var globalize_cultures_1 = __webpack_require__(/*! ./../../globalize/globalize.cultures */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.cultures.js");
(0, globalize_cultures_1.default)(globalize_1.Globalize);
var dateTimeFormat = __webpack_require__(/*! ./dateTimeFormat */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/dateTimeFormat.js");
exports.dateTimeFormat = dateTimeFormat;
var numberFormat = __webpack_require__(/*! ./numberFormat */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/numberFormat.js");
exports.numberFormat = numberFormat;
var formattingEncoder = __webpack_require__(/*! ./formattingEncoder */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingEncoder.js");
exports.formattingEncoder = formattingEncoder;
var iFormattingService_1 = __webpack_require__(/*! ./iFormattingService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/iFormattingService.js");
var IndexedTokensRegex = /({{)|(}})|{(\d+[^}]*)}/g;
// Formatting Service
var FormattingService = /** @class */ (function () {
    function FormattingService() {
    }
    FormattingService.prototype.formatValue = function (value, formatValue, cultureSelector) {
        // Handle special cases
        if (value === undefined || value === null) {
            return "";
        }
        var gculture = this.getCulture(cultureSelector);
        if (dateTimeFormat.canFormat(value)) {
            // Dates
            return dateTimeFormat.format(value, formatValue, gculture);
        }
        else if (numberFormat.canFormat(value)) {
            // Numbers
            return numberFormat.format(value, formatValue, gculture);
        }
        // Other data types - return as string
        return value.toString();
    };
    FormattingService.prototype.format = function (formatWithIndexedTokens, args, culture) {
        var _this = this;
        if (!formatWithIndexedTokens) {
            return "";
        }
        return formatWithIndexedTokens.replace(IndexedTokensRegex, function (match, left, right, argToken) {
            if (left) {
                return "{";
            }
            else if (right) {
                return "}";
            }
            else {
                var parts = argToken.split(":");
                var argIndex = parseInt(parts[0], 10);
                var argFormat = parts[1];
                return _this.formatValue(args[argIndex], argFormat, culture);
            }
        });
    };
    FormattingService.prototype.isStandardNumberFormat = function (format) {
        return numberFormat.isStandardFormat(format);
    };
    FormattingService.prototype.formatNumberWithCustomOverride = function (value, format, nonScientificOverrideFormat, culture) {
        var gculture = this.getCulture(culture);
        return numberFormat.formatWithCustomOverride(value, format, nonScientificOverrideFormat, gculture);
    };
    FormattingService.prototype.dateFormatString = function (unit) {
        if (!this._dateTimeScaleFormatInfo)
            this.initialize();
        return this._dateTimeScaleFormatInfo.getFormatString(unit);
    };
    /**
     * Sets the current localization culture
     * @param cultureSelector - name of a culture: "en", "en-UK", "fr-FR" etc. (See National Language Support (NLS) for full lists. Use "default" for invariant culture).
     */
    FormattingService.prototype.setCurrentCulture = function (cultureSelector) {
        if (this._currentCultureSelector !== cultureSelector) {
            this._currentCulture = this.getCulture(cultureSelector);
            this._currentCultureSelector = cultureSelector;
            this._dateTimeScaleFormatInfo = new DateTimeScaleFormatInfo(this._currentCulture);
        }
    };
    /**
     * Gets the culture assotiated with the specified cultureSelector ("en", "en-US", "fr-FR" etc).
     * @param cultureSelector - name of a culture: "en", "en-UK", "fr-FR" etc. (See National Language Support (NLS) for full lists. Use "default" for invariant culture).
     * Exposing this function for testability of unsupported cultures
     */
    FormattingService.prototype.getCulture = function (cultureSelector) {
        if (cultureSelector == null) {
            if (this._currentCulture == null) {
                this.initialize();
            }
            return this._currentCulture;
        }
        else {
            var culture = globalize_1.Globalize.findClosestCulture(cultureSelector);
            if (!culture)
                culture = globalize_1.Globalize.culture("en-US");
            return culture;
        }
    };
    // By default the Globalization module initializes to the culture/calendar provided in the language/culture URL params
    FormattingService.prototype.initialize = function () {
        var cultureName = this.getCurrentCulture();
        this.setCurrentCulture(cultureName);
        var calendarName = this.getUrlParam("calendar");
        if (calendarName) {
            var culture = this._currentCulture;
            var c = culture.calendars[calendarName];
            if (c) {
                culture.calendar = c;
            }
        }
    };
    /**
     *  Exposing this function for testability
     */
    FormattingService.prototype.getCurrentCulture = function () {
        if (window === null || window === void 0 ? void 0 : window.navigator) {
            return window.navigator.userLanguage || window.navigator["language"];
        }
        return "en-US";
    };
    /**
     *  Exposing this function for testability
     *  @param name: queryString name
     */
    FormattingService.prototype.getUrlParam = function (name) {
        var param = window.location.search.match(RegExp("[?&]" + name + "=([^&]*)"));
        return param ? param[1] : undefined;
    };
    return FormattingService;
}());
exports.FormattingService = FormattingService;
// DateTimeScaleFormatInfo is used to calculate and keep the Date formats used for different units supported by the DateTimeScaleModel
var DateTimeScaleFormatInfo = /** @class */ (function () {
    // Constructor
    /**
     * Creates new instance of the DateTimeScaleFormatInfo class.
     * @param culture - culture which calendar info is going to be used to derive the formats.
     */
    function DateTimeScaleFormatInfo(culture) {
        var calendar = culture.calendar;
        var patterns = calendar.patterns;
        var monthAbbreviations = calendar["months"]["namesAbbr"];
        var cultureHasMonthAbbr = monthAbbreviations && monthAbbreviations[0];
        var yearMonthPattern = patterns["Y"];
        var monthDayPattern = patterns["M"];
        var fullPattern = patterns["f"];
        var longTimePattern = patterns["T"];
        var shortTimePattern = patterns["t"];
        var separator = fullPattern.indexOf(",") > -1 ? ", " : " ";
        var hasYearSymbol = yearMonthPattern.indexOf("yyyy'") === 0 && yearMonthPattern.length > 6 && yearMonthPattern[6] === "\'";
        this.YearPattern = hasYearSymbol ? yearMonthPattern.substring(0, 7) : "yyyy";
        var yearPos = fullPattern.indexOf("yy");
        var monthPos = fullPattern.indexOf("MMMM");
        this.MonthPattern = cultureHasMonthAbbr && monthPos > -1 ? (yearPos > monthPos ? "MMM yyyy" : "yyyy MMM") : yearMonthPattern;
        this.DayPattern = cultureHasMonthAbbr ? monthDayPattern.replace("MMMM", "MMM") : monthDayPattern;
        var minutePos = fullPattern.indexOf("mm");
        var pmPos = fullPattern.indexOf("tt");
        var shortHourPattern = pmPos > -1 ? shortTimePattern.replace(":mm ", "") : shortTimePattern;
        this.HourPattern = yearPos < minutePos ? this.DayPattern + separator + shortHourPattern : shortHourPattern + separator + this.DayPattern;
        this.MinutePattern = shortTimePattern;
        this.SecondPattern = longTimePattern;
        this.MillisecondPattern = longTimePattern.replace("ss", "ss.fff");
        // Special cases
        switch (culture.name) {
            case "fi-FI":
                this.DayPattern = this.DayPattern.replace("'ta'", ""); // Fix for finish 'ta' suffix for month names.
                this.HourPattern = this.HourPattern.replace("'ta'", "");
                break;
        }
    }
    // Methods
    /**
     * Returns the format string of the provided DateTimeUnit.
     * @param unit - date or time unit
     */
    DateTimeScaleFormatInfo.prototype.getFormatString = function (unit) {
        switch (unit) {
            case iFormattingService_1.DateTimeUnit.Year:
                return this.YearPattern;
            case iFormattingService_1.DateTimeUnit.Month:
                return this.MonthPattern;
            case iFormattingService_1.DateTimeUnit.Week:
            case iFormattingService_1.DateTimeUnit.Day:
                return this.DayPattern;
            case iFormattingService_1.DateTimeUnit.Hour:
                return this.HourPattern;
            case iFormattingService_1.DateTimeUnit.Minute:
                return this.MinutePattern;
            case iFormattingService_1.DateTimeUnit.Second:
                return this.SecondPattern;
            case iFormattingService_1.DateTimeUnit.Millisecond:
                return this.MillisecondPattern;
        }
    };
    return DateTimeScaleFormatInfo;
}());
var formattingService = new FormattingService();
exports.formattingService = formattingService;
//# sourceMappingURL=formattingService.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/iFormattingService.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/iFormattingService.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DateTimeUnit = void 0;
// Enumeration of DateTimeUnits
var DateTimeUnit;
(function (DateTimeUnit) {
    DateTimeUnit[DateTimeUnit["Year"] = 0] = "Year";
    DateTimeUnit[DateTimeUnit["Month"] = 1] = "Month";
    DateTimeUnit[DateTimeUnit["Week"] = 2] = "Week";
    DateTimeUnit[DateTimeUnit["Day"] = 3] = "Day";
    DateTimeUnit[DateTimeUnit["Hour"] = 4] = "Hour";
    DateTimeUnit[DateTimeUnit["Minute"] = 5] = "Minute";
    DateTimeUnit[DateTimeUnit["Second"] = 6] = "Second";
    DateTimeUnit[DateTimeUnit["Millisecond"] = 7] = "Millisecond";
})(DateTimeUnit = exports.DateTimeUnit || (exports.DateTimeUnit = {}));
//# sourceMappingURL=iFormattingService.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/numberFormat.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/numberFormat.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCustomFormatMetadata = exports.formatWithCustomOverride = exports.format = exports.isStandardFormat = exports.canFormat = exports.getComponents = exports.hasFormatComponents = exports.addDecimalsToFormat = exports.getNumericFormat = exports.NumberFormatComponentsDelimeter = void 0;
/**
 * NumberFormat module contains the static methods for formatting the numbers.
 * It extends the Globalize functionality to support complete set of .NET
 * formatting expressions for numeric types including custom formats.
 */
/* eslint-disable no-useless-escape */
var globalize_1 = __webpack_require__(/*! ./../../globalize/globalize */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.js");
// powerbi.extensibility.utils.type
var powerbi_visuals_utils_typeutils_1 = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/index.js");
// powerbi.extensibility.utils.formatting
var stringExtensions = __webpack_require__(/*! ./../stringExtensions */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/stringExtensions.js");
var formattingEncoder = __webpack_require__(/*! ./formattingEncoder */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingEncoder.js");
var formattingService_1 = __webpack_require__(/*! ./formattingService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingService.js");
var NumericalPlaceHolderRegex = /\{.+\}/;
var ScientificFormatRegex = /e[+-]*[0#]+/i;
var StandardFormatRegex = /^[a-z]\d{0,2}$/i; // a letter + up to 2 digits for precision specifier
var TrailingZerosRegex = /0+$/;
var DecimalFormatRegex = /\.([0#]*)/g;
var NumericFormatRegex = /[0#,\.]+[0,#]*/g;
// (?=...) is a positive lookahead assertion. The RE is asking for the last digit placeholder, [0#],
// which is followed by non-digit placeholders and the end of string, [^0#]*$. But it only matches
// the last digit placeholder, not anything that follows because the positive lookahead isn"t included
// in the match - it is only a condition.
var LastNumericPlaceholderRegex = /([0#])(?=[^0#]*$)/;
var DecimalFormatCharacter = ".";
var ZeroPlaceholder = "0";
var DigitPlaceholder = "#";
var ExponentialFormatChar = "E";
var NumericPlaceholders = [ZeroPlaceholder, DigitPlaceholder];
var NumericPlaceholderRegex = new RegExp(NumericPlaceholders.join("|"), "g");
exports.NumberFormatComponentsDelimeter = ";";
function getNonScientificFormatWithPrecision(baseFormat, numericFormat) {
    if (!numericFormat || baseFormat === undefined)
        return baseFormat;
    var newFormat = "{0:" + numericFormat + "}";
    return baseFormat.replace("{0}", newFormat);
}
function getNumericFormat(value, baseFormat) {
    if (baseFormat == null)
        return baseFormat;
    if (hasFormatComponents(baseFormat)) {
        var _a = getComponents(baseFormat), positive = _a.positive, negative = _a.negative, zero = _a.zero;
        if (value > 0)
            return getNumericFormatFromComponent(value, positive);
        else if (value === 0)
            return getNumericFormatFromComponent(value, zero);
        return getNumericFormatFromComponent(value, negative);
    }
    return getNumericFormatFromComponent(value, baseFormat);
}
exports.getNumericFormat = getNumericFormat;
function getNumericFormatFromComponent(value, format) {
    var match = powerbi_visuals_utils_typeutils_1.regExpExtensions.run(NumericFormatRegex, format);
    if (match)
        return match[0];
    return format;
}
function addDecimalsToFormat(baseFormat, decimals, trailingZeros) {
    if (decimals == null)
        return baseFormat;
    // Default format string
    if (baseFormat == null)
        baseFormat = ZeroPlaceholder;
    if (hasFormatComponents(baseFormat)) {
        var _a = getComponents(baseFormat), positive = _a.positive, negative = _a.negative, zero = _a.zero;
        var formats = [positive, negative, zero];
        for (var i = 0; i < formats.length; i++) {
            // Update format in formats array
            formats[i] = addDecimalsToFormatComponent(formats[i], decimals, trailingZeros);
        }
        return formats.join(exports.NumberFormatComponentsDelimeter);
    }
    return addDecimalsToFormatComponent(baseFormat, decimals, trailingZeros);
}
exports.addDecimalsToFormat = addDecimalsToFormat;
function addDecimalsToFormatComponent(format, decimals, trailingZeros) {
    decimals = Math.abs(decimals);
    if (decimals >= 0) {
        var literals = [];
        format = formattingEncoder.preserveLiterals(format, literals);
        var placeholder = trailingZeros ? ZeroPlaceholder : DigitPlaceholder;
        var decimalPlaceholders = stringExtensions.repeat(placeholder, Math.abs(decimals));
        var match = powerbi_visuals_utils_typeutils_1.regExpExtensions.run(DecimalFormatRegex, format);
        if (match) {
            var beforeDecimal = format.substring(0, match.index);
            var formatDecimal = format.substring(match.index + 1, match[1].length + match.index + 1);
            var afterDecimal = format.substring(match.index + match[0].length);
            if (trailingZeros)
                // Use explicit decimals argument as placeholders
                formatDecimal = decimalPlaceholders;
            else {
                var decimalChange = decimalPlaceholders.length - formatDecimal.length;
                if (decimalChange > 0)
                    // Append decimalPlaceholders to existing decimal portion of format string
                    formatDecimal = formatDecimal + decimalPlaceholders.slice(-decimalChange);
                else if (decimalChange < 0)
                    // Remove decimals from formatDecimal
                    formatDecimal = formatDecimal.slice(0, decimalChange);
            }
            if (formatDecimal.length > 0)
                formatDecimal = DecimalFormatCharacter + formatDecimal;
            format = beforeDecimal + formatDecimal + afterDecimal;
        }
        else if (decimalPlaceholders.length > 0) {
            // Replace last numeric placeholder with decimal portion
            format = format.replace(LastNumericPlaceholderRegex, "$1" + DecimalFormatCharacter + decimalPlaceholders);
        }
        if (literals.length !== 0)
            format = formattingEncoder.restoreLiterals(format, literals);
    }
    return format;
}
function hasFormatComponents(format) {
    return formattingEncoder.removeLiterals(format).indexOf(exports.NumberFormatComponentsDelimeter) !== -1;
}
exports.hasFormatComponents = hasFormatComponents;
function getComponents(format) {
    var signFormat = {
        hasNegative: false,
        positive: format,
        negative: format,
        zero: format,
    };
    // escape literals so semi-colon in a literal isn't interpreted as a delimiter
    // NOTE: OK to use the literals extracted here for all three components before since the literals are indexed.
    // For example, "'pos-lit';'neg-lit'" will get preserved as "\uE000;\uE001" and the literal array will be
    // ['pos-lit', 'neg-lit']. When the negative components is restored, its \uE001 will select the second
    // literal.
    var literals = [];
    format = formattingEncoder.preserveLiterals(format, literals);
    var signSpecificFormats = format.split(exports.NumberFormatComponentsDelimeter);
    var formatCount = signSpecificFormats.length;
    if (formatCount > 1) {
        if (literals.length !== 0)
            signSpecificFormats = signSpecificFormats.map(function (signSpecificFormat) { return formattingEncoder.restoreLiterals(signSpecificFormat, literals); });
        signFormat.hasNegative = true;
        signFormat.positive = signFormat.zero = signSpecificFormats[0];
        signFormat.negative = signSpecificFormats[1];
        if (formatCount > 2)
            signFormat.zero = signSpecificFormats[2];
    }
    return signFormat;
}
exports.getComponents = getComponents;
var _lastCustomFormatMeta;
// Evaluates if the value can be formatted using the NumberFormat
function canFormat(value) {
    return typeof (value) === "number";
}
exports.canFormat = canFormat;
function isStandardFormat(format) {
    return StandardFormatRegex.test(format);
}
exports.isStandardFormat = isStandardFormat;
// Formats the number using specified format expression and culture
function format(value, format, culture) {
    format = format || "G";
    try {
        if (isStandardFormat(format))
            return formatNumberStandard(value, format, culture);
        return formatNumberCustom(value, format, culture);
    }
    catch (e) {
        return globalize_1.Globalize.format(value, undefined, culture);
    }
}
exports.format = format;
// Performs a custom format with a value override.  Typically used for custom formats showing scaled values.
function formatWithCustomOverride(value, format, nonScientificOverrideFormat, culture) {
    return formatNumberCustom(value, format, culture, nonScientificOverrideFormat);
}
exports.formatWithCustomOverride = formatWithCustomOverride;
// Formats the number using standard format expression
function formatNumberStandard(value, format, culture) {
    var result;
    var precision = (format.length > 1 ? parseInt(format.substring(1, format.length), 10) : undefined);
    var numberFormatInfo = culture.numberFormat;
    var formatChar = format.charAt(0);
    var abs = Math.abs(value);
    switch (formatChar) {
        case "e":
        case "E":
            if (precision === undefined) {
                precision = 6;
            }
            format = "0." + stringExtensions.repeat("0", precision) + formatChar + "+000";
            result = formatNumberCustom(value, format, culture);
            break;
        case "f":
        case "F":
            result = precision !== undefined ? value.toFixed(precision) : value.toFixed(numberFormatInfo.decimals);
            result = localize(result, numberFormatInfo);
            break;
        case "g":
        case "G":
            if (abs === 0 || (1E-4 <= abs && abs < 1E15)) {
                // For the range of 0.0001 to 1,000,000,000,000,000 - use the normal form
                result = precision !== undefined ? value.toPrecision(precision) : value.toString();
            }
            else {
                // Otherwise use exponential
                // Assert that value is a number and fall back on returning value if it is not
                if (typeof (value) !== "number")
                    return String(value);
                result = precision !== undefined ? value.toExponential(precision) : value.toExponential();
                result = result.replace("e", "E");
            }
            result = localize(result, numberFormatInfo);
            break;
        case "r":
        case "R":
            result = value.toString();
            result = localize(result, numberFormatInfo);
            break;
        case "x":
        case "X":
            result = value.toString(16);
            if (formatChar === "X") {
                result = result.toUpperCase();
            }
            if (precision !== undefined) {
                var actualPrecision = result.length;
                var isNegative = value < 0;
                if (isNegative) {
                    actualPrecision--;
                }
                var paddingZerosCount = precision - actualPrecision;
                var paddingZeros = undefined;
                if (paddingZerosCount > 0) {
                    paddingZeros = stringExtensions.repeat("0", paddingZerosCount);
                }
                if (isNegative) {
                    result = "-" + paddingZeros + result.substring(1);
                }
                else {
                    result = paddingZeros + result;
                }
            }
            result = localize(result, numberFormatInfo);
            break;
        default:
            result = globalize_1.Globalize.format(value, format, culture);
    }
    return result;
}
// Formats the number using custom format expression
function formatNumberCustom(value, format, culture, nonScientificOverrideFormat) {
    var result;
    var numberFormatInfo = culture.numberFormat;
    if (isFinite(value)) {
        // Split format by positive[;negative;zero] pattern
        var formatComponents = getComponents(format);
        // Pick a format based on the sign of value
        if (value > 0) {
            format = formatComponents.positive;
        }
        else if (value === 0) {
            format = formatComponents.zero;
        }
        else {
            format = formatComponents.negative;
        }
        // Normalize value if we have an explicit negative format
        if (formatComponents.hasNegative)
            value = Math.abs(value);
        // Get format metadata
        var formatMeta = getCustomFormatMetadata(format, true /*calculatePrecision*/);
        // Preserve literals and escaped chars
        var literals = [];
        if (formatMeta.hasLiterals) {
            format = formattingEncoder.preserveLiterals(format, literals);
        }
        // Scientific format
        if (formatMeta.hasE && !nonScientificOverrideFormat) {
            var scientificMatch = powerbi_visuals_utils_typeutils_1.regExpExtensions.run(ScientificFormatRegex, format);
            if (scientificMatch) {
                // Case 2.1. Scientific custom format
                var formatM = format.substring(0, scientificMatch.index);
                var formatE = format.substring(scientificMatch.index + 2); // E(+|-)
                var precision = getCustomFormatPrecision(formatM, formatMeta);
                var scale = getCustomFormatScale(formatM, formatMeta);
                if (scale !== 1) {
                    value = value * scale;
                }
                // Assert that value is a number and fall back on returning value if it is not
                if (typeof (value) !== "number")
                    return String(value);
                var s = value.toExponential(precision);
                var indexOfE = s.indexOf("e");
                var mantissa = s.substring(0, indexOfE);
                var exp = s.substring(indexOfE + 1);
                var resultM = fuseNumberWithCustomFormat(mantissa, formatM, numberFormatInfo);
                var resultE = fuseNumberWithCustomFormat(exp, formatE, numberFormatInfo);
                if (resultE.charAt(0) === "+" && scientificMatch[0].charAt(1) !== "+") {
                    resultE = resultE.substring(1);
                }
                var e = scientificMatch[0].charAt(0);
                result = resultM + e + resultE;
            }
        }
        // Non scientific format
        if (result === undefined) {
            var valueFormatted = void 0;
            var isValueGlobalized = false;
            var precision = getCustomFormatPrecision(format, formatMeta);
            var scale = getCustomFormatScale(format, formatMeta);
            if (scale !== 1)
                value = value * scale;
            // Rounding
            value = parseFloat(toNonScientific(value, precision));
            if (!isFinite(value)) {
                // very large and small finite values can become infinite by parseFloat(toNonScientific())
                return globalize_1.Globalize.format(value, undefined);
            }
            if (nonScientificOverrideFormat) {
                // Get numeric format from format string
                var numericFormat = getNumericFormat(value, format);
                // Add separators and decimalFormat to nonScientificFormat
                nonScientificOverrideFormat = getNonScientificFormatWithPrecision(nonScientificOverrideFormat, numericFormat);
                // Format the value
                valueFormatted = formattingService_1.formattingService.format(nonScientificOverrideFormat, [value], culture.name);
                isValueGlobalized = true;
            }
            else
                valueFormatted = toNonScientific(value, precision);
            result = fuseNumberWithCustomFormat(valueFormatted, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized);
        }
        if (formatMeta.hasLiterals) {
            result = formattingEncoder.restoreLiterals(result, literals, false);
        }
        _lastCustomFormatMeta = formatMeta;
    }
    else {
        return globalize_1.Globalize.format(value, undefined);
    }
    return result;
}
// Returns string with the fixed point respresentation of the number
function toNonScientific(value, precision) {
    var result = "";
    var precisionZeros = 0;
    // Double precision numbers support actual 15-16 decimal digits of precision.
    if (precision > 16) {
        precisionZeros = precision - 16;
        precision = 16;
    }
    var digitsBeforeDecimalPoint = powerbi_visuals_utils_typeutils_1.double.log10(Math.abs(value));
    if (digitsBeforeDecimalPoint < 16) {
        if (digitsBeforeDecimalPoint > 0) {
            var maxPrecision = 16 - digitsBeforeDecimalPoint;
            if (precision > maxPrecision) {
                precisionZeros += precision - maxPrecision;
                precision = maxPrecision;
            }
        }
        result = value.toFixed(precision);
    }
    else if (digitsBeforeDecimalPoint === 16) {
        result = value.toFixed(0);
        precisionZeros += precision;
        if (precisionZeros > 0) {
            result += ".";
        }
    }
    else { // digitsBeforeDecimalPoint > 16
        // Different browsers have different implementations of the toFixed().
        // In IE it returns fixed format no matter what's the number. In FF and Chrome the method returns exponential format for numbers greater than 1E21.
        // So we need to check for range and convert the to exponential with the max precision.
        // Then we convert exponential string to fixed by removing the dot and padding with "power" zeros.
        // Assert that value is a number and fall back on returning value if it is not
        if (typeof (value) !== "number")
            return String(value);
        result = value.toExponential(15);
        var indexOfE = result.indexOf("e");
        if (indexOfE > 0) {
            var indexOfDot = result.indexOf(".");
            var mantissa = result.substring(0, indexOfE);
            var exp = result.substring(indexOfE + 1);
            var powerZeros = parseInt(exp, 10) - (mantissa.length - indexOfDot - 1);
            result = mantissa.replace(".", "") + stringExtensions.repeat("0", powerZeros);
            if (precision > 0) {
                result = result + "." + stringExtensions.repeat("0", precision);
            }
        }
    }
    if (precisionZeros > 0) {
        result = result + stringExtensions.repeat("0", precisionZeros);
    }
    return result;
}
/**
 * Returns the formatMetadata of the format
 * When calculating precision and scale, if format string of
 * positive[;negative;zero] => positive format will be used
 * @param (required) format - format string
 * @param (optional) calculatePrecision - calculate precision of positive format
 * @param (optional) calculateScale - calculate scale of positive format
 */
function getCustomFormatMetadata(format, calculatePrecision, calculateScale, calculatePartsPerScale) {
    if (_lastCustomFormatMeta !== undefined && format === _lastCustomFormatMeta.format) {
        return _lastCustomFormatMeta;
    }
    var literals = [];
    var escaped = formattingEncoder.preserveLiterals(format, literals);
    var result = {
        format: format,
        hasLiterals: literals.length !== 0,
        hasE: false,
        hasCommas: false,
        hasDots: false,
        hasPercent: false,
        hasPermile: false,
        precision: undefined,
        scale: undefined,
        partsPerScale: undefined,
    };
    for (var i = 0, length_1 = escaped.length; i < length_1; i++) {
        var c = escaped.charAt(i);
        switch (c) {
            case "e":
            case "E":
                result.hasE = true;
                break;
            case ",":
                result.hasCommas = true;
                break;
            case ".":
                result.hasDots = true;
                break;
            case "%":
                result.hasPercent = true;
                break;
            case "\u2030": // ‰
                result.hasPermile = true;
                break;
        }
    }
    // Use positive format for calculating these values
    var formatComponents = getComponents(format);
    if (calculatePrecision)
        result.precision = getCustomFormatPrecision(formatComponents.positive, result);
    if (calculatePartsPerScale)
        result.partsPerScale = getCustomFormatPartsPerScale(formatComponents.positive, result);
    if (calculateScale)
        result.scale = getCustomFormatScale(formatComponents.positive, result);
    return result;
}
exports.getCustomFormatMetadata = getCustomFormatMetadata;
/** Returns the decimal precision of format based on the number of # and 0 chars after the decimal point
     * Important: The input format string needs to be split to the appropriate pos/neg/zero portion to work correctly */
function getCustomFormatPrecision(format, formatMeta) {
    if (formatMeta.precision > -1) {
        return formatMeta.precision;
    }
    var result = 0;
    if (formatMeta.hasDots) {
        if (formatMeta.hasLiterals) {
            format = formattingEncoder.removeLiterals(format);
        }
        var dotIndex = format.indexOf(".");
        if (dotIndex > -1) {
            var count = format.length;
            for (var i = dotIndex; i < count; i++) {
                var char = format.charAt(i);
                if (char.match(NumericPlaceholderRegex))
                    result++;
                // 0.00E+0 :: Break before counting 0 in
                // exponential portion of format string
                if (char === ExponentialFormatChar)
                    break;
            }
            result = Math.min(19, result);
        }
    }
    formatMeta.precision = result;
    return result;
}
function getCustomFormatPartsPerScale(format, formatMeta) {
    if (formatMeta.partsPerScale != null)
        return formatMeta.partsPerScale;
    var result = 1;
    if (formatMeta.hasPercent && format.indexOf("%") > -1) {
        result = result * 100;
    }
    if (formatMeta.hasPermile && format.indexOf(/* ‰ */ "\u2030") > -1) {
        result = result * 1000;
    }
    formatMeta.partsPerScale = result;
    return result;
}
// Returns the scale factor of the format based on the "%" and scaling "," chars in the format
function getCustomFormatScale(format, formatMeta) {
    if (formatMeta.scale > -1) {
        return formatMeta.scale;
    }
    var result = getCustomFormatPartsPerScale(format, formatMeta);
    if (formatMeta.hasCommas) {
        var dotIndex = format.indexOf(".");
        if (dotIndex === -1) {
            dotIndex = format.length;
        }
        for (var i = dotIndex - 1; i > -1; i--) {
            var char = format.charAt(i);
            if (char === ",") {
                result = result / 1000;
            }
            else {
                break;
            }
        }
    }
    formatMeta.scale = result;
    return result;
}
function fuseNumberWithCustomFormat(value, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized) {
    var suppressModifyValue = !!nonScientificOverrideFormat;
    var formatParts = format.split(".", 2);
    if (formatParts.length === 2) {
        var wholeFormat = formatParts[0];
        var fractionFormat = formatParts[1];
        var displayUnit = "";
        // Remove display unit from value before splitting on "." as localized display units sometimes end with "."
        if (nonScientificOverrideFormat) {
            displayUnit = nonScientificOverrideFormat.replace(NumericalPlaceHolderRegex, "");
            value = value.replace(displayUnit, "");
        }
        var globalizedDecimalSeparator = numberFormatInfo["."];
        var decimalSeparator = isValueGlobalized ? globalizedDecimalSeparator : ".";
        var valueParts = value.split(decimalSeparator, 2);
        var wholeValue = valueParts.length === 1 ? valueParts[0] + displayUnit : valueParts[0];
        var fractionValue = valueParts.length === 2 ? valueParts[1] + displayUnit : "";
        fractionValue = fractionValue.replace(TrailingZerosRegex, "");
        var wholeFormattedValue = fuseNumberWithCustomFormatLeft(wholeValue, wholeFormat, numberFormatInfo, suppressModifyValue);
        var fractionFormattedValue = fuseNumberWithCustomFormatRight(fractionValue, fractionFormat, suppressModifyValue);
        if (fractionFormattedValue.fmtOnly || fractionFormattedValue.value === "")
            return wholeFormattedValue + fractionFormattedValue.value;
        return wholeFormattedValue + globalizedDecimalSeparator + fractionFormattedValue.value;
    }
    return fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue);
}
function fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue) {
    var groupSymbolIndex = format.indexOf(",");
    var enableGroups = groupSymbolIndex > -1 && groupSymbolIndex < Math.max(format.lastIndexOf("0"), format.lastIndexOf("#")) && numberFormatInfo[","];
    var groupDigitCount = 0;
    var groupIndex = 0;
    var groupSizes = numberFormatInfo.groupSizes || [3];
    var groupSize = groupSizes[0];
    var groupSeparator = numberFormatInfo[","];
    var sign = "";
    var firstChar = value.charAt(0);
    if (firstChar === "+" || firstChar === "-") {
        sign = numberFormatInfo[firstChar];
        value = value.substring(1);
    }
    var isZero = value === "0";
    var result = "";
    var leftBuffer = "";
    var vi = value.length - 1;
    var fmtOnly = true;
    // Iterate through format chars and replace 0 and # with the digits from the value string
    for (var fi = format.length - 1; fi > -1; fi--) {
        var formatChar = format.charAt(fi);
        switch (formatChar) {
            case ZeroPlaceholder:
            case DigitPlaceholder:
                fmtOnly = false;
                if (leftBuffer !== "") {
                    result = leftBuffer + result;
                    leftBuffer = "";
                }
                if (!suppressModifyValue) {
                    if (vi > -1 || formatChar === ZeroPlaceholder) {
                        if (enableGroups) {
                            // If the groups are enabled we'll need to keep track of the current group index and periodically insert group separator,
                            if (groupDigitCount === groupSize) {
                                result = groupSeparator + result;
                                groupIndex++;
                                if (groupIndex < groupSizes.length) {
                                    groupSize = groupSizes[groupIndex];
                                }
                                groupDigitCount = 1;
                            }
                            else {
                                groupDigitCount++;
                            }
                        }
                    }
                    if (vi > -1) {
                        if (isZero && formatChar === DigitPlaceholder) {
                            // Special case - if we need to format a zero value and the # symbol is used - we don't copy it into the result)
                        }
                        else {
                            result = value.charAt(vi) + result;
                        }
                        vi--;
                    }
                    else if (formatChar !== DigitPlaceholder) {
                        result = formatChar + result;
                    }
                }
                break;
            case ",":
                // We should skip all the , chars
                break;
            default:
                leftBuffer = formatChar + leftBuffer;
                break;
        }
    }
    // If the value didn't fit into the number of zeros provided in the format then we should insert the missing part of the value into the result
    if (!suppressModifyValue) {
        if (vi > -1 && result !== "") {
            if (enableGroups) {
                while (vi > -1) {
                    if (groupDigitCount === groupSize) {
                        result = groupSeparator + result;
                        groupIndex++;
                        if (groupIndex < groupSizes.length) {
                            groupSize = groupSizes[groupIndex];
                        }
                        groupDigitCount = 1;
                    }
                    else {
                        groupDigitCount++;
                    }
                    result = value.charAt(vi) + result;
                    vi--;
                }
            }
            else {
                result = value.substring(0, vi + 1) + result;
            }
        }
        // Insert sign in front of the leftBuffer and result
        return sign + leftBuffer + result;
    }
    if (fmtOnly)
        // If the format doesn't specify any digits to be displayed, then just return the format we've parsed up until now.
        return sign + leftBuffer + result;
    return sign + leftBuffer + value + result;
}
function fuseNumberWithCustomFormatRight(value, format, suppressModifyValue) {
    var formatLength = format.length;
    var valueLength = value.length;
    if (suppressModifyValue) {
        var lastChar = format.charAt(formatLength - 1);
        if (!lastChar.match(NumericPlaceholderRegex))
            return {
                value: value + lastChar,
                fmtOnly: value === "",
            };
        return {
            value: value,
            fmtOnly: value === "",
        };
    }
    var result = "", fmtOnly = true, vi = 0;
    for (var fi = 0; fi < formatLength; fi++) {
        var formatChar = format.charAt(fi);
        if (vi < valueLength) {
            switch (formatChar) {
                case ZeroPlaceholder:
                case DigitPlaceholder:
                    result += value[vi++];
                    fmtOnly = false;
                    break;
                default:
                    result += formatChar;
            }
        }
        else {
            if (formatChar !== DigitPlaceholder) {
                result += formatChar;
                fmtOnly = fmtOnly && (formatChar !== ZeroPlaceholder);
            }
        }
    }
    return {
        value: result,
        fmtOnly: fmtOnly,
    };
}
function localize(value, dictionary) {
    var plus = dictionary["+"];
    var minus = dictionary["-"];
    var dot = dictionary["."];
    var comma = dictionary[","];
    if (plus === "+" && minus === "-" && dot === "." && comma === ",") {
        return value;
    }
    var count = value.length;
    var result = "";
    for (var i = 0; i < count; i++) {
        var char = value.charAt(i);
        switch (char) {
            case "+":
                result = result + plus;
                break;
            case "-":
                result = result + minus;
                break;
            case ".":
                result = result + dot;
                break;
            case ",":
                result = result + comma;
                break;
            default:
                result = result + char;
                break;
        }
    }
    return result;
}
//# sourceMappingURL=numberFormat.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.familyInfo = exports.font = exports.formattingService = exports.displayUnitSystemType = exports.dateTimeSequence = exports.displayUnitSystem = exports.dateUtils = exports.wordBreaker = exports.textUtil = exports.textMeasurementService = exports.stringExtensions = exports.valueFormatter = exports.formatting = exports.interfaces = void 0;
var formatting = __webpack_require__(/*! ./formatting */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formatting.js");
exports.formatting = formatting;
var valueFormatter = __webpack_require__(/*! ./valueFormatter */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/valueFormatter.js");
exports.valueFormatter = valueFormatter;
var stringExtensions = __webpack_require__(/*! ./stringExtensions */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/stringExtensions.js");
exports.stringExtensions = stringExtensions;
var textMeasurementService = __webpack_require__(/*! ./textMeasurementService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/textMeasurementService.js");
exports.textMeasurementService = textMeasurementService;
var interfaces = __webpack_require__(/*! ./interfaces */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/interfaces.js");
exports.interfaces = interfaces;
var font = __webpack_require__(/*! ./font/family */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/family.js");
exports.font = font;
var familyInfo = __webpack_require__(/*! ./font/familyInfo */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/familyInfo.js");
exports.familyInfo = familyInfo;
var textUtil = __webpack_require__(/*! ./textUtil */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/textUtil.js");
exports.textUtil = textUtil;
var dateUtils = __webpack_require__(/*! ./date/dateUtils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateUtils.js");
exports.dateUtils = dateUtils;
var dateTimeSequence = __webpack_require__(/*! ./date/dateTimeSequence */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateTimeSequence.js");
exports.dateTimeSequence = dateTimeSequence;
var displayUnitSystem = __webpack_require__(/*! ./displayUnitSystem/displayUnitSystem */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystem.js");
exports.displayUnitSystem = displayUnitSystem;
var displayUnitSystemType = __webpack_require__(/*! ./displayUnitSystem/displayUnitSystemType */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystemType.js");
exports.displayUnitSystemType = displayUnitSystemType;
var formattingService = __webpack_require__(/*! ./formattingService/formattingService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingService.js");
exports.formattingService = formattingService;
var wordBreaker = __webpack_require__(/*! ./wordBreaker */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/wordBreaker.js");
exports.wordBreaker = wordBreaker;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/interfaces.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/interfaces.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=interfaces.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/storageService/ephemeralStorageService.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/storageService/ephemeralStorageService.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ephemeralStorageService = exports.EphemeralStorageService = void 0;
var EphemeralStorageService = /** @class */ (function () {
    function EphemeralStorageService(clearCacheInterval) {
        this.cache = {};
        this.clearCacheInterval = (clearCacheInterval != null)
            ? clearCacheInterval
            : EphemeralStorageService.defaultClearCacheInterval;
        this.clearCache();
    }
    EphemeralStorageService.prototype.getData = function (key) {
        return this.cache[key];
    };
    EphemeralStorageService.prototype.setData = function (key, data) {
        var _this = this;
        this.cache[key] = data;
        if (this.clearCacheTimerId == null) {
            this.clearCacheTimerId = setTimeout(function () { return _this.clearCache(); }, this.clearCacheInterval);
        }
    };
    EphemeralStorageService.prototype.clearCache = function () {
        this.cache = {};
        this.clearCacheTimerId = undefined;
    };
    EphemeralStorageService.defaultClearCacheInterval = (1000 * 60 * 60 * 24); // 1 day
    return EphemeralStorageService;
}());
exports.EphemeralStorageService = EphemeralStorageService;
exports.ephemeralStorageService = new EphemeralStorageService();
//# sourceMappingURL=ephemeralStorageService.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/stringExtensions.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/stringExtensions.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stripTagDelimiters = exports.deriveClsCompliantName = exports.stringifyAsPrettyJSON = exports.normalizeFileName = exports.escapeStringForRegex = exports.constructNameFromList = exports.findUniqueName = exports.ensureUniqueNames = exports.replaceAll = exports.repeat = exports.getLengthDifference = exports.trimWhitespace = exports.trimTrailingWhitespace = exports.isWhitespace = exports.containsWhitespace = exports.isNullOrUndefinedOrWhiteSpaceString = exports.isNullOrEmpty = exports.stringToArrayBuffer = exports.normalizeCase = exports.containsIgnoreCase = exports.contains = exports.startsWith = exports.startsWithIgnoreCase = exports.equalIgnoreCase = exports.format = exports.endsWith = void 0;
/* eslint-disable no-useless-escape */
var HtmlTagRegex = new RegExp("[<>]", "g");
/**
 * Checks if a string ends with a sub-string.
 */
function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
}
exports.endsWith = endsWith;
function format() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var s = args[0];
    if (isNullOrUndefinedOrWhiteSpaceString(s))
        return s;
    for (var i = 0; i < args.length - 1; i++) {
        var reg = new RegExp("\\{" + i + "\\}", "gm");
        s = s.replace(reg, args[i + 1]);
    }
    return s;
}
exports.format = format;
/**
 * Compares two strings for equality, ignoring case.
 */
function equalIgnoreCase(a, b) {
    return normalizeCase(a) === normalizeCase(b);
}
exports.equalIgnoreCase = equalIgnoreCase;
function startsWithIgnoreCase(a, b) {
    var normalizedSearchString = normalizeCase(b);
    return normalizeCase(a).indexOf(normalizedSearchString) === 0;
}
exports.startsWithIgnoreCase = startsWithIgnoreCase;
function startsWith(a, b) {
    return a.indexOf(b) === 0;
}
exports.startsWith = startsWith;
// Determines whether a string contains a specified substring (by case-sensitive comparison).
function contains(source, substring) {
    if (source == null)
        return false;
    return source.indexOf(substring) !== -1;
}
exports.contains = contains;
// Determines whether a string contains a specified substring (while ignoring case).
function containsIgnoreCase(source, substring) {
    if (source == null)
        return false;
    return contains(normalizeCase(source), normalizeCase(substring));
}
exports.containsIgnoreCase = containsIgnoreCase;
/**
 * Normalizes case for a string.
 * Used by equalIgnoreCase method.
 */
function normalizeCase(value) {
    return value.toUpperCase();
}
exports.normalizeCase = normalizeCase;
/**
 * Receives a string and returns an ArrayBuffer of its characters.
 * @return An ArrayBuffer of the string's characters.
 * If the string is empty or null or undefined - returns null.
 */
function stringToArrayBuffer(str) {
    if (isNullOrEmpty(str)) {
        return null;
    }
    var buffer = new ArrayBuffer(str.length);
    var bufferView = new Uint8Array(buffer);
    for (var i = 0, strLen = str.length; i < strLen; i++) {
        bufferView[i] = str.charCodeAt(i);
    }
    return bufferView;
}
exports.stringToArrayBuffer = stringToArrayBuffer;
/**
 * Is string null or empty or undefined?
 * @return True if the value is null or undefined or empty string,
 * otherwise false.
 */
function isNullOrEmpty(value) {
    return (value == null) || (value.length === 0);
}
exports.isNullOrEmpty = isNullOrEmpty;
/**
 * Returns true if the string is null, undefined, empty, or only includes white spaces.
 * @return True if the str is null, undefined, empty, or only includes white spaces,
 * otherwise false.
 */
function isNullOrUndefinedOrWhiteSpaceString(str) {
    return isNullOrEmpty(str) || isNullOrEmpty(str.trim());
}
exports.isNullOrUndefinedOrWhiteSpaceString = isNullOrUndefinedOrWhiteSpaceString;
/**
 * Returns a value indicating whether the str contains any whitespace.
 */
function containsWhitespace(str) {
    var expr = /\s/;
    return expr.test(str);
}
exports.containsWhitespace = containsWhitespace;
/**
 * Returns a value indicating whether the str is a whitespace string.
 */
function isWhitespace(str) {
    return str.trim() === "";
}
exports.isWhitespace = isWhitespace;
/**
 * Returns the string with any trailing whitespace from str removed.
 */
function trimTrailingWhitespace(str) {
    return str.replace(/\s+$/, "");
}
exports.trimTrailingWhitespace = trimTrailingWhitespace;
/**
 * Returns the string with any leading and trailing whitespace from str removed.
 */
function trimWhitespace(str) {
    return str.replace(/^\s+/, "").replace(/\s+$/, "");
}
exports.trimWhitespace = trimWhitespace;
/**
 * Returns length difference between the two provided strings.
 */
function getLengthDifference(left, right) {
    return Math.abs(left.length - right.length);
}
exports.getLengthDifference = getLengthDifference;
/**
 * Repeat char or string several times.
 * @param char The string to repeat.
 * @param count How many times to repeat the string.
 */
function repeat(char, count) {
    var result = "";
    for (var i = 0; i < count; i++) {
        result += char;
    }
    return result;
}
exports.repeat = repeat;
/**
 * Replace all the occurrences of the textToFind in the text with the textToReplace.
 * @param text The original string.
 * @param textToFind Text to find in the original string.
 * @param textToReplace New text replacing the textToFind.
 */
function replaceAll(text, textToFind, textToReplace) {
    if (!textToFind)
        return text;
    var pattern = escapeStringForRegex(textToFind);
    return text.replace(new RegExp(pattern, "gi"), textToReplace);
}
exports.replaceAll = replaceAll;
function ensureUniqueNames(names) {
    var usedNames = {};
    // Make sure we are giving fair chance for all columns to stay with their original name
    // First we fill the used names map to contain all the original unique names from the list.
    for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
        var name_1 = names_1[_i];
        usedNames[name_1] = false;
    }
    var uniqueNames = [];
    // Now we go over all names and find a unique name for each
    for (var _a = 0, names_2 = names; _a < names_2.length; _a++) {
        var name_2 = names_2[_a];
        var uniqueName = name_2;
        // If the (original) column name is already taken lets try to find another name
        if (usedNames[uniqueName]) {
            var counter = 0;
            // Find a name that is not already in the map
            while (usedNames[uniqueName] !== undefined) {
                uniqueName = name_2 + "." + (++counter);
            }
        }
        uniqueNames.push(uniqueName);
        usedNames[uniqueName] = true;
    }
    return uniqueNames;
}
exports.ensureUniqueNames = ensureUniqueNames;
/**
 * Returns a name that is not specified in the values.
 */
function findUniqueName(usedNames, baseName) {
    // Find a unique name
    var i = 0, uniqueName = baseName;
    while (usedNames[uniqueName]) {
        uniqueName = baseName + (++i);
    }
    return uniqueName;
}
exports.findUniqueName = findUniqueName;
function constructNameFromList(list, separator, maxCharacter) {
    var labels = [];
    var exceeded;
    var length = 0;
    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
        var item = list_1[_i];
        if (length + item.length > maxCharacter && labels.length > 0) {
            exceeded = true;
            break;
        }
        labels.push(item);
        length += item.length;
    }
    var separatorWithSpace = " " + separator + " ";
    var name = labels.join(separatorWithSpace);
    if (exceeded)
        name += separatorWithSpace + "...";
    return name;
}
exports.constructNameFromList = constructNameFromList;
function escapeStringForRegex(s) {
    return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1");
}
exports.escapeStringForRegex = escapeStringForRegex;
/**
 * Remove file name reserved characters <>:"/\|?* from input string.
 */
function normalizeFileName(fileName) {
    return fileName.replace(/[\<\>\:"\/\\\|\?*]/g, "");
}
exports.normalizeFileName = normalizeFileName;
/**
 * Similar to JSON.stringify, but strips away escape sequences so that the resulting
 * string is human-readable (and parsable by JSON formatting/validating tools).
 */
function stringifyAsPrettyJSON(object) {
    // let specialCharacterRemover = (key: string, value: string) => value.replace(/[^\w\s]/gi, "");
    return JSON.stringify(object /*, specialCharacterRemover*/);
}
exports.stringifyAsPrettyJSON = stringifyAsPrettyJSON;
/**
 * Derive a CLS-compliant name from a specified string.  If no allowed characters are present, return a fallback string instead.
 * (6708134): this should have a fully Unicode-aware implementation
 */
function deriveClsCompliantName(input, fallback) {
    var result = input.replace(/^[^A-Za-z]*/g, "").replace(/[ :\.\/\\\-\u00a0\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000]/g, "_").replace(/[\W]/g, "");
    return result.length > 0 ? result : fallback;
}
exports.deriveClsCompliantName = deriveClsCompliantName;
// Performs cheap sanitization by stripping away HTML tag (<>) characters.
function stripTagDelimiters(s) {
    return s.replace(HtmlTagRegex, "");
}
exports.stripTagDelimiters = stripTagDelimiters;
//# sourceMappingURL=stringExtensions.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/textMeasurementService.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/textMeasurementService.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.wordBreakOverflowingText = exports.wordBreak = exports.svgEllipsis = exports.getTailoredTextOrDefault = exports.getDivElementWidth = exports.getSvgMeasurementProperties = exports.getMeasurementProperties = exports.measureSvgTextElementWidth = exports.estimateSvgTextHeight = exports.estimateSvgTextBaselineDelta = exports.measureSvgTextHeight = exports.measureSvgTextRect = exports.measureSvgTextWidth = exports.removeSpanElement = void 0;
// powerbi.extensibility.utils.type
var powerbi_visuals_utils_typeutils_1 = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/index.js");
// powerbi.extensibility.utils.formatting
var wordBreaker = __webpack_require__(/*! ./wordBreaker */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/wordBreaker.js");
var ephemeralStorageService_1 = __webpack_require__(/*! ./storageService/ephemeralStorageService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/storageService/ephemeralStorageService.js");
var ellipsis = "...";
var spanElement;
var svgTextElement;
var canvasCtx;
var fallbackFontFamily;
/**
 * Idempotent function for adding the elements to the DOM.
 */
function ensureDOM() {
    if (spanElement) {
        return;
    }
    spanElement = document.createElement("span");
    document.body.appendChild(spanElement);
    // The style hides the svg element from the canvas, preventing canvas from scrolling down to show svg black square.
    /* eslint-disable-next-line powerbi-visuals/no-http-string */
    var svgElement = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svgElement.setAttribute("height", "0");
    svgElement.setAttribute("width", "0");
    svgElement.setAttribute("position", "absolute");
    svgElement.style.top = "0px";
    svgElement.style.left = "0px";
    svgElement.style.position = "absolute";
    svgElement.style.height = "0px";
    svgElement.style.width = "0px";
    /* eslint-disable-next-line powerbi-visuals/no-http-string */
    svgTextElement = document.createElementNS("http://www.w3.org/2000/svg", "text");
    svgElement.appendChild(svgTextElement);
    document.body.appendChild(svgElement);
    var canvasElement = document.createElement("canvas");
    canvasCtx = canvasElement.getContext("2d");
    var style = window.getComputedStyle(svgTextElement);
    if (style) {
        fallbackFontFamily = style.fontFamily;
    }
    else {
        fallbackFontFamily = "";
    }
}
/**
 * Removes spanElement from DOM.
 */
function removeSpanElement() {
    if (spanElement && spanElement.remove) {
        spanElement.remove();
    }
    spanElement = null;
}
exports.removeSpanElement = removeSpanElement;
/**
 * Measures the width of the text with the given SVG text properties.
 * @param textProperties The text properties to use for text measurement.
 * @param text The text to measure.
 */
function measureSvgTextWidth(textProperties, text) {
    ensureDOM();
    canvasCtx.font =
        (textProperties.fontStyle || "") + " " +
            (textProperties.fontVariant || "") + " " +
            (textProperties.fontWeight || "") + " " +
            textProperties.fontSize + " " +
            (textProperties.fontFamily || fallbackFontFamily);
    return canvasCtx.measureText(text || textProperties.text).width;
}
exports.measureSvgTextWidth = measureSvgTextWidth;
/**
 * Return the rect with the given SVG text properties.
 * @param textProperties The text properties to use for text measurement.
 * @param text The text to measure.
 */
function measureSvgTextRect(textProperties, text) {
    ensureDOM();
    // Removes DOM elements faster than innerHTML
    while (svgTextElement.firstChild) {
        svgTextElement.removeChild(svgTextElement.firstChild);
    }
    svgTextElement.setAttribute("style", null);
    svgTextElement.style.visibility = "hidden";
    svgTextElement.style.fontFamily = textProperties.fontFamily || fallbackFontFamily;
    svgTextElement.style.fontVariant = textProperties.fontVariant;
    svgTextElement.style.fontSize = textProperties.fontSize;
    svgTextElement.style.fontWeight = textProperties.fontWeight;
    svgTextElement.style.fontStyle = textProperties.fontStyle;
    svgTextElement.style.whiteSpace = textProperties.whiteSpace || "nowrap";
    svgTextElement.appendChild(document.createTextNode(text || textProperties.text));
    // We're expecting the browser to give a synchronous measurement here
    // We're using SVGTextElement because it works across all browsers
    return svgTextElement.getBBox();
}
exports.measureSvgTextRect = measureSvgTextRect;
/**
 * Measures the height of the text with the given SVG text properties.
 * @param textProperties The text properties to use for text measurement.
 * @param text The text to measure.
 */
function measureSvgTextHeight(textProperties, text) {
    return measureSvgTextRect(textProperties, text).height;
}
exports.measureSvgTextHeight = measureSvgTextHeight;
/**
 * Returns the text Rect with the given SVG text properties.
 * Does NOT return text width; obliterates text value
 * @param {TextProperties} textProperties - The text properties to use for text measurement
 */
function estimateSvgTextRect(textProperties) {
    var propertiesKey = textProperties.fontFamily + textProperties.fontSize;
    var rect = ephemeralStorageService_1.ephemeralStorageService.getData(propertiesKey);
    if (rect == null) {
        // To estimate we check the height of a particular character, once it is cached, subsequent
        // calls should always get the height from the cache (regardless of the text).
        var estimatedTextProperties = {
            fontFamily: textProperties.fontFamily,
            fontSize: textProperties.fontSize,
            text: "M",
        };
        rect = exports.measureSvgTextRect(estimatedTextProperties);
        // NOTE: In some cases (disconnected/hidden DOM) we may provide incorrect measurement results (zero sized bounding-box), so
        // we only store values in the cache if we are confident they are correct.
        if (rect.height > 0)
            ephemeralStorageService_1.ephemeralStorageService.setData(propertiesKey, rect);
    }
    return rect;
}
/**
 * Returns the text Rect with the given SVG text properties.
 * @param {TextProperties} textProperties - The text properties to use for text measurement
 */
function estimateSvgTextBaselineDelta(textProperties) {
    var rect = estimateSvgTextRect(textProperties);
    return rect.y + rect.height;
}
exports.estimateSvgTextBaselineDelta = estimateSvgTextBaselineDelta;
/**
 * Estimates the height of the text with the given SVG text properties.
 * @param {TextProperties} textProperties - The text properties to use for text measurement
 */
function estimateSvgTextHeight(textProperties, tightFightForNumeric) {
    if (tightFightForNumeric === void 0) { tightFightForNumeric = false; }
    var height = estimateSvgTextRect(textProperties).height;
    // replace it with new baseline calculation
    if (tightFightForNumeric)
        height *= 0.7;
    return height;
}
exports.estimateSvgTextHeight = estimateSvgTextHeight;
/**
 * Measures the width of the svgElement.
 * @param svgElement The SVGTextElement to be measured.
 */
function measureSvgTextElementWidth(svgElement) {
    return measureSvgTextWidth(getSvgMeasurementProperties(svgElement));
}
exports.measureSvgTextElementWidth = measureSvgTextElementWidth;
/**
 * Fetches the text measurement properties of the given DOM element.
 * @param element The selector for the DOM Element.
 */
function getMeasurementProperties(element) {
    var style = window.getComputedStyle(element);
    return {
        text: element.value || element.textContent,
        fontFamily: style.fontFamily,
        fontSize: style.fontSize,
        fontWeight: style.fontWeight,
        fontStyle: style.fontStyle,
        fontVariant: style.fontVariant,
        whiteSpace: style.whiteSpace
    };
}
exports.getMeasurementProperties = getMeasurementProperties;
/**
 * Fetches the text measurement properties of the given SVG text element.
 * @param element The SVGTextElement to be measured.
 */
function getSvgMeasurementProperties(element) {
    var style = window.getComputedStyle(element);
    if (style) {
        return {
            text: element.textContent,
            fontFamily: style.fontFamily,
            fontSize: style.fontSize,
            fontWeight: style.fontWeight,
            fontStyle: style.fontStyle,
            fontVariant: style.fontVariant,
            whiteSpace: style.whiteSpace
        };
    }
    else {
        return {
            text: element.textContent,
            fontFamily: "",
            fontSize: "0",
        };
    }
}
exports.getSvgMeasurementProperties = getSvgMeasurementProperties;
/**
 * Returns the width of a div element.
 * @param element The div element.
 */
function getDivElementWidth(element) {
    var style = window.getComputedStyle(element);
    if (style)
        return style.width;
    else
        return "0";
}
exports.getDivElementWidth = getDivElementWidth;
/**
 * Compares labels text size to the available size and renders ellipses when the available size is smaller.
 * @param textProperties The text properties (including text content) to use for text measurement.
 * @param maxWidth The maximum width available for rendering the text.
 */
function getTailoredTextOrDefault(textProperties, maxWidth) {
    ensureDOM();
    var strLength = textProperties.text.length;
    if (strLength === 0) {
        return textProperties.text;
    }
    var width = measureSvgTextWidth(textProperties);
    if (width < maxWidth) {
        return textProperties.text;
    }
    // Create a copy of the textProperties so we don't modify the one that's passed in.
    var copiedTextProperties = powerbi_visuals_utils_typeutils_1.prototype.inherit(textProperties);
    // Take the properties and apply them to svgTextElement
    // Then, do the binary search to figure out the substring we want
    // Set the substring on textElement argument
    var text = copiedTextProperties.text = ellipsis + copiedTextProperties.text;
    var min = 1;
    var max = text.length;
    var i = ellipsis.length;
    while (min <= max) {
        // num | 0 prefered to Math.floor(num) for performance benefits
        i = (min + max) / 2 | 0;
        copiedTextProperties.text = text.substring(0, i);
        width = measureSvgTextWidth(copiedTextProperties);
        if (maxWidth > width) {
            min = i + 1;
        }
        else if (maxWidth < width) {
            max = i - 1;
        }
        else {
            break;
        }
    }
    // Since the search algorithm almost never finds an exact match,
    // it will pick one of the closest two, which could result in a
    // value bigger with than 'maxWidth' thus we need to go back by
    // one to guarantee a smaller width than 'maxWidth'.
    copiedTextProperties.text = text.substring(0, i);
    width = measureSvgTextWidth(copiedTextProperties);
    if (width > maxWidth) {
        i--;
    }
    return text.substring(ellipsis.length, i) + ellipsis;
}
exports.getTailoredTextOrDefault = getTailoredTextOrDefault;
/**
 * Compares labels text size to the available size and renders ellipses when the available size is smaller.
 * @param textElement The SVGTextElement containing the text to render.
 * @param maxWidth The maximum width available for rendering the text.
 */
function svgEllipsis(textElement, maxWidth) {
    var properties = getSvgMeasurementProperties(textElement);
    var originalText = properties.text;
    var tailoredText = getTailoredTextOrDefault(properties, maxWidth);
    if (originalText !== tailoredText) {
        textElement.textContent = tailoredText;
    }
}
exports.svgEllipsis = svgEllipsis;
/**
 * Word break textContent of <text> SVG element into <tspan>s
 * Each tspan will be the height of a single line of text
 * @param textElement - the SVGTextElement containing the text to wrap
 * @param maxWidth - the maximum width available
 * @param maxHeight - the maximum height available (defaults to single line)
 * @param linePadding - (optional) padding to add to line height
 */
function wordBreak(textElement, maxWidth, maxHeight, linePadding) {
    if (linePadding === void 0) { linePadding = 0; }
    var properties = getSvgMeasurementProperties(textElement);
    var height = estimateSvgTextHeight(properties) + linePadding;
    var maxNumLines = Math.max(1, Math.floor(maxHeight / height));
    // Save y of parent textElement to apply as first tspan dy
    var firstDY = textElement ? textElement.getAttribute("y") : null;
    // Store and clear text content
    var labelText = textElement ? textElement.textContent : null;
    textElement.textContent = null;
    // Append a tspan for each word broken section
    var words = wordBreaker.splitByWidth(labelText, properties, measureSvgTextWidth, maxWidth, maxNumLines);
    var fragment = document.createDocumentFragment();
    for (var i = 0, ilen = words.length; i < ilen; i++) {
        var dy = i === 0 ? firstDY : height;
        properties.text = words[i];
        /* eslint-disable-next-line powerbi-visuals/no-http-string */
        var textElement_1 = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
        textElement_1.setAttribute("x", "0");
        textElement_1.setAttribute("dy", dy ? dy.toString() : null);
        textElement_1.appendChild(document.createTextNode(getTailoredTextOrDefault(properties, maxWidth)));
        fragment.appendChild(textElement_1);
    }
    textElement.appendChild(fragment);
}
exports.wordBreak = wordBreak;
/**
 * Word break textContent of span element into <span>s
 * Each span will be the height of a single line of text
 * @param textElement - the element containing the text to wrap
 * @param maxWidth - the maximum width available
 * @param maxHeight - the maximum height available (defaults to single line)
 * @param linePadding - (optional) padding to add to line height
 */
function wordBreakOverflowingText(textElement, maxWidth, maxHeight, linePadding) {
    if (linePadding === void 0) { linePadding = 0; }
    var properties = getSvgMeasurementProperties(textElement);
    var height = estimateSvgTextHeight(properties) + linePadding;
    var maxNumLines = Math.max(1, Math.floor(maxHeight / height));
    // Store and clear text content
    var labelText = textElement.textContent;
    textElement.textContent = null;
    // Append a span for each word broken section
    var words = wordBreaker.splitByWidth(labelText, properties, measureSvgTextWidth, maxWidth, maxNumLines);
    var fragment = document.createDocumentFragment();
    for (var i = 0; i < words.length; i++) {
        var span = document.createElement("span");
        span.style.overflow = "hidden";
        span.style.whiteSpace = "nowrap";
        span.style.textOverflow = "ellipsis";
        span.style.display = "block";
        span.style.width = powerbi_visuals_utils_typeutils_1.pixelConverter.toString(maxWidth);
        span.appendChild(document.createTextNode(words[i]));
        span.appendChild(document.createTextNode(getTailoredTextOrDefault(properties, maxWidth)));
        fragment.appendChild(span);
    }
    textElement.appendChild(fragment);
}
exports.wordBreakOverflowingText = wordBreakOverflowingText;
//# sourceMappingURL=textMeasurementService.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/textUtil.js":
/*!********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/textUtil.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.replaceSpaceWithNBSP = exports.removeEllipses = exports.removeBreakingSpaces = void 0;
/**
 * Contains functions/constants to aid in text manupilation.
 */
/**
 * Remove breaking spaces from given string and replace by none breaking space (&nbsp).
 */
function removeBreakingSpaces(str) {
    return str.toString().replace(new RegExp(" ", "g"), "&nbsp");
}
exports.removeBreakingSpaces = removeBreakingSpaces;
/**
 * Remove ellipses from a given string
 */
function removeEllipses(str) {
    return str.replace(/(…)|(\.\.\.)/g, "");
}
exports.removeEllipses = removeEllipses;
/**
* Replace every whitespace (0x20) with Non-Breaking Space (0xA0)
    * @param {string} txt String to replace White spaces
    * @returns Text after replcing white spaces
    */
function replaceSpaceWithNBSP(txt) {
    if (txt != null) {
        return txt.replace(/ /g, "\xA0");
    }
}
exports.replaceSpaceWithNBSP = replaceSpaceWithNBSP;
//# sourceMappingURL=textUtil.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/valueFormatter.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/valueFormatter.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.calculateExactDigitsPrecision = exports.getDisplayUnits = exports.formatListOr = exports.formatListAnd = exports.getFormatStringByColumn = exports.getFormatString = exports.createDisplayUnitSystem = exports.formatVariantMeasureValue = exports.format = exports.create = exports.checkValueInBounds = exports.createDefaultFormatter = exports.setLocaleOptions = exports.getFormatMetadata = exports.getLocalizedString = exports.DefaultDateFormat = exports.DefaultNumericFormat = exports.DefaultIntegerFormat = void 0;
var displayUnitSystem_1 = __webpack_require__(/*! ./displayUnitSystem/displayUnitSystem */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystem.js");
var displayUnitSystemType_1 = __webpack_require__(/*! ./displayUnitSystem/displayUnitSystemType */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystemType.js");
var stringExtensions = __webpack_require__(/*! ./stringExtensions */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/stringExtensions.js");
var formattingService_1 = __webpack_require__(/*! ./formattingService/formattingService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingService.js");
var dateTimeSequence_1 = __webpack_require__(/*! ./date/dateTimeSequence */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateTimeSequence.js");
var powerbi_visuals_utils_typeutils_1 = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/index.js");
var powerbi_visuals_utils_dataviewutils_1 = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/index.js");
// powerbi.extensibility.utils.type
var ValueType = powerbi_visuals_utils_typeutils_1.valueType.ValueType;
var PrimitiveType = powerbi_visuals_utils_typeutils_1.valueType.PrimitiveType;
var StringExtensions = stringExtensions;
var BeautifiedFormat = {
    "0.00 %;-0.00 %;0.00 %": "Percentage",
    "0.0 %;-0.0 %;0.0 %": "Percentage1",
};
exports.DefaultIntegerFormat = "g";
exports.DefaultNumericFormat = "#,0.00";
exports.DefaultDateFormat = "d";
var defaultLocalizedStrings = {
    "NullValue": "(Blank)",
    "BooleanTrue": "True",
    "BooleanFalse": "False",
    "NaNValue": "NaN",
    "InfinityValue": "+Infinity",
    "NegativeInfinityValue": "-Infinity",
    "RestatementComma": "{0}, {1}",
    "RestatementCompoundAnd": "{0} and {1}",
    "RestatementCompoundOr": "{0} or {1}",
    "DisplayUnitSystem_EAuto_Title": "Auto",
    "DisplayUnitSystem_E0_Title": "None",
    "DisplayUnitSystem_E3_LabelFormat": "{0}K",
    "DisplayUnitSystem_E3_Title": "Thousands",
    "DisplayUnitSystem_E6_LabelFormat": "{0}M",
    "DisplayUnitSystem_E6_Title": "Millions",
    "DisplayUnitSystem_E9_LabelFormat": "{0}bn",
    "DisplayUnitSystem_E9_Title": "Billions",
    "DisplayUnitSystem_E12_LabelFormat": "{0}T",
    "DisplayUnitSystem_E12_Title": "Trillions",
    "Percentage": "#,0.##%",
    "Percentage1": "#,0.#%",
    "TableTotalLabel": "Total",
    "Tooltip_HighlightedValueDisplayName": "Highlighted",
    "Funnel_PercentOfFirst": "Percent of first",
    "Funnel_PercentOfPrevious": "Percent of previous",
    "Funnel_PercentOfFirst_Highlight": "Percent of first (highlighted)",
    "Funnel_PercentOfPrevious_Highlight": "Percent of previous (highlighted)",
    // Geotagging strings
    "GeotaggingString_Continent": "continent",
    "GeotaggingString_Continents": "continents",
    "GeotaggingString_Country": "country",
    "GeotaggingString_Countries": "countries",
    "GeotaggingString_State": "state",
    "GeotaggingString_States": "states",
    "GeotaggingString_City": "city",
    "GeotaggingString_Cities": "cities",
    "GeotaggingString_Town": "town",
    "GeotaggingString_Towns": "towns",
    "GeotaggingString_Province": "province",
    "GeotaggingString_Provinces": "provinces",
    "GeotaggingString_County": "county",
    "GeotaggingString_Counties": "counties",
    "GeotaggingString_Village": "village",
    "GeotaggingString_Villages": "villages",
    "GeotaggingString_Post": "post",
    "GeotaggingString_Zip": "zip",
    "GeotaggingString_Code": "code",
    "GeotaggingString_Place": "place",
    "GeotaggingString_Places": "places",
    "GeotaggingString_Address": "address",
    "GeotaggingString_Addresses": "addresses",
    "GeotaggingString_Street": "street",
    "GeotaggingString_Streets": "streets",
    "GeotaggingString_Longitude": "longitude",
    "GeotaggingString_Longitude_Short": "lon",
    "GeotaggingString_Longitude_Short2": "long",
    "GeotaggingString_Latitude": "latitude",
    "GeotaggingString_Latitude_Short": "lat",
    "GeotaggingString_PostalCode": "postal code",
    "GeotaggingString_PostalCodes": "postal codes",
    "GeotaggingString_ZipCode": "zip code",
    "GeotaggingString_ZipCodes": "zip codes",
    "GeotaggingString_Territory": "territory",
    "GeotaggingString_Territories": "territories",
};
function beautify(format) {
    var key = BeautifiedFormat[format];
    if (key)
        return defaultLocalizedStrings[key] || format;
    return format;
}
function describeUnit(exponent) {
    var exponentLookup = (exponent === -1) ? "Auto" : exponent.toString();
    var title = defaultLocalizedStrings["DisplayUnitSystem_E" + exponentLookup + "_Title"];
    var format = (exponent <= 0) ? "{0}" : defaultLocalizedStrings["DisplayUnitSystem_E" + exponentLookup + "_LabelFormat"];
    if (title || format)
        return { title: title, format: format };
}
function getLocalizedString(stringId) {
    return defaultLocalizedStrings[stringId];
}
exports.getLocalizedString = getLocalizedString;
// NOTE: Define default locale options, but these can be overriden by setLocaleOptions.
var localizationOptions = {
    nullValue: defaultLocalizedStrings["NullValue"],
    trueValue: defaultLocalizedStrings["BooleanTrue"],
    falseValue: defaultLocalizedStrings["BooleanFalse"],
    NaN: defaultLocalizedStrings["NaNValue"],
    infinity: defaultLocalizedStrings["InfinityValue"],
    negativeInfinity: defaultLocalizedStrings["NegativeInfinityValue"],
    beautify: function (format) { return beautify(format); },
    describe: function (exponent) { return describeUnit(exponent); },
    restatementComma: defaultLocalizedStrings["RestatementComma"],
    restatementCompoundAnd: defaultLocalizedStrings["RestatementCompoundAnd"],
    restatementCompoundOr: defaultLocalizedStrings["RestatementCompoundOr"],
};
var MaxScaledDecimalPlaces = 2;
var MaxValueForDisplayUnitRounding = 1000;
var MinIntegerValueForDisplayUnits = 10000;
var MinPrecisionForDisplayUnits = 2;
var DateTimeMetadataColumn = {
    displayName: "",
    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.DateTime),
};
function getFormatMetadata(format) {
    return formattingService_1.numberFormat.getCustomFormatMetadata(format);
}
exports.getFormatMetadata = getFormatMetadata;
function setLocaleOptions(options) {
    localizationOptions = options;
    displayUnitSystem_1.DefaultDisplayUnitSystem.RESET();
    displayUnitSystem_1.WholeUnitsDisplayUnitSystem.RESET();
}
exports.setLocaleOptions = setLocaleOptions;
function createDefaultFormatter(formatString, allowFormatBeautification, cultureSelector) {
    var formatBeautified = allowFormatBeautification
        ? localizationOptions.beautify(formatString)
        : formatString;
    return {
        format: function (value) {
            if (value == null) {
                return localizationOptions.nullValue;
            }
            return formatCore({
                value: value,
                cultureSelector: cultureSelector,
                format: formatBeautified
            });
        }
    };
}
exports.createDefaultFormatter = createDefaultFormatter;
/**
 * Check that provided value is in provided bounds. If not -- replace it by minimal or maximal replacement value
 * @param targetNum checking value
 * @param min minimal bound of value
 * @param max maximal bound of value
 * @param lessMinReplacement value that will be returned if checking value is lesser than minimal
 * @param greaterMaxReplacement value that will be returned if checking value is greater than maximal
 */
function checkValueInBounds(targetNum, min, max, lessMinReplacement, greaterMaxReplacement) {
    if (lessMinReplacement === void 0) { lessMinReplacement = min; }
    if (greaterMaxReplacement === void 0) { greaterMaxReplacement = max; }
    if (max !== undefined && max !== null) {
        targetNum = targetNum <= max ? targetNum : greaterMaxReplacement;
    }
    if (min !== undefined && min !== null) {
        targetNum = targetNum > min ? targetNum : lessMinReplacement;
    }
    return targetNum;
}
exports.checkValueInBounds = checkValueInBounds;
// Creates an IValueFormatter to be used for a range of values.
function create(options) {
    var format = options.allowFormatBeautification
        ? localizationOptions.beautify(options.format)
        : options.format;
    var cultureSelector = options.cultureSelector;
    if (shouldUseNumericDisplayUnits(options)) {
        var displayUnitSystem_2 = createDisplayUnitSystem(options.displayUnitSystemType);
        var singleValueFormattingMode_1 = !!options.formatSingleValues;
        displayUnitSystem_2.update(Math.max(Math.abs(options.value || 0), Math.abs(options.value2 || 0)));
        var forcePrecision_1 = options.precision != null;
        var decimals_1;
        if (forcePrecision_1)
            decimals_1 = -options.precision;
        else if (displayUnitSystem_2.displayUnit && displayUnitSystem_2.displayUnit.value > 1)
            decimals_1 = -MaxScaledDecimalPlaces;
        return {
            format: function (value) {
                var formattedValue = getStringFormat(value, true /*nullsAreBlank*/);
                if (!StringExtensions.isNullOrUndefinedOrWhiteSpaceString(formattedValue)) {
                    return formattedValue;
                }
                // Round to Double.DEFAULT_PRECISION
                if (value
                    && !displayUnitSystem_2.isScalingUnit()
                    && Math.abs(value) < MaxValueForDisplayUnitRounding
                    && !forcePrecision_1) {
                    value = powerbi_visuals_utils_typeutils_1.double.roundToPrecision(value);
                }
                if (singleValueFormattingMode_1) {
                    return displayUnitSystem_2.formatSingleValue(value, format, decimals_1, forcePrecision_1, cultureSelector);
                }
                else {
                    return displayUnitSystem_2.format(value, format, decimals_1, forcePrecision_1, cultureSelector);
                }
            },
            displayUnit: displayUnitSystem_2.displayUnit,
            options: options
        };
    }
    if (shouldUseDateUnits(options.value, options.value2, options.tickCount)) {
        var unit_1 = dateTimeSequence_1.DateTimeSequence.GET_INTERVAL_UNIT(options.value /* minDate */, options.value2 /* maxDate */, options.tickCount);
        return {
            format: function (value) {
                if (value == null) {
                    return localizationOptions.nullValue;
                }
                var formatString = formattingService_1.formattingService.dateFormatString(unit_1);
                return formatCore({
                    value: value,
                    cultureSelector: cultureSelector,
                    format: formatString,
                });
            },
            options: options
        };
    }
    return createDefaultFormatter(format, false, cultureSelector);
}
exports.create = create;
function format(value, format, allowFormatBeautification, cultureSelector) {
    if (value == null) {
        return localizationOptions.nullValue;
    }
    var formatString = allowFormatBeautification
        ? localizationOptions.beautify(format)
        : format;
    return formatCore({
        value: value,
        cultureSelector: cultureSelector,
        format: formatString
    });
}
exports.format = format;
/**
 * Value formatting function to handle variant measures.
 * For a Date/Time value within a non-date/time field, it's formatted with the default date/time formatString instead of as a number
 * @param {any} value Value to be formatted
 * @param {DataViewMetadataColumn} column Field which the value belongs to
 * @param {DataViewObjectPropertyIdentifier} formatStringProp formatString Property ID
 * @param {boolean} nullsAreBlank? Whether to show "(Blank)" instead of empty string for null values
 * @returns Formatted value
 */
function formatVariantMeasureValue(value, column, formatStringProp, nullsAreBlank, cultureSelector) {
    // If column type is not datetime, but the value is of time datetime,
    // then use the default date format string
    if (!(column && column.type && column.type.dateTime) && value instanceof Date) {
        var valueFormat = getFormatString(DateTimeMetadataColumn, null, false);
        return formatCore({
            value: value,
            nullsAreBlank: nullsAreBlank,
            cultureSelector: cultureSelector,
            format: valueFormat
        });
    }
    else {
        var valueFormat = getFormatString(column, formatStringProp);
        return formatCore({
            value: value,
            nullsAreBlank: nullsAreBlank,
            cultureSelector: cultureSelector,
            format: valueFormat
        });
    }
}
exports.formatVariantMeasureValue = formatVariantMeasureValue;
function createDisplayUnitSystem(displayUnitSystemType) {
    if (displayUnitSystemType == null)
        return new displayUnitSystem_1.DefaultDisplayUnitSystem(localizationOptions.describe);
    switch (displayUnitSystemType) {
        case displayUnitSystemType_1.DisplayUnitSystemType.Default:
            return new displayUnitSystem_1.DefaultDisplayUnitSystem(localizationOptions.describe);
        case displayUnitSystemType_1.DisplayUnitSystemType.WholeUnits:
            return new displayUnitSystem_1.WholeUnitsDisplayUnitSystem(localizationOptions.describe);
        case displayUnitSystemType_1.DisplayUnitSystemType.Verbose:
            return new displayUnitSystem_1.NoDisplayUnitSystem();
        case displayUnitSystemType_1.DisplayUnitSystemType.DataLabels:
            return new displayUnitSystem_1.DataLabelsDisplayUnitSystem(localizationOptions.describe);
        default:
            return new displayUnitSystem_1.DefaultDisplayUnitSystem(localizationOptions.describe);
    }
}
exports.createDisplayUnitSystem = createDisplayUnitSystem;
function shouldUseNumericDisplayUnits(options) {
    var value = options.value;
    var value2 = options.value2;
    var format = options.format;
    // For singleValue visuals like card, gauge we don't want to roundoff data to the nearest thousands so format the whole number / integers below 10K to not use display units
    if (options.formatSingleValues && format) {
        if (Math.abs(value) < MinIntegerValueForDisplayUnits) {
            var isCustomFormat = !formattingService_1.numberFormat.isStandardFormat(format);
            if (isCustomFormat) {
                var precision = formattingService_1.numberFormat.getCustomFormatMetadata(format, true /*calculatePrecision*/).precision;
                if (precision < MinPrecisionForDisplayUnits)
                    return false;
            }
            else if (powerbi_visuals_utils_typeutils_1.double.isInteger(value))
                return false;
        }
    }
    if ((typeof value === "number") || (typeof value2 === "number")) {
        return true;
    }
}
function shouldUseDateUnits(value, value2, tickCount) {
    // must check both value and value2 because we'll need to get an interval for date units
    return (value instanceof Date) && (value2 instanceof Date) && (tickCount !== undefined && tickCount !== null);
}
/*
    * Get the column format. Order of precendence is:
    *  1. Column format
    *  2. Default PowerView policy for column type
    */
function getFormatString(column, formatStringProperty, suppressTypeFallback) {
    if (column) {
        if (formatStringProperty) {
            var propertyValue = powerbi_visuals_utils_dataviewutils_1.dataViewObjects.getValue(column.objects, formatStringProperty);
            if (propertyValue)
                return propertyValue;
        }
        if (!suppressTypeFallback) {
            var columnType = column.type;
            if (columnType) {
                if (columnType.dateTime)
                    return exports.DefaultDateFormat;
                if (columnType.integer) {
                    if (columnType.temporal && columnType.temporal.year)
                        return "0";
                    return exports.DefaultIntegerFormat;
                }
                if (columnType.numeric)
                    return exports.DefaultNumericFormat;
            }
        }
    }
}
exports.getFormatString = getFormatString;
function getFormatStringByColumn(column, suppressTypeFallback) {
    if (column) {
        if (column.format) {
            return column.format;
        }
        if (!suppressTypeFallback) {
            var columnType = column.type;
            if (columnType) {
                if (columnType.dateTime) {
                    return exports.DefaultDateFormat;
                }
                if (columnType.integer) {
                    if (columnType.temporal && columnType.temporal.year) {
                        return "0";
                    }
                    return exports.DefaultIntegerFormat;
                }
                if (columnType.numeric) {
                    return exports.DefaultNumericFormat;
                }
            }
        }
    }
    return undefined;
}
exports.getFormatStringByColumn = getFormatStringByColumn;
function formatListCompound(strings, conjunction) {
    var result;
    if (!strings) {
        return null;
    }
    var length = strings.length;
    if (length > 0) {
        result = strings[0];
        var lastIndex = length - 1;
        for (var i = 1, len = lastIndex; i < len; i++) {
            var value = strings[i];
            result = StringExtensions.format(localizationOptions.restatementComma, result, value);
        }
        if (length > 1) {
            var value = strings[lastIndex];
            result = StringExtensions.format(conjunction, result, value);
        }
    }
    else {
        result = null;
    }
    return result;
}
// The returned string will look like 'A, B, ..., and C'
function formatListAnd(strings) {
    return formatListCompound(strings, localizationOptions.restatementCompoundAnd);
}
exports.formatListAnd = formatListAnd;
// The returned string will look like 'A, B, ..., or C'
function formatListOr(strings) {
    return formatListCompound(strings, localizationOptions.restatementCompoundOr);
}
exports.formatListOr = formatListOr;
function formatCore(options) {
    var value = options.value, format = options.format, nullsAreBlank = options.nullsAreBlank, cultureSelector = options.cultureSelector;
    var formattedValue = getStringFormat(value, nullsAreBlank ? nullsAreBlank : false);
    if (!StringExtensions.isNullOrUndefinedOrWhiteSpaceString(formattedValue)) {
        return formattedValue;
    }
    return formattingService_1.formattingService.formatValue(value, format, cultureSelector);
}
function getStringFormat(value, nullsAreBlank) {
    if (value == null && nullsAreBlank) {
        return localizationOptions.nullValue;
    }
    if (value === true) {
        return localizationOptions.trueValue;
    }
    if (value === false) {
        return localizationOptions.falseValue;
    }
    if (typeof value === "number" && isNaN(value)) {
        return localizationOptions.NaN;
    }
    if (value === Number.NEGATIVE_INFINITY) {
        return localizationOptions.negativeInfinity;
    }
    if (value === Number.POSITIVE_INFINITY) {
        return localizationOptions.infinity;
    }
    return "";
}
function getDisplayUnits(displayUnitSystemType) {
    var displayUnitSystem = createDisplayUnitSystem(displayUnitSystemType);
    return displayUnitSystem.units;
}
exports.getDisplayUnits = getDisplayUnits;
/**
 * Precision calculating function to build values showing minimum 3 digits as 3.56 or 25.7 or 754 or 2345
 * @param {number} inputValue Value to be basement for precision calculation
 * @param {string} format Format that will be used for value formatting (to detect percentage values)
 * @param {number} displayUnits Dispaly units that will be used for value formatting (to correctly calculate precision)
 * @param {number} digitsNum Number of visible digits, including digits before separator
 * @returns calculated precision
 */
function calculateExactDigitsPrecision(inputValue, format, displayUnits, digitsNum) {
    if (!inputValue && inputValue !== 0) {
        return 0;
    }
    var precision = 0;
    var inPercent = format && format.indexOf("%") !== -1;
    var value = inPercent ? inputValue * 100 : inputValue;
    value = displayUnits > 0 ? value / displayUnits : value;
    var leftPartLength = parseInt(value).toString().length;
    if ((inPercent || displayUnits > 0) && leftPartLength >= digitsNum) {
        return 0;
    }
    // Auto units, calculate final value 
    if (displayUnits === 0) {
        var unitsDegree = Math.floor(leftPartLength / 3);
        unitsDegree = leftPartLength % 3 === 0 ? unitsDegree - 1 : unitsDegree;
        var divider = Math.pow(1000, unitsDegree);
        if (divider > 0) {
            value = value / divider;
        }
    }
    leftPartLength = parseInt(value).toString().length;
    var restOfDiv = leftPartLength % digitsNum;
    if (restOfDiv === 0) {
        precision = 0;
    }
    else {
        precision = digitsNum - restOfDiv;
    }
    return precision;
}
exports.calculateExactDigitsPrecision = calculateExactDigitsPrecision;
//# sourceMappingURL=valueFormatter.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/wordBreaker.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/wordBreaker.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.splitByWidth = exports.getMaxWordWidth = exports.wordCount = exports.hasBreakers = exports.find = void 0;
var SPACE = " ";
var BREAKERS_REGEX = /[\s\n]+/g;
function search(index, content, backward) {
    if (backward) {
        for (var i = index - 1; i > -1; i--) {
            if (hasBreakers(content[i]))
                return i + 1;
        }
    }
    else {
        for (var i = index, ilen = content.length; i < ilen; i++) {
            if (hasBreakers(content[i]))
                return i;
        }
    }
    return backward ? 0 : content.length;
}
/**
 * Find the word nearest the cursor specified within content
 * @param index - point within content to search forward/backward from
 * @param content - string to search
*/
function find(index, content) {
    var result = { start: 0, end: 0 };
    if (content.length === 0) {
        return result;
    }
    result.start = search(index, content, true);
    result.end = search(index, content, false);
    return result;
}
exports.find = find;
/**
 * Test for presence of breakers within content
 * @param content - string to test
*/
function hasBreakers(content) {
    BREAKERS_REGEX.lastIndex = 0;
    return BREAKERS_REGEX.test(content);
}
exports.hasBreakers = hasBreakers;
/**
 * Count the number of pieces when broken by BREAKERS_REGEX
 * ~2.7x faster than WordBreaker.split(content).length
 * @param content - string to break and count
*/
function wordCount(content) {
    var count = 1;
    BREAKERS_REGEX.lastIndex = 0;
    BREAKERS_REGEX.exec(content);
    while (BREAKERS_REGEX.lastIndex !== 0) {
        count++;
        BREAKERS_REGEX.exec(content);
    }
    return count;
}
exports.wordCount = wordCount;
function getMaxWordWidth(content, textWidthMeasurer, properties) {
    var words = split(content);
    var maxWidth = 0;
    for (var _i = 0, words_1 = words; _i < words_1.length; _i++) {
        var w = words_1[_i];
        properties.text = w;
        maxWidth = Math.max(maxWidth, textWidthMeasurer(properties));
    }
    return maxWidth;
}
exports.getMaxWordWidth = getMaxWordWidth;
function split(content) {
    return content.split(BREAKERS_REGEX);
}
function getWidth(content, properties, textWidthMeasurer) {
    properties.text = content;
    return textWidthMeasurer(properties);
}
function truncate(content, properties, truncator, maxWidth) {
    properties.text = content;
    return truncator(properties, maxWidth);
}
/**
 * Split content by breakers (words) and greedy fit as many words
 * into each index in the result based on max width and number of lines
 * e.g. Each index in result corresponds to a line of content
 *      when used by AxisHelper.LabelLayoutStrategy.wordBreak
 * @param content - string to split
 * @param properties - text properties to be used by @param:textWidthMeasurer
 * @param textWidthMeasurer - function to calculate width of given text content
 * @param maxWidth - maximum allowed width of text content in each result
 * @param maxNumLines - maximum number of results we will allow, valid values must be greater than 0
 * @param truncator - (optional) if specified, used as a function to truncate content to a given width
*/
function splitByWidth(content, properties, textWidthMeasurer, maxWidth, maxNumLines, truncator) {
    // Default truncator returns string as-is
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    truncator = truncator ? truncator : function (properties, maxWidth) { return properties.text; };
    var result = [];
    var words = split(content);
    var usedWidth = 0;
    var wordsInLine = [];
    for (var _i = 0, words_2 = words; _i < words_2.length; _i++) {
        var word = words_2[_i];
        // Last line? Just add whatever is left
        if ((maxNumLines > 0) && (result.length >= maxNumLines - 1)) {
            wordsInLine.push(word);
            continue;
        }
        // Determine width if we add this word
        // Account for SPACE we will add when joining...
        var wordWidth = wordsInLine.length === 0
            ? getWidth(word, properties, textWidthMeasurer)
            : getWidth(SPACE + word, properties, textWidthMeasurer);
        // If width would exceed max width,
        // then push used words and start new split result
        if (usedWidth + wordWidth > maxWidth) {
            // Word alone exceeds max width, just add it.
            if (wordsInLine.length === 0) {
                result.push(truncate(word, properties, truncator, maxWidth));
                usedWidth = 0;
                wordsInLine = [];
                continue;
            }
            result.push(truncate(wordsInLine.join(SPACE), properties, truncator, maxWidth));
            usedWidth = 0;
            wordsInLine = [];
        }
        // ...otherwise, add word and continue
        wordsInLine.push(word);
        usedWidth += wordWidth;
    }
    // Push remaining words onto result (if any)
    if (wordsInLine && wordsInLine.length) {
        result.push(truncate(wordsInLine.join(SPACE), properties, truncator, maxWidth));
    }
    return result;
}
exports.splitByWidth = splitByWidth;
//# sourceMappingURL=wordBreaker.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/converterHelper.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/converterHelper.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "categoryIsAlsoSeriesRole": () => (/* binding */ categoryIsAlsoSeriesRole),
/* harmony export */   "getMiscellaneousTypeDescriptor": () => (/* binding */ getMiscellaneousTypeDescriptor),
/* harmony export */   "getSeriesName": () => (/* binding */ getSeriesName),
/* harmony export */   "hasImageUrlColumn": () => (/* binding */ hasImageUrlColumn),
/* harmony export */   "isImageUrlColumn": () => (/* binding */ isImageUrlColumn),
/* harmony export */   "isWebUrlColumn": () => (/* binding */ isWebUrlColumn)
/* harmony export */ });
/* harmony import */ var _dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataRoleHelper */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js");
// powerbi.extensibility.utils.dataview

function categoryIsAlsoSeriesRole(dataView, seriesRoleName, categoryRoleName) {
    if (dataView.categories && dataView.categories.length > 0) {
        // Need to pivot data if our category soure is a series role
        const category = dataView.categories[0];
        return category.source &&
            _dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.hasRole(category.source, seriesRoleName) &&
            _dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.hasRole(category.source, categoryRoleName);
    }
    return false;
}
function getSeriesName(source) {
    return (source.groupName !== undefined)
        ? source.groupName
        : source.queryName;
}
function isImageUrlColumn(column) {
    const misc = getMiscellaneousTypeDescriptor(column);
    return misc != null && misc.imageUrl === true;
}
function isWebUrlColumn(column) {
    const misc = getMiscellaneousTypeDescriptor(column);
    return misc != null && misc.webUrl === true;
}
function getMiscellaneousTypeDescriptor(column) {
    return column
        && column.type
        && column.type.misc;
}
function hasImageUrlColumn(dataView) {
    if (!dataView || !dataView.metadata || !dataView.metadata.columns || !dataView.metadata.columns.length) {
        return false;
    }
    return dataView.metadata.columns.some((column) => isImageUrlColumn(column) === true);
}
//# sourceMappingURL=converterHelper.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCategoryIndexOfRole": () => (/* binding */ getCategoryIndexOfRole),
/* harmony export */   "getMeasureIndexOfRole": () => (/* binding */ getMeasureIndexOfRole),
/* harmony export */   "hasRole": () => (/* binding */ hasRole),
/* harmony export */   "hasRoleInDataView": () => (/* binding */ hasRoleInDataView),
/* harmony export */   "hasRoleInValueColumn": () => (/* binding */ hasRoleInValueColumn)
/* harmony export */ });
function getMeasureIndexOfRole(grouped, roleName) {
    if (!grouped || !grouped.length) {
        return -1;
    }
    const firstGroup = grouped[0];
    if (firstGroup.values && firstGroup.values.length > 0) {
        for (let i = 0, len = firstGroup.values.length; i < len; ++i) {
            const value = firstGroup.values[i];
            if (value && value.source) {
                if (hasRole(value.source, roleName)) {
                    return i;
                }
            }
        }
    }
    return -1;
}
function getCategoryIndexOfRole(categories, roleName) {
    if (categories && categories.length) {
        for (let i = 0, ilen = categories.length; i < ilen; i++) {
            if (hasRole(categories[i].source, roleName)) {
                return i;
            }
        }
    }
    return -1;
}
function hasRole(column, name) {
    const roles = column.roles;
    return roles && roles[name];
}
function hasRoleInDataView(dataView, name) {
    return dataView != null
        && dataView.metadata != null
        && dataView.metadata.columns
        && dataView.metadata.columns.some((c) => c.roles && c.roles[name] !== undefined); // any is an alias of some
}
function hasRoleInValueColumn(valueColumn, name) {
    return valueColumn
        && valueColumn.source
        && valueColumn.source.roles
        && (valueColumn.source.roles[name] === true);
}
//# sourceMappingURL=dataRoleHelper.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFillColorByPropertyName": () => (/* binding */ getFillColorByPropertyName),
/* harmony export */   "getValue": () => (/* binding */ getValue)
/* harmony export */ });
function getValue(object, propertyName, defaultValue) {
    if (!object) {
        return defaultValue;
    }
    const propertyValue = object[propertyName];
    if (propertyValue === undefined) {
        return defaultValue;
    }
    return propertyValue;
}
/** Gets the solid color from a fill property using only a propertyName */
function getFillColorByPropertyName(object, propertyName, defaultColor) {
    const value = getValue(object, propertyName);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
//# sourceMappingURL=dataViewObject.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCommonValue": () => (/* binding */ getCommonValue),
/* harmony export */   "getFillColor": () => (/* binding */ getFillColor),
/* harmony export */   "getObject": () => (/* binding */ getObject),
/* harmony export */   "getValue": () => (/* binding */ getValue)
/* harmony export */ });
/* harmony import */ var _dataViewObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataViewObject */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js");

/** Gets the value of the given object/property pair. */
function getValue(objects, propertyId, defaultValue) {
    if (!objects) {
        return defaultValue;
    }
    return _dataViewObject__WEBPACK_IMPORTED_MODULE_0__.getValue(objects[propertyId.objectName], propertyId.propertyName, defaultValue);
}
/** Gets an object from objects. */
function getObject(objects, objectName, defaultValue) {
    if (objects && objects[objectName]) {
        return objects[objectName];
    }
    return defaultValue;
}
/** Gets the solid color from a fill property. */
function getFillColor(objects, propertyId, defaultColor) {
    const value = getValue(objects, propertyId);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
function getCommonValue(objects, propertyId, defaultValue) {
    const value = getValue(objects, propertyId, defaultValue);
    if (value && value.solid) {
        return value.solid.color;
    }
    if (value === undefined
        || value === null
        || (typeof value === "object" && !value.solid)) {
        return defaultValue;
    }
    return value;
}
//# sourceMappingURL=dataViewObjects.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataViewObjectsParser": () => (/* binding */ DataViewObjectsParser)
/* harmony export */ });
/* harmony import */ var _dataViewObjects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataViewObjects */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js");

class DataViewObjectsParser {
    static getDefault() {
        return new this();
    }
    static createPropertyIdentifier(objectName, propertyName) {
        return {
            objectName,
            propertyName
        };
    }
    static parse(dataView) {
        const dataViewObjectParser = this.getDefault();
        if (!dataView || !dataView.metadata || !dataView.metadata.objects) {
            return dataViewObjectParser;
        }
        const properties = dataViewObjectParser.getProperties();
        for (const objectName in properties) {
            for (const propertyName in properties[objectName]) {
                const defaultValue = dataViewObjectParser[objectName][propertyName];
                dataViewObjectParser[objectName][propertyName] = _dataViewObjects__WEBPACK_IMPORTED_MODULE_0__.getCommonValue(dataView.metadata.objects, properties[objectName][propertyName], defaultValue);
            }
        }
        return dataViewObjectParser;
    }
    static isPropertyEnumerable(propertyName) {
        return !DataViewObjectsParser.InnumerablePropertyPrefix.test(propertyName);
    }
    static enumerateObjectInstances(dataViewObjectParser, options) {
        const dataViewProperties = dataViewObjectParser && dataViewObjectParser[options.objectName];
        if (!dataViewProperties) {
            return [];
        }
        const instance = {
            objectName: options.objectName,
            selector: null,
            properties: {}
        };
        for (const key in dataViewProperties) {
            if (Object.prototype.hasOwnProperty.call(dataViewProperties, key)) {
                instance.properties[key] = dataViewProperties[key];
            }
        }
        return {
            instances: [instance]
        };
    }
    getProperties() {
        const properties = {}, objectNames = Object.keys(this);
        objectNames.forEach((objectName) => {
            if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {
                const propertyNames = Object.keys(this[objectName]);
                properties[objectName] = {};
                propertyNames.forEach((propertyName) => {
                    if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {
                        properties[objectName][propertyName] =
                            DataViewObjectsParser.createPropertyIdentifier(objectName, propertyName);
                    }
                });
            }
        });
        return properties;
    }
}
DataViewObjectsParser.InnumerablePropertyPrefix = /^_/;
//# sourceMappingURL=dataViewObjectsParser.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewTransform.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewTransform.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createValueColumns": () => (/* binding */ createValueColumns),
/* harmony export */   "groupValues": () => (/* binding */ groupValues),
/* harmony export */   "setGrouped": () => (/* binding */ setGrouped)
/* harmony export */ });
// TODO: refactor & focus DataViewTransform into a service with well-defined dependencies.
// TODO: refactor this, setGrouped, and groupValues to a test helper to stop using it in the product
function createValueColumns(values = [], valueIdentityFields, source) {
    const result = values;
    setGrouped(result);
    if (valueIdentityFields) {
        result.identityFields = valueIdentityFields;
    }
    if (source) {
        result.source = source;
    }
    return result;
}
function setGrouped(values, groupedResult) {
    values.grouped = groupedResult
        ? () => groupedResult
        : () => groupValues(values);
}
/** Group together the values with a common identity. */
function groupValues(values) {
    const groups = [];
    let currentGroup;
    for (let i = 0, len = values.length; i < len; i++) {
        const value = values[i];
        if (!currentGroup || currentGroup.identity !== value.identity) {
            currentGroup = {
                values: []
            };
            if (value.identity) {
                currentGroup.identity = value.identity;
                const source = value.source;
                // allow null, which will be formatted as (Blank).
                if (source.groupName !== undefined) {
                    currentGroup.name = source.groupName;
                }
                else if (source.displayName) {
                    currentGroup.name = source.displayName;
                }
            }
            groups.push(currentGroup);
        }
        currentGroup.values.push(value);
    }
    return groups;
}
//# sourceMappingURL=dataViewTransform.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewWildcard.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewWildcard.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDataViewWildcardSelector": () => (/* binding */ createDataViewWildcardSelector)
/* harmony export */ });
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
function createDataViewWildcardSelector(dataViewWildcardMatchingOption) {
    if (dataViewWildcardMatchingOption == null) {
        dataViewWildcardMatchingOption = 0 /* DataViewWildcardMatchingOption.InstancesAndTotals */;
    }
    const selector = {
        data: [
            {
                dataViewWildcard: {
                    matchingOption: dataViewWildcardMatchingOption
                }
            }
        ]
    };
    return selector;
}
//# sourceMappingURL=dataViewWildcard.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/index.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/index.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "converterHelper": () => (/* reexport module object */ _converterHelper__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   "dataRoleHelper": () => (/* reexport module object */ _dataRoleHelper__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   "dataViewObject": () => (/* reexport module object */ _dataViewObject__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   "dataViewObjects": () => (/* reexport module object */ _dataViewObjects__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   "dataViewObjectsParser": () => (/* reexport module object */ _dataViewObjectsParser__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   "dataViewTransform": () => (/* reexport module object */ _dataViewTransform__WEBPACK_IMPORTED_MODULE_5__),
/* harmony export */   "dataViewWildcard": () => (/* reexport module object */ _dataViewWildcard__WEBPACK_IMPORTED_MODULE_6__),
/* harmony export */   "validationHelper": () => (/* reexport module object */ _validationHelper__WEBPACK_IMPORTED_MODULE_7__)
/* harmony export */ });
/* harmony import */ var _converterHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./converterHelper */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/converterHelper.js");
/* harmony import */ var _dataRoleHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataRoleHelper */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js");
/* harmony import */ var _dataViewObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataViewObject */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js");
/* harmony import */ var _dataViewObjects__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dataViewObjects */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js");
/* harmony import */ var _dataViewObjectsParser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dataViewObjectsParser */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser.js");
/* harmony import */ var _dataViewTransform__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dataViewTransform */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewTransform.js");
/* harmony import */ var _dataViewWildcard__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dataViewWildcard */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewWildcard.js");
/* harmony import */ var _validationHelper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./validationHelper */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/validationHelper.js");









//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/validationHelper.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/validationHelper.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isFileImage": () => (/* binding */ isFileImage),
/* harmony export */   "isImageUrlAllowed": () => (/* binding */ isImageUrlAllowed)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
function isImageUrlAllowed(url) {
    // Excludes all URLs that don't contain .gif .jpg .png or .svg extensions and don't start from "http(s)://".
    // Base64 incoded images are allowable too.
    return (/^https?:\/\/.+\.(gif|jpg|png|svg)$/i).test(url) || (/^data:image\/(gif|jpeg|png|svg\+xml);base64,/i).test(url);
}
function isFileImage(url, imageCheckResultCallBack) {
    const request = new XMLHttpRequest();
    request.onreadystatechange = function () {
        if (request.readyState !== this.HEADERS_RECEIVED) {
            return;
        }
        const contentType = request.getResponseHeader("Content-Type"), supportedTypes = ["image/png", "image/jpeg", "image/gif", "image/svg+xml"];
        if (supportedTypes.indexOf(contentType) > -1) {
            return imageCheckResultCallBack(true, contentType);
        }
        return imageCheckResultCallBack(false, contentType);
    };
    request.open("HEAD", url, true);
    request.send();
}
//# sourceMappingURL=validationHelper.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivityBaseService.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivityBaseService.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FilterAction": () => (/* binding */ FilterAction),
/* harmony export */   "InteractivityBaseService": () => (/* binding */ InteractivityBaseService),
/* harmony export */   "appendClearCatcher": () => (/* binding */ appendClearCatcher),
/* harmony export */   "dataHasSelection": () => (/* binding */ dataHasSelection)
/* harmony export */ });
var FilterAction;
(function (FilterAction) {
    FilterAction[FilterAction["merge"] = 0] = "merge";
    FilterAction[FilterAction["remove"] = 1] = "remove";
})(FilterAction || (FilterAction = {}));
/**
* Creates a clear an svg rect to catch clear clicks.
*/
function appendClearCatcher(selection) {
    return selection
        .append("rect")
        .classed("clearCatcher", true)
        .attr("width", "100%")
        .attr("height", "100%");
}
function dataHasSelection(data) {
    for (let i = 0, ilen = data.length; i < ilen; i++) {
        if (data[i].selected) {
            return true;
        }
    }
    return false;
}
class InteractivityBaseService {
    constructor() {
        // References
        /* eslint-disable @typescript-eslint/no-empty-function */
        this.renderSelectionInVisual = () => { };
        this.renderSelectionInLegend = () => { };
        this.renderSelectionInLabels = () => { };
        /* eslint-enable @typescript-eslint/no-empty-function */
        // Selection state
        this.isInvertedSelectionMode = false;
    }
    // IInteractivityService Implementation
    //  Binds the visual to the interactivityService
    bind(options) {
        // Bind the data
        if (options.interactivityServiceOptions && options.interactivityServiceOptions.overrideSelectionFromData) {
            // Override selection state from data points if needed
            this.takeSelectionStateFromDataPoints(options.dataPoints);
        }
        if (options.interactivityServiceOptions) {
            if (options.interactivityServiceOptions.isLegend) {
                // Bind to legend data instead of normal data if isLegend
                this.selectableLegendDataPoints = options.dataPoints;
                this.renderSelectionInLegend = () => options.behavior.renderSelection(this.legendHasSelection());
            }
            else if (options.interactivityServiceOptions.isLabels) {
                // Bind to label data instead of normal data if isLabels
                this.selectableLabelsDataPoints = options.dataPoints;
                this.renderSelectionInLabels = () => options.behavior.renderSelection(this.labelsHasSelection());
            }
            else {
                this.selectableDataPoints = options.dataPoints;
                this.renderSelectionInVisual = () => options.behavior.renderSelection(this.hasSelection());
            }
        }
        else {
            this.selectableDataPoints = options.dataPoints;
            this.renderSelectionInVisual = () => options.behavior.renderSelection(this.hasSelection());
        }
        options.behavior.bindEvents(options, this);
        // Sync data points with current selection state
        this.syncSelectionState();
    }
    /**
     * Sets the selected state of all selectable data points to false and invokes the behavior's select command.
     */
    clearSelection() {
        this.applyToAllSelectableDataPoints((dataPoint) => dataPoint.selected = false);
        this.renderAll();
    }
    legendHasSelection() {
        return this.selectableLegendDataPoints ? dataHasSelection(this.selectableLegendDataPoints) : false;
    }
    labelsHasSelection() {
        return this.selectableLabelsDataPoints ? dataHasSelection(this.selectableLabelsDataPoints) : false;
    }
    isSelectionModeInverted() {
        return this.isInvertedSelectionMode;
    }
    handleSelection(dataPoints, multiSelect) {
        if (!dataPoints) {
            return;
        }
        this.select(dataPoints, multiSelect);
        this.sendSelectionToHost();
        this.renderAll();
    }
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    handleContextMenu(dataPoint, point) {
        // don't need to handle context menu here.
        // see InteractivitySelectionService class
        return;
    }
    handleClearSelection() {
        this.clearSelection();
        this.sendSelectionToHost();
    }
    renderAll() {
        this.renderSelectionInVisual();
        this.renderSelectionInLegend();
        this.renderSelectionInLabels();
    }
    applyToAllSelectableDataPoints(action) {
        const selectableDataPoints = this.selectableDataPoints;
        const selectableLegendDataPoints = this.selectableLegendDataPoints;
        const selectableLabelsDataPoints = this.selectableLabelsDataPoints;
        if (selectableDataPoints) {
            for (const dataPoint of selectableDataPoints) {
                action(dataPoint);
            }
        }
        if (selectableLegendDataPoints) {
            for (const dataPoint of selectableLegendDataPoints) {
                action(dataPoint);
            }
        }
        if (selectableLabelsDataPoints) {
            for (const dataPoint of selectableLabelsDataPoints) {
                action(dataPoint);
            }
        }
    }
}
//# sourceMappingURL=interactivityBaseService.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivitySelectionService.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivitySelectionService.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InteractivitySelectionService": () => (/* binding */ InteractivitySelectionService),
/* harmony export */   "createInteractivitySelectionService": () => (/* binding */ createInteractivitySelectionService)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/arrayExtensions.js");
/* harmony import */ var _interactivityBaseService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interactivityBaseService */ "./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivityBaseService.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
// powerbi.extensibility.utils.type


class InteractivitySelectionService extends _interactivityBaseService__WEBPACK_IMPORTED_MODULE_0__.InteractivityBaseService {
    constructor(hostServices) {
        super();
        this.selectionManager = hostServices.createSelectionManager();
        if (this.selectionManager.registerOnSelectCallback) {
            // when selecton was updated on Power BI side need to display actual selection state on the visual
            this.selectionManager.registerOnSelectCallback(() => {
                this.restoreSelection();
            });
        }
    }
    /**
     * Sets the selected state of all selectable data points to false and invokes the behavior's select command.
     */
    clearSelection() {
        this.selectionManager.clear();
        super.clearSelection();
    }
    handleContextMenu(dataPoint, point) {
        this.selectionManager.showContextMenu(dataPoint && dataPoint.identity ? dataPoint.identity : {}, point);
    }
    applySelectionStateToData(dataPoints, hasHighlights) {
        if (hasHighlights && this.hasSelection()) {
            this.selectionManager.clear();
        }
        const selectedIds = this.selectionManager.getSelectionIds();
        for (const dataPoint of dataPoints) {
            dataPoint.selected = this.isDataPointSelected(dataPoint, selectedIds);
        }
        return this.hasSelection();
    }
    /**
     * Apply new selections to change internal state of interactivity service
     */
    restoreSelection() {
        // syncSelectionState gets actual selectedIds
        // from selection manager and updates selectable datapoints state to correspond state
        this.syncSelectionState();
        // render new state of selection
        this.renderAll();
    }
    /**
     * Checks whether there is at least one item selected.
     */
    hasSelection() {
        return this.selectionManager.getSelectionIds().length > 0;
    }
    /**
     * Syncs the selection state for all data points that have the same category. Returns
     * true if the selection state was out of sync and corrections were made; false if
     * the data is already in sync with the service.
     *
     * If the data is not compatible with the current service's current selection state,
     * the state is cleared and the cleared selection is sent to the host.
     *
     * Ignores series for now, since we don't support series selection at the moment.
     */
    syncSelectionState() {
        if (this.isInvertedSelectionMode) {
            return this.syncSelectionStateInverted();
        }
        if (!this.selectableDataPoints && !this.selectableLegendDataPoints) {
            return;
        }
        // get current state of selections from selection manager
        const selectedIds = this.selectionManager.getSelectionIds();
        if (this.selectableDataPoints) {
            // update datapoints (set selection state for datapoint, update `selected` property of datapoint)
            this.updateSelectableDataPointsBySelectedIds(this.selectableDataPoints, selectedIds);
        }
        if (this.selectableLegendDataPoints) {
            // update datapoints for legend datapoint (set selection state for datapoint, update `selected` property of datapoint)
            this.updateSelectableDataPointsBySelectedIds(this.selectableLegendDataPoints, selectedIds);
        }
        if (this.selectableLabelsDataPoints) {
            // update datapoints for label datapoints
            for (const labelsDataPoint of this.selectableLabelsDataPoints) {
                labelsDataPoint.selected = selectedIds.some((value) => {
                    return value.includes(labelsDataPoint.identity);
                });
            }
        }
    }
    // Marks a data point as selected and syncs selection with the host.
    select(dataPoints, multiSelect) {
        const selectableDataPoints = [].concat(dataPoints);
        const originalSelectedIds = [...this.selectionManager.getSelectionIds()];
        if (!multiSelect || !selectableDataPoints.length) {
            // if multiselect isn't active need to reset curent selections
            // or clear selection by passing empty array of selection in dataPoints parameter
            this.selectionManager.clear();
        }
        // array of selection of selected datapoints
        const selectionIdsToSelect = [];
        selectableDataPoints.forEach((dataPoint) => {
            if (!dataPoint || !dataPoint.identity) {
                return;
            }
            const shouldDataPointBeSelected = !this.isDataPointSelected(dataPoint, originalSelectedIds);
            // update state of datapoint, set as selected and acumulate selectionId in temp array
            if (shouldDataPointBeSelected) {
                dataPoint.selected = true;
                selectionIdsToSelect.push(dataPoint.identity);
            }
            else {
                // set selection as false if datapoint isn't selected
                dataPoint.selected = false;
                if (multiSelect) {
                    selectionIdsToSelect.push(dataPoint.identity);
                }
            }
        });
        // if multiselect isn't active selection manager resets current state of selection and applies new selections
        this.selectionManager.select(selectionIdsToSelect, multiSelect);
        this.syncSelectionState();
    }
    takeSelectionStateFromDataPoints(dataPoints) {
        const selectedIds = this.selectionManager.getSelectionIds();
        // Replace the existing selectedIds rather than merging.
        powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_1__.clear(selectedIds);
        for (const dataPoint of dataPoints) {
            if (dataPoint.selected) {
                selectedIds.push(dataPoint.identity);
            }
        }
    }
    sendSelectionToHost() {
        // don't need to send to host something, selectionManager responsible for that
        return;
    }
    syncSelectionStateInverted() {
        const selectedIds = this.selectionManager.getSelectionIds();
        const selectableDataPoints = this.selectableDataPoints;
        if (!selectableDataPoints) {
            return;
        }
        if (selectedIds.length === 0) {
            for (const dataPoint of selectableDataPoints) {
                dataPoint.selected = false;
            }
        }
        else {
            for (const dataPoint of selectableDataPoints) {
                if (selectedIds.some((value) => value.includes(dataPoint.identity))) {
                    dataPoint.selected = true;
                }
                else if (dataPoint.selected) {
                    dataPoint.selected = false;
                }
            }
        }
    }
    updateSelectableDataPointsBySelectedIds(selectableDataPoints, selectedIds) {
        let foundMatchingId = false;
        for (const dataPoint of selectableDataPoints) {
            dataPoint.selected = this.isDataPointSelected(dataPoint, selectedIds);
            if (dataPoint.selected)
                foundMatchingId = true;
        }
        return foundMatchingId;
    }
    isDataPointSelected(dataPoint, selectedIds) {
        return selectedIds.some((value) => value.includes(dataPoint.identity));
    }
}
/**
 * Factory method to create an IInteractivityService instance.
 */
function createInteractivitySelectionService(hostServices) {
    return new InteractivitySelectionService(hostServices);
}
//# sourceMappingURL=interactivitySelectionService.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivityUtils.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivityUtils.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPositionOfLastInputEvent": () => (/* binding */ getPositionOfLastInputEvent),
/* harmony export */   "registerGroupSelectionHandler": () => (/* binding */ registerGroupSelectionHandler),
/* harmony export */   "registerStandardSelectionHandler": () => (/* binding */ registerStandardSelectionHandler)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/selectAll.js");
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/

function getPositionOfLastInputEvent() {
    return {
        x: event.clientX,
        y: event.clientY
    };
}
function registerStandardSelectionHandler(selection, selectionHandler) {
    const internalSelection = (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"])(selection.nodes());
    internalSelection.on("click", (event, d) => {
        selectionHandler.handleSelection(d, event.ctrlKey);
    });
}
function registerGroupSelectionHandler(group, selectionHandler) {
    const internalSelection = (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"])(group.nodes());
    internalSelection.on("click", (event) => {
        const target = event.target;
        const d = (0,d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"])(target).datum();
        selectionHandler.handleSelection(d, event.ctrlKey);
    });
}
//# sourceMappingURL=interactivityUtils.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-svgutils/lib/cssConstants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-svgutils/lib/cssConstants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "absoluteValue": () => (/* binding */ absoluteValue),
/* harmony export */   "autoValue": () => (/* binding */ autoValue),
/* harmony export */   "backgroundColorProperty": () => (/* binding */ backgroundColorProperty),
/* harmony export */   "backgroundImageProperty": () => (/* binding */ backgroundImageProperty),
/* harmony export */   "backgroundProperty": () => (/* binding */ backgroundProperty),
/* harmony export */   "backgroundRepeatProperty": () => (/* binding */ backgroundRepeatProperty),
/* harmony export */   "backgroundSizeProperty": () => (/* binding */ backgroundSizeProperty),
/* harmony export */   "blockValue": () => (/* binding */ blockValue),
/* harmony export */   "boldValue": () => (/* binding */ boldValue),
/* harmony export */   "borderBottomWidthProperty": () => (/* binding */ borderBottomWidthProperty),
/* harmony export */   "borderLeftWidthProperty": () => (/* binding */ borderLeftWidthProperty),
/* harmony export */   "borderProperty": () => (/* binding */ borderProperty),
/* harmony export */   "borderRightWidthProperty": () => (/* binding */ borderRightWidthProperty),
/* harmony export */   "borderTopWidthProperty": () => (/* binding */ borderTopWidthProperty),
/* harmony export */   "bottomProperty": () => (/* binding */ bottomProperty),
/* harmony export */   "colorProperty": () => (/* binding */ colorProperty),
/* harmony export */   "coverValue": () => (/* binding */ coverValue),
/* harmony export */   "createClassAndSelector": () => (/* binding */ createClassAndSelector),
/* harmony export */   "cursorProperty": () => (/* binding */ cursorProperty),
/* harmony export */   "displayProperty": () => (/* binding */ displayProperty),
/* harmony export */   "fontSizeProperty": () => (/* binding */ fontSizeProperty),
/* harmony export */   "fontWeightProperty": () => (/* binding */ fontWeightProperty),
/* harmony export */   "heightProperty": () => (/* binding */ heightProperty),
/* harmony export */   "hiddenValue": () => (/* binding */ hiddenValue),
/* harmony export */   "inlineBlockValue": () => (/* binding */ inlineBlockValue),
/* harmony export */   "leftProperty": () => (/* binding */ leftProperty),
/* harmony export */   "marginLeftProperty": () => (/* binding */ marginLeftProperty),
/* harmony export */   "marginTopProperty": () => (/* binding */ marginTopProperty),
/* harmony export */   "maxWidthProperty": () => (/* binding */ maxWidthProperty),
/* harmony export */   "minWidthProperty": () => (/* binding */ minWidthProperty),
/* harmony export */   "noneValue": () => (/* binding */ noneValue),
/* harmony export */   "opacityProperty": () => (/* binding */ opacityProperty),
/* harmony export */   "overflowProperty": () => (/* binding */ overflowProperty),
/* harmony export */   "overflowXProperty": () => (/* binding */ overflowXProperty),
/* harmony export */   "overflowYProperty": () => (/* binding */ overflowYProperty),
/* harmony export */   "paddingLeftProperty": () => (/* binding */ paddingLeftProperty),
/* harmony export */   "paddingRightProperty": () => (/* binding */ paddingRightProperty),
/* harmony export */   "pixelUnits": () => (/* binding */ pixelUnits),
/* harmony export */   "pointerValue": () => (/* binding */ pointerValue),
/* harmony export */   "positionProperty": () => (/* binding */ positionProperty),
/* harmony export */   "rightProperty": () => (/* binding */ rightProperty),
/* harmony export */   "scrollValue": () => (/* binding */ scrollValue),
/* harmony export */   "styleAttribute": () => (/* binding */ styleAttribute),
/* harmony export */   "tableRowValue": () => (/* binding */ tableRowValue),
/* harmony export */   "textAlignProperty": () => (/* binding */ textAlignProperty),
/* harmony export */   "textShadowProperty": () => (/* binding */ textShadowProperty),
/* harmony export */   "topProperty": () => (/* binding */ topProperty),
/* harmony export */   "transformProperty": () => (/* binding */ transformProperty),
/* harmony export */   "transparentValue": () => (/* binding */ transparentValue),
/* harmony export */   "visibilityProperty": () => (/* binding */ visibilityProperty),
/* harmony export */   "visibleValue": () => (/* binding */ visibleValue),
/* harmony export */   "webkitTransformProperty": () => (/* binding */ webkitTransformProperty),
/* harmony export */   "widthProperty": () => (/* binding */ widthProperty),
/* harmony export */   "zeroPixelValue": () => (/* binding */ zeroPixelValue)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
function createClassAndSelector(className) {
    return {
        className: className,
        selectorName: "." + className,
    };
}
const styleAttribute = "style";
const pixelUnits = "px";
const heightProperty = "height";
const widthProperty = "width";
const topProperty = "top";
const bottomProperty = "bottom";
const leftProperty = "left";
const rightProperty = "right";
const marginTopProperty = "margin-top";
const marginLeftProperty = "margin-left";
const displayProperty = "display";
const backgroundProperty = "background";
const backgroundColorProperty = "background-color";
const backgroundRepeatProperty = "background-repeat";
const backgroundSizeProperty = "background-size";
const backgroundImageProperty = "background-image";
const textShadowProperty = "text-shadow";
const textAlignProperty = "text-align";
const borderProperty = "border";
const borderTopWidthProperty = "border-top-width";
const borderBottomWidthProperty = "border-bottom-width";
const borderLeftWidthProperty = "border-left-width";
const borderRightWidthProperty = "border-right-width";
const fontSizeProperty = "font-size";
const fontWeightProperty = "font-weight";
const colorProperty = "color";
const opacityProperty = "opacity";
const paddingLeftProperty = "padding-left";
const paddingRightProperty = "padding-right";
const positionProperty = "position";
const maxWidthProperty = "max-width";
const minWidthProperty = "min-width";
const overflowProperty = "overflow";
const overflowXProperty = "overflow-x";
const overflowYProperty = "overflow-y";
const transformProperty = "transform";
const webkitTransformProperty = "-webkit-transform";
const cursorProperty = "cursor";
const visibilityProperty = "visibility";
const absoluteValue = "absolute";
const zeroPixelValue = "0px";
const autoValue = "auto";
const hiddenValue = "hidden";
const noneValue = "none";
const blockValue = "block";
const inlineBlockValue = "inline-block";
const transparentValue = "transparent";
const boldValue = "bold";
const visibleValue = "visible";
const tableRowValue = "table-row";
const coverValue = "cover";
const pointerValue = "pointer";
const scrollValue = "scroll";
//# sourceMappingURL=cssConstants.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-svgutils/lib/manipulation.js":
/*!*************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-svgutils/lib/manipulation.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AlmostZero": () => (/* binding */ AlmostZero),
/* harmony export */   "createArrow": () => (/* binding */ createArrow),
/* harmony export */   "ensureDAttribute": () => (/* binding */ ensureDAttribute),
/* harmony export */   "ensureValidSVGPoint": () => (/* binding */ ensureValidSVGPoint),
/* harmony export */   "flushAllD3Transitions": () => (/* binding */ flushAllD3Transitions),
/* harmony export */   "flushAllD3TransitionsIfNeeded": () => (/* binding */ flushAllD3TransitionsIfNeeded),
/* harmony export */   "getTransformScaleRatios": () => (/* binding */ getTransformScaleRatios),
/* harmony export */   "parseTranslateTransform": () => (/* binding */ parseTranslateTransform),
/* harmony export */   "scale": () => (/* binding */ scale),
/* harmony export */   "transformOrigin": () => (/* binding */ transformOrigin),
/* harmony export */   "translate": () => (/* binding */ translate),
/* harmony export */   "translateAndRotate": () => (/* binding */ translateAndRotate),
/* harmony export */   "translateAndScale": () => (/* binding */ translateAndScale),
/* harmony export */   "translateWithPixels": () => (/* binding */ translateWithPixels),
/* harmony export */   "translateXWithPixels": () => (/* binding */ translateXWithPixels)
/* harmony export */ });
/* harmony import */ var d3_timer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-timer */ "./node_modules/d3-timer/src/timer.js");
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

/**
 * Very small values, when stringified, may be converted to scientific notation and cause a temporarily
 * invalid attribute or style property value.
 * For example, the number 0.0000001 is converted to the string "1e-7".
 * This is particularly noticeable when interpolating opacity values.
 * To avoid scientific notation, start or end the transition at 1e-6,
 * which is the smallest value that is not stringified in exponential notation.
 */
const AlmostZero = 1e-6;
/**
     * Creates a translate string for use with the SVG transform call.
     */
function translate(x, y) {
    return "translate(" + x + "," + y + ")";
}
/**
 * Creates a translateX string for use with the SVG transform call.
 */
function translateXWithPixels(x) {
    return "translateX(" + x + "px)";
}
function translateWithPixels(x, y) {
    return "translate(" + x + "px," + y + "px)";
}
/**
 * Creates a translate + rotate string for use with the SVG transform call.
 */
function translateAndRotate(x, y, px, py, angle) {
    return "translate("
        + x + "," + y + ")"
        + " rotate(" + angle + "," + px + "," + py + ")";
}
/**
 * Creates a scale string for use in a CSS transform property.
 */
function scale(scale) {
    return `scale(${scale})`;
}
/**
 * Creates a translate + scale string for use with the SVG transform call.
 */
function translateAndScale(x, y, ratio) {
    return "translate("
        + x + "," + y + ")"
        + " scale(" + ratio + ")";
}
/**
 * Creates a transform origin string for use in a CSS transform-origin property.
 */
function transformOrigin(xOffset, yOffset) {
    return `${xOffset} ${yOffset}`;
}
/**
 * Forces all D3 transitions to complete.
 * Normally, zero-delay transitions are executed after an instantaneous delay (<10ms).
 * This can cause a brief flicker if the browser renders the page twice: once at the end of the first event loop,
 * then again immediately on the first timer callback. By flushing the timer queue at the end of the first event loop,
 * you can run any zero-delay transitions immediately and avoid the flicker.
 *
 * These flickers are noticable on IE, and with a large number of webviews(not recommend you ever do this) on iOS.
 */
function flushAllD3Transitions() {
    const now = Date.now;
    Date.now = function () { return Infinity; };
    (0,d3_timer__WEBPACK_IMPORTED_MODULE_0__.timerFlush)();
    Date.now = now;
}
/**
 * Wrapper for flushAllD3Transitions.
 */
function flushAllD3TransitionsIfNeeded(options) {
    if (!options)
        return;
    const animationOptions = options;
    if (animationOptions && animationOptions.transitionImmediate) {
        flushAllD3Transitions();
    }
}
/**
 * There is a known bug in IE10 that causes cryptic crashes for SVG elements with a null "d" attribute:
 * https://github.com/mbostock/d3/issues/1737
 */
function ensureDAttribute(pathElement) {
    if (!pathElement.getAttribute("d")) {
        pathElement.setAttribute("d", "");
    }
}
/**
 * In IE10, it is possible to return SVGPoints with NaN members.
 */
function ensureValidSVGPoint(point) {
    if (isNaN(point.x)) {
        point.x = 0;
    }
    if (isNaN(point.y)) {
        point.y = 0;
    }
}
/**
 * Parse the Transform string with value "translate(x,y)".
 * In Chrome for the translate(position) string the delimiter
 * is a comma and in IE it is a spaceso checking for both.
 */
function parseTranslateTransform(input) {
    if (!input || input.length === 0) { // Interpet falsy and empty string as a no-op translate
        return {
            x: "0",
            y: "0",
        };
    }
    const translateCoordinates = input.split(/[\s,]+/);
    let yValue = "0";
    let xValue;
    const xCoord = translateCoordinates[0];
    // Y coordinate is ommited in I.E if it is 0, so need to check against that
    if (translateCoordinates.length === 1) {
        // 10 refers to the length of "translate("
        xValue = xCoord.substring(10, xCoord.length - 1);
    }
    else {
        const yCoord = translateCoordinates[1];
        yValue = yCoord.substring(0, yCoord.length - 1);
        // 10 refers to the length of "translate("
        xValue = xCoord.substring(10, xCoord.length);
    }
    return {
        x: xValue,
        y: yValue
    };
}
/**
 * Create an arrow.
 */
function createArrow(width, height, rotate) {
    const transform = "rotate(" + rotate + " " + width / 2 + " " + height / 2 + ")";
    let path = "M0 0";
    path += "L0 " + height;
    path += "L" + width + " " + height / 2 + " Z";
    return {
        path: path,
        transform: transform
    };
}
/**
 * Use the ratio of the scaled bounding rect and the SVG DOM bounding box to get the x and y transform scale values
 * @deprecated This function is unreliable across browser implementations, prefer to use SVGScaleDetector if needed.
 */
function getTransformScaleRatios(svgElement) {
    if (svgElement != null) {
        const scaledRect = svgElement.getBoundingClientRect();
        const domRect = svgElement.getBBox();
        if (domRect.height > 0 && domRect.width > 0) {
            return {
                x: scaledRect.width / domRect.width,
                y: scaledRect.height / domRect.height
            };
        }
    }
    return { x: 1, y: 1 };
}
//# sourceMappingURL=manipulation.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-svgutils/lib/shapes/shapes.js":
/*!**************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-svgutils/lib/shapes/shapes.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "add": () => (/* binding */ add),
/* harmony export */   "bottom": () => (/* binding */ bottom),
/* harmony export */   "bottomLeft": () => (/* binding */ bottomLeft),
/* harmony export */   "bottomRight": () => (/* binding */ bottomRight),
/* harmony export */   "clone": () => (/* binding */ clone),
/* harmony export */   "combine": () => (/* binding */ combine),
/* harmony export */   "containsPoint": () => (/* binding */ containsPoint),
/* harmony export */   "deflate": () => (/* binding */ deflate),
/* harmony export */   "deflateBy": () => (/* binding */ deflateBy),
/* harmony export */   "equal": () => (/* binding */ equal),
/* harmony export */   "equalWithPrecision": () => (/* binding */ equalWithPrecision),
/* harmony export */   "equals": () => (/* binding */ equals),
/* harmony export */   "getCentroid": () => (/* binding */ getCentroid),
/* harmony export */   "getClosestPoint": () => (/* binding */ getClosestPoint),
/* harmony export */   "getOffset": () => (/* binding */ getOffset),
/* harmony export */   "getSize": () => (/* binding */ getSize),
/* harmony export */   "inflate": () => (/* binding */ inflate),
/* harmony export */   "inflateBy": () => (/* binding */ inflateBy),
/* harmony export */   "intersect": () => (/* binding */ intersect),
/* harmony export */   "isEmpty": () => (/* binding */ isEmpty),
/* harmony export */   "isIntersecting": () => (/* binding */ isIntersecting),
/* harmony export */   "offset": () => (/* binding */ offset),
/* harmony export */   "right": () => (/* binding */ right),
/* harmony export */   "setSize": () => (/* binding */ setSize),
/* harmony export */   "subtract": () => (/* binding */ subtract),
/* harmony export */   "toString": () => (/* binding */ toString),
/* harmony export */   "topLeft": () => (/* binding */ topLeft),
/* harmony export */   "topRight": () => (/* binding */ topRight)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
// module powerbi.extensibility.utils.svg {

function getOffset(rect) {
    return { x: rect.left, y: rect.top };
}
function getSize(rect) {
    return { width: rect.width, height: rect.height };
}
function setSize(rect, value) {
    rect.width = value.width;
    rect.height = value.height;
}
function right(rect) {
    return rect.left + rect.width;
}
function bottom(rect) {
    return rect.top + rect.height;
}
function topLeft(rect) {
    return { x: rect.left, y: rect.top };
}
function topRight(rect) {
    return { x: rect.left + rect.width, y: rect.top };
}
function bottomLeft(rect) {
    return { x: rect.left, y: rect.top + rect.height };
}
function bottomRight(rect) {
    return { x: rect.left + rect.width, y: rect.top + rect.height };
}
function equals(rect, other) {
    return other !== undefined && other !== null &&
        rect.left === other.left && rect.top === other.top && rect.width === other.width && rect.height === other.height;
}
function clone(rect) {
    return (rect !== null) ? { left: rect.left, top: rect.top, width: rect.width, height: rect.height } : null;
}
function toString(rect) {
    return "{left:" + rect.left + ", top:" + rect.top + ", width:" + rect.width + ", height:" + rect.height + "}";
}
function offset(rect, offsetX, offsetY) {
    const newLeft = ((rect.left + offsetX) >= 0) ? rect.left + offsetX : 0;
    const newTop = ((rect.top + offsetY) >= 0) ? rect.top + offsetY : 0;
    return { left: newLeft, top: newTop, width: rect.width, height: rect.height };
}
function add(rect, rect2) {
    return {
        left: rect.left + rect2.left,
        top: rect.top + rect2.top,
        height: rect.height + rect2.height,
        width: rect.width + rect2.width
    };
}
function subtract(rect, rect2) {
    return {
        left: rect.left - rect2.left,
        top: rect.top - rect2.top,
        height: rect.height - rect2.height,
        width: rect.width - rect2.width
    };
}
function inflate(rect, padding) {
    const result = clone(rect);
    if (padding) {
        result.left -= padding.left;
        result.top -= padding.top;
        result.width += padding.left + padding.right;
        result.height += padding.top + padding.bottom;
    }
    return result;
}
function deflate(rect, padding) {
    const result = clone(rect);
    if (padding) {
        result.left += padding.left;
        result.top += padding.top;
        result.width -= padding.left + padding.right;
        result.height -= padding.top + padding.bottom;
    }
    return result;
}
function inflateBy(rect, padding) {
    return { left: rect.left - padding, top: rect.top - padding, width: rect.width + padding + padding, height: rect.height + padding + padding };
}
function deflateBy(rect, padding) {
    return { left: rect.left + padding, top: rect.top + padding, width: rect.width - padding - padding, height: rect.height - padding - padding };
}
/**
 * Get closest point.
 *
 * @return the closest point on the rect to the (x,y) point given.
 * In case the (x,y) given is inside the rect, (x,y) will be returned.
 * Otherwise, a point on a border will be returned.
 */
function getClosestPoint(rect, x, y) {
    return {
        x: Math.min(Math.max(rect.left, x), rect.left + rect.width),
        y: Math.min(Math.max(rect.top, y), rect.top + rect.height)
    };
}
function equal(rect1, rect2) {
    return rect1 === rect2 ||
        (rect1 !== undefined && rect2 !== undefined && rect1.left === rect2.left && rect1.top === rect2.top && rect1.width === rect2.width && rect1.height === rect2.height);
}
function equalWithPrecision(rect1, rect2) {
    return rect1 === rect2 ||
        (rect1 !== undefined && rect2 !== undefined &&
            powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.equalWithPrecision(rect1.left, rect2.left) && powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.equalWithPrecision(rect1.top, rect2.top) &&
            powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.equalWithPrecision(rect1.width, rect2.width) && powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.equalWithPrecision(rect1.height, rect2.height));
}
function isEmpty(rect) {
    return rect === undefined || rect === null || (rect.width === 0 && rect.height === 0);
}
function containsPoint(rect, point) {
    if ((rect === null) || (point === null)) {
        return false;
    }
    return powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.lessOrEqualWithPrecision(rect.left, point.x) &&
        powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.lessOrEqualWithPrecision(point.x, rect.left + rect.width) &&
        powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.lessOrEqualWithPrecision(rect.top, point.y) &&
        powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.lessOrEqualWithPrecision(point.y, rect.top + rect.height);
}
function isIntersecting(rect1, rect2) {
    if (!rect1 || !rect2) {
        return false;
    }
    const left = Math.max(rect1.left, rect2.left);
    const right = Math.min(rect1.left + rect1.width, rect2.left + rect2.width);
    if (left > right) {
        return false;
    }
    const top = Math.max(rect1.top, rect2.top);
    const bottom = Math.min(rect1.top + rect1.height, rect2.top + rect2.height);
    return top <= bottom;
}
function intersect(rect1, rect2) {
    if (!rect1) {
        return rect2;
    }
    if (!rect2) {
        return rect1;
    }
    const left = Math.max(rect1.left, rect2.left);
    const top = Math.max(rect1.top, rect2.top);
    const right = Math.min(rect1.left + rect1.width, rect2.left + rect2.width);
    const bottom = Math.min(rect1.top + rect1.height, rect2.top + rect2.height);
    if (left <= right && top <= bottom) {
        return { left: left, top: top, width: right - left, height: bottom - top };
    }
    else {
        return { left: 0, top: 0, width: 0, height: 0 };
    }
}
function combine(rect1, rect2) {
    if (!rect1) {
        return rect2;
    }
    if (!rect2) {
        return rect1;
    }
    const left = Math.min(rect1.left, rect2.left);
    const top = Math.min(rect1.top, rect2.top);
    const right = Math.max(rect1.left + rect1.width, rect2.left + rect2.width);
    const bottom = Math.max(rect1.top + rect1.height, rect2.top + rect2.height);
    return { left: left, top: top, width: right - left, height: bottom - top };
}
function getCentroid(rect) {
    return {
        x: rect.left + (rect.width / 2),
        y: rect.top + (rect.height / 2)
    };
}
//# sourceMappingURL=shapes.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/lib/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/lib/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TooltipServiceWrapper": () => (/* reexport safe */ _tooltipService__WEBPACK_IMPORTED_MODULE_0__.TooltipServiceWrapper),
/* harmony export */   "createTooltipServiceWrapper": () => (/* reexport safe */ _tooltipService__WEBPACK_IMPORTED_MODULE_0__.createTooltipServiceWrapper),
/* harmony export */   "touchEndEventName": () => (/* reexport safe */ _tooltipTouch__WEBPACK_IMPORTED_MODULE_1__.touchEndEventName),
/* harmony export */   "touchStartEventName": () => (/* reexport safe */ _tooltipTouch__WEBPACK_IMPORTED_MODULE_1__.touchStartEventName),
/* harmony export */   "usePointerEvents": () => (/* reexport safe */ _tooltipTouch__WEBPACK_IMPORTED_MODULE_1__.usePointerEvents)
/* harmony export */ });
/* harmony import */ var _tooltipService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tooltipService */ "./node_modules/powerbi-visuals-utils-tooltiputils/lib/tooltipService.js");
/* harmony import */ var _tooltipTouch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tooltipTouch */ "./node_modules/powerbi-visuals-utils-tooltiputils/lib/tooltipTouch.js");



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/lib/tooltipService.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/lib/tooltipService.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TooltipServiceWrapper": () => (/* binding */ TooltipServiceWrapper),
/* harmony export */   "createTooltipServiceWrapper": () => (/* binding */ createTooltipServiceWrapper)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-selection */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selectAll.js");
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-selection */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/pointers.js");
/* harmony import */ var _tooltipTouch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tooltipTouch */ "./node_modules/powerbi-visuals-utils-tooltiputils/lib/tooltipTouch.js");


const DefaultHandleTouchDelay = 500;
function createTooltipServiceWrapper(tooltipService, rootElement, handleTouchDelay = DefaultHandleTouchDelay) {
    return new TooltipServiceWrapper({
        tooltipService: tooltipService,
        rootElement: rootElement,
        handleTouchDelay: handleTouchDelay,
    });
}
class TooltipServiceWrapper {
    constructor(options) {
        this.visualHostTooltipService = options.tooltipService;
        this.rootElement = options.rootElement;
        this.handleTouchDelay = options.handleTouchDelay;
    }
    addTooltip(selection, getTooltipInfoDelegate, getDataPointIdentity, reloadTooltipDataOnMouseMove) {
        if (!selection || !this.visualHostTooltipService.enabled()) {
            return;
        }
        let rootNode = this.rootElement;
        let internalSelection = (0,d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"])(selection.nodes());
        // Mouse events
        internalSelection.on("mouseover.tooltip", (event, data) => {
            // Ignore mouseover while handling touch events
            if (!this.canDisplayTooltip(event)) {
                return;
            }
            let coordinates = this.getCoordinates(event, rootNode, true);
            let tooltipInfo = getTooltipInfoDelegate(data);
            if (tooltipInfo == null) {
                return;
            }
            let selectionIds = getDataPointIdentity ? [getDataPointIdentity(data)] : [];
            this.visualHostTooltipService.show({
                coordinates: coordinates,
                isTouchEvent: false,
                dataItems: tooltipInfo,
                identities: selectionIds
            });
        });
        internalSelection.on("mouseout.tooltip", (event, data) => {
            this.visualHostTooltipService.hide({
                isTouchEvent: false,
                immediately: false,
            });
        });
        internalSelection.on("mousemove.tooltip", (event, data) => {
            // Ignore mousemove while handling touch events
            if (!this.canDisplayTooltip(event)) {
                return;
            }
            let coordinates = this.getCoordinates(event, rootNode, true);
            let tooltipInfo;
            if (reloadTooltipDataOnMouseMove) {
                tooltipInfo = getTooltipInfoDelegate(data);
                if (tooltipInfo == null) {
                    return;
                }
            }
            let selectionIds = getDataPointIdentity ? [getDataPointIdentity(data)] : [];
            this.visualHostTooltipService.move({
                coordinates: coordinates,
                isTouchEvent: false,
                dataItems: tooltipInfo,
                identities: selectionIds
            });
        });
        // --- Touch events ---
        let touchStartEventName = _tooltipTouch__WEBPACK_IMPORTED_MODULE_0__.touchStartEventName();
        let touchEndEventName = _tooltipTouch__WEBPACK_IMPORTED_MODULE_0__.touchEndEventName();
        let isPointerEvent = _tooltipTouch__WEBPACK_IMPORTED_MODULE_0__.usePointerEvents();
        internalSelection.on(touchStartEventName + ".tooltip", (event, data) => {
            let coordinates = this.getCoordinates(event, rootNode, true);
            let tooltipInfo = getTooltipInfoDelegate(data);
            let selectionIds = getDataPointIdentity ? [getDataPointIdentity(data)] : [];
            this.handleTouchTimeoutId = window.setTimeout(() => {
                this.visualHostTooltipService.show({
                    coordinates: coordinates,
                    isTouchEvent: true,
                    dataItems: tooltipInfo,
                    identities: selectionIds
                });
                this.handleTouchTimeoutId = undefined;
            }, this.handleTouchDelay);
        });
        internalSelection.on(touchEndEventName + ".tooltip", () => {
            this.cancelTouchTimeoutEvents();
        });
    }
    cancelTouchTimeoutEvents() {
        if (this.handleTouchTimeoutId) {
            clearTimeout(this.handleTouchTimeoutId);
        }
    }
    hide() {
        this.visualHostTooltipService.hide({ immediately: true, isTouchEvent: false });
    }
    canDisplayTooltip(event) {
        let canDisplay = true;
        const mouseEvent = event;
        if (mouseEvent.buttons !== undefined) {
            // Check mouse buttons state
            let hasMouseButtonPressed = mouseEvent.buttons !== 0;
            canDisplay = !hasMouseButtonPressed;
        }
        // Make sure we are not ignoring mouse events immediately after touch end.
        canDisplay = canDisplay && (this.handleTouchTimeoutId == null);
        return canDisplay;
    }
    getCoordinates(event, rootNode, isPointerEvent) {
        let coordinates;
        if (isPointerEvent) {
            // DO NOT USE - WebKit bug in getScreenCTM with nested SVG results in slight negative coordinate shift
            // Also, IE will incorporate transform scale but WebKit does not, forcing us to detect browser and adjust appropriately.
            // Just use non-scaled coordinates for all browsers, and adjust for the transform scale later (see lineChart.findIndex)
            // coordinates = d3.mouse(rootNode);
            // copied from d3_eventSource (which is not exposed)
            let e = event, s;
            while (s = e.sourceEvent)
                e = s;
            let rect = rootNode.getBoundingClientRect();
            coordinates = [
                e.clientX - rect.left - rootNode.clientLeft,
                e.clientY - rect.top - rootNode.clientTop
            ];
        }
        else {
            let touchCoordinates = (0,d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"])(event);
            if (touchCoordinates && touchCoordinates.length > 0) {
                coordinates = touchCoordinates[0];
            }
        }
        return coordinates;
    }
}
//# sourceMappingURL=tooltipService.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/lib/tooltipTouch.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/lib/tooltipTouch.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "touchEndEventName": () => (/* binding */ touchEndEventName),
/* harmony export */   "touchStartEventName": () => (/* binding */ touchStartEventName),
/* harmony export */   "usePointerEvents": () => (/* binding */ usePointerEvents)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
function touchStartEventName() {
    let eventName = "touchstart";
    return eventName;
}
function touchEndEventName() {
    let eventName = "touchend";
    return eventName;
}
function usePointerEvents() {
    let eventName = touchStartEventName();
    return eventName === "pointerdown" || eventName === "MSPointerDown";
}
//# sourceMappingURL=tooltipTouch.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/array.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/array.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return typeof x === "object" && "length" in x
    ? x // Array, TypedArray, NodeList, array-like
    : Array.from(x); // Map, Set, iterable, string, or anything else
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/constant.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/constant.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return function() {
    return x;
  };
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/creator.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/creator.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _namespace_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./namespace.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespace.js");
/* harmony import */ var _namespaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./namespaces.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespaces.js");



function creatorInherit(name) {
  return function() {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === _namespaces_js__WEBPACK_IMPORTED_MODULE_0__.xhtml && document.documentElement.namespaceURI === _namespaces_js__WEBPACK_IMPORTED_MODULE_0__.xhtml
        ? document.createElement(name)
        : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name) {
  var fullname = (0,_namespace_js__WEBPACK_IMPORTED_MODULE_1__["default"])(name);
  return (fullname.local
      ? creatorFixed
      : creatorInherit)(fullname);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/matcher.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/matcher.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "childMatcher": () => (/* binding */ childMatcher),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return function() {
    return this.matches(selector);
  };
}

function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}



/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespace.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespace.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _namespaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./namespaces.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespaces.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return _namespaces_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasOwnProperty(prefix) ? {space: _namespaces_js__WEBPACK_IMPORTED_MODULE_0__["default"][prefix], local: name} : name; // eslint-disable-line no-prototype-builtins
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespaces.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespaces.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "xhtml": () => (/* binding */ xhtml)
/* harmony export */ });
var xhtml = "http://www.w3.org/1999/xhtml";

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
});


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/pointer.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/pointer.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _sourceEvent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sourceEvent.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/sourceEvent.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(event, node) {
  event = (0,_sourceEvent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(event);
  if (node === undefined) node = event.currentTarget;
  if (node) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      point.x = event.clientX, point.y = event.clientY;
      point = point.matrixTransform(node.getScreenCTM().inverse());
      return [point.x, point.y];
    }
    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
    }
  }
  return [event.pageX, event.pageY];
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/pointers.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/pointers.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _pointer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pointer.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/pointer.js");
/* harmony import */ var _sourceEvent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sourceEvent.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/sourceEvent.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(events, node) {
  if (events.target) { // i.e., instanceof Event, not TouchList or iterable
    events = (0,_sourceEvent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(events);
    if (node === undefined) node = events.currentTarget;
    events = events.touches || [events];
  }
  return Array.from(events, event => (0,_pointer_js__WEBPACK_IMPORTED_MODULE_1__["default"])(event, node));
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selectAll.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selectAll.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./array.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/array.js");
/* harmony import */ var _selection_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selection/index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return typeof selector === "string"
      ? new _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.Selection([document.querySelectorAll(selector)], [document.documentElement])
      : new _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.Selection([selector == null ? [] : (0,_array_js__WEBPACK_IMPORTED_MODULE_1__["default"])(selector)], _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.root);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/append.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/append.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _creator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../creator.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/creator.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name) {
  var create = typeof name === "function" ? name : (0,_creator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(name);
  return this.select(function() {
    return this.appendChild(create.apply(this, arguments));
  });
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/attr.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/attr.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _namespace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../namespace.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespace.js");


function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);
    else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value) {
  var fullname = (0,_namespace_js__WEBPACK_IMPORTED_MODULE_0__["default"])(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local
        ? node.getAttributeNS(fullname.space, fullname.local)
        : node.getAttribute(fullname);
  }

  return this.each((value == null
      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)
      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/call.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/call.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/classed.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/classed.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }

  return this.each((typeof value === "function"
      ? classedFunction : value
      ? classedTrue
      : classedFalse)(names, value));
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/clone.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/clone.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/data.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/data.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _enter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enter.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/enter.js");
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../array.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/array.js");
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constant.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/constant.js");





function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length;

  // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new _enter_js__WEBPACK_IMPORTED_MODULE_0__.EnterNode(parent, data[i]);
    }
  }

  // Put any non-null nodes that don’t fit into exit.
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = new Map,
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue;

  // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }

  // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.
  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data[i], i, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new _enter_js__WEBPACK_IMPORTED_MODULE_0__.EnterNode(parent, data[i]);
    }
  }

  // Add any remaining nodes that were not bound to data to exit.
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {
      exit[i] = node;
    }
  }
}

function datum(node) {
  return node.__data__;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value, key) {
  if (!arguments.length) return Array.from(this, datum);

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;

  if (typeof value !== "function") value = (0,_constant_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = (0,_array_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value.call(parent, parent && parent.__data__, j, parents)),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);

    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

    // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
        previous._next = next || null;
      }
    }
  }

  update = new _index_js__WEBPACK_IMPORTED_MODULE_3__.Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/datum.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/datum.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  return arguments.length
      ? this.property("__data__", value)
      : this.node().__data__;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/dispatch.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/dispatch.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _window_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/window.js");


function dispatchEvent(node, type, params) {
  var window = (0,_window_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(type, params) {
  return this.each((typeof params === "function"
      ? dispatchFunction
      : dispatchConstant)(type, params));
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/each.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/each.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(callback) {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/empty.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/empty.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return !this.node();
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/enter.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/enter.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EnterNode": () => (/* binding */ EnterNode),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _sparse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sparse.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/sparse.js");
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(this._enter || this._groups.map(_sparse_js__WEBPACK_IMPORTED_MODULE_1__["default"]), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
  querySelector: function(selector) { return this._parent.querySelector(selector); },
  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
};


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/exit.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/exit.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _sparse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sparse.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/sparse.js");
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(this._exit || this._groups.map(_sparse_js__WEBPACK_IMPORTED_MODULE_1__["default"]), this._parents);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/filter.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/filter.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _matcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matcher.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/matcher.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(match) {
  if (typeof match !== "function") match = (0,_matcher_js__WEBPACK_IMPORTED_MODULE_0__["default"])(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_1__.Selection(subgroups, this._parents);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/html.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/html.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  return arguments.length
      ? this.each(value == null
          ? htmlRemove : (typeof value === "function"
          ? htmlFunction
          : htmlConstant)(value))
      : this.node().innerHTML;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Selection": () => (/* binding */ Selection),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "root": () => (/* binding */ root)
/* harmony export */ });
/* harmony import */ var _select_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./select.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/select.js");
/* harmony import */ var _selectAll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectAll.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectAll.js");
/* harmony import */ var _selectChild_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selectChild.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectChild.js");
/* harmony import */ var _selectChildren_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selectChildren.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectChildren.js");
/* harmony import */ var _filter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./filter.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/filter.js");
/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./data.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/data.js");
/* harmony import */ var _enter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./enter.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/enter.js");
/* harmony import */ var _exit_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./exit.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/exit.js");
/* harmony import */ var _join_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./join.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/join.js");
/* harmony import */ var _merge_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./merge.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/merge.js");
/* harmony import */ var _order_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./order.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/order.js");
/* harmony import */ var _sort_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./sort.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/sort.js");
/* harmony import */ var _call_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./call.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/call.js");
/* harmony import */ var _nodes_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./nodes.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/nodes.js");
/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./node.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/node.js");
/* harmony import */ var _size_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./size.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/size.js");
/* harmony import */ var _empty_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./empty.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/empty.js");
/* harmony import */ var _each_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./each.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/each.js");
/* harmony import */ var _attr_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./attr.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/attr.js");
/* harmony import */ var _style_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./style.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/style.js");
/* harmony import */ var _property_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./property.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/property.js");
/* harmony import */ var _classed_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./classed.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/classed.js");
/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./text.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/text.js");
/* harmony import */ var _html_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./html.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/html.js");
/* harmony import */ var _raise_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./raise.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/raise.js");
/* harmony import */ var _lower_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./lower.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/lower.js");
/* harmony import */ var _append_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./append.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/append.js");
/* harmony import */ var _insert_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./insert.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/insert.js");
/* harmony import */ var _remove_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./remove.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/remove.js");
/* harmony import */ var _clone_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./clone.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/clone.js");
/* harmony import */ var _datum_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./datum.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/datum.js");
/* harmony import */ var _on_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./on.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/on.js");
/* harmony import */ var _dispatch_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./dispatch.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/dispatch.js");
/* harmony import */ var _iterator_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./iterator.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/iterator.js");



































var root = [null];

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

function selection_selection() {
  return this;
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: _select_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  selectAll: _selectAll_js__WEBPACK_IMPORTED_MODULE_1__["default"],
  selectChild: _selectChild_js__WEBPACK_IMPORTED_MODULE_2__["default"],
  selectChildren: _selectChildren_js__WEBPACK_IMPORTED_MODULE_3__["default"],
  filter: _filter_js__WEBPACK_IMPORTED_MODULE_4__["default"],
  data: _data_js__WEBPACK_IMPORTED_MODULE_5__["default"],
  enter: _enter_js__WEBPACK_IMPORTED_MODULE_6__["default"],
  exit: _exit_js__WEBPACK_IMPORTED_MODULE_7__["default"],
  join: _join_js__WEBPACK_IMPORTED_MODULE_8__["default"],
  merge: _merge_js__WEBPACK_IMPORTED_MODULE_9__["default"],
  selection: selection_selection,
  order: _order_js__WEBPACK_IMPORTED_MODULE_10__["default"],
  sort: _sort_js__WEBPACK_IMPORTED_MODULE_11__["default"],
  call: _call_js__WEBPACK_IMPORTED_MODULE_12__["default"],
  nodes: _nodes_js__WEBPACK_IMPORTED_MODULE_13__["default"],
  node: _node_js__WEBPACK_IMPORTED_MODULE_14__["default"],
  size: _size_js__WEBPACK_IMPORTED_MODULE_15__["default"],
  empty: _empty_js__WEBPACK_IMPORTED_MODULE_16__["default"],
  each: _each_js__WEBPACK_IMPORTED_MODULE_17__["default"],
  attr: _attr_js__WEBPACK_IMPORTED_MODULE_18__["default"],
  style: _style_js__WEBPACK_IMPORTED_MODULE_19__["default"],
  property: _property_js__WEBPACK_IMPORTED_MODULE_20__["default"],
  classed: _classed_js__WEBPACK_IMPORTED_MODULE_21__["default"],
  text: _text_js__WEBPACK_IMPORTED_MODULE_22__["default"],
  html: _html_js__WEBPACK_IMPORTED_MODULE_23__["default"],
  raise: _raise_js__WEBPACK_IMPORTED_MODULE_24__["default"],
  lower: _lower_js__WEBPACK_IMPORTED_MODULE_25__["default"],
  append: _append_js__WEBPACK_IMPORTED_MODULE_26__["default"],
  insert: _insert_js__WEBPACK_IMPORTED_MODULE_27__["default"],
  remove: _remove_js__WEBPACK_IMPORTED_MODULE_28__["default"],
  clone: _clone_js__WEBPACK_IMPORTED_MODULE_29__["default"],
  datum: _datum_js__WEBPACK_IMPORTED_MODULE_30__["default"],
  on: _on_js__WEBPACK_IMPORTED_MODULE_31__["default"],
  dispatch: _dispatch_js__WEBPACK_IMPORTED_MODULE_32__["default"],
  [Symbol.iterator]: _iterator_js__WEBPACK_IMPORTED_MODULE_33__["default"]
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (selection);


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/insert.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/insert.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _creator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../creator.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/creator.js");
/* harmony import */ var _selector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../selector.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selector.js");



function constantNull() {
  return null;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, before) {
  var create = typeof name === "function" ? name : (0,_creator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(name),
      select = before == null ? constantNull : typeof before === "function" ? before : (0,_selector_js__WEBPACK_IMPORTED_MODULE_1__["default"])(before);
  return this.select(function() {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/iterator.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/iterator.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function* __WEBPACK_DEFAULT_EXPORT__() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) yield node;
    }
  }
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/join.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/join.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
  if (onupdate != null) update = onupdate(update);
  if (onexit == null) exit.remove(); else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/lower.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/lower.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return this.each(lower);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/merge.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/merge.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selection) {
  if (!(selection instanceof _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection)) throw new Error("invalid merge");

  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(merges, this._parents);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/node.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/node.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/nodes.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/nodes.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return Array.from(this);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/on.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/on.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {type: t, name: name};
  });
}

function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;
    else delete this.__on;
  };
}

function onAdd(typename, value, options) {
  return function() {
    var on = this.__on, o, listener = contextListener(value);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
        this.addEventListener(o.type, o.listener = listener, o.options = options);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, options);
    o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};
    if (!on) this.__on = [o];
    else on.push(o);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(typename, value, options) {
  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));
  return this;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/order.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/order.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {

  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/property.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/property.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];
    else this[name] = v;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value) {
  return arguments.length > 1
      ? this.each((value == null
          ? propertyRemove : typeof value === "function"
          ? propertyFunction
          : propertyConstant)(name, value))
      : this.node()[name];
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/raise.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/raise.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return this.each(raise);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/remove.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/remove.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return this.each(remove);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/select.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/select.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _selector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../selector.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selector.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(select) {
  if (typeof select !== "function") select = (0,_selector_js__WEBPACK_IMPORTED_MODULE_0__["default"])(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_1__.Selection(subgroups, this._parents);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectAll.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectAll.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../array.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/array.js");
/* harmony import */ var _selectorAll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../selectorAll.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selectorAll.js");




function arrayAll(select) {
  return function() {
    var group = select.apply(this, arguments);
    return group == null ? [] : (0,_array_js__WEBPACK_IMPORTED_MODULE_0__["default"])(group);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(select) {
  if (typeof select === "function") select = arrayAll(select);
  else select = (0,_selectorAll_js__WEBPACK_IMPORTED_MODULE_1__["default"])(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_2__.Selection(subgroups, parents);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectChild.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectChild.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _matcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matcher.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/matcher.js");


var find = Array.prototype.find;

function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}

function childFirst() {
  return this.firstElementChild;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(match) {
  return this.select(match == null ? childFirst
      : childFind(typeof match === "function" ? match : (0,_matcher_js__WEBPACK_IMPORTED_MODULE_0__.childMatcher)(match)));
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectChildren.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectChildren.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _matcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matcher.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/matcher.js");


var filter = Array.prototype.filter;

function children() {
  return this.children;
}

function childrenFilter(match) {
  return function() {
    return filter.call(this.children, match);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(match) {
  return this.selectAll(match == null ? children
      : childrenFilter(typeof match === "function" ? match : (0,_matcher_js__WEBPACK_IMPORTED_MODULE_0__.childMatcher)(match)));
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/size.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/size.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  let size = 0;
  for (const node of this) ++size; // eslint-disable-line no-unused-vars
  return size;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/sort.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/sort.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/sparse.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/sparse.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(update) {
  return new Array(update.length);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/style.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/style.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "styleValue": () => (/* binding */ styleValue)
/* harmony export */ });
/* harmony import */ var _window_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/window.js");


function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);
    else this.style.setProperty(name, v, priority);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value, priority) {
  return arguments.length > 1
      ? this.each((value == null
            ? styleRemove : typeof value === "function"
            ? styleFunction
            : styleConstant)(name, value, priority == null ? "" : priority))
      : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name)
      || (0,_window_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).getComputedStyle(node, null).getPropertyValue(name);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/text.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/text.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  return arguments.length
      ? this.each(value == null
          ? textRemove : (typeof value === "function"
          ? textFunction
          : textConstant)(value))
      : this.node().textContent;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selector.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selector.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function none() {}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selectorAll.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selectorAll.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function empty() {
  return [];
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/sourceEvent.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/sourceEvent.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(event) {
  let sourceEvent;
  while (sourceEvent = event.sourceEvent) event = sourceEvent;
  return event;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/window.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/window.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(node) {
  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
      || (node.document && node) // node is a Window
      || node.defaultView; // node is a Document
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js":
/*!********************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/double.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_PRECISION": () => (/* binding */ DEFAULT_PRECISION),
/* harmony export */   "DEFAULT_PRECISION_IN_DECIMAL_DIGITS": () => (/* binding */ DEFAULT_PRECISION_IN_DECIMAL_DIGITS),
/* harmony export */   "EPSILON": () => (/* binding */ EPSILON),
/* harmony export */   "LOG_E_10": () => (/* binding */ LOG_E_10),
/* harmony export */   "MAX_EXP": () => (/* binding */ MAX_EXP),
/* harmony export */   "MAX_VALUE": () => (/* binding */ MAX_VALUE),
/* harmony export */   "MIN_EXP": () => (/* binding */ MIN_EXP),
/* harmony export */   "MIN_VALUE": () => (/* binding */ MIN_VALUE),
/* harmony export */   "NEGATIVE_POWERS": () => (/* binding */ NEGATIVE_POWERS),
/* harmony export */   "POSITIVE_POWERS": () => (/* binding */ POSITIVE_POWERS),
/* harmony export */   "ceilToPrecision": () => (/* binding */ ceilToPrecision),
/* harmony export */   "ceilWithPrecision": () => (/* binding */ ceilWithPrecision),
/* harmony export */   "detectPrecision": () => (/* binding */ detectPrecision),
/* harmony export */   "ensureInRange": () => (/* binding */ ensureInRange),
/* harmony export */   "equalWithPrecision": () => (/* binding */ equalWithPrecision),
/* harmony export */   "floorToPrecision": () => (/* binding */ floorToPrecision),
/* harmony export */   "floorWithPrecision": () => (/* binding */ floorWithPrecision),
/* harmony export */   "getPrecision": () => (/* binding */ getPrecision),
/* harmony export */   "greaterOrEqualWithPrecision": () => (/* binding */ greaterOrEqualWithPrecision),
/* harmony export */   "greaterWithPrecision": () => (/* binding */ greaterWithPrecision),
/* harmony export */   "isInteger": () => (/* binding */ isInteger),
/* harmony export */   "lessOrEqualWithPrecision": () => (/* binding */ lessOrEqualWithPrecision),
/* harmony export */   "lessWithPrecision": () => (/* binding */ lessWithPrecision),
/* harmony export */   "log10": () => (/* binding */ log10),
/* harmony export */   "pow10": () => (/* binding */ pow10),
/* harmony export */   "project": () => (/* binding */ project),
/* harmony export */   "removeDecimalNoise": () => (/* binding */ removeDecimalNoise),
/* harmony export */   "round": () => (/* binding */ round),
/* harmony export */   "roundToPrecision": () => (/* binding */ roundToPrecision),
/* harmony export */   "toIncrement": () => (/* binding */ toIncrement)
/* harmony export */ });
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
/**
 * Module Double contains a set of constants and precision based utility methods
 * for dealing with doubles and their decimal garbage in the javascript.
 */
// Constants.
const MIN_VALUE = -Number.MAX_VALUE;
const MAX_VALUE = Number.MAX_VALUE;
const MIN_EXP = -308;
const MAX_EXP = 308;
const EPSILON = 1E-323;
const DEFAULT_PRECISION = 0.0001;
const DEFAULT_PRECISION_IN_DECIMAL_DIGITS = 12;
const LOG_E_10 = Math.log(10);
const POSITIVE_POWERS = [
    1E0, 1E1, 1E2, 1E3, 1E4, 1E5, 1E6, 1E7, 1E8, 1E9, 1E10, 1E11, 1E12, 1E13, 1E14, 1E15, 1E16, 1E17, 1E18, 1E19, 1E20, 1E21, 1E22, 1E23, 1E24, 1E25, 1E26, 1E27, 1E28, 1E29, 1E30, 1E31, 1E32, 1E33, 1E34, 1E35, 1E36, 1E37, 1E38, 1E39, 1E40, 1E41, 1E42, 1E43, 1E44, 1E45, 1E46, 1E47, 1E48, 1E49, 1E50, 1E51, 1E52, 1E53, 1E54, 1E55, 1E56, 1E57, 1E58, 1E59, 1E60, 1E61, 1E62, 1E63, 1E64, 1E65, 1E66, 1E67, 1E68, 1E69, 1E70, 1E71, 1E72, 1E73, 1E74, 1E75, 1E76, 1E77, 1E78, 1E79, 1E80, 1E81, 1E82, 1E83, 1E84, 1E85, 1E86, 1E87, 1E88, 1E89, 1E90, 1E91, 1E92, 1E93, 1E94, 1E95, 1E96, 1E97, 1E98, 1E99,
    1E100, 1E101, 1E102, 1E103, 1E104, 1E105, 1E106, 1E107, 1E108, 1E109, 1E110, 1E111, 1E112, 1E113, 1E114, 1E115, 1E116, 1E117, 1E118, 1E119, 1E120, 1E121, 1E122, 1E123, 1E124, 1E125, 1E126, 1E127, 1E128, 1E129, 1E130, 1E131, 1E132, 1E133, 1E134, 1E135, 1E136, 1E137, 1E138, 1E139, 1E140, 1E141, 1E142, 1E143, 1E144, 1E145, 1E146, 1E147, 1E148, 1E149, 1E150, 1E151, 1E152, 1E153, 1E154, 1E155, 1E156, 1E157, 1E158, 1E159, 1E160, 1E161, 1E162, 1E163, 1E164, 1E165, 1E166, 1E167, 1E168, 1E169, 1E170, 1E171, 1E172, 1E173, 1E174, 1E175, 1E176, 1E177, 1E178, 1E179, 1E180, 1E181, 1E182, 1E183, 1E184, 1E185, 1E186, 1E187, 1E188, 1E189, 1E190, 1E191, 1E192, 1E193, 1E194, 1E195, 1E196, 1E197, 1E198, 1E199,
    1E200, 1E201, 1E202, 1E203, 1E204, 1E205, 1E206, 1E207, 1E208, 1E209, 1E210, 1E211, 1E212, 1E213, 1E214, 1E215, 1E216, 1E217, 1E218, 1E219, 1E220, 1E221, 1E222, 1E223, 1E224, 1E225, 1E226, 1E227, 1E228, 1E229, 1E230, 1E231, 1E232, 1E233, 1E234, 1E235, 1E236, 1E237, 1E238, 1E239, 1E240, 1E241, 1E242, 1E243, 1E244, 1E245, 1E246, 1E247, 1E248, 1E249, 1E250, 1E251, 1E252, 1E253, 1E254, 1E255, 1E256, 1E257, 1E258, 1E259, 1E260, 1E261, 1E262, 1E263, 1E264, 1E265, 1E266, 1E267, 1E268, 1E269, 1E270, 1E271, 1E272, 1E273, 1E274, 1E275, 1E276, 1E277, 1E278, 1E279, 1E280, 1E281, 1E282, 1E283, 1E284, 1E285, 1E286, 1E287, 1E288, 1E289, 1E290, 1E291, 1E292, 1E293, 1E294, 1E295, 1E296, 1E297, 1E298, 1E299,
    1E300, 1E301, 1E302, 1E303, 1E304, 1E305, 1E306, 1E307, 1E308
];
const NEGATIVE_POWERS = [
    1E0, 1E-1, 1E-2, 1E-3, 1E-4, 1E-5, 1E-6, 1E-7, 1E-8, 1E-9, 1E-10, 1E-11, 1E-12, 1E-13, 1E-14, 1E-15, 1E-16, 1E-17, 1E-18, 1E-19, 1E-20, 1E-21, 1E-22, 1E-23, 1E-24, 1E-25, 1E-26, 1E-27, 1E-28, 1E-29, 1E-30, 1E-31, 1E-32, 1E-33, 1E-34, 1E-35, 1E-36, 1E-37, 1E-38, 1E-39, 1E-40, 1E-41, 1E-42, 1E-43, 1E-44, 1E-45, 1E-46, 1E-47, 1E-48, 1E-49, 1E-50, 1E-51, 1E-52, 1E-53, 1E-54, 1E-55, 1E-56, 1E-57, 1E-58, 1E-59, 1E-60, 1E-61, 1E-62, 1E-63, 1E-64, 1E-65, 1E-66, 1E-67, 1E-68, 1E-69, 1E-70, 1E-71, 1E-72, 1E-73, 1E-74, 1E-75, 1E-76, 1E-77, 1E-78, 1E-79, 1E-80, 1E-81, 1E-82, 1E-83, 1E-84, 1E-85, 1E-86, 1E-87, 1E-88, 1E-89, 1E-90, 1E-91, 1E-92, 1E-93, 1E-94, 1E-95, 1E-96, 1E-97, 1E-98, 1E-99,
    1E-100, 1E-101, 1E-102, 1E-103, 1E-104, 1E-105, 1E-106, 1E-107, 1E-108, 1E-109, 1E-110, 1E-111, 1E-112, 1E-113, 1E-114, 1E-115, 1E-116, 1E-117, 1E-118, 1E-119, 1E-120, 1E-121, 1E-122, 1E-123, 1E-124, 1E-125, 1E-126, 1E-127, 1E-128, 1E-129, 1E-130, 1E-131, 1E-132, 1E-133, 1E-134, 1E-135, 1E-136, 1E-137, 1E-138, 1E-139, 1E-140, 1E-141, 1E-142, 1E-143, 1E-144, 1E-145, 1E-146, 1E-147, 1E-148, 1E-149, 1E-150, 1E-151, 1E-152, 1E-153, 1E-154, 1E-155, 1E-156, 1E-157, 1E-158, 1E-159, 1E-160, 1E-161, 1E-162, 1E-163, 1E-164, 1E-165, 1E-166, 1E-167, 1E-168, 1E-169, 1E-170, 1E-171, 1E-172, 1E-173, 1E-174, 1E-175, 1E-176, 1E-177, 1E-178, 1E-179, 1E-180, 1E-181, 1E-182, 1E-183, 1E-184, 1E-185, 1E-186, 1E-187, 1E-188, 1E-189, 1E-190, 1E-191, 1E-192, 1E-193, 1E-194, 1E-195, 1E-196, 1E-197, 1E-198, 1E-199,
    1E-200, 1E-201, 1E-202, 1E-203, 1E-204, 1E-205, 1E-206, 1E-207, 1E-208, 1E-209, 1E-210, 1E-211, 1E-212, 1E-213, 1E-214, 1E-215, 1E-216, 1E-217, 1E-218, 1E-219, 1E-220, 1E-221, 1E-222, 1E-223, 1E-224, 1E-225, 1E-226, 1E-227, 1E-228, 1E-229, 1E-230, 1E-231, 1E-232, 1E-233, 1E-234, 1E-235, 1E-236, 1E-237, 1E-238, 1E-239, 1E-240, 1E-241, 1E-242, 1E-243, 1E-244, 1E-245, 1E-246, 1E-247, 1E-248, 1E-249, 1E-250, 1E-251, 1E-252, 1E-253, 1E-254, 1E-255, 1E-256, 1E-257, 1E-258, 1E-259, 1E-260, 1E-261, 1E-262, 1E-263, 1E-264, 1E-265, 1E-266, 1E-267, 1E-268, 1E-269, 1E-270, 1E-271, 1E-272, 1E-273, 1E-274, 1E-275, 1E-276, 1E-277, 1E-278, 1E-279, 1E-280, 1E-281, 1E-282, 1E-283, 1E-284, 1E-285, 1E-286, 1E-287, 1E-288, 1E-289, 1E-290, 1E-291, 1E-292, 1E-293, 1E-294, 1E-295, 1E-296, 1E-297, 1E-298, 1E-299,
    1E-300, 1E-301, 1E-302, 1E-303, 1E-304, 1E-305, 1E-306, 1E-307, 1E-308, 1E-309, 1E-310, 1E-311, 1E-312, 1E-313, 1E-314, 1E-315, 1E-316, 1E-317, 1E-318, 1E-319, 1E-320, 1E-321, 1E-322, 1E-323, 1E-324
];
/**
 * Returns powers of 10.
 * Unlike the Math.pow this function produces no decimal garbage.
 * @param exp Exponent.
 */
function pow10(exp) {
    // Positive & zero
    if (exp >= 0) {
        if (exp < POSITIVE_POWERS.length) {
            return POSITIVE_POWERS[exp];
        }
        else {
            return Infinity;
        }
    }
    // Negative
    exp = -exp;
    if (exp > 0 && exp < NEGATIVE_POWERS.length) { // if exp==int.MIN_VALUE then changing the sign will overflow and keep the number negative - we need to check for exp > 0 to filter out this corner case
        return NEGATIVE_POWERS[exp];
    }
    else {
        return 0;
    }
}
/**
 * Returns the 10 base logarithm of the number.
 * Unlike Math.log function this produces integer results with no decimal garbage.
 * @param val Positive value or zero.
 */
// eslint-disable-next-line max-lines-per-function
function log10(val) {
    // Fast Log10() algorithm
    if (val > 1 && val < 1E16) {
        if (val < 1E8) {
            if (val < 1E4) {
                if (val < 1E2) {
                    if (val < 1E1) {
                        return 0;
                    }
                    else {
                        return 1;
                    }
                }
                else {
                    if (val < 1E3) {
                        return 2;
                    }
                    else {
                        return 3;
                    }
                }
            }
            else {
                if (val < 1E6) {
                    if (val < 1E5) {
                        return 4;
                    }
                    else {
                        return 5;
                    }
                }
                else {
                    if (val < 1E7) {
                        return 6;
                    }
                    else {
                        return 7;
                    }
                }
            }
        }
        else {
            if (val < 1E12) {
                if (val < 1E10) {
                    if (val < 1E9) {
                        return 8;
                    }
                    else {
                        return 9;
                    }
                }
                else {
                    if (val < 1E11) {
                        return 10;
                    }
                    else {
                        return 11;
                    }
                }
            }
            else {
                if (val < 1E14) {
                    if (val < 1E13) {
                        return 12;
                    }
                    else {
                        return 13;
                    }
                }
                else {
                    if (val < 1E15) {
                        return 14;
                    }
                    else {
                        return 15;
                    }
                }
            }
        }
    }
    if (val > 1E-16 && val < 1) {
        if (val < 1E-8) {
            if (val < 1E-12) {
                if (val < 1E-14) {
                    if (val < 1E-15) {
                        return -16;
                    }
                    else {
                        return -15;
                    }
                }
                else {
                    if (val < 1E-13) {
                        return -14;
                    }
                    else {
                        return -13;
                    }
                }
            }
            else {
                if (val < 1E-10) {
                    if (val < 1E-11) {
                        return -12;
                    }
                    else {
                        return -11;
                    }
                }
                else {
                    if (val < 1E-9) {
                        return -10;
                    }
                    else {
                        return -9;
                    }
                }
            }
        }
        else {
            if (val < 1E-4) {
                if (val < 1E-6) {
                    if (val < 1E-7) {
                        return -8;
                    }
                    else {
                        return -7;
                    }
                }
                else {
                    if (val < 1E-5) {
                        return -6;
                    }
                    else {
                        return -5;
                    }
                }
            }
            else {
                if (val < 1E-2) {
                    if (val < 1E-3) {
                        return -4;
                    }
                    else {
                        return -3;
                    }
                }
                else {
                    if (val < 1E-1) {
                        return -2;
                    }
                    else {
                        return -1;
                    }
                }
            }
        }
    }
    // JS Math provides only natural log function so we need to calc the 10 base logarithm:
    // logb(x) = logk(x)/logk(b);
    const log10 = Math.log(val) / LOG_E_10;
    return floorWithPrecision(log10);
}
/**
 * Returns a power of 10 representing precision of the number based on the number of meaningful decimal digits.
 * For example the precision of 56,263.3767 with the 6 meaningful decimal digit is 0.1.
 * @param x Value.
 * @param decimalDigits How many decimal digits are meaningfull.
 */
function getPrecision(x, decimalDigits) {
    if (decimalDigits === undefined) {
        decimalDigits = DEFAULT_PRECISION_IN_DECIMAL_DIGITS;
    }
    if (!x || !isFinite(x)) {
        return undefined;
    }
    const exp = log10(Math.abs(x));
    if (exp < MIN_EXP) {
        return 0;
    }
    const precisionExp = Math.max(exp - decimalDigits, -NEGATIVE_POWERS.length + 1);
    return pow10(precisionExp);
}
/**
 * Checks if a delta between 2 numbers is less than provided precision.
 * @param x One value.
 * @param y Another value.
 * @param precision Precision value.
 */
function equalWithPrecision(x, y, precision) {
    precision = detectPrecision(precision, x, y);
    return x === y || Math.abs(x - y) < precision;
}
/**
 * Checks if a first value is less than another taking
 * into account the loose precision based equality.
 * @param x One value.
 * @param y Another value.
 * @param precision Precision value.
 */
function lessWithPrecision(x, y, precision) {
    precision = detectPrecision(precision, x, y);
    return x < y && Math.abs(x - y) > precision;
}
/**
 * Checks if a first value is less or equal than another taking
 * into account the loose precision based equality.
 * @param x One value.
 * @param y Another value.
 * @param precision Precision value.
 */
function lessOrEqualWithPrecision(x, y, precision) {
    precision = detectPrecision(precision, x, y);
    return x < y || Math.abs(x - y) < precision;
}
/**
 * Checks if a first value is greater than another taking
 * into account the loose precision based equality.
 * @param x One value.
 * @param y Another value.
 * @param precision Precision value.
 */
function greaterWithPrecision(x, y, precision) {
    precision = detectPrecision(precision, x, y);
    return x > y && Math.abs(x - y) > precision;
}
/**
 * Checks if a first value is greater or equal to another taking
 * into account the loose precision based equality.
 * @param x One value.
 * @param y Another value.
 * @param precision Precision value.
 */
function greaterOrEqualWithPrecision(x, y, precision) {
    precision = detectPrecision(precision, x, y);
    return x > y || Math.abs(x - y) < precision;
}
/**
 * Floors the number unless it's withing the precision distance from the higher int.
 * @param x One value.
 * @param precision Precision value.
 */
function floorWithPrecision(x, precision) {
    precision = precision != null ? precision : DEFAULT_PRECISION;
    const roundX = Math.round(x);
    if (Math.abs(x - roundX) < precision) {
        return roundX;
    }
    else {
        return Math.floor(x);
    }
}
/**
 * Ceils the number unless it's withing the precision distance from the lower int.
 * @param x One value.
 * @param precision Precision value.
 */
function ceilWithPrecision(x, precision) {
    precision = detectPrecision(precision, DEFAULT_PRECISION);
    const roundX = Math.round(x);
    if (Math.abs(x - roundX) < precision) {
        return roundX;
    }
    else {
        return Math.ceil(x);
    }
}
/**
 * Floors the number to the provided precision.
 * For example 234,578 floored to 1,000 precision is 234,000.
 * @param x One value.
 * @param precision Precision value.
 */
function floorToPrecision(x, precision) {
    precision = detectPrecision(precision, DEFAULT_PRECISION);
    if (precision === 0 || x === 0) {
        return x;
    }
    // Precision must be a Power of 10
    return Math.floor(x / precision) * precision;
}
/**
 * Ceils the number to the provided precision.
 * For example 234,578 floored to 1,000 precision is 235,000.
 * @param x One value.
 * @param precision Precision value.
 */
function ceilToPrecision(x, precision) {
    precision = detectPrecision(precision, DEFAULT_PRECISION);
    if (precision === 0 || x === 0) {
        return x;
    }
    // Precision must be a Power of 10
    return Math.ceil(x / precision) * precision;
}
/**
 * Rounds the number to the provided precision.
 * For example 234,578 floored to 1,000 precision is 235,000.
 * @param x One value.
 * @param precision Precision value.
 */
function roundToPrecision(x, precision) {
    precision = detectPrecision(precision, DEFAULT_PRECISION);
    if (precision === 0 || x === 0) {
        return x;
    }
    // Precision must be a Power of 10
    let result = Math.round(x / precision) * precision;
    const decimalDigits = Math.round(log10(Math.abs(x)) - log10(precision)) + 1;
    if (decimalDigits > 0 && decimalDigits < 16) {
        result = parseFloat(result.toPrecision(decimalDigits));
    }
    return result;
}
/**
 * Returns the value making sure that it's restricted to the provided range.
 * @param x One value.
 * @param min Range min boundary.
 * @param max Range max boundary.
 */
function ensureInRange(x, min, max) {
    if (x === undefined || x === null) {
        return x;
    }
    if (x < min) {
        return min;
    }
    if (x > max) {
        return max;
    }
    return x;
}
/**
 * Rounds the value - this method is actually faster than Math.round - used in the graphics utils.
 * @param x Value to round.
 */
function round(x) {
    return (0.5 + x) << 0;
}
/**
 * Projects the value from the source range into the target range.
 * @param value Value to project.
 * @param fromMin Minimum of the source range.
 * @param toMin Minimum of the target range.
 * @param toMax Maximum of the target range.
 */
function project(value, fromMin, fromSize, toMin, toSize) {
    if (fromSize === 0 || toSize === 0) {
        if (fromMin <= value && value <= fromMin + fromSize) {
            return toMin;
        }
        else {
            return NaN;
        }
    }
    const relativeX = (value - fromMin) / fromSize;
    const projectedX = toMin + relativeX * toSize;
    return projectedX;
}
/**
 * Removes decimal noise.
 * @param value Value to be processed.
 */
function removeDecimalNoise(value) {
    return roundToPrecision(value, getPrecision(value));
}
/**
 * Checks whether the number is integer.
 * @param value Value to be checked.
 */
function isInteger(value) {
    return value !== null && value % 1 === 0;
}
/**
 * Dividing by increment will give us count of increments
 * Round out the rough edges into even integer
 * Multiply back by increment to get rounded value
 * e.g. Rounder.toIncrement(0.647291, 0.05) => 0.65
 * @param value - value to round to nearest increment
 * @param increment - smallest increment to round toward
 */
function toIncrement(value, increment) {
    return Math.round(value / increment) * increment;
}
/**
 * Overrides the given precision with defaults if necessary. Exported only for tests
 *
 * precision defined returns precision
 * x defined with y undefined returns twelve digits of precision based on x
 * x defined but zero with y defined; returns twelve digits of precision based on y
 * x and y defined retursn twelve digits of precision based on the minimum of the two
 * if no applicable precision is found based on those (such as x and y being zero), the default precision is used
 */
function detectPrecision(precision, x, y) {
    if (precision !== undefined) {
        return precision;
    }
    let calculatedPrecision;
    if (!y) {
        calculatedPrecision = getPrecision(x);
    }
    else if (!x) {
        calculatedPrecision = getPrecision(y);
    }
    else {
        calculatedPrecision = getPrecision(Math.min(Math.abs(x), Math.abs(y)));
    }
    return calculatedPrecision || DEFAULT_PRECISION;
}
//# sourceMappingURL=double.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/arrayExtensions.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/arrayExtensions.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clear": () => (/* binding */ clear),
/* harmony export */   "copy": () => (/* binding */ copy),
/* harmony export */   "createWithId": () => (/* binding */ createWithId),
/* harmony export */   "createWithName": () => (/* binding */ createWithName),
/* harmony export */   "diff": () => (/* binding */ diff),
/* harmony export */   "distinct": () => (/* binding */ distinct),
/* harmony export */   "emptyToNull": () => (/* binding */ emptyToNull),
/* harmony export */   "ensureArray": () => (/* binding */ ensureArray),
/* harmony export */   "extendWithId": () => (/* binding */ extendWithId),
/* harmony export */   "extendWithName": () => (/* binding */ extendWithName),
/* harmony export */   "findItemWithName": () => (/* binding */ findItemWithName),
/* harmony export */   "findWithId": () => (/* binding */ findWithId),
/* harmony export */   "indexOf": () => (/* binding */ indexOf),
/* harmony export */   "indexWithName": () => (/* binding */ indexWithName),
/* harmony export */   "insertSorted": () => (/* binding */ insertSorted),
/* harmony export */   "intersect": () => (/* binding */ intersect),
/* harmony export */   "isArrayOrInheritedArray": () => (/* binding */ isArrayOrInheritedArray),
/* harmony export */   "isInArray": () => (/* binding */ isInArray),
/* harmony export */   "isSorted": () => (/* binding */ isSorted),
/* harmony export */   "isSortedNumeric": () => (/* binding */ isSortedNumeric),
/* harmony export */   "isUndefinedOrEmpty": () => (/* binding */ isUndefinedOrEmpty),
/* harmony export */   "range": () => (/* binding */ range),
/* harmony export */   "removeFirst": () => (/* binding */ removeFirst),
/* harmony export */   "rotate": () => (/* binding */ rotate),
/* harmony export */   "sequenceEqual": () => (/* binding */ sequenceEqual),
/* harmony export */   "swap": () => (/* binding */ swap),
/* harmony export */   "take": () => (/* binding */ take),
/* harmony export */   "union": () => (/* binding */ union),
/* harmony export */   "unionSingle": () => (/* binding */ unionSingle)
/* harmony export */ });
/**
 * Returns items that exist in target and other.
 */
function intersect(target, other) {
    const result = [];
    for (let i = target.length - 1; i >= 0; --i) {
        if (other.indexOf(target[i]) !== -1) {
            result.push(target[i]);
        }
    }
    return result;
}
/**
 * Return elements exists in target but not exists in other.
 */
function diff(target, other) {
    const result = [];
    for (let i = target.length - 1; i >= 0; --i) {
        const value = target[i];
        if (other.indexOf(value) === -1) {
            result.push(value);
        }
    }
    return result;
}
/**
 * Return an array with only the distinct items in the source.
 */
function distinct(source) {
    const result = [];
    for (let i = 0, len = source.length; i < len; i++) {
        const value = source[i];
        if (result.indexOf(value) === -1) {
            result.push(value);
        }
    }
    return result;
}
/**
 * Pushes content of source onto target,
 * for parts of course that do not already exist in target.
 */
function union(target, source) {
    for (let i = 0, len = source.length; i < len; ++i) {
        unionSingle(target, source[i]);
    }
}
/**
 * Pushes value onto target, if value does not already exist in target.
 */
function unionSingle(target, value) {
    if (target.indexOf(value) < 0) {
        target.push(value);
    }
}
/**
 * Returns an array with a range of items from source,
 * including the startIndex & endIndex.
 */
function range(source, startIndex, endIndex) {
    const result = [];
    for (let i = startIndex; i <= endIndex; ++i) {
        result.push(source[i]);
    }
    return result;
}
/**
 * Returns an array that includes items from source, up to the specified count.
 */
function take(source, count) {
    const result = [];
    for (let i = 0; i < count; ++i) {
        result.push(source[i]);
    }
    return result;
}
function copy(source) {
    return take(source, source.length);
}
/**
  * Returns a value indicating whether the arrays have the same values in the same sequence.
  */
function sequenceEqual(left, right, comparison) {
    // Normalize falsy to null
    if (!left) {
        left = null;
    }
    if (!right) {
        right = null;
    }
    // T can be same as U, and it is possible for left and right to be the same array object...
    if (left === right) {
        return true;
    }
    if (!!left !== !!right) {
        return false;
    }
    const len = left.length;
    if (len !== right.length) {
        return false;
    }
    let i = 0;
    while (i < len && comparison(left[i], right[i])) {
        ++i;
    }
    return i === len;
}
/**
 * Returns null if the specified array is empty.
 * Otherwise returns the specified array.
 */
function emptyToNull(array) {
    if (array && array.length === 0) {
        return null;
    }
    return array;
}
function indexOf(array, predicate) {
    for (let i = 0, len = array.length; i < len; ++i) {
        if (predicate(array[i])) {
            return i;
        }
    }
    return -1;
}
/**
 * Returns a copy of the array rotated by the specified offset.
 */
function rotate(array, offset) {
    if (offset === 0)
        return array.slice();
    const rotated = array.slice(offset);
    Array.prototype.push.apply(rotated, array.slice(0, offset));
    return rotated;
}
function createWithId() {
    return extendWithId([]);
}
function extendWithId(array) {
    const extended = array;
    extended.withId = withId;
    return extended;
}
/**
 * Finds and returns the first item with a matching ID.
 */
function findWithId(array, id) {
    for (let i = 0, len = array.length; i < len; i++) {
        const item = array[i];
        if (item.id === id)
            return item;
    }
}
function withId(id) {
    return findWithId(this, id);
}
function createWithName() {
    return extendWithName([]);
}
function extendWithName(array) {
    const extended = array;
    extended.withName = withName;
    return extended;
}
function findItemWithName(array, name) {
    const index = indexWithName(array, name);
    if (index >= 0)
        return array[index];
}
function indexWithName(array, name) {
    for (let i = 0, len = array.length; i < len; i++) {
        const item = array[i];
        if (item.name === name)
            return i;
    }
    return -1;
}
/**
 * Inserts a number in sorted order into a list of numbers already in sorted order.
 * @returns True if the item was added, false if it already existed.
 */
function insertSorted(list, value) {
    const len = list.length;
    // NOTE: iterate backwards because incoming values tend to be sorted already.
    for (let i = len - 1; i >= 0; i--) {
        const diff = list[i] - value;
        if (diff === 0)
            return false;
        if (diff > 0)
            continue;
        // diff < 0
        list.splice(i + 1, 0, value);
        return true;
    }
    list.unshift(value);
    return true;
}
/**
 * Removes the first occurrence of a value from a list if it exists.
 * @returns True if the value was removed, false if it did not exist in the list.
 */
function removeFirst(list, value) {
    const index = list.indexOf(value);
    if (index < 0)
        return false;
    list.splice(index, 1);
    return true;
}
/**
 * Finds and returns the first item with a matching name.
 */
function withName(name) {
    return findItemWithName(this, name);
}
/**
 * Deletes all items from the array.
 */
function clear(array) {
    if (!array)
        return;
    while (array.length > 0)
        array.pop();
}
function isUndefinedOrEmpty(array) {
    if (!array || array.length === 0) {
        return true;
    }
    return false;
}
function swap(array, firstIndex, secondIndex) {
    const temp = array[firstIndex];
    array[firstIndex] = array[secondIndex];
    array[secondIndex] = temp;
}
function isInArray(array, lookupItem, compareCallback) {
    return array.some(item => compareCallback(item, lookupItem));
}
/** Checks if the given object is an Array, and looking all the way up the prototype chain. */
function isArrayOrInheritedArray(obj) {
    let nextPrototype = obj;
    while (nextPrototype != null) {
        if (Array.isArray(nextPrototype))
            return true;
        nextPrototype = Object.getPrototypeOf(nextPrototype);
    }
    return false;
}
/**
 * Returns true if the specified values array is sorted in an order as determined by the specified compareFunction.
 */
function isSorted(values, compareFunction) {
    const ilen = values.length;
    if (ilen >= 2) {
        for (let i = 1; i < ilen; i++) {
            if (compareFunction(values[i - 1], values[i]) > 0) {
                return false;
            }
        }
    }
    return true;
}
/**
 * Returns true if the specified number values array is sorted in ascending order
 * (or descending order if the specified descendingOrder is truthy).
 */
function isSortedNumeric(values, descendingOrder) {
    const compareFunction = descendingOrder ?
        (a, b) => b - a :
        (a, b) => a - b;
    return isSorted(values, compareFunction);
}
/**
 * Ensures that the given T || T[] is in array form, either returning the array or
 * converting single items into an array of length one.
 */
function ensureArray(value) {
    if (Array.isArray(value)) {
        return value;
    }
    return [value];
}
//# sourceMappingURL=arrayExtensions.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/enumExtensions.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/enumExtensions.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getBitCount": () => (/* binding */ getBitCount),
/* harmony export */   "hasFlag": () => (/* binding */ hasFlag),
/* harmony export */   "resetFlag": () => (/* binding */ resetFlag),
/* harmony export */   "setFlag": () => (/* binding */ setFlag),
/* harmony export */   "toString": () => (/* binding */ toString)
/* harmony export */ });
/* harmony import */ var _double__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../double */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.

/**
 * Extensions for Enumerations.
 */
/**
 * Gets a value indicating whether the value has the bit flags set.
 */
function hasFlag(value, flag) {
    return (value & flag) === flag;
}
/**
 * Sets a value of a flag without modifying any other flags.
 */
function setFlag(value, flag) {
    return value |= flag;
}
/**
 * Resets a value of a flag without modifying any other flags.
 */
function resetFlag(value, flag) {
    return value &= ~flag;
}
/**
 * According to the TypeScript Handbook, this is safe to do.
 */
function toString(enumType, value) {
    return enumType[value];
}
/**
 * Returns the number of 1's in the specified value that is a set of binary bit flags.
 */
function getBitCount(value) {
    if (!(0,_double__WEBPACK_IMPORTED_MODULE_0__.isInteger)(value))
        return 0;
    let bitCount = 0;
    let shiftingValue = value;
    while (shiftingValue !== 0) {
        if ((shiftingValue & 1) === 1) {
            bitCount++;
        }
        shiftingValue = shiftingValue >>> 1;
    }
    return bitCount;
}
//# sourceMappingURL=enumExtensions.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/logicExtensions.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/logicExtensions.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XOR": () => (/* binding */ XOR)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
function XOR(a, b) {
    return (a || b) && !(a && b);
}
//# sourceMappingURL=logicExtensions.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/regExpExtensions.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/regExpExtensions.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "run": () => (/* binding */ run)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
/**
 * Runs exec on regex starting from 0 index
 * This is the expected behavior but RegExp actually remember
 * the last index they stopped at (found match at) and will
 * return unexpected results when run in sequence.
 * @param regex - regular expression object
 * @param value - string to search wiht regex
 * @param start - index within value to start regex
 */
function run(regex, value, start) {
    regex.lastIndex = start || 0;
    return regex.exec(value);
}
//# sourceMappingURL=regExpExtensions.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/stringExtensions.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/stringExtensions.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "endsWith": () => (/* binding */ endsWith)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/**
 * Extensions to String class.
 */
/**
 * Checks if a string ends with a sub-string.
 */
function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
}
//# sourceMappingURL=stringExtensions.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arrayExtensions": () => (/* reexport module object */ _extensions_arrayExtensions__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   "double": () => (/* reexport module object */ _double__WEBPACK_IMPORTED_MODULE_7__),
/* harmony export */   "enumExtensions": () => (/* reexport module object */ _extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   "jsonComparer": () => (/* reexport module object */ _jsonComparer__WEBPACK_IMPORTED_MODULE_8__),
/* harmony export */   "logicExtensions": () => (/* reexport module object */ _extensions_logicExtensions__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   "numericSequence": () => (/* reexport module object */ _numericSequence_numericSequence__WEBPACK_IMPORTED_MODULE_5__),
/* harmony export */   "numericSequenceRange": () => (/* reexport module object */ _numericSequence_numericSequenceRange__WEBPACK_IMPORTED_MODULE_6__),
/* harmony export */   "pixelConverter": () => (/* reexport module object */ _pixelConverter__WEBPACK_IMPORTED_MODULE_9__),
/* harmony export */   "prototype": () => (/* reexport module object */ _prototype__WEBPACK_IMPORTED_MODULE_10__),
/* harmony export */   "regExpExtensions": () => (/* reexport module object */ _extensions_regExpExtensions__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   "stringExtensions": () => (/* reexport module object */ _extensions_stringExtensions__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   "textSizeDefaults": () => (/* reexport module object */ _textSizeDefaults__WEBPACK_IMPORTED_MODULE_11__),
/* harmony export */   "valueType": () => (/* reexport module object */ _valueType__WEBPACK_IMPORTED_MODULE_12__)
/* harmony export */ });
/* harmony import */ var _extensions_arrayExtensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extensions/arrayExtensions */ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/arrayExtensions.js");
/* harmony import */ var _extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extensions/enumExtensions */ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/enumExtensions.js");
/* harmony import */ var _extensions_logicExtensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extensions/logicExtensions */ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/logicExtensions.js");
/* harmony import */ var _extensions_regExpExtensions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extensions/regExpExtensions */ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/regExpExtensions.js");
/* harmony import */ var _extensions_stringExtensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extensions/stringExtensions */ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/stringExtensions.js");
/* harmony import */ var _numericSequence_numericSequence__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./numericSequence/numericSequence */ "./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequence.js");
/* harmony import */ var _numericSequence_numericSequenceRange__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./numericSequence/numericSequenceRange */ "./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequenceRange.js");
/* harmony import */ var _double__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./double */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/* harmony import */ var _jsonComparer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./jsonComparer */ "./node_modules/powerbi-visuals-utils-typeutils/lib/jsonComparer.js");
/* harmony import */ var _pixelConverter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pixelConverter */ "./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js");
/* harmony import */ var _prototype__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./prototype */ "./node_modules/powerbi-visuals-utils-typeutils/lib/prototype.js");
/* harmony import */ var _textSizeDefaults__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./textSizeDefaults */ "./node_modules/powerbi-visuals-utils-typeutils/lib/textSizeDefaults.js");
/* harmony import */ var _valueType__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./valueType */ "./node_modules/powerbi-visuals-utils-typeutils/lib/valueType.js");














//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/jsonComparer.js":
/*!**************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/jsonComparer.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "equals": () => (/* binding */ equals)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
/**
 * Performs JSON-style comparison of two objects.
 */
function equals(x, y) {
    if (x === y)
        return true;
    return JSON.stringify(x) === JSON.stringify(y);
}
//# sourceMappingURL=jsonComparer.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequence.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequence.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NumericSequence": () => (/* binding */ NumericSequence)
/* harmony export */ });
/* harmony import */ var _double__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../double */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/* harmony import */ var _numericSequenceRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./numericSequenceRange */ "./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequenceRange.js");
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */


class NumericSequence {
    // eslint-disable-next-line max-lines-per-function
    static calculate(range, expectedCount, maxAllowedMargin, minPower, useZeroRefPoint, steps) {
        const result = new NumericSequence();
        if (expectedCount === undefined)
            expectedCount = 10;
        else
            expectedCount = _double__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(expectedCount, NumericSequence.MIN_COUNT, NumericSequence.MAX_COUNT);
        if (minPower === undefined)
            minPower = _double__WEBPACK_IMPORTED_MODULE_0__.MIN_EXP;
        if (useZeroRefPoint === undefined)
            useZeroRefPoint = false;
        if (maxAllowedMargin === undefined)
            maxAllowedMargin = 1;
        if (steps === undefined)
            steps = [1, 2, 5];
        // Handle single stop case
        if (range.forcedSingleStop) {
            result.interval = range.getSize();
            result.intervalOffset = result.interval - (range.forcedSingleStop - range.min);
            result.min = range.min;
            result.max = range.max;
            result.sequence = [range.forcedSingleStop];
            return result;
        }
        let interval = 0;
        let min = 0;
        let max = 9;
        const canExtendMin = maxAllowedMargin > 0 && !range.hasFixedMin;
        const canExtendMax = maxAllowedMargin > 0 && !range.hasFixedMax;
        const size = range.getSize();
        let exp = _double__WEBPACK_IMPORTED_MODULE_0__.log10(size);
        // Account for Exp of steps
        const stepExp = _double__WEBPACK_IMPORTED_MODULE_0__.log10(steps[0]);
        exp = exp - stepExp;
        // Account for MaxCount
        const expectedCountExp = _double__WEBPACK_IMPORTED_MODULE_0__.log10(expectedCount);
        exp = exp - expectedCountExp;
        // Account for MinPower
        exp = Math.max(exp, minPower - stepExp + 1);
        let count = undefined;
        // Create array of "good looking" numbers
        if (interval !== 0) {
            // If explicit interval is defined - use it instead of the steps array.
            const power = _double__WEBPACK_IMPORTED_MODULE_0__.pow10(exp);
            const roundMin = _double__WEBPACK_IMPORTED_MODULE_0__.floorToPrecision(range.min, power);
            const roundMax = _double__WEBPACK_IMPORTED_MODULE_0__.ceilToPrecision(range.max, power);
            const roundRange = _numericSequenceRange__WEBPACK_IMPORTED_MODULE_1__.NumericSequenceRange.calculateFixedRange(roundMin, roundMax);
            roundRange.shrinkByStep(range, interval);
            min = roundRange.min;
            max = roundRange.max;
            count = Math.floor(roundRange.getSize() / interval);
        }
        else {
            // No interval defined -> find optimal interval
            let dexp;
            for (dexp = 0; dexp < 3; dexp++) {
                const e = exp + dexp;
                const power = _double__WEBPACK_IMPORTED_MODULE_0__.pow10(e);
                const roundMin = _double__WEBPACK_IMPORTED_MODULE_0__.floorToPrecision(range.min, power);
                const roundMax = _double__WEBPACK_IMPORTED_MODULE_0__.ceilToPrecision(range.max, power);
                // Go throught the steps array looking for the smallest step that produces the right interval count.
                const stepsCount = steps.length;
                const stepPower = _double__WEBPACK_IMPORTED_MODULE_0__.pow10(e - 1);
                for (let i = 0; i < stepsCount; i++) {
                    const step = steps[i] * stepPower;
                    const roundRange = _numericSequenceRange__WEBPACK_IMPORTED_MODULE_1__.NumericSequenceRange.calculateFixedRange(roundMin, roundMax, useZeroRefPoint);
                    roundRange.shrinkByStep(range, step);
                    // If the range is based on Data we might need to extend it to provide nice data margins.
                    if (canExtendMin && range.min === roundRange.min && maxAllowedMargin >= 1)
                        roundRange.min -= step;
                    if (canExtendMax && range.max === roundRange.max && maxAllowedMargin >= 1)
                        roundRange.max += step;
                    // Count the intervals
                    count = _double__WEBPACK_IMPORTED_MODULE_0__.ceilWithPrecision(roundRange.getSize() / step, _double__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PRECISION);
                    if (count <= expectedCount || (dexp === 2 && i === stepsCount - 1) || (expectedCount === 1 && count === 2 && (step > range.getSize() || (range.min < 0 && range.max > 0 && step * 2 >= range.getSize())))) {
                        interval = step;
                        min = roundRange.min;
                        max = roundRange.max;
                        break;
                    }
                }
                // Increase the scale power until the interval is found
                if (interval !== 0)
                    break;
            }
        }
        // Avoid extreme count cases (>1000 ticks)
        if (count > expectedCount * 32 || count > NumericSequence.MAX_COUNT) {
            count = Math.min(expectedCount * 32, NumericSequence.MAX_COUNT);
            interval = (max - min) / count;
        }
        result.min = min;
        result.max = max;
        result.interval = interval;
        result.intervalOffset = min - range.min;
        result.maxAllowedMargin = maxAllowedMargin;
        result.canExtendMin = canExtendMin;
        result.canExtendMax = canExtendMax;
        // Fill in the Sequence
        const precision = _double__WEBPACK_IMPORTED_MODULE_0__.getPrecision(interval, 0);
        result.precision = precision;
        const sequence = [];
        let x = _double__WEBPACK_IMPORTED_MODULE_0__.roundToPrecision(min, precision);
        sequence.push(x);
        for (let i = 0; i < count; i++) {
            x = _double__WEBPACK_IMPORTED_MODULE_0__.roundToPrecision(x + interval, precision);
            sequence.push(x);
        }
        result.sequence = sequence;
        result.trimMinMax(range.min, range.max);
        return result;
    }
    /**
     * Calculates the sequence of int numbers which are mapped to the multiples of the units grid.
     * @min - The minimum of the range.
     * @max - The maximum of the range.
     * @maxCount - The max count of intervals.
     * @steps - array of intervals.
     */
    static calculateUnits(min, max, maxCount, steps) {
        // Initialization actions
        maxCount = _double__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(maxCount, NumericSequence.MIN_COUNT, NumericSequence.MAX_COUNT);
        if (min === max) {
            max = min + 1;
        }
        let stepCount = 0;
        let step = 0;
        // Calculate step
        for (let i = 0; i < steps.length; i++) {
            step = steps[i];
            const maxStepCount = _double__WEBPACK_IMPORTED_MODULE_0__.ceilWithPrecision(max / step);
            const minStepCount = _double__WEBPACK_IMPORTED_MODULE_0__.floorWithPrecision(min / step);
            stepCount = maxStepCount - minStepCount;
            if (stepCount <= maxCount) {
                break;
            }
        }
        // Calculate the offset
        let offset = -min;
        offset = offset % step;
        // Create sequence
        const result = new NumericSequence();
        result.sequence = [];
        for (let x = min + offset;; x += step) {
            result.sequence.push(x);
            if (x >= max)
                break;
        }
        result.interval = step;
        result.intervalOffset = offset;
        result.min = result.sequence[0];
        result.max = result.sequence[result.sequence.length - 1];
        return result;
    }
    trimMinMax(min, max) {
        const minMargin = (min - this.min) / this.interval;
        const maxMargin = (this.max - max) / this.interval;
        const marginPrecision = 0.001;
        if (!this.canExtendMin || (minMargin > this.maxAllowedMargin && minMargin > marginPrecision)) {
            this.min = min;
        }
        if (!this.canExtendMax || (maxMargin > this.maxAllowedMargin && maxMargin > marginPrecision)) {
            this.max = max;
        }
    }
}
NumericSequence.MIN_COUNT = 1;
NumericSequence.MAX_COUNT = 1000;
//# sourceMappingURL=numericSequence.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequenceRange.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequenceRange.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NumericSequenceRange": () => (/* binding */ NumericSequenceRange),
/* harmony export */   "hasValue": () => (/* binding */ hasValue)
/* harmony export */ });
/* harmony import */ var _double__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../double */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

class NumericSequenceRange {
    _ensureIncludeZero() {
        if (this.includeZero) {
            // fixed min and max has higher priority than includeZero
            if (this.min > 0 && !this.hasFixedMin) {
                this.min = 0;
            }
            if (this.max < 0 && !this.hasFixedMax) {
                this.max = 0;
            }
        }
    }
    _ensureNotEmpty() {
        if (this.min === this.max) {
            if (!this.min) {
                this.min = 0;
                this.max = NumericSequenceRange.DEFAULT_MAX;
                this.hasFixedMin = true;
                this.hasFixedMax = true;
            }
            else {
                // We are dealing with a single data value (includeZero is not set)
                // In order to fix the range we need to extend it in both directions by half of the interval.
                // Interval is calculated based on the number:
                // 1. Integers below 10,000 are extended by 0.5: so the [2006-2006] empty range is extended to [2005.5-2006.5] range and the ForsedSingleStop=2006
                // 2. Other numbers are extended by half of their power: [700,001-700,001] => [650,001-750,001] and the ForsedSingleStop=null as we want the intervals to be calculated to cover the range.
                const value = this.min;
                const exp = _double__WEBPACK_IMPORTED_MODULE_0__.log10(Math.abs(value));
                let step;
                if (exp >= 0 && exp < 4) {
                    step = 0.5;
                    this.forcedSingleStop = value;
                }
                else {
                    step = _double__WEBPACK_IMPORTED_MODULE_0__.pow10(exp) / 2;
                    this.forcedSingleStop = null;
                }
                this.min = value - step;
                this.max = value + step;
            }
        }
    }
    _ensureDirection() {
        if (this.min > this.max) {
            const temp = this.min;
            this.min = this.max;
            this.max = temp;
        }
    }
    getSize() {
        return this.max - this.min;
    }
    shrinkByStep(range, step) {
        let oldCount = this.min / step;
        let newCount = range.min / step;
        let deltaCount = Math.floor(newCount - oldCount);
        this.min += deltaCount * step;
        oldCount = this.max / step;
        newCount = range.max / step;
        deltaCount = Math.ceil(newCount - oldCount);
        this.max += deltaCount * step;
    }
    static calculate(dataMin, dataMax, fixedMin, fixedMax, includeZero) {
        const result = new NumericSequenceRange();
        result.includeZero = includeZero ? true : false;
        result.hasDataRange = hasValue(dataMin) && hasValue(dataMax);
        result.hasFixedMin = hasValue(fixedMin);
        result.hasFixedMax = hasValue(fixedMax);
        dataMin = _double__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(dataMin, NumericSequenceRange.MIN_SUPPORTED_DOUBLE, NumericSequenceRange.MAX_SUPPORTED_DOUBLE);
        dataMax = _double__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(dataMax, NumericSequenceRange.MIN_SUPPORTED_DOUBLE, NumericSequenceRange.MAX_SUPPORTED_DOUBLE);
        // Calculate the range using the min, max, dataRange
        if (result.hasFixedMin && result.hasFixedMax) {
            result.min = fixedMin;
            result.max = fixedMax;
        }
        else if (result.hasFixedMin) {
            result.min = fixedMin;
            result.max = dataMax > fixedMin ? dataMax : fixedMin;
        }
        else if (result.hasFixedMax) {
            result.min = dataMin < fixedMax ? dataMin : fixedMax;
            result.max = fixedMax;
        }
        else if (result.hasDataRange) {
            result.min = dataMin;
            result.max = dataMax;
        }
        else {
            result.min = 0;
            result.max = 0;
        }
        result._ensureIncludeZero();
        result._ensureNotEmpty();
        result._ensureDirection();
        if (result.min === 0) {
            result.hasFixedMin = true; // If the range starts from zero we should prevent extending the intervals into the negative range
        }
        else if (result.max === 0) {
            result.hasFixedMax = true; // If the range ends at zero we should prevent extending the intervals into the positive range
        }
        return result;
    }
    static calculateDataRange(dataMin, dataMax, includeZero) {
        if (!hasValue(dataMin) || !hasValue(dataMax)) {
            return NumericSequenceRange.calculateFixedRange(0, NumericSequenceRange.DEFAULT_MAX);
        }
        else {
            return NumericSequenceRange.calculate(dataMin, dataMax, null, null, includeZero);
        }
    }
    static calculateFixedRange(fixedMin, fixedMax, includeZero) {
        const result = new NumericSequenceRange();
        result.hasDataRange = false;
        result.includeZero = includeZero;
        result.min = fixedMin;
        result.max = fixedMax;
        result._ensureIncludeZero();
        result._ensureNotEmpty();
        result._ensureDirection();
        result.hasFixedMin = true;
        result.hasFixedMax = true;
        return result;
    }
}
NumericSequenceRange.DEFAULT_MAX = 10;
NumericSequenceRange.MIN_SUPPORTED_DOUBLE = -1E307;
NumericSequenceRange.MAX_SUPPORTED_DOUBLE = 1E307;
/** Note: Exported for testability */
function hasValue(value) {
    return value !== undefined && value !== null;
}
//# sourceMappingURL=numericSequenceRange.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js":
/*!****************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromPoint": () => (/* binding */ fromPoint),
/* harmony export */   "fromPointToPixel": () => (/* binding */ fromPointToPixel),
/* harmony export */   "toPoint": () => (/* binding */ toPoint),
/* harmony export */   "toString": () => (/* binding */ toString)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
const PxPtRatio = 4 / 3;
const PixelString = "px";
/**
 * Appends 'px' to the end of number value for use as pixel string in styles
 */
function toString(px) {
    return px + PixelString;
}
/**
 * Converts point value (pt) to pixels
 * Returns a string for font-size property
 * e.g. fromPoint(8) => '24px'
 */
function fromPoint(pt) {
    return toString(fromPointToPixel(pt));
}
/**
 * Converts point value (pt) to pixels
 * Returns a number for font-size property
 * e.g. fromPoint(8) => 24px
 */
function fromPointToPixel(pt) {
    return (PxPtRatio * pt);
}
/**
 * Converts pixel value (px) to pt
 * e.g. toPoint(24) => 8
 */
function toPoint(px) {
    return px / PxPtRatio;
}
//# sourceMappingURL=pixelConverter.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/prototype.js":
/*!***********************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/prototype.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "inherit": () => (/* binding */ inherit),
/* harmony export */   "inheritSingle": () => (/* binding */ inheritSingle),
/* harmony export */   "overrideArray": () => (/* binding */ overrideArray)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/**
 * Returns a new object with the provided obj as its prototype.
 */
function inherit(obj, extension) {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    function wrapCtor() { }
    wrapCtor.prototype = obj;
    const inherited = new wrapCtor();
    if (extension)
        extension(inherited);
    return inherited;
}
/**
 * Returns a new object with the provided obj as its prototype
 * if, and only if, the prototype has not been previously set
 */
function inheritSingle(obj) {
    const proto = Object.getPrototypeOf(obj);
    if (proto === Object.prototype || proto === Array.prototype)
        obj = inherit(obj);
    return obj;
}
/**
 * Uses the provided callback function to selectively replace contents in the provided array.
 * @return A new array with those values overriden
 * or undefined if no overrides are necessary.
 */
function overrideArray(prototype, override) {
    if (!prototype)
        return;
    let overwritten;
    for (let i = 0, len = prototype.length; i < len; i++) {
        const value = override(prototype[i]);
        if (value) {
            if (!overwritten)
                overwritten = inherit(prototype);
            overwritten[i] = value;
        }
    }
    return overwritten;
}
//# sourceMappingURL=prototype.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/textSizeDefaults.js":
/*!******************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/textSizeDefaults.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextSizeMax": () => (/* binding */ TextSizeMax),
/* harmony export */   "TextSizeMin": () => (/* binding */ TextSizeMin),
/* harmony export */   "getScale": () => (/* binding */ getScale)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
/**
 * Values are in terms of 'pt'
 * Convert to pixels using PixelConverter.fromPoint
 */
/**
 * Stored in terms of 'pt'
 * Convert to pixels using PixelConverter.fromPoint
 */
const TextSizeMin = 8;
/**
 * Stored in terms of 'pt'
 * Convert to pixels using PixelConverter.fromPoint
 */
const TextSizeMax = 40;
const TextSizeRange = TextSizeMax - TextSizeMin;
/**
 * Returns the percentage of this value relative to the TextSizeMax
 * @param textSize - should be given in terms of 'pt'
 */
function getScale(textSize) {
    return (textSize - TextSizeMin) / TextSizeRange;
}
//# sourceMappingURL=textSizeDefaults.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/valueType.js":
/*!***********************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/valueType.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExtendedType": () => (/* binding */ ExtendedType),
/* harmony export */   "FormattingType": () => (/* binding */ FormattingType),
/* harmony export */   "GeographyType": () => (/* binding */ GeographyType),
/* harmony export */   "MiscellaneousType": () => (/* binding */ MiscellaneousType),
/* harmony export */   "PrimitiveType": () => (/* binding */ PrimitiveType),
/* harmony export */   "ScriptType": () => (/* binding */ ScriptType),
/* harmony export */   "TemporalType": () => (/* binding */ TemporalType),
/* harmony export */   "ValueType": () => (/* binding */ ValueType)
/* harmony export */ });
/* harmony import */ var _extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extensions/enumExtensions */ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/enumExtensions.js");
/* harmony import */ var _jsonComparer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonComparer */ "./node_modules/powerbi-visuals-utils-typeutils/lib/jsonComparer.js");
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// powerbi.extensibility.utils.type


/** Describes a data value type, including a primitive type and extended type if any (derived from data category). */
class ValueType {
    /** Do not call the ValueType constructor directly. Use the ValueType.fromXXX methods. */
    constructor(underlyingType, category, enumType, variantTypes) {
        this.underlyingType = underlyingType;
        this.category = category;
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Temporal)) {
            this.temporalType = new TemporalType(underlyingType);
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Geography)) {
            this.geographyType = new GeographyType(underlyingType);
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Miscellaneous)) {
            this.miscType = new MiscellaneousType(underlyingType);
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Formatting)) {
            this.formattingType = new FormattingType(underlyingType);
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Enumeration)) {
            this.enumType = enumType;
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Scripting)) {
            this.scriptingType = new ScriptType(underlyingType);
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Variant)) {
            this.variationTypes = variantTypes;
        }
    }
    /** Creates or retrieves a ValueType object based on the specified ValueTypeDescriptor. */
    static fromDescriptor(descriptor) {
        descriptor = descriptor || {};
        // Simplified primitive types
        if (descriptor.text)
            return ValueType.fromExtendedType(ExtendedType.Text);
        if (descriptor.integer)
            return ValueType.fromExtendedType(ExtendedType.Integer);
        if (descriptor.numeric)
            return ValueType.fromExtendedType(ExtendedType.Double);
        if (descriptor.bool)
            return ValueType.fromExtendedType(ExtendedType.Boolean);
        if (descriptor.dateTime)
            return ValueType.fromExtendedType(ExtendedType.DateTime);
        if (descriptor.duration)
            return ValueType.fromExtendedType(ExtendedType.Duration);
        if (descriptor.binary)
            return ValueType.fromExtendedType(ExtendedType.Binary);
        if (descriptor.none)
            return ValueType.fromExtendedType(ExtendedType.None);
        // Extended types
        if (descriptor.scripting) {
            if (descriptor.scripting.source)
                return ValueType.fromExtendedType(ExtendedType.ScriptSource);
        }
        if (descriptor.enumeration)
            return ValueType.fromEnum(descriptor.enumeration);
        if (descriptor.temporal) {
            if (descriptor.temporal.year)
                return ValueType.fromExtendedType(ExtendedType.Years_Integer);
            if (descriptor.temporal.quarter)
                return ValueType.fromExtendedType(ExtendedType.Quarters_Integer);
            if (descriptor.temporal.month)
                return ValueType.fromExtendedType(ExtendedType.Months_Integer);
            if (descriptor.temporal.day)
                return ValueType.fromExtendedType(ExtendedType.DayOfMonth_Integer);
            if (descriptor.temporal.paddedDateTableDate)
                return ValueType.fromExtendedType(ExtendedType.PaddedDateTableDates);
        }
        if (descriptor.geography) {
            if (descriptor.geography.address)
                return ValueType.fromExtendedType(ExtendedType.Address);
            if (descriptor.geography.city)
                return ValueType.fromExtendedType(ExtendedType.City);
            if (descriptor.geography.continent)
                return ValueType.fromExtendedType(ExtendedType.Continent);
            if (descriptor.geography.country)
                return ValueType.fromExtendedType(ExtendedType.Country);
            if (descriptor.geography.county)
                return ValueType.fromExtendedType(ExtendedType.County);
            if (descriptor.geography.region)
                return ValueType.fromExtendedType(ExtendedType.Region);
            if (descriptor.geography.postalCode)
                return ValueType.fromExtendedType(ExtendedType.PostalCode_Text);
            if (descriptor.geography.stateOrProvince)
                return ValueType.fromExtendedType(ExtendedType.StateOrProvince);
            if (descriptor.geography.place)
                return ValueType.fromExtendedType(ExtendedType.Place);
            if (descriptor.geography.latitude)
                return ValueType.fromExtendedType(ExtendedType.Latitude_Double);
            if (descriptor.geography.longitude)
                return ValueType.fromExtendedType(ExtendedType.Longitude_Double);
        }
        if (descriptor.misc) {
            if (descriptor.misc.image)
                return ValueType.fromExtendedType(ExtendedType.Image);
            if (descriptor.misc.imageUrl)
                return ValueType.fromExtendedType(ExtendedType.ImageUrl);
            if (descriptor.misc.webUrl)
                return ValueType.fromExtendedType(ExtendedType.WebUrl);
            if (descriptor.misc.barcode)
                return ValueType.fromExtendedType(ExtendedType.Barcode_Text);
        }
        if (descriptor.formatting) {
            if (descriptor.formatting.color)
                return ValueType.fromExtendedType(ExtendedType.Color);
            if (descriptor.formatting.formatString)
                return ValueType.fromExtendedType(ExtendedType.FormatString);
            if (descriptor.formatting.alignment)
                return ValueType.fromExtendedType(ExtendedType.Alignment);
            if (descriptor.formatting.labelDisplayUnits)
                return ValueType.fromExtendedType(ExtendedType.LabelDisplayUnits);
            if (descriptor.formatting.fontSize)
                return ValueType.fromExtendedType(ExtendedType.FontSize);
            if (descriptor.formatting.labelDensity)
                return ValueType.fromExtendedType(ExtendedType.LabelDensity);
        }
        if (descriptor.extendedType) {
            return ValueType.fromExtendedType(descriptor.extendedType);
        }
        if (descriptor.operations) {
            if (descriptor.operations.searchEnabled)
                return ValueType.fromExtendedType(ExtendedType.SearchEnabled);
        }
        if (descriptor.variant) {
            const variantTypes = descriptor.variant.map((variantType) => ValueType.fromDescriptor(variantType));
            return ValueType.fromVariant(variantTypes);
        }
        return ValueType.fromExtendedType(ExtendedType.Null);
    }
    /** Advanced: Generally use fromDescriptor instead. Creates or retrieves a ValueType object for the specified ExtendedType. */
    static fromExtendedType(extendedType) {
        extendedType = extendedType || ExtendedType.Null;
        const primitiveType = getPrimitiveType(extendedType), category = getCategoryFromExtendedType(extendedType);
        return ValueType.fromPrimitiveTypeAndCategory(primitiveType, category);
    }
    /** Creates or retrieves a ValueType object for the specified PrimitiveType and data category. */
    static fromPrimitiveTypeAndCategory(primitiveType, category) {
        primitiveType = primitiveType || PrimitiveType.Null;
        category = category || null;
        let id = primitiveType.toString();
        if (category)
            id += "|" + category;
        return ValueType.typeCache[id] || (ValueType.typeCache[id] = new ValueType(toExtendedType(primitiveType, category), category));
    }
    /** Creates a ValueType to describe the given IEnumType. */
    static fromEnum(enumType) {
        return new ValueType(ExtendedType.Enumeration, null, enumType);
    }
    /** Creates a ValueType to describe the given Variant type. */
    static fromVariant(variantTypes) {
        return new ValueType(ExtendedType.Variant, /* category */ null, /* enumType */ null, variantTypes);
    }
    /** Determines if the specified type is compatible from at least one of the otherTypes. */
    static isCompatibleTo(typeDescriptor, otherTypes) {
        const valueType = ValueType.fromDescriptor(typeDescriptor);
        for (const otherType of otherTypes) {
            const otherValueType = ValueType.fromDescriptor(otherType);
            if (otherValueType.isCompatibleFrom(valueType))
                return true;
        }
        return false;
    }
    /** Determines if the instance ValueType is convertable from the 'other' ValueType. */
    isCompatibleFrom(other) {
        const otherPrimitiveType = other.primitiveType;
        if (this === other ||
            this.primitiveType === otherPrimitiveType ||
            otherPrimitiveType === PrimitiveType.Null ||
            // Return true if both types are numbers
            (this.numeric && other.numeric))
            return true;
        return false;
    }
    /**
     * Determines if the instance ValueType is equal to the 'other' ValueType
     * @param {ValueType} other the other ValueType to check equality against
     * @returns True if the instance ValueType is equal to the 'other' ValueType
     */
    equals(other) {
        return (0,_jsonComparer__WEBPACK_IMPORTED_MODULE_1__.equals)(this, other);
    }
    /** Gets the exact primitive type of this ValueType. */
    get primitiveType() {
        return getPrimitiveType(this.underlyingType);
    }
    /** Gets the exact extended type of this ValueType. */
    get extendedType() {
        return this.underlyingType;
    }
    /** Gets the data category string (if any) for this ValueType. */
    get categoryString() {
        return this.category;
    }
    // Simplified primitive types
    /** Indicates whether the type represents text values. */
    get text() {
        return this.primitiveType === PrimitiveType.Text;
    }
    /** Indicates whether the type represents any numeric value. */
    get numeric() {
        return _extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(this.underlyingType, ExtendedType.Numeric);
    }
    /** Indicates whether the type represents integer numeric values. */
    get integer() {
        return this.primitiveType === PrimitiveType.Integer;
    }
    /** Indicates whether the type represents Boolean values. */
    get bool() {
        return this.primitiveType === PrimitiveType.Boolean;
    }
    /** Indicates whether the type represents any date/time values. */
    get dateTime() {
        return this.primitiveType === PrimitiveType.DateTime ||
            this.primitiveType === PrimitiveType.Date ||
            this.primitiveType === PrimitiveType.Time;
    }
    /** Indicates whether the type represents duration values. */
    get duration() {
        return this.primitiveType === PrimitiveType.Duration;
    }
    /** Indicates whether the type represents binary values. */
    get binary() {
        return this.primitiveType === PrimitiveType.Binary;
    }
    /** Indicates whether the type represents none values. */
    get none() {
        return this.primitiveType === PrimitiveType.None;
    }
    // Extended types
    /** Returns an object describing temporal values represented by the type, if it represents a temporal type. */
    get temporal() {
        return this.temporalType;
    }
    /** Returns an object describing geographic values represented by the type, if it represents a geographic type. */
    get geography() {
        return this.geographyType;
    }
    /** Returns an object describing the specific values represented by the type, if it represents a miscellaneous extended type. */
    get misc() {
        return this.miscType;
    }
    /** Returns an object describing the formatting values represented by the type, if it represents a formatting type. */
    get formatting() {
        return this.formattingType;
    }
    /** Returns an object describing the enum values represented by the type, if it represents an enumeration type. */
    get enumeration() {
        return this.enumType;
    }
    get scripting() {
        return this.scriptingType;
    }
    /** Returns an array describing the variant values represented by the type, if it represents an Variant type. */
    get variant() {
        return this.variationTypes;
    }
}
ValueType.typeCache = {};
class ScriptType {
    constructor(underlyingType) {
        this.underlyingType = underlyingType;
    }
    get source() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ScriptSource);
    }
}
class TemporalType {
    constructor(underlyingType) {
        this.underlyingType = underlyingType;
    }
    get year() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Years);
    }
    get quarter() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Quarters);
    }
    get month() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Months);
    }
    get day() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.DayOfMonth);
    }
    get paddedDateTableDate() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.PaddedDateTableDates);
    }
}
class GeographyType {
    constructor(underlyingType) {
        this.underlyingType = underlyingType;
    }
    get address() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Address);
    }
    get city() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.City);
    }
    get continent() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Continent);
    }
    get country() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Country);
    }
    get county() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.County);
    }
    get region() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Region);
    }
    get postalCode() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.PostalCode);
    }
    get stateOrProvince() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.StateOrProvince);
    }
    get place() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Place);
    }
    get latitude() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Latitude);
    }
    get longitude() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Longitude);
    }
}
class MiscellaneousType {
    constructor(underlyingType) {
        this.underlyingType = underlyingType;
    }
    get image() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Image);
    }
    get imageUrl() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ImageUrl);
    }
    get webUrl() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.WebUrl);
    }
    get barcode() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Barcode);
    }
}
class FormattingType {
    constructor(underlyingType) {
        this.underlyingType = underlyingType;
    }
    get color() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Color);
    }
    get formatString() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FormatString);
    }
    get alignment() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Alignment);
    }
    get labelDisplayUnits() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDisplayUnits);
    }
    get fontSize() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FontSize);
    }
    get labelDensity() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDensity);
    }
}
/** Defines primitive value types. Must be consistent with types defined by server conceptual schema. */
var PrimitiveType;
(function (PrimitiveType) {
    PrimitiveType[PrimitiveType["Null"] = 0] = "Null";
    PrimitiveType[PrimitiveType["Text"] = 1] = "Text";
    PrimitiveType[PrimitiveType["Decimal"] = 2] = "Decimal";
    PrimitiveType[PrimitiveType["Double"] = 3] = "Double";
    PrimitiveType[PrimitiveType["Integer"] = 4] = "Integer";
    PrimitiveType[PrimitiveType["Boolean"] = 5] = "Boolean";
    PrimitiveType[PrimitiveType["Date"] = 6] = "Date";
    PrimitiveType[PrimitiveType["DateTime"] = 7] = "DateTime";
    PrimitiveType[PrimitiveType["DateTimeZone"] = 8] = "DateTimeZone";
    PrimitiveType[PrimitiveType["Time"] = 9] = "Time";
    PrimitiveType[PrimitiveType["Duration"] = 10] = "Duration";
    PrimitiveType[PrimitiveType["Binary"] = 11] = "Binary";
    PrimitiveType[PrimitiveType["None"] = 12] = "None";
    PrimitiveType[PrimitiveType["Variant"] = 13] = "Variant";
})(PrimitiveType || (PrimitiveType = {}));
var PrimitiveTypeStrings;
(function (PrimitiveTypeStrings) {
    PrimitiveTypeStrings[PrimitiveTypeStrings["Null"] = 0] = "Null";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Text"] = 1] = "Text";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Decimal"] = 2] = "Decimal";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Double"] = 3] = "Double";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Integer"] = 4] = "Integer";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Boolean"] = 5] = "Boolean";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Date"] = 6] = "Date";
    PrimitiveTypeStrings[PrimitiveTypeStrings["DateTime"] = 7] = "DateTime";
    PrimitiveTypeStrings[PrimitiveTypeStrings["DateTimeZone"] = 8] = "DateTimeZone";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Time"] = 9] = "Time";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Duration"] = 10] = "Duration";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Binary"] = 11] = "Binary";
    PrimitiveTypeStrings[PrimitiveTypeStrings["None"] = 12] = "None";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Variant"] = 13] = "Variant";
})(PrimitiveTypeStrings || (PrimitiveTypeStrings = {}));
/** Defines extended value types, which include primitive types and known data categories constrained to expected primitive types. */
var ExtendedType;
(function (ExtendedType) {
    // Flags (1 << 8-15 range [0xFF00])
    // Important: Enum members must be declared before they are used in TypeScript.
    ExtendedType[ExtendedType["Numeric"] = 256] = "Numeric";
    ExtendedType[ExtendedType["Temporal"] = 512] = "Temporal";
    ExtendedType[ExtendedType["Geography"] = 1024] = "Geography";
    ExtendedType[ExtendedType["Miscellaneous"] = 2048] = "Miscellaneous";
    ExtendedType[ExtendedType["Formatting"] = 4096] = "Formatting";
    ExtendedType[ExtendedType["Scripting"] = 8192] = "Scripting";
    // Primitive types (0-255 range [0xFF] | flags)
    // The member names and base values must match those in PrimitiveType.
    ExtendedType[ExtendedType["Null"] = 0] = "Null";
    ExtendedType[ExtendedType["Text"] = 1] = "Text";
    ExtendedType[ExtendedType["Decimal"] = 258] = "Decimal";
    ExtendedType[ExtendedType["Double"] = 259] = "Double";
    ExtendedType[ExtendedType["Integer"] = 260] = "Integer";
    ExtendedType[ExtendedType["Boolean"] = 5] = "Boolean";
    ExtendedType[ExtendedType["Date"] = 518] = "Date";
    ExtendedType[ExtendedType["DateTime"] = 519] = "DateTime";
    ExtendedType[ExtendedType["DateTimeZone"] = 520] = "DateTimeZone";
    ExtendedType[ExtendedType["Time"] = 521] = "Time";
    ExtendedType[ExtendedType["Duration"] = 10] = "Duration";
    ExtendedType[ExtendedType["Binary"] = 11] = "Binary";
    ExtendedType[ExtendedType["None"] = 12] = "None";
    ExtendedType[ExtendedType["Variant"] = 13] = "Variant";
    // Extended types (0-32767 << 16 range [0xFFFF0000] | corresponding primitive type | flags)
    // Temporal
    ExtendedType[ExtendedType["Years"] = 66048] = "Years";
    ExtendedType[ExtendedType["Years_Text"] = 66049] = "Years_Text";
    ExtendedType[ExtendedType["Years_Integer"] = 66308] = "Years_Integer";
    ExtendedType[ExtendedType["Years_Date"] = 66054] = "Years_Date";
    ExtendedType[ExtendedType["Years_DateTime"] = 66055] = "Years_DateTime";
    ExtendedType[ExtendedType["Months"] = 131584] = "Months";
    ExtendedType[ExtendedType["Months_Text"] = 131585] = "Months_Text";
    ExtendedType[ExtendedType["Months_Integer"] = 131844] = "Months_Integer";
    ExtendedType[ExtendedType["Months_Date"] = 131590] = "Months_Date";
    ExtendedType[ExtendedType["Months_DateTime"] = 131591] = "Months_DateTime";
    ExtendedType[ExtendedType["PaddedDateTableDates"] = 197127] = "PaddedDateTableDates";
    ExtendedType[ExtendedType["Quarters"] = 262656] = "Quarters";
    ExtendedType[ExtendedType["Quarters_Text"] = 262657] = "Quarters_Text";
    ExtendedType[ExtendedType["Quarters_Integer"] = 262916] = "Quarters_Integer";
    ExtendedType[ExtendedType["Quarters_Date"] = 262662] = "Quarters_Date";
    ExtendedType[ExtendedType["Quarters_DateTime"] = 262663] = "Quarters_DateTime";
    ExtendedType[ExtendedType["DayOfMonth"] = 328192] = "DayOfMonth";
    ExtendedType[ExtendedType["DayOfMonth_Text"] = 328193] = "DayOfMonth_Text";
    ExtendedType[ExtendedType["DayOfMonth_Integer"] = 328452] = "DayOfMonth_Integer";
    ExtendedType[ExtendedType["DayOfMonth_Date"] = 328198] = "DayOfMonth_Date";
    ExtendedType[ExtendedType["DayOfMonth_DateTime"] = 328199] = "DayOfMonth_DateTime";
    // Geography
    ExtendedType[ExtendedType["Address"] = 6554625] = "Address";
    ExtendedType[ExtendedType["City"] = 6620161] = "City";
    ExtendedType[ExtendedType["Continent"] = 6685697] = "Continent";
    ExtendedType[ExtendedType["Country"] = 6751233] = "Country";
    ExtendedType[ExtendedType["County"] = 6816769] = "County";
    ExtendedType[ExtendedType["Region"] = 6882305] = "Region";
    ExtendedType[ExtendedType["PostalCode"] = 6947840] = "PostalCode";
    ExtendedType[ExtendedType["PostalCode_Text"] = 6947841] = "PostalCode_Text";
    ExtendedType[ExtendedType["PostalCode_Integer"] = 6948100] = "PostalCode_Integer";
    ExtendedType[ExtendedType["StateOrProvince"] = 7013377] = "StateOrProvince";
    ExtendedType[ExtendedType["Place"] = 7078913] = "Place";
    ExtendedType[ExtendedType["Latitude"] = 7144448] = "Latitude";
    ExtendedType[ExtendedType["Latitude_Decimal"] = 7144706] = "Latitude_Decimal";
    ExtendedType[ExtendedType["Latitude_Double"] = 7144707] = "Latitude_Double";
    ExtendedType[ExtendedType["Longitude"] = 7209984] = "Longitude";
    ExtendedType[ExtendedType["Longitude_Decimal"] = 7210242] = "Longitude_Decimal";
    ExtendedType[ExtendedType["Longitude_Double"] = 7210243] = "Longitude_Double";
    // Miscellaneous
    ExtendedType[ExtendedType["Image"] = 13109259] = "Image";
    ExtendedType[ExtendedType["ImageUrl"] = 13174785] = "ImageUrl";
    ExtendedType[ExtendedType["WebUrl"] = 13240321] = "WebUrl";
    ExtendedType[ExtendedType["Barcode"] = 13305856] = "Barcode";
    ExtendedType[ExtendedType["Barcode_Text"] = 13305857] = "Barcode_Text";
    ExtendedType[ExtendedType["Barcode_Integer"] = 13306116] = "Barcode_Integer";
    // Formatting
    ExtendedType[ExtendedType["Color"] = 19664897] = "Color";
    ExtendedType[ExtendedType["FormatString"] = 19730433] = "FormatString";
    ExtendedType[ExtendedType["Alignment"] = 20058113] = "Alignment";
    ExtendedType[ExtendedType["LabelDisplayUnits"] = 20123649] = "LabelDisplayUnits";
    ExtendedType[ExtendedType["FontSize"] = 20189443] = "FontSize";
    ExtendedType[ExtendedType["LabelDensity"] = 20254979] = "LabelDensity";
    // Enumeration
    ExtendedType[ExtendedType["Enumeration"] = 26214401] = "Enumeration";
    // Scripting
    ExtendedType[ExtendedType["ScriptSource"] = 32776193] = "ScriptSource";
    // NOTE: To avoid confusion, underscores should be used only to delimit primitive type variants of an extended type
    // (e.g. Year_Integer or Latitude_Double above)
    // Operations
    ExtendedType[ExtendedType["SearchEnabled"] = 65541] = "SearchEnabled";
})(ExtendedType || (ExtendedType = {}));
var ExtendedTypeStrings;
(function (ExtendedTypeStrings) {
    ExtendedTypeStrings[ExtendedTypeStrings["Numeric"] = 256] = "Numeric";
    ExtendedTypeStrings[ExtendedTypeStrings["Temporal"] = 512] = "Temporal";
    ExtendedTypeStrings[ExtendedTypeStrings["Geography"] = 1024] = "Geography";
    ExtendedTypeStrings[ExtendedTypeStrings["Miscellaneous"] = 2048] = "Miscellaneous";
    ExtendedTypeStrings[ExtendedTypeStrings["Formatting"] = 4096] = "Formatting";
    ExtendedTypeStrings[ExtendedTypeStrings["Scripting"] = 8192] = "Scripting";
    ExtendedTypeStrings[ExtendedTypeStrings["Null"] = 0] = "Null";
    ExtendedTypeStrings[ExtendedTypeStrings["Text"] = 1] = "Text";
    ExtendedTypeStrings[ExtendedTypeStrings["Decimal"] = 258] = "Decimal";
    ExtendedTypeStrings[ExtendedTypeStrings["Double"] = 259] = "Double";
    ExtendedTypeStrings[ExtendedTypeStrings["Integer"] = 260] = "Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["Boolean"] = 5] = "Boolean";
    ExtendedTypeStrings[ExtendedTypeStrings["Date"] = 518] = "Date";
    ExtendedTypeStrings[ExtendedTypeStrings["DateTime"] = 519] = "DateTime";
    ExtendedTypeStrings[ExtendedTypeStrings["DateTimeZone"] = 520] = "DateTimeZone";
    ExtendedTypeStrings[ExtendedTypeStrings["Time"] = 521] = "Time";
    ExtendedTypeStrings[ExtendedTypeStrings["Duration"] = 10] = "Duration";
    ExtendedTypeStrings[ExtendedTypeStrings["Binary"] = 11] = "Binary";
    ExtendedTypeStrings[ExtendedTypeStrings["None"] = 12] = "None";
    ExtendedTypeStrings[ExtendedTypeStrings["Variant"] = 13] = "Variant";
    ExtendedTypeStrings[ExtendedTypeStrings["Years"] = 66048] = "Years";
    ExtendedTypeStrings[ExtendedTypeStrings["Years_Text"] = 66049] = "Years_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["Years_Integer"] = 66308] = "Years_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["Years_Date"] = 66054] = "Years_Date";
    ExtendedTypeStrings[ExtendedTypeStrings["Years_DateTime"] = 66055] = "Years_DateTime";
    ExtendedTypeStrings[ExtendedTypeStrings["Months"] = 131584] = "Months";
    ExtendedTypeStrings[ExtendedTypeStrings["Months_Text"] = 131585] = "Months_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["Months_Integer"] = 131844] = "Months_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["Months_Date"] = 131590] = "Months_Date";
    ExtendedTypeStrings[ExtendedTypeStrings["Months_DateTime"] = 131591] = "Months_DateTime";
    ExtendedTypeStrings[ExtendedTypeStrings["PaddedDateTableDates"] = 197127] = "PaddedDateTableDates";
    ExtendedTypeStrings[ExtendedTypeStrings["Quarters"] = 262656] = "Quarters";
    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_Text"] = 262657] = "Quarters_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_Integer"] = 262916] = "Quarters_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_Date"] = 262662] = "Quarters_Date";
    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_DateTime"] = 262663] = "Quarters_DateTime";
    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth"] = 328192] = "DayOfMonth";
    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_Text"] = 328193] = "DayOfMonth_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_Integer"] = 328452] = "DayOfMonth_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_Date"] = 328198] = "DayOfMonth_Date";
    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_DateTime"] = 328199] = "DayOfMonth_DateTime";
    ExtendedTypeStrings[ExtendedTypeStrings["Address"] = 6554625] = "Address";
    ExtendedTypeStrings[ExtendedTypeStrings["City"] = 6620161] = "City";
    ExtendedTypeStrings[ExtendedTypeStrings["Continent"] = 6685697] = "Continent";
    ExtendedTypeStrings[ExtendedTypeStrings["Country"] = 6751233] = "Country";
    ExtendedTypeStrings[ExtendedTypeStrings["County"] = 6816769] = "County";
    ExtendedTypeStrings[ExtendedTypeStrings["Region"] = 6882305] = "Region";
    ExtendedTypeStrings[ExtendedTypeStrings["PostalCode"] = 6947840] = "PostalCode";
    ExtendedTypeStrings[ExtendedTypeStrings["PostalCode_Text"] = 6947841] = "PostalCode_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["PostalCode_Integer"] = 6948100] = "PostalCode_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["StateOrProvince"] = 7013377] = "StateOrProvince";
    ExtendedTypeStrings[ExtendedTypeStrings["Place"] = 7078913] = "Place";
    ExtendedTypeStrings[ExtendedTypeStrings["Latitude"] = 7144448] = "Latitude";
    ExtendedTypeStrings[ExtendedTypeStrings["Latitude_Decimal"] = 7144706] = "Latitude_Decimal";
    ExtendedTypeStrings[ExtendedTypeStrings["Latitude_Double"] = 7144707] = "Latitude_Double";
    ExtendedTypeStrings[ExtendedTypeStrings["Longitude"] = 7209984] = "Longitude";
    ExtendedTypeStrings[ExtendedTypeStrings["Longitude_Decimal"] = 7210242] = "Longitude_Decimal";
    ExtendedTypeStrings[ExtendedTypeStrings["Longitude_Double"] = 7210243] = "Longitude_Double";
    ExtendedTypeStrings[ExtendedTypeStrings["Image"] = 13109259] = "Image";
    ExtendedTypeStrings[ExtendedTypeStrings["ImageUrl"] = 13174785] = "ImageUrl";
    ExtendedTypeStrings[ExtendedTypeStrings["WebUrl"] = 13240321] = "WebUrl";
    ExtendedTypeStrings[ExtendedTypeStrings["Barcode"] = 13305856] = "Barcode";
    ExtendedTypeStrings[ExtendedTypeStrings["Barcode_Text"] = 13305857] = "Barcode_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["Barcode_Integer"] = 13306116] = "Barcode_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["Color"] = 19664897] = "Color";
    ExtendedTypeStrings[ExtendedTypeStrings["FormatString"] = 19730433] = "FormatString";
    ExtendedTypeStrings[ExtendedTypeStrings["Alignment"] = 20058113] = "Alignment";
    ExtendedTypeStrings[ExtendedTypeStrings["LabelDisplayUnits"] = 20123649] = "LabelDisplayUnits";
    ExtendedTypeStrings[ExtendedTypeStrings["FontSize"] = 20189443] = "FontSize";
    ExtendedTypeStrings[ExtendedTypeStrings["LabelDensity"] = 20254979] = "LabelDensity";
    ExtendedTypeStrings[ExtendedTypeStrings["Enumeration"] = 26214401] = "Enumeration";
    ExtendedTypeStrings[ExtendedTypeStrings["ScriptSource"] = 32776193] = "ScriptSource";
    ExtendedTypeStrings[ExtendedTypeStrings["SearchEnabled"] = 65541] = "SearchEnabled";
})(ExtendedTypeStrings || (ExtendedTypeStrings = {}));
const PrimitiveTypeMask = 0xFF;
const PrimitiveTypeWithFlagsMask = 0xFFFF;
const PrimitiveTypeFlagsExcludedMask = 0xFFFF0000;
function getPrimitiveType(extendedType) {
    return extendedType & PrimitiveTypeMask;
}
function isPrimitiveType(extendedType) {
    return (extendedType & PrimitiveTypeWithFlagsMask) === extendedType;
}
function getCategoryFromExtendedType(extendedType) {
    if (isPrimitiveType(extendedType))
        return null;
    let category = ExtendedTypeStrings[extendedType];
    if (category) {
        // Check for ExtendedType declaration without a primitive type.
        // If exists, use it as category (e.g. Longitude rather than Longitude_Double)
        // Otherwise use the ExtendedType declaration with a primitive type (e.g. Address)
        const delimIdx = category.lastIndexOf("_");
        if (delimIdx > 0) {
            const baseCategory = category.slice(0, delimIdx);
            if (ExtendedTypeStrings[baseCategory]) {
                category = baseCategory;
            }
        }
    }
    return category || null;
}
function toExtendedType(primitiveType, category) {
    const primitiveString = PrimitiveTypeStrings[primitiveType];
    let t = ExtendedTypeStrings[primitiveString];
    if (t == null) {
        t = ExtendedType.Null;
    }
    if (primitiveType && category) {
        let categoryType = ExtendedTypeStrings[category];
        if (categoryType) {
            const categoryPrimitiveType = getPrimitiveType(categoryType);
            if (categoryPrimitiveType === PrimitiveType.Null) {
                // Category supports multiple primitive types, check if requested primitive type is supported
                // (note: important to use t here rather than primitiveType as it may include primitive type flags)
                categoryType = t | categoryType;
                if (ExtendedTypeStrings[categoryType]) {
                    t = categoryType;
                }
            }
            else if (categoryPrimitiveType === primitiveType) {
                // Primitive type matches the single supported type for the category
                t = categoryType;
            }
        }
    }
    return t;
}
function matchesExtendedTypeWithAnyPrimitive(a, b) {
    return (a & PrimitiveTypeFlagsExcludedMask) === (b & PrimitiveTypeFlagsExcludedMask);
}
//# sourceMappingURL=valueType.js.map

/***/ }),

/***/ "fakeDefine":
/*!************************!*\
  !*** external "false" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = false;

/***/ }),

/***/ "./node_modules/d3-array/src/ascending.js":
/*!************************************************!*\
  !*** ./node_modules/d3-array/src/ascending.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ascending)
/* harmony export */ });
function ascending(a, b) {
  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}


/***/ }),

/***/ "./node_modules/d3-array/src/bisect.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-array/src/bisect.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bisectCenter": () => (/* binding */ bisectCenter),
/* harmony export */   "bisectLeft": () => (/* binding */ bisectLeft),
/* harmony export */   "bisectRight": () => (/* binding */ bisectRight),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ascending_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ascending.js */ "./node_modules/d3-array/src/ascending.js");
/* harmony import */ var _bisector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bisector.js */ "./node_modules/d3-array/src/bisector.js");
/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./number.js */ "./node_modules/d3-array/src/number.js");




const ascendingBisect = (0,_bisector_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_ascending_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
const bisectRight = ascendingBisect.right;
const bisectLeft = ascendingBisect.left;
const bisectCenter = (0,_bisector_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_number_js__WEBPACK_IMPORTED_MODULE_2__["default"]).center;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (bisectRight);


/***/ }),

/***/ "./node_modules/d3-array/src/bisector.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-array/src/bisector.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ bisector)
/* harmony export */ });
/* harmony import */ var _ascending_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ascending.js */ "./node_modules/d3-array/src/ascending.js");
/* harmony import */ var _descending_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./descending.js */ "./node_modules/d3-array/src/descending.js");



function bisector(f) {
  let compare1, compare2, delta;

  // If an accessor is specified, promote it to a comparator. In this case we
  // can test whether the search value is (self-) comparable. We can’t do this
  // for a comparator (except for specific, known comparators) because we can’t
  // tell if the comparator is symmetric, and an asymmetric comparator can’t be
  // used to test whether a single value is comparable.
  if (f.length !== 2) {
    compare1 = _ascending_js__WEBPACK_IMPORTED_MODULE_0__["default"];
    compare2 = (d, x) => (0,_ascending_js__WEBPACK_IMPORTED_MODULE_0__["default"])(f(d), x);
    delta = (d, x) => f(d) - x;
  } else {
    compare1 = f === _ascending_js__WEBPACK_IMPORTED_MODULE_0__["default"] || f === _descending_js__WEBPACK_IMPORTED_MODULE_1__["default"] ? f : zero;
    compare2 = f;
    delta = f;
  }

  function left(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = (lo + hi) >>> 1;
        if (compare2(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }

  function right(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = (lo + hi) >>> 1;
        if (compare2(a[mid], x) <= 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }

  function center(a, x, lo = 0, hi = a.length) {
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }

  return {left, center, right};
}

function zero() {
  return 0;
}


/***/ }),

/***/ "./node_modules/d3-array/src/descending.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-array/src/descending.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ descending)
/* harmony export */ });
function descending(a, b) {
  return a == null || b == null ? NaN
    : b < a ? -1
    : b > a ? 1
    : b >= a ? 0
    : NaN;
}


/***/ }),

/***/ "./node_modules/d3-array/src/max.js":
/*!******************************************!*\
  !*** ./node_modules/d3-array/src/max.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ max)
/* harmony export */ });
function max(values, valueof) {
  let max;
  if (valueof === undefined) {
    for (const value of values) {
      if (value != null
          && (max < value || (max === undefined && value >= value))) {
        max = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null
          && (max < value || (max === undefined && value >= value))) {
        max = value;
      }
    }
  }
  return max;
}


/***/ }),

/***/ "./node_modules/d3-array/src/min.js":
/*!******************************************!*\
  !*** ./node_modules/d3-array/src/min.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ min)
/* harmony export */ });
function min(values, valueof) {
  let min;
  if (valueof === undefined) {
    for (const value of values) {
      if (value != null
          && (min > value || (min === undefined && value >= value))) {
        min = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null
          && (min > value || (min === undefined && value >= value))) {
        min = value;
      }
    }
  }
  return min;
}


/***/ }),

/***/ "./node_modules/d3-array/src/number.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-array/src/number.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ number),
/* harmony export */   "numbers": () => (/* binding */ numbers)
/* harmony export */ });
function number(x) {
  return x === null ? NaN : +x;
}

function* numbers(values, valueof) {
  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        yield value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        yield value;
      }
    }
  }
}


/***/ }),

/***/ "./node_modules/d3-array/src/range.js":
/*!********************************************!*\
  !*** ./node_modules/d3-array/src/range.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ range)
/* harmony export */ });
function range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}


/***/ }),

/***/ "./node_modules/d3-array/src/ticks.js":
/*!********************************************!*\
  !*** ./node_modules/d3-array/src/ticks.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ticks),
/* harmony export */   "tickIncrement": () => (/* binding */ tickIncrement),
/* harmony export */   "tickStep": () => (/* binding */ tickStep)
/* harmony export */ });
const e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function tickSpec(start, stop, count) {
  const step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log10(step)),
      error = step / Math.pow(10, power),
      factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
  let i1, i2, inc;
  if (power < 0) {
    inc = Math.pow(10, -power) / factor;
    i1 = Math.round(start * inc);
    i2 = Math.round(stop * inc);
    if (i1 / inc < start) ++i1;
    if (i2 / inc > stop) --i2;
    inc = -inc;
  } else {
    inc = Math.pow(10, power) * factor;
    i1 = Math.round(start / inc);
    i2 = Math.round(stop / inc);
    if (i1 * inc < start) ++i1;
    if (i2 * inc > stop) --i2;
  }
  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);
  return [i1, i2, inc];
}

function ticks(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  if (!(count > 0)) return [];
  if (start === stop) return [start];
  const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);
  if (!(i2 >= i1)) return [];
  const n = i2 - i1 + 1, ticks = new Array(n);
  if (reverse) {
    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) / -inc;
    else for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) * inc;
  } else {
    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) / -inc;
    else for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) * inc;
  }
  return ticks;
}

function tickIncrement(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  return tickSpec(start, stop, count)[2];
}

function tickStep(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);
  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}


/***/ }),

/***/ "./node_modules/d3-axis/src/axis.js":
/*!******************************************!*\
  !*** ./node_modules/d3-axis/src/axis.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "axisBottom": () => (/* binding */ axisBottom),
/* harmony export */   "axisLeft": () => (/* binding */ axisLeft),
/* harmony export */   "axisRight": () => (/* binding */ axisRight),
/* harmony export */   "axisTop": () => (/* binding */ axisTop)
/* harmony export */ });
/* harmony import */ var _identity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./identity.js */ "./node_modules/d3-axis/src/identity.js");


var top = 1,
    right = 2,
    bottom = 3,
    left = 4,
    epsilon = 1e-6;

function translateX(x) {
  return "translate(" + x + ",0)";
}

function translateY(y) {
  return "translate(0," + y + ")";
}

function number(scale) {
  return d => +scale(d);
}

function center(scale, offset) {
  offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;
  if (scale.round()) offset = Math.round(offset);
  return d => +scale(d) + offset;
}

function entering() {
  return !this.__axis;
}

function axis(orient, scale) {
  var tickArguments = [],
      tickValues = null,
      tickFormat = null,
      tickSizeInner = 6,
      tickSizeOuter = 6,
      tickPadding = 3,
      offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5,
      k = orient === top || orient === left ? -1 : 1,
      x = orient === left || orient === right ? "x" : "y",
      transform = orient === top || orient === bottom ? translateX : translateY;

  function axis(context) {
    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : _identity_js__WEBPACK_IMPORTED_MODULE_0__["default"]) : tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,
        range = scale.range(),
        range0 = +range[0] + offset,
        range1 = +range[range.length - 1] + offset,
        position = (scale.bandwidth ? center : number)(scale.copy(), offset),
        selection = context.selection ? context.selection() : context,
        path = selection.selectAll(".domain").data([null]),
        tick = selection.selectAll(".tick").data(values, scale).order(),
        tickExit = tick.exit(),
        tickEnter = tick.enter().append("g").attr("class", "tick"),
        line = tick.select("line"),
        text = tick.select("text");

    path = path.merge(path.enter().insert("path", ".tick")
        .attr("class", "domain")
        .attr("stroke", "currentColor"));

    tick = tick.merge(tickEnter);

    line = line.merge(tickEnter.append("line")
        .attr("stroke", "currentColor")
        .attr(x + "2", k * tickSizeInner));

    text = text.merge(tickEnter.append("text")
        .attr("fill", "currentColor")
        .attr(x, k * spacing)
        .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

    if (context !== selection) {
      path = path.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);

      tickExit = tickExit.transition(context)
          .attr("opacity", epsilon)
          .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d + offset) : this.getAttribute("transform"); });

      tickEnter
          .attr("opacity", epsilon)
          .attr("transform", function(d) { var p = this.parentNode.__axis; return transform((p && isFinite(p = p(d)) ? p : position(d)) + offset); });
    }

    tickExit.remove();

    path
        .attr("d", orient === left || orient === right
            ? (tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1)
            : (tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1));

    tick
        .attr("opacity", 1)
        .attr("transform", function(d) { return transform(position(d) + offset); });

    line
        .attr(x + "2", k * tickSizeInner);

    text
        .attr(x, k * spacing)
        .text(format);

    selection.filter(entering)
        .attr("fill", "none")
        .attr("font-size", 10)
        .attr("font-family", "sans-serif")
        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

    selection
        .each(function() { this.__axis = position; });
  }

  axis.scale = function(_) {
    return arguments.length ? (scale = _, axis) : scale;
  };

  axis.ticks = function() {
    return tickArguments = Array.from(arguments), axis;
  };

  axis.tickArguments = function(_) {
    return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis) : tickArguments.slice();
  };

  axis.tickValues = function(_) {
    return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis) : tickValues && tickValues.slice();
  };

  axis.tickFormat = function(_) {
    return arguments.length ? (tickFormat = _, axis) : tickFormat;
  };

  axis.tickSize = function(_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
  };

  axis.tickSizeInner = function(_) {
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
  };

  axis.tickSizeOuter = function(_) {
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
  };

  axis.tickPadding = function(_) {
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
  };

  axis.offset = function(_) {
    return arguments.length ? (offset = +_, axis) : offset;
  };

  return axis;
}

function axisTop(scale) {
  return axis(top, scale);
}

function axisRight(scale) {
  return axis(right, scale);
}

function axisBottom(scale) {
  return axis(bottom, scale);
}

function axisLeft(scale) {
  return axis(left, scale);
}


/***/ }),

/***/ "./node_modules/d3-axis/src/identity.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-axis/src/identity.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return x;
}


/***/ }),

/***/ "./node_modules/d3-color/src/color.js":
/*!********************************************!*\
  !*** ./node_modules/d3-color/src/color.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Color": () => (/* binding */ Color),
/* harmony export */   "Rgb": () => (/* binding */ Rgb),
/* harmony export */   "brighter": () => (/* binding */ brighter),
/* harmony export */   "darker": () => (/* binding */ darker),
/* harmony export */   "default": () => (/* binding */ color),
/* harmony export */   "hsl": () => (/* binding */ hsl),
/* harmony export */   "hslConvert": () => (/* binding */ hslConvert),
/* harmony export */   "rgb": () => (/* binding */ rgb),
/* harmony export */   "rgbConvert": () => (/* binding */ rgbConvert)
/* harmony export */ });
/* harmony import */ var _define_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./define.js */ "./node_modules/d3-color/src/define.js");


function Color() {}

var darker = 0.7;
var brighter = 1 / darker;

var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`),
    reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`),
    reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`),
    reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`),
    reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`),
    reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

(0,_define_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor, this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex, // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHex8() {
  return this.rgb().formatHex8();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
      : null) // invalid hex
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
      : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

(0,_define_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Rgb, rgb, (0,_define_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return (-0.5 <= this.r && this.r < 255.5)
        && (-0.5 <= this.g && this.g < 255.5)
        && (-0.5 <= this.b && this.b < 255.5)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex, // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}

function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}

function rgb_formatRgb() {
  const a = clampa(this.opacity);
  return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}

function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}

function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}

function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl;
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0,_define_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Hsl, hsl, (0,_define_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
  }
}));

function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}

function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}


/***/ }),

/***/ "./node_modules/d3-color/src/define.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-color/src/define.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "extend": () => (/* binding */ extend)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}


/***/ }),

/***/ "./node_modules/d3-dispatch/src/dispatch.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-dispatch/src/dispatch.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var noop = {value: () => {}};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || (t in _) || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {type: t, name: name};
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length;

    // If no callback was specified, return the callback of the given type and name.
    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
      return;
    }

    // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.
    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
    }

    return this;
  },
  copy: function() {
    var copy = {}, _ = this._;
    for (var t in _) copy[t] = _[t].slice();
    return new Dispatch(copy);
  },
  call: function(type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function(type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }
  if (callback != null) type.push({name: name, value: callback});
  return type;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dispatch);


/***/ }),

/***/ "./node_modules/d3-ease/src/cubic.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-ease/src/cubic.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cubicIn": () => (/* binding */ cubicIn),
/* harmony export */   "cubicInOut": () => (/* binding */ cubicInOut),
/* harmony export */   "cubicOut": () => (/* binding */ cubicOut)
/* harmony export */ });
function cubicIn(t) {
  return t * t * t;
}

function cubicOut(t) {
  return --t * t * t + 1;
}

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}


/***/ }),

/***/ "./node_modules/d3-ease/src/linear.js":
/*!********************************************!*\
  !*** ./node_modules/d3-ease/src/linear.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linear": () => (/* binding */ linear)
/* harmony export */ });
const linear = t => +t;


/***/ }),

/***/ "./node_modules/d3-format/src/defaultLocale.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-format/src/defaultLocale.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ defaultLocale),
/* harmony export */   "format": () => (/* binding */ format),
/* harmony export */   "formatPrefix": () => (/* binding */ formatPrefix)
/* harmony export */ });
/* harmony import */ var _locale_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./locale.js */ "./node_modules/d3-format/src/locale.js");


var locale;
var format;
var formatPrefix;

defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale(definition) {
  locale = (0,_locale_js__WEBPACK_IMPORTED_MODULE_0__["default"])(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}


/***/ }),

/***/ "./node_modules/d3-format/src/exponent.js":
/*!************************************************!*\
  !*** ./node_modules/d3-format/src/exponent.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatDecimal.js */ "./node_modules/d3-format/src/formatDecimal.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return x = (0,_formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__.formatDecimalParts)(Math.abs(x)), x ? x[1] : NaN;
}


/***/ }),

/***/ "./node_modules/d3-format/src/formatDecimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-format/src/formatDecimal.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "formatDecimalParts": () => (/* binding */ formatDecimalParts)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return Math.abs(x = Math.round(x)) >= 1e21
      ? x.toLocaleString("en").replace(/,/g, "")
      : x.toString(10);
}

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].
function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i, coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}


/***/ }),

/***/ "./node_modules/d3-format/src/formatGroup.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-format/src/formatGroup.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(grouping, thousands) {
  return function(value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}


/***/ }),

/***/ "./node_modules/d3-format/src/formatNumerals.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-format/src/formatNumerals.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}


/***/ }),

/***/ "./node_modules/d3-format/src/formatPrefixAuto.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-format/src/formatPrefixAuto.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "prefixExponent": () => (/* binding */ prefixExponent)
/* harmony export */ });
/* harmony import */ var _formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatDecimal.js */ "./node_modules/d3-format/src/formatDecimal.js");


var prefixExponent;

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x, p) {
  var d = (0,_formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__.formatDecimalParts)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient
      : i > n ? coefficient + new Array(i - n + 1).join("0")
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
      : "0." + new Array(1 - i).join("0") + (0,_formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__.formatDecimalParts)(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}


/***/ }),

/***/ "./node_modules/d3-format/src/formatRounded.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-format/src/formatRounded.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatDecimal.js */ "./node_modules/d3-format/src/formatDecimal.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x, p) {
  var d = (0,_formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__.formatDecimalParts)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}


/***/ }),

/***/ "./node_modules/d3-format/src/formatSpecifier.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-format/src/formatSpecifier.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FormatSpecifier": () => (/* binding */ FormatSpecifier),
/* harmony export */   "default": () => (/* binding */ formatSpecifier)
/* harmony export */ });
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function() {
  return this.fill
      + this.align
      + this.sign
      + this.symbol
      + (this.zero ? "0" : "")
      + (this.width === undefined ? "" : Math.max(1, this.width | 0))
      + (this.comma ? "," : "")
      + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
      + (this.trim ? "~" : "")
      + this.type;
};


/***/ }),

/***/ "./node_modules/d3-format/src/formatTrim.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-format/src/formatTrim.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
    }
  }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}


/***/ }),

/***/ "./node_modules/d3-format/src/formatTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-format/src/formatTypes.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatDecimal.js */ "./node_modules/d3-format/src/formatDecimal.js");
/* harmony import */ var _formatPrefixAuto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatPrefixAuto.js */ "./node_modules/d3-format/src/formatPrefixAuto.js");
/* harmony import */ var _formatRounded_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatRounded.js */ "./node_modules/d3-format/src/formatRounded.js");




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  "%": (x, p) => (x * 100).toFixed(p),
  "b": (x) => Math.round(x).toString(2),
  "c": (x) => x + "",
  "d": _formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  "e": (x, p) => x.toExponential(p),
  "f": (x, p) => x.toFixed(p),
  "g": (x, p) => x.toPrecision(p),
  "o": (x) => Math.round(x).toString(8),
  "p": (x, p) => (0,_formatRounded_js__WEBPACK_IMPORTED_MODULE_1__["default"])(x * 100, p),
  "r": _formatRounded_js__WEBPACK_IMPORTED_MODULE_1__["default"],
  "s": _formatPrefixAuto_js__WEBPACK_IMPORTED_MODULE_2__["default"],
  "X": (x) => Math.round(x).toString(16).toUpperCase(),
  "x": (x) => Math.round(x).toString(16)
});


/***/ }),

/***/ "./node_modules/d3-format/src/identity.js":
/*!************************************************!*\
  !*** ./node_modules/d3-format/src/identity.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return x;
}


/***/ }),

/***/ "./node_modules/d3-format/src/locale.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-format/src/locale.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _exponent_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./exponent.js */ "./node_modules/d3-format/src/exponent.js");
/* harmony import */ var _formatGroup_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatGroup.js */ "./node_modules/d3-format/src/formatGroup.js");
/* harmony import */ var _formatNumerals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatNumerals.js */ "./node_modules/d3-format/src/formatNumerals.js");
/* harmony import */ var _formatSpecifier_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatSpecifier.js */ "./node_modules/d3-format/src/formatSpecifier.js");
/* harmony import */ var _formatTrim_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./formatTrim.js */ "./node_modules/d3-format/src/formatTrim.js");
/* harmony import */ var _formatTypes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./formatTypes.js */ "./node_modules/d3-format/src/formatTypes.js");
/* harmony import */ var _formatPrefixAuto_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./formatPrefixAuto.js */ "./node_modules/d3-format/src/formatPrefixAuto.js");
/* harmony import */ var _identity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./identity.js */ "./node_modules/d3-format/src/identity.js");









var map = Array.prototype.map,
    prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? _identity_js__WEBPACK_IMPORTED_MODULE_0__["default"] : (0,_formatGroup_js__WEBPACK_IMPORTED_MODULE_1__["default"])(map.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? _identity_js__WEBPACK_IMPORTED_MODULE_0__["default"] : (0,_formatNumerals_js__WEBPACK_IMPORTED_MODULE_2__["default"])(map.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "−" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = (0,_formatSpecifier_js__WEBPACK_IMPORTED_MODULE_3__["default"])(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type;

    // The "n" type is an alias for ",g".
    if (type === "n") comma = true, type = "g";

    // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!_formatTypes_js__WEBPACK_IMPORTED_MODULE_4__["default"][type]) precision === undefined && (precision = 12), trim = true, type = "g";

    // If zero fill is specified, padding goes after sign and before digits.
    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = _formatTypes_js__WEBPACK_IMPORTED_MODULE_4__["default"][type],
        maybeSuffix = /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision === undefined ? 6
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
        : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i, n, c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Determine the sign. -0 is not less than 0, but 1 / -0 is!
        var valueNegative = value < 0 || 1 / value < 0;

        // Perform the initial formatting.
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

        // Trim insignificant zeros.
        if (trim) value = (0,_formatTrim_js__WEBPACK_IMPORTED_MODULE_5__["default"])(value);

        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + _formatPrefixAuto_js__WEBPACK_IMPORTED_MODULE_6__.prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<": value = valuePrefix + value + valueSuffix + padding; break;
        case "=": value = valuePrefix + padding + value + valueSuffix; break;
        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
        default: value = padding + valuePrefix + value + valueSuffix; break;
      }

      return numerals(value);
    }

    format.toString = function() {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = (0,_formatSpecifier_js__WEBPACK_IMPORTED_MODULE_3__["default"])(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor((0,_exponent_js__WEBPACK_IMPORTED_MODULE_7__["default"])(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function(value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}


/***/ }),

/***/ "./node_modules/d3-format/src/precisionFixed.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-format/src/precisionFixed.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _exponent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exponent.js */ "./node_modules/d3-format/src/exponent.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(step) {
  return Math.max(0, -(0,_exponent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Math.abs(step)));
}


/***/ }),

/***/ "./node_modules/d3-format/src/precisionPrefix.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-format/src/precisionPrefix.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _exponent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exponent.js */ "./node_modules/d3-format/src/exponent.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor((0,_exponent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) / 3))) * 3 - (0,_exponent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Math.abs(step)));
}


/***/ }),

/***/ "./node_modules/d3-format/src/precisionRound.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-format/src/precisionRound.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _exponent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exponent.js */ "./node_modules/d3-format/src/exponent.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, (0,_exponent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(max) - (0,_exponent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(step)) + 1;
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/array.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/array.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "genericArray": () => (/* binding */ genericArray)
/* harmony export */ });
/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./value.js */ "./node_modules/d3-interpolate/src/value.js");
/* harmony import */ var _numberArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./numberArray.js */ "./node_modules/d3-interpolate/src/numberArray.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  return ((0,_numberArray_js__WEBPACK_IMPORTED_MODULE_0__.isNumberArray)(b) ? _numberArray_js__WEBPACK_IMPORTED_MODULE_0__["default"] : genericArray)(a, b);
}

function genericArray(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = (0,_value_js__WEBPACK_IMPORTED_MODULE_1__["default"])(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];

  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/basis.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/basis.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "basis": () => (/* binding */ basis),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
      + (4 - 6 * t2 + 3 * t3) * v1
      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
      + t3 * v3) / 6;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/basisClosed.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-interpolate/src/basisClosed.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _basis_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basis.js */ "./node_modules/d3-interpolate/src/basis.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return (0,_basis_js__WEBPACK_IMPORTED_MODULE_0__.basis)((t - i / n) * n, v0, v1, v2, v3);
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/color.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/color.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ nogamma),
/* harmony export */   "gamma": () => (/* binding */ gamma),
/* harmony export */   "hue": () => (/* binding */ hue)
/* harmony export */ });
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constant.js */ "./node_modules/d3-interpolate/src/constant.js");


function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(isNaN(a) ? b : a);
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/constant.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-interpolate/src/constant.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (x => () => x);


/***/ }),

/***/ "./node_modules/d3-interpolate/src/date.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-interpolate/src/date.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  var d = new Date;
  return a = +a, b = +b, function(t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/number.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-interpolate/src/number.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/numberArray.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-interpolate/src/numberArray.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "isNumberArray": () => (/* binding */ isNumberArray)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i;
  return function(t) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
    return c;
  };
}

function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/object.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-interpolate/src/object.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ "./node_modules/d3-interpolate/src/value.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = (0,_value_js__WEBPACK_IMPORTED_MODULE_0__["default"])(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/rgb.js":
/*!************************************************!*\
  !*** ./node_modules/d3-interpolate/src/rgb.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "rgbBasis": () => (/* binding */ rgbBasis),
/* harmony export */   "rgbBasisClosed": () => (/* binding */ rgbBasisClosed)
/* harmony export */ });
/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-color */ "./node_modules/d3-color/src/color.js");
/* harmony import */ var _basis_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./basis.js */ "./node_modules/d3-interpolate/src/basis.js");
/* harmony import */ var _basisClosed_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./basisClosed.js */ "./node_modules/d3-interpolate/src/basisClosed.js");
/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./color.js */ "./node_modules/d3-interpolate/src/color.js");





/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((function rgbGamma(y) {
  var color = (0,_color_js__WEBPACK_IMPORTED_MODULE_0__.gamma)(y);

  function rgb(start, end) {
    var r = color((start = (0,d3_color__WEBPACK_IMPORTED_MODULE_1__.rgb)(start)).r, (end = (0,d3_color__WEBPACK_IMPORTED_MODULE_1__.rgb)(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = (0,_color_js__WEBPACK_IMPORTED_MODULE_0__["default"])(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;

  return rgb;
})(1));

function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i, color;
    for (i = 0; i < n; ++i) {
      color = (0,d3_color__WEBPACK_IMPORTED_MODULE_1__.rgb)(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function(t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(_basis_js__WEBPACK_IMPORTED_MODULE_2__["default"]);
var rgbBasisClosed = rgbSpline(_basisClosed_js__WEBPACK_IMPORTED_MODULE_3__["default"]);


/***/ }),

/***/ "./node_modules/d3-interpolate/src/round.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/round.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  return a = +a, b = +b, function(t) {
    return Math.round(a * (1 - t) + b * t);
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/string.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-interpolate/src/string.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./number.js */ "./node_modules/d3-interpolate/src/number.js");


var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function() {
    return b;
  };
}

function one(b) {
  return function(t) {
    return b(t) + "";
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a))
      && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) { // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: (0,_number_js__WEBPACK_IMPORTED_MODULE_0__["default"])(am, bm)});
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? (q[0]
      ? one(q[0].x)
      : zero(b))
      : (b = q.length, function(t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/transform/decompose.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-interpolate/src/transform/decompose.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "identity": () => (/* binding */ identity)
/* harmony export */ });
var degrees = 180 / Math.PI;

var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/transform/index.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-interpolate/src/transform/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "interpolateTransformCss": () => (/* binding */ interpolateTransformCss),
/* harmony export */   "interpolateTransformSvg": () => (/* binding */ interpolateTransformSvg)
/* harmony export */ });
/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../number.js */ "./node_modules/d3-interpolate/src/number.js");
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse.js */ "./node_modules/d3-interpolate/src/transform/parse.js");



function interpolateTransform(parse, pxComma, pxParen, degParen) {

  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({i: i - 4, x: (0,_number_js__WEBPACK_IMPORTED_MODULE_0__["default"])(xa, xb)}, {i: i - 2, x: (0,_number_js__WEBPACK_IMPORTED_MODULE_0__["default"])(ya, yb)});
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: (0,_number_js__WEBPACK_IMPORTED_MODULE_0__["default"])(a, b)});
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: (0,_number_js__WEBPACK_IMPORTED_MODULE_0__["default"])(a, b)});
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({i: i - 4, x: (0,_number_js__WEBPACK_IMPORTED_MODULE_0__["default"])(xa, xb)}, {i: i - 2, x: (0,_number_js__WEBPACK_IMPORTED_MODULE_0__["default"])(ya, yb)});
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function(a, b) {
    var s = [], // string constants and placeholders
        q = []; // number interpolators
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(_parse_js__WEBPACK_IMPORTED_MODULE_1__.parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(_parse_js__WEBPACK_IMPORTED_MODULE_1__.parseSvg, ", ", ")", ")");


/***/ }),

/***/ "./node_modules/d3-interpolate/src/transform/parse.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-interpolate/src/transform/parse.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseCss": () => (/* binding */ parseCss),
/* harmony export */   "parseSvg": () => (/* binding */ parseSvg)
/* harmony export */ });
/* harmony import */ var _decompose_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decompose.js */ "./node_modules/d3-interpolate/src/transform/decompose.js");


var svgNode;

/* eslint-disable no-undef */
function parseCss(value) {
  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m.isIdentity ? _decompose_js__WEBPACK_IMPORTED_MODULE_0__.identity : (0,_decompose_js__WEBPACK_IMPORTED_MODULE_0__["default"])(m.a, m.b, m.c, m.d, m.e, m.f);
}

function parseSvg(value) {
  if (value == null) return _decompose_js__WEBPACK_IMPORTED_MODULE_0__.identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return _decompose_js__WEBPACK_IMPORTED_MODULE_0__.identity;
  value = value.matrix;
  return (0,_decompose_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value.a, value.b, value.c, value.d, value.e, value.f);
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/value.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/value.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-color */ "./node_modules/d3-color/src/color.js");
/* harmony import */ var _rgb_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rgb.js */ "./node_modules/d3-interpolate/src/rgb.js");
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./array.js */ "./node_modules/d3-interpolate/src/array.js");
/* harmony import */ var _date_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./date.js */ "./node_modules/d3-interpolate/src/date.js");
/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./number.js */ "./node_modules/d3-interpolate/src/number.js");
/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./object.js */ "./node_modules/d3-interpolate/src/object.js");
/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./string.js */ "./node_modules/d3-interpolate/src/string.js");
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constant.js */ "./node_modules/d3-interpolate/src/constant.js");
/* harmony import */ var _numberArray_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./numberArray.js */ "./node_modules/d3-interpolate/src/numberArray.js");










/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(b)
      : (t === "number" ? _number_js__WEBPACK_IMPORTED_MODULE_1__["default"]
      : t === "string" ? ((c = (0,d3_color__WEBPACK_IMPORTED_MODULE_2__["default"])(b)) ? (b = c, _rgb_js__WEBPACK_IMPORTED_MODULE_3__["default"]) : _string_js__WEBPACK_IMPORTED_MODULE_4__["default"])
      : b instanceof d3_color__WEBPACK_IMPORTED_MODULE_2__["default"] ? _rgb_js__WEBPACK_IMPORTED_MODULE_3__["default"]
      : b instanceof Date ? _date_js__WEBPACK_IMPORTED_MODULE_5__["default"]
      : (0,_numberArray_js__WEBPACK_IMPORTED_MODULE_6__.isNumberArray)(b) ? _numberArray_js__WEBPACK_IMPORTED_MODULE_6__["default"]
      : Array.isArray(b) ? _array_js__WEBPACK_IMPORTED_MODULE_7__.genericArray
      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? _object_js__WEBPACK_IMPORTED_MODULE_8__["default"]
      : _number_js__WEBPACK_IMPORTED_MODULE_1__["default"])(a, b);
}


/***/ }),

/***/ "./node_modules/d3-scale/src/band.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-scale/src/band.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ band),
/* harmony export */   "point": () => (/* binding */ point)
/* harmony export */ });
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/range.js");
/* harmony import */ var _init_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./init.js */ "./node_modules/d3-scale/src/init.js");
/* harmony import */ var _ordinal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ordinal.js */ "./node_modules/d3-scale/src/ordinal.js");




function band() {
  var scale = (0,_ordinal_js__WEBPACK_IMPORTED_MODULE_0__["default"])().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      r0 = 0,
      r1 = 1,
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;

  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = r1 < r0,
        start = reverse ? r1 : r0,
        stop = reverse ? r0 : r1;
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = (0,d3_array__WEBPACK_IMPORTED_MODULE_1__["default"])(n).map(function(i) { return start + step * i; });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function(_) {
    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };

  scale.rangeRound = function(_) {
    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
  };

  scale.bandwidth = function() {
    return bandwidth;
  };

  scale.step = function() {
    return step;
  };

  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };

  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };

  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };

  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function() {
    return band(domain(), [r0, r1])
        .round(round)
        .paddingInner(paddingInner)
        .paddingOuter(paddingOuter)
        .align(align);
  };

  return _init_js__WEBPACK_IMPORTED_MODULE_2__.initRange.apply(rescale(), arguments);
}

function pointish(scale) {
  var copy = scale.copy;

  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function() {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}


/***/ }),

/***/ "./node_modules/d3-scale/src/constant.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-scale/src/constant.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ constants)
/* harmony export */ });
function constants(x) {
  return function() {
    return x;
  };
}


/***/ }),

/***/ "./node_modules/d3-scale/src/continuous.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-scale/src/continuous.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "copy": () => (/* binding */ copy),
/* harmony export */   "default": () => (/* binding */ continuous),
/* harmony export */   "identity": () => (/* binding */ identity),
/* harmony export */   "transformer": () => (/* binding */ transformer)
/* harmony export */ });
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/bisect.js");
/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-interpolate */ "./node_modules/d3-interpolate/src/value.js");
/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-interpolate */ "./node_modules/d3-interpolate/src/number.js");
/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-interpolate */ "./node_modules/d3-interpolate/src/round.js");
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constant.js */ "./node_modules/d3-scale/src/constant.js");
/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./number.js */ "./node_modules/d3-scale/src/number.js");





var unit = [0, 1];

function identity(x) {
  return x;
}

function normalize(a, b) {
  return (b -= (a = +a))
      ? function(x) { return (x - a) / b; }
      : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(isNaN(b) ? NaN : 0.5);
}

function clamper(a, b) {
  var t;
  if (a > b) t = a, a = b, b = t;
  return function(x) { return Math.max(a, Math.min(b, x)); };
}

// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
function bimap(domain, range, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x) { return r0(d0(x)); };
}

function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1;

  // Reverse descending domains.
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function(x) {
    var i = (0,d3_array__WEBPACK_IMPORTED_MODULE_1__["default"])(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target
      .domain(source.domain())
      .range(source.range())
      .interpolate(source.interpolate())
      .clamp(source.clamp())
      .unknown(source.unknown());
}

function transformer() {
  var domain = unit,
      range = unit,
      interpolate = d3_interpolate__WEBPACK_IMPORTED_MODULE_2__["default"],
      transform,
      untransform,
      unknown,
      clamp = identity,
      piecewise,
      output,
      input;

  function rescale() {
    var n = Math.min(domain.length, range.length);
    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }

  scale.invert = function(y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), d3_interpolate__WEBPACK_IMPORTED_MODULE_3__["default"])))(y)));
  };

  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, _number_js__WEBPACK_IMPORTED_MODULE_4__["default"]), rescale()) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };

  scale.rangeRound = function(_) {
    return range = Array.from(_), interpolate = d3_interpolate__WEBPACK_IMPORTED_MODULE_5__["default"], rescale();
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;
  };

  scale.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}

function continuous() {
  return transformer()(identity, identity);
}


/***/ }),

/***/ "./node_modules/d3-scale/src/init.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-scale/src/init.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initInterpolator": () => (/* binding */ initInterpolator),
/* harmony export */   "initRange": () => (/* binding */ initRange)
/* harmony export */ });
function initRange(domain, range) {
  switch (arguments.length) {
    case 0: break;
    case 1: this.range(domain); break;
    default: this.range(range).domain(domain); break;
  }
  return this;
}

function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0: break;
    case 1: {
      if (typeof domain === "function") this.interpolator(domain);
      else this.range(domain);
      break;
    }
    default: {
      this.domain(domain);
      if (typeof interpolator === "function") this.interpolator(interpolator);
      else this.range(interpolator);
      break;
    }
  }
  return this;
}


/***/ }),

/***/ "./node_modules/d3-scale/src/linear.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-scale/src/linear.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ linear),
/* harmony export */   "linearish": () => (/* binding */ linearish)
/* harmony export */ });
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/ticks.js");
/* harmony import */ var _continuous_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./continuous.js */ "./node_modules/d3-scale/src/continuous.js");
/* harmony import */ var _init_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./init.js */ "./node_modules/d3-scale/src/init.js");
/* harmony import */ var _tickFormat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tickFormat.js */ "./node_modules/d3-scale/src/tickFormat.js");





function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function(count) {
    var d = domain();
    return (0,d3_array__WEBPACK_IMPORTED_MODULE_0__["default"])(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function(count, specifier) {
    var d = domain();
    return (0,_tickFormat_js__WEBPACK_IMPORTED_MODULE_1__["default"])(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };

  scale.nice = function(count) {
    if (count == null) count = 10;

    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    
    while (maxIter-- > 0) {
      step = (0,d3_array__WEBPACK_IMPORTED_MODULE_0__.tickIncrement)(start, stop, count);
      if (step === prestep) {
        d[i0] = start
        d[i1] = stop
        return domain(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = (0,_continuous_js__WEBPACK_IMPORTED_MODULE_2__["default"])();

  scale.copy = function() {
    return (0,_continuous_js__WEBPACK_IMPORTED_MODULE_2__.copy)(scale, linear());
  };

  _init_js__WEBPACK_IMPORTED_MODULE_3__.initRange.apply(scale, arguments);

  return linearish(scale);
}


/***/ }),

/***/ "./node_modules/d3-scale/src/log.js":
/*!******************************************!*\
  !*** ./node_modules/d3-scale/src/log.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ log),
/* harmony export */   "loggish": () => (/* binding */ loggish)
/* harmony export */ });
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/ticks.js");
/* harmony import */ var d3_format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-format */ "./node_modules/d3-format/src/formatSpecifier.js");
/* harmony import */ var d3_format__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-format */ "./node_modules/d3-format/src/defaultLocale.js");
/* harmony import */ var _nice_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nice.js */ "./node_modules/d3-scale/src/nice.js");
/* harmony import */ var _continuous_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./continuous.js */ "./node_modules/d3-scale/src/continuous.js");
/* harmony import */ var _init_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./init.js */ "./node_modules/d3-scale/src/init.js");






function transformLog(x) {
  return Math.log(x);
}

function transformExp(x) {
  return Math.exp(x);
}

function transformLogn(x) {
  return -Math.log(-x);
}

function transformExpn(x) {
  return -Math.exp(-x);
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10
      : base === Math.E ? Math.exp
      : x => Math.pow(base, x);
}

function logp(base) {
  return base === Math.E ? Math.log
      : base === 10 && Math.log10
      || base === 2 && Math.log2
      || (base = Math.log(base), x => Math.log(x) / base);
}

function reflect(f) {
  return (x, k) => -f(-x, k);
}

function loggish(transform) {
  const scale = transform(transformLog, transformExp);
  const domain = scale.domain;
  let base = 10;
  let logs;
  let pows;

  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }

  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = count => {
    const d = domain();
    let u = d[0];
    let v = d[d.length - 1];
    const r = v < u;

    if (r) ([u, v] = [v, u]);

    let i = logs(u);
    let j = logs(v);
    let k;
    let t;
    const n = count == null ? 10 : +count;
    let z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.floor(i), j = Math.ceil(j);
      if (u > 0) for (; i <= j; ++i) {
        for (k = 1; k < base; ++k) {
          t = i < 0 ? k / pows(-i) : k * pows(i);
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i <= j; ++i) {
        for (k = base - 1; k >= 1; --k) {
          t = i > 0 ? k / pows(-i) : k * pows(i);
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
      if (z.length * 2 < n) z = (0,d3_array__WEBPACK_IMPORTED_MODULE_0__["default"])(u, v, n);
    } else {
      z = (0,d3_array__WEBPACK_IMPORTED_MODULE_0__["default"])(i, j, Math.min(j - i, n)).map(pows);
    }
    return r ? z.reverse() : z;
  };

  scale.tickFormat = (count, specifier) => {
    if (count == null) count = 10;
    if (specifier == null) specifier = base === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base % 1) && (specifier = (0,d3_format__WEBPACK_IMPORTED_MODULE_1__["default"])(specifier)).precision == null) specifier.trim = true;
      specifier = (0,d3_format__WEBPACK_IMPORTED_MODULE_2__.format)(specifier);
    }
    if (count === Infinity) return specifier;
    const k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
    return d => {
      let i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = () => {
    return domain((0,_nice_js__WEBPACK_IMPORTED_MODULE_3__["default"])(domain(), {
      floor: x => pows(Math.floor(logs(x))),
      ceil: x => pows(Math.ceil(logs(x)))
    }));
  };

  return scale;
}

function log() {
  const scale = loggish((0,_continuous_js__WEBPACK_IMPORTED_MODULE_4__.transformer)()).domain([1, 10]);
  scale.copy = () => (0,_continuous_js__WEBPACK_IMPORTED_MODULE_4__.copy)(scale, log()).base(scale.base());
  _init_js__WEBPACK_IMPORTED_MODULE_5__.initRange.apply(scale, arguments);
  return scale;
}


/***/ }),

/***/ "./node_modules/d3-scale/src/nice.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-scale/src/nice.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ nice)
/* harmony export */ });
function nice(domain, interval) {
  domain = domain.slice();

  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}


/***/ }),

/***/ "./node_modules/d3-scale/src/number.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-scale/src/number.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ number)
/* harmony export */ });
function number(x) {
  return +x;
}


/***/ }),

/***/ "./node_modules/d3-scale/src/ordinal.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-scale/src/ordinal.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ordinal),
/* harmony export */   "implicit": () => (/* binding */ implicit)
/* harmony export */ });
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-array */ "./node_modules/internmap/src/index.js");
/* harmony import */ var _init_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./init.js */ "./node_modules/d3-scale/src/init.js");



const implicit = Symbol("implicit");

function ordinal() {
  var index = new d3_array__WEBPACK_IMPORTED_MODULE_0__.InternMap(),
      domain = [],
      range = [],
      unknown = implicit;

  function scale(d) {
    let i = index.get(d);
    if (i === undefined) {
      if (unknown !== implicit) return unknown;
      index.set(d, i = domain.push(d) - 1);
    }
    return range[i % range.length];
  }

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = new d3_array__WEBPACK_IMPORTED_MODULE_0__.InternMap();
    for (const value of _) {
      if (index.has(value)) continue;
      index.set(value, domain.push(value) - 1);
    }
    return scale;
  };

  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), scale) : range.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return ordinal(domain, range).unknown(unknown);
  };

  _init_js__WEBPACK_IMPORTED_MODULE_1__.initRange.apply(scale, arguments);

  return scale;
}


/***/ }),

/***/ "./node_modules/d3-scale/src/tickFormat.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-scale/src/tickFormat.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ tickFormat)
/* harmony export */ });
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/ticks.js");
/* harmony import */ var d3_format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-format */ "./node_modules/d3-format/src/formatSpecifier.js");
/* harmony import */ var d3_format__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-format */ "./node_modules/d3-format/src/precisionPrefix.js");
/* harmony import */ var d3_format__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-format */ "./node_modules/d3-format/src/defaultLocale.js");
/* harmony import */ var d3_format__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! d3-format */ "./node_modules/d3-format/src/precisionRound.js");
/* harmony import */ var d3_format__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-format */ "./node_modules/d3-format/src/precisionFixed.js");



function tickFormat(start, stop, count, specifier) {
  var step = (0,d3_array__WEBPACK_IMPORTED_MODULE_0__.tickStep)(start, stop, count),
      precision;
  specifier = (0,d3_format__WEBPACK_IMPORTED_MODULE_1__["default"])(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = (0,d3_format__WEBPACK_IMPORTED_MODULE_2__["default"])(step, value))) specifier.precision = precision;
      return (0,d3_format__WEBPACK_IMPORTED_MODULE_3__.formatPrefix)(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = (0,d3_format__WEBPACK_IMPORTED_MODULE_4__["default"])(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = (0,d3_format__WEBPACK_IMPORTED_MODULE_5__["default"])(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return (0,d3_format__WEBPACK_IMPORTED_MODULE_3__.format)(specifier);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/array.js":
/*!************************************************!*\
  !*** ./node_modules/d3-selection/src/array.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ array)
/* harmony export */ });
// Given something array like (or null), returns something that is strictly an
// array. This is used to ensure that array-like objects passed to d3.selectAll
// or selection.selectAll are converted into proper arrays when creating a
// selection; we don’t ever want to create a selection backed by a live
// HTMLCollection or NodeList. However, note that selection.selectAll will use a
// static NodeList as a group, since it safely derived from querySelectorAll.
function array(x) {
  return x == null ? [] : Array.isArray(x) ? x : Array.from(x);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/constant.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-selection/src/constant.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return function() {
    return x;
  };
}


/***/ }),

/***/ "./node_modules/d3-selection/src/creator.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-selection/src/creator.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _namespace_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./namespace.js */ "./node_modules/d3-selection/src/namespace.js");
/* harmony import */ var _namespaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./namespaces.js */ "./node_modules/d3-selection/src/namespaces.js");



function creatorInherit(name) {
  return function() {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === _namespaces_js__WEBPACK_IMPORTED_MODULE_0__.xhtml && document.documentElement.namespaceURI === _namespaces_js__WEBPACK_IMPORTED_MODULE_0__.xhtml
        ? document.createElement(name)
        : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name) {
  var fullname = (0,_namespace_js__WEBPACK_IMPORTED_MODULE_1__["default"])(name);
  return (fullname.local
      ? creatorFixed
      : creatorInherit)(fullname);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/matcher.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-selection/src/matcher.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "childMatcher": () => (/* binding */ childMatcher),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return function() {
    return this.matches(selector);
  };
}

function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}



/***/ }),

/***/ "./node_modules/d3-selection/src/namespace.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-selection/src/namespace.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _namespaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./namespaces.js */ "./node_modules/d3-selection/src/namespaces.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return _namespaces_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasOwnProperty(prefix) ? {space: _namespaces_js__WEBPACK_IMPORTED_MODULE_0__["default"][prefix], local: name} : name; // eslint-disable-line no-prototype-builtins
}


/***/ }),

/***/ "./node_modules/d3-selection/src/namespaces.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-selection/src/namespaces.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "xhtml": () => (/* binding */ xhtml)
/* harmony export */ });
var xhtml = "http://www.w3.org/1999/xhtml";

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
});


/***/ }),

/***/ "./node_modules/d3-selection/src/select.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-selection/src/select.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _selection_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selection/index.js */ "./node_modules/d3-selection/src/selection/index.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return typeof selector === "string"
      ? new _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.Selection([[document.querySelector(selector)]], [document.documentElement])
      : new _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.Selection([[selector]], _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.root);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selectAll.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-selection/src/selectAll.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./array.js */ "./node_modules/d3-selection/src/array.js");
/* harmony import */ var _selection_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selection/index.js */ "./node_modules/d3-selection/src/selection/index.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return typeof selector === "string"
      ? new _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.Selection([document.querySelectorAll(selector)], [document.documentElement])
      : new _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.Selection([(0,_array_js__WEBPACK_IMPORTED_MODULE_1__["default"])(selector)], _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.root);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/append.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/append.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _creator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../creator.js */ "./node_modules/d3-selection/src/creator.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name) {
  var create = typeof name === "function" ? name : (0,_creator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(name);
  return this.select(function() {
    return this.appendChild(create.apply(this, arguments));
  });
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/attr.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/attr.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _namespace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../namespace.js */ "./node_modules/d3-selection/src/namespace.js");


function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);
    else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value) {
  var fullname = (0,_namespace_js__WEBPACK_IMPORTED_MODULE_0__["default"])(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local
        ? node.getAttributeNS(fullname.space, fullname.local)
        : node.getAttribute(fullname);
  }

  return this.each((value == null
      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)
      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/call.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/call.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/classed.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/classed.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }

  return this.each((typeof value === "function"
      ? classedFunction : value
      ? classedTrue
      : classedFalse)(names, value));
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/clone.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/clone.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/data.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/data.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _enter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enter.js */ "./node_modules/d3-selection/src/selection/enter.js");
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constant.js */ "./node_modules/d3-selection/src/constant.js");




function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length;

  // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new _enter_js__WEBPACK_IMPORTED_MODULE_0__.EnterNode(parent, data[i]);
    }
  }

  // Put any non-null nodes that don’t fit into exit.
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = new Map,
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue;

  // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }

  // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.
  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data[i], i, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new _enter_js__WEBPACK_IMPORTED_MODULE_0__.EnterNode(parent, data[i]);
    }
  }

  // Add any remaining nodes that were not bound to data to exit.
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {
      exit[i] = node;
    }
  }
}

function datum(node) {
  return node.__data__;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value, key) {
  if (!arguments.length) return Array.from(this, datum);

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;

  if (typeof value !== "function") value = (0,_constant_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);

    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

    // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
        previous._next = next || null;
      }
    }
  }

  update = new _index_js__WEBPACK_IMPORTED_MODULE_2__.Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}

// Given some data, this returns an array-like view of it: an object that
// exposes a length property and allows numeric indexing. Note that unlike
// selectAll, this isn’t worried about “live” collections because the resulting
// array will only be used briefly while data is being bound. (It is possible to
// cause the data to change while iterating by using a key function, but please
// don’t; we’d rather avoid a gratuitous copy.)
function arraylike(data) {
  return typeof data === "object" && "length" in data
    ? data // Array, TypedArray, NodeList, array-like
    : Array.from(data); // Map, Set, iterable, string, or anything else
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/datum.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/datum.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  return arguments.length
      ? this.property("__data__", value)
      : this.node().__data__;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/dispatch.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/dispatch.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _window_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window.js */ "./node_modules/d3-selection/src/window.js");


function dispatchEvent(node, type, params) {
  var window = (0,_window_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(type, params) {
  return this.each((typeof params === "function"
      ? dispatchFunction
      : dispatchConstant)(type, params));
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/each.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/each.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(callback) {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/empty.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/empty.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return !this.node();
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/enter.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/enter.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EnterNode": () => (/* binding */ EnterNode),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _sparse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sparse.js */ "./node_modules/d3-selection/src/selection/sparse.js");
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(this._enter || this._groups.map(_sparse_js__WEBPACK_IMPORTED_MODULE_1__["default"]), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
  querySelector: function(selector) { return this._parent.querySelector(selector); },
  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
};


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/exit.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/exit.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _sparse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sparse.js */ "./node_modules/d3-selection/src/selection/sparse.js");
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(this._exit || this._groups.map(_sparse_js__WEBPACK_IMPORTED_MODULE_1__["default"]), this._parents);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/filter.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/filter.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _matcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matcher.js */ "./node_modules/d3-selection/src/matcher.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(match) {
  if (typeof match !== "function") match = (0,_matcher_js__WEBPACK_IMPORTED_MODULE_0__["default"])(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_1__.Selection(subgroups, this._parents);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/html.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/html.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  return arguments.length
      ? this.each(value == null
          ? htmlRemove : (typeof value === "function"
          ? htmlFunction
          : htmlConstant)(value))
      : this.node().innerHTML;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Selection": () => (/* binding */ Selection),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "root": () => (/* binding */ root)
/* harmony export */ });
/* harmony import */ var _select_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./select.js */ "./node_modules/d3-selection/src/selection/select.js");
/* harmony import */ var _selectAll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectAll.js */ "./node_modules/d3-selection/src/selection/selectAll.js");
/* harmony import */ var _selectChild_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selectChild.js */ "./node_modules/d3-selection/src/selection/selectChild.js");
/* harmony import */ var _selectChildren_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selectChildren.js */ "./node_modules/d3-selection/src/selection/selectChildren.js");
/* harmony import */ var _filter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./filter.js */ "./node_modules/d3-selection/src/selection/filter.js");
/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./data.js */ "./node_modules/d3-selection/src/selection/data.js");
/* harmony import */ var _enter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./enter.js */ "./node_modules/d3-selection/src/selection/enter.js");
/* harmony import */ var _exit_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./exit.js */ "./node_modules/d3-selection/src/selection/exit.js");
/* harmony import */ var _join_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./join.js */ "./node_modules/d3-selection/src/selection/join.js");
/* harmony import */ var _merge_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./merge.js */ "./node_modules/d3-selection/src/selection/merge.js");
/* harmony import */ var _order_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./order.js */ "./node_modules/d3-selection/src/selection/order.js");
/* harmony import */ var _sort_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./sort.js */ "./node_modules/d3-selection/src/selection/sort.js");
/* harmony import */ var _call_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./call.js */ "./node_modules/d3-selection/src/selection/call.js");
/* harmony import */ var _nodes_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./nodes.js */ "./node_modules/d3-selection/src/selection/nodes.js");
/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./node.js */ "./node_modules/d3-selection/src/selection/node.js");
/* harmony import */ var _size_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./size.js */ "./node_modules/d3-selection/src/selection/size.js");
/* harmony import */ var _empty_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./empty.js */ "./node_modules/d3-selection/src/selection/empty.js");
/* harmony import */ var _each_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./each.js */ "./node_modules/d3-selection/src/selection/each.js");
/* harmony import */ var _attr_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./attr.js */ "./node_modules/d3-selection/src/selection/attr.js");
/* harmony import */ var _style_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./style.js */ "./node_modules/d3-selection/src/selection/style.js");
/* harmony import */ var _property_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./property.js */ "./node_modules/d3-selection/src/selection/property.js");
/* harmony import */ var _classed_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./classed.js */ "./node_modules/d3-selection/src/selection/classed.js");
/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./text.js */ "./node_modules/d3-selection/src/selection/text.js");
/* harmony import */ var _html_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./html.js */ "./node_modules/d3-selection/src/selection/html.js");
/* harmony import */ var _raise_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./raise.js */ "./node_modules/d3-selection/src/selection/raise.js");
/* harmony import */ var _lower_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./lower.js */ "./node_modules/d3-selection/src/selection/lower.js");
/* harmony import */ var _append_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./append.js */ "./node_modules/d3-selection/src/selection/append.js");
/* harmony import */ var _insert_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./insert.js */ "./node_modules/d3-selection/src/selection/insert.js");
/* harmony import */ var _remove_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./remove.js */ "./node_modules/d3-selection/src/selection/remove.js");
/* harmony import */ var _clone_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./clone.js */ "./node_modules/d3-selection/src/selection/clone.js");
/* harmony import */ var _datum_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./datum.js */ "./node_modules/d3-selection/src/selection/datum.js");
/* harmony import */ var _on_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./on.js */ "./node_modules/d3-selection/src/selection/on.js");
/* harmony import */ var _dispatch_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./dispatch.js */ "./node_modules/d3-selection/src/selection/dispatch.js");
/* harmony import */ var _iterator_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./iterator.js */ "./node_modules/d3-selection/src/selection/iterator.js");



































var root = [null];

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

function selection_selection() {
  return this;
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: _select_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  selectAll: _selectAll_js__WEBPACK_IMPORTED_MODULE_1__["default"],
  selectChild: _selectChild_js__WEBPACK_IMPORTED_MODULE_2__["default"],
  selectChildren: _selectChildren_js__WEBPACK_IMPORTED_MODULE_3__["default"],
  filter: _filter_js__WEBPACK_IMPORTED_MODULE_4__["default"],
  data: _data_js__WEBPACK_IMPORTED_MODULE_5__["default"],
  enter: _enter_js__WEBPACK_IMPORTED_MODULE_6__["default"],
  exit: _exit_js__WEBPACK_IMPORTED_MODULE_7__["default"],
  join: _join_js__WEBPACK_IMPORTED_MODULE_8__["default"],
  merge: _merge_js__WEBPACK_IMPORTED_MODULE_9__["default"],
  selection: selection_selection,
  order: _order_js__WEBPACK_IMPORTED_MODULE_10__["default"],
  sort: _sort_js__WEBPACK_IMPORTED_MODULE_11__["default"],
  call: _call_js__WEBPACK_IMPORTED_MODULE_12__["default"],
  nodes: _nodes_js__WEBPACK_IMPORTED_MODULE_13__["default"],
  node: _node_js__WEBPACK_IMPORTED_MODULE_14__["default"],
  size: _size_js__WEBPACK_IMPORTED_MODULE_15__["default"],
  empty: _empty_js__WEBPACK_IMPORTED_MODULE_16__["default"],
  each: _each_js__WEBPACK_IMPORTED_MODULE_17__["default"],
  attr: _attr_js__WEBPACK_IMPORTED_MODULE_18__["default"],
  style: _style_js__WEBPACK_IMPORTED_MODULE_19__["default"],
  property: _property_js__WEBPACK_IMPORTED_MODULE_20__["default"],
  classed: _classed_js__WEBPACK_IMPORTED_MODULE_21__["default"],
  text: _text_js__WEBPACK_IMPORTED_MODULE_22__["default"],
  html: _html_js__WEBPACK_IMPORTED_MODULE_23__["default"],
  raise: _raise_js__WEBPACK_IMPORTED_MODULE_24__["default"],
  lower: _lower_js__WEBPACK_IMPORTED_MODULE_25__["default"],
  append: _append_js__WEBPACK_IMPORTED_MODULE_26__["default"],
  insert: _insert_js__WEBPACK_IMPORTED_MODULE_27__["default"],
  remove: _remove_js__WEBPACK_IMPORTED_MODULE_28__["default"],
  clone: _clone_js__WEBPACK_IMPORTED_MODULE_29__["default"],
  datum: _datum_js__WEBPACK_IMPORTED_MODULE_30__["default"],
  on: _on_js__WEBPACK_IMPORTED_MODULE_31__["default"],
  dispatch: _dispatch_js__WEBPACK_IMPORTED_MODULE_32__["default"],
  [Symbol.iterator]: _iterator_js__WEBPACK_IMPORTED_MODULE_33__["default"]
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (selection);


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/insert.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/insert.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _creator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../creator.js */ "./node_modules/d3-selection/src/creator.js");
/* harmony import */ var _selector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../selector.js */ "./node_modules/d3-selection/src/selector.js");



function constantNull() {
  return null;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, before) {
  var create = typeof name === "function" ? name : (0,_creator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(name),
      select = before == null ? constantNull : typeof before === "function" ? before : (0,_selector_js__WEBPACK_IMPORTED_MODULE_1__["default"])(before);
  return this.select(function() {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/iterator.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/iterator.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function* __WEBPACK_DEFAULT_EXPORT__() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) yield node;
    }
  }
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/join.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/join.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter) enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update = onupdate(update);
    if (update) update = update.selection();
  }
  if (onexit == null) exit.remove(); else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/lower.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/lower.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return this.each(lower);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/merge.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/merge.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  var selection = context.selection ? context.selection() : context;

  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(merges, this._parents);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/node.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/node.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/nodes.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/nodes.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return Array.from(this);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/on.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/on.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {type: t, name: name};
  });
}

function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;
    else delete this.__on;
  };
}

function onAdd(typename, value, options) {
  return function() {
    var on = this.__on, o, listener = contextListener(value);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
        this.addEventListener(o.type, o.listener = listener, o.options = options);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, options);
    o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};
    if (!on) this.__on = [o];
    else on.push(o);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(typename, value, options) {
  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));
  return this;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/order.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/order.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {

  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/property.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/property.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];
    else this[name] = v;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value) {
  return arguments.length > 1
      ? this.each((value == null
          ? propertyRemove : typeof value === "function"
          ? propertyFunction
          : propertyConstant)(name, value))
      : this.node()[name];
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/raise.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/raise.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return this.each(raise);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/remove.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/remove.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return this.each(remove);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/select.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/select.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _selector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../selector.js */ "./node_modules/d3-selection/src/selector.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(select) {
  if (typeof select !== "function") select = (0,_selector_js__WEBPACK_IMPORTED_MODULE_0__["default"])(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_1__.Selection(subgroups, this._parents);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/selectAll.js":
/*!**************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/selectAll.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../array.js */ "./node_modules/d3-selection/src/array.js");
/* harmony import */ var _selectorAll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../selectorAll.js */ "./node_modules/d3-selection/src/selectorAll.js");




function arrayAll(select) {
  return function() {
    return (0,_array_js__WEBPACK_IMPORTED_MODULE_0__["default"])(select.apply(this, arguments));
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(select) {
  if (typeof select === "function") select = arrayAll(select);
  else select = (0,_selectorAll_js__WEBPACK_IMPORTED_MODULE_1__["default"])(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_2__.Selection(subgroups, parents);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/selectChild.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/selectChild.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _matcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matcher.js */ "./node_modules/d3-selection/src/matcher.js");


var find = Array.prototype.find;

function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}

function childFirst() {
  return this.firstElementChild;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(match) {
  return this.select(match == null ? childFirst
      : childFind(typeof match === "function" ? match : (0,_matcher_js__WEBPACK_IMPORTED_MODULE_0__.childMatcher)(match)));
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/selectChildren.js":
/*!*******************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/selectChildren.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _matcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matcher.js */ "./node_modules/d3-selection/src/matcher.js");


var filter = Array.prototype.filter;

function children() {
  return Array.from(this.children);
}

function childrenFilter(match) {
  return function() {
    return filter.call(this.children, match);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(match) {
  return this.selectAll(match == null ? children
      : childrenFilter(typeof match === "function" ? match : (0,_matcher_js__WEBPACK_IMPORTED_MODULE_0__.childMatcher)(match)));
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/size.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/size.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  let size = 0;
  for (const node of this) ++size; // eslint-disable-line no-unused-vars
  return size;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/sort.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/sort.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/sparse.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/sparse.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(update) {
  return new Array(update.length);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/style.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/style.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "styleValue": () => (/* binding */ styleValue)
/* harmony export */ });
/* harmony import */ var _window_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window.js */ "./node_modules/d3-selection/src/window.js");


function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);
    else this.style.setProperty(name, v, priority);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value, priority) {
  return arguments.length > 1
      ? this.each((value == null
            ? styleRemove : typeof value === "function"
            ? styleFunction
            : styleConstant)(name, value, priority == null ? "" : priority))
      : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name)
      || (0,_window_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).getComputedStyle(node, null).getPropertyValue(name);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/text.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/text.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  return arguments.length
      ? this.each(value == null
          ? textRemove : (typeof value === "function"
          ? textFunction
          : textConstant)(value))
      : this.node().textContent;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selector.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-selection/src/selector.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function none() {}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selectorAll.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-selection/src/selectorAll.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function empty() {
  return [];
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}


/***/ }),

/***/ "./node_modules/d3-selection/src/window.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-selection/src/window.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(node) {
  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
      || (node.document && node) // node is a Window
      || node.defaultView; // node is a Document
}


/***/ }),

/***/ "./node_modules/d3-timer/src/timeout.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-timer/src/timeout.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _timer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./timer.js */ "./node_modules/d3-timer/src/timer.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(callback, delay, time) {
  var t = new _timer_js__WEBPACK_IMPORTED_MODULE_0__.Timer;
  delay = delay == null ? 0 : +delay;
  t.restart(elapsed => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}


/***/ }),

/***/ "./node_modules/d3-timer/src/timer.js":
/*!********************************************!*\
  !*** ./node_modules/d3-timer/src/timer.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Timer": () => (/* binding */ Timer),
/* harmony export */   "now": () => (/* binding */ now),
/* harmony export */   "timer": () => (/* binding */ timer),
/* harmony export */   "timerFlush": () => (/* binding */ timerFlush)
/* harmony export */ });
var frame = 0, // is an animation frame pending?
    timeout = 0, // is a timeout pending?
    interval = 0, // are any timers active?
    pokeDelay = 1000, // how frequently we check for clock skew
    taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call =
  this._time =
  this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;
      else taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer;
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.
  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);
    t = t._next;
  }
  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(), delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.
  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}


/***/ }),

/***/ "./node_modules/d3-transition/src/active.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-transition/src/active.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _transition_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transition/index.js */ "./node_modules/d3-transition/src/transition/index.js");
/* harmony import */ var _transition_schedule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transition/schedule.js */ "./node_modules/d3-transition/src/transition/schedule.js");



var root = [null];

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(node, name) {
  var schedules = node.__transition,
      schedule,
      i;

  if (schedules) {
    name = name == null ? null : name + "";
    for (i in schedules) {
      if ((schedule = schedules[i]).state > _transition_schedule_js__WEBPACK_IMPORTED_MODULE_0__.SCHEDULED && schedule.name === name) {
        return new _transition_index_js__WEBPACK_IMPORTED_MODULE_1__.Transition([[node]], root, name, +i);
      }
    }
  }

  return null;
}


/***/ }),

/***/ "./node_modules/d3-transition/src/index.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-transition/src/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "active": () => (/* reexport safe */ _active_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "interrupt": () => (/* reexport safe */ _interrupt_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "transition": () => (/* reexport safe */ _transition_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])
/* harmony export */ });
/* harmony import */ var _selection_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selection/index.js */ "./node_modules/d3-transition/src/selection/index.js");
/* harmony import */ var _transition_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transition/index.js */ "./node_modules/d3-transition/src/transition/index.js");
/* harmony import */ var _active_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./active.js */ "./node_modules/d3-transition/src/active.js");
/* harmony import */ var _interrupt_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interrupt.js */ "./node_modules/d3-transition/src/interrupt.js");






/***/ }),

/***/ "./node_modules/d3-transition/src/interrupt.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-transition/src/interrupt.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _transition_schedule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transition/schedule.js */ "./node_modules/d3-transition/src/transition/schedule.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(node, name) {
  var schedules = node.__transition,
      schedule,
      active,
      empty = true,
      i;

  if (!schedules) return;

  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
    active = schedule.state > _transition_schedule_js__WEBPACK_IMPORTED_MODULE_0__.STARTING && schedule.state < _transition_schedule_js__WEBPACK_IMPORTED_MODULE_0__.ENDING;
    schedule.state = _transition_schedule_js__WEBPACK_IMPORTED_MODULE_0__.ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
}


/***/ }),

/***/ "./node_modules/d3-transition/src/selection/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-transition/src/selection/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _interrupt_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interrupt.js */ "./node_modules/d3-transition/src/selection/interrupt.js");
/* harmony import */ var _transition_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transition.js */ "./node_modules/d3-transition/src/selection/transition.js");




d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"].prototype.interrupt = _interrupt_js__WEBPACK_IMPORTED_MODULE_1__["default"];
d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"].prototype.transition = _transition_js__WEBPACK_IMPORTED_MODULE_2__["default"];


/***/ }),

/***/ "./node_modules/d3-transition/src/selection/interrupt.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-transition/src/selection/interrupt.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _interrupt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../interrupt.js */ "./node_modules/d3-transition/src/interrupt.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name) {
  return this.each(function() {
    (0,_interrupt_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, name);
  });
}


/***/ }),

/***/ "./node_modules/d3-transition/src/selection/transition.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-transition/src/selection/transition.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _transition_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transition/index.js */ "./node_modules/d3-transition/src/transition/index.js");
/* harmony import */ var _transition_schedule_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../transition/schedule.js */ "./node_modules/d3-transition/src/transition/schedule.js");
/* harmony import */ var d3_ease__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-ease */ "./node_modules/d3-ease/src/cubic.js");
/* harmony import */ var d3_timer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-timer */ "./node_modules/d3-timer/src/timer.js");





var defaultTiming = {
  time: null, // Set on use.
  delay: 0,
  duration: 250,
  ease: d3_ease__WEBPACK_IMPORTED_MODULE_0__.cubicInOut
};

function inherit(node, id) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id} not found`);
    }
  }
  return timing;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name) {
  var id,
      timing;

  if (name instanceof _transition_index_js__WEBPACK_IMPORTED_MODULE_1__.Transition) {
    id = name._id, name = name._name;
  } else {
    id = (0,_transition_index_js__WEBPACK_IMPORTED_MODULE_1__.newId)(), (timing = defaultTiming).time = (0,d3_timer__WEBPACK_IMPORTED_MODULE_2__.now)(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        (0,_transition_schedule_js__WEBPACK_IMPORTED_MODULE_3__["default"])(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new _transition_index_js__WEBPACK_IMPORTED_MODULE_1__.Transition(groups, this._parents, name, id);
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/attr.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/attr.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-interpolate */ "./node_modules/d3-interpolate/src/transform/index.js");
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/namespace.js");
/* harmony import */ var _tween_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tween.js */ "./node_modules/d3-transition/src/transition/tween.js");
/* harmony import */ var _interpolate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interpolate.js */ "./node_modules/d3-transition/src/transition/interpolate.js");





function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null
        : string0 === string00 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrConstantNS(fullname, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null
        : string0 === string00 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrFunction(name, interpolate, value) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null) return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function attrFunctionNS(fullname, interpolate, value) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value) {
  var fullname = (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"])(name), i = fullname === "transform" ? d3_interpolate__WEBPACK_IMPORTED_MODULE_1__.interpolateTransformSvg : _interpolate_js__WEBPACK_IMPORTED_MODULE_2__["default"];
  return this.attrTween(name, typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, (0,_tween_js__WEBPACK_IMPORTED_MODULE_3__.tweenValue)(this, "attr." + name, value))
      : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)
      : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/attrTween.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/attrTween.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/namespace.js");


function attrInterpolate(name, i) {
  return function(t) {
    this.setAttribute(name, i.call(this, t));
  };
}

function attrInterpolateNS(fullname, i) {
  return function(t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}

function attrTweenNS(fullname, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }
  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }
  tween._value = value;
  return tween;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  var fullname = (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"])(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/delay.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/delay.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _schedule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schedule.js */ "./node_modules/d3-transition/src/transition/schedule.js");


function delayFunction(id, value) {
  return function() {
    (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.init)(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function() {
    (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.init)(this, id).delay = value;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? delayFunction
          : delayConstant)(id, value))
      : (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.get)(this.node(), id).delay;
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/duration.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/duration.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _schedule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schedule.js */ "./node_modules/d3-transition/src/transition/schedule.js");


function durationFunction(id, value) {
  return function() {
    (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.set)(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function() {
    (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.set)(this, id).duration = value;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? durationFunction
          : durationConstant)(id, value))
      : (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.get)(this.node(), id).duration;
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/ease.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/ease.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _schedule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schedule.js */ "./node_modules/d3-transition/src/transition/schedule.js");


function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error;
  return function() {
    (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.set)(this, id).ease = value;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  var id = this._id;

  return arguments.length
      ? this.each(easeConstant(id, value))
      : (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.get)(this.node(), id).ease;
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/easeVarying.js":
/*!******************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/easeVarying.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _schedule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schedule.js */ "./node_modules/d3-transition/src/transition/schedule.js");


function easeVarying(id, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (typeof v !== "function") throw new Error;
    (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.set)(this, id).ease = v;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  if (typeof value !== "function") throw new Error;
  return this.each(easeVarying(this._id, value));
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/end.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/end.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _schedule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schedule.js */ "./node_modules/d3-transition/src/transition/schedule.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var on0, on1, that = this, id = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = {value: reject},
        end = {value: function() { if (--size === 0) resolve(); }};

    that.each(function() {
      var schedule = (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.set)(this, id),
          on = schedule.on;

      // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }

      schedule.on = on1;
    });

    // The selection was empty, resolve end immediately
    if (size === 0) resolve();
  });
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/filter.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/filter.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/matcher.js");
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-transition/src/transition/index.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(match) {
  if (typeof match !== "function") match = (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"])(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_1__.Transition(subgroups, this._parents, this._name, this._id);
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/index.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Transition": () => (/* binding */ Transition),
/* harmony export */   "default": () => (/* binding */ transition),
/* harmony export */   "newId": () => (/* binding */ newId)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _attr_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./attr.js */ "./node_modules/d3-transition/src/transition/attr.js");
/* harmony import */ var _attrTween_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./attrTween.js */ "./node_modules/d3-transition/src/transition/attrTween.js");
/* harmony import */ var _delay_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./delay.js */ "./node_modules/d3-transition/src/transition/delay.js");
/* harmony import */ var _duration_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./duration.js */ "./node_modules/d3-transition/src/transition/duration.js");
/* harmony import */ var _ease_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./ease.js */ "./node_modules/d3-transition/src/transition/ease.js");
/* harmony import */ var _easeVarying_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./easeVarying.js */ "./node_modules/d3-transition/src/transition/easeVarying.js");
/* harmony import */ var _filter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./filter.js */ "./node_modules/d3-transition/src/transition/filter.js");
/* harmony import */ var _merge_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./merge.js */ "./node_modules/d3-transition/src/transition/merge.js");
/* harmony import */ var _on_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./on.js */ "./node_modules/d3-transition/src/transition/on.js");
/* harmony import */ var _remove_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./remove.js */ "./node_modules/d3-transition/src/transition/remove.js");
/* harmony import */ var _select_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./select.js */ "./node_modules/d3-transition/src/transition/select.js");
/* harmony import */ var _selectAll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selectAll.js */ "./node_modules/d3-transition/src/transition/selectAll.js");
/* harmony import */ var _selection_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./selection.js */ "./node_modules/d3-transition/src/transition/selection.js");
/* harmony import */ var _style_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./style.js */ "./node_modules/d3-transition/src/transition/style.js");
/* harmony import */ var _styleTween_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./styleTween.js */ "./node_modules/d3-transition/src/transition/styleTween.js");
/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./text.js */ "./node_modules/d3-transition/src/transition/text.js");
/* harmony import */ var _textTween_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./textTween.js */ "./node_modules/d3-transition/src/transition/textTween.js");
/* harmony import */ var _transition_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transition.js */ "./node_modules/d3-transition/src/transition/transition.js");
/* harmony import */ var _tween_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./tween.js */ "./node_modules/d3-transition/src/transition/tween.js");
/* harmony import */ var _end_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./end.js */ "./node_modules/d3-transition/src/transition/end.js");






















var id = 0;

function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}

function transition(name) {
  return (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"])().transition(name);
}

function newId() {
  return ++id;
}

var selection_prototype = d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"].prototype;

Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: _select_js__WEBPACK_IMPORTED_MODULE_1__["default"],
  selectAll: _selectAll_js__WEBPACK_IMPORTED_MODULE_2__["default"],
  selectChild: selection_prototype.selectChild,
  selectChildren: selection_prototype.selectChildren,
  filter: _filter_js__WEBPACK_IMPORTED_MODULE_3__["default"],
  merge: _merge_js__WEBPACK_IMPORTED_MODULE_4__["default"],
  selection: _selection_js__WEBPACK_IMPORTED_MODULE_5__["default"],
  transition: _transition_js__WEBPACK_IMPORTED_MODULE_6__["default"],
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: _on_js__WEBPACK_IMPORTED_MODULE_7__["default"],
  attr: _attr_js__WEBPACK_IMPORTED_MODULE_8__["default"],
  attrTween: _attrTween_js__WEBPACK_IMPORTED_MODULE_9__["default"],
  style: _style_js__WEBPACK_IMPORTED_MODULE_10__["default"],
  styleTween: _styleTween_js__WEBPACK_IMPORTED_MODULE_11__["default"],
  text: _text_js__WEBPACK_IMPORTED_MODULE_12__["default"],
  textTween: _textTween_js__WEBPACK_IMPORTED_MODULE_13__["default"],
  remove: _remove_js__WEBPACK_IMPORTED_MODULE_14__["default"],
  tween: _tween_js__WEBPACK_IMPORTED_MODULE_15__["default"],
  delay: _delay_js__WEBPACK_IMPORTED_MODULE_16__["default"],
  duration: _duration_js__WEBPACK_IMPORTED_MODULE_17__["default"],
  ease: _ease_js__WEBPACK_IMPORTED_MODULE_18__["default"],
  easeVarying: _easeVarying_js__WEBPACK_IMPORTED_MODULE_19__["default"],
  end: _end_js__WEBPACK_IMPORTED_MODULE_20__["default"],
  [Symbol.iterator]: selection_prototype[Symbol.iterator]
};


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/interpolate.js":
/*!******************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/interpolate.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-color */ "./node_modules/d3-color/src/color.js");
/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-interpolate */ "./node_modules/d3-interpolate/src/number.js");
/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-interpolate */ "./node_modules/d3-interpolate/src/rgb.js");
/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-interpolate */ "./node_modules/d3-interpolate/src/string.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  var c;
  return (typeof b === "number" ? d3_interpolate__WEBPACK_IMPORTED_MODULE_0__["default"]
      : b instanceof d3_color__WEBPACK_IMPORTED_MODULE_1__["default"] ? d3_interpolate__WEBPACK_IMPORTED_MODULE_2__["default"]
      : (c = (0,d3_color__WEBPACK_IMPORTED_MODULE_1__["default"])(b)) ? (b = c, d3_interpolate__WEBPACK_IMPORTED_MODULE_2__["default"])
      : d3_interpolate__WEBPACK_IMPORTED_MODULE_3__["default"])(a, b);
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/merge.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/merge.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-transition/src/transition/index.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(transition) {
  if (transition._id !== this._id) throw new Error;

  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Transition(merges, this._parents, this._name, this._id);
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/on.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/on.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _schedule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schedule.js */ "./node_modules/d3-transition/src/transition/schedule.js");


function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0, on1, sit = start(name) ? _schedule_js__WEBPACK_IMPORTED_MODULE_0__.init : _schedule_js__WEBPACK_IMPORTED_MODULE_0__.set;
  return function() {
    var schedule = sit(this, id),
        on = schedule.on;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

    schedule.on = on1;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, listener) {
  var id = this._id;

  return arguments.length < 2
      ? (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.get)(this.node(), id).on.on(name)
      : this.each(onFunction(id, name, listener));
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/remove.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/remove.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function removeFunction(id) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition) if (+i !== id) return;
    if (parent) parent.removeChild(this);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return this.on("end.remove", removeFunction(this._id));
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/schedule.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/schedule.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CREATED": () => (/* binding */ CREATED),
/* harmony export */   "ENDED": () => (/* binding */ ENDED),
/* harmony export */   "ENDING": () => (/* binding */ ENDING),
/* harmony export */   "RUNNING": () => (/* binding */ RUNNING),
/* harmony export */   "SCHEDULED": () => (/* binding */ SCHEDULED),
/* harmony export */   "STARTED": () => (/* binding */ STARTED),
/* harmony export */   "STARTING": () => (/* binding */ STARTING),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "get": () => (/* binding */ get),
/* harmony export */   "init": () => (/* binding */ init),
/* harmony export */   "set": () => (/* binding */ set)
/* harmony export */ });
/* harmony import */ var d3_dispatch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-dispatch */ "./node_modules/d3-dispatch/src/dispatch.js");
/* harmony import */ var d3_timer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-timer */ "./node_modules/d3-timer/src/timer.js");
/* harmony import */ var d3_timer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-timer */ "./node_modules/d3-timer/src/timeout.js");



var emptyOn = (0,d3_dispatch__WEBPACK_IMPORTED_MODULE_0__["default"])("start", "end", "cancel", "interrupt");
var emptyTween = [];

var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};
  else if (id in schedules) return;
  create(node, id, {
    name: name,
    index: index, // For context during callback.
    group: group, // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}

function init(node, id) {
  var schedule = get(node, id);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}

function set(node, id) {
  var schedule = get(node, id);
  if (schedule.state > STARTED) throw new Error("too late; already running");
  return schedule;
}

function get(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
  return schedule;
}

function create(node, id, self) {
  var schedules = node.__transition,
      tween;

  // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!
  schedules[id] = self;
  self.timer = (0,d3_timer__WEBPACK_IMPORTED_MODULE_1__.timer)(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time);

    // If the elapsed delay is less than our first sleep, start immediately.
    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o;

    // If the state is not SCHEDULED, then we previously errored on start.
    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue;

      // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!
      if (o.state === STARTED) return (0,d3_timer__WEBPACK_IMPORTED_MODULE_2__["default"])(start);

      // Interrupt the active transition, if any.
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }

      // Cancel any pre-empted transitions.
      else if (+i < id) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }

    // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.
    (0,d3_timer__WEBPACK_IMPORTED_MODULE_2__["default"])(function() {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    });

    // Dispatch the start event.
    // Note this must be done before the tween are initialized.
    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted
    self.state = STARTED;

    // Initialize the tween, deleting null tween.
    tween = new Array(n = self.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(node, t);
    }

    // Dispatch the end event.
    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];
    for (var i in schedules) return; // eslint-disable-line no-unused-vars
    delete node.__transition;
  }
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/select.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/select.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/selector.js");
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-transition/src/transition/index.js");
/* harmony import */ var _schedule_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schedule.js */ "./node_modules/d3-transition/src/transition/schedule.js");




/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(select) {
  var name = this._name,
      id = this._id;

  if (typeof select !== "function") select = (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"])(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        (0,_schedule_js__WEBPACK_IMPORTED_MODULE_1__["default"])(subgroup[i], name, id, i, subgroup, (0,_schedule_js__WEBPACK_IMPORTED_MODULE_1__.get)(node, id));
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_2__.Transition(subgroups, this._parents, name, id);
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/selectAll.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/selectAll.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/selectorAll.js");
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-transition/src/transition/index.js");
/* harmony import */ var _schedule_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schedule.js */ "./node_modules/d3-transition/src/transition/schedule.js");




/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(select) {
  var name = this._name,
      id = this._id;

  if (typeof select !== "function") select = (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"])(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select.call(node, node.__data__, i, group), child, inherit = (0,_schedule_js__WEBPACK_IMPORTED_MODULE_1__.get)(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            (0,_schedule_js__WEBPACK_IMPORTED_MODULE_1__["default"])(child, name, id, k, children, inherit);
          }
        }
        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_2__.Transition(subgroups, parents, name, id);
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/selection.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/selection.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/selection/index.js");


var Selection = d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"].prototype.constructor;

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return new Selection(this._groups, this._parents);
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/style.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/style.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-interpolate */ "./node_modules/d3-interpolate/src/transform/index.js");
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/selection/style.js");
/* harmony import */ var _schedule_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schedule.js */ "./node_modules/d3-transition/src/transition/schedule.js");
/* harmony import */ var _tween_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tween.js */ "./node_modules/d3-transition/src/transition/tween.js");
/* harmony import */ var _interpolate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interpolate.js */ "./node_modules/d3-transition/src/transition/interpolate.js");






function styleNull(name, interpolate) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0 = (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__.styleValue)(this, name),
        string1 = (this.style.removeProperty(name), (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__.styleValue)(this, name));
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}

function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function() {
    var string0 = (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__.styleValue)(this, name);
    return string0 === string1 ? null
        : string0 === string00 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function styleFunction(name, interpolate, value) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0 = (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__.styleValue)(this, name),
        value1 = value(this),
        string1 = value1 + "";
    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__.styleValue)(this, name));
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function styleMaybeRemove(id, name) {
  var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;
  return function() {
    var schedule = (0,_schedule_js__WEBPACK_IMPORTED_MODULE_1__.set)(this, id),
        on = schedule.on,
        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);

    schedule.on = on1;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value, priority) {
  var i = (name += "") === "transform" ? d3_interpolate__WEBPACK_IMPORTED_MODULE_2__.interpolateTransformCss : _interpolate_js__WEBPACK_IMPORTED_MODULE_3__["default"];
  return value == null ? this
      .styleTween(name, styleNull(name, i))
      .on("end.style." + name, styleRemove(name))
    : typeof value === "function" ? this
      .styleTween(name, styleFunction(name, i, (0,_tween_js__WEBPACK_IMPORTED_MODULE_4__.tweenValue)(this, "style." + name, value)))
      .each(styleMaybeRemove(this._id, name))
    : this
      .styleTween(name, styleConstant(name, i, value), priority)
      .on("end.style." + name, null);
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/styleTween.js":
/*!*****************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/styleTween.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function styleInterpolate(name, i, priority) {
  return function(t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}

function styleTween(name, value, priority) {
  var t, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }
  tween._value = value;
  return tween;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/text.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/text.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _tween_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tween.js */ "./node_modules/d3-transition/src/transition/tween.js");


function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  return this.tween("text", typeof value === "function"
      ? textFunction((0,_tween_js__WEBPACK_IMPORTED_MODULE_0__.tweenValue)(this, "text", value))
      : textConstant(value == null ? "" : value + ""));
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/textTween.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/textTween.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function textInterpolate(i) {
  return function(t) {
    this.textContent = i.call(this, t);
  };
}

function textTween(value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }
  tween._value = value;
  return tween;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  var key = "text";
  if (arguments.length < 1) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  return this.tween(key, textTween(value));
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/transition.js":
/*!*****************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/transition.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-transition/src/transition/index.js");
/* harmony import */ var _schedule_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schedule.js */ "./node_modules/d3-transition/src/transition/schedule.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var name = this._name,
      id0 = this._id,
      id1 = (0,_index_js__WEBPACK_IMPORTED_MODULE_0__.newId)();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = (0,_schedule_js__WEBPACK_IMPORTED_MODULE_1__.get)(node, id0);
        (0,_schedule_js__WEBPACK_IMPORTED_MODULE_1__["default"])(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Transition(groups, this._parents, name, id1);
}


/***/ }),

/***/ "./node_modules/d3-transition/src/transition/tween.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-transition/src/transition/tween.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "tweenValue": () => (/* binding */ tweenValue)
/* harmony export */ });
/* harmony import */ var _schedule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schedule.js */ "./node_modules/d3-transition/src/transition/schedule.js");


function tweenRemove(id, name) {
  var tween0, tween1;
  return function() {
    var schedule = (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.set)(this, id),
        tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error;
  return function() {
    var schedule = (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.set)(this, id),
        tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n) tween1.push(t);
    }

    schedule.tween = tween1;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value) {
  var id = this._id;

  name += "";

  if (arguments.length < 2) {
    var tween = (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.get)(this.node(), id).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
}

function tweenValue(transition, name, value) {
  var id = transition._id;

  transition.each(function() {
    var schedule = (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.set)(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });

  return function(node) {
    return (0,_schedule_js__WEBPACK_IMPORTED_MODULE_0__.get)(node, id).value[name];
  };
}


/***/ }),

/***/ "./node_modules/internmap/src/index.js":
/*!*********************************************!*\
  !*** ./node_modules/internmap/src/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InternMap": () => (/* binding */ InternMap),
/* harmony export */   "InternSet": () => (/* binding */ InternSet)
/* harmony export */ });
class InternMap extends Map {
  constructor(entries, key = keyof) {
    super();
    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
    if (entries != null) for (const [key, value] of entries) this.set(key, value);
  }
  get(key) {
    return super.get(intern_get(this, key));
  }
  has(key) {
    return super.has(intern_get(this, key));
  }
  set(key, value) {
    return super.set(intern_set(this, key), value);
  }
  delete(key) {
    return super.delete(intern_delete(this, key));
  }
}

class InternSet extends Set {
  constructor(values, key = keyof) {
    super();
    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
    if (values != null) for (const value of values) this.add(value);
  }
  has(value) {
    return super.has(intern_get(this, value));
  }
  add(value) {
    return super.add(intern_set(this, value));
  }
  delete(value) {
    return super.delete(intern_delete(this, value));
  }
}

function intern_get({_intern, _key}, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}

function intern_set({_intern, _key}, value) {
  const key = _key(value);
  if (_intern.has(key)) return _intern.get(key);
  _intern.set(key, value);
  return value;
}

function intern_delete({_intern, _key}, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(key);
    _intern.delete(key);
  }
  return value;
}

function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/ascending.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/ascending.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ascending)
/* harmony export */ });
function ascending(a, b) {
  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/bisect.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/bisect.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bisectCenter": () => (/* binding */ bisectCenter),
/* harmony export */   "bisectLeft": () => (/* binding */ bisectLeft),
/* harmony export */   "bisectRight": () => (/* binding */ bisectRight),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ascending_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ascending.js */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/ascending.js");
/* harmony import */ var _bisector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bisector.js */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/bisector.js");
/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./number.js */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/number.js");




const ascendingBisect = (0,_bisector_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_ascending_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
const bisectRight = ascendingBisect.right;
const bisectLeft = ascendingBisect.left;
const bisectCenter = (0,_bisector_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_number_js__WEBPACK_IMPORTED_MODULE_2__["default"]).center;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (bisectRight);


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/bisector.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/bisector.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ bisector)
/* harmony export */ });
/* harmony import */ var _ascending_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ascending.js */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/ascending.js");
/* harmony import */ var _descending_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./descending.js */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/descending.js");



function bisector(f) {
  let compare1, compare2, delta;

  // If an accessor is specified, promote it to a comparator. In this case we
  // can test whether the search value is (self-) comparable. We can’t do this
  // for a comparator (except for specific, known comparators) because we can’t
  // tell if the comparator is symmetric, and an asymmetric comparator can’t be
  // used to test whether a single value is comparable.
  if (f.length !== 2) {
    compare1 = _ascending_js__WEBPACK_IMPORTED_MODULE_0__["default"];
    compare2 = (d, x) => (0,_ascending_js__WEBPACK_IMPORTED_MODULE_0__["default"])(f(d), x);
    delta = (d, x) => f(d) - x;
  } else {
    compare1 = f === _ascending_js__WEBPACK_IMPORTED_MODULE_0__["default"] || f === _descending_js__WEBPACK_IMPORTED_MODULE_1__["default"] ? f : zero;
    compare2 = f;
    delta = f;
  }

  function left(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = (lo + hi) >>> 1;
        if (compare2(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }

  function right(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = (lo + hi) >>> 1;
        if (compare2(a[mid], x) <= 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }

  function center(a, x, lo = 0, hi = a.length) {
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }

  return {left, center, right};
}

function zero() {
  return 0;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/descending.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/descending.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ descending)
/* harmony export */ });
function descending(a, b) {
  return a == null || b == null ? NaN
    : b < a ? -1
    : b > a ? 1
    : b >= a ? 0
    : NaN;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/max.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/max.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ max)
/* harmony export */ });
function max(values, valueof) {
  let max;
  if (valueof === undefined) {
    for (const value of values) {
      if (value != null
          && (max < value || (max === undefined && value >= value))) {
        max = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null
          && (max < value || (max === undefined && value >= value))) {
        max = value;
      }
    }
  }
  return max;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/min.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/min.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ min)
/* harmony export */ });
function min(values, valueof) {
  let min;
  if (valueof === undefined) {
    for (const value of values) {
      if (value != null
          && (min > value || (min === undefined && value >= value))) {
        min = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null
          && (min > value || (min === undefined && value >= value))) {
        min = value;
      }
    }
  }
  return min;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/number.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/number.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ number),
/* harmony export */   "numbers": () => (/* binding */ numbers)
/* harmony export */ });
function number(x) {
  return x === null ? NaN : +x;
}

function* numbers(values, valueof) {
  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        yield value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        yield value;
      }
    }
  }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*****************************************!*\
  !*** ./.tmp/precompile/visualPlugin.ts ***!
  \*****************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_visual__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/visual */ "./src/visual.ts");

var powerbiKey = "powerbi";
var powerbi = window[powerbiKey];
var scatterChartByAkvelon6CFB0DAB29E746BE850B6DFD1E2789FD = {
  name: 'scatterChartByAkvelon6CFB0DAB29E746BE850B6DFD1E2789FD',
  displayName: 'Scatter Chart by Akvelon 2.0.5',
  "class": 'Visual',
  apiVersion: '4.7.0',
  create: function create(options) {
    if (_src_visual__WEBPACK_IMPORTED_MODULE_0__.Visual) {
      return new _src_visual__WEBPACK_IMPORTED_MODULE_0__.Visual(options);
    }
    throw 'Visual instance not found';
  },
  createModalDialog: function createModalDialog(dialogId, options, initialState) {
    var dialogRegistry = globalThis.dialogRegistry;
    if (dialogId in dialogRegistry) {
      new dialogRegistry[dialogId](options, initialState);
    }
  },
  custom: true
};
if (typeof powerbi !== "undefined") {
  powerbi.visuals = powerbi.visuals || {};
  powerbi.visuals.plugins = powerbi.visuals.plugins || {};
  powerbi.visuals.plugins["scatterChartByAkvelon6CFB0DAB29E746BE850B6DFD1E2789FD"] = scatterChartByAkvelon6CFB0DAB29E746BE850B6DFD1E2789FD;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (scatterChartByAkvelon6CFB0DAB29E746BE850B6DFD1E2789FD);
})();

scatterChartByAkvelon6CFB0DAB29E746BE850B6DFD1E2789FD = __webpack_exports__;
/******/ })()
;