var stackedColumnChartByAkvelonCC88FD95630A41AC8562F09033A48946;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/behavior.ts":
/*!*************************!*\
  !*** ./src/behavior.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebBehavior": () => (/* binding */ WebBehavior)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./src/utils.ts");
/* harmony import */ var _visual__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./visual */ "./src/visual.ts");


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var WebBehavior = /*#__PURE__*/function () {
  function WebBehavior(visual) {
    _classCallCheck(this, WebBehavior);
    this.visual = visual;
  }
  _createClass(WebBehavior, [{
    key: "bindEvents",
    value: function bindEvents(options, selectionHandler) {
      this.options = options;
      this.visual.webBehaviorSelectionHandler = selectionHandler;
    }
  }, {
    key: "renderSelection",
    value: function renderSelection(hasSelection) {
      var hasHighlight = this.visual.getAllDataPoints().filter(function (x) {
        return x.highlight;
      }).length > 0;
      this.options.bars.style("fill-opacity", function (p) {
        return _utils__WEBPACK_IMPORTED_MODULE_0__.getFillOpacity(p.selected, p.highlight, !p.highlight && hasSelection, !p.selected && hasHighlight);
      }).style("stroke", function (p) {
        if (hasSelection && _utils__WEBPACK_IMPORTED_MODULE_0__.isSelected(p.selected, p.highlight, !p.highlight && hasSelection, !p.selected && hasHighlight)) {
          return _visual__WEBPACK_IMPORTED_MODULE_1__.Visual.DefaultStrokeSelectionColor;
        }
        return p.color;
      }).style("stroke-width", function (p) {
        if (hasSelection && _utils__WEBPACK_IMPORTED_MODULE_0__.isSelected(p.selected, p.highlight, !p.highlight && hasSelection, !p.selected && hasHighlight)) {
          return _visual__WEBPACK_IMPORTED_MODULE_1__.Visual.DefaultStrokeSelectionWidth;
        }
        return _visual__WEBPACK_IMPORTED_MODULE_1__.Visual.DefaultStrokeWidth;
      }).style("stroke-opacity", function () {
        return hasSelection || hasHighlight ? 1 : 0;
      });
    }
  }]);
  return WebBehavior;
}();

/***/ }),

/***/ "./src/customLegendBehavior.ts":
/*!*************************************!*\
  !*** ./src/customLegendBehavior.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CustomLegendBehavior": () => (/* binding */ CustomLegendBehavior)
/* harmony export */ });


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var CustomLegendBehavior = /*#__PURE__*/function () {
  function CustomLegendBehavior(saveSelection) {
    _classCallCheck(this, CustomLegendBehavior);
    this.saveSelection = saveSelection;
  }
  _createClass(CustomLegendBehavior, [{
    key: "bindEvents",
    value: function bindEvents(options, selectionHandler) {
      var _this = this;
      var legendItems = options.legendItems;
      this.legendIcons = options.legendIcons;
      var clearCatcher = options.clearCatcher;
      legendItems.on("click", function (event, d) {
        selectionHandler.handleSelection(d, event.ctrlKey);
        _this.saveSelection();
      });
      clearCatcher.on("click", function () {
        selectionHandler.handleClearSelection();
        _this.saveSelection();
      });
    }
  }, {
    key: "renderSelection",
    value: function renderSelection(hasSelection) {
      if (hasSelection) {
        this.legendIcons.style("fill", function (d) {
          if (!d.selected) {
            return CustomLegendBehavior.dimmedLegendColor;
          } else {
            return d.color;
          }
        });
      } else {
        this.legendIcons.style("fill", function (d) {
          return d.color;
        });
      }
    }
  }]);
  return CustomLegendBehavior;
}();
CustomLegendBehavior.dimmedLegendColor = "#A6A6A6";

/***/ }),

/***/ "./src/dataViewConverter.ts":
/*!**********************************!*\
  !*** ./src/dataViewConverter.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataViewConverter": () => (/* binding */ DataViewConverter)
/* harmony export */ });
/* harmony import */ var _visualInterfaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./visualInterfaces */ "./src/visualInterfaces.ts");
/* harmony import */ var powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/converterHelper.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var powerbi_visuals_utils_colorutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-colorutils */ "./node_modules/powerbi-visuals-utils-colorutils/lib/index.js");


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }




var DataViewConverter = /*#__PURE__*/function () {
  function DataViewConverter() {
    _classCallCheck(this, DataViewConverter);
  }
  _createClass(DataViewConverter, null, [{
    key: "Convert",
    value: function Convert(dataView, hostService, settings, legendColors) {
      if (this.IsAxisAndLegendSameField(dataView)) {
        return this.GetDataPointsForSameAxisAndLegend(dataView, hostService, legendColors);
      } else if (this.IsLegendFilled(dataView)) {
        return this.GetDataPointsForLegend(dataView, hostService, legendColors);
      } else if (this.IsMultipleValues(dataView)) {
        return this.GetDataPointsForMultipleValues(dataView, hostService, legendColors);
      }
      return this.GetDataPointsWithoutLegend(dataView, hostService, settings);
    }
  }, {
    key: "IsLegendNeeded",
    value: function IsLegendNeeded(dataView) {
      return this.IsLegendFilled(dataView) || this.IsMultipleValues(dataView);
    }
  }, {
    key: "IsAxisAndLegendSameField",
    value: function IsAxisAndLegendSameField(dataView) {
      var columns = dataView.categorical.values;
      if (columns.source && columns.source.roles["Legend" /* Field.Legend */] && columns.source.roles["Axis" /* Field.Axis */]) {
        return true;
      }
      return false;
    }
  }, {
    key: "IsAxisFilled",
    value: function IsAxisFilled(dataView) {
      if (dataView.categorical && dataView.categorical.values && dataView.categorical.values.source && dataView.categorical.values.source.roles["Axis" /* Field.Axis */]) {
        return true;
      }
      var columns = dataView.categorical.categories;
      if (columns && columns.filter(function (x) {
        return x.source && x.source.roles["Axis" /* Field.Axis */];
      }).length) {
        return true;
      }
      return false;
    }
  }, {
    key: "IsCategoryFilled",
    value: function IsCategoryFilled(dataView, categoryField) {
      if ((dataView === null || dataView === void 0 ? void 0 : dataView.categorical) && dataView.categorical.values && dataView.categorical.values.source && dataView.categorical.values.source.roles[categoryField]) {
        return true;
      }
      var columns = dataView.categorical.categories;
      if (columns && columns.filter(function (x) {
        return x.source && x.source.roles[categoryField];
      }).length) {
        return true;
      }
      return false;
    }
  }, {
    key: "IsValueFilled",
    value: function IsValueFilled(dataView) {
      var columns = dataView.categorical.values;
      if (!columns) {
        return false;
      }
      if (columns.source && columns.source.roles["Value" /* Field.Value */] || columns.filter(function (x) {
        return x.source && x.source.roles["Value" /* Field.Value */];
      }).length) {
        return true;
      }
      return false;
    }
  }, {
    key: "IsLegendFilled",
    value: function IsLegendFilled(dataView) {
      var columns = dataView.categorical.values;
      if (columns.source && columns.source.roles["Legend" /* Field.Legend */]) {
        return true;
      }
      return false;
    }
  }, {
    key: "IsMultipleValues",
    value: function IsMultipleValues(dataView) {
      var columns = dataView.metadata.columns;
      var valueFieldsCount = 0;
      for (var columnName in columns) {
        var column = columns[columnName];
        if (column.roles && column.roles["Value" /* Field.Value */]) {
          ++valueFieldsCount;
          if (valueFieldsCount > 1) {
            return true;
          }
        }
      }
      return false;
    }
    // Legend bucket is filled
  }, {
    key: "GetDataPointsForSameAxisAndLegend",
    value: function GetDataPointsForSameAxisAndLegend(dataView, hostService, legendColors) {
      var _this = this;
      var columns = this.GetGroupedValueColumns(dataView);
      var data = [];
      var seriesColumn = columns["GroupedValues" /* Field.GroupedValues */];
      var groupedValues = seriesColumn.grouped ? seriesColumn.grouped() : null;
      columns["Legend" /* Field.Legend */].forEach(function (legend, k) {
        var value = columns["Value" /* Field.Value */][k].values[0];
        var color = legendColors[k];
        var tooltipItems = [];
        var groupMetadata = columns["GroupedValues" /* Field.GroupedValues */].source,
          valueMetadata = columns["Value" /* Field.Value */][k].source;
        tooltipItems.push(_this.createTooltipData(groupMetadata, legend));
        tooltipItems.push(_this.createTooltipData(valueMetadata, value));
        if (columns["Tooltips" /* Field.Tooltips */] && columns["Tooltips" /* Field.Tooltips */] instanceof Array && columns["Tooltips" /* Field.Tooltips */].length) {
          columns["Tooltips" /* Field.Tooltips */].filter(function (x) {
            return x.source.groupName === legend;
          }).forEach(function (tooltipColumn) {
            var tooltipValue = tooltipColumn.values[k],
              tooltipMetadata = tooltipColumn.source;
            tooltipItems.push(_this.createTooltipData(tooltipMetadata, tooltipValue));
          });
        }
        var identity = hostService.createSelectionIdBuilder().withSeries(columns["GroupedValues" /* Field.GroupedValues */], groupedValues[k]).withMeasure(seriesColumn[k].source.queryName).createSelectionId();
        if (value != null) {
          data.push({
            category: legend !== 0 && !legend ? _this.Blank : legend,
            series: legend,
            value: value,
            valueForHeight: value > 0 ? value : -value,
            shiftValue: value < 0 ? value : 0,
            sum: value,
            selected: false,
            identity: identity,
            color: color,
            tooltips: tooltipItems
          });
          var highlightValue = columns["Value" /* Field.Value */][k].highlights ? columns["Value" /* Field.Value */][k].highlights[0] : null;
          if (highlightValue != null) {
            var highlightTooltipItems = tooltipItems.slice();
            highlightTooltipItems.push(_this.createTooltipData(valueMetadata, highlightValue, _this.Highlighted));
            data.push({
              category: legend !== 0 && !legend ? _this.Blank : legend,
              series: legend,
              valueForHeight: highlightValue > 0 ? highlightValue : -highlightValue,
              value: highlightValue,
              shiftValue: highlightValue < 0 ? highlightValue : 0,
              selected: false,
              identity: identity,
              highlight: true,
              color: color,
              tooltips: highlightTooltipItems
            });
          }
        }
      });
      return data;
    }
    // Legend bucket is filled
  }, {
    key: "GetDataPointsForLegend",
    value: function GetDataPointsForLegend(dataView, hostService, legendColors) {
      var _this2 = this;
      var columns = this.GetGroupedValueColumns(dataView);
      var data = [];
      var categoryColumn = columns["Axis" /* Field.Axis */][0],
        seriesColumn = columns["GroupedValues" /* Field.GroupedValues */],
        groupedValues = seriesColumn.grouped ? seriesColumn.grouped() : null;
      categoryColumn.values.forEach(function (categoryValue, i) {
        var sum = 0;
        var negativeSum = 0;
        var columnBy = columns["ColumnBy" /* Field.ColumnBy */] && columns["ColumnBy" /* Field.ColumnBy */][0].values[i],
          rowBy = columns["RowBy" /* Field.RowBy */] && columns["RowBy" /* Field.RowBy */][0].values[i];
        columns["Legend" /* Field.Legend */].forEach(function (legend, k) {
          var value = columns["Value" /* Field.Value */][k].values[i];
          var color = legendColors[k];
          var identity = hostService.createSelectionIdBuilder().withCategory(categoryColumn, i).withSeries(seriesColumn, groupedValues[k]).withMeasure(seriesColumn[k].source.queryName).createSelectionId();
          if (value != null) {
            var tooltipItems = [];
            var categoryMetadata = categoryColumn.source,
              groupMetadata = columns["GroupedValues" /* Field.GroupedValues */].source,
              valueMetadata = columns["Value" /* Field.Value */][k].source;
            tooltipItems.push(_this2.createTooltipData(categoryMetadata, categoryValue));
            tooltipItems.push(_this2.createTooltipData(groupMetadata, legend));
            tooltipItems.push(_this2.createTooltipData(valueMetadata, value));
            if (columns["Tooltips" /* Field.Tooltips */] && columns["Tooltips" /* Field.Tooltips */] instanceof Array && columns["Tooltips" /* Field.Tooltips */].length) {
              columns["Tooltips" /* Field.Tooltips */].filter(function (x) {
                return x.source.groupName === legend;
              }).forEach(function (tooltipColumn) {
                var tooltipValue = tooltipColumn.values[i],
                  tooltipMetadata = tooltipColumn.source;
                tooltipItems.push(_this2.createTooltipData(tooltipMetadata, tooltipValue));
              });
            }
            data.push({
              category: categoryValue !== 0 && !categoryValue ? '(Blank)' : categoryValue,
              series: legend,
              value: value,
              valueForHeight: value > 0 ? value : -value,
              shiftValue: value >= 0 ? sum : negativeSum + value,
              sum: value >= 0 ? sum + value : negativeSum + value,
              selected: false,
              identity: identity,
              tooltips: tooltipItems,
              color: color,
              columnBy: columnBy,
              rowBy: rowBy
            });
            var highlightValue = columns["Value" /* Field.Value */][k].highlights ? columns["Value" /* Field.Value */][k].highlights[i] : null;
            if (highlightValue != null) {
              var highlightTooltipItems = tooltipItems.slice();
              highlightTooltipItems.push(_this2.createTooltipData(valueMetadata, highlightValue, _this2.Highlighted));
              data.push({
                category: categoryValue !== 0 && !categoryValue ? '(Blank)' : categoryValue,
                series: legend,
                value: highlightValue,
                valueForHeight: highlightValue > 0 ? highlightValue : -highlightValue,
                shiftValue: value >= 0 ? sum : negativeSum + highlightValue,
                selected: false,
                identity: identity,
                highlight: true,
                tooltips: highlightTooltipItems,
                color: color,
                columnBy: columnBy,
                rowBy: rowBy
              });
            }
            sum += value > 0 ? value : 0;
            negativeSum += value < 0 ? value : 0;
          }
        });
      });
      return data;
    }
    // Legend bucket is empty. Used multiple fields in "Value" bucket
  }, {
    key: "GetDataPointsForMultipleValues",
    value: function GetDataPointsForMultipleValues(dataView, hostService, legendColors) {
      var _this3 = this;
      var columns = this.GetColumnsForMultipleValues(dataView);
      var data = [];
      var categoryColumn = columns["Axis" /* Field.Axis */][0];
      categoryColumn.values.forEach(function (category, i) {
        var sum = 0;
        var negativeSum = 0;
        var columnBy = columns["ColumnBy" /* Field.ColumnBy */] && columns["ColumnBy" /* Field.ColumnBy */][0].values[i],
          rowBy = columns["RowBy" /* Field.RowBy */] && columns["RowBy" /* Field.RowBy */][0].values[i];
        if (columns["Value" /* Field.Value */] instanceof Array) {
          columns["Value" /* Field.Value */].forEach(function (valueColumn, k) {
            var value = valueColumn.values[i];
            var color = legendColors[k];
            var identity = hostService.createSelectionIdBuilder().withCategory(categoryColumn, i).withMeasure(columns.Value[k].source.queryName).createSelectionId();
            if (value != null) {
              var tooltipItems = [];
              var categoryMetadata = categoryColumn.source,
                valueMetadata = valueColumn.source;
              tooltipItems.push(_this3.createTooltipData(categoryMetadata, category));
              tooltipItems.push(_this3.createTooltipData(valueMetadata, value));
              if (columns["Tooltips" /* Field.Tooltips */] && columns["Tooltips" /* Field.Tooltips */] instanceof Array && columns["Tooltips" /* Field.Tooltips */].length) {
                columns["Tooltips" /* Field.Tooltips */].forEach(function (tooltipColumn) {
                  var tooltipValue = tooltipColumn.values[i],
                    tooltipMetadata = tooltipColumn.source;
                  tooltipItems.push(_this3.createTooltipData(tooltipMetadata, tooltipValue));
                });
              }
              data.push({
                category: category !== 0 && !category ? '(Blank)' : category,
                value: value,
                valueForHeight: value > 0 ? value : -value,
                shiftValue: value >= 0 ? sum : negativeSum + value,
                sum: value >= 0 ? sum + value : negativeSum + value,
                selected: false,
                identity: identity,
                tooltips: tooltipItems,
                color: color,
                columnBy: columnBy,
                rowBy: rowBy
              });
              var highlightValue = valueColumn.highlights ? valueColumn.highlights[i] : null;
              if (highlightValue != null) {
                var highlightTooltipItems = tooltipItems.slice();
                highlightTooltipItems.push(_this3.createTooltipData(valueMetadata, highlightValue, _this3.Highlighted));
                data.push({
                  category: category !== 0 && !category ? '(Blank)' : category,
                  value: highlightValue,
                  valueForHeight: highlightValue > 0 ? highlightValue : -highlightValue,
                  shiftValue: value >= 0 ? sum : negativeSum + highlightValue,
                  selected: false,
                  identity: identity,
                  highlight: true,
                  tooltips: tooltipItems,
                  color: color,
                  columnBy: columnBy,
                  rowBy: rowBy
                });
              }
              sum += value > 0 ? value : 0;
              negativeSum += value < 0 ? value : 0;
            }
          });
        }
      });
      return data;
    }
    // Legend bucket is empty. Single field in "Value" bucket
  }, {
    key: "GetDataPointsWithoutLegend",
    value: function GetDataPointsWithoutLegend(dataView, hostService, settings) {
      var _this4 = this;
      var columns = this.GetColumnsWithNoLegend(dataView);
      var data = [];
      var categoryColumn = columns["Axis" /* Field.Axis */][0];
      var colorHelper = new powerbi_visuals_utils_colorutils__WEBPACK_IMPORTED_MODULE_1__.ColorHelper(hostService.colorPalette, {
        objectName: 'dataPoint',
        propertyName: 'fill'
      }, settings.dataPoint.fill);
      categoryColumn.values.forEach(function (category, i) {
        var sum = 0;
        var negativeSum = 0;
        var value = columns["Value" /* Field.Value */].values[i],
          colorSaturationCol = columns["Gradient" /* Field.Gradient */],
          colorSaturation = colorSaturationCol && colorSaturationCol.values[i] ? columns["Gradient" /* Field.Gradient */].values[i] : null;
        var columnBy = columns["ColumnBy" /* Field.ColumnBy */] && columns["ColumnBy" /* Field.ColumnBy */][0].values[i],
          rowBy = columns["RowBy" /* Field.RowBy */] && columns["RowBy" /* Field.RowBy */][0].values[i];
        var identity = hostService.createSelectionIdBuilder().withCategory(categoryColumn, i).createSelectionId();
        if (value != null) {
          var color = colorHelper.getColorForMeasure(categoryColumn.objects && categoryColumn.objects[i], '');
          var tooltipItems = [];
          var categoryMetadata = categoryColumn.source;
          var valueMetadata = columns["Value" /* Field.Value */].source;
          tooltipItems.push(_this4.createTooltipData(categoryMetadata, category));
          tooltipItems.push(_this4.createTooltipData(valueMetadata, value));
          if (columns["Tooltips" /* Field.Tooltips */] && columns["Tooltips" /* Field.Tooltips */] instanceof Array && columns["Tooltips" /* Field.Tooltips */].length) {
            columns["Tooltips" /* Field.Tooltips */].forEach(function (tooltipColumn) {
              var tooltipValue = tooltipColumn.values[i],
                tooltipMetadata = tooltipColumn.source;
              tooltipItems.push(_this4.createTooltipData(tooltipMetadata, tooltipValue));
            });
          }
          data.push({
            category: category !== 0 && !category ? '(Blank)' : category,
            value: value,
            valueForHeight: value > 0 ? value : -value,
            shiftValue: value >= 0 ? sum : negativeSum + value,
            sum: value >= 0 ? sum + value : negativeSum + value,
            colorSaturation: colorSaturation,
            selected: false,
            identity: identity,
            color: color,
            tooltips: tooltipItems,
            columnBy: columnBy,
            rowBy: rowBy
          });
          var highlightValue = columns["Value" /* Field.Value */].highlights ? columns["Value" /* Field.Value */].highlights[i] : null;
          if (highlightValue != null) {
            var highlightTooltipItems = tooltipItems.slice();
            highlightTooltipItems.push(_this4.createTooltipData(valueMetadata, highlightValue, _this4.Highlighted));
            data.push({
              category: category !== 0 && !category ? '(Blank)' : category,
              value: highlightValue,
              valueForHeight: highlightValue > 0 ? highlightValue : -highlightValue,
              shiftValue: value >= 0 ? sum : negativeSum + highlightValue,
              sum: sum + value,
              selected: false,
              identity: identity,
              highlight: true,
              color: color,
              tooltips: highlightTooltipItems,
              columnBy: columnBy,
              rowBy: rowBy
            });
          }
          sum += value > 0 ? value : 0;
          negativeSum += value < 0 ? value : 0;
        }
      });
      return data;
    }
  }, {
    key: "GetGroupedValueColumns",
    value: function GetGroupedValueColumns(dataView) {
      var categorical = dataView && dataView.categorical;
      var categories = categorical && categorical.categories || [];
      var values = categorical && categorical.values;
      var series = categorical && values.source && this.getSeriesValues(dataView);
      var grouped = values && values.grouped();
      var data = new _visualInterfaces__WEBPACK_IMPORTED_MODULE_0__.VisualColumns();
      if (grouped) {
        data["GroupedValues" /* Field.GroupedValues */] = values;
        grouped.forEach(function (x) {
          var _loop = function _loop(prop) {
            var columnArray = x.values.filter(function (y) {
              return y.source.roles[prop];
            });
            if (columnArray.length) {
              if (!data[prop]) {
                data[prop] = columnArray;
              } else {
                var _data$prop;
                (_data$prop = data[prop]).push.apply(_data$prop, _toConsumableArray(columnArray));
              }
            }
          };
          for (var prop in data) {
            _loop(prop);
          }
        });
      }
      if (categorical) {
        var _loop2 = function _loop2(prop) {
          var columnArray = categories.filter(function (y) {
            return y.source.roles[prop];
          });
          if (columnArray.length) {
            data[prop] = columnArray;
          }
        };
        for (var prop in data) {
          _loop2(prop);
        }
      }
      if (series) {
        data["Legend" /* Field.Legend */] = series.filter(function (v, i, a) {
          return a.indexOf(v) === i;
        });
      }
      return data;
    }
  }, {
    key: "GetColumnsForMultipleValues",
    value: function GetColumnsForMultipleValues(dataView) {
      var categorical = dataView && dataView.categorical;
      var categories = categorical && categorical.categories || [];
      var values = categorical && categorical.values;
      var data = new _visualInterfaces__WEBPACK_IMPORTED_MODULE_0__.VisualColumns();
      if (categorical && values) {
        var valueColumns = values.filter(function (y) {
          return y.source.roles["Value" /* Field.Value */];
        });
        if (valueColumns.length) {
          if (!data["Value" /* Field.Value */]) {
            data["Value" /* Field.Value */] = valueColumns;
          }
        }
        var toolipColumns = values.filter(function (y) {
          return y.source.roles["Tooltips" /* Field.Tooltips */];
        });
        if (toolipColumns.length) {
          if (!data["Tooltips" /* Field.Tooltips */]) {
            data["Tooltips" /* Field.Tooltips */] = toolipColumns;
          }
        }
        var _loop3 = function _loop3(prop) {
          var columnArray = categories.filter(function (y) {
            return y.source.roles[prop];
          });
          if (columnArray.length) {
            data[prop] = columnArray;
          }
        };
        for (var prop in data) {
          _loop3(prop);
        }
      }
      return data;
    }
  }, {
    key: "GetColumnsWithNoLegend",
    value: function GetColumnsWithNoLegend(dataView) {
      var categorical = dataView && dataView.categorical;
      var categories = categorical && categorical.categories || [];
      var values = categorical && categorical.values;
      var data = new _visualInterfaces__WEBPACK_IMPORTED_MODULE_0__.VisualColumns();
      if (categorical && values) {
        var valueColumns = values.filter(function (y) {
          return y.source.roles["Value" /* Field.Value */];
        });
        if (valueColumns.length) {
          if (!data["Value" /* Field.Value */]) {
            data["Value" /* Field.Value */] = valueColumns[0];
          }
        }
        var toolipColumns = values.filter(function (y) {
          return y.source.roles["Tooltips" /* Field.Tooltips */];
        });
        if (toolipColumns.length) {
          if (!data["Tooltips" /* Field.Tooltips */]) {
            data["Tooltips" /* Field.Tooltips */] = toolipColumns;
          }
        }
        var _loop4 = function _loop4(prop) {
          var columnArray = categories.filter(function (y) {
            return y.source.roles[prop];
          });
          if (columnArray.length) {
            data[prop] = columnArray;
          }
        };
        for (var prop in data) {
          _loop4(prop);
        }
      }
      return data;
    }
  }, {
    key: "createTooltipData",
    value: function createTooltipData(metadataColumn, value, displayName) {
      return {
        displayName: displayName ? displayName : metadataColumn.displayName,
        value: this.getFormattedValue(metadataColumn, value)
      };
    }
  }, {
    key: "getSeriesValues",
    value: function getSeriesValues(dataView) {
      return dataView && dataView.categorical && dataView.categorical.values && dataView.categorical.values.map(function (x) {
        return powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_2__.converterHelper.getSeriesName(x.source);
      });
    }
  }, {
    key: "getFormattedValue",
    value: function getFormattedValue(column, value) {
      var formatString = this.getFormatStringFromColumn(column);
      return powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_3__.valueFormatter.format(value, formatString);
    }
  }, {
    key: "getFormatStringFromColumn",
    value: function getFormatStringFromColumn(column) {
      if (column) {
        var formatString = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_3__.valueFormatter.getFormatStringByColumn(column, false);
        return formatString || column.format;
      }
      return null;
    }
  }]);
  return DataViewConverter;
}();
DataViewConverter.Highlighted = 'Highlighted';
DataViewConverter.Blank = '(Blank)';

/***/ }),

/***/ "./src/enumerateObject.ts":
/*!********************************!*\
  !*** ./src/enumerateObject.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EnumerateObject": () => (/* binding */ EnumerateObject)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_colorutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-colorutils */ "./node_modules/powerbi-visuals-utils-colorutils/lib/index.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* eslint-disable max-lines-per-function */


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var EnumerateObject = /*#__PURE__*/function () {
  function EnumerateObject() {
    _classCallCheck(this, EnumerateObject);
  }
  _createClass(EnumerateObject, null, [{
    key: "fillDataPointInstancesForLegend",
    value: function fillDataPointInstancesForLegend(visualData, instances) {
      for (var index in visualData.legendData.dataPoints) {
        var dataPoint = visualData.legendData.dataPoints[index];
        instances.push({
          objectName: "dataPoint",
          displayName: dataPoint.label,
          selector: powerbi_visuals_utils_colorutils__WEBPACK_IMPORTED_MODULE_0__.ColorHelper.normalizeSelector(dataPoint.identity.getSelector(), false),
          properties: {
            fill: {
              solid: {
                color: dataPoint.color
              }
            }
          }
        });
      }
    }
  }, {
    key: "fillDataPointInstancesForNoLegend",
    value: function fillDataPointInstancesForNoLegend(visualData, instances) {
      for (var index in visualData.dataPoints) {
        var dataPoint = visualData.dataPoints[index];
        instances.push({
          objectName: "dataPoint",
          displayName: dataPoint.category.toString(),
          selector: powerbi_visuals_utils_colorutils__WEBPACK_IMPORTED_MODULE_0__.ColorHelper.normalizeSelector(dataPoint.identity.getSelector(), false),
          properties: {
            fill: {
              solid: {
                color: dataPoint.color
              }
            }
          }
        });
      }
    }
  }, {
    key: "setInstances",
    value: function setInstances(settings, instanceEnumeration, yIsScalar, visualData) {
      var instances = instanceEnumeration.instances;
      var instance = instances[0];
      var isSmallMultiple = visualData.isSmallMultiple;
      var isCategorical = settings.categoryAxis.axisType === "categorical";
      switch (instance.objectName) {
        case "dataPoint":
          {
            if (visualData && visualData.legendData && visualData.legendData.dataPoints && visualData.legendData.dataPoints.length) {
              this.fillDataPointInstancesForLegend(visualData, instances);
              delete instance.properties["fill"];
              delete instance.properties["showAllDataPoints"];
            } else if (visualData && visualData.dataPoints && settings.dataPoint.showAllDataPoints) {
              this.fillDataPointInstancesForNoLegend(visualData, instances);
            }
            break;
          }
        case "categoryLabels":
          {
            if (!settings.categoryLabels.showBackground) {
              delete instance.properties["transparency"];
              delete instance.properties["backgroundColor"];
            }
            if (settings.categoryLabels.labelPosition === _settings__WEBPACK_IMPORTED_MODULE_1__.LabelPosition.OutsideEnd) {
              delete instance.properties["overflowText"];
            }
            if (visualData && visualData.legendData && visualData.legendData.dataPoints && visualData.legendData.dataPoints.length) {
              delete instance.properties["labelPosition"];
            } else {
              delete instance.properties["labelPositionForFilledLegend"];
            }
            break;
          }
        case "categoryAxis":
          {
            if (!settings.categoryAxis.showTitle) {
              delete instance.properties["titleStyle"];
              delete instance.properties["axisTitleColor"];
              delete instance.properties["axisTitle"];
              delete instance.properties["titleFontSize"];
              delete instance.properties["titleFontFamily"];
            }
            if (!isSmallMultiple) {
              delete instance.properties["rangeType"];
              delete instance.properties["rangeTypeNoScalar"];
            } else {
              if (yIsScalar && !isCategorical) {
                delete instance.properties["rangeTypeNoScalar"];
              } else {
                delete instance.properties["rangeType"];
              }
            }
            if (yIsScalar) {
              if (settings.categoryAxis.axisType === "categorical") {
                delete instance.properties["axisScale"];
                delete instance.properties["axisStyle"];
                delete instance.properties["displayUnits"];
                delete instance.properties["precision"];
                delete instance.properties["start"];
                delete instance.properties["end"];
              } else if (settings.categoryAxis.axisType === "continuous") {
                delete instance.properties["minCategoryWidth"];
                delete instance.properties["maximumSize"];
                delete instance.properties["innerPadding"];
                if (visualData.isSmallMultiple) {
                  if (settings.categoryAxis.rangeType !== _settings__WEBPACK_IMPORTED_MODULE_1__.AxisRangeType.Custom) {
                    delete instance.properties["start"];
                    delete instance.properties["end"];
                  }
                }
              }
            } else {
              delete instance.properties["axisType"];
              delete instance.properties["axisScale"];
              delete instance.properties["axisStyle"];
              delete instance.properties["displayUnits"];
              delete instance.properties["precision"];
              delete instance.properties["start"];
              delete instance.properties["end"];
            }
            break;
          }
        case "valueAxis":
          {
            if (!isSmallMultiple) {
              delete instance.properties["rangeType"];
            } else if (settings.valueAxis.rangeType !== _settings__WEBPACK_IMPORTED_MODULE_1__.AxisRangeType.Custom) {
              delete instance.properties["start"];
              delete instance.properties["end"];
            }
            if (!settings.valueAxis.showTitle) {
              delete instance.properties["titleStyle"];
              delete instance.properties["axisTitleColor"];
              delete instance.properties["axisTitle"];
              delete instance.properties["titleFontSize"];
              delete instance.properties["titleFontFamily"];
            }
            if (!settings.valueAxis.showGridlines) {
              delete instance.properties["gridlinesColor"];
              delete instance.properties["strokeWidth"];
              delete instance.properties["lineStyle"];
            }
            break;
          }
        case "constantLine":
          {
            if (!settings.constantLine.dataLabelShow) {
              delete instance.properties["fontColor"];
              delete instance.properties["text"];
              delete instance.properties["horizontalPosition"];
              delete instance.properties["verticalPosition"];
              delete instance.properties["displayUnits"];
              delete instance.properties["precision"];
            }
            break;
          }
        case "smallMultiple":
          {
            if (settings.smallMultiple.layoutMode === _settings__WEBPACK_IMPORTED_MODULE_1__.LayoutMode.Matrix) {
              delete instance.properties["maxRowWidth"];
            }
            if (!settings.smallMultiple.showChartTitle) {
              delete instance.properties["fontFamily"];
              delete instance.properties["fontSize"];
              delete instance.properties["fontColor"];
            }
          }
      }
    }
  }]);
  return EnumerateObject;
}();

/***/ }),

/***/ "./src/lassoSelectionUtil.ts":
/*!***********************************!*\
  !*** ./src/lassoSelectionUtil.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LassoSelection": () => (/* binding */ LassoSelection)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/* harmony import */ var _dataViewConverter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataViewConverter */ "./src/dataViewConverter.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/utils.ts");


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var LassoSelection = /*#__PURE__*/function () {
  function LassoSelection(visual) {
    _classCallCheck(this, LassoSelection);
    this.selection = {
      action: 'add',
      active: false,
      mousemoved: false
    };
    this.selectionStates = []; // Reflects data points' selection state
    this.visual = visual;
  }
  _createClass(LassoSelection, [{
    key: "init",
    value: function init(mainElement) {
      var _this = this;
      if (!this.selection.rect) {
        this.selection.rect = mainElement.append('div').classed('selection-rect', true).classed('selection-rect-normal-chart', true);
        this.selection.rect_node = this.selection.rect.node();
      }
      d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"]('.bar-chart-svg').on('mousedown.selection', function (e) {
        _this.onMousedown(e);
      });
      d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"]('html').on('mousemove.selection', function (e) {
        _this.onMousemove(e);
      }).on('mouseup.selection', function (e) {
        _this.onMouseup(e);
      });
    }
  }, {
    key: "update",
    value: function update(bars) {
      this.visibleBars = [];
      var barsArray = this.visibleBars;
      bars.each(function () {
        barsArray.push(this);
      });
    }
  }, {
    key: "disable",
    value: function disable() {
      this.emptySelection();
      d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"]('.bar-chart-svg').on('mousedown.selection', null);
      d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"]('html').on('mousemove.selection', null).on('mouseup.selection', null);
    }
  }, {
    key: "getSelectionStates",
    value: function getSelectionStates() {
      return this.selectionStates;
    }
    // Events
  }, {
    key: "onMousedown",
    value: function onMousedown(e) {
      this.selection.active = true;
      this.selection.clickEvent = e;
      var _ref = [e.clientX, e.clientY];
      this.selection.startX = _ref[0];
      this.selection.startY = _ref[1];
      this.setRectPos(e.clientX, e.clientY);
      this.showRect();
      if (!e.ctrlKey) {
        this.emptySelection();
      }
      this.indexOfFirstVisibleDataPoint = this.visual.scrollBar.getIndexOfFirstVisibleDataPoint();
    }
  }, {
    key: "onMousemove",
    value: function onMousemove(e) {
      var _a, _b;
      if (!this.selection.active) {
        return;
      }
      if (!this.selection.mousemoved && e.clientX === ((_b = (_a = this.selection) === null || _a === void 0 ? void 0 : _a.clickEvent) === null || _b === void 0 ? void 0 : _b.clientX) && e.clientY === this.selection.clickEvent.clientY) {
        return;
      }
      if (!this.selection.mousemoved) {
        if (!e.ctrlKey) {
          this.visual.webBehaviorSelectionHandler.handleClearSelection();
          this.visual.saveSelection();
        }
        this.selection.mousemoved = true;
      }
      this.calculateRectDimensions({
        x: e.clientX,
        y: e.clientY
      });
      this.setRectPos(this.selection.x, this.selection.y);
      this.setRectSize(this.selection.width, this.selection.height);
      var scrollIndex = this.indexOfFirstVisibleDataPoint;
      for (var i = 0; i < this.visibleBars.length; i++) {
        var collided = this.detectCollision(this.visibleBars[i]);
        var state = this.selectionStates[scrollIndex + i];
        if (collided) {
          // Firstly catch the case when we enable the "remove" mode
          if ((this.selectionStates.indexOf('justSelected') === -1 || this.selectionStates.indexOf('justRemoved') > -1) && state === 'selected') {
            this.selection.action = 'remove';
            this.selectionStates[scrollIndex + i] = 'justRemoved';
            continue;
          }
          if (this.selection.action === 'add' && state !== 'selected' && state !== 'justSelected') {
            this.selectionStates[scrollIndex + i] = 'justSelected';
          } else if (this.selection.action === 'remove' && state == 'selected') {
            this.selectionStates[scrollIndex + i] = 'justRemoved';
          }
        } else if (this.selection.action === 'add' && state === 'justSelected' && state !== null) {
          this.selectionStates[scrollIndex + i] = null;
        }
      }
      if (this.isEntireCategorySelection()) {
        this.selectEntireCategories();
      }
      this.updateFillOpacity();
    }
  }, {
    key: "onMouseup",
    value: function onMouseup(e) {
      if (!this.selection.active) {
        this.deactivateRect();
        return;
      }
      if (!this.selection.mousemoved) {
        // Selection by click
        var target = this.selection.clickEvent.target;
        var scrollIndex = this.indexOfFirstVisibleDataPoint;
        if (d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"](target).classed(this.visual.barClassName)) {
          var targetIndex = this.visibleBars.indexOf(target);
          if (this.selection.clickEvent.ctrlKey) {
            if (this.selectionStates[scrollIndex + targetIndex] != null) {
              this.selectionStates[scrollIndex + targetIndex] = 'justRemoved';
            } else {
              this.selectionStates[scrollIndex + targetIndex] = 'justSelected';
            }
          } else {
            this.selectionStates[scrollIndex + targetIndex] = 'justSelected';
          }
          if (this.isEntireCategorySelection()) {
            this.selectEntireCategories();
          }
        }
      }
      this.deactivateRect();
      this.applySelectionToTheVisual(e);
    }
    // /Events
  }, {
    key: "isEntireCategorySelection",
    value: function isEntireCategorySelection() {
      var dataView = this.visual.getDataView();
      return _dataViewConverter__WEBPACK_IMPORTED_MODULE_0__.DataViewConverter.IsMultipleValues(dataView) && !_dataViewConverter__WEBPACK_IMPORTED_MODULE_0__.DataViewConverter.IsLegendFilled(dataView) && (this.selectionStates.indexOf('justSelected') !== -1 || this.selectionStates.indexOf('justRemoved') !== -1);
    }
  }, {
    key: "selectEntireCategories",
    value: function selectEntireCategories() {
      var dataPointsByCategories = this.visual.getDataPointsByCategories();
      var allDataPointsIndex = 0;
      for (var categoryIndex = 0; categoryIndex < dataPointsByCategories.length; categoryIndex++) {
        var dataPoints = dataPointsByCategories[categoryIndex].dataPoints;
        var firstItemIndex = allDataPointsIndex;
        var categorySelectionStates = [];
        for (var categoryDataPointsIndex = 0; categoryDataPointsIndex < dataPoints.length; categoryDataPointsIndex++) {
          var selectionState = this.selectionStates[allDataPointsIndex];
          categorySelectionStates.push(selectionState);
          allDataPointsIndex++;
        }
        if (categorySelectionStates.indexOf('justRemoved') !== -1) {
          for (var i = 0; i < categorySelectionStates.length; i++) {
            this.selectionStates[firstItemIndex + i] = 'justRemoved';
          }
        } else if (categorySelectionStates.indexOf('selected') !== -1 || categorySelectionStates.indexOf('justSelected') !== -1) {
          for (var _i = 0; _i < categorySelectionStates.length; _i++) {
            if (this.selectionStates[firstItemIndex + _i] !== 'selected') {
              this.selectionStates[firstItemIndex + _i] = 'justSelected';
            }
          }
        }
      }
    }
  }, {
    key: "applySelectionToTheVisual",
    value: function applySelectionToTheVisual(e) {
      if (this.selectionStates.indexOf('justSelected') > -1 && this.selectionStates.indexOf('justRemoved') !== -1) {
        throw new Error('"justSelected" and "justRemoved" items can\'t appear at the same time!');
      }
      var allDataPoints = this.visual.getAllDataPoints();
      var handledDataPoints = [];
      var isMultiselect = e.ctrlKey;
      for (var i = 0; i < allDataPoints.length; i++) {
        switch (this.selectionStates[i]) {
          case 'justSelected':
            this.selectionStates[i] = 'selected';
            handledDataPoints.push(allDataPoints[i]);
            break;
          case 'justRemoved':
            this.selectionStates[i] = null;
            handledDataPoints.push(allDataPoints[i]);
            break;
        }
      }
      var selectedDataPoints = this.getSelectedDataPoints();
      if (handledDataPoints.length > 0) {
        this.visual.webBehaviorSelectionHandler.handleSelection(handledDataPoints, isMultiselect);
      } else if (selectedDataPoints.length === 0) {
        this.visual.webBehaviorSelectionHandler.handleClearSelection();
      }
      this.visual.saveSelection();
    }
  }, {
    key: "getSelectedDataPoints",
    value: function getSelectedDataPoints() {
      var allDataPoints = this.visual.getAllDataPoints();
      var selectedDataPoints = [];
      for (var i = 0; i < allDataPoints.length; i++) {
        if (this.selectionStates[i] === 'selected') {
          selectedDataPoints.push(allDataPoints[i]);
        }
      }
      return selectedDataPoints;
    }
    // DOM
  }, {
    key: "updateFillOpacity",
    value: function updateFillOpacity() {
      var scrollIndex = this.indexOfFirstVisibleDataPoint;
      if (this.selectionStates.indexOf('selected') === -1 && this.selectionStates.indexOf('justSelected') === -1) {
        for (var i = 0; i < this.visibleBars.length; i++) {
          d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"](this.visibleBars[i]).style('fill-opacity', _utils__WEBPACK_IMPORTED_MODULE_1__.DefaultOpacity);
        }
      } else {
        for (var _i2 = 0; _i2 < this.visibleBars.length; _i2++) {
          var bar = this.visibleBars[_i2];
          var d3_bar = d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"](bar);
          if (this.selectionStates[_i2 + scrollIndex] === 'selected' || this.selectionStates[_i2 + scrollIndex] === 'justSelected') {
            d3_bar.style('fill-opacity', _utils__WEBPACK_IMPORTED_MODULE_1__.DefaultOpacity);
          } else {
            d3_bar.style('fill-opacity', _utils__WEBPACK_IMPORTED_MODULE_1__.DimmedOpacity);
          }
        }
      }
    }
    // Arrays manipulate
  }, {
    key: "emptySelection",
    value: function emptySelection() {
      this.selectionStates = [];
    }
    // Rect
  }, {
    key: "showRect",
    value: function showRect() {
      this.selection.rect.classed('selection-rect-active', true);
    }
  }, {
    key: "hideRect",
    value: function hideRect() {
      this.selection.rect.classed('selection-rect-active', false);
    }
  }, {
    key: "setRectPos",
    value: function setRectPos(x, y) {
      this.selection.rect.style("left", x.toString() + 'px');
      this.selection.rect.style("top", y.toString() + 'px');
    }
  }, {
    key: "setRectSize",
    value: function setRectSize(width, height) {
      this.selection.rect.style("width", width.toString() + 'px');
      this.selection.rect.style("height", height.toString() + 'px');
    }
  }, {
    key: "calculateRectDimensions",
    value: function calculateRectDimensions(cursor) {
      var selection = this.selection;
      if (selection.startX <= cursor.x) {
        selection.x = selection.startX;
        selection.width = cursor.x - selection.startX;
        selection.endX = selection.x + selection.width;
      } else {
        selection.x = cursor.x;
        selection.width = selection.startX - selection.x;
        selection.endX = selection.x;
      }
      if (selection.startY <= cursor.y) {
        selection.y = selection.startY;
        selection.height = cursor.y - selection.startY;
        selection.endY = selection.y + selection.height;
      } else {
        selection.y = cursor.y;
        selection.height = selection.startY - selection.y;
        selection.endY = selection.y;
      }
    }
  }, {
    key: "deactivateRect",
    value: function deactivateRect() {
      this.selection.mousemoved = false;
      this.selection.active = false;
      this.selection.action = 'add';
      this.hideRect();
      var backgroundStyle = this.selection.rect_node.style.backgroundColor;
      this.selection.rect_node.setAttribute('style', '');
      this.selection.rect_node.style.backgroundColor = backgroundStyle;
    }
    // / Rect
    // Utils
  }, {
    key: "detectCollision",
    value: function detectCollision(bar) {
      var bounds = bar.getBoundingClientRect();
      if (bounds.width === 0) {
        return false;
      }
      if (this.selection.x <= bounds.right && this.selection.x + this.selection.width >= bounds.left && this.selection.y <= bounds.bottom && this.selection.y + this.selection.height >= bounds.top) {
        return true;
      } else {
        return false;
      }
    }
  }]);
  return LassoSelection;
}();

/***/ }),

/***/ "./src/lassoSelectionUtilForSmallMultiple.ts":
/*!***************************************************!*\
  !*** ./src/lassoSelectionUtilForSmallMultiple.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LassoSelectionForSmallMultiple": () => (/* binding */ LassoSelectionForSmallMultiple)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./src/utils.ts");
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }


var SelectionAction;
(function (SelectionAction) {
  SelectionAction[SelectionAction["Add"] = 1] = "Add";
  SelectionAction[SelectionAction["Remove"] = 2] = "Remove";
})(SelectionAction || (SelectionAction = {}));
var Constants = /*#__PURE__*/_createClass(function Constants() {
  _classCallCheck(this, Constants);
});
Constants.RectClass = 'selection-rect';
Constants.RectAdditionalClass = 'selection-rect-small-multiple';
Constants.EventNameSpace = '.selectionForSmallMultiple';
var LassoSelectionForSmallMultiple = /*#__PURE__*/function () {
  function LassoSelectionForSmallMultiple(barSelect, visual) {
    _classCallCheck(this, LassoSelectionForSmallMultiple);
    this.lasso = new Lasso();
    this.domItems = new DomItems();
    this.preselection = new Preselection();
    this.barClassName = barSelect.className;
    this.visual = visual;
  }
  _createClass(LassoSelectionForSmallMultiple, [{
    key: "init",
    value: function init(mainElement) {
      var rectangleElement = mainElement.append('div').classed(Constants.RectClass, true).classed(Constants.RectAdditionalClass, true);
      this.lassoElement = new LassoElement(rectangleElement);
    }
  }, {
    key: "update",
    value: function update(svgChart, bars, legendBucketFilled) {
      var _this = this;
      this.svgChart = svgChart;
      this.domItems.update(bars);
      this.legendBucketFilled = legendBucketFilled;
      this.svgChart.on("mousedown".concat(Constants.EventNameSpace), function (e) {
        _this.lasso.init(e);
      });
      d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"]('html').on("mousemove".concat(Constants.EventNameSpace), this.onMousemove.bind(this)).on("mouseup".concat(Constants.EventNameSpace), this.onMouseup.bind(this));
    }
  }, {
    key: "disable",
    value: function disable() {
      if (this.svgChart) {
        this.svgChart.on("mousedown".concat(Constants.EventNameSpace), null);
      }
      d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"]('html').on("mousemove".concat(Constants.EventNameSpace), null).on("mouseup".concat(Constants.EventNameSpace), null);
    }
  }, {
    key: "onMousemove",
    value: function onMousemove(e) {
      if (!this.lasso.started) {
        if (this.lasso.detectIfStarted(e)) {
          this.start();
        } else {
          return;
        }
      }
      this.lasso.calculateRectDimensions({
        x: e.clientX,
        y: e.clientY
      });
      this.lassoElement.setPos(this.lasso.x, this.lasso.y);
      this.lassoElement.setSize(this.lasso.width, this.lasso.height);
      this.preselection.updatePreselectionData(this.lasso, this.domItems.get(), e.ctrlKey);
      if (!this.legendBucketFilled) {
        this.preselection.preSelectEntireCategories(this.svgChart);
      }
      this.domItems.setPreviewStyles();
    }
  }, {
    key: "onMouseup",
    value: function onMouseup() {
      if (!this.lasso.active) {
        return;
      }
      if (!this.lasso.started) {
        this.onClick();
        if (!this.legendBucketFilled) {
          this.preselection.preSelectEntireCategories(this.svgChart);
        }
      }
      this.performSelection();
      this.domItems.setStyles();
      this.end();
    }
  }, {
    key: "onClick",
    value: function onClick() {
      var target = d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this.lasso.mousedown.target);
      // a click on an empty space
      if (!target.classed(this.barClassName)) {
        if (!this.lasso.mousedown.ctrlKey) {
          this.domItems.clearSelectionData();
        }
        return;
      }
      var datum = target.datum();
      // multiselection by Ctrl
      if (this.lasso.mousedown.ctrlKey) {
        datum.preRemoved = DomItems.dataPointIsPartOfSelection(datum);
        datum.preSelected = !datum.preRemoved;
        return;
      }
      // single selection of the non-selected point
      if (!DomItems.dataPointIsPartOfSelection(datum)) {
        this.domItems.clearSelectionData();
        datum.preSelected = true;
        return;
      }
      // single selection of the selected point
      var countPreselected = this.domItems.countPreselectedOrSelected();
      this.domItems.clearSelectionData();
      if (countPreselected !== 1) {
        // deselecting the only-selected point
        datum.preSelected = true;
      }
    }
  }, {
    key: "start",
    value: function start() {
      this.lasso.started = true;
      if (!this.lasso.mousedown.ctrlKey) {
        this.domItems.clearSelectionData();
      }
      this.lassoElement.show();
    }
  }, {
    key: "end",
    value: function end() {
      this.lasso.reset();
      this.preselection.reset();
      this.lassoElement.deactivate();
    }
  }, {
    key: "performSelection",
    value: function performSelection() {
      var bars = this.domItems.get();
      var handledDataPoints = [];
      var selectedDataPoints = [];
      bars.each(function (d) {
        if (d.preSelected) {
          d.selected = true;
          handledDataPoints.push(d);
        } else if (d.preRemoved) {
          d.selected = false;
          handledDataPoints.push(d);
        }
        if (d.selected) {
          selectedDataPoints.push(d);
        }
        d.preSelected = d.preRemoved = false;
      });
      if (handledDataPoints.length > 0) {
        this.visual.webBehaviorSelectionHandler.handleSelection(handledDataPoints, this.lasso.mousedown.ctrlKey);
      } else if (!this.lasso.mousedown.ctrlKey && !this.domItems.hasHighlight()) {
        this.visual.webBehaviorSelectionHandler.handleClearSelection();
      }
      this.visual.saveSelection();
    }
  }]);
  return LassoSelectionForSmallMultiple;
}();
var Preselection = /*#__PURE__*/function () {
  function Preselection() {
    _classCallCheck(this, Preselection);
    this.action = null;
  }
  _createClass(Preselection, [{
    key: "reset",
    value: function reset() {
      this.action = null;
    }
  }, {
    key: "updatePreselectionData",
    value: function updatePreselectionData(selectionService, bars, ctrlKey) {
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      var self = this;
      if (!ctrlKey) {
        self.action = SelectionAction.Add;
      }
      bars.each(function (d) {
        var collision = selectionService.detectCollision(this);
        if (self.action === null && collision) {
          self.action = d.selected ? SelectionAction.Remove : SelectionAction.Add;
        }
        switch (self.action) {
          case SelectionAction.Add:
            {
              d.preSelected = collision && !d.selected;
              break;
            }
          case SelectionAction.Remove:
            {
              d.preRemoved = collision && d.selected;
              break;
            }
        }
      });
    }
  }, {
    key: "preSelectEntireCategories",
    value: function preSelectEntireCategories(svgChart) {
      svgChart.selectAll('.bar-group').each(function () {
        var bars = d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this).selectAll('.bar');
        var preSelectedCategories = [];
        var preRemovedCategories = [];
        bars.each(function (d) {
          if (d.preSelected) {
            preSelectedCategories.push(d.category);
          } else if (d.preRemoved) {
            preRemovedCategories.push(d.category);
          }
        });
        bars.each(function (d) {
          if (preSelectedCategories.indexOf(d.category) > -1) {
            d.preSelected = true;
          } else if (preRemovedCategories.indexOf(d.category) > -1) {
            d.preRemoved = true;
          }
        });
      });
    }
  }]);
  return Preselection;
}();
var DomItems = /*#__PURE__*/function () {
  function DomItems() {
    _classCallCheck(this, DomItems);
  }
  _createClass(DomItems, [{
    key: "update",
    value: function update(bars) {
      this.bars = bars;
    }
  }, {
    key: "get",
    value: function get() {
      return this.bars;
    }
  }, {
    key: "setPreviewStyles",
    value: function setPreviewStyles() {
      if (this.countPreselectedOrSelected() > 0) {
        this.setOpacity(null, function (d) {
          return DomItems.dataPointIsPartOfSelection(d) ? _utils__WEBPACK_IMPORTED_MODULE_0__.DefaultOpacity : _utils__WEBPACK_IMPORTED_MODULE_0__.DimmedOpacity;
        });
      } else if (!this.hasHighlight()) {
        this.setOpacity(_utils__WEBPACK_IMPORTED_MODULE_0__.DefaultOpacity);
      }
    }
  }, {
    key: "countPreselectedOrSelected",
    value: function countPreselectedOrSelected() {
      var preselected = this.bars.filter(function (d) {
        return DomItems.dataPointIsPartOfSelection(d);
      });
      return preselected.size();
    }
  }, {
    key: "setStyles",
    value: function setStyles() {
      if (this.countPreselectedOrSelected() > 0) {
        this.setOpacity(null, function (d) {
          return d.selected ? _utils__WEBPACK_IMPORTED_MODULE_0__.DefaultOpacity : _utils__WEBPACK_IMPORTED_MODULE_0__.DimmedOpacity;
        });
        this.setStroke(true);
      } else if (!this.hasHighlight()) {
        this.setOpacity(_utils__WEBPACK_IMPORTED_MODULE_0__.DefaultOpacity);
        this.setStroke(false);
      }
    }
  }, {
    key: "clearSelectionData",
    value: function clearSelectionData() {
      this.bars.each(function (d) {
        d.selected = d.preSelected = false;
      });
    }
  }, {
    key: "hasHighlight",
    value: function hasHighlight() {
      return this.bars.filter(function (d) {
        return !!d.highlight;
      }).size() > 0;
    }
  }, {
    key: "setStroke",
    value: function setStroke(hasSelection) {
      this.bars.each(function (d) {
        this.style.stroke = hasSelection ? '#000000' : d.color || '';
      });
    }
  }, {
    key: "setOpacity",
    value: function setOpacity(opacity, calculateOpacity) {
      this.bars.each(function (d) {
        var opacityValue = opacity ? opacity : calculateOpacity && calculateOpacity(d);
        if (opacityValue) {
          this.style.fillOpacity = opacityValue.toString();
          this.style.strokeOpacity = opacityValue.toString();
        }
      });
    }
  }], [{
    key: "dataPointIsPartOfSelection",
    value: function dataPointIsPartOfSelection(d) {
      return !d.preRemoved && (d.preSelected || d.selected);
    }
  }]);
  return DomItems;
}();
var Lasso = /*#__PURE__*/function () {
  function Lasso() {
    _classCallCheck(this, Lasso);
    this.active = false;
    this.started = false;
  }
  _createClass(Lasso, [{
    key: "init",
    value: function init(mousedown) {
      this.active = true;
      this.mousedown = mousedown;
      this.startX = mousedown.clientX;
      this.startY = mousedown.clientY;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.started = false;
      this.active = false;
    }
  }, {
    key: "detectIfStarted",
    value: function detectIfStarted(mousemove) {
      if (!this.active) {
        return false;
      }
      return mousemove.clientX !== this.mousedown.clientX || mousemove.clientY !== this.mousedown.clientY;
    }
  }, {
    key: "calculateRectDimensions",
    value: function calculateRectDimensions(cursor) {
      if (this.startX <= cursor.x) {
        this.x = this.startX;
        this.width = cursor.x - this.startX;
        this.endX = this.x + this.width;
      } else {
        this.x = cursor.x;
        this.width = this.startX - this.x;
        this.endX = this.x;
      }
      if (this.startY <= cursor.y) {
        this.y = this.startY;
        this.height = cursor.y - this.startY;
        this.endY = this.y + this.height;
      } else {
        this.y = cursor.y;
        this.height = this.startY - this.y;
        this.endY = this.y;
      }
    }
  }, {
    key: "detectCollision",
    value: function detectCollision(element) {
      var bounds = element.getBoundingClientRect();
      if (bounds.width === 0) {
        return false;
      }
      if (this.x <= bounds.right && this.x + this.width >= bounds.left && this.y <= bounds.bottom && this.y + this.height >= bounds.top) {
        return true;
      } else {
        return false;
      }
    }
  }]);
  return Lasso;
}();
var LassoElement = /*#__PURE__*/function () {
  function LassoElement(d3_element) {
    _classCallCheck(this, LassoElement);
    this.d3_element = d3_element;
    this.element = d3_element.node();
  }
  _createClass(LassoElement, [{
    key: "show",
    value: function show() {
      this.d3_element.classed('selection-rect-active', true);
    }
  }, {
    key: "hide",
    value: function hide() {
      this.d3_element.classed('selection-rect-active', false);
    }
  }, {
    key: "deactivate",
    value: function deactivate() {
      this.hide();
      this.resetStyleAttribute();
    }
  }, {
    key: "setPos",
    value: function setPos(x, y) {
      this.d3_element.style('left', x.toString() + 'px');
      this.d3_element.style('top', y.toString() + 'px');
    }
  }, {
    key: "setSize",
    value: function setSize(width, height) {
      this.d3_element.style('width', width.toString() + 'px');
      this.d3_element.style('height', height.toString() + 'px');
    }
  }, {
    key: "resetStyleAttribute",
    value: function resetStyleAttribute() {
      this.element.setAttribute('style', '');
    }
  }]);
  return LassoElement;
}();

/***/ }),

/***/ "./src/metadataUtils.ts":
/*!******************************!*\
  !*** ./src/metadataUtils.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getMetadata": () => (/* binding */ getMetadata)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js");



var getMeasureIndexOfRole = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__.getMeasureIndexOfRole;
var getCategoryIndexOfRole = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__.getCategoryIndexOfRole;
var ColumnCategory = "Axis";
var ColumnValue = "Value";
var ColumnGradient = "Gradient";
var ColumnColumnBy = 'ColumnBy';
var ColumnRowBy = 'RowBy';
function getMetadata(categories, grouped, source) {
  var xAxisLabel = "";
  var yAxisLabel = "";
  var valueIndex = getMeasureIndexOfRole(grouped, ColumnValue);
  var categoryIndex = getCategoryIndexOfRole(categories, ColumnCategory);
  var gradientIndex = getMeasureIndexOfRole(grouped, ColumnGradient);
  var valueCol;
  var categoryCol;
  if (grouped && grouped.length) {
    var firstGroup = grouped[0];
    if (valueIndex >= 0) {
      valueCol = firstGroup.values[valueIndex].source;
      xAxisLabel = firstGroup.values[valueIndex].source.displayName;
    }
    if (categoryIndex >= 0) {
      categoryCol = categories[categoryIndex].source;
      yAxisLabel = categories[categoryIndex].source.displayName;
    }
  }
  return {
    idx: {
      category: categoryIndex,
      value: valueIndex,
      gradient: gradientIndex,
      columnBy: getCategoryIndexOfRole(categories, ColumnColumnBy),
      rowBy: getCategoryIndexOfRole(categories, ColumnRowBy)
    },
    cols: {
      value: valueCol,
      category: categoryCol
    },
    labels: {
      x: xAxisLabel,
      y: yAxisLabel
    },
    groupingColumn: source
  };
}

/***/ }),

/***/ "./src/render/renderAxes.ts":
/*!**********************************!*\
  !*** ./src/render/renderAxes.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RenderAxes": () => (/* binding */ RenderAxes)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js");
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/cssConstants.js");
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/manipulation.js");
/* harmony import */ var _utils_axis_createAxis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/axis/createAxis */ "./src/utils/axis/createAxis.ts");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../settings */ "./src/settings.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./src/utils.ts");
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/min.js");
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/max.js");
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisInterfaces.js");
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axis.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var _utils_axis_yAxisUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/axis/yAxisUtils */ "./src/utils/axis/yAxisUtils.ts");


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }








var AxisOrientation = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_3__.AxisOrientation;


var Selectors = /*#__PURE__*/_createClass(function Selectors() {
  _classCallCheck(this, Selectors);
});
Selectors.AxisLabelSelector = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_5__.createClassAndSelector('axisLabel');
var RenderAxes = /*#__PURE__*/function () {
  function RenderAxes() {
    _classCallCheck(this, RenderAxes);
  }
  _createClass(RenderAxes, null, [{
    key: "createD3Axes",
    value:
    // eslint-disable-next-line max-lines-per-function
    function createD3Axes(axesDomains, size, metadata, settings, host) {
      var isSmallMultiple = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
      var dataPointThickness = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
      var maxXLabelsWidth = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
      var yAxisProperties = null;
      var valueAxisScale = settings.valueAxis.axisScale;
      var yAxisPrecision = settings.valueAxis && settings.valueAxis.precision != null && settings.valueAxis.precision >= 0 ? settings.valueAxis.precision.toString() : undefined;
      if (yAxisPrecision === 0) {
        yAxisPrecision = yAxisPrecision.toString();
      }
      var yAxisFormatString = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_6__.valueFormatter.getFormatStringByColumn(metadata.cols.value);
      var skipValueRange = isSmallMultiple && settings.valueAxis.rangeType !== _settings__WEBPACK_IMPORTED_MODULE_1__.AxisRangeType.Custom,
        startValue = skipValueRange ? null : settings.valueAxis.start,
        endValue = skipValueRange ? null : settings.valueAxis.end;
      yAxisProperties = (0,_utils_axis_createAxis__WEBPACK_IMPORTED_MODULE_0__.createAxis)({
        pixelSpan: size.height,
        dataDomain: axesDomains.yAxisDomain,
        metaDataColumn: metadata.cols.value,
        formatString: yAxisFormatString,
        outerPadding: 0,
        innerPadding: 0,
        isScalar: true,
        isVertical: true,
        isCategoryAxis: false,
        scaleType: valueAxisScale,
        useTickIntervalForDisplayUnits: true,
        axisDisplayUnits: settings.valueAxis.displayUnits,
        disableNice: startValue != null || endValue != null,
        axisPrecision: yAxisPrecision,
        orientation: (0,_utils_axis_yAxisUtils__WEBPACK_IMPORTED_MODULE_4__.convertPositionToAxisOrientation)(settings.valueAxis.position)
      });
      yAxisProperties.axis.tickSizeInner(-size.width).tickPadding(RenderAxes.DefaultAxisXTickPadding).tickSizeOuter(1);
      yAxisProperties.axisLabel = settings.valueAxis.showTitle ? metadata.labels.x : '';
      // create Y axis
      var xAxisProperties = null;
      var xAxisFormatString = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_6__.valueFormatter.getFormatStringByColumn(metadata.cols.category) || powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_6__.valueFormatter.getFormatStringByColumn(metadata.groupingColumn);
      var categoryType = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_7__.getCategoryValueType(metadata.cols.category);
      var isOrdinal = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_7__.isOrdinal(categoryType);
      var xIsScalar = !isOrdinal;
      var categoryAxisScale = settings.categoryAxis.axisType === 'categorical' ? 'linear' : settings.categoryAxis.axisScale;
      var axisType = !xIsScalar ? 'categorical' : settings.categoryAxis.axisType;
      var dateColumnFormatter = null;
      if (metadata.cols.category) {
        dateColumnFormatter = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_6__.valueFormatter.create({
          format: powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_6__.valueFormatter.getFormatStringByColumn(metadata.cols.category, true) || metadata.cols.category.format,
          cultureSelector: host.locale
        });
      } else if (metadata.groupingColumn) {
        dateColumnFormatter = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_6__.valueFormatter.create({
          format: powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_6__.valueFormatter.getFormatStringByColumn(metadata.groupingColumn, true) || metadata.groupingColumn.format,
          cultureSelector: host.locale
        });
      }
      var innerPadding = settings.categoryAxis.innerPadding / 100;
      var outerPadding = xIsScalar && axisType === 'continuous' ? dataPointThickness / 2 : 0;
      var xAxisPrecision = settings.categoryAxis && settings.categoryAxis.precision != null && settings.categoryAxis.precision >= 0 ? settings.categoryAxis.precision.toString() : undefined;
      if (xAxisPrecision === 0) {
        xAxisPrecision = xAxisPrecision.toString();
      }
      var fontSize = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_8__.toString(settings.categoryAxis.fontSize);
      var fontFamily = settings.categoryAxis.fontFamily;
      var skipCategoryRange = isSmallMultiple && settings.categoryAxis.rangeType !== _settings__WEBPACK_IMPORTED_MODULE_1__.AxisRangeType.Custom,
        startCategory = skipCategoryRange ? null : settings.categoryAxis.start,
        endCategory = skipCategoryRange ? null : settings.categoryAxis.end;
      xAxisProperties = (0,_utils_axis_createAxis__WEBPACK_IMPORTED_MODULE_0__.createAxis)({
        pixelSpan: size.width,
        dataDomain: axesDomains.xAxisDomain,
        metaDataColumn: metadata.cols.category || metadata.groupingColumn,
        formatString: xAxisFormatString,
        outerPadding: outerPadding,
        innerPadding: innerPadding,
        scaleType: xIsScalar ? categoryAxisScale : undefined,
        isScalar: xIsScalar && axisType === 'continuous',
        isVertical: false,
        isCategoryAxis: true,
        useTickIntervalForDisplayUnits: true,
        axisDisplayUnits: settings.categoryAxis.displayUnits,
        axisPrecision: xAxisPrecision,
        disableNice: axisType === 'continuous' && (startCategory != null || endCategory != null),
        getValueFn: function getValueFn(index, dataType) {
          if (dataType.dateTime && dateColumnFormatter) {
            var options = {};
            if (xIsScalar && axisType === 'continuous') {
              options = {
                month: 'short',
                year: 'numeric'
              };
            } else {
              options = {
                day: 'numeric',
                month: 'numeric',
                year: 'numeric'
              };
            }
            var formattedString = dateColumnFormatter.format(new Date(index).toLocaleString('en-US', options));
            if (maxXLabelsWidth) {
              var textProperties = {
                text: formattedString,
                fontFamily: fontFamily,
                fontSize: fontSize
              };
              return powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_6__.textMeasurementService.getTailoredTextOrDefault(textProperties, maxXLabelsWidth);
            }
            return formattedString;
          }
          if (maxXLabelsWidth && maxXLabelsWidth !== Number.MAX_VALUE) {
            var _textProperties = {
              text: index.toString(),
              fontFamily: fontFamily,
              fontSize: fontSize
            };
            return powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_6__.textMeasurementService.getTailoredTextOrDefault(_textProperties, maxXLabelsWidth);
          }
          return index;
        },
        orientation: AxisOrientation.bottom
      });
      // For Y axis, make ticks appear full-width.
      xAxisProperties.axis.tickPadding(RenderAxes.DefaultAxisYTickPadding).tickSizeInner(0).tickSizeOuter(0);
      xAxisProperties.axisLabel = settings.categoryAxis.showTitle ? metadata.labels.y : '';
      return {
        x: xAxisProperties,
        y: yAxisProperties,
        xIsScalar: xIsScalar
      };
    }
  }, {
    key: "rotateXAxisTickLabels",
    value: function rotateXAxisTickLabels(toRotate, xAxisSvgGroup) {
      var axisText = xAxisSvgGroup.selectAll('g').selectAll('text');
      if (toRotate) {
        axisText.attr('transform', 'rotate(-90)').attr('dx', '-5.5px').attr('dy', '-0.5em');
        axisText.style('text-anchor', 'end');
      } else {
        axisText.attr('transform', 'rotate(0)').attr('dx', '0');
        axisText.style('text-anchor', 'middle');
      }
    }
  }, {
    key: "render",
    value: function render(settings, xAxisSvgGroup, yAxisSvgGroup, axes) {
      // Now we call the axis funciton, that will render an axis on our visual.
      if (settings.valueAxis.show) {
        yAxisSvgGroup.call(axes.y.axis);
        var axisText = yAxisSvgGroup.selectAll('g').selectAll('text');
        var axisLines = yAxisSvgGroup.selectAll('g').selectAll('line');
        var valueAxisSettings = settings.valueAxis;
        var color = valueAxisSettings.axisColor.toString();
        var fontSize = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_8__.toString(valueAxisSettings.fontSize);
        var fontFamily = valueAxisSettings.fontFamily;
        var gridlinesColor = valueAxisSettings.gridlinesColor.toString();
        var strokeWidth = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_8__.toString(valueAxisSettings.strokeWidth);
        var showGridlines = valueAxisSettings.showGridlines;
        var lineStyle = valueAxisSettings.lineStyle;
        var strokeDasharray = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getLineStyleParam)(lineStyle);
        axisText.style('fill', color).style('font-size', fontSize).style('font-family', fontFamily);
        axisLines.style('stroke', gridlinesColor).style('stroke-width', strokeWidth).style('stroke-dasharray', strokeDasharray);
        if (showGridlines) {
          axisLines.style('opacity', '1');
        } else {
          axisLines.style('opacity', '0');
        }
      } else {
        yAxisSvgGroup.selectAll('*').remove();
      }
      if (settings.categoryAxis.show) {
        xAxisSvgGroup.call(axes.x.axis);
        var _axisText = xAxisSvgGroup.selectAll('g').selectAll('text');
        var categoryAxisSettings = settings.categoryAxis;
        var _color = categoryAxisSettings.axisColor.toString();
        var _fontSize = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_8__.toString(categoryAxisSettings.fontSize);
        var _fontFamily = categoryAxisSettings.fontFamily;
        _axisText.style('fill', _color).style('stroke', 'none').style('font-size', _fontSize).style('font-family', _fontFamily);
      } else {
        xAxisSvgGroup.selectAll('*').remove();
      }
    }
  }, {
    key: "renderLabels",
    value: function renderLabels(viewport, visualMargin, visualSize, axisLabelsData, settings, axes, axisLabelsGroup, axisGraphicsContext) {
      var margin = visualMargin,
        width = viewport.width,
        height = viewport.height,
        yAxisOrientation = 'right',
        showY1OnRight = yAxisOrientation === settings.valueAxis.position;
      var showXAxisTitle = settings.categoryAxis.show && settings.categoryAxis.showTitle;
      var showYAxisTitle = settings.valueAxis.show && settings.valueAxis.showTitle;
      if (!showXAxisTitle) {
        axisLabelsData[0] = null;
      }
      if (!showYAxisTitle) {
        axisLabelsData[1] = null;
      }
      axisLabelsGroup = axisGraphicsContext.selectAll('*').data(axisLabelsData);
      // For removed categories, remove the SVG group.
      axisLabelsGroup.exit().remove();
      // When a new category added, create a new SVG group for it.
      var axisLabelsGroupEnter = axisLabelsGroup.enter().append('text').attr('class', Selectors.AxisLabelSelector.className);
      var xColor = settings.categoryAxis.axisTitleColor;
      var xFontSize = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_8__.fromPointToPixel(settings.categoryAxis.titleFontSize);
      var xFontSizeString = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_8__.toString(settings.categoryAxis.titleFontSize);
      var xTitle = settings.categoryAxis.axisTitle;
      var xAxisStyle = settings.categoryAxis.titleStyle;
      var xAxisFontFamily = settings.categoryAxis.titleFontFamily;
      var yColor = settings.valueAxis.axisTitleColor;
      var yFontSize = parseInt(settings.valueAxis.titleFontSize.toString());
      var yFontSizeString = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_8__.toString(yFontSize);
      var yTitle = settings.valueAxis.axisTitle;
      var yAxisStyle = settings.valueAxis.titleStyle;
      var yAxisFontFamily = settings.valueAxis.titleFontFamily;
      axisLabelsGroup.merge(axisLabelsGroupEnter).style('text-anchor', 'middle').text(function (d) {
        return d;
      }).call(function (text) {
        var textSelectionX = text;
        textSelectionX.attr('transform', powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_9__.translate(width / RenderAxes.AxisLabelOffset, (height + visualSize.height + xFontSize + margin.top) / 2)).attr('dy', '.8em');
        if (showXAxisTitle && xTitle && xTitle.toString().length > 0) {
          textSelectionX.text(xTitle);
        }
        if (showXAxisTitle && xAxisStyle) {
          var newTitle = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getTitleWithUnitType)(textSelectionX.text(), xAxisStyle, axes.x);
          textSelectionX.text(newTitle);
        }
        textSelectionX.style('fill', xColor).style('font-size', xFontSizeString).style('font-family', xAxisFontFamily);
        var textSelectionY = (0,d3_selection__WEBPACK_IMPORTED_MODULE_10__["default"])(text.nodes()[1]);
        textSelectionY.attr('transform', showY1OnRight ? RenderAxes.YAxisLabelTransformRotate : RenderAxes.YAxisLabelTransformRotate).attr('y', showY1OnRight ? width - margin.right - yFontSize : 0).attr('x', -((visualSize.height + margin.top + margin.bottom) / RenderAxes.AxisLabelOffset)).attr('dy', (showY1OnRight ? '-' : '') + RenderAxes.DefaultDY);
        if (showYAxisTitle && yTitle && yTitle.toString().length > 0) {
          textSelectionY.text(yTitle);
        }
        if (showYAxisTitle) {
          var _newTitle = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getTitleWithUnitType)(textSelectionY.text(), yAxisStyle, axes.y);
          textSelectionY.text(_newTitle);
        }
        textSelectionY.style('fill', yColor).style('font-size', yFontSizeString).style('font-family', yAxisFontFamily);
      });
    }
  }, {
    key: "calculateAxesDomains",
    value: function calculateAxesDomains(allDatapoint, visibleDatapoints, settings, metadata) {
      var isSmallMultiple = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      return {
        xAxisDomain: this.calculateCategoryDomain(visibleDatapoints, settings, metadata, isSmallMultiple),
        yAxisDomain: this.calculateValueDomain(allDatapoint, settings, isSmallMultiple)
      };
    }
  }, {
    key: "calculateValueDomain",
    value: function calculateValueDomain(allDatapoint, settings) {
      var isSmallMultiple = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var minValue = (0,d3_array__WEBPACK_IMPORTED_MODULE_11__["default"])(allDatapoint, function (d) {
        return d.sum;
      });
      var maxValue = (0,d3_array__WEBPACK_IMPORTED_MODULE_12__["default"])(allDatapoint, function (d) {
        return d.sum;
      });
      minValue = minValue < 0 ? minValue : 0;
      maxValue = maxValue > 0 ? maxValue : 0;
      var dataDomainMinY = minValue;
      var dataDomainMaxY = maxValue;
      var constantLineValue = settings.constantLine.value;
      if (constantLineValue || constantLineValue === 0) {
        dataDomainMinY = dataDomainMinY > constantLineValue ? constantLineValue : dataDomainMinY;
        dataDomainMaxY = dataDomainMaxY < constantLineValue ? constantLineValue : dataDomainMaxY;
      }
      var skipStartEnd = isSmallMultiple && settings.valueAxis.rangeType !== _settings__WEBPACK_IMPORTED_MODULE_1__.AxisRangeType.Custom;
      var start = skipStartEnd ? null : settings.valueAxis.start;
      var end = skipStartEnd ? null : settings.valueAxis.end;
      return [start != null ? start : dataDomainMinY, end != null ? end : dataDomainMaxY];
    }
  }, {
    key: "calculateCategoryDomain",
    value: function calculateCategoryDomain(visibleDatapoints, settings, metadata) {
      var _this = this;
      var isSmallMultiple = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var categoryType = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_7__.getCategoryValueType(metadata.cols.category);
      var isOrdinal = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_7__.isOrdinal(categoryType);
      var dataDomainX = visibleDatapoints.map(function (d) {
        return d.category;
      });
      var xIsScalar = !isOrdinal;
      var axisType = !xIsScalar ? 'categorical' : settings.categoryAxis.axisType;
      if (xIsScalar && axisType === 'continuous') {
        dataDomainX = dataDomainX.filter(function (d) {
          return d !== _this.Blank;
        });
        var noBlankCategoryDatapoints = visibleDatapoints.filter(function (d) {
          return d.category !== _this.Blank;
        });
        var dataDomainMinX = (0,d3_array__WEBPACK_IMPORTED_MODULE_11__["default"])(noBlankCategoryDatapoints, function (d) {
          return d.category;
        });
        var dataDomainMaxX = (0,d3_array__WEBPACK_IMPORTED_MODULE_12__["default"])(noBlankCategoryDatapoints, function (d) {
          return d.category;
        });
        var skipStartEnd = isSmallMultiple && settings.categoryAxis.rangeType !== _settings__WEBPACK_IMPORTED_MODULE_1__.AxisRangeType.Custom;
        var start = skipStartEnd ? null : settings.categoryAxis.start;
        var end = skipStartEnd ? null : settings.categoryAxis.end;
        dataDomainX = [start != null ? settings.categoryAxis.start : dataDomainMinX, end != null ? end : dataDomainMaxX];
      }
      return dataDomainX;
    }
  }]);
  return RenderAxes;
}();
RenderAxes.DefaultAxisXTickPadding = 10;
RenderAxes.DefaultAxisYTickPadding = 10;
RenderAxes.AxisLabelOffset = 2;
RenderAxes.TickLabelAndTitleGap = 5;
RenderAxes.YAxisLabelTransformRotate = 'rotate(-90)';
RenderAxes.DefaultDY = '1em';
RenderAxes.Blank = '(Blank)';

/***/ }),

/***/ "./src/render/renderVisual.ts":
/*!************************************!*\
  !*** ./src/render/renderVisual.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RenderVisual": () => (/* binding */ RenderVisual),
/* harmony export */   "Selectors": () => (/* binding */ Selectors)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js");
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/cssConstants.js");
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/manipulation.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelUtils.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../settings */ "./src/settings.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../utils */ "./src/utils.ts");
/* harmony import */ var _visual__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../visual */ "./src/visual.ts");
/* harmony import */ var _utils_dataLabelHelper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/dataLabelHelper */ "./src/utils/dataLabelHelper.ts");
/* harmony import */ var _utils_formattingUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/formattingUtils */ "./src/utils/formattingUtils.ts");


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var createClassAndSelector = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_0__.createClassAndSelector;








var Selectors = /*#__PURE__*/_createClass(function Selectors() {
  _classCallCheck(this, Selectors);
});
Selectors.BarSelect = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_0__.createClassAndSelector('bar');
Selectors.BarGroupSelect = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_0__.createClassAndSelector('bar-group');
Selectors.AxisLabelSelector = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_0__.createClassAndSelector('axisLabel');
var RenderVisual = /*#__PURE__*/function () {
  function RenderVisual() {
    _classCallCheck(this, RenderVisual);
  }
  _createClass(RenderVisual, null, [{
    key: "render",
    value: function render(data, visualSvgGroup, visualInteractivityService, tooltipServiceWrapper, hasHighlight) {
      // Select all bar groups in our chart and bind them to our categories.
      // Each group will contain a set of bars, one for each of the values in category.
      var barGroupSelect = visualSvgGroup.selectAll(Selectors.BarGroupSelect.selectorName).data([data.dataPoints]);
      // For removed categories, remove the SVG group.
      barGroupSelect.exit().remove();
      // When a new category added, create a new SVG group for it.
      var barGroupSelectEnter = barGroupSelect.enter().append('g').attr('class', Selectors.BarGroupSelect.className);
      // Update the position of existing SVG groups.
      // barGroupSelect.attr("transform", d => `translate(0, ${data.axes.y(d.category)})`);
      barGroupSelect = barGroupSelect.merge(barGroupSelectEnter);
      // Now we bind each SVG group to the values in corresponding category.
      // To keep the length of the values array, we transform each value into object,
      // that contains both value and total count of all values in this category.
      var barSelect = barGroupSelect.selectAll(Selectors.BarSelect.selectorName).data(data.dataPoints);
      // Remove rectangles, that no longer have matching values.
      barSelect.exit().remove();
      // For each new value, we create a new rectange.
      var barSelectEnter = barSelect.enter().append('rect').attr('class', Selectors.BarSelect.className);
      barSelect = barSelect.merge(barSelectEnter);
      var interactivityService = visualInteractivityService,
        hasSelection = interactivityService.hasSelection();
      barSelect.attr('height', function (d) {
        return d.barCoordinates.height;
      }).attr('width', function (d) {
        return d.barCoordinates.width;
      }).attr('x', function (d) {
        return d.barCoordinates.x;
      }).attr('y', function (d) {
        return d.barCoordinates.y;
      }).attr('fill', function (d) {
        return d.color;
      }).style('fill-opacity', function (p) {
        return _utils__WEBPACK_IMPORTED_MODULE_2__.getFillOpacity(p.selected, p.highlight, !p.highlight && hasSelection, !p.selected && data.hasHighlight);
      }).style('stroke', function (p) {
        if ((hasHighlight || hasSelection) && _utils__WEBPACK_IMPORTED_MODULE_2__.isSelected(p.selected, p.highlight, !p.highlight && hasSelection, !p.selected && hasHighlight)) {
          return _visual__WEBPACK_IMPORTED_MODULE_3__.Visual.DefaultStrokeSelectionColor;
        }
        return p.color;
      }).style('stroke-width', function (p) {
        if ((hasHighlight || hasSelection) && _utils__WEBPACK_IMPORTED_MODULE_2__.isSelected(p.selected, p.highlight, !p.highlight && hasSelection, !p.selected && hasHighlight)) {
          return _visual__WEBPACK_IMPORTED_MODULE_3__.Visual.DefaultStrokeSelectionWidth;
        }
        return _visual__WEBPACK_IMPORTED_MODULE_3__.Visual.DefaultStrokeWidth;
      });
      this.renderTooltip(barSelect, tooltipServiceWrapper);
      return {
        barSelect: barSelect
      };
    }
  }, {
    key: "renderDataLabelsBackground",
    value: function renderDataLabelsBackground(dataPoints, settings, dataLabelsBackgroundContext) {
      var labelSettings = settings.categoryLabels;
      var isHorizontal = labelSettings.orientation === _settings__WEBPACK_IMPORTED_MODULE_1__.LabelOrientation.Horizontal;
      dataLabelsBackgroundContext.selectAll('*').remove();
      if (!labelSettings.showBackground) {
        return;
      }
      var backgroundSelection = dataLabelsBackgroundContext.selectAll(RenderVisual.Label.selectorName).data(dataPoints);
      backgroundSelection.exit().remove();
      var backgroundSelectionEnter = backgroundSelection.enter().append('svg:rect');
      backgroundSelection = backgroundSelection.merge(backgroundSelectionEnter);
      backgroundSelection.attr('height', function (d) {
        return d.labelCoordinates.height + _utils_dataLabelHelper__WEBPACK_IMPORTED_MODULE_4__.DataLabelHelper.labelBackgroundHeightPadding * (isHorizontal ? 1 : 2);
      }).attr('width', function (d) {
        return d.labelCoordinates.width + _utils_dataLabelHelper__WEBPACK_IMPORTED_MODULE_4__.DataLabelHelper.labelBackgroundWidthPadding;
      }).attr('x', function (d) {
        return d.labelCoordinates.x - (isHorizontal ? _utils_dataLabelHelper__WEBPACK_IMPORTED_MODULE_4__.DataLabelHelper.labelBackgroundXShift : d.labelCoordinates.width);
      }).attr('y', function (d) {
        return d.labelCoordinates.y - d.labelCoordinates.height + (isHorizontal ? -_utils_dataLabelHelper__WEBPACK_IMPORTED_MODULE_4__.DataLabelHelper.labelBackgroundYShift : _utils_dataLabelHelper__WEBPACK_IMPORTED_MODULE_4__.DataLabelHelper.labelBackgroundYShift);
      }).attr('rx', 4).attr('ry', 4).attr('fill', settings.categoryLabels.backgroundColor);
      backgroundSelection.style('fill-opacity', (100 - settings.categoryLabels.transparency) / 100).style('pointer-events', 'none');
    }
  }, {
    key: "renderDataLabelsBackgroundForSmallMultiple",
    value: function renderDataLabelsBackgroundForSmallMultiple(data, settings, dataLabelsBackgroundContext) {
      var dataPoints = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var labelSettings = settings.categoryLabels;
      dataLabelsBackgroundContext.selectAll('*').remove();
      if (!labelSettings.showBackground) {
        return;
      }
      var dataPointsArray = this.filterData(dataPoints || data.dataPoints);
      var backgroundSelection = dataLabelsBackgroundContext.selectAll(RenderVisual.Label.selectorName).data(dataPointsArray);
      var backgroundSelectionEnter = backgroundSelection.enter().append('svg:rect');
      backgroundSelection = backgroundSelection.merge(backgroundSelectionEnter);
      backgroundSelection.attr('height', function (d) {
        return d.labelCoordinates.height + _utils_dataLabelHelper__WEBPACK_IMPORTED_MODULE_4__.DataLabelHelper.labelBackgroundHeightPadding;
      }).attr('width', function (d) {
        return d.labelCoordinates.width + _utils_dataLabelHelper__WEBPACK_IMPORTED_MODULE_4__.DataLabelHelper.labelBackgroundWidthPadding;
      }).attr('x', function (d) {
        return d.labelCoordinates.x - _utils_dataLabelHelper__WEBPACK_IMPORTED_MODULE_4__.DataLabelHelper.labelBackgroundXShift;
      }).attr('y', function (d) {
        return d.labelCoordinates.y - d.labelCoordinates.height - _utils_dataLabelHelper__WEBPACK_IMPORTED_MODULE_4__.DataLabelHelper.labelBackgroundYShift;
      }).attr('rx', 4).attr('ry', 4).attr('fill', settings.categoryLabels.backgroundColor);
      backgroundSelection.style('fill-opacity', (100 - settings.categoryLabels.transparency) / 100).style('pointer-events', 'none');
      backgroundSelection.exit().remove();
    }
  }, {
    key: "renderDataLabels",
    value: function renderDataLabels(dataPoints, dataLabelFormatter, settings, dataLabelsContext) {
      var labelSettings = settings.categoryLabels;
      dataLabelsContext.selectAll('*').remove();
      if (!labelSettings.show) {
        return;
      }
      var labelSelection = dataLabelsContext.selectAll(RenderVisual.Label.selectorName).data(dataPoints);
      labelSelection.exit().remove();
      var labelSelectionEnter = labelSelection.enter().append('svg:text');
      labelSelection = labelSelection.merge(labelSelectionEnter);
      var fontSizeInPx = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_6__.fromPoint(labelSettings.fontSize);
      var fontFamily = labelSettings.fontFamily ? labelSettings.fontFamily : powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_7__.LabelTextProperties.fontFamily;
      labelSelection.attr('transform', function (p) {
        return powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_8__.translate(p.labelCoordinates.x, p.labelCoordinates.y) + (labelSettings.orientation === _settings__WEBPACK_IMPORTED_MODULE_1__.LabelOrientation.Horizontal ? '' : 'rotate(-90)');
      }).style('fill', labelSettings.color).style('font-size', fontSizeInPx).style('font-family', fontFamily).style('pointer-events', 'none').text(function (p) {
        return dataLabelFormatter.format(p.value);
      });
    }
  }, {
    key: "renderDataLabelsForSmallMultiple",
    value: function renderDataLabelsForSmallMultiple(data, settings, dataLabelsContext, metadata) {
      var dataPoints = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      var labelSettings = settings.categoryLabels;
      dataLabelsContext.selectAll('*').remove();
      if (!labelSettings.show) {
        return;
      }
      var dataPointsArray = this.filterData(dataPoints || data.dataPoints);
      var labelSelection = dataLabelsContext.selectAll(RenderVisual.Label.selectorName).data(dataPointsArray);
      var dataLabelFormatter = _utils_formattingUtils__WEBPACK_IMPORTED_MODULE_5__.createFormatter(labelSettings.displayUnits, labelSettings.precision, metadata.cols.value, (0,_utils_formattingUtils__WEBPACK_IMPORTED_MODULE_5__.getValueForFormatter)(data));
      var labelSelectionEnter = labelSelection.enter().append('svg:text');
      labelSelection = labelSelection.merge(labelSelectionEnter);
      var fontSizeInPx = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_6__.fromPoint(labelSettings.fontSize);
      var fontFamily = labelSettings.fontFamily ? labelSettings.fontFamily : powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_7__.LabelTextProperties.fontFamily;
      labelSelection.attr('transform', function (p) {
        return powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_8__.translate(p.labelCoordinates.x, p.labelCoordinates.y);
      });
      labelSelection.style('fill', labelSettings.color).style('font-size', fontSizeInPx).style('font-family', fontFamily).style('pointer-events', 'none').text(function (p) {
        return dataLabelFormatter.format(p.value);
      });
      labelSelection.exit().remove();
    }
  }, {
    key: "renderSmallMultipleTopTitle",
    value: function renderSmallMultipleTopTitle(options, settings) {
      var uniqueColumns = options.columns,
        index = options.index,
        chartSize = options.chartSize,
        chartElement = options.chartElement,
        leftSpace = options.leftSpace,
        topSpace = options.topSpace,
        textHeight = options.textHeight,
        fontSizeInPx = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_6__.fromPoint(settings.fontSize),
        fontFamily = settings.fontFamily;
      var topTitles = chartElement.append('svg');
      var topTitlestext = topTitles.selectAll('*').data([uniqueColumns[index]]);
      // For removed categories, remove the SVG group.
      topTitlestext.exit().remove();
      var topTitlestextEnter = topTitlestext.enter().append('text').attr('class', Selectors.AxisLabelSelector.className);
      var textProperties = {
        fontFamily: fontFamily,
        fontSize: fontSizeInPx
      };
      topTitlestext.merge(topTitlestextEnter).style('text-anchor', 'middle').style('font-size', fontSizeInPx).style('font-family', fontFamily).style('fill', settings.fontColor).attr('dy', '0.3em').text(function (d) {
        if (d) {
          textProperties.text = d && d.toString();
          return powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.getTailoredTextOrDefault(textProperties, chartSize.width - 10);
        }
        return null;
      }).call(function (text) {
        var textSelectionX = d3_selection__WEBPACK_IMPORTED_MODULE_10__["default"](text.nodes()[0]);
        var x = leftSpace + chartSize.width / 2;
        textSelectionX.attr('transform', powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_8__.translate(x, topSpace + textHeight / 2));
      });
    }
  }, {
    key: "filterData",
    value: function filterData(dataPoints) {
      var filteredDatapoints = [];
      var validCoordinatesDataPoints = dataPoints.filter(function (x) {
        return x.labelCoordinates;
      });
      for (var index in validCoordinatesDataPoints) {
        var dataPoint = validCoordinatesDataPoints[index];
        var coords = dataPoint.labelCoordinates;
        var isIntersected = false;
        for (var i in filteredDatapoints) {
          var filteredDatapoint = filteredDatapoints[i];
          var filteredCoods = filteredDatapoint.labelCoordinates;
          if (coords.x < filteredCoods.x + filteredCoods.width + 8 && coords.x + coords.width > filteredCoods.x + 8 && coords.y < filteredCoods.y + filteredCoods.height + 2 && coords.y + coords.height > filteredCoods.y + 2) {
            isIntersected = true;
            break;
          }
        }
        if (!isIntersected) {
          filteredDatapoints.push(dataPoint);
        }
      }
      return filteredDatapoints;
    }
  }, {
    key: "renderTooltip",
    value: function renderTooltip(selection, tooltipServiceWrapper) {
      tooltipServiceWrapper.addTooltip(selection, function (tooltipEvent) {
        return tooltipEvent.tooltips;
      }, null, true);
    }
  }, {
    key: "renderConstantLine",
    value: function renderConstantLine(settings, element, axes, width) {
      var line = element.select('.const-line');
      var yValue = settings.value;
      if (yValue < axes.y.dataDomain[0]) {
        yValue = axes.y.dataDomain[0];
      } else if (yValue > axes.y.dataDomain[1]) {
        yValue = axes.y.dataDomain[1];
      }
      var y = axes.y.scale(yValue);
      var x = axes.x.scale(axes.x.dataDomain[0]);
      if (line.node()) {
        element.selectAll('line').remove();
      }
      if (settings.position === _settings__WEBPACK_IMPORTED_MODULE_1__.Position.InFront) {
        line = element.append('line');
      } else {
        line = element.insert('line', '.bar-group');
      }
      line.classed('const-line', true).style('display', settings.show ? 'unset' : 'none').style('stroke', settings.lineColor).style('stroke-opacity', 1 - settings.transparency / 100).style('stroke-width', '3px').attr('y2', y).attr('x2', width).attr('y1', y);
      if (settings.lineStyle === _settings__WEBPACK_IMPORTED_MODULE_1__.LineStyle.Dotted) {
        line.style('stroke-dasharray', '1, 5').style('stroke-linecap', 'round');
      } else if (settings.lineStyle === _settings__WEBPACK_IMPORTED_MODULE_1__.LineStyle.Dashed) {
        line.style('stroke-dasharray', '5, 5');
      }
      var textProperties = {
        fontFamily: 'wf_standard-font, helvetica, arial, sans-serif',
        fontSize: '10px'
      };
      var text = this.getLineText(settings);
      var textWidth = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.measureSvgTextWidth(textProperties, text);
      var textHeight = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.estimateSvgTextHeight(textProperties);
      var label = element.select('.const-label');
      if (label.node()) {
        element.selectAll('text').remove();
      }
      if (settings.show && settings.dataLabelShow) {
        label = element.append('text').classed('const-label', true);
        label.attr('transform', this.getTranslateForStaticLineLabel(x, y, textWidth, textHeight, settings, axes, width));
        label.text(text).style('font-family', 'wf_standard-font, helvetica, arial, sans-serif').style('font-size', '10px').style('fill', settings.fontColor);
      }
    }
  }, {
    key: "getLineText",
    value: function getLineText(settings) {
      var displayUnits = settings.displayUnits;
      var precision = settings.precision;
      var formatter = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.valueFormatter.create({
        value: displayUnits,
        value2: 0,
        precision: precision,
        format: '0'
      });
      switch (settings.text) {
        case _settings__WEBPACK_IMPORTED_MODULE_1__.Text.Name:
          {
            return settings.name;
          }
        case _settings__WEBPACK_IMPORTED_MODULE_1__.Text.Value:
          {
            return formatter.format(settings.value);
          }
        case _settings__WEBPACK_IMPORTED_MODULE_1__.Text.NameAndValue:
          {
            return settings.name + ' ' + formatter.format(settings.value);
          }
      }
    }
  }, {
    key: "getTranslateForStaticLineLabel",
    value: function getTranslateForStaticLineLabel(x, y, textWidth, textHeight, settings, axes, width) {
      var positionAlong;
      var marginAlong = 8;
      if (settings.horizontalPosition === _settings__WEBPACK_IMPORTED_MODULE_1__.HorizontalPosition.Left) {
        positionAlong = marginAlong;
      } else {
        positionAlong = width - textWidth - marginAlong;
      }
      var marginAcross = 5;
      var positionAcross;
      if (settings.verticalPosition === _settings__WEBPACK_IMPORTED_MODULE_1__.VerticalPosition.Top) {
        positionAcross = y - (marginAcross + textHeight);
      } else {
        positionAcross = y + (marginAcross + textHeight);
      }
      var minPosition = axes.y.scale(axes.y.dataDomain[1]);
      var maxPosition = axes.y.scale(axes.y.dataDomain[0]);
      if (positionAcross <= minPosition) {
        positionAcross = minPosition + marginAcross;
      } else if (positionAcross >= maxPosition) {
        positionAcross = maxPosition - (textHeight + marginAcross);
      }
      return powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_8__.translate(positionAlong, positionAcross);
    }
  }, {
    key: "renderSmallMultipleLines",
    value: function renderSmallMultipleLines(options, settings) {
      var uniqueRows = options.rows,
        uniqueColumns = options.columns,
        chartSize = options.chartSize,
        chartElement = options.chartElement,
        leftSpace = options.leftSpace,
        topSpace = options.topSpace,
        rowsInFlow = options.rowsInFlow;
      for (var i = 1; i < uniqueRows.length; ++i) {
        var y = 0;
        if (settings.layoutMode === _settings__WEBPACK_IMPORTED_MODULE_1__.LayoutMode.Matrix) {
          y = topSpace * 2 + i * chartSize.height + this.gapBetweenCharts * (i - 1);
        } else {
          y = topSpace * i * rowsInFlow + i * chartSize.height * rowsInFlow + this.gapBetweenCharts * (i * rowsInFlow - 1) + this.gapBetweenCharts / 2;
        }
        var line = chartElement.append('line').style('stroke', '#aaa').style('stroke-width', 1);
        line.attr('x1', 0) //leftSpace + gapBetweenCharts / 2,)
        .attr('x2', leftSpace + uniqueColumns.length * chartSize.width + this.gapBetweenCharts * uniqueColumns.length).attr('y1', y).attr('y2', y);
      }
      if (settings.layoutMode === _settings__WEBPACK_IMPORTED_MODULE_1__.LayoutMode.Matrix) {
        for (var j = 1; j < uniqueColumns.length; ++j) {
          var x = leftSpace + j * chartSize.width + this.gapBetweenCharts * j;
          var _line = chartElement.append('line').style('stroke', '#aaa').style('stroke-width', 1);
          _line.attr('x1', x).attr('x2', x).attr('y1', 0).attr('y2', topSpace + uniqueRows.length * chartSize.height + this.gapBetweenCharts * uniqueRows.length);
        }
      }
    }
  }, {
    key: "renderSmallMultipleTitles",
    value: function renderSmallMultipleTitles(options, settings) {
      var _this = this;
      var uniqueColumns = options.columns,
        uniqueRows = options.rows,
        chartSize = options.chartSize,
        chartElement = options.chartElement,
        leftSpace = options.leftSpace,
        topSpace = options.topSpace,
        fontSizeInPx = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_6__.fromPoint(settings.fontSize),
        fontFamily = settings.fontFamily,
        rowsInFlow = options.rowsInFlow;
      if (settings.layoutMode === _settings__WEBPACK_IMPORTED_MODULE_1__.LayoutMode.Matrix) {
        var topTitles = chartElement.append('svg');
        var topTitlestext = topTitles.selectAll('*').data(uniqueColumns);
        // For removed categories, remove the SVG group.
        topTitlestext.exit().remove();
        var topTitlestextEnter = topTitlestext.enter().append('text').attr('class', Selectors.AxisLabelSelector.className);
        var _textProperties = {
          fontFamily: fontFamily,
          fontSize: fontSizeInPx
        };
        topTitlestext.merge(topTitlestextEnter).style('text-anchor', 'middle').style('font-size', fontSizeInPx).style('font-family', fontFamily).style('fill', settings.fontColor).attr('dy', '1em').text(function (d) {
          if (d || d === 0) {
            _textProperties.text = d.toString();
            return powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.getTailoredTextOrDefault(_textProperties, chartSize.width - 10);
          }
          return null;
        }).call(function (text) {
          for (var j = 0; j < uniqueColumns.length; ++j) {
            var textSelectionX = d3_selection__WEBPACK_IMPORTED_MODULE_10__["default"](text.nodes()[j]);
            var x = leftSpace + j * chartSize.width + chartSize.width / 2 + _this.gapBetweenCharts * j;
            textSelectionX.attr('transform', powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_8__.translate(x, topSpace / 2));
          }
        });
      }
      var leftTitleSpace = 120;
      var textProperties = {
        fontFamily: fontFamily,
        fontSize: fontSizeInPx
      };
      var leftTitles = chartElement.append('svg');
      var leftTitlesText = leftTitles.selectAll('*').data(uniqueRows);
      // For removed categories, remove the SVG group.
      leftTitlesText.exit().remove();
      var leftTitlesTextEnter = leftTitlesText.enter().append('text').attr('class', Selectors.AxisLabelSelector.className);
      leftTitlesText.merge(leftTitlesTextEnter).style('text-anchor', 'middle').style('font-size', fontSizeInPx).style('font-family', fontFamily).style('fill', settings.fontColor).text(function (d) {
        if (d) {
          textProperties.text = d && d.toString();
          return powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.getTailoredTextOrDefault(textProperties, leftTitleSpace);
        }
        return null;
      }).call(function (text) {
        for (var i = 0; i < uniqueRows.length; ++i) {
          var textSelectionX = d3_selection__WEBPACK_IMPORTED_MODULE_10__["default"](text.nodes()[i]);
          var y = 0;
          if (settings.layoutMode === _settings__WEBPACK_IMPORTED_MODULE_1__.LayoutMode.Flow) {
            var previousChartGroupHeight = i * rowsInFlow * chartSize.height + _this.gapBetweenCharts * i * rowsInFlow + topSpace * rowsInFlow * i;
            y = previousChartGroupHeight + rowsInFlow * chartSize.height / 2 + topSpace;
          } else {
            y = i * chartSize.height + chartSize.height / 2 + topSpace * 2 + _this.gapBetweenCharts * i;
          }
          textSelectionX.attr('transform', powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_8__.translate(leftSpace / 2, y));
        }
      });
    }
  }]);
  return RenderVisual;
}();
RenderVisual.Label = createClassAndSelector('label');
RenderVisual.gapBetweenCharts = 10;

/***/ }),

/***/ "./src/scrollbarUtil.ts":
/*!******************************!*\
  !*** ./src/scrollbarUtil.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollBar": () => (/* binding */ ScrollBar)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var ScrollBar = /*#__PURE__*/function () {
  function ScrollBar(visual) {
    _classCallCheck(this, ScrollBar);
    this.settings = {
      trackSize: 10,
      trackMargin: 10,
      minCategorySpace: 25
    };
    // Easiest way to allow/disallow scrollbar functionality
    this.allow = true;
    this.enabled = false;
    this.scrolling = {
      active: false,
      mousedownClientY: 0,
      mousemoveStartY: 0,
      currentY: 0,
      positionsCount: 0,
      currentPosition: 0
    };
    this.track = {
      el: null,
      left: 0,
      top: 0,
      width: 0,
      height: 0,
      availableScrollDistance: 1 // Must not be 0 because appears as the denominator
    };

    this.visual = visual;
  }
  _createClass(ScrollBar, [{
    key: "init",
    value: function init(mainElement) {
      var _this = this;
      this.htmlElement = (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"])('html');
      this.mainElement = mainElement;
      this.track.el = this.mainElement.append('div').classed('scrollbar-track', true);
      this.handle = this.track.el.append('button').classed('scrollbar-handle', true);
      this.handle.on('mousedown', function (e) {
        _this.onMousedown(e);
      });
      this.htmlElement.on('mousemove', function (e) {
        _this.onMousemove(e);
      }).on('mouseup', function () {
        _this.onMouseup();
      });
      this.mainElement.on('wheel', function (e) {
        _this.onMousewheel(e);
      });
    }
  }, {
    key: "update",
    value: function update() {
      if (!this.enabled) {
        return;
      }
      this.updateMeasurements();
    }
  }, {
    key: "updateData",
    value: function updateData(action, updateType) {
      this.settings.minCategorySpace = this.visual.settings.categoryAxis.minCategoryWidth;
      var availableSpace = this.visual.viewport.height - this.visual.visualMargin.top - this.visual.visualMargin.bottom;
      this.capacity = Math.floor(availableSpace / this.settings.minCategorySpace);
      this.scrolling.positionsCount = this.visual.categoriesCount - this.capacity;
      if (this.allow && action === "enable" /* ScrollbarState.Enable */ && this.scrolling.positionsCount > 0) {
        this.enable();
        if (4 /* powerbiApi.VisualUpdateType.Resize */ === (updateType & 4 /* powerbiApi.VisualUpdateType.Resize */) || 32 /* powerbiApi.VisualUpdateType.ResizeEnd */ === (updateType & 32 /* powerbiApi.VisualUpdateType.ResizeEnd */)) {
          this.correctScrollingPosition();
        } else {
          this.updateScrollingPosition(0);
        }
        this.updateHandlerTranslateY(true);
        this.determineDataOfVisibleItems();
      } else {
        this.disable();
      }
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return this.enabled;
    }
  }, {
    key: "getScrollPosition",
    value: function getScrollPosition() {
      return this.scrolling.currentPosition;
    }
  }, {
    key: "getVisibleDataPoints",
    value: function getVisibleDataPoints() {
      return this.visibleDataPoints;
    }
  }, {
    key: "getIndexOfFirstVisibleDataPoint",
    value: function getIndexOfFirstVisibleDataPoint() {
      var allDataPoints = this.visual.getAllDataPoints().filter(function (x) {
        return !x.highlight;
      });
      var firstVisibleDataPoint = this.visibleDataPoints[0];
      for (var i = 0; i < allDataPoints.length; i++) {
        if (allDataPoints[i] === firstVisibleDataPoint) {
          return i;
        }
      }
      return null;
    }
  }, {
    key: "onMousedown",
    value: function onMousedown(e) {
      if (!this.enabled) {
        return;
      }
      this.scrolling.mousedownClientY = e.clientY;
      this.scrolling.active = true;
      this.scrolling.mousemoveStartY = this.scrolling.currentY;
    }
  }, {
    key: "onMousemove",
    value: function onMousemove(e) {
      if (!this.scrolling.active) {
        return;
      }
      this.scrolling.currentY = this.scrolling.mousemoveStartY + (e.clientY - this.scrolling.mousedownClientY);
      this.updateHandlerTranslateY();
      this.updateScrollingPosition();
      this.determineDataOfVisibleItems();
      this.visual.onScrollPosChanged();
    }
  }, {
    key: "onMouseup",
    value: function onMouseup() {
      if (!this.scrolling.active) {
        return;
      }
      this.scrolling.active = false;
      this.scrolling.mousemoveStartY = 0;
    }
  }, {
    key: "onMousewheel",
    value: function onMousewheel(e) {
      if (!this.enabled) {
        return;
      }
      if (e.deltaY > 0) {
        this.updateScrollingPosition(1, true);
      } else {
        this.updateScrollingPosition(-1, true);
      }
      this.updateHandlerTranslateY(true);
      this.determineDataOfVisibleItems();
      this.visual.onScrollPosChanged();
    }
  }, {
    key: "enable",
    value: function enable() {
      this.enabled = true;
      this.track.el.style('display', 'block');
    }
  }, {
    key: "disable",
    value: function disable() {
      this.enabled = false;
      this.visibleDataPoints = this.visual.getAllDataPoints();
      this.track.el.style('display', '');
    }
  }, {
    key: "determineDataOfVisibleItems",
    value: function determineDataOfVisibleItems() {
      this.visibleDataPointsByCategories = [];
      this.visibleDataPoints = [];
      var dataPointsByCategories = this.visual.getDataPointsByCategories();
      for (var categoryIndex = 0; categoryIndex < dataPointsByCategories.length; categoryIndex++) {
        var _this$visibleDataPoin;
        if (categoryIndex < this.scrolling.currentPosition) {
          continue;
        }
        if (categoryIndex >= this.scrolling.currentPosition + this.capacity) {
          break;
        }
        this.visibleDataPointsByCategories.push(dataPointsByCategories[categoryIndex]);
        // Add all items of this category
        (_this$visibleDataPoin = this.visibleDataPoints).push.apply(_this$visibleDataPoin, _toConsumableArray(dataPointsByCategories[categoryIndex].dataPoints));
      }
    }
  }, {
    key: "correctScrollingPosition",
    value: function correctScrollingPosition() {
      // Correcting the value if it goes beyond the limits
      if (this.scrolling.currentPosition < 0) {
        this.scrolling.currentPosition = 0;
      } else if (this.scrolling.currentPosition >= this.scrolling.positionsCount) {
        this.scrolling.currentPosition = this.scrolling.positionsCount;
      }
    }
  }, {
    key: "updateScrollingPosition",
    value: function updateScrollingPosition(newValue, relative) {
      if (newValue == null) {
        // Default parameterless case: calculate the value based on handle position
        this.scrolling.currentPosition = Math.round(this.scrolling.currentY / this.track.availableScrollDistance * this.scrolling.positionsCount);
      } else if (relative) {
        // Increase or decrease basing on current value
        this.scrolling.currentPosition += newValue;
      } else {
        // Set a defined point
        this.scrolling.currentPosition = newValue;
      }
      this.correctScrollingPosition();
    }
  }, {
    key: "updateMeasurements",
    value: function updateMeasurements() {
      var visualMargin = this.visual.visualMargin;
      var track = this.track;
      track.width = this.settings.trackSize;
      track.height = this.visual.visualSize.height;
      track.top = visualMargin.top;
      track.left = this.visual.viewport.width - this.settings.trackSize;
      if (this.visual.isLegendNeeded) {
        var legendPosition = this.visual.settings.legend.position;
        if (legendPosition === 'Top' || legendPosition === 'TopCenter') {
          track.top += this.visual.legendSize.height;
        } else if (legendPosition === 'Right' || legendPosition === 'RightCenter') {
          track.left -= this.visual.legendSize.width;
        }
      }
      track.el.style("top", this.track.top + 'px').style("left", this.track.left + 'px').style("height", this.track.height + 'px').style("width", this.track.width + 'px');
      var visibleCategoriesCount = this.visibleDataPointsByCategories.length;
      var allCategoriesCount = this.visual.getDataPointsByCategories().length;
      var handleHeight = track.height * (visibleCategoriesCount / allCategoriesCount);
      this.handle.style('height', handleHeight + 'px');
      track.availableScrollDistance = track.height - handleHeight;
    }
  }, {
    key: "updateHandlerTranslateY",
    value: function updateHandlerTranslateY(byScrollingPosition) {
      if (byScrollingPosition) {
        this.scrolling.currentY = Math.round(this.scrolling.currentPosition / this.scrolling.positionsCount * this.track.availableScrollDistance);
      }
      if (this.scrolling.currentY < 0) {
        this.scrolling.currentY = 0;
      } else if (this.scrolling.currentY > this.track.availableScrollDistance) {
        this.scrolling.currentY = this.track.availableScrollDistance;
      }
      this.handle.style('transform', "translateY(".concat(this.scrolling.currentY, "px)"));
    }
  }]);
  return ScrollBar;
}();

/***/ }),

/***/ "./src/selectionSaveUtils.ts":
/*!***********************************!*\
  !*** ./src/selectionSaveUtils.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "saveSelection": () => (/* binding */ saveSelection)
/* harmony export */ });


function saveSelection(selection, host) {
  var instance = {
    objectName: "selectionSaveSettings",
    selector: undefined,
    properties: {
      selection: JSON.stringify(selection)
    }
  };
  host.persistProperties({
    replace: [instance]
  });
}

/***/ }),

/***/ "./src/settings.ts":
/*!*************************!*\
  !*** ./src/settings.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AxisRangeType": () => (/* binding */ AxisRangeType),
/* harmony export */   "HorizontalPosition": () => (/* binding */ HorizontalPosition),
/* harmony export */   "LabelOrientation": () => (/* binding */ LabelOrientation),
/* harmony export */   "LabelPosition": () => (/* binding */ LabelPosition),
/* harmony export */   "LayoutMode": () => (/* binding */ LayoutMode),
/* harmony export */   "LineStyle": () => (/* binding */ LineStyle),
/* harmony export */   "Position": () => (/* binding */ Position),
/* harmony export */   "Text": () => (/* binding */ Text),
/* harmony export */   "VerticalPosition": () => (/* binding */ VerticalPosition),
/* harmony export */   "VisualSettings": () => (/* binding */ VisualSettings),
/* harmony export */   "categoryAxisSettings": () => (/* binding */ categoryAxisSettings),
/* harmony export */   "categoryLabelsSettings": () => (/* binding */ categoryLabelsSettings),
/* harmony export */   "constantLineSettings": () => (/* binding */ constantLineSettings),
/* harmony export */   "dataPointSettings": () => (/* binding */ dataPointSettings),
/* harmony export */   "legendSettings": () => (/* binding */ legendSettings),
/* harmony export */   "smallMultipleSettings": () => (/* binding */ smallMultipleSettings),
/* harmony export */   "valueAxisSettings": () => (/* binding */ valueAxisSettings)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser.js");


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var DataViewObjectsParser = powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__.DataViewObjectsParser;
var DefaultFontFamily = '"Segoe UI", wf_segoe-ui_normal, helvetica, arial, sans-serif';
var VisualSettings = /*#__PURE__*/function (_DataViewObjectsParse) {
  _inherits(VisualSettings, _DataViewObjectsParse);
  var _super = _createSuper(VisualSettings);
  function VisualSettings() {
    var _this;
    _classCallCheck(this, VisualSettings);
    _this = _super.apply(this, arguments);
    _this.selectionSaveSettings = {
      selection: []
    };
    _this.dataPoint = new dataPointSettings();
    _this.smallMultiple = new smallMultipleSettings();
    _this.legend = new legendSettings();
    _this.categoryAxis = new categoryAxisSettings();
    _this.valueAxis = new valueAxisSettings();
    _this.categoryLabels = new categoryLabelsSettings();
    _this.constantLine = new constantLineSettings();
    return _this;
  }
  return _createClass(VisualSettings);
}(DataViewObjectsParser);
var AxisRangeType;
(function (AxisRangeType) {
  AxisRangeType[AxisRangeType["Common"] = "common"] = "Common";
  AxisRangeType[AxisRangeType["Separate"] = "separate"] = "Separate";
  AxisRangeType[AxisRangeType["Custom"] = "custom"] = "Custom";
})(AxisRangeType || (AxisRangeType = {}));
var LabelPosition;
(function (LabelPosition) {
  LabelPosition[LabelPosition["Auto"] = "auto"] = "Auto";
  LabelPosition[LabelPosition["InsideEnd"] = "end"] = "InsideEnd";
  LabelPosition[LabelPosition["OutsideEnd"] = "outside"] = "OutsideEnd";
  LabelPosition[LabelPosition["InsideBase"] = "base"] = "InsideBase";
  LabelPosition[LabelPosition["InsideCenter"] = "center"] = "InsideCenter";
})(LabelPosition || (LabelPosition = {}));
var LabelOrientation;
(function (LabelOrientation) {
  LabelOrientation[LabelOrientation["Vertical"] = "vertical"] = "Vertical";
  LabelOrientation[LabelOrientation["Horizontal"] = "horizontal"] = "Horizontal";
})(LabelOrientation || (LabelOrientation = {}));
// tslint:disable-next-line:class-name
var dataPointSettings = /*#__PURE__*/_createClass(function dataPointSettings() {
  _classCallCheck(this, dataPointSettings);
  // Fill
  this.fill = "#01b8aa";
  // Show all
  this.showAllDataPoints = true;
});
var LineStyle;
(function (LineStyle) {
  LineStyle[LineStyle["Dashed"] = "dashed"] = "Dashed";
  LineStyle[LineStyle["Solid"] = "solid"] = "Solid";
  LineStyle[LineStyle["Dotted"] = "dotted"] = "Dotted";
})(LineStyle || (LineStyle = {}));
var Position;
(function (Position) {
  Position[Position["Behind"] = "behind"] = "Behind";
  Position[Position["InFront"] = "front"] = "InFront";
})(Position || (Position = {}));
var Text;
(function (Text) {
  Text[Text["Name"] = "name"] = "Name";
  Text[Text["Value"] = "value"] = "Value";
  Text[Text["NameAndValue"] = "nameAndValue"] = "NameAndValue";
})(Text || (Text = {}));
var HorizontalPosition;
(function (HorizontalPosition) {
  HorizontalPosition[HorizontalPosition["Left"] = "left"] = "Left";
  HorizontalPosition[HorizontalPosition["Right"] = "right"] = "Right";
})(HorizontalPosition || (HorizontalPosition = {}));
var VerticalPosition;
(function (VerticalPosition) {
  VerticalPosition[VerticalPosition["Top"] = "top"] = "Top";
  VerticalPosition[VerticalPosition["Bottom"] = "bottom"] = "Bottom";
})(VerticalPosition || (VerticalPosition = {}));
var LayoutMode;
(function (LayoutMode) {
  LayoutMode[LayoutMode["Flow"] = "flow"] = "Flow";
  LayoutMode[LayoutMode["Matrix"] = "matrix"] = "Matrix";
})(LayoutMode || (LayoutMode = {}));
// tslint:disable-next-line:class-name
var legendSettings = /*#__PURE__*/_createClass(function legendSettings() {
  _classCallCheck(this, legendSettings);
  // Show legend
  this.show = true;
  // Position
  this.position = "Top";
  // Show title
  this.showTitle = true;
  // Legend Name
  this.legendName = "";
  // Legend Name Fill
  this.legendNameColor = "";
  // Legend Font Family
  this.fontFamily = DefaultFontFamily;
  // Legend Font Size
  this.fontSize = 8;
});
// tslint:disable-next-line:class-name
var categoryAxisSettings = /*#__PURE__*/_createClass(function categoryAxisSettings() {
  _classCallCheck(this, categoryAxisSettings);
  // Show category axis
  this.show = true;
  // Position
  this.position = "top";
  // Axis type
  this.axisType = "categorical";
  // Axis Scale type
  this.axisScale = "linear";
  this.rangeType = AxisRangeType.Common;
  this.rangeTypeNoScalar = AxisRangeType.Common;
  // Axis start
  this.start = null;
  // Axis end
  this.end = null;
  // Axis color
  this.axisColor = "";
  // Axis Font Size
  this.fontSize = 11;
  // Axis Font Family
  this.fontFamily = DefaultFontFamily;
  // Display Units
  this.displayUnits = 0;
  // valueDecimalPlaces
  this.precision = null;
  // Minimum category width
  this.minCategoryWidth = 20;
  // Minimum category width
  this.maximumSize = 25;
  // Minimum category width
  this.innerPadding = 20;
  // Show title
  this.showTitle = false;
  this.titleStyle = "showTitleOnly";
  this.axisTitleColor = "";
  this.axisTitle = "";
  this.titleFontSize = 11;
  this.titleFontFamily = DefaultFontFamily;
});
// tslint:disable-next-line:class-name
var valueAxisSettings = /*#__PURE__*/_createClass(function valueAxisSettings() {
  _classCallCheck(this, valueAxisSettings);
  // Show category axis
  this.show = true;
  // Position
  this.position = "left";
  // Axis Scale type
  this.axisScale = "linear";
  this.rangeType = AxisRangeType.Common;
  // Axis start
  this.start = null;
  // Axis end
  this.end = null;
  // Axis color
  this.axisColor = "";
  // Axis Font Size
  this.fontSize = 11;
  // Axis Font Family
  this.fontFamily = DefaultFontFamily;
  // Display Units
  this.displayUnits = 0;
  // valueDecimalPlaces
  this.precision = null;
  // Show Title
  this.showTitle = false;
  this.titleStyle = "showTitleOnly";
  this.axisTitleColor = "";
  this.axisTitle = "";
  this.titleFontSize = 11;
  this.titleFontFamily = DefaultFontFamily;
  // Show Gridlines
  this.showGridlines = true;
  this.gridlinesColor = "";
  this.strokeWidth = 1;
  this.lineStyle = "solid";
});
// tslint:disable-next-line:class-name
var categoryLabelsSettings = /*#__PURE__*/_createClass(function categoryLabelsSettings() {
  _classCallCheck(this, categoryLabelsSettings);
  // Show category axis
  this.show = false;
  // Axis color
  this.color = "";
  // Display Units
  this.displayUnits = 0;
  // Value decimal places
  this.precision = 0;
  this.orientation = LabelOrientation.Horizontal;
  // Category labels position
  this.labelPosition = LabelPosition.Auto;
  // Category labels position
  this.labelPositionForFilledLegend = LabelPosition.Auto;
  // Overflow text
  this.overflowText = false;
  // Axis Font Size
  this.fontSize = 9;
  // Axis Font Family
  this.fontFamily = DefaultFontFamily;
  // Show Background
  this.showBackground = false;
  // Show Background transparency
  this.transparency = 90;
  // Show Background transparency
  this.backgroundColor = "";
});
var constantLineSettings = /*#__PURE__*/_createClass(function constantLineSettings() {
  _classCallCheck(this, constantLineSettings);
  this.show = false;
  this.name = "";
  this.value = 0;
  this.lineColor = "#01b8aa";
  this.transparency = 90;
  this.lineStyle = LineStyle.Dotted;
  this.position = Position.Behind;
  this.dataLabelShow = false;
  this.fontColor = "#01b8aa";
  this.text = Text.Name;
  this.horizontalPosition = HorizontalPosition.Left;
  this.verticalPosition = VerticalPosition.Top;
  this.displayUnits = 0;
  this.precision = null;
});
var smallMultipleSettings = /*#__PURE__*/_createClass(function smallMultipleSettings() {
  _classCallCheck(this, smallMultipleSettings);
  this.layoutMode = LayoutMode.Flow;
  this.minUnitWidth = 150;
  this.minUnitHeight = 120;
  this.maxRowWidth = 4;
  this.showChartTitle = true;
  this.textcolor = "#000000";
  this.fontFamily = DefaultFontFamily;
  this.fontSize = 9;
  this.fontColor = "#000000";
  this.showSeparators = true;
});

/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefaultOpacity": () => (/* binding */ DefaultOpacity),
/* harmony export */   "DimmedOpacity": () => (/* binding */ DimmedOpacity),
/* harmony export */   "GetXAxisTitleHeight": () => (/* binding */ GetXAxisTitleHeight),
/* harmony export */   "GetYAxisTitleHeight": () => (/* binding */ GetYAxisTitleHeight),
/* harmony export */   "calculateBarCoordianates": () => (/* binding */ calculateBarCoordianates),
/* harmony export */   "calculateBarCoordianatesByData": () => (/* binding */ calculateBarCoordianatesByData),
/* harmony export */   "calculateDataPointThickness": () => (/* binding */ calculateDataPointThickness),
/* harmony export */   "calculateLabelCoordinates": () => (/* binding */ calculateLabelCoordinates),
/* harmony export */   "categoryIsScalar": () => (/* binding */ categoryIsScalar),
/* harmony export */   "compareObjects": () => (/* binding */ compareObjects),
/* harmony export */   "getFillOpacity": () => (/* binding */ getFillOpacity),
/* harmony export */   "getLabelsMaxHeight": () => (/* binding */ getLabelsMaxHeight),
/* harmony export */   "getLabelsMaxWidth": () => (/* binding */ getLabelsMaxWidth),
/* harmony export */   "getLineStyleParam": () => (/* binding */ getLineStyleParam),
/* harmony export */   "getNumberOfValues": () => (/* binding */ getNumberOfValues),
/* harmony export */   "getTitleWithUnitType": () => (/* binding */ getTitleWithUnitType),
/* harmony export */   "getUnitType": () => (/* binding */ getUnitType),
/* harmony export */   "isScalar": () => (/* binding */ isScalar),
/* harmony export */   "isSelected": () => (/* binding */ isSelected),
/* harmony export */   "recalculateThicknessForContinuous": () => (/* binding */ recalculateThicknessForContinuous),
/* harmony export */   "smallMultipleLabelRotationIsNeeded": () => (/* binding */ smallMultipleLabelRotationIsNeeded)
/* harmony export */ });
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axis.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/utils.ts");
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/min.js");
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/max.js");
/* harmony import */ var _utils_formattingUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/formattingUtils */ "./src/utils/formattingUtils.ts");
/* harmony import */ var _utils_dataLabelHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/dataLabelHelper */ "./src/utils/dataLabelHelper.ts");


function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }



// import { valueType } from "powerbi-visuals-utils-typeutils";





var DisplayUnitValue = 1;
function calculateBarCoordianatesByData(data, settings, barHeight) {
  var isSmallMultiple = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var dataPoints = data.dataPoints;
  var axes = data.axes;
  this.calculateBarCoordianates(dataPoints, axes, settings, barHeight, isSmallMultiple);
}
function calculateBarCoordianates(dataPoints, axes, settings, dataPointThickness) {
  var isSmallMultiple = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var categoryAxisIsContinuous = axes.xIsScalar && settings.categoryAxis.axisType !== 'categorical';
  var skipCategoryStartEnd = isSmallMultiple && settings.categoryAxis.rangeType !== _settings__WEBPACK_IMPORTED_MODULE_0__.AxisRangeType.Custom;
  var categoryAxisStartValue = categoryAxisIsContinuous && settings.categoryAxis.start ? settings.categoryAxis.start : -Number.MAX_VALUE;
  var categoryAxisEndValue = categoryAxisIsContinuous && settings.categoryAxis.end ? settings.categoryAxis.end : Number.MAX_VALUE;
  var thickness = dataPointThickness;
  dataPoints.forEach(function (point) {
    var width = 0;
    if (!axes.xIsScalar || !categoryAxisIsContinuous) {
      width = axes.x.scale.bandwidth();
    } else {
      width = dataPoints.length > 2 ? dataPointThickness * 0.8 : dataPointThickness / 2 * 0.8;
    }
    if (categoryAxisIsContinuous) {
      var categoryvalueIsInRange = point.category >= categoryAxisStartValue && point.category <= categoryAxisEndValue;
      if (!categoryvalueIsInRange) {
        setZeroCoordinatesForPoint(point);
        return;
      }
    }
    var x = axes.x.scale(point.category);
    if (point.shiftValue > axes.y.dataDomain[1]) {
      setZeroCoordinatesForPoint(point);
      return;
    }
    var fromValue = Math.max(point.shiftValue, axes.y.dataDomain[0]);
    var fromCoordinate = axes.y.scale(fromValue);
    if (fromValue + point.valueForHeight < axes.y.dataDomain[0]) {
      setZeroCoordinatesForPoint(point);
      return;
    }
    var toValue = Math.min(point.shiftValue + point.valueForHeight, axes.y.dataDomain[1]);
    var toCoordinate = axes.y.scale(toValue);
    if (toCoordinate >= fromCoordinate) {
      setZeroCoordinatesForPoint(point);
      return;
    }
    var volume = fromCoordinate - toCoordinate;
    if (volume < 1 && volume !== 0) {
      volume = 1;
    }
    point.barCoordinates = {
      height: volume,
      width: width,
      x: x,
      y: toCoordinate
    };
  });
  if (axes.xIsScalar && settings.categoryAxis.axisType !== 'categorical') {
    recalculateThicknessForContinuous(dataPoints, skipCategoryStartEnd, settings.categoryAxis, thickness);
  }
}
function setZeroCoordinatesForPoint(point) {
  point.barCoordinates = {
    height: 0,
    width: 0,
    x: 0,
    y: 0
  };
}
function recalculateThicknessForContinuous(dataPoints, skipCategoryStartEnd, categorySettings, startThickness) {
  var minWidth = 1.5,
    minDistance = Number.MAX_VALUE;
  var start = skipCategoryStartEnd ? null : categorySettings.start,
    end = skipCategoryStartEnd ? null : categorySettings.end;
  var sortedDataPoints = dataPoints.sort(function (a, b) {
    return a.barCoordinates.x - b.barCoordinates.x;
  });
  var sortedBarCoordinates = sortedDataPoints.map(function (d) {
    return d.barCoordinates.x;
  }).filter(function (v, i, a) {
    return a.indexOf(v) === i;
  });
  var firstCoodinate = sortedBarCoordinates[0];
  for (var i = 1; i < sortedBarCoordinates.length; ++i) {
    var distance = sortedBarCoordinates[i] - firstCoodinate;
    minDistance = distance < minDistance ? distance : minDistance;
    firstCoodinate = sortedBarCoordinates[i];
  }
  if (minWidth < minDistance) {
    minWidth = minDistance;
  }
  sortedDataPoints.forEach(function (d) {
    var width = 0;
    if (startThickness > minWidth) {
      var padding = minWidth / 100 * 20;
      width = minWidth - padding;
    } else {
      width = d.barCoordinates.width;
    }
    width = start != null && start > d.category || width < 0 ? 0 : width;
    width = end != null && end <= d.category ? 0 : width;
    d.barCoordinates.width = width;
    d.barCoordinates.x = d.barCoordinates.x - d.barCoordinates.width / 2;
  });
}
function calculateLabelCoordinates(data, settings, metadata, chartHeight, isLegendRendered) {
  var dataPoints = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
  if (!settings.show) {
    return;
  }
  var dataPointsArray = dataPoints || data.dataPoints;
  var dataLabelFormatter = _utils_formattingUtils__WEBPACK_IMPORTED_MODULE_2__.createFormatter(settings.displayUnits, settings.precision, metadata.cols.value, (0,_utils_formattingUtils__WEBPACK_IMPORTED_MODULE_2__.getValueForFormatter)(data));
  var textPropertiesForWidth = (0,_utils_formattingUtils__WEBPACK_IMPORTED_MODULE_2__.getTextProperties)(settings);
  var textPropertiesForHeight = (0,_utils_formattingUtils__WEBPACK_IMPORTED_MODULE_2__.getTextPropertiesForHeightCalculation)(settings);
  dataPointsArray.forEach(function (dataPoint) {
    var formattedText = dataLabelFormatter.format(dataPoint.value);
    textPropertiesForHeight.text = formattedText;
    var isHorizontal = settings.orientation === _settings__WEBPACK_IMPORTED_MODULE_0__.LabelOrientation.Horizontal;
    var textHeight = isHorizontal ? powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_4__.textMeasurementService.estimateSvgTextHeight(textPropertiesForWidth) : powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_4__.textMeasurementService.measureSvgTextWidth(textPropertiesForWidth, formattedText);
    var textWidth = isHorizontal ? powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_4__.textMeasurementService.measureSvgTextWidth(textPropertiesForWidth, formattedText) : powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_4__.textMeasurementService.estimateSvgTextHeight(textPropertiesForWidth);
    var barWidth = dataPoint.barCoordinates.width;
    if (settings.overflowText || textWidth + (settings.showBackground ? _utils_dataLabelHelper__WEBPACK_IMPORTED_MODULE_3__.DataLabelHelper.labelBackgroundHeightPadding : 0) < barWidth) {
      var dx = dataPoint.barCoordinates.x + dataPoint.barCoordinates.width / 2 + (isHorizontal ? -textWidth / 2 : textWidth / 3),
        dy = _utils_dataLabelHelper__WEBPACK_IMPORTED_MODULE_3__.DataLabelHelper.calculatePositionShift(settings, textHeight, dataPoint, chartHeight, isLegendRendered);
      if (dy !== null) {
        dataPoint.labelCoordinates = {
          x: dx,
          y: dy,
          width: textWidth,
          height: textHeight
        };
      } else {
        dataPoint.labelCoordinates = null;
      }
    } else {
      dataPoint.labelCoordinates = null;
    }
  });
}
function getNumberOfValues(dataView) {
  var columns = dataView.metadata.columns;
  var valueFieldsCount = 0;
  for (var columnName in columns) {
    var column = columns[columnName];
    if (column.roles && column.roles["Value" /* Field.Value */]) {
      ++valueFieldsCount;
    }
  }
  return valueFieldsCount;
}
function getLineStyleParam(lineStyle) {
  var strokeDasharray;
  switch (lineStyle) {
    case 'solid':
      strokeDasharray = 'none';
      break;
    case 'dashed':
      strokeDasharray = '7, 5';
      break;
    case 'dotted':
      strokeDasharray = '2, 2';
      break;
  }
  return strokeDasharray;
}
function getUnitType(xAxis) {
  if (xAxis.formatter && xAxis.formatter.displayUnit && xAxis.formatter.displayUnit.value > DisplayUnitValue) {
    return xAxis.formatter.displayUnit.title;
  }
  return null;
}
function getTitleWithUnitType(title, axisStyle, axis) {
  var unitTitle = _utils__WEBPACK_IMPORTED_MODULE_1__.getUnitType(axis) || 'No unit';
  switch (axisStyle) {
    case 'showUnitOnly':
      {
        return unitTitle;
      }
    case 'showTitleOnly':
      {
        return title;
      }
    case 'showBoth':
      {
        return "".concat(title, " (").concat(unitTitle, ")");
      }
  }
}
var DimmedOpacity = 0.4;
var DefaultOpacity = 1.0;
function getFillOpacity(selected, highlight, hasSelection, hasPartialHighlights) {
  if (hasPartialHighlights && !highlight || hasSelection && !selected) {
    return DimmedOpacity;
  }
  return DefaultOpacity;
}
var CategoryMinWidth = 1;
var CategoryMaxWidth = 450;
function calculateDataPointThickness(
// calculateBarHeight
visualDataPoints, visualSize, categoriesCount, categoryInnerPadding, settings) {
  var isCategorical = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  var isSmallMultiple = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
  var currentThickness = visualSize.width / categoriesCount;
  var thickness = 0;
  if (isCategorical || settings.categoryAxis.axisType === 'categorical') {
    var innerPadding = categoryInnerPadding / 100;
    thickness = (0,d3_array__WEBPACK_IMPORTED_MODULE_5__["default"])([CategoryMaxWidth, (0,d3_array__WEBPACK_IMPORTED_MODULE_6__["default"])([CategoryMinWidth, currentThickness])]) * (1 - innerPadding);
  } else {
    var dataPoints = _toConsumableArray(visualDataPoints);
    var skipStartEnd = isSmallMultiple && settings.categoryAxis.rangeType !== _settings__WEBPACK_IMPORTED_MODULE_0__.AxisRangeType.Custom;
    var start = skipStartEnd ? null : settings.categoryAxis.start,
      end = skipStartEnd ? null : settings.categoryAxis.end;
    if (start != null || end != null) {
      dataPoints = dataPoints.filter(function (x) {
        return start != null ? x.value >= start :  true && end != null ? x.value <= end : true;
      });
    }
    var dataPointsCount = dataPoints.map(function (x) {
      return x.category;
    }).filter(function (v, i, a) {
      return a.indexOf(v) === i;
    }).length;
    if (dataPointsCount < 4) {
      var devider = 3.75;
      thickness = visualSize.width / devider;
    } else {
      var _devider = 3.75 + 1.25 * (dataPointsCount - 3);
      thickness = visualSize.width / _devider;
    }
  }
  return thickness;
}
function getLabelsMaxWidth(group) {
  var widths = [];
  group.nodes().forEach(function (item) {
    var dimension = item.getBoundingClientRect();
    widths.push((0,d3_array__WEBPACK_IMPORTED_MODULE_6__["default"])([dimension.width, dimension.height]));
  });
  if (!group || group.size() === 0) {
    widths.push(0);
  }
  return (0,d3_array__WEBPACK_IMPORTED_MODULE_6__["default"])(widths);
}
function getLabelsMaxHeight(group) {
  var heights = [];
  group.nodes().forEach(function (item) {
    var dimension = item.getBoundingClientRect();
    heights.push(dimension.height);
  });
  if (!group || group.size() === 0) {
    heights.push(0);
  }
  return (0,d3_array__WEBPACK_IMPORTED_MODULE_6__["default"])(heights);
}
function GetYAxisTitleHeight(valueSettings) {
  var textPropertiesForHeight = {
    fontFamily: valueSettings.titleFontFamily,
    fontSize: valueSettings.titleFontSize.toString()
  };
  return powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_4__.textMeasurementService.estimateSvgTextHeight(textPropertiesForHeight);
}
function isSelected(selected, highlight, hasSelection, hasPartialHighlights) {
  return !(hasPartialHighlights && !highlight || hasSelection && !selected);
}
function GetXAxisTitleHeight(categorySettings) {
  var textPropertiesForHeight = {
    fontFamily: categorySettings.titleFontFamily,
    fontSize: categorySettings.titleFontSize.toString()
  };
  return powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_4__.textMeasurementService.estimateSvgTextHeight(textPropertiesForHeight);
}
function smallMultipleLabelRotationIsNeeded(xAxisSvgGroup, barHeight, categoryAxisSettings, maxLabelHeight) {
  var rangeBand = barHeight;
  var maxLabelWidth = 0;
  xAxisSvgGroup.selectAll('text').nodes().forEach(function (textNode) {
    var labelWidth = textNode.getBoundingClientRect().width;
    maxLabelWidth = Math.max(maxLabelWidth, labelWidth > maxLabelHeight ? maxLabelHeight : labelWidth);
  });
  return maxLabelWidth > rangeBand;
}
function compareObjects(obj1, obj2, property) {
  var isEqual = false;
  if (obj1.length > 0 && obj2.length > 0 && obj1.length === obj2.length) {
    isEqual = true;
    obj1.forEach(function (o1, i) {
      obj2.forEach(function (o2, j) {
        if (i === j) {
          isEqual = isEqual && o1[property] === o2[property];
        }
      });
    });
  } else if (obj1.length === 0 && obj2.length === 0) {
    isEqual = true;
  }
  return isEqual;
}
function isScalar(column) {
  var categoryType = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_7__.getCategoryValueType(column);
  var isOrdinal = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_7__.isOrdinal(categoryType);
  return !isOrdinal;
}
function categoryIsScalar(metadata) {
  var categoryType = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_7__.getCategoryValueType(metadata.cols.category);
  var isOrdinal = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_7__.isOrdinal(categoryType);
  return !isOrdinal;
}

/***/ }),

/***/ "./src/utils/axis/createAxis.ts":
/*!**************************************!*\
  !*** ./src/utils/axis/createAxis.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAxis": () => (/* binding */ createAxis),
/* harmony export */   "getRecommendedTickValues": () => (/* binding */ getRecommendedTickValues),
/* harmony export */   "getRecommendedTickValuesForAQuantitativeRange": () => (/* binding */ getRecommendedTickValuesForAQuantitativeRange)
/* harmony export */ });
/* harmony import */ var d3_axis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-axis */ "./node_modules/d3-axis/src/axis.js");
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisScale.js");
/* harmony import */ var powerbi_visuals_utils_chartutils_lib_axis_axis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils/lib/axis/axis */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axis.js");
/* harmony import */ var powerbi_visuals_utils_chartutils_lib_axis_axisInterfaces__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils/lib/axis/axisInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisInterfaces.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils_lib_src_date_dateTimeSequence__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils/lib/src/date/dateTimeSequence */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateTimeSequence.js");
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/range.js");


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }






var TickLabelPadding = 2;
var ScalarTickLabelPadding = 3;
var MinTickCount = 2;
/**
 * Copy of function from "powerbi-visuals-utils-chartutils" due to original function doesn't allow to create right axis
 * Create a D3 axis including scale. Can be vertical or horizontal, and either datetime, numeric, or text.
 * @param options The properties used to create the axis.
 */
// eslint-disable-next-line max-lines-per-function
function createAxis(options) {
  var pixelSpan = options.pixelSpan,
    dataDomain = options.dataDomain,
    metaDataColumn = options.metaDataColumn,
    formatString = options.formatString,
    outerPadding = options.outerPadding || 0,
    isCategoryAxis = !!options.isCategoryAxis,
    isScalar = !!options.isScalar,
    isVertical = !!options.isVertical,
    useTickIntervalForDisplayUnits = !!options.useTickIntervalForDisplayUnits,
    // DEPRECATE: same meaning as isScalar?
    getValueFn = options.getValueFn,
    axisDisplayUnits = options.axisDisplayUnits,
    axisPrecision = options.axisPrecision,
    is100Pct = !!options.is100Pct,
    dataType = (0,powerbi_visuals_utils_chartutils_lib_axis_axis__WEBPACK_IMPORTED_MODULE_0__.getCategoryValueType)(metaDataColumn, isScalar),
    orientation = options.orientation;
  var categoryThickness = options.categoryThickness;
  // Create the Scale
  var scaleResult = (0,powerbi_visuals_utils_chartutils_lib_axis_axis__WEBPACK_IMPORTED_MODULE_0__.createScale)(options);
  var scale = scaleResult.scale;
  var bestTickCount = scaleResult.bestTickCount;
  var scaleDomain = scale.domain();
  var isLogScaleAllowed = (0,powerbi_visuals_utils_chartutils_lib_axis_axis__WEBPACK_IMPORTED_MODULE_0__.isLogScalePossible)(dataDomain, dataType);
  // fix categoryThickness if scalar and the domain was adjusted when making the scale "nice"
  if (categoryThickness && isScalar && dataDomain && dataDomain.length === 2) {
    var oldSpan = dataDomain[1] - dataDomain[0];
    var newSpan = scaleDomain[1] - scaleDomain[0];
    if (oldSpan > 0 && newSpan > 0) {
      categoryThickness = categoryThickness * oldSpan / newSpan;
    }
  }
  // Prepare Tick Values for formatting
  var tickValues;
  if (isScalar && bestTickCount === 1 && !arrayIsEmpty(dataDomain)) {
    tickValues = [dataDomain[0]];
  } else {
    var minTickInterval = isScalar ? (0,powerbi_visuals_utils_chartutils_lib_axis_axis__WEBPACK_IMPORTED_MODULE_0__.getMinTickValueInterval)(formatString, dataType, is100Pct) : undefined;
    tickValues = getRecommendedTickValues(bestTickCount, scale, dataType, isScalar, minTickInterval);
  }
  if (options.scaleType && options.scaleType === powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_1__.log && isLogScaleAllowed) {
    tickValues = tickValues.filter(function (d) {
      return (0,powerbi_visuals_utils_chartutils_lib_axis_axis__WEBPACK_IMPORTED_MODULE_0__.powerOfTen)(d);
    });
  }
  var formatter = (0,powerbi_visuals_utils_chartutils_lib_axis_axis__WEBPACK_IMPORTED_MODULE_0__.createFormatter)(scaleDomain, dataDomain, dataType, isScalar, formatString, bestTickCount, tickValues, getValueFn, useTickIntervalForDisplayUnits, axisDisplayUnits, axisPrecision);
  var axisFunction;
  switch (orientation) {
    case powerbi_visuals_utils_chartutils_lib_axis_axisInterfaces__WEBPACK_IMPORTED_MODULE_2__.AxisOrientation.left:
      axisFunction = d3_axis__WEBPACK_IMPORTED_MODULE_3__.axisLeft;
      break;
    case powerbi_visuals_utils_chartutils_lib_axis_axisInterfaces__WEBPACK_IMPORTED_MODULE_2__.AxisOrientation.right:
      axisFunction = d3_axis__WEBPACK_IMPORTED_MODULE_3__.axisRight;
      break;
    case powerbi_visuals_utils_chartutils_lib_axis_axisInterfaces__WEBPACK_IMPORTED_MODULE_2__.AxisOrientation.bottom:
      axisFunction = d3_axis__WEBPACK_IMPORTED_MODULE_3__.axisBottom;
      break;
    case powerbi_visuals_utils_chartutils_lib_axis_axisInterfaces__WEBPACK_IMPORTED_MODULE_2__.AxisOrientation.top:
      axisFunction = d3_axis__WEBPACK_IMPORTED_MODULE_3__.axisTop;
      break;
    default:
      axisFunction = isVertical ? d3_axis__WEBPACK_IMPORTED_MODULE_3__.axisLeft : d3_axis__WEBPACK_IMPORTED_MODULE_3__.axisBottom;
  }
  var axis = axisFunction(scale).tickSize(6).ticks(bestTickCount).tickValues(tickValues);
  var formattedTickValues = [];
  if (metaDataColumn) formattedTickValues = formatAxisTickValues(axis, tickValues, formatter, dataType, getValueFn);
  var xLabelMaxWidth;
  // Use category layout of labels if specified, otherwise use scalar layout of labels
  if (!isScalar && categoryThickness) {
    xLabelMaxWidth = Math.max(1, categoryThickness - TickLabelPadding * 2);
  } else {
    // When there are 0 or 1 ticks, then xLabelMaxWidth = pixelSpan
    xLabelMaxWidth = tickValues.length > 1 ? getScalarLabelMaxWidth(scale, tickValues) : pixelSpan;
    xLabelMaxWidth = xLabelMaxWidth - ScalarTickLabelPadding * 2;
  }
  return {
    scale: scale,
    axis: axis,
    formatter: formatter,
    values: formattedTickValues,
    axisType: dataType,
    axisLabel: null,
    isCategoryAxis: isCategoryAxis,
    xLabelMaxWidth: xLabelMaxWidth,
    categoryThickness: categoryThickness,
    outerPadding: outerPadding,
    usingDefaultDomain: scaleResult.usingDefaultDomain,
    isLogScaleAllowed: isLogScaleAllowed,
    dataDomain: dataDomain
  };
}
function arrayIsEmpty(array) {
  return !(array && array.length);
}
/**
 * Format the linear tick labels or the category labels.
 */
function formatAxisTickValues(axis, tickValues, formatter, dataType, getValueFn) {
  var formattedTickValues = [];
  if (!getValueFn) getValueFn = function getValueFn(data) {
    return data;
  };
  if (formatter) {
    axis.tickFormat(function (d) {
      return formatter.format(getValueFn(d, dataType));
    });
    formattedTickValues = tickValues.map(function (d) {
      return formatter.format(getValueFn(d, dataType));
    });
  } else {
    formattedTickValues = tickValues.map(function (d) {
      return getValueFn(d, dataType);
    });
  }
  return formattedTickValues;
}
function getScalarLabelMaxWidth(scale, tickValues) {
  // find the distance between two ticks. scalar ticks can be anywhere, such as:
  // |---50----------100--------|
  if (scale && !arrayIsEmpty(tickValues)) {
    return Math.abs(scale(tickValues[1]) - scale(tickValues[0]));
  }
  return 1;
}
function getRecommendedTickValues(maxTicks, scale, axisType, isScalar, minTickInterval) {
  if (!isScalar || (0,powerbi_visuals_utils_chartutils_lib_axis_axis__WEBPACK_IMPORTED_MODULE_0__.isOrdinalScale)(scale)) {
    return (0,powerbi_visuals_utils_chartutils_lib_axis_axis__WEBPACK_IMPORTED_MODULE_0__.getRecommendedTickValuesForAnOrdinalRange)(maxTicks, scale.domain());
  } else if ((0,powerbi_visuals_utils_chartutils_lib_axis_axis__WEBPACK_IMPORTED_MODULE_0__.isDateTime)(axisType)) {
    return getRecommendedTickValuesForADateTimeRange(maxTicks, scale.domain());
  }
  return getRecommendedTickValuesForAQuantitativeRange(maxTicks, scale, minTickInterval);
}
function getRecommendedTickValuesForADateTimeRange(maxTicks, dataDomain) {
  var tickLabels = [];
  if (dataDomain[0] === 0 && dataDomain[1] === 0) return [];
  var dateTimeTickLabels = powerbi_visuals_utils_formattingutils_lib_src_date_dateTimeSequence__WEBPACK_IMPORTED_MODULE_4__.DateTimeSequence.CALCULATE(new Date(dataDomain[0]), new Date(dataDomain[1]), maxTicks).sequence;
  tickLabels = dateTimeTickLabels.map(function (d) {
    return d.getTime();
  });
  tickLabels = (0,powerbi_visuals_utils_chartutils_lib_axis_axis__WEBPACK_IMPORTED_MODULE_0__.ensureValuesInRange)(tickLabels, dataDomain[0], dataDomain[1]);
  return tickLabels;
}
function getRecommendedTickValuesForAQuantitativeRange(maxTicks, scale, minInterval) {
  var tickLabels = [];
  // if maxticks is zero return none
  if (maxTicks === 0) return tickLabels;
  var quantitiveScale = scale;
  if (quantitiveScale.ticks) {
    tickLabels = d3_scale_linearTicks(quantitiveScale.domain(), maxTicks);
    if (tickLabels.length > maxTicks && maxTicks > 1) tickLabels = d3_scale_linearTicks(quantitiveScale.domain(), maxTicks - 1);
    if (tickLabels.length < MinTickCount) {
      tickLabels = d3_scale_linearTicks(quantitiveScale.domain(), maxTicks + 1);
    }
    tickLabels = createTrueZeroTickLabel(tickLabels);
    if (minInterval && tickLabels.length > 1) {
      var tickInterval = tickLabels[1] - tickLabels[0];
      while (tickInterval > 0 && tickInterval < minInterval) {
        for (var i = 1; i < tickLabels.length; i++) {
          tickLabels.splice(i, 1);
        }
        tickInterval = tickInterval * 2;
      }
      // keep at least two labels - the loop above may trim all but one if we have odd # of tick labels and dynamic range < minInterval
      if (tickLabels.length === 1) {
        tickLabels.push(tickLabels[0] + minInterval);
      }
    }
    return tickLabels;
  }
  return tickLabels;
}
/**
 * Round out very small zero tick values (e.g. -1e-33 becomes 0).
 *
 * @param ticks Array of numbers (from d3.scale.ticks([maxTicks])).
 * @param epsilon Max ratio of calculated tick interval which we will recognize as zero.
 *
 * e.g.
 *     ticks = [-2, -1, 1e-10, 3, 4]; epsilon = 1e-5;
 *     closeZero = 1e-5 * | 2 - 1 | = 1e-5
 *     // Tick values <= 1e-5 replaced with 0
 *     return [-2, -1, 0, 3, 4];
 */
function createTrueZeroTickLabel(ticks) {
  var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-5;
  if (!ticks || ticks.length < 2) return ticks;
  var closeZero = epsilon * Math.abs(ticks[1] - ticks[0]);
  return ticks.map(function (tick) {
    return Math.abs(tick) <= closeZero ? 0 : tick;
  });
}
/**
 * Copy of legacy d3 functions, slightly changed to compile.
 * New implementation of d3 scale.ticks() returns too much ticks, causing overlapping of labels.
 */
function d3_scale_linearTicks(domain, m) {
  var _d3_scale_linearTickR = d3_scale_linearTickRange(domain, m),
    _d3_scale_linearTickR2 = _slicedToArray(_d3_scale_linearTickR, 3),
    rangeMin = _d3_scale_linearTickR2[0],
    rangeMax = _d3_scale_linearTickR2[1],
    step = _d3_scale_linearTickR2[2];
  return (0,d3_array__WEBPACK_IMPORTED_MODULE_5__["default"])(rangeMin, rangeMax, step);
}
function d3_scale_linearTickRange(domain, m) {
  if (m == null) m = 10;
  var extent = d3_scaleExtent(domain),
    span = extent[1] - extent[0];
  var step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10));
  var err = m / span * step;
  // Filter ticks to get closer to the desired count.
  if (err <= .15) step *= 10;else if (err <= .35) step *= 5;else if (err <= .75) step *= 2;
  // Round start and stop values to step interval.
  extent[0] = Math.ceil(extent[0] / step) * step;
  extent[1] = Math.floor(extent[1] / step) * step + step * .5; // inclusive
  extent[2] = step;
  return extent;
}
function d3_scaleExtent(domain) {
  var start = domain[0],
    stop = domain[domain.length - 1];
  return start < stop ? [start, stop] : [stop, start];
}

/***/ }),

/***/ "./src/utils/axis/yAxisUtils.ts":
/*!**************************************!*\
  !*** ./src/utils/axis/yAxisUtils.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convertPositionToAxisOrientation": () => (/* binding */ convertPositionToAxisOrientation),
/* harmony export */   "getXAxisMaxWidth": () => (/* binding */ getXAxisMaxWidth)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_chartutils_lib_axis_axisInterfaces__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils/lib/axis/axisInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisInterfaces.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../settings */ "./src/settings.ts");




var getXAxisMaxWidth = function getXAxisMaxWidth(visualWidth, settings) {
  return visualWidth / 100 * settings.categoryAxis.maximumSize;
};
function convertPositionToAxisOrientation(position) {
  switch (position) {
    case _settings__WEBPACK_IMPORTED_MODULE_0__.HorizontalPosition.Left:
      return powerbi_visuals_utils_chartutils_lib_axis_axisInterfaces__WEBPACK_IMPORTED_MODULE_1__.AxisOrientation.left;
    case _settings__WEBPACK_IMPORTED_MODULE_0__.HorizontalPosition.Right:
      return powerbi_visuals_utils_chartutils_lib_axis_axisInterfaces__WEBPACK_IMPORTED_MODULE_1__.AxisOrientation.right;
    case _settings__WEBPACK_IMPORTED_MODULE_0__.VerticalPosition.Top:
      return powerbi_visuals_utils_chartutils_lib_axis_axisInterfaces__WEBPACK_IMPORTED_MODULE_1__.AxisOrientation.top;
    case _settings__WEBPACK_IMPORTED_MODULE_0__.VerticalPosition.Bottom:
      return powerbi_visuals_utils_chartutils_lib_axis_axisInterfaces__WEBPACK_IMPORTED_MODULE_1__.AxisOrientation.bottom;
  }
}

/***/ }),

/***/ "./src/utils/dataLabelHelper.ts":
/*!**************************************!*\
  !*** ./src/utils/dataLabelHelper.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataLabelHelper": () => (/* binding */ DataLabelHelper)
/* harmony export */ });
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../settings */ "./src/settings.ts");


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var DataLabelHelper = /*#__PURE__*/function () {
  function DataLabelHelper() {
    _classCallCheck(this, DataLabelHelper);
  }
  _createClass(DataLabelHelper, null, [{
    key: "canOverflow",
    value: function canOverflow(settings) {
      if (settings.labelPosition === _settings__WEBPACK_IMPORTED_MODULE_0__.LabelPosition.InsideCenter || settings.labelPosition === _settings__WEBPACK_IMPORTED_MODULE_0__.LabelPosition.InsideBase) {
        return false;
      } else if (settings.labelPosition === _settings__WEBPACK_IMPORTED_MODULE_0__.LabelPosition.OutsideEnd || settings.labelPosition === _settings__WEBPACK_IMPORTED_MODULE_0__.LabelPosition.Auto) {
        return true;
      } else if (settings.overflowText) {
        return true;
      }
      return false;
    }
  }, {
    key: "calculateShiftForLegend",
    value: function calculateShiftForLegend(shift, labelHeight, barCoordinates, settings) {
      var barY = barCoordinates.y,
        barHeight = barCoordinates.height,
        backGroundShift = settings.showBackground ? DataLabelHelper.labelBackgroundYShift : 0,
        labelTopBorderPosition = shift - labelHeight + backGroundShift,
        labelBottomBorderPosition = shift - backGroundShift;
      var maxPossibleTopPosition = barY,
        maxPossibleBottomPosition = barY + barHeight;
      var gap = 2;
      if (labelBottomBorderPosition + gap > maxPossibleBottomPosition) {
        shift = maxPossibleBottomPosition - gap + backGroundShift;
        if (shift - labelHeight < maxPossibleTopPosition) {
          return null;
        }
      }
      if (labelTopBorderPosition < maxPossibleTopPosition) {
        shift = barY + labelHeight - backGroundShift;
        if (shift + gap > maxPossibleBottomPosition) {
          return null;
        }
      }
      return shift;
    }
  }, {
    key: "calculateShiftForNoLegend",
    value: function calculateShiftForNoLegend(shift, labelHeight, chartHeight, barCoordinates, settings) {
      var barY = barCoordinates.y,
        barHeight = barCoordinates.height,
        backGroundShift = settings.showBackground ? DataLabelHelper.labelBackgroundYShift : 0,
        labelTopBorderPosition = shift - labelHeight + backGroundShift,
        labelBottomBorderPosition = shift - backGroundShift;
      var canOverflow = DataLabelHelper.canOverflow(settings);
      var maxPossibleTopPosition = canOverflow ? 0 : barY,
        maxPossibleBottomPosition = barY + barHeight;
      if (labelBottomBorderPosition > maxPossibleBottomPosition) {
        shift = maxPossibleBottomPosition + backGroundShift;
        if (shift - labelHeight < maxPossibleTopPosition) {
          return null;
        }
      } else if (labelTopBorderPosition < maxPossibleTopPosition) {
        shift = settings.labelPosition === _settings__WEBPACK_IMPORTED_MODULE_0__.LabelPosition.OutsideEnd ? maxPossibleTopPosition + labelHeight - backGroundShift : barY + labelHeight - backGroundShift;
        if (shift > maxPossibleBottomPosition) {
          return null;
        }
      }
      return shift;
    }
  }, {
    key: "calculatePositionShift",
    value: function calculatePositionShift(settings, labelHeight, dataPoint, chartHeight, isLegendRendered) {
      var barCoordinates = dataPoint.barCoordinates;
      var shift = dataPoint.value >= 0 ? this.calculateLabelPositionShift(settings, labelHeight, barCoordinates, isLegendRendered) : this.calculateLabelPositionShiftForNegativeValues(settings, labelHeight, barCoordinates, isLegendRendered);
      if (isLegendRendered) {
        return this.calculateShiftForLegend(shift, labelHeight, barCoordinates, settings);
      } else {
        return this.calculateShiftForNoLegend(shift, labelHeight, chartHeight, barCoordinates, settings);
      }
    }
  }, {
    key: "calculateLabelPositionShift",
    value: function calculateLabelPositionShift(settings, labelHeight, barCoordinates, isLegendRendered) {
      var backgroundMargin = settings.showBackground ? 2 : 0;
      var barY = barCoordinates.y,
        barHeight = barCoordinates.height;
      switch (settings.labelPosition) {
        case _settings__WEBPACK_IMPORTED_MODULE_0__.LabelPosition.OutsideEnd:
          {
            return barY - this.dataLabelMargin - backgroundMargin;
          }
        case _settings__WEBPACK_IMPORTED_MODULE_0__.LabelPosition.InsideEnd:
          {
            return barY + labelHeight + backgroundMargin + this.dataLabelMargin;
          }
        case _settings__WEBPACK_IMPORTED_MODULE_0__.LabelPosition.InsideBase:
          {
            return barY + barHeight - this.dataLabelMargin - backgroundMargin;
          }
        case _settings__WEBPACK_IMPORTED_MODULE_0__.LabelPosition.InsideCenter:
          {
            return barY + barHeight / 2 + labelHeight / 2;
          }
        default:
          {
            return isLegendRendered ? barY + barHeight / 2 + labelHeight / 2 : barY - this.dataLabelMargin - backgroundMargin;
          }
      }
    }
  }, {
    key: "calculateLabelPositionShiftForNegativeValues",
    value: function calculateLabelPositionShiftForNegativeValues(settings, labelHeight, barCoordinates, isLegendRendered) {
      var backgroundMargin = settings.showBackground ? 2 : 0;
      var barY = barCoordinates.y,
        barHeight = barCoordinates.height;
      switch (settings.labelPosition) {
        case _settings__WEBPACK_IMPORTED_MODULE_0__.LabelPosition.OutsideEnd:
          {
            return barY + this.dataLabelMargin + backgroundMargin;
          }
        case _settings__WEBPACK_IMPORTED_MODULE_0__.LabelPosition.InsideEnd:
          {
            return barY + barHeight - backgroundMargin - this.dataLabelMargin;
          }
        case _settings__WEBPACK_IMPORTED_MODULE_0__.LabelPosition.InsideBase:
          {
            return barY - labelHeight + this.dataLabelMargin + backgroundMargin;
          }
        case _settings__WEBPACK_IMPORTED_MODULE_0__.LabelPosition.InsideCenter:
          {
            return barY + barHeight / 2 + labelHeight / 2;
          }
        default:
          {
            return isLegendRendered ? barY + barHeight / 2 + labelHeight / 2 : barY + this.dataLabelMargin + backgroundMargin;
          }
      }
    }
  }]);
  return DataLabelHelper;
}();
DataLabelHelper.labelBackgroundWidthPadding = 16.2;
DataLabelHelper.labelBackgroundHeightPadding = 2;
DataLabelHelper.labelBackgroundXShift = 7.5;
DataLabelHelper.labelBackgroundYShift = -2;
DataLabelHelper.dataLabelMargin = 6;

/***/ }),

/***/ "./src/utils/formattingUtils.ts":
/*!**************************************!*\
  !*** ./src/utils/formattingUtils.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createFormatter": () => (/* binding */ createFormatter),
/* harmony export */   "getFormatStringByColumn": () => (/* binding */ getFormatStringByColumn),
/* harmony export */   "getTextProperties": () => (/* binding */ getTextProperties),
/* harmony export */   "getTextPropertiesForHeightCalculation": () => (/* binding */ getTextPropertiesForHeightCalculation),
/* harmony export */   "getValueForFormatter": () => (/* binding */ getValueForFormatter)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js");
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelUtils.js");





function getFormatStringByColumn(column) {
  return !column.format && column.type.numeric ? "0.00" : powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.valueFormatter.getFormatStringByColumn(column);
}
function createFormatter(displayUnits, precision, column, value) {
  return powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.valueFormatter.create({
    value: displayUnits === 0 && value ? value : displayUnits,
    value2: 0,
    precision: precision,
    format: this.getFormatStringByColumn(column)
  });
}
function getValueForFormatter(data) {
  return data.axes.x.axis.tickValues()[1];
}
function getTextProperties(settings) {
  var fontSizeInPx = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_1__.fromPoint(settings.fontSize);
  var fontFamily = settings.fontFamily ? settings.fontFamily : powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_2__.LabelTextProperties.fontFamily;
  return {
    fontSize: fontSizeInPx.toString(),
    fontFamily: fontFamily
  };
}
function getTextPropertiesForHeightCalculation(settings) {
  var fontFamily = settings.fontFamily ? settings.fontFamily : powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_2__.LabelTextProperties.fontFamily;
  return {
    fontSize: settings.fontSize.toString(),
    fontFamily: fontFamily
  };
}

/***/ }),

/***/ "./src/utils/legendUtils.ts":
/*!**********************************!*\
  !*** ./src/utils/legendUtils.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefaultFontFamily": () => (/* binding */ DefaultFontFamily),
/* harmony export */   "DefaultLegendPosition": () => (/* binding */ DefaultLegendPosition),
/* harmony export */   "DefaultLegendTitleText": () => (/* binding */ DefaultLegendTitleText),
/* harmony export */   "LegendLabelFontSizeDefault": () => (/* binding */ LegendLabelFontSizeDefault),
/* harmony export */   "MinAmountOfDataPointsInTheLegend": () => (/* binding */ MinAmountOfDataPointsInTheLegend),
/* harmony export */   "buildLegendData": () => (/* binding */ buildLegendData),
/* harmony export */   "buildLegendDataForMultipleValues": () => (/* binding */ buildLegendDataForMultipleValues),
/* harmony export */   "getLegendColors": () => (/* binding */ getLegendColors),
/* harmony export */   "getLegendProperties": () => (/* binding */ getLegendProperties),
/* harmony export */   "getSuitableLegendData": () => (/* binding */ getSuitableLegendData),
/* harmony export */   "renderLegend": () => (/* binding */ renderLegend),
/* harmony export */   "setLegendProperties": () => (/* binding */ setLegendProperties)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var powerbi_visuals_utils_colorutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-colorutils */ "./node_modules/powerbi-visuals-utils-colorutils/lib/index.js");
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../utils */ "./src/utils.ts");
/* harmony import */ var _metadataUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../metadataUtils */ "./src/metadataUtils.ts");
/* harmony import */ var _dataViewConverter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dataViewConverter */ "./src/dataViewConverter.ts");
/* harmony import */ var powerbi_visuals_utils_chartutils_lib_legend_legend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils/lib/legend/legend */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legend.js");
/* harmony import */ var powerbi_visuals_utils_chartutils_lib_legend_legendData__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils/lib/legend/legendData */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendData.js");






var LegendPosition = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_1__.LegendPosition;
var legendProps = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_1__.legendProps;
var LegendIcon = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_1__.MarkerShape;





var MinAmountOfDataPointsInTheLegend = 1;
var LegendLabelFontSizeDefault = 9;
var DefaultFontFamily = "\"Segoe UI\", wf_segoe-ui_normal, helvetica, arial, sans-serif";
var DefaultLegendTitleText = "Type";
var DefaultLegendPosition = "Top";
var DefaultSelectionStateOfTheDataPoint = false;
function buildLegendData(dataValues, host, legendObjectProperties, dataValueSource, categories, categoryIndex, hasDynamicSeries) {
  var colorHelper = new powerbi_visuals_utils_colorutils__WEBPACK_IMPORTED_MODULE_0__.ColorHelper(host.colorPalette, {
    objectName: "dataPoint",
    propertyName: "fill"
  });
  var legendItems = [];
  var grouped = dataValues.grouped();
  var formatString = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_5__.valueFormatter.getFormatStringByColumn(dataValueSource);
  if (hasDynamicSeries) {
    for (var i = 0, len = grouped.length; i < len; i++) {
      var grouping = grouped[i];
      var color = null;
      var objects = grouping.objects;
      if (grouping.name) {
        color = colorHelper.getColorForSeriesValue(objects, grouping.name);
      }
      var selectionId = host.createSelectionIdBuilder().withSeries(dataValues, grouping).createSelectionId();
      legendItems.push({
        color: color || '',
        markerShape: LegendIcon.circle,
        label: powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_5__.valueFormatter.format(grouping.name, formatString),
        identity: selectionId,
        selected: DefaultSelectionStateOfTheDataPoint
      });
    }
  }
  var legendTitle = dataValues && dataValueSource ? dataValueSource.displayName : legendObjectProperties.legendName;
  if (legendObjectProperties.legendName === undefined || legendObjectProperties.legendName.toString().length === 0) {
    legendObjectProperties.legendName = legendTitle;
  }
  if (!legendTitle) {
    legendTitle = categories && categories[categoryIndex] && categories[categoryIndex].source && categories[categoryIndex].source.displayName ? categories[categoryIndex].source.displayName : legendObjectProperties.legendName;
  }
  return {
    title: legendTitle,
    dataPoints: legendItems
  };
}
function getSuitableLegendData(dataView, host, legend) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
  var legendData;
  var numberOfValueFields = _utils__WEBPACK_IMPORTED_MODULE_2__.getNumberOfValues(dataView);
  if (_dataViewConverter__WEBPACK_IMPORTED_MODULE_4__.DataViewConverter.IsLegendFilled(dataView) && ((_a = dataView.categorical) === null || _a === void 0 ? void 0 : _a.values) && ((_c = (_b = dataView.categorical) === null || _b === void 0 ? void 0 : _b.values) === null || _c === void 0 ? void 0 : _c.source)) {
    legendData = buildLegendData((_d = dataView.categorical) === null || _d === void 0 ? void 0 : _d.values, host, legend, (_f = (_e = dataView.categorical) === null || _e === void 0 ? void 0 : _e.values) === null || _f === void 0 ? void 0 : _f.source, ((_g = dataView.categorical) === null || _g === void 0 ? void 0 : _g.categories) || [], _metadataUtils__WEBPACK_IMPORTED_MODULE_3__.getMetadata((_h = dataView.categorical) === null || _h === void 0 ? void 0 : _h.categories, (_k = (_j = dataView.categorical) === null || _j === void 0 ? void 0 : _j.values) === null || _k === void 0 ? void 0 : _k.grouped(), dataView.metadata.columns[0]).idx.category, !!dataView.categorical.values.source);
  } else if (numberOfValueFields > 1) {
    legendData = buildLegendDataForMultipleValues(host, dataView, numberOfValueFields);
  }
  return legendData;
}
function getLegendColors(legendDataPoints) {
  var legendColors = [];
  legendDataPoints.forEach(function (legendDataPoint) {
    return legendColors.push(legendDataPoint.color);
  });
  return legendColors;
}
function buildLegendDataForMultipleValues(host, dataView, numberOfValueFields) {
  var _a;
  var colorHelper = new powerbi_visuals_utils_colorutils__WEBPACK_IMPORTED_MODULE_0__.ColorHelper(host.colorPalette, {
    objectName: "dataPoint",
    propertyName: "fill"
  });
  var legendItems = [];
  var values = (_a = dataView.categorical) === null || _a === void 0 ? void 0 : _a.values;
  for (var i = 0; i < numberOfValueFields; i++) {
    var objects = values === null || values === void 0 ? void 0 : values[i].source.objects;
    var color = colorHelper.getColorForMeasure(objects, i + "value");
    var builder = host.createSelectionIdBuilder();
    var queryName = values === null || values === void 0 ? void 0 : values[i].source.queryName;
    if (queryName) {
      builder.withMeasure(queryName);
    }
    var selectionId = builder.createSelectionId();
    legendItems.push({
      color: color || '',
      markerShape: LegendIcon.circle,
      label: (values === null || values === void 0 ? void 0 : values[i].source.displayName) || '',
      identity: selectionId,
      selected: DefaultSelectionStateOfTheDataPoint
    });
  }
  colorHelper = null;
  return {
    title: 'Values:',
    dataPoints: legendItems
  };
}
function renderLegend(visualLegend, svg, viewport, legendProperties) {
  var legendDataForRender = {
    title: "",
    dataPoints: []
  };
  var legendObject = legendProperties.legendObject;
  var legendData = legendProperties.data;
  legendDataForRender.labelColor = legendObject.legendNameColor;
  legendDataForRender.title = legendObject.titleText;
  var legend = visualLegend;
  var fontFamily = legendObject.fontFamily.toString() || DefaultFontFamily;
  if (legendData) {
    legendDataForRender.dataPoints = legendData.dataPoints ? legendData.dataPoints : [];
    legendDataForRender.fontSize = legendObject.fontSize ? legendObject.fontSize : LegendLabelFontSizeDefault;
    // Important: This code is redefining props of chart legend util
    legend.__proto__.constructor.DefaultTitleFontFamily = legend.__proto__.constructor.DefaultFontFamily = fontFamily;
    legendDataForRender.grouped = !!legendData.grouped;
  }
  if (legendProperties) {
    (0,powerbi_visuals_utils_chartutils_lib_legend_legendData__WEBPACK_IMPORTED_MODULE_6__.update)(legendDataForRender, legendObject);
    var position = legendProperties.legendObject[legendProps.position];
    if (position) {
      legend.changeOrientation(LegendPosition[position]);
    }
  } else {
    legend.changeOrientation(LegendPosition.Top);
  }
  // Important: This code is overriding styles of chart legend util
  var legendGroup = d3_selection__WEBPACK_IMPORTED_MODULE_7__["default"]('#legendGroup').node();
  legendGroup.style.fontFamily = fontFamily;
  legend.drawLegend(legendDataForRender, {
    height: viewport.height,
    width: viewport.width
  });
  (0,powerbi_visuals_utils_chartutils_lib_legend_legend__WEBPACK_IMPORTED_MODULE_8__.positionChartArea)(svg, legend);
}
function getLegendProperties(legendSettings) {
  return {
    show: legendSettings.show,
    position: legendSettings.position,
    showTitle: legendSettings.showTitle,
    titleText: legendSettings.legendName,
    legendNameColor: legendSettings.legendNameColor,
    fontSize: legendSettings.fontSize,
    fontFamily: legendSettings.fontFamily
  };
}
function setLegendProperties(dataView, host, settings) {
  var legendObject = getLegendProperties(settings);
  var legendData = getSuitableLegendData(dataView, host, settings);
  var legendIsRendered = legendData === undefined ? false : legendData.dataPoints.length > 0;
  var legendColors = legendIsRendered && legendData ? getLegendColors(legendData.dataPoints) : [];
  return {
    legendObject: legendObject,
    data: legendData,
    colors: legendColors
  };
}

/***/ }),

/***/ "./src/visual.ts":
/*!***********************!*\
  !*** ./src/visual.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Visual": () => (/* binding */ Visual)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_interactivityutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-interactivityutils */ "./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivitySelectionService.js");
/* harmony import */ var _render_renderVisual__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./render/renderVisual */ "./src/render/renderVisual.ts");
/* harmony import */ var _render_renderAxes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./render/renderAxes */ "./src/render/renderAxes.ts");
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axis.js");
/* harmony import */ var _utils_formattingUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/formattingUtils */ "./src/utils/formattingUtils.ts");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ "./src/utils.ts");
/* harmony import */ var _scrollbarUtil__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scrollbarUtil */ "./src/scrollbarUtil.ts");
/* harmony import */ var _metadataUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./metadataUtils */ "./src/metadataUtils.ts");
/* harmony import */ var _utils_legendUtils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/legendUtils */ "./src/utils/legendUtils.ts");
/* harmony import */ var _selectionSaveUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./selectionSaveUtils */ "./src/selectionSaveUtils.ts");
/* harmony import */ var _behavior__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./behavior */ "./src/behavior.ts");
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/cssConstants.js");
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/manipulation.js");
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/* harmony import */ var _style_visual_less__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../style/visual.less */ "./style/visual.less");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./settings */ "./src/settings.ts");
/* harmony import */ var _customLegendBehavior__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./customLegendBehavior */ "./src/customLegendBehavior.ts");
/* harmony import */ var powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! powerbi-visuals-utils-chartutils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legend.js");
/* harmony import */ var _dataViewConverter__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./dataViewConverter */ "./src/dataViewConverter.ts");
/* harmony import */ var _enumerateObject__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./enumerateObject */ "./src/enumerateObject.ts");
/* harmony import */ var powerbi_visuals_utils_tooltiputils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! powerbi-visuals-utils-tooltiputils */ "./node_modules/powerbi-visuals-utils-tooltiputils/lib/index.js");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js");
/* harmony import */ var _lassoSelectionUtil__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./lassoSelectionUtil */ "./src/lassoSelectionUtil.ts");
/* harmony import */ var _lassoSelectionUtilForSmallMultiple__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./lassoSelectionUtilForSmallMultiple */ "./src/lassoSelectionUtilForSmallMultiple.ts");
/* harmony import */ var _utils_axis_yAxisUtils__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./utils/axis/yAxisUtils */ "./src/utils/axis/yAxisUtils.ts");
/* eslint-disable max-lines-per-function */


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var createInteractivityService = powerbi_visuals_utils_interactivityutils__WEBPACK_IMPORTED_MODULE_0__.createInteractivitySelectionService;


















var createLegend = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_13__.createLegend;







var Selectors = /*#__PURE__*/_createClass(function Selectors() {
  _classCallCheck(this, Selectors);
});
Selectors.MainSvg = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_20__.createClassAndSelector('bar-chart-svg');
Selectors.VisualSvg = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_20__.createClassAndSelector('bar-chart-visual');
Selectors.BarSelect = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_20__.createClassAndSelector('bar');
Selectors.BarGroupSelect = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_20__.createClassAndSelector('bar-group');
Selectors.AxisGraphicsContext = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_20__.createClassAndSelector('axisGraphicsContext');
Selectors.AxisLabelSelector = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_20__.createClassAndSelector('axisLabel');
Selectors.LabelGraphicsContext = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_20__.createClassAndSelector('labelGraphicsContext');
Selectors.LabelBackgroundContext = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_20__.createClassAndSelector('labelBackgroundContext');
var Visual = /*#__PURE__*/function () {
  function Visual(options) {
    _classCallCheck(this, Visual);
    this.barClassName = Selectors.BarSelect.className;
    this.scrollBar = new _scrollbarUtil__WEBPACK_IMPORTED_MODULE_5__.ScrollBar(this);
    this.dataPointThickness = 0; // height for bars, width for columns
    this.isSelectionRestored = false;
    this.lassoSelection = new _lassoSelectionUtil__WEBPACK_IMPORTED_MODULE_17__.LassoSelection(this);
    this.LassoSelectionForSmallMultiple = new _lassoSelectionUtilForSmallMultiple__WEBPACK_IMPORTED_MODULE_18__.LassoSelectionForSmallMultiple(Selectors.BarSelect, this);
    this.skipScrollbarUpdate = false;
    this.axesSize = {
      xAxisHeight: 10,
      yAxisWidth: 15
    };
    // Create d3 selection from main HTML element
    this.mainElement = d3_selection__WEBPACK_IMPORTED_MODULE_21__["default"](options.element);
    this.mainHtmlElement = options.element;
    this.host = options.host;
    this.tooltipServiceWrapper = (0,powerbi_visuals_utils_tooltiputils__WEBPACK_IMPORTED_MODULE_16__.createTooltipServiceWrapper)(options.host.tooltipService, options.element);
    this.interactivityService = createInteractivityService(this.host);
    var customLegendBehavior = new _customLegendBehavior__WEBPACK_IMPORTED_MODULE_12__.CustomLegendBehavior(this.saveSelection.bind(this));
    this.legend = createLegend(this.mainHtmlElement, false, this.interactivityService, true, null, customLegendBehavior);
    this.legendElementRoot = this.mainElement.selectAll('svg.legend');
    this.legendElement = this.mainElement.selectAll('svg.legend').selectAll('g');
  }
  _createClass(Visual, [{
    key: "saveSelection",
    value: function saveSelection() {
      var selected = this.mainElement.selectAll(".legendItem, ".concat(Selectors.BarSelect.selectorName)).filter(function (d) {
        return d.selected;
      });
      var data = selected.data();
      _selectionSaveUtils__WEBPACK_IMPORTED_MODULE_8__.saveSelection(data, this.host);
    }
  }, {
    key: "clearAll",
    value: function clearAll() {
      if (this.isSmallMultiple()) {
        this.mainElement.selectAll('.selection-rect').remove();
        this.mainDivElement.selectAll('*').remove();
      } else {
        this.barGroup && this.barGroup.selectAll(Selectors.BarGroupSelect.selectorName).remove();
        this.xAxisSvgGroup && this.xAxisSvgGroup.selectAll('*').remove();
        this.yAxisSvgGroup && this.yAxisSvgGroup.selectAll('*').remove();
        this.legendElement && this.legendElement.selectAll('*').remove();
        this.labelGraphicsContext && this.labelGraphicsContext.selectAll('*').remove();
        this.labelBackgroundContext && this.labelBackgroundContext.selectAll('*').remove();
      }
    }
  }, {
    key: "optionsAreValid",
    value: function optionsAreValid(options) {
      var dataView = options && options.dataViews && options.dataViews[0];
      if (!dataView || options.type === 32 /* VisualUpdateType.ResizeEnd */) {
        return;
      }
      if (!_dataViewConverter__WEBPACK_IMPORTED_MODULE_14__.DataViewConverter.IsCategoryFilled(dataView, "Axis" /* Field.Axis */) || !_dataViewConverter__WEBPACK_IMPORTED_MODULE_14__.DataViewConverter.IsCategoryFilled(dataView, "Axis" /* Field.Axis */)) {
        this.clearAll();
        return;
      }
      return true;
    }
  }, {
    key: "isSmallMultiple",
    value: function isSmallMultiple() {
      return !!this.metadata && (this.metadata.idx.columnBy > -1 || this.metadata.idx.rowBy > -1);
    }
  }, {
    key: "normalChartProcess",
    value: function normalChartProcess(options) {
      this.maxXLabelsWidth = null;
      this.dataPointsByCategories = this.buildDataPointsByCategoriesArray();
      this.hasHighlight = this.allDataPoints.filter(function (x) {
        return x.highlight;
      }).length > 0;
      this.categoriesCount = this.dataPointsByCategories.length;
      this.createNormalChartElements();
      this.lassoSelection.init(this.mainElement);
      if (this.isLegendNeeded) {
        _utils_legendUtils__WEBPACK_IMPORTED_MODULE_7__.renderLegend(this.legend, this.mainSvgElement, options.viewport, this.legendProperties);
      } else {
        this.legendElement && this.legendElement.selectAll('*').remove();
        this.mainSvgElement && this.mainSvgElement.style('margin-top', 0).style('margin-bottom', 0).style('margin-left', 0).style('margin-right', 0);
      }
      this.calculateOffsets();
      // calculate and set visual size and position
      this.calculateVisualSizeAndPosition();
      this.scrollBar.updateData(this.getScrollbarState(), options.type);
      var visibleDataPoints = this.scrollBar.getVisibleDataPoints();
      var axes = this.createAxes(visibleDataPoints);
      this.data = {
        dataPoints: visibleDataPoints,
        size: this.visualSize,
        axes: axes,
        categoriesCount: this.categoriesCount,
        legendData: this.legendProperties.data,
        hasHighlight: this.hasHighlight,
        isLegendNeeded: this.isLegendNeeded,
        isSmallMultiple: this.isSmallMultiple()
      };
      // render for calculate width of labels text
      this.renderAxes();
      // Rerender for dynamic y-axis titles
      this.legendSize = this.isLegendNeeded ? this.calculateLegendSize(this.settings.legend, this.legendElementRoot) : null;
      this.calculateOffsets();
      this.calculateVisualSizeAndPosition(this.legendSize);
      this.calculateDataPointThickness();
      axes = this.createAxes(visibleDataPoints);
      this.data.size = this.visualSize;
      this.data.axes = axes;
      this.interactivityService.applySelectionStateToData(this.data.dataPoints);
      // calculate again after yScale changing
      this.calculateDataPointThickness();
      // calculate again after BarHeight changing
      axes = this.createAxes(visibleDataPoints);
      this.data.axes = axes;
      this.renderAxes();
      _render_renderAxes__WEBPACK_IMPORTED_MODULE_2__.RenderAxes.rotateXAxisTickLabels(this.isNeedToRotate, this.xAxisSvgGroup);
      this.finalRendering();
      this.scrollBar.update();
      var bars = this.barGroup.selectAll(Selectors.BarSelect.selectorName).data(visibleDataPoints);
      this.LassoSelectionForSmallMultiple.disable();
      this.lassoSelection.update(bars);
      if (this.settings.constantLine.show && this.settings.constantLine.value) {
        var xWidth = this.yAxisSvgGroup.selectAll('line').node().getBoundingClientRect().width;
        _render_renderVisual__WEBPACK_IMPORTED_MODULE_1__.RenderVisual.renderConstantLine(this.settings.constantLine, this.barGroup, axes, xWidth);
      }
    }
  }, {
    key: "createNormalChartElements",
    value: function createNormalChartElements() {
      this.prepareMainSvgElementForNormalChart();
      this.chartsContainer = this.mainSvgElement.append('g').attr('id', 'chartsContainer');
      // Append SVG groups for X and Y axes.
      this.xAxisSvgGroup = this.chartsContainer.append('g').attr('id', 'xAxisSvgGroup');
      this.yAxisSvgGroup = this.chartsContainer.append('g').attr('id', 'yAxisSvgGroup');
      // Append an svg group that will contain our visual
      this.barGroup = this.chartsContainer.append('g').attr('id', 'barGroup');
      this.axisGraphicsContext = this.chartsContainer.append('g').attr('class', Selectors.AxisGraphicsContext.className);
      this.labelBackgroundContext = this.chartsContainer.append('g').classed(Selectors.LabelBackgroundContext.className, true);
      this.labelGraphicsContext = this.chartsContainer.append('g').classed(Selectors.LabelGraphicsContext.className, true);
      this.mainElement.select('.scrollbar-track').remove();
      this.scrollBar.init(this.mainElement);
    }
  }, {
    key: "prepareMainSvgElementForNormalChart",
    value: function prepareMainSvgElementForNormalChart() {
      if (this.mainDivElement) {
        this.mainDivElement.remove();
        this.mainDivElement = null;
      }
      // This SVG will contain our visual
      if (this.mainSvgElement) {
        this.mainSvgElement.selectAll('*').remove();
      } else {
        this.mainSvgElement = this.mainElement.append('svg').classed(Selectors.MainSvg.className, true).attr('width', '100%').attr('height', '100%');
      }
    }
  }, {
    key: "update",
    value: function update(options) {
      var _this = this;
      if (!this.optionsAreValid(options)) {
        return;
      }
      var dataView = options && options.dataViews && options.dataViews[0];
      this.dataView = dataView;
      this.viewport = options.viewport;
      this.isLegendNeeded = _dataViewConverter__WEBPACK_IMPORTED_MODULE_14__.DataViewConverter.IsLegendNeeded(dataView);
      this.updateMetaData();
      this.settings = Visual.parseSettings(dataView);
      this.updateSettings(this.settings, dataView);
      this.legendProperties = _utils_legendUtils__WEBPACK_IMPORTED_MODULE_7__.setLegendProperties(dataView, this.host, this.settings.legend);
      this.allDataPoints = _dataViewConverter__WEBPACK_IMPORTED_MODULE_14__.DataViewConverter.Convert(dataView, this.host, this.settings, this.legendProperties.colors);
      if (this.isSmallMultiple()) {
        this.smallMultipleProcess(options.viewport);
      } else {
        this.normalChartProcess(options);
      }
      var clearCatcher = d3_selection__WEBPACK_IMPORTED_MODULE_21__["default"](this.mainHtmlElement);
      clearCatcher.on('contextmenu', function (e) {
        _this.webBehaviorSelectionHandler.handleContextMenu(null, {
          x: e.clientX,
          y: e.clientY
        });
        e.preventDefault();
        e.stopPropagation();
      });
      if (!this.isSelectionRestored) {
        this.restoreSelection();
        this.isSelectionRestored = true;
      }
    }
  }, {
    key: "restoreSelection",
    value: function restoreSelection() {
      var savedSelection = this.settings.selectionSaveSettings.selection;
      var selected = this.mainElement.selectAll(".legendItem, ".concat(Selectors.BarSelect.selectorName)).data().filter(function (d) {
        return savedSelection.some(function (savedD) {
          return savedD.identity.key === d.identity.key;
        });
      });
      if (selected.length > 0) {
        this.webBehaviorSelectionHandler.handleSelection(selected, false);
      }
    }
  }, {
    key: "calculateLabelsSize",
    value: function calculateLabelsSize(settings) {
      return settings.showChartTitle ? 120 : 0;
    }
  }, {
    key: "calculateTopSpace",
    value: function calculateTopSpace(settings) {
      if (!settings.showChartTitle) {
        return 0;
      }
      var textProperties = {
        fontFamily: settings.fontFamily,
        fontSize: powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_22__.toString(settings.fontSize)
      };
      var height = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_23__.textMeasurementService.measureSvgTextHeight(textProperties),
        additionalSpace = settings.layoutMode === _settings__WEBPACK_IMPORTED_MODULE_11__.LayoutMode.Flow ? 15 : 0;
      return height + additionalSpace;
    }
  }, {
    key: "calculateYAxisSize",
    value: function calculateYAxisSize() {
      return 35;
    }
  }, {
    key: "calculateXAxisSize",
    value: function calculateXAxisSize(settings) {
      var fontSize = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_22__.toString(settings.categoryAxis.fontSize);
      var fontFamily = settings.categoryAxis.fontFamily;
      var textProperties = {
        fontFamily: fontFamily,
        fontSize: fontSize
      };
      var height = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_23__.textMeasurementService.measureSvgTextHeight(textProperties);
      return height + 8;
    }
  }, {
    key: "calculateXAxisSizeForCategorical",
    value: function calculateXAxisSizeForCategorical(values, settings, metadata, barHeight) {
      var formatter;
      if (values.some(function (x) {
        return x && typeof x.getMonth === 'function';
      })) {
        if (metadata.cols.category) {
          formatter = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_23__.valueFormatter.create({
            format: powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_23__.valueFormatter.getFormatStringByColumn(metadata.cols.category, true) || metadata.cols.category.format,
            cultureSelector: this.host.locale
          });
        } else if (metadata.groupingColumn) {
          formatter = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_23__.valueFormatter.create({
            format: powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_23__.valueFormatter.getFormatStringByColumn(metadata.groupingColumn, true) || metadata.groupingColumn.format,
            cultureSelector: this.host.locale
          });
        }
      } else {
        var yAxisFormatString = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_23__.valueFormatter.getFormatStringByColumn(metadata.cols.category) || powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_23__.valueFormatter.getFormatStringByColumn(metadata.groupingColumn);
        formatter = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_23__.valueFormatter.create({
          format: yAxisFormatString
        });
      }
      var fontSize = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_22__.toString(settings.categoryAxis.fontSize);
      var fontFamily = settings.categoryAxis.fontFamily;
      var maxWidth = 0;
      values.forEach(function (value) {
        var textProperties = {
          text: formatter.format(value),
          fontFamily: fontFamily,
          fontSize: fontSize
        };
        var width = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_23__.textMeasurementService.measureSvgTextWidth(textProperties);
        maxWidth = width > maxWidth ? width : maxWidth;
      });
      if (maxWidth >= barHeight) {
        return maxWidth + 4;
      }
      return -1;
    }
  }, {
    key: "prepareMainDiv",
    value: function prepareMainDiv(el) {
      if (this.mainSvgElement) {
        this.mainSvgElement.remove();
        this.mainSvgElement = null;
      }
      if (this.mainDivElement) {
        this.mainDivElement.selectAll('*').remove();
      } else {
        this.mainDivElement = el.append('div');
      }
    }
  }, {
    key: "calculateChartSize",
    value: function calculateChartSize(viewport, settings, leftSpace, topSpace, rows, columns, legendSize) {
      var scrollHeight = 22,
        scrollWidth = 20,
        gapBetweenCharts = 10;
      var minHeight = settings.minUnitHeight,
        minWidth = settings.minUnitWidth;
      var chartHeight = 0;
      var chartWidth = 0;
      if (settings.layoutMode === _settings__WEBPACK_IMPORTED_MODULE_11__.LayoutMode.Matrix) {
        var clientHeight = viewport.height - topSpace - scrollHeight - legendSize.height;
        var clientWidth = viewport.width - leftSpace - scrollWidth - legendSize.width;
        chartHeight = (clientHeight - gapBetweenCharts * rows) / rows;
        chartWidth = (clientWidth - gapBetweenCharts * columns) / columns;
      } else {
        var _clientHeight = viewport.height - scrollHeight - legendSize.height;
        var _clientWidth = viewport.width - leftSpace - scrollWidth - legendSize.width;
        chartHeight = (_clientHeight - gapBetweenCharts * rows - topSpace * rows) / rows;
        chartWidth = (_clientWidth - gapBetweenCharts * columns) / columns;
      }
      var isVerticalScrollBarNeeded = chartHeight < minHeight - scrollWidth / rows,
        isHorizontalScrollBarNeeded = chartWidth < minWidth - scrollHeight / columns;
      if (!isVerticalScrollBarNeeded) {
        chartWidth += scrollHeight / columns;
      }
      if (!isHorizontalScrollBarNeeded) {
        chartHeight += scrollWidth / rows;
      }
      return {
        height: isVerticalScrollBarNeeded ? minHeight : chartHeight,
        width: isHorizontalScrollBarNeeded ? minWidth : chartWidth,
        isHorizontalSliderNeeded: isHorizontalScrollBarNeeded,
        isVerticalSliderNeeded: isVerticalScrollBarNeeded
      };
    }
  }, {
    key: "createSmallMultipleAxesByDomains",
    value: function createSmallMultipleAxesByDomains(categoryDomain, valueDomain, visualSize, maxYAxisLabelWidth) {
      var categoriesCount = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      var axesDomains = {
        yAxisDomain: valueDomain,
        xAxisDomain: categoryDomain
      };
      var barHeight = categoriesCount ? visualSize.width / (categoriesCount > 2 ? categoriesCount + 1 : categoriesCount) : 0;
      var axes = _render_renderAxes__WEBPACK_IMPORTED_MODULE_2__.RenderAxes.createD3Axes(axesDomains, visualSize, this.metadata, this.settings, this.host, true, barHeight);
      return axes;
    }
  }, {
    key: "renderSmallMultipleAxes",
    value: function renderSmallMultipleAxes(dataPoints, axes, xAxisSvgGroup, yAxisSvgGroup, barHeight) {
      _utils__WEBPACK_IMPORTED_MODULE_4__.calculateBarCoordianates(dataPoints, axes, this.settings, barHeight, true);
      _render_renderAxes__WEBPACK_IMPORTED_MODULE_2__.RenderAxes.render(this.settings, xAxisSvgGroup, yAxisSvgGroup, axes);
    }
  }, {
    key: "smallMultipleProcess",
    value: function smallMultipleProcess(viewport) {
      var _this2 = this;
      var uniqueColumns = this.allDataPoints.map(function (x) {
        return x.columnBy;
      }).filter(function (v, i, a) {
        return a.indexOf(v) === i;
      });
      var uniqueRows = this.allDataPoints.map(function (x) {
        return x.rowBy;
      }).filter(function (v, i, a) {
        return a.indexOf(v) === i;
      });
      var uniqueCategories = this.allDataPoints.map(function (x) {
        return x.category;
      }).filter(function (v, i, a) {
        return a.indexOf(v) === i;
      });
      var leftSpace = uniqueRows && uniqueRows.length === 1 && uniqueRows[0] === null ? 0 : this.calculateLabelsSize(this.settings.smallMultiple);
      var topSpace = this.calculateTopSpace(this.settings.smallMultiple);
      var hasHighlight = this.allDataPoints.filter(function (x) {
        return x.highlight;
      }).length > 0;
      var marginLeft = 10;
      var gapBetweenCharts = 10;
      this.prepareMainDiv(this.mainElement);
      this.mainElement.select('.scrollbar-track').remove();
      var legendSize = {
        width: 0,
        height: 0
      };
      if (this.isLegendNeeded) {
        _utils_legendUtils__WEBPACK_IMPORTED_MODULE_7__.renderLegend(this.legend, this.mainDivElement, this.viewport, this.legendProperties);
        legendSize = this.calculateLegendSize(this.settings.legend, this.legendElementRoot);
      } else {
        this.legendElement && this.legendElement.selectAll('*').remove();
        this.mainDivElement && this.mainDivElement.style('margin-top', 0).style('margin-bottom', 0).style('margin-left', 0).style('margin-right', 0);
        legendSize = {
          height: 0,
          width: 0
        };
      }
      var layoutMode = this.settings.smallMultiple.layoutMode;
      var maxRowWidth = this.settings.smallMultiple.maxRowWidth;
      var rowsInFlow = uniqueColumns.length <= maxRowWidth ? 1 : Math.floor(uniqueColumns.length / maxRowWidth) + (uniqueColumns.length % maxRowWidth > 0 ? 1 : 0);
      var columns = layoutMode === _settings__WEBPACK_IMPORTED_MODULE_11__.LayoutMode.Matrix ? uniqueColumns.length : Math.min(uniqueColumns.length, maxRowWidth);
      var rows = layoutMode === _settings__WEBPACK_IMPORTED_MODULE_11__.LayoutMode.Matrix ? uniqueRows.length : rowsInFlow * uniqueRows.length;
      var chartSize = this.calculateChartSize(viewport, this.settings.smallMultiple, leftSpace, topSpace, rows, columns, legendSize);
      var yAxisSize = this.calculateYAxisSize();
      var barsSectionSize = {
        height: chartSize.height - gapBetweenCharts,
        width: chartSize.width - yAxisSize - gapBetweenCharts * 2
      };
      var xIsScalar = _utils__WEBPACK_IMPORTED_MODULE_4__.isScalar(this.metadata.cols.category);
      var barHeight = !xIsScalar || this.settings.categoryAxis.axisType === 'categorical' ? _utils__WEBPACK_IMPORTED_MODULE_4__.calculateDataPointThickness(null, barsSectionSize, uniqueCategories.length, this.settings.categoryAxis.innerPadding, this.settings, !xIsScalar) : 0;
      var xAxisSizeReverted = this.settings.categoryAxis.axisType === 'categorical' || !xIsScalar ? this.calculateXAxisSizeForCategorical(uniqueCategories, this.settings, this.metadata, barHeight) : -1;
      var xAxisSize = xAxisSizeReverted > 0 ? xAxisSizeReverted : this.calculateXAxisSize(this.settings);
      barsSectionSize.height -= xAxisSize;
      this.mainDivElement.style('width', viewport.width - legendSize.width + 'px').style('height', viewport.height - legendSize.height + 'px').style('overflow-x', chartSize.isHorizontalSliderNeeded ? 'auto' : 'hidden').style('overflow-y', chartSize.isVerticalSliderNeeded ? 'auto' : 'hidden');
      var maxLabelHeight = chartSize.height / 100 * this.settings.categoryAxis.maximumSize;
      var forceRotaion = xAxisSizeReverted > 0;
      if (this.settings.categoryAxis.maximumSize) {
        if (xAxisSize > maxLabelHeight) {
          barsSectionSize.height += xAxisSize;
          xAxisSize = maxLabelHeight;
          barsSectionSize.height -= xAxisSize;
          forceRotaion = true;
        } else {
          maxLabelHeight = Number.MAX_VALUE;
        }
      }
      var axes;
      var xIsSeparate = this.settings.categoryAxis.rangeType === _settings__WEBPACK_IMPORTED_MODULE_11__.AxisRangeType.Separate;
      var yIsSeparate = this.settings.valueAxis.rangeType === _settings__WEBPACK_IMPORTED_MODULE_11__.AxisRangeType.Separate;
      var yIsCustom = this.settings.valueAxis.rangeType === _settings__WEBPACK_IMPORTED_MODULE_11__.AxisRangeType.Custom;
      var xIsCustom = this.settings.categoryAxis.rangeType === _settings__WEBPACK_IMPORTED_MODULE_11__.AxisRangeType.Custom;
      var defaultYDomain = _render_renderAxes__WEBPACK_IMPORTED_MODULE_2__.RenderAxes.calculateValueDomain(this.allDataPoints, this.settings, true);
      var defaultXDomain = _render_renderAxes__WEBPACK_IMPORTED_MODULE_2__.RenderAxes.calculateCategoryDomain(this.allDataPoints, this.settings, this.metadata, true);
      var defaultAxes = this.createSmallMultipleAxesByDomains(defaultXDomain, defaultYDomain, barsSectionSize, maxLabelHeight, uniqueCategories.length);
      var xDomain = [],
        yDomain = [];
      if (!yIsSeparate && !xIsSeparate) {
        axes = defaultAxes;
      } else {
        if (!yIsSeparate) {
          yDomain = defaultYDomain;
        }
        if (!xIsSeparate) {
          xDomain = defaultXDomain;
        }
      }
      this.data = {
        axes: axes,
        dataPoints: this.allDataPoints,
        hasHighlight: hasHighlight,
        isLegendNeeded: this.isLegendNeeded,
        legendData: this.legendProperties.data,
        categoriesCount: null,
        isSmallMultiple: this.isSmallMultiple()
      };
      var svgHeight = 0,
        svgWidth = 0;
      if (layoutMode === _settings__WEBPACK_IMPORTED_MODULE_11__.LayoutMode.Matrix) {
        svgHeight = topSpace + rows * chartSize.height + gapBetweenCharts * rows, svgWidth = leftSpace + columns * chartSize.width + gapBetweenCharts * columns;
      } else {
        svgHeight = topSpace * rows + rows * chartSize.height + gapBetweenCharts * (rows - 1), svgWidth = leftSpace + columns * chartSize.width + gapBetweenCharts * columns;
      }
      var svgChart = this.mainDivElement.append('svg').classed('chart', true).style('width', svgWidth + 'px').style('height', svgHeight + 'px');
      var _loop = function _loop(i) {
        var _loop2 = function _loop2(j) {
          var leftMove = 0;
          var topMove = 0;
          if (layoutMode === _settings__WEBPACK_IMPORTED_MODULE_11__.LayoutMode.Matrix) {
            leftMove = gapBetweenCharts / 2 + j * chartSize.width + gapBetweenCharts * j;
            topMove = topSpace + i * chartSize.height + gapBetweenCharts * i;
          } else {
            var xPosition = Math.floor(j % maxRowWidth);
            var yPosition = Math.floor(j / maxRowWidth) + i * rowsInFlow;
            leftMove = xPosition * chartSize.width + gapBetweenCharts * xPosition;
            topMove = yPosition * chartSize.height + gapBetweenCharts * yPosition + topSpace * yPosition + gapBetweenCharts / 2;
          }
          var dataPoints = _this2.allDataPoints.filter(function (x) {
            return x.rowBy === uniqueRows[i];
          }).filter(function (x) {
            return x.columnBy === uniqueColumns[j];
          });
          var chart = svgChart.append('g').attr('transform', powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_24__.translate(leftSpace + leftMove, topMove + topSpace));
          var xAxisSvgGroup = chart.append('g');
          var yAxisSvgGroup = chart.append('g');
          var yHasRightPosition = _this2.settings.valueAxis.show && _this2.settings.valueAxis.position === 'right';
          xAxisSvgGroup.attr('transform', powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_24__.translate(marginLeft + (yHasRightPosition ? 0 : yAxisSize), barsSectionSize.height));
          yAxisSvgGroup.attr('transform', powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_24__.translate(marginLeft + (yHasRightPosition ? barsSectionSize.width : yAxisSize), 0));
          if (yIsSeparate || xIsSeparate) {
            if (!dataPoints || !dataPoints.length) {
              axes = defaultAxes;
            }
            if (yIsSeparate) {
              yDomain = dataPoints && dataPoints.length ? _render_renderAxes__WEBPACK_IMPORTED_MODULE_2__.RenderAxes.calculateValueDomain(dataPoints, _this2.settings, true) : defaultYDomain;
            }
            if (xIsSeparate) {
              xDomain = dataPoints && dataPoints.length ? _render_renderAxes__WEBPACK_IMPORTED_MODULE_2__.RenderAxes.calculateCategoryDomain(dataPoints, _this2.settings, _this2.metadata, true) : defaultXDomain;
            }
            if (!yIsSeparate && !xIsSeparate) {
              axes = defaultAxes;
            } else {
              var uniqueCategoriesCount = dataPoints.map(function (x) {
                return x.category;
              }).filter(function (v, i, a) {
                return a.indexOf(v) === i;
              }).length;
              axes = !yIsSeparate && !xIsSeparate ? defaultAxes : _this2.createSmallMultipleAxesByDomains(xDomain, yDomain, barsSectionSize, maxLabelHeight, uniqueCategoriesCount);
            }
          }
          if (!_this2.data.axes) {
            _this2.data.axes = defaultAxes;
          }
          var barHeight = !xIsScalar || _this2.settings.categoryAxis.axisType === 'categorical' ? axes.x.scale.bandwidth() : _utils__WEBPACK_IMPORTED_MODULE_4__.calculateDataPointThickness(dataPoints, barsSectionSize, uniqueCategories.length, _this2.settings.categoryAxis.innerPadding, _this2.settings, !xIsScalar);
          _this2.renderSmallMultipleAxes(dataPoints, axes, xAxisSvgGroup, yAxisSvgGroup, barHeight);
          if (xIsCustom) {
            var divider = 1;
            var xText = xAxisSvgGroup.selectAll('text')[0];
            var axisWidth = xText.parentNode.getBBox().width;
            var maxTextWidth = _utils__WEBPACK_IMPORTED_MODULE_4__.getLabelsMaxWidth(xText);
            for (var _i = 0; _i < xText.length; ++_i) {
              var actualAllAxisTextWidth = maxTextWidth * xText.length / divider;
              if (actualAllAxisTextWidth > axisWidth) {
                divider += 1;
              } else {
                break;
              }
            }
            for (var _i2 = 0; _i2 < xText.length; ++_i2) {
              if (_i2 % divider > 0) {
                d3_selection__WEBPACK_IMPORTED_MODULE_21__["default"](xText[_i2]).remove();
              }
            }
          }
          if (yIsCustom) {
            var _divider = 1;
            var yText = yAxisSvgGroup.selectAll('text')[0];
            var _axisWidth = yText.parentNode.getBBox().height;
            var _maxTextWidth = _utils__WEBPACK_IMPORTED_MODULE_4__.getLabelsMaxHeight(yText);
            for (var _i3 = 0; _i3 < yText.length; ++_i3) {
              var _actualAllAxisTextWidth = _maxTextWidth * yText.length / _divider;
              if (_actualAllAxisTextWidth > _axisWidth) {
                _divider += 1;
              } else {
                break;
              }
            }
            for (var _i4 = 0; _i4 < yText.length; ++_i4) {
              if (_i4 % _divider > 0) {
                d3_selection__WEBPACK_IMPORTED_MODULE_21__["default"](yText[_i4]).remove();
              }
            }
          }
          var labelRotationIsNeeded = forceRotaion ? true : _utils__WEBPACK_IMPORTED_MODULE_4__.smallMultipleLabelRotationIsNeeded(xAxisSvgGroup, barHeight, _this2.settings.categoryAxis, maxLabelHeight);
          if (labelRotationIsNeeded) {
            _render_renderAxes__WEBPACK_IMPORTED_MODULE_2__.RenderAxes.rotateXAxisTickLabels(true, xAxisSvgGroup);
          }
          var barGroup = chart.append('g').classed('bar-group', true).attr('transform', powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_24__.translate(marginLeft + (yHasRightPosition ? 0 : yAxisSize), 0));
          // visualUtils.calculateBarCoordianates(dataPoints, axes, this.settings, barHeight);
          var interactivityService = _this2.interactivityService,
            hasSelection = interactivityService.hasSelection();
          interactivityService.applySelectionStateToData(dataPoints);
          var barSelect = barGroup.selectAll(Selectors.BarSelect.selectorName).data(dataPoints);
          var barSelectEnter = barSelect.enter().append('rect').attr('class', Selectors.BarSelect.className);
          barSelect.exit().remove();
          barSelect = barSelect.merge(barSelectEnter);
          barSelect.attr('height', function (d) {
            return d.barCoordinates.height;
          }).attr('width', function (d) {
            return d.barCoordinates.width;
          }).attr('x', function (d) {
            return d.barCoordinates.x;
          }).attr('y', function (d) {
            return d.barCoordinates.y;
          }).attr('fill', function (d) {
            return d.color;
          });
          barSelect.style('fill-opacity', function (p) {
            return _utils__WEBPACK_IMPORTED_MODULE_4__.getFillOpacity(p.selected, p.highlight, !p.highlight && hasSelection, !p.selected && hasHighlight);
          }).style('stroke', function (p) {
            if (hasSelection && _utils__WEBPACK_IMPORTED_MODULE_4__.isSelected(p.selected, p.highlight, !p.highlight && hasSelection, !p.selected && hasHighlight)) {
              return Visual.DefaultStrokeSelectionColor;
            }
            return p.color;
          }).style('stroke-width', function (p) {
            if (hasSelection && _utils__WEBPACK_IMPORTED_MODULE_4__.isSelected(p.selected, p.highlight, !p.highlight && hasSelection, !p.selected && hasHighlight)) {
              return Visual.DefaultStrokeSelectionWidth;
            }
            return Visual.DefaultStrokeWidth;
          });
          _render_renderVisual__WEBPACK_IMPORTED_MODULE_1__.RenderVisual.renderTooltip(barSelect, _this2.tooltipServiceWrapper);
          _utils__WEBPACK_IMPORTED_MODULE_4__.calculateLabelCoordinates(_this2.data, _this2.settings.categoryLabels, _this2.metadata, chartSize.width, _this2.isLegendNeeded, dataPoints);
          var labelBackgroundContext = barGroup.append('g').classed(Selectors.LabelBackgroundContext.className, true);
          _render_renderVisual__WEBPACK_IMPORTED_MODULE_1__.RenderVisual.renderDataLabelsBackgroundForSmallMultiple(_this2.data, _this2.settings, labelBackgroundContext, dataPoints);
          var labelGraphicsContext = barGroup.append('g').classed(Selectors.LabelGraphicsContext.className, true);
          _render_renderVisual__WEBPACK_IMPORTED_MODULE_1__.RenderVisual.renderDataLabelsForSmallMultiple(_this2.data, _this2.settings, labelGraphicsContext, _this2.metadata, dataPoints);
          if (_this2.settings.smallMultiple.showChartTitle && layoutMode === _settings__WEBPACK_IMPORTED_MODULE_11__.LayoutMode.Flow) {
            _render_renderVisual__WEBPACK_IMPORTED_MODULE_1__.RenderVisual.renderSmallMultipleTopTitle({
              chartElement: svgChart,
              chartSize: chartSize,
              columns: uniqueColumns,
              index: j,
              leftSpace: leftMove + leftSpace,
              topSpace: topMove,
              textHeight: topSpace,
              rows: uniqueRows,
              xAxisLabelSize: xAxisSize
            }, _this2.settings.smallMultiple);
          }
          if (_this2.settings.valueAxis.show) {
            var xWidth = yAxisSvgGroup.selectAll('line').node().getBoundingClientRect().width;
            if (axes.y.dataDomain[0] <= _this2.settings.constantLine.value && _this2.settings.constantLine.value <= axes.y.dataDomain[1]) {
              _render_renderVisual__WEBPACK_IMPORTED_MODULE_1__.RenderVisual.renderConstantLine(_this2.settings.constantLine, barGroup, axes, xWidth);
            }
          }
        };
        for (var j = 0; j < uniqueColumns.length; ++j) {
          _loop2(j);
        }
      };
      for (var i = 0; i < uniqueRows.length; ++i) {
        _loop(i);
      }
      if (this.settings.smallMultiple.showSeparators) {
        _render_renderVisual__WEBPACK_IMPORTED_MODULE_1__.RenderVisual.renderSmallMultipleLines({
          chartElement: svgChart,
          chartSize: chartSize,
          columns: uniqueColumns,
          rows: uniqueRows,
          leftSpace: leftSpace,
          topSpace: topSpace,
          xAxisLabelSize: xAxisSize,
          rowsInFlow: rowsInFlow
        }, this.settings.smallMultiple);
      }
      if (this.settings.smallMultiple.showChartTitle) {
        _render_renderVisual__WEBPACK_IMPORTED_MODULE_1__.RenderVisual.renderSmallMultipleTitles({
          chartElement: svgChart,
          chartSize: chartSize,
          columns: uniqueColumns,
          leftSpace: leftSpace,
          topSpace: topSpace,
          rows: uniqueRows,
          xAxisLabelSize: xAxisSize,
          rowsInFlow: rowsInFlow
        }, this.settings.smallMultiple);
      }
      var legendBucketFilled = !!(this.dataView.categorical && this.dataView.categorical.values && this.dataView.categorical.values.source);
      this.lassoSelection.disable();
      this.LassoSelectionForSmallMultiple.init(this.mainElement);
      this.LassoSelectionForSmallMultiple.update(svgChart, svgChart.selectAll(Selectors.BarSelect.selectorName), legendBucketFilled);
      if (this.interactivityService) {
        this.interactivityService.applySelectionStateToData(this.allDataPoints);
        var behaviorOptions = {
          bars: this.mainElement.selectAll(Selectors.BarSelect.selectorName),
          clearCatcher: d3_selection__WEBPACK_IMPORTED_MODULE_21__["default"](this.mainHtmlElement),
          interactivityService: this.interactivityService,
          host: this.host,
          selectionSaveSettings: this.settings.selectionSaveSettings,
          behavior: new _behavior__WEBPACK_IMPORTED_MODULE_9__.WebBehavior(this),
          dataPoints: this.allDataPoints
        };
        this.interactivityService.bind(behaviorOptions);
        var clearCatcher = d3_selection__WEBPACK_IMPORTED_MODULE_21__["default"](this.mainHtmlElement);
        debugger;
        clearCatcher.on("click", function () {
          _this2.webBehaviorSelectionHandler.handleClearSelection();
        }).on('contextmenu', function (e) {
          debugger;
          _this2.webBehaviorSelectionHandler.handleContextMenu(null, {
            x: e.clientX,
            y: e.clientY
          });
          e.preventDefault();
          e.stopPropagation();
        });
      }
    }
  }, {
    key: "getSettings",
    value: function getSettings() {
      return this.settings;
    }
  }, {
    key: "getVisualSize",
    value: function getVisualSize() {
      return this.visualSize;
    }
  }, {
    key: "getDataView",
    value: function getDataView() {
      return this.dataView;
    }
  }, {
    key: "getChartBoundaries",
    value: function getChartBoundaries() {
      return this.clearCatcher.node().getBoundingClientRect();
    }
  }, {
    key: "getVisualTranslation",
    value: function getVisualTranslation() {
      return this.visualTranslation;
    }
  }, {
    key: "getAllDataPoints",
    value: function getAllDataPoints() {
      return this.allDataPoints;
    }
  }, {
    key: "getDataPointsByCategories",
    value: function getDataPointsByCategories() {
      return this.dataPointsByCategories;
    }
  }, {
    key: "buildDataPointsByCategoriesArray",
    value: function buildDataPointsByCategoriesArray() {
      var dataPointsByCategories = [];
      var categoryIndex = 0;
      var categoryName = '';
      var previousCategoryName = '';
      for (var i = 0; i < this.allDataPoints.length; i++) {
        if (this.allDataPoints[i].category == null) {
          continue;
        }
        previousCategoryName = categoryName;
        categoryName = this.allDataPoints[i].category.toString();
        if (i > 0 && categoryName !== previousCategoryName) {
          categoryIndex++;
        }
        if (!dataPointsByCategories[categoryIndex]) {
          var category = {
            categoryName: categoryName,
            dataPoints: []
          };
          dataPointsByCategories[categoryIndex] = category;
        }
        dataPointsByCategories[categoryIndex].dataPoints.push(this.allDataPoints[i]);
      }
      return dataPointsByCategories;
    }
  }, {
    key: "onScrollPosChanged",
    value: function onScrollPosChanged() {
      var visibleDataPoints = this.scrollBar.getVisibleDataPoints();
      var axes = this.createAxes(visibleDataPoints);
      var legendData = _utils_legendUtils__WEBPACK_IMPORTED_MODULE_7__.getSuitableLegendData(this.dataView, this.host, this.settings.legend);
      this.data = {
        dataPoints: visibleDataPoints,
        size: this.visualSize,
        axes: axes,
        categoriesCount: this.categoriesCount,
        legendData: legendData,
        hasHighlight: this.hasHighlight,
        isLegendNeeded: this.isLegendNeeded,
        isSmallMultiple: this.isSmallMultiple()
      };
      // render for calculate width of labels text
      this.renderAxes();
      // Rerender for dynamic y-axis titles
      this.legendSize = this.isLegendNeeded ? this.calculateLegendSize(this.settings.legend, this.legendElementRoot) : null;
      this.calculateOffsets();
      this.calculateVisualSizeAndPosition(this.legendSize);
      this.calculateDataPointThickness();
      axes = this.createAxes(visibleDataPoints);
      this.data.size = this.visualSize;
      this.data.axes = axes;
      this.interactivityService.applySelectionStateToData(this.data.dataPoints);
      /*    // calculate again after yScale changing
          this.calculateBarHeight();
            // calculate again after BarHeight changing
          axes = this.createAxes(visibleDataPoints);
          this.data.axes = axes;*/
      this.renderAxes();
      _render_renderAxes__WEBPACK_IMPORTED_MODULE_2__.RenderAxes.rotateXAxisTickLabels(this.isNeedToRotate, this.xAxisSvgGroup);
      this.finalRendering();
    }
  }, {
    key: "updateMetaData",
    value: function updateMetaData() {
      var grouped = this.dataView.categorical.values.grouped();
      var source = this.dataView.metadata.columns[0];
      var categories = this.dataView.categorical.categories || [];
      this.metadata = _metadataUtils__WEBPACK_IMPORTED_MODULE_6__.getMetadata(categories, grouped, source);
    }
  }, {
    key: "getScrollbarState",
    value: function getScrollbarState() {
      var categoryType = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_25__.getCategoryValueType(this.metadata.cols.category),
        isOrdinal = powerbi_visuals_utils_chartutils__WEBPACK_IMPORTED_MODULE_25__.isOrdinal(categoryType);
      return this.settings.categoryAxis.axisType === 'continuous' && !isOrdinal ? "disable" /* ScrollbarState.Disable */ : "enable" /* ScrollbarState.Enable */;
    }
  }, {
    key: "createAxes",
    value: function createAxes(dataPoints) {
      var isSmallMultiple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var axesDomains = _render_renderAxes__WEBPACK_IMPORTED_MODULE_2__.RenderAxes.calculateAxesDomains(this.allDataPoints, dataPoints, this.settings, this.metadata, isSmallMultiple);
      var axes = _render_renderAxes__WEBPACK_IMPORTED_MODULE_2__.RenderAxes.createD3Axes(axesDomains, this.visualSize, this.metadata, this.settings, this.host, isSmallMultiple, this.dataPointThickness, this.maxXLabelsWidth);
      return axes;
    }
  }, {
    key: "calculateDataPointThickness",
    value: function calculateDataPointThickness() {
      this.dataPointThickness = _utils__WEBPACK_IMPORTED_MODULE_4__.calculateDataPointThickness(this.data.dataPoints, this.visualSize, this.data.categoriesCount, this.settings.categoryAxis.innerPadding, this.settings);
    }
  }, {
    key: "renderAxes",
    value: function renderAxes() {
      _utils__WEBPACK_IMPORTED_MODULE_4__.calculateBarCoordianates(this.data.dataPoints, this.data.axes, this.settings, this.dataPointThickness);
      this.calculateDataPointThickness();
      _render_renderAxes__WEBPACK_IMPORTED_MODULE_2__.RenderAxes.render(this.settings, this.xAxisSvgGroup, this.yAxisSvgGroup, this.data.axes);
    }
  }, {
    key: "finalRendering",
    value: function finalRendering() {
      // render axes labels
      _render_renderAxes__WEBPACK_IMPORTED_MODULE_2__.RenderAxes.renderLabels(this.viewport, this.visualMargin, this.visualSize, [this.data.axes.x.axisLabel, this.data.axes.y.axisLabel], this.settings, this.data.axes, this.axisLabelsGroup, this.axisGraphicsContext);
      _utils__WEBPACK_IMPORTED_MODULE_4__.calculateBarCoordianates(this.data.dataPoints, this.data.axes, this.settings, this.dataPointThickness);
      // render main visual
      var _RenderVisual$render = _render_renderVisual__WEBPACK_IMPORTED_MODULE_1__.RenderVisual.render(this.data, this.barGroup, this.interactivityService, this.tooltipServiceWrapper, this.hasHighlight),
        barSelect = _RenderVisual$render.barSelect;
      if (this.interactivityService) {
        this.interactivityService.applySelectionStateToData(this.data.dataPoints);
        var behaviorOptions = {
          bars: barSelect,
          clearCatcher: this.clearCatcher,
          interactivityService: this.interactivityService,
          host: this.host,
          selectionSaveSettings: this.settings.selectionSaveSettings,
          dataPoints: this.data.dataPoints,
          behavior: new _behavior__WEBPACK_IMPORTED_MODULE_9__.WebBehavior(this)
        };
        this.interactivityService.bind(behaviorOptions);
      }
      var chartHeight = this.barGroup.node().getBoundingClientRect().height;
      _utils__WEBPACK_IMPORTED_MODULE_4__.calculateLabelCoordinates(this.data, this.settings.categoryLabels, this.metadata, chartHeight, this.isLegendNeeded);
      var filteredDataLabels = _render_renderVisual__WEBPACK_IMPORTED_MODULE_1__.RenderVisual.filterData(this.data.dataPoints);
      _render_renderVisual__WEBPACK_IMPORTED_MODULE_1__.RenderVisual.renderDataLabelsBackground(filteredDataLabels, this.settings, this.labelBackgroundContext);
      var dataLabelFormatter = _utils_formattingUtils__WEBPACK_IMPORTED_MODULE_3__.createFormatter(this.settings.categoryLabels.displayUnits, this.settings.categoryLabels.precision, this.metadata.cols.value, (0,_utils_formattingUtils__WEBPACK_IMPORTED_MODULE_3__.getValueForFormatter)(this.data));
      _render_renderVisual__WEBPACK_IMPORTED_MODULE_1__.RenderVisual.renderDataLabels(filteredDataLabels, dataLabelFormatter, this.settings, this.labelGraphicsContext);
      var xWidth = this.yAxisSvgGroup.selectAll('line').node().getBoundingClientRect().width;
      _render_renderVisual__WEBPACK_IMPORTED_MODULE_1__.RenderVisual.renderConstantLine(this.settings.constantLine, this.barGroup, this.data.axes, xWidth);
    }
  }, {
    key: "calculateLegendSize",
    value: function calculateLegendSize(settings, legendElementRoot) {
      // if 'width' or 'height' is '0' it means that we don't need that measure for our calculations
      switch (settings.position) {
        case 'Top':
        case 'TopCenter':
        case 'Bottom':
        case 'BottomCenter':
          return {
            width: 0,
            height: legendElementRoot.node().getBBox().height
          };
        case 'Left':
        case 'LeftCenter':
        case 'Right':
        case 'RightCenter':
          return {
            width: legendElementRoot.node().getBBox().width,
            height: 0
          };
        default:
          return {
            width: 0,
            height: 0
          };
      }
    }
  }, {
    key: "updateSettings",
    value: function updateSettings(settings, dataView) {
      var MAX_INNER_PADDING = 50;
      var MAX_CATEGORY_WIDTH = 180;
      var MIN_CATEGORY_WIDTH = 20;
      var MAX_Y_AXIS_WIDTH = 50;
      var MIN_Y_AXIS_WIDTH = 15;
      // for legend
      if (this.settings.legend.legendName.length === 0) {
        if (dataView.categorical.values.source) {
          settings.legend.legendName = dataView.categorical.values.source.displayName;
        }
      }
      if (this.isLegendNeeded) {
        settings.categoryLabels.labelPosition = settings.categoryLabels.labelPositionForFilledLegend;
        if (settings.categoryLabels.labelPosition === _settings__WEBPACK_IMPORTED_MODULE_11__.LabelPosition.OutsideEnd) {
          settings.categoryLabels.labelPosition = _settings__WEBPACK_IMPORTED_MODULE_11__.LabelPosition.Auto;
          settings.categoryLabels.labelPositionForFilledLegend = _settings__WEBPACK_IMPORTED_MODULE_11__.LabelPosition.Auto;
        }
      }
      if (this.isSmallMultiple() && (!_utils__WEBPACK_IMPORTED_MODULE_4__.categoryIsScalar(this.metadata) || this.settings.categoryAxis.axisType === 'categorical')) {
        settings.categoryAxis.rangeType = settings.categoryAxis.rangeTypeNoScalar;
      }
      // for Y-axis
      var categoryAxis = settings.categoryAxis;
      if (categoryAxis.innerPadding > MAX_INNER_PADDING) {
        categoryAxis.innerPadding = MAX_INNER_PADDING;
      }
      if (categoryAxis.minCategoryWidth < MIN_CATEGORY_WIDTH) {
        categoryAxis.minCategoryWidth = MIN_CATEGORY_WIDTH;
      }
      if (categoryAxis.minCategoryWidth > MAX_CATEGORY_WIDTH) {
        categoryAxis.minCategoryWidth = MAX_CATEGORY_WIDTH;
      }
      if (categoryAxis.maximumSize < MIN_Y_AXIS_WIDTH) {
        categoryAxis.maximumSize = MIN_Y_AXIS_WIDTH;
      }
      if (categoryAxis.maximumSize > MAX_Y_AXIS_WIDTH) {
        categoryAxis.maximumSize = MAX_Y_AXIS_WIDTH;
      }
      if (categoryAxis.showTitle && categoryAxis.axisTitle.length === 0) {
        var categories = dataView.categorical.categories;
        categoryAxis.axisTitle = categories ? categories[0].source.displayName : dataView.categorical.values.source.displayName;
      }
      if (!categoryAxis.showTitle) {
        categoryAxis.axisTitle = '';
      }
      if (typeof settings.selectionSaveSettings.selection === 'string') {
        settings.selectionSaveSettings.selection = JSON.parse(settings.selectionSaveSettings.selection);
      }
    }
  }, {
    key: "calculateOffsets",
    value: function calculateOffsets() {
      var xtickText = this.xAxisSvgGroup.selectAll('text');
      var ytickText = this.yAxisSvgGroup.selectAll('text');
      var showXAxisTitle = this.settings.categoryAxis.show && this.settings.categoryAxis.showTitle;
      var showYAxisTitle = this.settings.valueAxis.show && this.settings.valueAxis.showTitle;
      this.yTickOffset = _utils__WEBPACK_IMPORTED_MODULE_4__.getLabelsMaxWidth(ytickText) + (showYAxisTitle ? powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_22__.fromPointToPixel(this.settings.valueAxis.titleFontSize) : 0);
      var xAxisMaxLableWidth = _utils__WEBPACK_IMPORTED_MODULE_4__.getLabelsMaxWidth(xtickText);
      var innerPadding = this.data && this.data.axes ? this.data.axes.x.axis.tickPadding() : 0;
      var isReverted = false;
      if (this.data && (!this.data.axes.xIsScalar || this.settings.categoryAxis.axisType !== 'continuous')) {
        isReverted = !!this.maxXLabelsWidth || xAxisMaxLableWidth > (this.data.axes.x.scale.bandwidth ? this.data.axes.x.scale.bandwidth() : 0 + innerPadding);
      }
      var titleSize = showXAxisTitle ? powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_22__.fromPointToPixel(this.settings.categoryAxis.titleFontSize) + 5 : 0;
      this.xTickOffset = (isReverted ? xAxisMaxLableWidth : _utils__WEBPACK_IMPORTED_MODULE_4__.getLabelsMaxHeight(xtickText)) + titleSize;
      this.isNeedToRotate = isReverted;
    }
  }, {
    key: "calculateVisualSizeAndPosition",
    value: function calculateVisualSizeAndPosition() {
      var legendSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      // Update the size of our SVG element
      if (this.mainSvgElement) {
        this.mainSvgElement.attr('width', this.viewport.width).attr('height', this.viewport.height);
      }
      this.calculateVisualMargin();
      var showXAxisTitle = this.settings.categoryAxis.show && this.settings.categoryAxis.showTitle;
      var yAxisTitleThickness = showXAxisTitle ? _utils__WEBPACK_IMPORTED_MODULE_4__.GetXAxisTitleHeight(this.settings.categoryAxis) + 5 : 0;
      this.calculateVisualSize(legendSize, yAxisTitleThickness);
      var xAxisMaxWidth = _utils_axis_yAxisUtils__WEBPACK_IMPORTED_MODULE_19__.getXAxisMaxWidth(this.visualSize.height + this.xTickOffset, this.settings);
      if (this.xTickOffset > xAxisMaxWidth + yAxisTitleThickness) {
        this.xTickOffset = xAxisMaxWidth + yAxisTitleThickness;
        this.maxXLabelsWidth = xAxisMaxWidth;
      }
      this.calculateVisualPosition();
    }
  }, {
    key: "calculateVisualMargin",
    value: function calculateVisualMargin() {
      var yHasRightPosition = this.settings.valueAxis.show && this.settings.valueAxis.position === 'right';
      var extendedLeftMargin = yHasRightPosition || !this.settings.categoryAxis.show;
      var extendedRightMargin = !yHasRightPosition || !this.settings.categoryAxis.show;
      // Set up margins for our visual
      this.visualMargin = {
        top: 5,
        bottom: 5,
        left: extendedLeftMargin ? 15 : 5,
        right: extendedRightMargin ? 15 : 5
      };
    }
  }, {
    key: "calculateVisualSize",
    value: function calculateVisualSize(legendSize, xAxisTitleThickness) {
      var visualSize = {
        width: this.viewport.width - this.visualMargin.left - this.visualMargin.right - this.axesSize.yAxisWidth - (legendSize === null ? 0 : legendSize.width) - this.yTickOffset,
        height: this.viewport.height - this.visualMargin.top - this.visualMargin.bottom - this.axesSize.xAxisHeight - (legendSize === null ? 0 : legendSize.height) - this.xTickOffset - (this.scrollBar.isEnabled() ? this.scrollBar.settings.trackSize : 0)
      };
      // set maximum Y-labels width according to the Y-axis formatting options (maximumSize parameter)
      var xAxisMaxWidth = _utils_axis_yAxisUtils__WEBPACK_IMPORTED_MODULE_19__.getXAxisMaxWidth(visualSize.height + this.xTickOffset, this.settings);
      if (this.xTickOffset > xAxisMaxWidth + xAxisTitleThickness) {
        visualSize.height = visualSize.height + this.xTickOffset - xAxisMaxWidth - xAxisTitleThickness;
        this.xTickOffset = xAxisMaxWidth + xAxisTitleThickness;
        this.maxXLabelsWidth = xAxisMaxWidth;
      }
      this.visualSize = visualSize;
    }
  }, {
    key: "calculateVisualPosition",
    value: function calculateVisualPosition() {
      // Translate the SVG group to account for visual's margins
      this.chartsContainer.attr('transform', "translate(".concat(this.visualMargin.left, ", ").concat(this.visualMargin.top, ")"));
      // Move SVG group elements to appropriate positions.
      this.visualTranslation = {
        x: this.visualMargin.left,
        y: this.visualMargin.top
      };
      var yHasLeftPosition = this.settings.valueAxis.show && this.settings.valueAxis.position === 'left';
      var translateX = yHasLeftPosition ? this.axesSize.yAxisWidth + this.yTickOffset : 0;
      this.xAxisSvgGroup.attr('transform', powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_24__.translate(translateX, this.visualMargin.top + this.visualSize.height));
      this.yAxisSvgGroup.attr('transform', powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_24__.translate(yHasLeftPosition ? this.axesSize.yAxisWidth + this.yTickOffset : this.visualSize.width, this.visualMargin.top));
      this.barGroup.attr('transform', powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_24__.translate(translateX, this.visualMargin.top));
      this.labelGraphicsContext.attr('transform', powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_24__.translate(translateX, this.visualMargin.top));
      this.labelBackgroundContext.attr('transform', powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_24__.translate(translateX, this.visualMargin.top));
    }
  }, {
    key: "yAxisHasRightPosition",
    value: function yAxisHasRightPosition() {
      return this.settings.valueAxis.show && this.settings.valueAxis.position === 'right';
    }
  }, {
    key: "enumerateObjectInstances",
    value:
    /**
     * This function gets called for each of the objects defined in the capabilities files and allows you to select which of the
     * objects and properties you want to expose to the users in the property pane.
     *
     */
    function enumerateObjectInstances(options) {
      var instanceEnumeration = _settings__WEBPACK_IMPORTED_MODULE_11__.VisualSettings.enumerateObjectInstances(this.settings || _settings__WEBPACK_IMPORTED_MODULE_11__.VisualSettings.getDefault(), options);
      var instances = instanceEnumeration.instances;
      var instance = instances[0];
      if (instance.objectName === 'legend' && !this.isLegendNeeded) {
        return null;
      }
      if (instance.objectName === 'smallMultiple' && !this.isSmallMultiple()) {
        return null;
      }
      _enumerateObject__WEBPACK_IMPORTED_MODULE_15__.EnumerateObject.setInstances(this.settings, instanceEnumeration, this.data.axes.xIsScalar, this.data);
      return instanceEnumeration;
    }
  }], [{
    key: "parseSettings",
    value: function parseSettings(dataView) {
      return _settings__WEBPACK_IMPORTED_MODULE_11__.VisualSettings.parse(dataView);
    }
  }]);
  return Visual;
}();
Visual.DefaultColor = '#777777';
Visual.DefaultStrokeSelectionColor = '#000';
Visual.DefaultStrokeWidth = 1;
Visual.DefaultStrokeSelectionWidth = 1;

/***/ }),

/***/ "./src/visualInterfaces.ts":
/*!*********************************!*\
  !*** ./src/visualInterfaces.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollableAxisName": () => (/* binding */ ScrollableAxisName),
/* harmony export */   "VisualColumns": () => (/* binding */ VisualColumns)
/* harmony export */ });


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var VisualColumns = /*#__PURE__*/_createClass(function VisualColumns() {
  _classCallCheck(this, VisualColumns);
  this.Axis = null;
  this.Legend = null;
  this.Value = null;
  this.ColorSaturation = null;
  this.Tooltips = null;
  this.ColumnBy = null;
  this.RowBy = null;
  this.GroupedValues = null;
});
var ScrollableAxisName;
(function (ScrollableAxisName) {
  ScrollableAxisName[ScrollableAxisName["X"] = 'x'] = "X";
  ScrollableAxisName[ScrollableAxisName["Y"] = 'y'] = "Y";
})(ScrollableAxisName || (ScrollableAxisName = {}));

/***/ }),

/***/ "./style/visual.less":
/*!***************************!*\
  !*** ./style/visual.less ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axis.js":
/*!************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axis.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LabelLayoutStrategy": () => (/* reexport module object */ _labelLayoutStrategy__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   "applyCustomizedDomain": () => (/* binding */ applyCustomizedDomain),
/* harmony export */   "calculateAxisPrecision": () => (/* binding */ calculateAxisPrecision),
/* harmony export */   "columnDataTypeHasValue": () => (/* binding */ columnDataTypeHasValue),
/* harmony export */   "combineDomain": () => (/* binding */ combineDomain),
/* harmony export */   "createAxis": () => (/* binding */ createAxis),
/* harmony export */   "createAxisLabel": () => (/* binding */ createAxisLabel),
/* harmony export */   "createDomain": () => (/* binding */ createDomain),
/* harmony export */   "createFormatter": () => (/* binding */ createFormatter),
/* harmony export */   "createLinearScale": () => (/* binding */ createLinearScale),
/* harmony export */   "createNumericalScale": () => (/* binding */ createNumericalScale),
/* harmony export */   "createOrdinalScale": () => (/* binding */ createOrdinalScale),
/* harmony export */   "createOrdinalType": () => (/* binding */ createOrdinalType),
/* harmony export */   "createPointScale": () => (/* binding */ createPointScale),
/* harmony export */   "createScale": () => (/* binding */ createScale),
/* harmony export */   "createStackedAxis": () => (/* binding */ createStackedAxis),
/* harmony export */   "createValueDomain": () => (/* binding */ createValueDomain),
/* harmony export */   "diffScaled": () => (/* binding */ diffScaled),
/* harmony export */   "emptyDomain": () => (/* binding */ emptyDomain),
/* harmony export */   "ensureValuesInRange": () => (/* binding */ ensureValuesInRange),
/* harmony export */   "extent": () => (/* binding */ extent),
/* harmony export */   "findClosestXAxisIndex": () => (/* binding */ findClosestXAxisIndex),
/* harmony export */   "getBestNumberOfTicks": () => (/* binding */ getBestNumberOfTicks),
/* harmony export */   "getCategoryThickness": () => (/* binding */ getCategoryThickness),
/* harmony export */   "getCategoryValueType": () => (/* binding */ getCategoryValueType),
/* harmony export */   "getMargin": () => (/* binding */ getMargin),
/* harmony export */   "getMinTickValueInterval": () => (/* binding */ getMinTickValueInterval),
/* harmony export */   "getRangeForColumn": () => (/* binding */ getRangeForColumn),
/* harmony export */   "getRecommendedNumberOfTicksForXAxis": () => (/* binding */ getRecommendedNumberOfTicksForXAxis),
/* harmony export */   "getRecommendedNumberOfTicksForYAxis": () => (/* binding */ getRecommendedNumberOfTicksForYAxis),
/* harmony export */   "getRecommendedTickValues": () => (/* binding */ getRecommendedTickValues),
/* harmony export */   "getRecommendedTickValuesForAQuantitativeRange": () => (/* binding */ getRecommendedTickValuesForAQuantitativeRange),
/* harmony export */   "getRecommendedTickValuesForAnOrdinalRange": () => (/* binding */ getRecommendedTickValuesForAnOrdinalRange),
/* harmony export */   "getTickLabelMargins": () => (/* binding */ getTickLabelMargins),
/* harmony export */   "hasNonIntegerData": () => (/* binding */ hasNonIntegerData),
/* harmony export */   "invertOrdinalScale": () => (/* binding */ invertOrdinalScale),
/* harmony export */   "invertScale": () => (/* binding */ invertScale),
/* harmony export */   "isDateTime": () => (/* binding */ isDateTime),
/* harmony export */   "isLogScalePossible": () => (/* binding */ isLogScalePossible),
/* harmony export */   "isOrdinal": () => (/* binding */ isOrdinal),
/* harmony export */   "isOrdinalScale": () => (/* binding */ isOrdinalScale),
/* harmony export */   "lookupOrdinalIndex": () => (/* binding */ lookupOrdinalIndex),
/* harmony export */   "normalizeInfinityInScale": () => (/* binding */ normalizeInfinityInScale),
/* harmony export */   "normalizeNonFiniteNumber": () => (/* binding */ normalizeNonFiniteNumber),
/* harmony export */   "powerOfTen": () => (/* binding */ powerOfTen),
/* harmony export */   "scaleShouldClamp": () => (/* binding */ scaleShouldClamp),
/* harmony export */   "stackedAxisPadding": () => (/* binding */ stackedAxisPadding)
/* harmony export */ });
/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! d3-scale */ "./node_modules/d3-scale/src/band.js");
/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! d3-scale */ "./node_modules/d3-scale/src/log.js");
/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! d3-scale */ "./node_modules/d3-scale/src/linear.js");
/* harmony import */ var d3_axis__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-axis */ "./node_modules/d3-axis/src/axis.js");
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-array */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/bisect.js");
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! d3-array */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/min.js");
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! d3-array */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/max.js");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/valueType.js");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/* harmony import */ var _axisInterfaces__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./axisInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisInterfaces.js");
/* harmony import */ var _axisScale__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./axisScale */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisScale.js");
/* harmony import */ var _axisStyle__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./axisStyle */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisStyle.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var _labelLayoutStrategy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./labelLayoutStrategy */ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/labelLayoutStrategy.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/



// powerbi.extensibility.utils.type

var ValueType = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.ValueType;



// powerbi.extensibility.utils.formatting

var DateTimeSequence = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_1__.dateTimeSequence.DateTimeSequence;
var valueFormatter = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_1__.valueFormatter;
var numberFormat = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_1__.formattingService.numberFormat;
const XLabelMaxAllowedOverflow = 35;
const TextHeightConstant = 10;
const MinTickCount = 2;
const DefaultBestTickCount = 3;
const ScalarTickLabelPadding = 3;
const TickLabelPadding = 2;
const MinOrdinalRectThickness = 20;
/**
 * Default ranges are for when we have a field chosen for the axis,
 * but no values are returned by the query.
 */
const emptyDomain = [0, 0];
const stackedAxisPadding = 5;
function getRecommendedNumberOfTicksForXAxis(availableWidth) {
    if (availableWidth < 300) {
        return 3;
    }
    if (availableWidth < 500) {
        return 5;
    }
    return 8;
}
function getRecommendedNumberOfTicksForYAxis(availableWidth) {
    if (availableWidth < 150) {
        return 3;
    }
    if (availableWidth < 300) {
        return 5;
    }
    return 8;
}
/**
 * Get the best number of ticks based on minimum value, maximum value,
 * measure metadata and max tick count.
 *
 * @param min The minimum of the data domain.
 * @param max The maximum of the data domain.
 * @param valuesMetadata The measure metadata array.
 * @param maxTickCount The max count of intervals.
 * @param isDateTime - flag to show single tick when min is equal to max.
 */
function getBestNumberOfTicks(min, max, valuesMetadata, maxTickCount, isDateTime) {
    if (isNaN(min) || isNaN(max)) {
        return DefaultBestTickCount;
    }
    if (maxTickCount <= 1 || (max <= 1 && min >= -1)) {
        return maxTickCount;
    }
    if (min === max) {
        // datetime needs to only show one tick value in this case so formatting works correctly
        if (isDateTime) {
            return 1;
        }
        return DefaultBestTickCount;
    }
    if (hasNonIntegerData(valuesMetadata)) {
        return maxTickCount;
    }
    // e.g. 5 - 2 + 1 = 4, => [2,3,4,5]
    return Math.min(max - min + 1, maxTickCount);
}
function hasNonIntegerData(valuesMetadata) {
    for (let i = 0, len = valuesMetadata.length; i < len; i++) {
        const currentMetadata = valuesMetadata[i];
        if (currentMetadata && currentMetadata.type && !currentMetadata.type.integer) {
            return true;
        }
    }
    return false;
}
function getRecommendedTickValues(maxTicks, scale, axisType, isScalar, minTickInterval) {
    if (!isScalar || isOrdinalScale(scale)) {
        return getRecommendedTickValuesForAnOrdinalRange(maxTicks, scale.domain());
    }
    else if (isDateTime(axisType)) {
        return getRecommendedTickValuesForADateTimeRange(maxTicks, scale.domain());
    }
    return getRecommendedTickValuesForAQuantitativeRange(maxTicks, scale, minTickInterval);
}
function getRecommendedTickValuesForAnOrdinalRange(maxTicks, labels) {
    const tickLabels = [];
    // return no ticks in this case
    if (maxTicks <= 0)
        return tickLabels;
    const len = labels.length;
    if (maxTicks > len)
        return labels;
    for (let i = 0, step = Math.ceil(len / maxTicks); i < len; i += step) {
        tickLabels.push(labels[i]);
    }
    return tickLabels;
}
function getRecommendedTickValuesForAQuantitativeRange(maxTicks, scale, minInterval) {
    let tickLabels = [];
    // if maxticks is zero return none
    if (maxTicks === 0)
        return tickLabels;
    const quantitiveScale = scale;
    if (quantitiveScale.ticks) {
        tickLabels = quantitiveScale.ticks(maxTicks);
        if (tickLabels.length > maxTicks && maxTicks > 1)
            tickLabels = quantitiveScale.ticks(maxTicks - 1);
        if (tickLabels.length < MinTickCount) {
            tickLabels = quantitiveScale.ticks(maxTicks + 1);
        }
        tickLabels = createTrueZeroTickLabel(tickLabels);
        if (minInterval && tickLabels.length > 1) {
            let tickInterval = tickLabels[1] - tickLabels[0];
            while (tickInterval > 0 && tickInterval < minInterval) {
                for (let i = 1; i < tickLabels.length; i++) {
                    tickLabels.splice(i, 1);
                }
                tickInterval = tickInterval * 2;
            }
            // keep at least two labels - the loop above may trim all but one if we have odd # of tick labels and dynamic range < minInterval
            if (tickLabels.length === 1) {
                tickLabels.push(tickLabels[0] + minInterval);
            }
        }
        return tickLabels;
    }
    return tickLabels;
}
/**
 * Round out very small zero tick values (e.g. -1e-33 becomes 0).
 *
 * @param ticks Array of numbers (from d3.scale.ticks([maxTicks])).
 * @param epsilon Max ratio of calculated tick interval which we will recognize as zero.
 *
 * e.g.
 *     ticks = [-2, -1, 1e-10, 3, 4]; epsilon = 1e-5;
 *     closeZero = 1e-5 * | 2 - 1 | = 1e-5
 *     // Tick values <= 1e-5 replaced with 0
 *     return [-2, -1, 0, 3, 4];
 */
function createTrueZeroTickLabel(ticks, epsilon = 1e-5) {
    if (!ticks || ticks.length < 2)
        return ticks;
    const closeZero = epsilon * Math.abs(ticks[1] - ticks[0]);
    return ticks.map((tick) => Math.abs(tick) <= closeZero ? 0 : tick);
}
function getRecommendedTickValuesForADateTimeRange(maxTicks, dataDomain) {
    let tickLabels = [];
    if (dataDomain[0] === 0 && dataDomain[1] === 0)
        return [];
    const dateTimeTickLabels = DateTimeSequence.CALCULATE(new Date(dataDomain[0]), new Date(dataDomain[1]), maxTicks).sequence;
    tickLabels = dateTimeTickLabels.map(d => d.getTime());
    tickLabels = ensureValuesInRange(tickLabels, dataDomain[0], dataDomain[1]);
    return tickLabels;
}
function normalizeLinearDomain(domain) {
    if (isNaN(domain.min) || isNaN(domain.max)) {
        domain.min = emptyDomain[0];
        domain.max = emptyDomain[1];
    }
    else if (domain.min === domain.max) {
        // d3 linear scale will give zero tickValues if max === min, so extend a little
        domain.min = domain.min < 0 ? domain.min * 1.2 : domain.min * 0.8;
        domain.max = domain.max < 0 ? domain.max * 0.8 : domain.max * 1.2;
    }
    else {
        // Check that min is very small and is a negligable portion of the whole domain.
        // (fix floating pt precision bugs)
        // sometimes highlight value math causes small negative numbers which makes the axis add
        // a large tick interval instead of just rendering at zero.
        if (Math.abs(domain.min) < 0.0001 && domain.min / (domain.max - domain.min) < 0.0001) {
            domain.min = 0;
        }
    }
    return domain;
}
/* eslint-disable-next-line @typescript-eslint/no-unused-vars */
function getMargin(availableWidth, availableHeight, xMargin, yMargin) {
    return {
        top: 20,
        right: 30,
        bottom: 40,
        left: 30
    };
}
// TODO: Put the parameters into one object
/* eslint-disable-next-line max-lines-per-function*/
function getTickLabelMargins(viewport, yMarginLimit, textWidthMeasurer, textHeightMeasurer, axes, bottomMarginLimit, properties, scrollbarVisible, showOnRight, renderXAxis, renderY1Axis, renderY2Axis) {
    const xAxisProperties = axes.x;
    const y1AxisProperties = axes.y1;
    const y2AxisProperties = axes.y2;
    const xLabels = xAxisProperties.values;
    const y1Labels = y1AxisProperties.values;
    let leftOverflow = 0;
    let rightOverflow = 0;
    let maxWidthY1 = 0;
    let maxWidthY2 = 0;
    let xMax = 0; // bottom margin
    const ordinalLabelOffset = xAxisProperties.categoryThickness ? xAxisProperties.categoryThickness / 2 : 0;
    const scaleIsOrdinal = isOrdinalScale(xAxisProperties.scale);
    const hasHierarchy = !arrayIsEmpty(axes.xStack);
    let xLabelOuterPadding = 0;
    if (xAxisProperties.outerPadding !== undefined) {
        xLabelOuterPadding = xAxisProperties.outerPadding;
    }
    else if (xAxisProperties.xLabelMaxWidth !== undefined) {
        xLabelOuterPadding = Math.max(0, (viewport.width - xAxisProperties.xLabelMaxWidth * xLabels.length) / 2);
    }
    let rotation;
    if (scrollbarVisible || hasHierarchy)
        rotation = _labelLayoutStrategy__WEBPACK_IMPORTED_MODULE_2__.DefaultRotationWithScrollbar;
    else
        rotation = _labelLayoutStrategy__WEBPACK_IMPORTED_MODULE_2__.DefaultRotation;
    if (renderY1Axis) {
        for (let i = 0, len = y1Labels.length; i < len; i++) {
            properties.text = y1Labels[i];
            maxWidthY1 = Math.max(maxWidthY1, textWidthMeasurer(properties));
        }
    }
    if (y2AxisProperties && renderY2Axis) {
        const y2Labels = y2AxisProperties.values;
        for (let i = 0, len = y2Labels.length; i < len; i++) {
            properties.text = y2Labels[i];
            maxWidthY2 = Math.max(maxWidthY2, textWidthMeasurer(properties));
        }
    }
    const textHeight = textHeightMeasurer(properties);
    const maxNumLines = Math.floor(bottomMarginLimit / textHeight);
    const xScale = xAxisProperties.scale;
    const xDomain = xScale.domain();
    if (renderXAxis && xLabels.length > 0) {
        for (let i = 0, len = xLabels.length; i < len; i++) {
            // find the max height of the x-labels, perhaps rotated or wrapped
            let height;
            properties.text = xLabels[i];
            let width = textWidthMeasurer(properties);
            if (xAxisProperties.willLabelsWordBreak) {
                // Split label and count rows
                const wordBreaks = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_1__.wordBreaker.splitByWidth(properties.text, properties, textWidthMeasurer, xAxisProperties.xLabelMaxWidth, maxNumLines);
                height = wordBreaks.length * textHeight;
                // word wrapping will truncate at xLabelMaxWidth
                width = xAxisProperties.xLabelMaxWidth;
            }
            else if (!xAxisProperties.willLabelsFit && scaleIsOrdinal) {
                height = width * rotation.sine;
                width = width * rotation.cosine;
            }
            else {
                height = TextHeightConstant;
            }
            // calculate left and right overflow due to wide X labels
            // (Note: no right overflow when rotated)
            if (i === 0) {
                if (scaleIsOrdinal) {
                    if (!xAxisProperties.willLabelsFit /*rotated text*/)
                        leftOverflow = width - ordinalLabelOffset - xLabelOuterPadding;
                    else
                        leftOverflow = (width / 2) - ordinalLabelOffset - xLabelOuterPadding;
                    leftOverflow = Math.max(leftOverflow, 0);
                }
                else if (xDomain.length > 1) {
                    // Scalar - do some math
                    const xPos = xScale(xDomain[0]);
                    // xPos already incorporates xLabelOuterPadding, don't subtract it twice
                    leftOverflow = (width / 2) - xPos;
                    leftOverflow = Math.max(leftOverflow, 0);
                }
            }
            else if (i === len - 1) {
                if (scaleIsOrdinal) {
                    // if we are rotating text (!willLabelsFit) there won't be any right overflow
                    if (xAxisProperties.willLabelsFit || xAxisProperties.willLabelsWordBreak) {
                        // assume this label is placed near the edge
                        rightOverflow = (width / 2) - ordinalLabelOffset - xLabelOuterPadding;
                        rightOverflow = Math.max(rightOverflow, 0);
                    }
                }
                else if (xDomain.length > 1) {
                    // Scalar - do some math
                    const xPos = xScale(xDomain[1]);
                    // xPos already incorporates xLabelOuterPadding, don't subtract it twice
                    rightOverflow = (width / 2) - (viewport.width - xPos);
                    rightOverflow = Math.max(rightOverflow, 0);
                }
            }
            xMax = Math.max(xMax, height);
        }
        // trim any actual overflow to the limit
        leftOverflow = Math.min(leftOverflow, XLabelMaxAllowedOverflow);
        rightOverflow = Math.min(rightOverflow, XLabelMaxAllowedOverflow);
    }
    let rightMargin = 0, leftMargin = 0, bottomMargin = Math.min(Math.ceil(xMax), bottomMarginLimit);
    if (showOnRight) {
        leftMargin = Math.min(Math.max(leftOverflow, maxWidthY2), yMarginLimit);
        rightMargin = Math.min(Math.max(rightOverflow, maxWidthY1), yMarginLimit);
    }
    else {
        leftMargin = Math.min(Math.max(leftOverflow, maxWidthY1), yMarginLimit);
        rightMargin = Math.min(Math.max(rightOverflow, maxWidthY2), yMarginLimit);
    }
    if (hasHierarchy) {
        bottomMargin += (textHeight + stackedAxisPadding) * (axes.xStack.length - 1);
    }
    return {
        xMax: Math.ceil(bottomMargin),
        yLeft: Math.ceil(leftMargin),
        yRight: Math.ceil(rightMargin),
        stackHeight: textHeight + stackedAxisPadding,
    };
}
function columnDataTypeHasValue(dataType) {
    return dataType && (dataType.bool || dataType.numeric || dataType.text || dataType.dateTime);
}
function createOrdinalType() {
    return ValueType.fromDescriptor({ text: true });
}
function isOrdinal(dataType) {
    return !!(dataType && (dataType.text || dataType.bool || (dataType.misc && dataType.misc.barcode) || (dataType.geography && dataType.geography.postalCode)));
}
function isOrdinalScale(scale) {
    return typeof scale.bandwidth === "function";
}
function isDateTime(dataType) {
    return !!(dataType && dataType.dateTime);
}
function invertScale(scale, x) {
    if (isOrdinalScale(scale)) {
        return invertOrdinalScale(scale, x);
    }
    return scale.invert(x);
}
function extent(scale) {
    const range = scale.range();
    return [range[0], range[range.length - 1]];
}
/**
 * Uses the D3 scale to get the actual category thickness.
 * @return The difference between the 1st and 2nd items in the range if there are 2 or more items in the range.
 * Otherwise, the length of the entire range.
 */
function getCategoryThickness(scale) {
    const leftEdges = scale.range();
    if (leftEdges.length < 2) {
        // We have 1 item if we don't have 2 edges. If we have 1 item, just use the entire axis length as the thickness.
        if (isOrdinalScale(scale)) {
            // We should only hit this if we have an ordinal scale. Other scales should always have 2 items in their range.
            const rangeExtent = scale.range();
            return rangeExtent[1] - rangeExtent[0];
        }
    }
    return leftEdges[1] - leftEdges[0];
}
/**
 * Inverts the ordinal scale. If x < scale.range()[0], then scale.domain()[0] is returned.
 * Otherwise, it returns the greatest item in scale.domain() that's <= x.
 */
function invertOrdinalScale(scale, x) {
    const domain = scale.domain();
    const range = domain.map(d => scale(d));
    if (range.length < 2) {
        return 0;
    }
    const leftEdges = [];
    leftEdges[0] = range[0];
    leftEdges[1] = range[range.length - 1];
    const halfInnerPadding = 0;
    // If x is less than the range, just return the 1st item in the domain
    if (range[0] > x) {
        return domain[0];
    }
    // d3.bisect returns the index at which we can insert something so that everything before it is lesser and everything after it is greater.
    // The leftEdges don't include the inner padding, so we need to shift x over by halfInnerPadding to account it.
    // We want index - 1 since that's the greatest value less than x, meaning that's the band we're in.
    // Use that index to find the right value in the domain.
    return domain[(0,d3_array__WEBPACK_IMPORTED_MODULE_3__["default"])(range, x + halfInnerPadding) - 1];
}
function findClosestXAxisIndex(categoryValue, categoryAxisValues) {
    let closestValueIndex = -1, minDistance = Number.MAX_VALUE;
    for (const i in categoryAxisValues) {
        const distance = Math.abs(categoryValue - categoryAxisValues[i].categoryValue);
        if (distance < minDistance) {
            minDistance = distance;
            closestValueIndex = parseInt(i, 10);
        }
    }
    return closestValueIndex;
}
function lookupOrdinalIndex(scale, pixelValue) {
    let closestValueIndex = -1;
    let minDistance = Number.MAX_VALUE;
    const domain = scale.domain();
    if (domain.length < 2) {
        return 0;
    }
    const halfWidth = (scale(1) - scale(0)) / 2;
    for (const idx in domain) {
        const leftEdgeInPixels = scale(idx);
        const midPoint = leftEdgeInPixels + halfWidth;
        const distance = Math.abs(pixelValue - midPoint);
        if (distance < minDistance) {
            minDistance = distance;
            closestValueIndex = parseInt(idx, 10);
        }
    }
    return closestValueIndex;
}
/** scale(value1) - scale(value2) with zero checking and min(+/-1, result) */
function diffScaled(scale, value1, value2) {
    const value = scale(value1) - scale(value2);
    if (value === 0) {
        return 0;
    }
    if (value < 0) {
        return Math.min(value, -1);
    }
    return Math.max(value, 1);
}
function createDomain(data, axisType, isScalar, forcedScalarDomain, ensureDomain) {
    if (isScalar && !isOrdinal(axisType)) {
        let userMin, userMax;
        if (forcedScalarDomain && forcedScalarDomain.length === 2) {
            userMin = forcedScalarDomain[0];
            userMax = forcedScalarDomain[1];
        }
        return createScalarDomain(data, userMin, userMax, axisType, ensureDomain);
    }
    return createOrdinalDomain(data);
}
function ensureValuesInRange(values, min, max) {
    let filteredValues = values.filter(v => v >= min && v <= max);
    if (filteredValues.length < 2) {
        filteredValues = [min, max];
    }
    return filteredValues;
}
/**
 * Gets the ValueType of a category column, defaults to Text if the type is not present.
 */
function getCategoryValueType(metadataColumn, isScalar) {
    if (metadataColumn && columnDataTypeHasValue(metadataColumn.type)) {
        return metadataColumn.type;
    }
    if (isScalar) {
        return ValueType.fromDescriptor({ numeric: true });
    }
    return ValueType.fromDescriptor({ text: true });
}
/**
 * Create a D3 axis including scale. Can be vertical or horizontal, and either datetime, numeric, or text.
 * @param options The properties used to create the axis.
 */
function createAxis(options) {
    const pixelSpan = options.pixelSpan, dataDomain = options.dataDomain, metaDataColumn = options.metaDataColumn, formatString = options.formatString, outerPadding = options.outerPadding || 0, isCategoryAxis = !!options.isCategoryAxis, isScalar = !!options.isScalar, isVertical = !!options.isVertical, useTickIntervalForDisplayUnits = !!options.useTickIntervalForDisplayUnits, // DEPRECATE: same meaning as isScalar?
    getValueFn = options.getValueFn, axisDisplayUnits = options.axisDisplayUnits, axisPrecision = options.axisPrecision, is100Pct = !!options.is100Pct, dataType = getCategoryValueType(metaDataColumn, isScalar);
    let categoryThickness = options.categoryThickness;
    // Create the Scale
    const scaleResult = createScale(options);
    const scale = scaleResult.scale;
    const bestTickCount = scaleResult.bestTickCount;
    const scaleDomain = scale.domain();
    const isLogScaleAllowed = isLogScalePossible(dataDomain, dataType);
    // fix categoryThickness if scalar and the domain was adjusted when making the scale "nice"
    if (categoryThickness && isScalar && dataDomain && dataDomain.length === 2) {
        const oldSpan = dataDomain[1] - dataDomain[0];
        const newSpan = scaleDomain[1] - scaleDomain[0];
        if (oldSpan > 0 && newSpan > 0) {
            categoryThickness = categoryThickness * oldSpan / newSpan;
        }
    }
    // Prepare Tick Values for formatting
    let tickValues;
    if (isScalar && bestTickCount === 1 && !arrayIsEmpty(dataDomain)) {
        tickValues = [dataDomain[0]];
    }
    else {
        const minTickInterval = isScalar ? getMinTickValueInterval(formatString, dataType, is100Pct) : undefined;
        tickValues = getRecommendedTickValues(bestTickCount, scale, dataType, isScalar, minTickInterval);
    }
    if (options.scaleType && options.scaleType === _axisScale__WEBPACK_IMPORTED_MODULE_4__.log && isLogScaleAllowed) {
        tickValues = tickValues.filter((d) => { return powerOfTen(d); });
    }
    const formatter = createFormatter(scaleDomain, dataDomain, dataType, isScalar, formatString, bestTickCount, tickValues, getValueFn, useTickIntervalForDisplayUnits, axisDisplayUnits, axisPrecision);
    // sets default orientation only, cartesianChart will fix y2 for comboChart
    // tickSize(pixelSpan) is used to create gridLines
    const axisFunction = isVertical ? d3_axis__WEBPACK_IMPORTED_MODULE_5__.axisLeft : d3_axis__WEBPACK_IMPORTED_MODULE_5__.axisBottom;
    const axis = axisFunction(scale)
        .tickSize(6)
        .ticks(bestTickCount)
        .tickValues(tickValues);
    let formattedTickValues = [];
    if (metaDataColumn)
        formattedTickValues = formatAxisTickValues(axis, tickValues, formatter, dataType, getValueFn);
    let xLabelMaxWidth;
    // Use category layout of labels if specified, otherwise use scalar layout of labels
    if (!isScalar && categoryThickness) {
        xLabelMaxWidth = Math.max(1, categoryThickness - TickLabelPadding * 2);
    }
    else {
        // When there are 0 or 1 ticks, then xLabelMaxWidth = pixelSpan
        xLabelMaxWidth = tickValues.length > 1 ? getScalarLabelMaxWidth(scale, tickValues) : pixelSpan;
        xLabelMaxWidth = xLabelMaxWidth - ScalarTickLabelPadding * 2;
    }
    return {
        scale: scale,
        axis: axis,
        formatter: formatter,
        values: formattedTickValues,
        axisType: dataType,
        axisLabel: null,
        isCategoryAxis: isCategoryAxis,
        xLabelMaxWidth: xLabelMaxWidth,
        categoryThickness: categoryThickness,
        outerPadding: outerPadding,
        usingDefaultDomain: scaleResult.usingDefaultDomain,
        isLogScaleAllowed: isLogScaleAllowed,
        dataDomain: dataDomain,
    };
}
/**
 * Creates a D3 axis for stacked axis usage. `options.innerTickSize` and `options.outerTickSize` will be defaulted to 0 if not set.
 * `options.orientation` will be defaulted to "bottom" if not specified.
 */
function createStackedAxis(options) {
    const axis = options.axis;
    const orientation = options.orient;
    let axisFunction;
    // TODO: possible breaking changes
    switch (orientation) {
        case _axisInterfaces__WEBPACK_IMPORTED_MODULE_6__.AxisOrientation.bottom:
            axisFunction = d3_axis__WEBPACK_IMPORTED_MODULE_5__.axisBottom;
            break;
        case _axisInterfaces__WEBPACK_IMPORTED_MODULE_6__.AxisOrientation.top:
            axisFunction = d3_axis__WEBPACK_IMPORTED_MODULE_5__.axisTop;
            break;
        case _axisInterfaces__WEBPACK_IMPORTED_MODULE_6__.AxisOrientation.left:
            axisFunction = d3_axis__WEBPACK_IMPORTED_MODULE_5__.axisLeft;
            break;
        case _axisInterfaces__WEBPACK_IMPORTED_MODULE_6__.AxisOrientation.right:
            axisFunction = d3_axis__WEBPACK_IMPORTED_MODULE_5__.axisRight;
    }
    return axisFunction(options.scale)
        .tickSize(options.innerTickSize || 0, options.outerTickSize || 0)
        .ticks(axis.tickValues())
        .tickValues(axis.tickValues())
        .tickFormat(options.tickFormat);
}
function getScalarLabelMaxWidth(scale, tickValues) {
    // find the distance between two ticks. scalar ticks can be anywhere, such as:
    // |---50----------100--------|
    if (scale && !arrayIsEmpty(tickValues)) {
        return Math.abs(scale(tickValues[1]) - scale(tickValues[0]));
    }
    return 1;
}
function createScale(options) {
    const pixelSpan = options.pixelSpan, metaDataColumn = options.metaDataColumn, outerPadding = options.outerPadding || 0, isScalar = !!options.isScalar, isVertical = !!options.isVertical, forcedTickCount = options.forcedTickCount, categoryThickness = options.categoryThickness, shouldClamp = !!options.shouldClamp, maxTickCount = options.maxTickCount, disableNice = options.disableNice, disableNiceOnlyForScale = options.disableNiceOnlyForScale, innerPadding = options.innerPadding, useRangePoint = options.useRangePoints, dataType = getCategoryValueType(metaDataColumn, isScalar);
    let dataDomain = options.dataDomain;
    let maxTicks = isVertical ? getRecommendedNumberOfTicksForYAxis(pixelSpan) : getRecommendedNumberOfTicksForXAxis(pixelSpan);
    if (maxTickCount &&
        maxTicks > maxTickCount)
        maxTicks = maxTickCount;
    let scalarDomain = dataDomain ? dataDomain.slice() : null;
    let bestTickCount = maxTicks;
    if (disableNice) {
        bestTickCount = null;
    }
    let scale;
    let usingDefaultDomain = false;
    if (dataDomain == null || (dataDomain.length === 2 && dataDomain[0] == null && dataDomain[1] == null) || (dataDomain.length !== 2 && isScalar)) {
        usingDefaultDomain = true;
        if (dataType.dateTime || !isOrdinal(dataType))
            dataDomain = emptyDomain;
        else // ordinal
            dataDomain = [];
        if (isOrdinal(dataType)) {
            scale = createOrdinalScale(pixelSpan, dataDomain, categoryThickness ? outerPadding / categoryThickness : 0, innerPadding, useRangePoint);
        }
        else {
            scale = createNumericalScale(options.scaleType, pixelSpan, dataDomain, dataType, outerPadding, bestTickCount);
        }
    }
    else {
        if (isScalar && dataDomain.length > 0) {
            if (!disableNice) {
                bestTickCount = forcedTickCount !== undefined
                    ? (maxTicks !== 0 ? forcedTickCount : 0)
                    : getBestNumberOfTicks(dataDomain[0], dataDomain[dataDomain.length - 1], [metaDataColumn], maxTicks, dataType.dateTime);
            }
            const normalizedRange = normalizeLinearDomain({ min: dataDomain[0], max: dataDomain[dataDomain.length - 1] });
            scalarDomain = [normalizedRange.min, normalizedRange.max];
        }
        if (isScalar && dataType.numeric && !dataType.dateTime) {
            if (scalarDomain && scalarDomain.length === 2 && scalarDomain[0] === 0 && scalarDomain[1] === 0 && options.zeroScalarDomain) {
                scalarDomain[0] = options.zeroScalarDomain[0];
                scalarDomain[1] = options.zeroScalarDomain[1];
            }
            let bestTickCountForNumericalScale = bestTickCount;
            if (disableNiceOnlyForScale) {
                bestTickCountForNumericalScale = null;
            }
            scale = createNumericalScale(options.scaleType, pixelSpan, scalarDomain, dataType, outerPadding, bestTickCountForNumericalScale, shouldClamp);
        }
        else if (isScalar && dataType.dateTime) {
            // Use of a linear scale, instead of a D3.time.scale, is intentional since we want
            // to control the formatting of the time values, since d3's implementation isn't
            // in accordance to our design.
            //     scalarDomain: should already be in long-int time (via category.values[0].getTime())
            scale = createLinearScale(pixelSpan, scalarDomain, outerPadding, null, shouldClamp); // DO NOT PASS TICKCOUNT
        }
        else if (dataType.text || dataType.dateTime || dataType.numeric || dataType.bool) {
            scale = createOrdinalScale(pixelSpan, scalarDomain, categoryThickness ? outerPadding / categoryThickness : 0, innerPadding, useRangePoint);
            bestTickCount = maxTicks === 0 ? 0
                : Math.min(scalarDomain.length, (pixelSpan - outerPadding * 2) / MinOrdinalRectThickness);
        }
    }
    // vertical ordinal axis (e.g. categorical bar chart) does not need to reverse
    if (isVertical && isScalar) {
        scale.range(scale.range().reverse());
    }
    normalizeInfinityInScale(scale);
    return {
        scale: scale,
        bestTickCount: bestTickCount,
        usingDefaultDomain: usingDefaultDomain,
    };
}
function normalizeInfinityInScale(scale) {
    // When large values (eg Number.MAX_VALUE) are involved, a call to scale.nice occasionally
    // results in infinite values being included in the domain. To correct for that, we need to
    // re-normalize the domain now to not include infinities.
    const scaledDomain = scale.domain();
    for (let i = 0, len = scaledDomain.length; i < len; ++i) {
        if (scaledDomain[i] === Number.POSITIVE_INFINITY) {
            scaledDomain[i] = Number.MAX_VALUE;
        }
        else if (scaledDomain[i] === Number.NEGATIVE_INFINITY) {
            scaledDomain[i] = -Number.MAX_VALUE;
        }
    }
    scale.domain(scaledDomain);
}
function createFormatter(scaleDomain, dataDomain, dataType, isScalar, formatString, bestTickCount, tickValues, getValueFn, useTickIntervalForDisplayUnits = false, axisDisplayUnits, axisPrecision) {
    let formatter;
    if (dataType.dateTime) {
        if (isScalar) {
            let value = new Date(scaleDomain[0]);
            let value2 = new Date(scaleDomain[1]);
            // datetime with only one value needs to pass the same value
            // (from the original dataDomain value, not the adjusted scaleDomain)
            // so formatting works correctly.
            if (bestTickCount === 1)
                value = value2 = new Date(dataDomain[0]);
            // this will ignore the formatString and create one based on the smallest non-zero portion of the values supplied.
            formatter = valueFormatter.create({
                format: formatString,
                value: value,
                value2: value2,
                tickCount: bestTickCount,
            });
        }
        else {
            // Use the model formatString for ordinal datetime
            formatter = valueFormatter.createDefaultFormatter(formatString, true);
        }
    }
    else {
        if (useTickIntervalForDisplayUnits && isScalar && tickValues.length > 1) {
            const value1 = axisDisplayUnits ? axisDisplayUnits : tickValues[1] - tickValues[0];
            const options = {
                format: formatString,
                value: value1,
                value2: 0,
                allowFormatBeautification: true,
            };
            if (axisPrecision)
                options.precision = axisPrecision;
            else
                options.precision = calculateAxisPrecision(tickValues[0], tickValues[1], axisDisplayUnits, formatString);
            formatter = valueFormatter.create(options);
        }
        else {
            // do not use display units, just the basic value formatter
            // datetime is handled above, so we are ordinal and either boolean, numeric, or text.
            formatter = valueFormatter.createDefaultFormatter(formatString, true);
        }
    }
    return formatter;
}
// returns # of decimal places necessary to distinguish between tick mark values
function calculateAxisPrecision(tickValue0, tickValue1, axisDisplayUnits, formatString) {
    if (!axisDisplayUnits) {
        const displayUnitSystem = valueFormatter.createDisplayUnitSystem();
        displayUnitSystem.update(tickValue1 - tickValue0);
        axisDisplayUnits = displayUnitSystem.displayUnit && displayUnitSystem.displayUnit.value || 1;
    }
    let value0 = (tickValue0 || 0) / axisDisplayUnits;
    let value1 = (tickValue1 || 0) / axisDisplayUnits;
    if (formatString) {
        const partsPerScale = numberFormat.getCustomFormatMetadata(formatString, false, false, true).partsPerScale;
        value0 *= partsPerScale;
        value1 *= partsPerScale;
    }
    return Math.max(calculateAxisPrecisionForValue(value0), calculateAxisPrecisionForValue(value1));
}
function calculateAxisPrecisionForValue(value) {
    if (value === 0)
        return 0;
    if (value < 0)
        value = -value;
    // calculate place of of the most significant decimal digit.
    // 1 means tens digit
    // 0 means the ones digit
    // -1 means tenths digit
    const mostSignificantDigit = Math.floor(powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_7__.log10(value));
    // rounding in various calculations can introduce extraneous amounts of precision in the number
    // no need in an axis label to allow more than this number of digits as the *difference* between
    // ticks
    const MaxDigits = 5;
    if (mostSignificantDigit >= 0) {
        // value has an integer part but may also have a fraction part. get the number of significant
        // digits in the integer part then see how many that leaves us for the fractional part
        const integerSignificantDigits = mostSignificantDigit + 1;
        const maxFractionDigits = MaxDigits - integerSignificantDigits;
        if (maxFractionDigits <= 0) {
            // the value's integer part has at least MaxDigits of precision
            // so there aren't any left for the fractional part
            return 0;
        }
        return numberOfDecimalPlaces(value, maxFractionDigits);
    }
    else {
        // the interval has no integer part - it is a pure decimal fraction. we want the number
        // of decimal places we have to allow so the precision doesn't exceed MaxDigits.
        // knowing where there most significant digit is in the fraction, we can scale
        // the number to the range [0.1, 1)
        const rescaledValue = value / powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_7__.pow10(mostSignificantDigit + 1);
        // get the actual number of significant digits respecting the maximum
        const fractionSignificantDigits = numberOfDecimalPlaces(rescaledValue, MaxDigits);
        // this is the number of zeroes that are required due to the true scale of the decimal fraction
        const fractionScaleDigits = -mostSignificantDigit - 1;
        // number of decimal places is the number of zeros plus the limited number of significant digits
        return fractionScaleDigits + fractionSignificantDigits;
    }
}
// if we're limiting the decimal places to maxDecimalPlaces, how many decimal places do
// we actually need to avoid trailing zeroes? for example, if the value is 1.500001 and
// we want a maximum of three decimal places, the number rounded to three places is 1.500
// so only one decimal place is necessary.
function numberOfDecimalPlaces(value, maxDecimalPlaces) {
    const formattedValue = value.toFixed(maxDecimalPlaces);
    const decimalPoint = formattedValue.indexOf(".");
    if (decimalPoint !== -1) {
        for (let i = formattedValue.length; i-- > decimalPoint;) {
            if (formattedValue[i] !== "0") {
                return i - decimalPoint;
            }
        }
    }
    return 0;
}
/**
 * Format the linear tick labels or the category labels.
 */
function formatAxisTickValues(axis, tickValues, formatter, dataType, getValueFn) {
    let formattedTickValues = [];
    if (!getValueFn)
        getValueFn = data => data;
    if (formatter) {
        axis.tickFormat(d => formatter.format(getValueFn(d, dataType)));
        formattedTickValues = tickValues.map(d => formatter.format(getValueFn(d, dataType)));
    }
    else {
        formattedTickValues = tickValues.map((d) => getValueFn(d, dataType));
    }
    return formattedTickValues;
}
function getMinTickValueInterval(formatString, columnType, is100Pct) {
    const isCustomFormat = formatString && !numberFormat.isStandardFormat(formatString);
    if (isCustomFormat) {
        let precision = numberFormat.getCustomFormatMetadata(formatString, true /*calculatePrecision*/).precision;
        if (formatString.indexOf("%") > -1)
            precision += 2; // percent values are multiplied by 100 during formatting
        return Math.pow(10, -precision);
    }
    else if (is100Pct) {
        return 0.01;
    }
    else if (columnType.integer) {
        return 1;
    }
    return 0;
}
function createScalarDomain(data, userMin, userMax, axisType, ensureDomain) {
    if (data.length === 0) {
        return null;
    }
    const defaultMinX = (0,d3_array__WEBPACK_IMPORTED_MODULE_8__["default"])(data, (kv) => { return (0,d3_array__WEBPACK_IMPORTED_MODULE_8__["default"])(kv.data, d => { return d && d.categoryValue; }); });
    const defaultMaxX = (0,d3_array__WEBPACK_IMPORTED_MODULE_9__["default"])(data, (kv) => { return (0,d3_array__WEBPACK_IMPORTED_MODULE_9__["default"])(kv.data, d => { return d && d.categoryValue; }); });
    return combineDomain([userMin, userMax], [defaultMinX, defaultMaxX], ensureDomain);
}
/**
 * Creates a [min,max] from your Cartiesian data values.
 *
 * @param data The series array of CartesianDataPoints.
 * @param includeZero Columns and bars includeZero, line and scatter do not.
 */
function createValueDomain(data, includeZero) {
    if (data.length === 0)
        return null;
    const minY = (0,d3_array__WEBPACK_IMPORTED_MODULE_8__["default"])(data, (kv) => { return (0,d3_array__WEBPACK_IMPORTED_MODULE_8__["default"])(kv.data, d => { return d && d.value; }); });
    const maxY = (0,d3_array__WEBPACK_IMPORTED_MODULE_9__["default"])(data, (kv) => { return (0,d3_array__WEBPACK_IMPORTED_MODULE_9__["default"])(kv.data, d => { return d && d.value; }); });
    if (includeZero) {
        return [Math.min(minY, 0), Math.max(maxY, 0)];
    }
    return [minY, maxY];
}
function createOrdinalDomain(data) {
    if (arrayIsEmpty(data)) {
        return [];
    }
    // each series shares the same categories for oridinal axes (even if a series has some nulls)
    const domain = [];
    const firstSeries = data[0];
    for (const dp of firstSeries.data) {
        if (!dp.highlight) {
            domain.push(dp.categoryIndex);
        }
    }
    return domain;
}


/* eslint-disable-next-line @typescript-eslint/no-unused-vars */
function createPointScale(pixelSpan, dataDomain, outerPaddingRatio = 0, innerPaddingRatio = 0.2, useRangePoints = false) {
    return (0,d3_scale__WEBPACK_IMPORTED_MODULE_10__.point)()
        .range([0, pixelSpan])
        .padding(outerPaddingRatio)
        /* Avoid using rangeRoundBands here as it is adding some extra padding to the axis*/
        .domain(dataDomain);
}
function createOrdinalScale(pixelSpan, dataDomain, outerPaddingRatio = 0, innerPaddingRatio = 0.2, useRangePoints = false) {
    if (useRangePoints) {
        return (0,d3_scale__WEBPACK_IMPORTED_MODULE_10__.point)()
            .rangeRound([0, pixelSpan])
            .padding(innerPaddingRatio)
            /* Avoid using rangeRoundBands here as it is adding some extra padding to the axis*/
            .domain(dataDomain);
    }
    return (0,d3_scale__WEBPACK_IMPORTED_MODULE_10__["default"])()
        .range([0, pixelSpan])
        .paddingInner(innerPaddingRatio)
        .paddingOuter(outerPaddingRatio)
        /* Avoid using rangeRoundBands here as it is adding some extra padding to the axis*/
        .domain(dataDomain);
}
function isLogScalePossible(domain, axisType) {
    if (domain == null) {
        return false;
    }
    if (isDateTime(axisType)) {
        return false;
    }
    return (domain[0] > 0 && domain[1] > 0) || (domain[0] < 0 && domain[1] < 0); // doman must exclude 0
}
// this function can return different scales e.g. log, linear
// NOTE: export only for testing, do not access directly
function createNumericalScale(axisScaleType, pixelSpan, dataDomain, dataType, outerPadding = 0, niceCount, shouldClamp) {
    if (axisScaleType === _axisScale__WEBPACK_IMPORTED_MODULE_4__.log && isLogScalePossible(dataDomain, dataType)) {
        return createLogScale(pixelSpan, dataDomain, outerPadding, niceCount);
    }
    return createLinearScale(pixelSpan, dataDomain, outerPadding, niceCount, shouldClamp);
}
function createLogScale(pixelSpan, dataDomain, outerPadding = 0, niceCount) {
    const logScale = (0,d3_scale__WEBPACK_IMPORTED_MODULE_11__["default"])()
        .range([outerPadding, pixelSpan - outerPadding])
        .domain([dataDomain[0], dataDomain[1]])
        .clamp(true);
    if (niceCount) {
        logScale.nice();
    }
    return logScale;
}
// NOTE: export only for testing, do not access directly
function createLinearScale(pixelSpan, dataDomain, outerPadding = 0, niceCount, shouldClamp) {
    const linearScale = (0,d3_scale__WEBPACK_IMPORTED_MODULE_12__["default"])()
        .range([outerPadding, pixelSpan - outerPadding])
        .domain([dataDomain[0], dataDomain[1]])
        .clamp(shouldClamp);
    // .nice(undefined) still modifies the scale boundaries, and for datetime this messes things up.
    // we use millisecond ticks since epoch for datetime, so we don't want any "nice" with numbers like 17398203392.
    if (niceCount) {
        linearScale.nice(niceCount);
    }
    return linearScale;
}
function getRangeForColumn(sizeColumn) {
    const result = {};
    if (sizeColumn) {
        result.min = (sizeColumn.min == null
            ? sizeColumn.minLocal == null ? (0,d3_array__WEBPACK_IMPORTED_MODULE_8__["default"])(sizeColumn.values) : sizeColumn.minLocal
            : sizeColumn.min);
        result.max = (sizeColumn.max == null
            ? sizeColumn.maxLocal == null ? (0,d3_array__WEBPACK_IMPORTED_MODULE_9__["default"])(sizeColumn.values) : sizeColumn.maxLocal
            : sizeColumn.max);
    }
    return result;
}
/**
 * Set customized domain, but don't change when nothing is set
 */
function applyCustomizedDomain(customizedDomain, forcedDomain) {
    let domain = [undefined, undefined];
    if (forcedDomain && forcedDomain.length === 2) {
        domain = [forcedDomain[0], forcedDomain[1]];
    }
    if (customizedDomain && customizedDomain.length === 2) {
        if (customizedDomain[0] != null) {
            domain[0] = customizedDomain[0];
        }
        if (customizedDomain[1] != null) {
            domain[1] = customizedDomain[1];
        }
    }
    if (domain[0] == null && domain[1] == null) {
        return forcedDomain; // return untouched object
    }
    // do extra check to see if the user input was valid with the merged axis values.
    if (domain[0] != null && domain[1] != null) {
        if (domain[0] > domain[1]) {
            return forcedDomain;
        }
    }
    return domain;
}
/**
 * Combine the forced domain with the actual domain if one of the values was set.
 * The forcedDomain is in 1st priority. Extends the domain if the any reference point requires it.
 */
function combineDomain(forcedDomain, domain, ensureDomain) {
    let combinedDomain = domain ? [domain[0], domain[1]] : [];
    if (ensureDomain) {
        if (combinedDomain[0] == null || ensureDomain.min < combinedDomain[0])
            combinedDomain[0] = ensureDomain.min;
        if (combinedDomain[1] == null || ensureDomain.max > combinedDomain[1])
            combinedDomain[1] = ensureDomain.max;
    }
    const domainBeforeForced = [combinedDomain[0], combinedDomain[1]];
    if (forcedDomain && forcedDomain.length === 2) {
        if (forcedDomain[0] != null) {
            combinedDomain[0] = forcedDomain[0];
        }
        if (forcedDomain[1] != null) {
            combinedDomain[1] = forcedDomain[1];
        }
        if (combinedDomain[0] > combinedDomain[1]) {
            combinedDomain = domainBeforeForced; // this is invalid, so take the original domain considering the values and the reference line
        }
    }
    return combinedDomain;
}
function createAxisLabel(properties, label, unitType, y2 = false) {
    const propertyName = y2 ? "secAxisStyle" : "axisStyle";
    if (!properties || !properties[propertyName]) {
        return label;
    }
    let modifiedLabel;
    if (properties[propertyName] === _axisStyle__WEBPACK_IMPORTED_MODULE_13__.showBoth) {
        modifiedLabel = label + " (" + unitType + ")";
    }
    else if (properties[propertyName] === _axisStyle__WEBPACK_IMPORTED_MODULE_13__.showUnitOnly) {
        modifiedLabel = unitType;
    }
    else {
        modifiedLabel = label;
    }
    return modifiedLabel;
}
function scaleShouldClamp(combinedDomain, domain) {
    if (!combinedDomain || !domain || combinedDomain.length < 2 || domain.length < 2) {
        return false;
    }
    // when the start or end is different, clamp it
    return combinedDomain[0] !== domain[0] || combinedDomain[1] !== domain[1];
}
function normalizeNonFiniteNumber(value) {
    if (isNaN(value)) {
        return null;
    }
    else if (value === Number.POSITIVE_INFINITY) {
        return Number.MAX_VALUE;
    }
    else if (value === Number.NEGATIVE_INFINITY) {
        return -Number.MAX_VALUE;
    }
    return value;
}
/**
 * Indicates whether the number is power of 10.
 */
function powerOfTen(d) {
    const value = Math.abs(d);
    // formula log2(Y)/log2(10) = log10(Y)
    // because double issues this won't return exact value
    // we need to ceil it to nearest number.
    let log10 = Math.log(value) / Math.LN10;
    log10 = Math.ceil(log10 - 1e-12);
    return value / Math.pow(10, log10) === 1;
}
function arrayIsEmpty(array) {
    return !(array && array.length);
}
//# sourceMappingURL=axis.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisInterfaces.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisInterfaces.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AxisOrientation": () => (/* binding */ AxisOrientation)
/* harmony export */ });
var AxisOrientation;
(function (AxisOrientation) {
    // Names of these enums match the values passed into axis.orient([orientation])
    AxisOrientation[AxisOrientation["top"] = 0] = "top";
    AxisOrientation[AxisOrientation["bottom"] = 1] = "bottom";
    AxisOrientation[AxisOrientation["left"] = 2] = "left";
    AxisOrientation[AxisOrientation["right"] = 3] = "right";
})(AxisOrientation || (AxisOrientation = {}));
//# sourceMappingURL=axisInterfaces.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisScale.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisScale.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linear": () => (/* binding */ linear),
/* harmony export */   "log": () => (/* binding */ log)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
const linear = "linear";
const log = "log";
//# sourceMappingURL=axisScale.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisStyle.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/axis/axisStyle.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "showBoth": () => (/* binding */ showBoth),
/* harmony export */   "showTitleOnly": () => (/* binding */ showTitleOnly),
/* harmony export */   "showUnitOnly": () => (/* binding */ showUnitOnly)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
const showBoth = "showBoth";
const showTitleOnly = "showTitleOnly";
const showUnitOnly = "showUnitOnly";
//# sourceMappingURL=axisStyle.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/axis/labelLayoutStrategy.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/axis/labelLayoutStrategy.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefaultRotation": () => (/* binding */ DefaultRotation),
/* harmony export */   "DefaultRotationWithScrollbar": () => (/* binding */ DefaultRotationWithScrollbar),
/* harmony export */   "DefaultRotationWithScrollbarTickSizeZero": () => (/* binding */ DefaultRotationWithScrollbarTickSizeZero),
/* harmony export */   "clip": () => (/* binding */ clip),
/* harmony export */   "rotate": () => (/* binding */ rotate),
/* harmony export */   "willLabelsFit": () => (/* binding */ willLabelsFit),
/* harmony export */   "willLabelsWordBreak": () => (/* binding */ willLabelsWordBreak),
/* harmony export */   "wordBreak": () => (/* binding */ wordBreak)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");


const LeftPadding = 10;
function willLabelsFit(axisProperties, availableWidth, textMeasurer, properties) {
    const labels = axisProperties.values;
    if (labels.length === 0)
        return false;
    const labelMaxWidth = axisProperties.xLabelMaxWidth !== undefined
        ? axisProperties.xLabelMaxWidth
        : availableWidth / labels.length;
    return !labels.some(d => {
        properties.text = d;
        return textMeasurer(properties) > labelMaxWidth;
    });
}
function willLabelsWordBreak(axisProperties, margin, availableWidth, textWidthMeasurer, textHeightMeasurer, textTruncator, properties) {
    const labels = axisProperties.values;
    const labelMaxWidth = axisProperties.xLabelMaxWidth !== undefined
        ? axisProperties.xLabelMaxWidth
        : availableWidth / labels.length;
    const maxRotatedLength = margin.bottom / DefaultRotation.sine;
    const height = textHeightMeasurer(properties);
    const maxNumLines = Math.max(1, Math.floor(margin.bottom / height));
    if (labels.length === 0)
        return false;
    // If no break character and exceeds max width, word breaking will not work, return false
    const mustRotate = labels.some(label => {
        // Detect must rotate and return immediately
        properties.text = label;
        return !powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.wordBreaker.hasBreakers(label) && textWidthMeasurer(properties) > labelMaxWidth;
    });
    if (mustRotate) {
        return false;
    }
    const moreWordBreakChars = labels.filter((label, index) => {
        // ...otherwise compare rotation versus word breaking
        const allowedLengthProjectedOnXAxis = 
        // Left margin is the width of Y axis.
        margin.left
            // There could be a padding before the first category.
            + axisProperties.outerPadding
            // Align the rotated text's top right corner to the middle of the corresponding category first.
            + axisProperties.categoryThickness * (index + 0.5)
            // Subtracting the left padding space from the allowed length
            - LeftPadding;
        const allowedLength = allowedLengthProjectedOnXAxis / DefaultRotation.cosine;
        const rotatedLength = Math.min(allowedLength, maxRotatedLength);
        // Which shows more characters? Rotated or maxNumLines truncated to labelMaxWidth?
        const wordBreakChars = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.wordBreaker.splitByWidth(label, properties, textWidthMeasurer, labelMaxWidth, maxNumLines, textTruncator).join(" ");
        properties.text = label;
        const rotateChars = textTruncator(properties, rotatedLength);
        // prefer word break (>=) as it takes up less plot area
        return powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.textUtil.removeEllipses(wordBreakChars).length >= powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.textUtil.removeEllipses(rotateChars).length;
    });
    // prefer word break (>=) as it takes up less plot area
    return moreWordBreakChars.length >= Math.floor(labels.length / 2);
}
const DefaultRotation = {
    sine: Math.sin(Math.PI * (35 / 180)),
    cosine: Math.cos(Math.PI * (35 / 180)),
    tangent: Math.tan(Math.PI * (35 / 180)),
    transform: "rotate(-35)",
    dy: "-0.5em",
};
const DefaultRotationWithScrollbar = {
    sine: Math.sin(Math.PI * (90 / 180)),
    cosine: Math.cos(Math.PI * (90 / 180)),
    tangent: Math.tan(Math.PI * (90 / 180)),
    transform: "rotate(-90)",
    dy: "-0.8em",
};
// NOTE: the above rotations are matched to D3 tickSize(6,0) and do not work with other tick sizes.
// we hide these default ticks anyway (on category axes that require rotation), we should make this work
// with any tick size. For now just hardcode a TickSizeZero structure
const DefaultRotationWithScrollbarTickSizeZero = {
    sine: Math.sin(Math.PI * (90 / 180)),
    cosine: Math.cos(Math.PI * (90 / 180)),
    tangent: Math.tan(Math.PI * (90 / 180)),
    transform: "rotate(-90)",
    dy: "-0.3em",
};
/**
 * Perform rotation and/or truncation of axis tick labels (SVG text) with ellipsis
 */
function rotate(labelSelection, maxBottomMargin, textTruncator, textProperties, needRotate, needEllipsis, axisProperties, margin, scrollbarVisible) {
    let rotatedLength;
    let defaultRotation;
    const tickSize = axisProperties.axis.tickSize();
    if (scrollbarVisible) {
        if (!tickSize) // zero or undefined
            defaultRotation = DefaultRotationWithScrollbarTickSizeZero;
        else
            defaultRotation = DefaultRotationWithScrollbar;
    }
    else {
        defaultRotation = DefaultRotation;
    }
    if (needRotate) {
        rotatedLength = maxBottomMargin / defaultRotation.sine;
    }
    labelSelection.each(function (datum) {
        const axisLabel = (0,d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"])(this);
        let labelText = axisLabel.text();
        textProperties.text = labelText;
        if (needRotate) {
            const textContentIndex = axisProperties.values.indexOf(this.textContent);
            let allowedLengthProjectedOnXAxis = 
            // Left margin is the width of Y axis.
            margin.left
                // There could be a padding before the first category.
                + axisProperties.outerPadding
                // Align the rotated text's top right corner to the middle of the corresponding category first.
                + axisProperties.categoryThickness * (textContentIndex + 0.5);
            // Subtracting the left padding space from the allowed length.
            if (!scrollbarVisible)
                allowedLengthProjectedOnXAxis -= LeftPadding;
            // Truncate if scrollbar is visible or rotatedLength exceeds allowedLength
            const allowedLength = allowedLengthProjectedOnXAxis / defaultRotation.cosine;
            if (scrollbarVisible || needEllipsis || (allowedLength < rotatedLength)) {
                labelText = textTruncator(textProperties, Math.min(allowedLength, rotatedLength));
                axisLabel.text(labelText);
            }
            // NOTE: see note above - rotation only lines up with default d3 tickSize(6,0)
            // TODO don't do these rotations if we already did them
            axisLabel.style("text-anchor", "end")
                .attr("dx", "-0.5em")
                .attr("dy", defaultRotation.dy)
                .attr("transform", defaultRotation.transform);
        }
        else {
            const maxLabelWidth = !arrayIsEmpty(axisProperties.xLabelMaxWidths) ? axisProperties.xLabelMaxWidths[datum] : axisProperties.xLabelMaxWidth;
            const newLabelText = textTruncator(textProperties, maxLabelWidth);
            if (newLabelText !== labelText)
                axisLabel.text(newLabelText);
            // TODO don't do these rotations if we already did them
            axisLabel.style("text-anchor", "middle")
                .attr("dx", "0em")
                .attr("dy", "1em")
                .attr("transform", "rotate(0)");
        }
    });
}
function wordBreak(text, axisProperties, maxHeight) {
    const allowedLength = axisProperties.xLabelMaxWidth;
    text.each(function () {
        const node = (0,d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"])(this);
        // Reset style of text node
        node
            .style("text-anchor", "middle")
            .attr("dx", "0em")
            .attr("dy", "1em")
            .attr("transform", "rotate(0)");
        powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.textMeasurementService.wordBreak(this, allowedLength, maxHeight);
    });
}
function clip(text, availableWidth, svgEllipsis) {
    if (text.size() === 0) {
        return;
    }
    text.each(function () {
        const text = (0,d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"])(this);
        svgEllipsis(text.node(), availableWidth);
    });
}
function arrayIsEmpty(array) {
    return !(array && array.length);
}
//# sourceMappingURL=labelLayoutStrategy.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelArrangeGrid.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelArrangeGrid.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataLabelArrangeGrid)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/shapes/shapes.js");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/prototype.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var _dataLabelUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataLabelUtils */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelUtils.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
// powerbi.extensibility.utils.svg.shapes

// powerbi.extensibility.utils.type

// powerbi.extensibility.utils.formatting


/**
 * Utility class to speed up the conflict detection by collecting the arranged items in the DataLabelsPanel.
 */
class DataLabelArrangeGrid {
    /**
     * Creates new ArrangeGrid.
     * @param size The available size
     */
    constructor(size, elements, layout) {
        this.grid = [];
        if (size.width === 0 || size.height === 0) {
            this.cellSize = size;
            this.rowCount = this.colCount = 0;
        }
        const baseProperties = {
            fontFamily: _dataLabelUtils__WEBPACK_IMPORTED_MODULE_0__.LabelTextProperties.fontFamily,
            fontSize: _dataLabelUtils__WEBPACK_IMPORTED_MODULE_0__.LabelTextProperties.fontSize,
            fontWeight: _dataLabelUtils__WEBPACK_IMPORTED_MODULE_0__.LabelTextProperties.fontWeight,
        };
        // sets the cell size to be twice of the Max with and Max height of the elements
        this.cellSize = { width: 0, height: 0 };
        for (let i = 0, len = elements.length; i < len; i++) {
            const child = elements[i];
            // Fill label field
            child.labeltext = layout.labelText(child);
            const properties = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_1__.inherit(baseProperties);
            properties.text = child.labeltext;
            properties.fontSize = child.data
                ? child.data.labelFontSize
                : child.labelFontSize
                    ? child.labelFontSize
                    : _dataLabelUtils__WEBPACK_IMPORTED_MODULE_0__.LabelTextProperties.fontSize;
            child.size = {
                width: powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_2__.textMeasurementService.measureSvgTextWidth(properties),
                height: powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_2__.textMeasurementService.estimateSvgTextHeight(properties),
            };
            const w = child.size.width * 2, h = child.size.height * 2;
            if (w > this.cellSize.width) {
                this.cellSize.width = w;
            }
            if (h > this.cellSize.height) {
                this.cellSize.height = h;
            }
        }
        if (this.cellSize.width === 0) {
            this.cellSize.width = size.width;
        }
        if (this.cellSize.height === 0) {
            this.cellSize.height = size.height;
        }
        this.colCount = this.getGridRowColCount(this.cellSize.width, size.width, DataLabelArrangeGrid.ARRANGEGRID_MIN_COUNT, DataLabelArrangeGrid.ARRANGEGRID_MAX_COUNT);
        this.rowCount = this.getGridRowColCount(this.cellSize.height, size.height, DataLabelArrangeGrid.ARRANGEGRID_MIN_COUNT, DataLabelArrangeGrid.ARRANGEGRID_MAX_COUNT);
        this.cellSize.width = size.width / this.colCount;
        this.cellSize.height = size.height / this.rowCount;
        const grid = this.grid;
        for (let x = 0; x < this.colCount; x++) {
            grid[x] = [];
            for (let y = 0; y < this.rowCount; y++) {
                grid[x][y] = [];
            }
        }
    }
    /**
     * Register a new label element.
     * @param element The label element to register.
     * @param rect The label element position rectangle.
     */
    add(element, rect) {
        const indexRect = this.getGridIndexRect(rect), grid = this.grid;
        for (let x = indexRect.left; x < indexRect.right; x++) {
            for (let y = indexRect.top; y < indexRect.bottom; y++) {
                grid[x][y].push({ element: element, rect: rect });
            }
        }
    }
    /**
     * Checks for conflict of given rectangle in registered elements.
     * @param rect The rectengle to check.
     * @return True if conflict is detected.
     */
    hasConflict(rect) {
        const indexRect = this.getGridIndexRect(rect), grid = this.grid, isIntersecting = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_3__.isIntersecting;
        for (let x = indexRect.left; x < indexRect.right; x++) {
            for (let y = indexRect.top; y < indexRect.bottom; y++) {
                for (let z = 0; z < grid[x][y].length; z++) {
                    const item = grid[x][y][z];
                    if (isIntersecting(item.rect, rect)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    /**
     * Calculates the number of rows or columns in a grid
     * @param step is the largest label size (width or height)
     * @param length is the grid size (width or height)
     * @param minCount is the minimum allowed size
     * @param maxCount is the maximum allowed size
     * @return the number of grid rows or columns
     */
    getGridRowColCount(step, length, minCount, maxCount) {
        return Math.min(Math.max(Math.ceil(length / step), minCount), maxCount);
    }
    /**
     * Returns the grid index of a given recangle
     * @param rect The rectengle to check.
     * @return grid index as a thickness object.
     */
    getGridIndexRect(rect) {
        const restrict = (n, min, max) => Math.min(Math.max(n, min), max);
        return {
            left: restrict(Math.floor(rect.left / this.cellSize.width), 0, this.colCount),
            top: restrict(Math.floor(rect.top / this.cellSize.height), 0, this.rowCount),
            right: restrict(Math.ceil((rect.left + rect.width) / this.cellSize.width), 0, this.colCount),
            bottom: restrict(Math.ceil((rect.top + rect.height) / this.cellSize.height), 0, this.rowCount)
        };
    }
}
DataLabelArrangeGrid.ARRANGEGRID_MIN_COUNT = 1;
DataLabelArrangeGrid.ARRANGEGRID_MAX_COUNT = 100;
//# sourceMappingURL=dataLabelArrangeGrid.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelInterfaces.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelInterfaces.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ContentPositions": () => (/* binding */ ContentPositions),
/* harmony export */   "OutsidePlacement": () => (/* binding */ OutsidePlacement),
/* harmony export */   "PointLabelPosition": () => (/* binding */ PointLabelPosition),
/* harmony export */   "RectOrientation": () => (/* binding */ RectOrientation)
/* harmony export */ });
/** Defines possible content positions.  */
var ContentPositions;
(function (ContentPositions) {
    /** Content position is not defined. */
    ContentPositions[ContentPositions["None"] = 0] = "None";
    /** Content aligned top left. */
    ContentPositions[ContentPositions["TopLeft"] = 1] = "TopLeft";
    /** Content aligned top center. */
    ContentPositions[ContentPositions["TopCenter"] = 2] = "TopCenter";
    /** Content aligned top right. */
    ContentPositions[ContentPositions["TopRight"] = 4] = "TopRight";
    /** Content aligned middle left. */
    ContentPositions[ContentPositions["MiddleLeft"] = 8] = "MiddleLeft";
    /** Content aligned middle center. */
    ContentPositions[ContentPositions["MiddleCenter"] = 16] = "MiddleCenter";
    /** Content aligned middle right. */
    ContentPositions[ContentPositions["MiddleRight"] = 32] = "MiddleRight";
    /** Content aligned bottom left. */
    ContentPositions[ContentPositions["BottomLeft"] = 64] = "BottomLeft";
    /** Content aligned bottom center. */
    ContentPositions[ContentPositions["BottomCenter"] = 128] = "BottomCenter";
    /** Content aligned bottom right. */
    ContentPositions[ContentPositions["BottomRight"] = 256] = "BottomRight";
    /** Content is placed inside the bounding rectangle in the center. */
    ContentPositions[ContentPositions["InsideCenter"] = 512] = "InsideCenter";
    /** Content is placed inside the bounding rectangle at the base. */
    ContentPositions[ContentPositions["InsideBase"] = 1024] = "InsideBase";
    /** Content is placed inside the bounding rectangle at the end. */
    ContentPositions[ContentPositions["InsideEnd"] = 2048] = "InsideEnd";
    /** Content is placed outside the bounding rectangle at the base. */
    ContentPositions[ContentPositions["OutsideBase"] = 4096] = "OutsideBase";
    /** Content is placed outside the bounding rectangle at the end. */
    ContentPositions[ContentPositions["OutsideEnd"] = 8192] = "OutsideEnd";
    /** Content supports all possible positions. */
    ContentPositions[ContentPositions["All"] = 16383] = "All";
})(ContentPositions || (ContentPositions = {}));
/**
 * Rectangle orientation. Rectangle orientation is used to define vertical or horizontal orientation
 * and starting/ending side of the rectangle.
 */
var RectOrientation;
(function (RectOrientation) {
    /** Rectangle with no specific orientation. */
    RectOrientation[RectOrientation["None"] = 0] = "None";
    /** Vertical rectangle with base at the bottom. */
    RectOrientation[RectOrientation["VerticalBottomTop"] = 1] = "VerticalBottomTop";
    /** Vertical rectangle with base at the top. */
    RectOrientation[RectOrientation["VerticalTopBottom"] = 2] = "VerticalTopBottom";
    /** Horizontal rectangle with base at the left. */
    RectOrientation[RectOrientation["HorizontalLeftRight"] = 3] = "HorizontalLeftRight";
    /** Horizontal rectangle with base at the right. */
    RectOrientation[RectOrientation["HorizontalRightLeft"] = 4] = "HorizontalRightLeft";
})(RectOrientation || (RectOrientation = {}));
/**
 * Defines if panel elements are allowed to be positioned
 * outside of the panel boundaries.
 */
var OutsidePlacement;
(function (OutsidePlacement) {
    /** Elements can be positioned outside of the panel. */
    OutsidePlacement[OutsidePlacement["Allowed"] = 0] = "Allowed";
    /** Elements can not be positioned outside of the panel. */
    OutsidePlacement[OutsidePlacement["Disallowed"] = 1] = "Disallowed";
    /** Elements can be partially outside of the panel. */
    OutsidePlacement[OutsidePlacement["Partial"] = 2] = "Partial";
})(OutsidePlacement || (OutsidePlacement = {}));
var PointLabelPosition;
(function (PointLabelPosition) {
    PointLabelPosition[PointLabelPosition["Above"] = 0] = "Above";
    PointLabelPosition[PointLabelPosition["Below"] = 1] = "Below";
})(PointLabelPosition || (PointLabelPosition = {}));
//# sourceMappingURL=dataLabelInterfaces.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelManager.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelManager.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataLabelManager)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/shapes/shapes.js");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/* harmony import */ var _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataLabelInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelInterfaces.js");
/* harmony import */ var _locationConverter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locationConverter */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/locationConverter.js");
/* harmony import */ var _dataLabelArrangeGrid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataLabelArrangeGrid */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelArrangeGrid.js");
// powerbi.extensibility.utils.svg

// powerbi.extensibility.utils.formatting




/**
* Arranges label elements using the anchor point or rectangle. Collisions
* between elements can be automatically detected and as a result elements
* can be repositioned or get hidden.
*/
class DataLabelManager {
    constructor() {
        this.movingStep = 3;
        this.hideOverlapped = true;
        // The global settings for all labels.
        // They can be oweridden by each label we add into the panel, because contains same properties.
        this.defaultDataLabelSettings = {
            anchorMargin: DataLabelManager.DefaultAnchorMargin,
            anchorRectOrientation: _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.None,
            contentPosition: _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.BottomCenter,
            outsidePlacement: _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.OutsidePlacement.Disallowed,
            maximumMovingDistance: DataLabelManager.DefaultMaximumMovingDistance,
            minimumMovingDistance: DataLabelManager.DefaultMinimumMovingDistance,
            validContentPositions: _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.BottomCenter,
            opacity: 1
        };
    }
    get defaultSettings() {
        return this.defaultDataLabelSettings;
    }
    /** Arranges the lables position and visibility*/
    hideCollidedLabels(viewport, data, layout, addTransform = false, hideCollidedLabels = true) {
        // Split size into a grid
        const arrangeGrid = new _dataLabelArrangeGrid__WEBPACK_IMPORTED_MODULE_1__["default"](viewport, data, layout);
        const filteredData = [];
        const transform = { x: 0, y: 0 };
        if (addTransform) {
            transform.x = viewport.width / 2;
            transform.y = viewport.height / 2;
        }
        for (let i = 0, len = data.length; i < len; i++) {
            // Filter unwanted data points
            if (!layout.filter(data[i])) {
                continue;
            }
            // Set default values where properties values are undefined
            const info = this.getLabelInfo(data[i]);
            info.anchorPoint = {
                x: layout.labelLayout.x(data[i]) + transform.x,
                y: layout.labelLayout.y(data[i]) + transform.y,
            };
            const position = this.calculateContentPosition(info, info.contentPosition, data[i].size, info.anchorMargin);
            if (DataLabelManager.isValid(position) && (!this.hasCollisions(arrangeGrid, info, position, viewport) || !hideCollidedLabels)) {
                data[i].labelX = position.left - transform.x;
                data[i].labelY = position.top - transform.y;
                // Keep track of all panel elements positions.
                arrangeGrid.add(info, position);
                // Save all data points to display
                filteredData.push(data[i]);
            }
        }
        return filteredData;
    }
    /**
     * Merges the label element info with the panel element info and returns correct label info.
     * @param source The label info.
     */
    getLabelInfo(source) {
        const settings = this.defaultDataLabelSettings;
        source.anchorMargin = source.anchorMargin !== undefined
            ? source.anchorMargin
            : settings.anchorMargin;
        source.anchorRectOrientation = source.anchorRectOrientation !== undefined
            ? source.anchorRectOrientation
            : settings.anchorRectOrientation;
        source.contentPosition = source.contentPosition !== undefined
            ? source.contentPosition
            : settings.contentPosition;
        source.maximumMovingDistance = source.maximumMovingDistance !== undefined
            ? source.maximumMovingDistance
            : settings.maximumMovingDistance;
        source.minimumMovingDistance = source.minimumMovingDistance !== undefined
            ? source.minimumMovingDistance
            : settings.minimumMovingDistance;
        source.outsidePlacement = source.outsidePlacement !== undefined
            ? source.outsidePlacement
            : settings.outsidePlacement;
        source.validContentPositions = source.validContentPositions !== undefined
            ? source.validContentPositions
            : settings.validContentPositions;
        source.opacity = source.opacity !== undefined
            ? source.opacity
            : settings.opacity;
        source.maximumMovingDistance += source.anchorMargin;
        return source;
    }
    /**
    * (Private) Calculates element position using anchor point..
    */
    calculateContentPositionFromPoint(anchorPoint, contentPosition, contentSize, offset) {
        const position = { x: 0, y: 0 };
        if (anchorPoint) {
            if (anchorPoint.x !== undefined && isFinite(anchorPoint.x)) {
                position.x = anchorPoint.x;
                switch (contentPosition) {
                    // D3 positions the label in the middle by default.
                    // The algorithem asumed the label was positioned in right so this is why we add/substract half width
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopLeft:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleLeft:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.BottomLeft:
                        position.x -= contentSize.width / 2.0;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopRight:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleRight:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.BottomRight:
                        position.x += contentSize.width / 2.0;
                        break;
                }
            }
            if (anchorPoint.y !== undefined && isFinite(anchorPoint.y)) {
                position.y = anchorPoint.y;
                switch (contentPosition) {
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleLeft:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleCenter:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleRight:
                        position.y -= contentSize.height / 2.0;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopRight:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopLeft:
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopCenter:
                        position.y -= contentSize.height;
                        break;
                }
            }
            if (offset !== undefined && isFinite(offset)) {
                switch (contentPosition) {
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopLeft:
                        position.x -= offset;
                        position.y -= offset;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleLeft:
                        position.x -= offset;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.BottomLeft:
                        position.x -= offset;
                        position.y += offset;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopCenter:
                        position.y -= offset;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleCenter:
                        // Offset is not applied
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.BottomCenter:
                        position.y += offset;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.TopRight:
                        position.x += offset;
                        position.y -= offset;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.MiddleRight:
                        position.x += offset;
                        break;
                    case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.BottomRight:
                        position.x += offset;
                        position.y += offset;
                        break;
                }
            }
        }
        return {
            left: position.x,
            top: position.y,
            width: contentSize.width,
            height: contentSize.height
        };
    }
    /** (Private) Calculates element position using anchor rect. */
    calculateContentPositionFromRect(anchorRect, anchorRectOrientation, contentPosition, contentSize, offset) {
        switch (contentPosition) {
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.InsideCenter:
                return this.handleInsideCenterPosition(anchorRectOrientation, contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.InsideEnd:
                return this.handleInsideEndPosition(anchorRectOrientation, contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.InsideBase:
                return this.handleInsideBasePosition(anchorRectOrientation, contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.OutsideEnd:
                return this.handleOutsideEndPosition(anchorRectOrientation, contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.OutsideBase:
                return this.handleOutsideBasePosition(anchorRectOrientation, contentSize, anchorRect, offset);
        }
        return { left: 0, top: 0, width: -1, height: -1 };
    }
    /** (Private) Calculates element inside center position using anchor rect. */
    handleInsideCenterPosition(anchorRectOrientation, contentSize, anchorRect, offset) {
        switch (anchorRectOrientation) {
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalBottomTop:
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalTopBottom:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.middleVertical(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalLeftRight:
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalRightLeft:
            default:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.middleHorizontal(contentSize, anchorRect, offset);
        }
    }
    /** (Private) Calculates element inside end position using anchor rect. */
    handleInsideEndPosition(anchorRectOrientation, contentSize, anchorRect, offset) {
        switch (anchorRectOrientation) {
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalBottomTop:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.topInside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalTopBottom:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.bottomInside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalRightLeft:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.leftInside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalLeftRight:
            default:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.rightInside(contentSize, anchorRect, offset);
        }
    }
    /** (Private) Calculates element inside base position using anchor rect. */
    handleInsideBasePosition(anchorRectOrientation, contentSize, anchorRect, offset) {
        switch (anchorRectOrientation) {
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalBottomTop:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.bottomInside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalTopBottom:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.topInside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalRightLeft:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.rightInside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalLeftRight:
            default:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.leftInside(contentSize, anchorRect, offset);
        }
    }
    /** (Private) Calculates element outside end position using anchor rect. */
    handleOutsideEndPosition(anchorRectOrientation, contentSize, anchorRect, offset) {
        switch (anchorRectOrientation) {
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalBottomTop:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.topOutside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalTopBottom:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.bottomOutside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalRightLeft:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.leftOutside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalLeftRight:
            default:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.rightOutside(contentSize, anchorRect, offset);
        }
    }
    /** (Private) Calculates element outside base position using anchor rect. */
    handleOutsideBasePosition(anchorRectOrientation, contentSize, anchorRect, offset) {
        switch (anchorRectOrientation) {
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalBottomTop:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.bottomOutside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.VerticalTopBottom:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.topOutside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalRightLeft:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.rightOutside(contentSize, anchorRect, offset);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.RectOrientation.HorizontalLeftRight:
            default:
                return _locationConverter__WEBPACK_IMPORTED_MODULE_2__.leftOutside(contentSize, anchorRect, offset);
        }
    }
    /**  (Private) Calculates element position. */
    calculateContentPosition(anchoredElementInfo, contentPosition, contentSize, offset) {
        if (contentPosition !== _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.InsideEnd &&
            contentPosition !== _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.InsideCenter &&
            contentPosition !== _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.InsideBase &&
            contentPosition !== _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.OutsideBase &&
            contentPosition !== _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.ContentPositions.OutsideEnd) {
            // Determine position using anchor point.
            return this.calculateContentPositionFromPoint(anchoredElementInfo.anchorPoint, contentPosition, contentSize, offset);
        }
        // Determine position using anchor rectangle.
        return this.calculateContentPositionFromRect(anchoredElementInfo.anchorRect, anchoredElementInfo.anchorRectOrientation, contentPosition, contentSize, offset);
    }
    /** (Private) Check for collisions. */
    hasCollisions(arrangeGrid, info, position, size) {
        if (arrangeGrid.hasConflict(position)) {
            return true;
        }
        // Since we divide the height by 2 we add it back to the top of the view port so labels won't be cut off
        let intersection = { left: 0, top: position.height / 2, width: size.width, height: size.height };
        intersection = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_3__.inflate(intersection, { left: DataLabelManager.InflateAmount, top: 0, right: DataLabelManager.InflateAmount, bottom: 0 });
        intersection = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_3__.intersect(intersection, position);
        if (powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_3__.isEmpty(intersection)) {
            // Empty rectangle means there is a collision
            return true;
        }
        switch (info.outsidePlacement) {
            // D3 positions the label in the middle by default.
            // The algorithem asumed the label was positioned in right so this is why we devide by 2 or 4
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.OutsidePlacement.Disallowed:
                return powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_4__.lessWithPrecision(intersection.width, position.width) ||
                    powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_4__.lessWithPrecision(intersection.height, position.height / 2);
            case _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_0__.OutsidePlacement.Partial:
                return powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_4__.lessWithPrecision(intersection.width, position.width / 2) ||
                    powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_4__.lessWithPrecision(intersection.height, position.height / 4);
        }
        return false;
    }
    static isValid(rect) {
        return !powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_3__.isEmpty(rect) && (rect.width > 0 && rect.height > 0);
    }
}
DataLabelManager.DefaultAnchorMargin = 0; // For future use
DataLabelManager.DefaultMaximumMovingDistance = 12;
DataLabelManager.DefaultMinimumMovingDistance = 3;
DataLabelManager.InflateAmount = 5;
//# sourceMappingURL=dataLabelManager.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelUtils.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelUtils.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefaultDy": () => (/* binding */ DefaultDy),
/* harmony export */   "DefaultFontSizeInPt": () => (/* binding */ DefaultFontSizeInPt),
/* harmony export */   "LabelTextProperties": () => (/* binding */ LabelTextProperties),
/* harmony export */   "StandardFontFamily": () => (/* binding */ StandardFontFamily),
/* harmony export */   "cleanDataLabels": () => (/* binding */ cleanDataLabels),
/* harmony export */   "createColumnFormatterCacheManager": () => (/* binding */ createColumnFormatterCacheManager),
/* harmony export */   "defaultInsideLabelColor": () => (/* binding */ defaultInsideLabelColor),
/* harmony export */   "defaultLabelColor": () => (/* binding */ defaultLabelColor),
/* harmony export */   "defaultLabelDensity": () => (/* binding */ defaultLabelDensity),
/* harmony export */   "defaultLabelPrecision": () => (/* binding */ defaultLabelPrecision),
/* harmony export */   "drawDefaultLabelsForDataPointChart": () => (/* binding */ drawDefaultLabelsForDataPointChart),
/* harmony export */   "enumerateCategoryLabels": () => (/* binding */ enumerateCategoryLabels),
/* harmony export */   "enumerateDataLabels": () => (/* binding */ enumerateDataLabels),
/* harmony export */   "getDefaultColumnLabelSettings": () => (/* binding */ getDefaultColumnLabelSettings),
/* harmony export */   "getDefaultLabelSettings": () => (/* binding */ getDefaultLabelSettings),
/* harmony export */   "getDefaultPointLabelSettings": () => (/* binding */ getDefaultPointLabelSettings),
/* harmony export */   "getLabelFormattedText": () => (/* binding */ getLabelFormattedText),
/* harmony export */   "getLabelPrecision": () => (/* binding */ getLabelPrecision),
/* harmony export */   "getOptionsForLabelFormatter": () => (/* binding */ getOptionsForLabelFormatter),
/* harmony export */   "hundredPercentFormat": () => (/* binding */ hundredPercentFormat),
/* harmony export */   "isTextHeightOverflows": () => (/* binding */ isTextHeightOverflows),
/* harmony export */   "isTextWidthOverflows": () => (/* binding */ isTextWidthOverflows),
/* harmony export */   "maxLabelWidth": () => (/* binding */ maxLabelWidth),
/* harmony export */   "setHighlightedLabelsOpacity": () => (/* binding */ setHighlightedLabelsOpacity),
/* harmony export */   "updateLabelSettingsFromLabelsObject": () => (/* binding */ updateLabelSettingsFromLabelsObject)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/cssConstants.js");
/* harmony import */ var _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dataLabelInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelInterfaces.js");
/* harmony import */ var _dataLabelManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dataLabelManager */ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/dataLabelManager.js");
// powerbi.extensibility.utils.type

// powerbi.extensibility.utils.formatting

var font = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.font;
var numberFormat = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.formattingService.numberFormat;
var formattingService = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.formattingService.formattingService;
var textMeasurementService = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.textMeasurementService;
var valueFormatter = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.valueFormatter;
var DisplayUnitSystemType = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__.displayUnitSystemType.DisplayUnitSystemType;
// powerbi.extensibility.utils.svg

var createClassAndSelector = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_1__.createClassAndSelector;


const maxLabelWidth = 50;
const defaultLabelDensity = "50";
const DefaultDy = "-0.15em";
const DefaultFontSizeInPt = 9;
const StandardFontFamily = font.Family.regular.css;
const LabelTextProperties = {
    fontFamily: font.Family.regularSecondary.css,
    fontSize: powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_2__.fromPoint(DefaultFontSizeInPt),
    fontWeight: "normal",
};
const defaultLabelColor = "#777777";
const defaultInsideLabelColor = "#ffffff";
const hundredPercentFormat = "0.00 %;-0.00 %;0.00 %";
const defaultLabelPrecision = undefined;
const defaultCountLabelPrecision = 0;
const labelGraphicsContextClass = createClassAndSelector("labels");
const linesGraphicsContextClass = createClassAndSelector("lines");
const labelsClass = createClassAndSelector("data-labels");
const lineClass = createClassAndSelector("line-label");
const DimmedOpacity = 0.4;
const DefaultOpacity = 1.0;
function getFillOpacity(selected, highlight, hasSelection, hasPartialHighlights) {
    if ((hasPartialHighlights && !highlight) || (hasSelection && !selected)) {
        return DimmedOpacity;
    }
    return DefaultOpacity;
}
function updateLabelSettingsFromLabelsObject(labelsObj, labelSettings) {
    if (labelsObj) {
        if (labelsObj.show !== undefined) {
            labelSettings.show = labelsObj.show;
        }
        if (labelsObj.showSeries !== undefined) {
            labelSettings.show = labelsObj.showSeries;
        }
        if (labelsObj.color !== undefined) {
            labelSettings.labelColor = labelsObj.color.solid.color;
        }
        if (labelsObj.labelDisplayUnits !== undefined) {
            labelSettings.displayUnits = labelsObj.labelDisplayUnits;
        }
        if (labelsObj.labelPrecision !== undefined) {
            labelSettings.precision = (labelsObj.labelPrecision >= 0)
                ? labelsObj.labelPrecision
                : defaultLabelPrecision;
        }
        if (labelsObj.fontSize !== undefined) {
            labelSettings.fontSize = labelsObj.fontSize;
        }
        if (labelsObj.showAll !== undefined) {
            labelSettings.showLabelPerSeries = labelsObj.showAll;
        }
        if (labelsObj.labelStyle !== undefined) {
            labelSettings.labelStyle = labelsObj.labelStyle;
        }
        if (labelsObj.labelPosition) {
            labelSettings.position = labelsObj.labelPosition;
        }
    }
}
function getDefaultLabelSettings(show = false, labelColor, fontSize) {
    return {
        show: show,
        position: _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_3__.PointLabelPosition.Above,
        displayUnits: 0,
        precision: defaultLabelPrecision,
        labelColor: labelColor || defaultLabelColor,
        fontSize: fontSize || DefaultFontSizeInPt,
    };
}
/* eslint-disable-next-line @typescript-eslint/no-unused-vars */
function getDefaultColumnLabelSettings(isLabelPositionInside) {
    const labelSettings = getDefaultLabelSettings(false, undefined);
    labelSettings.position = null;
    labelSettings.labelColor = undefined;
    return labelSettings;
}
function getDefaultPointLabelSettings() {
    return {
        show: false,
        position: _dataLabelInterfaces__WEBPACK_IMPORTED_MODULE_3__.PointLabelPosition.Above,
        displayUnits: 0,
        precision: defaultLabelPrecision,
        labelColor: defaultLabelColor,
        fontSize: DefaultFontSizeInPt,
    };
}
function getLabelPrecision(precision, format) {
    if (precision !== defaultLabelPrecision) {
        return precision;
    }
    if (format === "g" || format === "G") {
        return;
    }
    if (format) {
        // Calculate precision from positive format by default
        const positiveFormat = numberFormat.getComponents(format).positive, formatMetadata = numberFormat.getCustomFormatMetadata(positiveFormat, true /*calculatePrecision*/);
        if (formatMetadata.hasDots) {
            return formatMetadata.precision;
        }
    }
    // For count fields we do not want a precision by default
    return defaultCountLabelPrecision;
}
function drawDefaultLabelsForDataPointChart(data, context, layout, viewport, isAnimator = false, animationDuration, hasSelection, hideCollidedLabels = true) {
    // Hide and reposition labels that overlap
    const dataLabelManager = new _dataLabelManager__WEBPACK_IMPORTED_MODULE_4__["default"]();
    const filteredData = dataLabelManager.hideCollidedLabels(viewport, data, layout, false, hideCollidedLabels);
    const hasAnimation = isAnimator && !!animationDuration;
    let selectedLabels = selectLabels(filteredData, context, false, hasAnimation, animationDuration);
    if (!selectedLabels) {
        return;
    }
    if (hasAnimation) {
        selectedLabels
            .text((d) => d.labeltext)
            .transition("")
            .duration(animationDuration)
            // .style(layout.style as any)
            .style("opacity", (hasSelection ? (d) => getFillOpacity(d.selected, false, hasSelection, false) : 1))
            .attr("x", (d) => d.labelX)
            .attr("y", (d) => d.labelY);
        layout && layout.style && Object.keys(layout.style).forEach(style => selectedLabels = selectedLabels.style(style, layout.style[style]));
    }
    else {
        selectedLabels
            .attr("x", (d) => d.labelX)
            .attr("y", (d) => d.labelY)
            .text((d) => d.labeltext)
            .style(layout.style);
        layout && layout.style && Object.keys(layout.style).forEach(style => selectedLabels = selectedLabels.style(style, layout.style[style]));
    }
    return selectedLabels;
}
function selectLabels(filteredData, context, isDonut = false, forAnimation = false, animationDuration) {
    // Check for a case where resizing leaves no labels - then we need to remove the labels "g"
    if (filteredData.length === 0) {
        cleanDataLabels(context, true);
        return null;
    }
    if (context.select(labelGraphicsContextClass.selectorName).empty()) {
        context.append("g").classed(labelGraphicsContextClass.className, true);
    }
    // line chart ViewModel has a special "key" property for point identification since the "identity" field is set to the series identity
    const hasKey = filteredData[0].key != null;
    const hasDataPointIdentity = filteredData[0].identity != null;
    const getIdentifier = hasKey ?
        (d) => d.key
        : hasDataPointIdentity ?
            (d) => d.identity.getKey()
            : undefined;
    const labels = isDonut ?
        context.select(labelGraphicsContextClass.selectorName).selectAll(labelsClass.selectorName).data(filteredData, (d) => d.data.identity.getKey())
        : getIdentifier != null ?
            context.select(labelGraphicsContextClass.selectorName).selectAll(labelsClass.selectorName).data(filteredData, getIdentifier)
            : context.select(labelGraphicsContextClass.selectorName).selectAll(labelsClass.selectorName).data(filteredData);
    if (forAnimation) {
        labels
            .exit()
            .transition()
            .duration(animationDuration)
            .style("opacity", 0) // fade out labels that are removed
            .remove();
    }
    else {
        labels.exit().remove();
    }
    const allLabels = labels.enter()
        .append("text")
        .classed(labelsClass.className, true)
        .merge(labels);
    if (forAnimation) {
        allLabels.style("opacity", 0);
    }
    return allLabels;
}
function cleanDataLabels(context, removeLines = false) {
    const empty = [], labels = context.selectAll(labelsClass.selectorName).data(empty);
    labels
        .exit()
        .remove();
    context
        .selectAll(labelGraphicsContextClass.selectorName)
        .remove();
    if (removeLines) {
        const lines = context
            .selectAll(lineClass.selectorName)
            .data(empty);
        lines
            .exit()
            .remove();
        context
            .selectAll(linesGraphicsContextClass.selectorName)
            .remove();
    }
}
function setHighlightedLabelsOpacity(context, hasSelection, hasHighlights) {
    context
        .selectAll(labelsClass.selectorName)
        .style("fill-opacity", (d) => {
        const labelOpacity = getFillOpacity(d.selected, d.highlight, !d.highlight && hasSelection, !d.selected && hasHighlights) < 1 ? 0 : 1;
        return labelOpacity;
    });
}
function getLabelFormattedText(options) {
    const properties = {
        text: options.formatter
            ? options.formatter.format(options.label)
            : formattingService.formatValue(options.label, options.format),
        fontFamily: LabelTextProperties.fontFamily,
        fontSize: powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_2__.fromPoint(options.fontSize),
        fontWeight: LabelTextProperties.fontWeight,
    };
    return textMeasurementService.getTailoredTextOrDefault(properties, options.maxWidth
        ? options.maxWidth
        : maxLabelWidth);
}
function enumerateDataLabels(options) {
    if (!options.dataLabelsSettings) {
        return;
    }
    const instance = {
        objectName: "labels",
        selector: options.selector,
        properties: {},
    };
    if (options.show && options.selector) {
        instance.properties["showSeries"] = options.dataLabelsSettings.show;
    }
    else if (options.show) {
        instance.properties["show"] = options.dataLabelsSettings.show;
    }
    instance.properties["color"] = options.dataLabelsSettings.labelColor || defaultLabelColor;
    if (options.displayUnits) {
        instance.properties["labelDisplayUnits"] = options.dataLabelsSettings.displayUnits;
    }
    if (options.precision) {
        const precision = options.dataLabelsSettings.precision;
        instance.properties["labelPrecision"] = precision === defaultLabelPrecision ? null : precision;
    }
    if (options.position) {
        instance.properties["labelPosition"] = options.dataLabelsSettings.position;
        if (options.positionObject) {
            instance.validValues = { "labelPosition": options.positionObject };
        }
    }
    if (options.labelStyle) {
        instance.properties["labelStyle"] = options.dataLabelsSettings.labelStyle;
    }
    if (options.fontSize) {
        instance.properties["fontSize"] = options.dataLabelsSettings.fontSize;
    }
    if (options.labelDensity) {
        const lineChartSettings = options.dataLabelsSettings;
        if (lineChartSettings) {
            instance.properties["labelDensity"] = lineChartSettings.labelDensity;
        }
    }
    // Keep show all as the last property of the instance.
    if (options.showAll) {
        instance.properties["showAll"] = options.dataLabelsSettings.showLabelPerSeries;
    }
    options.instances.push(instance);
    return instance;
}
function enumerateCategoryLabels(enumeration, dataLabelsSettings, withFill, isShowCategory = false, fontSize) {
    const labelSettings = (dataLabelsSettings)
        ? dataLabelsSettings
        : getDefaultPointLabelSettings();
    const instance = {
        objectName: "categoryLabels",
        selector: null,
        properties: {
            show: isShowCategory
                ? labelSettings.showCategory
                : labelSettings.show,
            fontSize: dataLabelsSettings ? dataLabelsSettings.fontSize : DefaultFontSizeInPt,
        },
    };
    if (withFill) {
        instance.properties["color"] = labelSettings.categoryLabelColor
            ? labelSettings.categoryLabelColor
            : labelSettings.labelColor;
    }
    if (fontSize) {
        instance.properties["fontSize"] = fontSize;
    }
    enumeration.instances.push(instance);
}
function createColumnFormatterCacheManager() {
    return {
        cache: { defaultFormatter: null },
        getOrCreate(formatString, labelSetting, value2) {
            if (formatString) {
                const cacheKeyObject = {
                    formatString: formatString,
                    displayUnits: labelSetting.displayUnits,
                    precision: getLabelPrecision(labelSetting.precision, formatString),
                    value2: value2
                };
                const cacheKey = JSON.stringify(cacheKeyObject);
                if (!this.cache[cacheKey]) {
                    this.cache[cacheKey] = valueFormatter.create(getOptionsForLabelFormatter(labelSetting, formatString, value2, cacheKeyObject.precision));
                }
                return this.cache[cacheKey];
            }
            if (!this.cache.defaultFormatter) {
                this.cache.defaultFormatter = valueFormatter.create(getOptionsForLabelFormatter(labelSetting, formatString, value2, labelSetting.precision));
            }
            return this.cache.defaultFormatter;
        }
    };
}
function getOptionsForLabelFormatter(labelSetting, formatString, value2, precision) {
    return {
        displayUnitSystemType: DisplayUnitSystemType.DataLabels,
        format: formatString,
        precision: precision,
        value: labelSetting.displayUnits,
        value2: value2,
        allowFormatBeautification: true,
    };
}
function isTextWidthOverflows(textWidth, maxTextWidth) {
    return textWidth > maxTextWidth;
}
function isTextHeightOverflows(textHeight, innerChordLength) {
    return textHeight > innerChordLength;
}
//# sourceMappingURL=dataLabelUtils.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/locationConverter.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/dataLabel/locationConverter.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bottomInside": () => (/* binding */ bottomInside),
/* harmony export */   "bottomOutside": () => (/* binding */ bottomOutside),
/* harmony export */   "leftInside": () => (/* binding */ leftInside),
/* harmony export */   "leftOutside": () => (/* binding */ leftOutside),
/* harmony export */   "middleHorizontal": () => (/* binding */ middleHorizontal),
/* harmony export */   "middleVertical": () => (/* binding */ middleVertical),
/* harmony export */   "rightInside": () => (/* binding */ rightInside),
/* harmony export */   "rightOutside": () => (/* binding */ rightOutside),
/* harmony export */   "topInside": () => (/* binding */ topInside),
/* harmony export */   "topOutside": () => (/* binding */ topOutside)
/* harmony export */ });
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
function topInside(size, rect, offset) {
    return {
        left: rect.left + rect.width / 2.0 - size.width / 2.0,
        top: rect.top + offset,
        width: size.width,
        height: size.height
    };
}
function bottomInside(size, rect, offset) {
    return {
        left: rect.left + rect.width / 2.0 - size.width / 2.0,
        top: (rect.top + rect.height) - size.height - offset,
        width: size.width,
        height: size.height
    };
}
function rightInside(size, rect, offset) {
    return {
        left: (rect.left + rect.width) - size.width - offset,
        top: rect.top + rect.height / 2.0 - size.height / 2.0,
        width: size.width,
        height: size.height
    };
}
function leftInside(size, rect, offset) {
    return {
        left: rect.left + offset,
        top: rect.top + rect.height / 2.0 - size.height / 2.0,
        width: size.width,
        height: size.height
    };
}
function topOutside(size, rect, offset) {
    return {
        left: rect.left + rect.width / 2.0 - size.width / 2.0,
        top: rect.top - size.height - offset,
        width: size.width,
        height: size.height
    };
}
function bottomOutside(size, rect, offset) {
    return {
        left: rect.left + rect.width / 2.0 - size.width / 2.0,
        top: (rect.top + rect.height) + offset,
        width: size.width,
        height: size.height
    };
}
function rightOutside(size, rect, offset) {
    return {
        left: (rect.left + rect.width) + offset,
        top: rect.top + rect.height / 2.0 - size.height / 2.0,
        width: size.width,
        height: size.height
    };
}
function leftOutside(size, rect, offset) {
    return {
        left: rect.left - size.width - offset,
        top: rect.top + rect.height / 2.0 - size.height / 2.0,
        width: size.width,
        height: size.height
    };
}
function middleHorizontal(size, rect, offset) {
    return {
        left: rect.left + rect.width / 2.0 - size.width / 2.0 + offset,
        top: rect.top + rect.height / 2.0 - size.height / 2.0,
        width: size.width,
        height: size.height
    };
}
function middleVertical(size, rect, offset) {
    return {
        left: rect.left + rect.width / 2.0 - size.width / 2.0,
        top: rect.top + rect.height / 2.0 - size.height / 2.0 + offset,
        width: size.width,
        height: size.height
    };
}
//# sourceMappingURL=locationConverter.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/behavior/legendBehavior.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/behavior/legendBehavior.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LegendBehavior": () => (/* binding */ LegendBehavior)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_interactivityutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-interactivityutils */ "./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivityUtils.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/

class LegendBehavior {
    bindEvents(options, selectionHandler) {
        const legendItems = options.legendItems;
        this.legendIcons = options.legendIcons;
        const clearCatcher = options.clearCatcher;
        powerbi_visuals_utils_interactivityutils__WEBPACK_IMPORTED_MODULE_0__.registerStandardSelectionHandler(legendItems, selectionHandler);
        clearCatcher.on("click", () => {
            selectionHandler.handleClearSelection();
        });
    }
    renderSelection(hasSelection) {
        if (hasSelection) {
            this.legendIcons.style("fill", (d) => {
                if (!d.selected) {
                    return LegendBehavior.dimmedLegendColor;
                }
                else {
                    return d.color;
                }
            });
        }
        else {
            this.legendIcons.style("fill", (d) => {
                return d.color;
            });
        }
    }
}
LegendBehavior.dimmedLegendColor = "#A6A6A6";
//# sourceMappingURL=legendBehavior.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/interactiveLegend.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/interactiveLegend.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InteractiveLegend": () => (/* binding */ InteractiveLegend)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var _legendInterfaces__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./legendInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
/* eslint-disable powerbi-visuals/no-implied-inner-html */



class InteractiveLegend {
    constructor(element) {
        this.legendContainerParent = (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
    }
    getMargins() {
        return {
            height: InteractiveLegend.LegendHeight,
            width: 0
        };
    }
    drawLegend(legendData) {
        const data = legendData.dataPoints;
        if (data.length < 1) {
            return;
        }
        let legendContainerDiv = this.legendContainerParent.select(InteractiveLegend.LegendContainerSelector);
        if (legendContainerDiv.empty()) {
            if (!data.length) {
                return;
            }
            legendContainerDiv = this.legendContainerParent
                .insert("div", ":first-child")
                .style("height", this.getMargins().height)
                .classed(InteractiveLegend.LegendContainerClass, true);
        }
        this.legendContainerDiv = legendContainerDiv;
        // Construct the legend title and items.
        this.drawTitle(data);
        this.drawLegendItems(data);
    }
    reset() {
        if (this.legendContainerDiv) {
            this.legendContainerDiv.remove();
            this.legendContainerDiv = null;
        }
    }
    isVisible() {
        return true;
    }
    /**
     * Not supported
     */
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function */
    changeOrientation(orientation) { }
    getOrientation() {
        return _legendInterfaces__WEBPACK_IMPORTED_MODULE_1__.LegendPosition.Top;
    }
    /**
     * Draw the legend title
     */
    drawTitle(data) {
        const titleDiv = this.legendContainerDiv.selectAll(`div.${InteractiveLegend.LegendTitleClass}`), item = titleDiv.data([data[0]]);
        // Enter
        const itemEnter = item.enter(), titleDivEnter = itemEnter
            .append("div")
            .attr("class", InteractiveLegend.LegendTitleClass);
        titleDivEnter
            .filter((d) => d.iconOnlyOnLabel)
            .append("span")
            .attr("class", InteractiveLegend.legendIconClass)
            .html(InteractiveLegend.legendPlaceSelector);
        titleDivEnter.append("span");
        // Update
        item.filter((d) => d.iconOnlyOnLabel)
            .merge(itemEnter)
            .select("span." + InteractiveLegend.legendIconClass)
            .style(InteractiveLegend.legendColorCss, (d) => d.color);
        item
            .merge(itemEnter)
            .select("span:last-child")
            .text((d) => d.category);
    }
    /**
     * Draw the legend items
     */
    drawLegendItems(data) {
        // Add Mesaures - the items of the category in the legend
        this.ensureLegendTableCreated();
        const dataPointsMatrix = [data];
        const legendItemsContainer = this.legendContainerDiv
            .select("tbody")
            .selectAll("tr")
            .data(dataPointsMatrix);
        // Enter
        const legendItemsEnter = legendItemsContainer.enter(), rowEnter = legendItemsEnter.append("tr");
        const cellEnter = rowEnter
            .selectAll("td")
            .data((d) => d, (d) => d.label)
            .enter()
            .append("td")
            .attr("class", InteractiveLegend.LegendItem);
        const cellSpanEnter = cellEnter.append("span");
        cellSpanEnter.filter((d) => !d.iconOnlyOnLabel)
            .append("span")
            .html(InteractiveLegend.legendPlaceSelector)
            .attr("class", InteractiveLegend.legendIconClass)
            .attr("white-space", "nowrap")
            .style("font-size", "20px" // this creates a circle of 10px
        )
            .style("margin-bottom", "7px");
        cellSpanEnter
            .append("span")
            .attr("class", InteractiveLegend.legendItemNameClass);
        cellSpanEnter
            .append("span")
            .attr("class", InteractiveLegend.legendItemMeasureClass);
        // Update
        const legendCells = legendItemsContainer
            .merge(legendItemsEnter)
            .selectAll("td")
            .data((d) => d, (d) => d.label);
        legendCells
            .merge(legendItemsEnter)
            .select(`span.${InteractiveLegend.legendItemNameClass}`)
            .html((d) => powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_2__.textUtil.removeBreakingSpaces(d.label));
        legendCells
            .merge(legendItemsEnter)
            .select(`span.${InteractiveLegend.legendItemMeasureClass}`)
            .html((d) => `&nbsp;${d.measure}`);
        legendCells
            .merge(legendItemsEnter)
            .select("span." + InteractiveLegend.legendIconClass)
            .style("color", (d) => d.color);
        // Exit
        legendCells
            .exit()
            .remove();
    }
    /**
     * Ensure legend table is created and set horizontal pan gestures on it
     */
    ensureLegendTableCreated() {
        if (this.legendContainerDiv.select("div table").empty()) {
            const legendTable = this.legendContainerDiv
                .append("div")
                .append("table");
            legendTable.style("table-layout", "fixed").append("tbody");
            // Setup Pan Gestures of the legend
            // this.setPanGestureOnLegend(legendTable);
        }
    }
    /**
     * Set Horizontal Pan gesture for the legend
     */
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    setPanGestureOnLegend(legendTable) {
        throw "Not implemented";
        // let parentNode = <HTMLElement>this.legendContainerParent.node();
        // let viewportWidth: number = parentNode.getBoundingClientRect().width;
        // let xscale: d3.ScaleLinear<number, number> = d3.scaleLinear()
        //     .domain([0, viewportWidth])
        //     .range([0, viewportWidth]);
        // let legendZoom: d3.ZoomBehavior<any, any> = d3.zoom()
        //     .scaleExtent([1, 1]) // disable scaling
        //     // .x(xscale) ? ? ?
        //     .on("zoom", () => {
        //         // horizontal pan is valid only in case the legend items width are bigger than the viewport width
        //         if ($(legendTable[0]).width() > viewportWidth) {
        //             let t: number[] = legendZoom;
        //             let tx: number = t[0];
        //             let ty: number = t[1];
        //             tx = Math.min(tx, 0);
        //             tx = Math.max(tx, viewportWidth - $(legendTable[0]).width());
        //             legendZoom.translate([tx, ty]);
        //             legendTable.style("-ms-transform", () => { /* IE 9 */
        //                 return translateXWithPixels(tx);
        //             });
        //             legendTable.style("-webkit-transform", () => { /* Safari */
        //                 return translateXWithPixels(tx);
        //             });
        //             legendTable.style("transform", () => {
        //                 return translateXWithPixels(tx);
        //             });
        //         }
        //     });
        // if (this.legendContainerDiv) {
        //     this.legendContainerDiv.call(legendZoom);
        // } else {
        //     legendTable.call(legendZoom);
        // }
    }
}
InteractiveLegend.LegendHeight = 70;
InteractiveLegend.LegendContainerClass = "interactive-legend";
InteractiveLegend.LegendContainerSelector = ".interactive-legend";
InteractiveLegend.LegendTitleClass = "title";
InteractiveLegend.LegendItem = "item";
InteractiveLegend.legendPlaceSelector = "\u25CF";
InteractiveLegend.legendIconClass = "icon";
InteractiveLegend.legendColorCss = "color";
InteractiveLegend.legendItemNameClass = "itemName";
InteractiveLegend.legendItemMeasureClass = "itemMeasure";
//# sourceMappingURL=interactiveLegend.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legend.js":
/*!****************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legend.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLegend": () => (/* binding */ createLegend),
/* harmony export */   "isLeft": () => (/* binding */ isLeft),
/* harmony export */   "isTop": () => (/* binding */ isTop),
/* harmony export */   "positionChartArea": () => (/* binding */ positionChartArea)
/* harmony export */ });
/* harmony import */ var _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./legendInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js");
/* harmony import */ var _interactiveLegend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interactiveLegend */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/interactiveLegend.js");
/* harmony import */ var _svgLegend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./svgLegend */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/svgLegend.js");



function createLegend(legendParentElement, interactive, interactivityService, isScrollable = false, legendPosition = _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.LegendPosition.Top, interactiveBehavior) {
    if (interactive) {
        return new _interactiveLegend__WEBPACK_IMPORTED_MODULE_1__.InteractiveLegend(legendParentElement);
    }
    return new _svgLegend__WEBPACK_IMPORTED_MODULE_2__.SVGLegend(legendParentElement, legendPosition, interactivityService, isScrollable, interactiveBehavior);
}
function isLeft(orientation) {
    switch (orientation) {
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.LegendPosition.Left:
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.LegendPosition.LeftCenter:
            return true;
        default:
            return false;
    }
}
function isTop(orientation) {
    switch (orientation) {
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.LegendPosition.Top:
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.LegendPosition.TopCenter:
            return true;
        default:
            return false;
    }
}
function positionChartArea(chartArea, legend) {
    const legendMargins = legend.getMargins(), legendOrientation = legend.getOrientation();
    chartArea.style("margin-left", isLeft(legendOrientation)
        ? legendMargins.width + "px"
        : null);
    chartArea.style("margin-top", isTop(legendOrientation)
        ? legendMargins.height + "px"
        : null);
}
//# sourceMappingURL=legend.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendData.js":
/*!********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendData.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefaultLegendLabelFillColor": () => (/* binding */ DefaultLegendLabelFillColor),
/* harmony export */   "update": () => (/* binding */ update)
/* harmony export */ });
/* harmony import */ var _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./legendInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js");
/* harmony import */ var _legendPosition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./legendPosition */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendPosition.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/


const DefaultLegendLabelFillColor = "#666666";
function update(legendData, legendObject) {
    if (legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.show] == null) {
        legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.show] = true;
    }
    if (legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.show] === false) {
        legendData.dataPoints = [];
    }
    if (legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.show] === true && legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.position] == null) {
        legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.position] = _legendPosition__WEBPACK_IMPORTED_MODULE_1__.top;
    }
    if (legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.fontSize] !== undefined) {
        legendData.fontSize = legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.fontSize];
    }
    if (legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.labelColor] !== undefined) {
        const fillColor = legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.labelColor];
        if (fillColor != null) {
            legendData.labelColor = fillColor.solid.color;
        }
    }
    if (legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.showTitle] === false) {
        legendData.title = "";
    }
    else if (legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.titleText] !== undefined) {
        legendData.title = legendObject[_legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.legendProps.titleText];
    }
}
//# sourceMappingURL=legendData.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LegendPosition": () => (/* binding */ LegendPosition),
/* harmony export */   "LineStyle": () => (/* binding */ LineStyle),
/* harmony export */   "MarkerShape": () => (/* binding */ MarkerShape),
/* harmony export */   "legendProps": () => (/* binding */ legendProps)
/* harmony export */ });
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
var LegendPosition;
(function (LegendPosition) {
    LegendPosition[LegendPosition["Top"] = 0] = "Top";
    LegendPosition[LegendPosition["Bottom"] = 1] = "Bottom";
    LegendPosition[LegendPosition["Right"] = 2] = "Right";
    LegendPosition[LegendPosition["Left"] = 3] = "Left";
    LegendPosition[LegendPosition["None"] = 4] = "None";
    LegendPosition[LegendPosition["TopCenter"] = 5] = "TopCenter";
    LegendPosition[LegendPosition["BottomCenter"] = 6] = "BottomCenter";
    LegendPosition[LegendPosition["RightCenter"] = 7] = "RightCenter";
    LegendPosition[LegendPosition["LeftCenter"] = 8] = "LeftCenter";
})(LegendPosition || (LegendPosition = {}));
var MarkerShape;
(function (MarkerShape) {
    MarkerShape["circle"] = "circle";
    MarkerShape["square"] = "square";
    MarkerShape["longDash"] = "longDash";
})(MarkerShape || (MarkerShape = {}));
var LineStyle;
(function (LineStyle) {
    LineStyle["dashed"] = "dashed";
    LineStyle["solid"] = "solid";
    LineStyle["dotted"] = "dotted";
    LineStyle["dotdash"] = "dotdash";
    LineStyle["dashdot"] = "dashdot";
})(LineStyle || (LineStyle = {}));
const legendProps = {
    show: "show",
    position: "position",
    titleText: "titleText",
    showTitle: "showTitle",
    labelColor: "labelColor",
    fontSize: "fontSize",
};
//# sourceMappingURL=legendInterfaces.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendPosition.js":
/*!************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendPosition.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bottom": () => (/* binding */ bottom),
/* harmony export */   "bottomCenter": () => (/* binding */ bottomCenter),
/* harmony export */   "left": () => (/* binding */ left),
/* harmony export */   "leftCenter": () => (/* binding */ leftCenter),
/* harmony export */   "right": () => (/* binding */ right),
/* harmony export */   "rightCenter": () => (/* binding */ rightCenter),
/* harmony export */   "top": () => (/* binding */ top),
/* harmony export */   "topCenter": () => (/* binding */ topCenter)
/* harmony export */ });
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
const top = "Top";
const bottom = "Bottom";
const left = "Left";
const right = "Right";
const topCenter = "TopCenter";
const bottomCenter = "BottomCenter";
const leftCenter = "LeftCenter";
const rightCenter = "RightCenter";
//# sourceMappingURL=legendPosition.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/markers.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/markers.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LegendIconLineTotalWidth": () => (/* binding */ LegendIconLineTotalWidth),
/* harmony export */   "defaultSize": () => (/* binding */ defaultSize),
/* harmony export */   "getPath": () => (/* binding */ getPath),
/* harmony export */   "getStrokeWidth": () => (/* binding */ getStrokeWidth)
/* harmony export */ });
/* harmony import */ var _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./legendInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js");

const defaultSize = 5;
const LegendIconLineTotalWidth = 31;
const circlePath = "M 0 0 m -5 0 a 5 5 0 1 0 10 0 a 5 5 0 1 0 -10 0";
const squarePath = "M 0 0 m -5 -5 l 10 0 l 0 10 l -10 0 z";
const longDashPath = "M -" + (LegendIconLineTotalWidth / 2) + " 0 L " + (LegendIconLineTotalWidth / 2) + " 0";
const shapeStroke = 0;
const thickStroke = 2;
function getPath(shape) {
    switch (shape) {
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.MarkerShape.circle: {
            return circlePath;
        }
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.MarkerShape.square: {
            return squarePath;
        }
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.MarkerShape.longDash: {
            return longDashPath;
        }
        default: {
            return undefined;
        }
    }
}
function getStrokeWidth(shape) {
    switch (shape) {
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.MarkerShape.longDash: {
            return thickStroke;
        }
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.MarkerShape.circle:
        case _legendInterfaces__WEBPACK_IMPORTED_MODULE_0__.MarkerShape.square:
        default: {
            return shapeStroke;
        }
    }
}
//# sourceMappingURL=markers.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/svgLegend.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/lib/legend/svgLegend.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SVGLegend": () => (/* binding */ SVGLegend)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! powerbi-visuals-utils-formattingutils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js");
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/prototype.js");
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/cssConstants.js");
/* harmony import */ var powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! powerbi-visuals-utils-svgutils */ "./node_modules/powerbi-visuals-utils-svgutils/lib/manipulation.js");
/* harmony import */ var _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./legendInterfaces */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/legendInterfaces.js");
/* harmony import */ var _behavior_legendBehavior__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./behavior/legendBehavior */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/behavior/legendBehavior.js");
/* harmony import */ var powerbi_visuals_utils_interactivityutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-interactivityutils */ "./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivityBaseService.js");
/* harmony import */ var _markers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./markers */ "./node_modules/powerbi-visuals-utils-chartutils/lib/legend/markers.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/









var createClassAndSelector = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_0__.createClassAndSelector;
// powerbi.extensibility.utils.interactivity
var appendClearCatcher = powerbi_visuals_utils_interactivityutils__WEBPACK_IMPORTED_MODULE_1__.appendClearCatcher;
var dataHasSelection = powerbi_visuals_utils_interactivityutils__WEBPACK_IMPORTED_MODULE_1__.dataHasSelection;
class SVGLegend {
    constructor(element, legendPosition, interactivityService, isScrollable, interactiveBehavior) {
        this.legendDataStartIndex = 0;
        this.arrowPosWindow = 1;
        this.lastCalculatedWidth = 0;
        this.visibleLegendWidth = 0;
        this.visibleLegendHeight = 0;
        this.legendFontSizeMarginDifference = 0;
        this.legendFontSizeMarginValue = 0;
        this.svg = (0,d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"])(element)
            .append("svg")
            .style("position", "absolute");
        this.svg.style("display", "inherit");
        this.svg.classed("legend", true);
        if (interactivityService) {
            this.clearCatcher = appendClearCatcher(this.svg);
        }
        this.group = this.svg
            .append("g")
            .attr("id", "legendGroup");
        this.interactiveBehavior = interactiveBehavior ? interactiveBehavior : new _behavior_legendBehavior__WEBPACK_IMPORTED_MODULE_3__.LegendBehavior();
        this.interactivityService = interactivityService;
        this.isScrollable = isScrollable;
        this.element = element;
        this.changeOrientation(legendPosition);
        this.parentViewport = { height: 0, width: 0 };
        this.calculateViewport();
        this.updateLayout();
    }
    updateLayout() {
        const legendViewport = this.viewport;
        const orientation = this.orientation;
        this.svg.attr("height", legendViewport.height || (orientation === _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.None ? 0 : this.parentViewport.height));
        this.svg.attr("width", legendViewport.width || (orientation === _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.None ? 0 : this.parentViewport.width));
        const isRight = orientation === _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Right || orientation === _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.RightCenter, isBottom = orientation === _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Bottom || orientation === _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.BottomCenter;
        this.svg.style("margin-left", isRight ? (this.parentViewport.width - legendViewport.width) + "px" : null);
        this.svg.style("margin-top", isBottom ? (this.parentViewport.height - legendViewport.height) + "px" : null);
    }
    calculateViewport() {
        switch (this.orientation) {
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Top:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Bottom:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.TopCenter:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.BottomCenter:
                const pixelHeight = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_5__.fromPointToPixel(this.data && this.data.fontSize
                    ? this.data.fontSize
                    : SVGLegend.DefaultFontSizeInPt);
                const fontHeightSize = SVGLegend.TopLegendHeight + (pixelHeight - SVGLegend.DefaultFontSizeInPt);
                this.viewport = { height: fontHeightSize, width: 0 };
                return;
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Right:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Left:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.RightCenter:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.LeftCenter:
                const width = this.lastCalculatedWidth
                    ? this.lastCalculatedWidth
                    : this.parentViewport.width * SVGLegend.LegendMaxWidthFactor;
                this.viewport = { height: 0, width: width };
                return;
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.None:
                this.viewport = { height: 0, width: 0 };
        }
    }
    getMargins() {
        return this.viewport;
    }
    isVisible() {
        return this.orientation !== _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.None;
    }
    changeOrientation(orientation) {
        if (orientation) {
            this.orientation = orientation;
        }
        else {
            this.orientation = _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Top;
        }
        this.svg.attr("orientation", orientation);
    }
    getOrientation() {
        return this.orientation;
    }
    drawLegend(data, viewport) {
        // clone because we modify legend item label with ellipsis if it is truncated
        const clonedData = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_6__.inherit(data), newDataPoints = [];
        for (const dp of data.dataPoints) {
            newDataPoints.push(powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_6__.inherit(dp));
        }
        clonedData.dataPoints = newDataPoints;
        this.setTooltipToLegendItems(clonedData);
        this.drawLegendInternal(clonedData, viewport, true /* perform auto width */);
    }
    /* eslint-disable-next-line max-lines-per-function */
    drawLegendInternal(data, viewport, autoWidth) {
        this.parentViewport = viewport;
        this.data = data;
        if (this.interactivityService)
            this.interactivityService.applySelectionStateToData(data.dataPoints);
        if (data.dataPoints.length === 0) {
            this.changeOrientation(_legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.None);
        }
        if (this.getOrientation() === _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.None) {
            data.dataPoints = [];
        }
        // Adding back the workaround for Legend Left/Right position for Map
        const mapControls = this.element.getElementsByClassName("mapControl");
        if (mapControls.length > 0 && !this.isTopOrBottom(this.orientation)) {
            for (let i = 0; i < mapControls.length; ++i) {
                const element = mapControls[i];
                element.style.display = "inline-block";
            }
        }
        this.calculateViewport();
        const layout = this.calculateLayout(data, autoWidth);
        const titleLayout = layout.title;
        const titleData = titleLayout ? [titleLayout] : [];
        const hasSelection = this.interactivityService && dataHasSelection(data.dataPoints);
        const group = this.group;
        // transform the wrapping group if position is centered
        if (this.isCentered(this.orientation)) {
            let centerOffset = 0;
            if (this.isTopOrBottom(this.orientation)) {
                centerOffset = Math.max(0, (this.parentViewport.width - this.visibleLegendWidth) / 2);
                group.attr("transform", powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.translate(centerOffset, 0));
            }
            else {
                centerOffset = Math.max((this.parentViewport.height - this.visibleLegendHeight) / 2);
                group.attr("transform", powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.translate(0, centerOffset));
            }
        }
        else {
            group.attr("transform", null);
        }
        const legendTitle = group
            .selectAll(SVGLegend.LegendTitle.selectorName);
        const legendTitleData = legendTitle.data(titleData);
        const enteredLegendTitle = legendTitleData
            .enter()
            .append("text")
            .classed(SVGLegend.LegendTitle.className, true);
        legendTitleData
            .merge(enteredLegendTitle)
            .style("fill", data.labelColor)
            .style("font-size", powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_5__.fromPoint(data.fontSize))
            .style("font-family", data.fontFamily)
            .text((d) => d.text)
            .attr("x", (d) => d.x)
            .attr("y", (d) => d.y)
            .append("title")
            .text(data.title);
        legendTitleData
            .exit()
            .remove();
        const virtualizedDataPoints = data.dataPoints.slice(this.legendDataStartIndex, this.legendDataStartIndex + layout.numberOfItems);
        const legendItems = group
            .selectAll(SVGLegend.LegendItem.selectorName)
            .data(virtualizedDataPoints, (d) => {
            return d.identity.getKey() + (d.layerNumber != null ? d.layerNumber : "");
        });
        const itemsEnter = legendItems.enter()
            .append("g")
            .classed(SVGLegend.LegendItem.className, true);
        itemsEnter
            .append("path")
            .classed(SVGLegend.LegendIcon.className, true);
        itemsEnter
            .append("text")
            .classed(SVGLegend.LegendText.className, true);
        itemsEnter
            .append("title")
            .text((d) => d.tooltip);
        const mergedLegendIcons = legendItems
            .merge(itemsEnter)
            .select(SVGLegend.LegendIcon.selectorName)
            .attr("transform", (dataPoint) => {
            return powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.translateAndScale(dataPoint.glyphPosition.x, dataPoint.glyphPosition.y, this.getIconScale(dataPoint.markerShape));
        })
            .attr("d", (dataPoint) => {
            return _markers__WEBPACK_IMPORTED_MODULE_8__.getPath(dataPoint.markerShape || _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.MarkerShape.circle);
        })
            .attr("stroke-width", (dataPoint) => {
            if (dataPoint.lineStyle) {
                return 2;
            }
            return _markers__WEBPACK_IMPORTED_MODULE_8__.getStrokeWidth(dataPoint.markerShape || _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.MarkerShape.circle);
        })
            .style("fill", (dataPoint) => {
            if (dataPoint.lineStyle) {
                return null;
            }
            return dataPoint.color;
        })
            .style("stroke", (dataPoint) => dataPoint.color)
            .style("stroke-dasharray", (dataPoint) => {
            if (dataPoint.lineStyle) {
                return SVGLegend.getStrokeDashArrayForLegend(dataPoint.lineStyle);
            }
            return null;
        })
            .style("stroke-linejoin", "round");
        legendItems
            .merge(itemsEnter)
            .select("title")
            .text((dataPoint) => dataPoint.tooltip);
        const mergedLegendItems = legendItems.merge(itemsEnter);
        mergedLegendItems
            .select(SVGLegend.LegendText.selectorName)
            .attr("x", (dataPoint) => dataPoint.textPosition.x)
            .attr("y", (dataPoint) => dataPoint.textPosition.y)
            .text((d) => d.label)
            .style("fill", data.labelColor)
            .style("font-size", powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_5__.fromPoint(data.fontSize))
            .style("font-family", data.fontFamily);
        if (this.interactivityService) {
            const behaviorOptions = {
                legendItems: mergedLegendItems,
                legendIcons: mergedLegendIcons,
                clearCatcher: this.clearCatcher,
                dataPoints: data.dataPoints,
                behavior: this.interactiveBehavior,
                interactivityServiceOptions: {
                    isLegend: true
                }
            };
            this.interactivityService.bind(behaviorOptions);
            this.interactiveBehavior.renderSelection(hasSelection);
        }
        legendItems
            .exit()
            .remove();
        this.drawNavigationArrows(layout.navigationArrows);
        this.updateLayout();
    }
    static getStrokeDashArrayForLegend(style) {
        switch (style) {
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LineStyle.dashed: {
                return "7,5";
            }
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LineStyle.dotted: {
                return "2.5,3.1";
            }
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LineStyle.dotdash: {
                return "2.5,3.1,7,3.1";
            }
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LineStyle.dashdot: {
                return "7,3.1,2.5,3.1";
            }
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LineStyle.solid: {
                return null;
            }
        }
    }
    normalizePosition(points) {
        if (this.legendDataStartIndex >= points.length) {
            this.legendDataStartIndex = points.length - 1;
        }
        if (this.legendDataStartIndex < 0) {
            this.legendDataStartIndex = 0;
        }
    }
    calculateTitleLayout(title) {
        let width = 0;
        const hasTitle = !!title;
        if (hasTitle) {
            const isHorizontal = this.isTopOrBottom(this.orientation);
            const textProperties = SVGLegend.getTextProperties(title, this.data.fontSize, this.data.fontFamily);
            let text = title;
            width = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.measureSvgTextWidth(textProperties);
            if (isHorizontal) {
                width += SVGLegend.TitlePadding;
            }
            else {
                text = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.getTailoredTextOrDefault(textProperties, this.viewport.width);
            }
            return {
                text,
                width,
                x: 0,
                y: 0,
                height: powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.estimateSvgTextHeight(textProperties)
            };
        }
        return null;
    }
    /** Performs layout offline for optimal perfomance */
    calculateLayout(data, autoWidth) {
        let dataPoints = data.dataPoints;
        if (data.dataPoints.length === 0) {
            return {
                numberOfItems: 0,
                title: null,
                navigationArrows: []
            };
        }
        this.legendFontSizeMarginValue = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_5__.fromPointToPixel(this.data && this.data.fontSize !== undefined ? this.data.fontSize : SVGLegend.DefaultFontSizeInPt);
        this.legendFontSizeMarginDifference = (this.legendFontSizeMarginValue - SVGLegend.DefaultTextMargin);
        this.normalizePosition(dataPoints);
        if (this.legendDataStartIndex < dataPoints.length) {
            dataPoints = dataPoints.slice(this.legendDataStartIndex);
        }
        const title = this.calculateTitleLayout(data.title);
        let navArrows;
        let numberOfItems;
        if (this.isTopOrBottom(this.orientation)) {
            navArrows = this.isScrollable ? this.calculateHorizontalNavigationArrowsLayout(title) : [];
            numberOfItems = this.calculateHorizontalLayout(dataPoints, title, navArrows);
        }
        else {
            navArrows = this.isScrollable ? this.calculateVerticalNavigationArrowsLayout(title) : [];
            numberOfItems = this.calculateVerticalLayout(dataPoints, title, navArrows, autoWidth);
        }
        return {
            numberOfItems,
            title,
            navigationArrows: navArrows
        };
    }
    updateNavigationArrowLayout(navigationArrows, remainingDataLength, visibleDataLength) {
        if (this.legendDataStartIndex === 0) {
            navigationArrows.shift();
        }
        const lastWindow = this.arrowPosWindow;
        this.arrowPosWindow = visibleDataLength;
        if (navigationArrows && navigationArrows.length > 0 && this.arrowPosWindow === remainingDataLength) {
            this.arrowPosWindow = lastWindow;
            navigationArrows.length = navigationArrows.length - 1;
        }
    }
    calculateHorizontalNavigationArrowsLayout(title) {
        const height = SVGLegend.LegendArrowHeight;
        const width = SVGLegend.LegendArrowWidth;
        const translateY = (this.viewport.height / 2) - (height / 2);
        const data = [];
        const rightShift = title ? title.x + title.width : 0;
        const arrowLeft = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.createArrow(width, height, 180 /*angle*/);
        const arrowRight = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.createArrow(width, height, 0 /*angle*/);
        data.push({
            x: rightShift,
            y: translateY,
            path: arrowLeft.path,
            rotateTransform: arrowLeft.transform,
            dataType: 1 /* NavigationArrowType.Decrease */
        });
        data.push({
            x: this.parentViewport.width - width,
            y: translateY,
            path: arrowRight.path,
            rotateTransform: arrowRight.transform,
            dataType: 0 /* NavigationArrowType.Increase */
        });
        return data;
    }
    calculateVerticalNavigationArrowsLayout(title) {
        const height = SVGLegend.LegendArrowHeight;
        const width = SVGLegend.LegendArrowWidth;
        const verticalCenter = this.viewport.height / 2;
        const data = [];
        const rightShift = verticalCenter + height / 2;
        const arrowTop = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.createArrow(width, height, 270 /*angle*/);
        const arrowBottom = powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.createArrow(width, height, 90 /*angle*/);
        const titleHeight = title ? title.height : 0;
        data.push({
            x: rightShift,
            y: width + titleHeight,
            path: arrowTop.path,
            rotateTransform: arrowTop.transform,
            dataType: 1 /* NavigationArrowType.Decrease */
        });
        data.push({
            x: rightShift,
            y: this.parentViewport.height - height,
            path: arrowBottom.path,
            rotateTransform: arrowBottom.transform,
            dataType: 0 /* NavigationArrowType.Increase */
        });
        return data;
    }
    /**
     * Calculates the widths for each horizontal legend item.
     */
    static calculateHorizontalLegendItemsWidths(dataPoints, availableWidth, iconPadding, fontSize, fontFamily) {
        const dataPointsLength = dataPoints.length;
        // Set the maximum amount of space available to each item. They can use less, but can"t go over this number.
        let maxItemWidth = dataPointsLength > 0 ? availableWidth / dataPointsLength | 0 : 0;
        let maxItemTextWidth = maxItemWidth - iconPadding;
        // Makes sure the amount of space available to each item is at least SVGLegend.MaxTextLength wide.
        // If you had many items and/or a narrow amount of available width, the availableTextWidthPerItem would be small, essentially making everything ellipsis.
        // This prevents that from happening by giving each item at least SVGLegend.MaxTextLength of space.
        if (maxItemTextWidth < SVGLegend.MaxTextLength) {
            maxItemTextWidth = SVGLegend.MaxTextLength;
            maxItemWidth = maxItemTextWidth + iconPadding;
        }
        // Make sure the availableWidthPerItem is less than the availableWidth. This lets the long text properly add ellipsis when we"re displaying one item at a time.
        if (maxItemWidth > availableWidth) {
            maxItemWidth = availableWidth;
            maxItemTextWidth = maxItemWidth - iconPadding;
        }
        let occupiedWidth = 0;
        const legendItems = [];
        // Add legend items until we can"t fit any more (the last one doesn"t fit) or we"ve added all of them
        for (const dataPoint of dataPoints) {
            const textProperties = SVGLegend.getTextProperties(dataPoint.label, fontSize, fontFamily);
            const itemTextWidth = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.measureSvgTextWidth(textProperties);
            const desiredWidth = itemTextWidth + iconPadding;
            const overMaxWidth = desiredWidth > maxItemWidth;
            const actualWidth = overMaxWidth ? maxItemWidth : desiredWidth;
            occupiedWidth += actualWidth;
            if (occupiedWidth >= availableWidth) {
                // Always add at least 1 element
                if (legendItems.length === 0) {
                    legendItems.push({
                        dataPoint: dataPoint,
                        textProperties: textProperties,
                        desiredWidth: desiredWidth,
                        desiredOverMaxWidth: true,
                        width: desiredWidth
                    });
                    // Set the width to the amount of space we actually have
                    occupiedWidth = availableWidth;
                }
                else {
                    // Subtract the width from what was just added since it won"t fit
                    occupiedWidth -= actualWidth;
                }
                break;
            }
            legendItems.push({
                dataPoint: dataPoint,
                textProperties: textProperties,
                desiredWidth: desiredWidth,
                desiredOverMaxWidth: overMaxWidth,
                width: desiredWidth
            });
        }
        // If there are items at max width, evenly redistribute the extra space to them
        const itemsOverMax = legendItems.filter((li) => li.desiredOverMaxWidth);
        let numItemsOverMax = itemsOverMax.length;
        if (numItemsOverMax > 0) {
            let extraWidth = availableWidth - occupiedWidth;
            for (const item of itemsOverMax) {
                // Divvy up the extra space and add it to the max
                // We need to do this calculation in every loop since the remainingWidth may not be changed by the same amount every time
                const extraWidthPerItem = extraWidth / numItemsOverMax;
                const newMaxItemWidth = maxItemWidth + extraWidthPerItem;
                let usedExtraWidth;
                if (item.desiredWidth <= newMaxItemWidth) {
                    // If the item doesn"t need all the extra space, it"s not at max anymore
                    item.desiredOverMaxWidth = false;
                    usedExtraWidth = item.desiredWidth - maxItemWidth;
                }
                else {
                    // Otherwise the item is taking up all the extra space so update the actual width to indicate that
                    item.width = newMaxItemWidth;
                    usedExtraWidth = newMaxItemWidth - maxItemWidth;
                }
                extraWidth -= usedExtraWidth;
                numItemsOverMax--;
            }
        }
        return legendItems;
    }
    calculateHorizontalLayout(dataPoints, title, navigationArrows) {
        const fontSizeBiggerThanDefault = this.legendFontSizeMarginDifference > 0;
        const fontSizeMargin = fontSizeBiggerThanDefault
            ? SVGLegend.TextAndIconPadding + this.legendFontSizeMarginDifference
            : SVGLegend.TextAndIconPadding;
        let occupiedWidth = 0;
        const firstDataPointMarkerShape = dataPoints && dataPoints[0] && dataPoints[0].markerShape;
        const iconTotalItemPadding = this.getMarkerShapeWidth(firstDataPointMarkerShape) + fontSizeMargin * 1.5;
        let numberOfItems = dataPoints.length;
        // get the Y coordinate which is the middle of the container + the middle of the text height - the delta of the text
        const defaultTextProperties = SVGLegend.getTextProperties("", this.data.fontSize, this.data.fontFamily);
        const verticalCenter = this.viewport.height / 2;
        const textYCoordinate = verticalCenter + powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.estimateSvgTextHeight(defaultTextProperties) / 2
            - powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.estimateSvgTextBaselineDelta(defaultTextProperties);
        if (title) {
            occupiedWidth += title.width;
            // get the Y coordinate which is the middle of the container + the middle of the text height - the delta of the text
            title.y = verticalCenter
                + title.height / 2
                - powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.estimateSvgTextBaselineDelta(SVGLegend.getTextProperties(title.text, this.data.fontSize, this.data.fontFamily));
        }
        // if an arrow should be added, we add space for it
        if (this.legendDataStartIndex > 0) {
            occupiedWidth += SVGLegend.LegendArrowOffset;
        }
        // Calculate the width for each of the legend items
        const dataPointsLength = dataPoints.length;
        let availableWidth = this.parentViewport.width - occupiedWidth;
        let legendItems = SVGLegend.calculateHorizontalLegendItemsWidths(dataPoints, availableWidth, iconTotalItemPadding, this.data.fontSize, this.data.fontFamily);
        numberOfItems = legendItems.length;
        // If we can"t show all the legend items, subtract the "next" arrow space from the available space and re-run the width calculations
        if (numberOfItems !== dataPointsLength) {
            availableWidth -= SVGLegend.LegendArrowOffset;
            legendItems = SVGLegend.calculateHorizontalLegendItemsWidths(dataPoints, availableWidth, iconTotalItemPadding, this.data.fontSize, this.data.fontFamily);
            numberOfItems = legendItems.length;
        }
        for (const legendItem of legendItems) {
            const { dataPoint } = legendItem;
            const markerShapeWidth = this.getMarkerShapeWidth(dataPoint.markerShape);
            dataPoint.glyphPosition = {
                // the space taken so far + the radius + the margin / radiusFactor to prevent huge spaces
                x: occupiedWidth + markerShapeWidth / 2 + (this.legendFontSizeMarginDifference / this.getLegendIconFactor(dataPoint.markerShape)),
                // The middle of the container but a bit lower due to text not being in the middle (qP for example making middle between q and P)
                y: this.viewport.height * SVGLegend.LegendIconYRatio,
            };
            const fixedTextShift = (fontSizeMargin / (this.getLegendIconFactor(dataPoint.markerShape) / 2)) + markerShapeWidth;
            dataPoint.textPosition = {
                x: occupiedWidth + fixedTextShift,
                y: textYCoordinate,
            };
            // If we're over the max width, process it so it fits
            if (legendItem.desiredOverMaxWidth) {
                const textWidth = legendItem.width - iconTotalItemPadding;
                dataPoint.label = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.getTailoredTextOrDefault(legendItem.textProperties, textWidth);
            }
            occupiedWidth += legendItem.width;
        }
        this.visibleLegendWidth = occupiedWidth;
        this.updateNavigationArrowLayout(navigationArrows, dataPointsLength, numberOfItems);
        return numberOfItems;
    }
    getMarkerShapeWidth(markerShape) {
        switch (markerShape) {
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.MarkerShape.longDash: {
                return _markers__WEBPACK_IMPORTED_MODULE_8__.LegendIconLineTotalWidth;
            }
            default: {
                return SVGLegend.LegendIconRadius * 2;
            }
        }
    }
    getLegendIconFactor(markerShape) {
        switch (markerShape) {
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.MarkerShape.circle:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.MarkerShape.square: {
                return 5;
            }
            default: {
                return 6;
            }
        }
    }
    getIconScale(markerShape) {
        switch (markerShape) {
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.MarkerShape.circle:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.MarkerShape.square: {
                return SVGLegend.LegendIconRadius / _markers__WEBPACK_IMPORTED_MODULE_8__.defaultSize;
            }
            default: {
                return 1;
            }
        }
    }
    calculateVerticalLayout(dataPoints, title, navigationArrows, autoWidth) {
        // check if we need more space for the margin, or use the default text padding
        const fontSizeBiggerThenDefault = this.legendFontSizeMarginDifference > 0;
        const fontFactor = fontSizeBiggerThenDefault ? this.legendFontSizeMarginDifference : 0;
        // calculate the size needed after font size change
        const verticalLegendHeight = 20 + fontFactor;
        const spaceNeededByTitle = 15 + fontFactor;
        const extraShiftForTextAlignmentToIcon = 4 + fontFactor;
        let totalSpaceOccupiedThusFar = verticalLegendHeight;
        // the default space for text and icon radius + the margin after the font size change
        const firstDataPointMarkerShape = dataPoints && dataPoints[0] && dataPoints[0].markerShape;
        const fixedHorizontalIconShift = SVGLegend.TextAndIconPadding
            + this.getMarkerShapeWidth(firstDataPointMarkerShape) / 2
            + this.legendFontSizeMarginDifference;
        const fixedHorizontalTextShift = fixedHorizontalIconShift * 2;
        // check how much space is needed
        const maxHorizontalSpaceAvaliable = autoWidth
            ? this.parentViewport.width * SVGLegend.LegendMaxWidthFactor
                - fixedHorizontalTextShift - SVGLegend.LegendEdgeMariginWidth
            : this.lastCalculatedWidth
                - fixedHorizontalTextShift - SVGLegend.LegendEdgeMariginWidth;
        let numberOfItems = dataPoints.length;
        let maxHorizontalSpaceUsed = 0;
        const parentHeight = this.parentViewport.height;
        if (title) {
            totalSpaceOccupiedThusFar += spaceNeededByTitle;
            title.x = SVGLegend.TextAndIconPadding;
            title.y = spaceNeededByTitle;
            maxHorizontalSpaceUsed = title.width || 0;
        }
        // if an arrow should be added, we add space for it
        if (this.legendDataStartIndex > 0)
            totalSpaceOccupiedThusFar += SVGLegend.LegendArrowOffset;
        const dataPointsLength = dataPoints.length;
        for (let i = 0; i < dataPointsLength; i++) {
            const dp = dataPoints[i];
            const textProperties = SVGLegend.getTextProperties(dp.label, this.data.fontSize, this.data.fontFamily);
            dp.glyphPosition = {
                x: fixedHorizontalIconShift,
                y: (totalSpaceOccupiedThusFar + extraShiftForTextAlignmentToIcon) - powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.estimateSvgTextBaselineDelta(textProperties)
            };
            dp.textPosition = {
                x: fixedHorizontalTextShift,
                y: totalSpaceOccupiedThusFar + extraShiftForTextAlignmentToIcon
            };
            // TODO: [PERF] Get rid of this extra measurement, and modify
            // getTailoredTextToReturnWidth + Text
            const width = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.measureSvgTextWidth(textProperties);
            if (width > maxHorizontalSpaceUsed) {
                maxHorizontalSpaceUsed = width;
            }
            if (width > maxHorizontalSpaceAvaliable) {
                const text = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_9__.textMeasurementService.getTailoredTextOrDefault(textProperties, maxHorizontalSpaceAvaliable);
                dp.label = text;
            }
            totalSpaceOccupiedThusFar += verticalLegendHeight;
            if (totalSpaceOccupiedThusFar > parentHeight) {
                numberOfItems = i;
                break;
            }
        }
        if (autoWidth) {
            if (maxHorizontalSpaceUsed < maxHorizontalSpaceAvaliable) {
                this.lastCalculatedWidth = this.viewport.width = Math.ceil(maxHorizontalSpaceUsed + fixedHorizontalTextShift + SVGLegend.LegendEdgeMariginWidth);
            }
            else {
                this.lastCalculatedWidth = this.viewport.width = Math.ceil(this.parentViewport.width * SVGLegend.LegendMaxWidthFactor);
            }
        }
        else {
            this.viewport.width = this.lastCalculatedWidth;
        }
        this.visibleLegendHeight = totalSpaceOccupiedThusFar;
        navigationArrows.forEach(d => d.x = this.lastCalculatedWidth / 2);
        this.updateNavigationArrowLayout(navigationArrows, dataPointsLength, numberOfItems);
        return numberOfItems;
    }
    drawNavigationArrows(layout) {
        let arrows = this.group.selectAll(SVGLegend.NavigationArrow.selectorName)
            .data(layout);
        arrows.exit().remove();
        arrows = arrows.merge(arrows
            .enter()
            .append("g")
            .classed(SVGLegend.NavigationArrow.className, true))
            .on("click", (event, d) => {
            const pos = this.legendDataStartIndex;
            this.legendDataStartIndex = d.dataType === 0 /* NavigationArrowType.Increase */
                ? pos + this.arrowPosWindow : pos - this.arrowPosWindow;
            this.drawLegendInternal(this.data, this.parentViewport, false);
        })
            .attr("transform", (d) => powerbi_visuals_utils_svgutils__WEBPACK_IMPORTED_MODULE_7__.translate(d.x, d.y));
        let path = arrows.selectAll("path")
            .data((data) => [data]);
        path.exit().remove();
        path = path
            .enter()
            .append("path")
            .merge(path);
        path.attr("d", (d) => d.path)
            .attr("transform", (d) => d.rotateTransform);
    }
    isTopOrBottom(orientation) {
        switch (orientation) {
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Top:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.Bottom:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.BottomCenter:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.TopCenter:
                return true;
            default:
                return false;
        }
    }
    isCentered(orientation) {
        switch (orientation) {
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.BottomCenter:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.LeftCenter:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.RightCenter:
            case _legendInterfaces__WEBPACK_IMPORTED_MODULE_4__.LegendPosition.TopCenter:
                return true;
            default:
                return false;
        }
    }
    /* eslint-disable-next-line @typescript-eslint/no-empty-function */
    reset() { }
    static getTextProperties(text, fontSize, fontFamily) {
        return {
            fontFamily,
            fontSize: powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_5__.fromPoint(fontSize || SVGLegend.DefaultFontSizeInPt),
            text,
        };
    }
    setTooltipToLegendItems(data) {
        // we save the values to tooltip before cut
        for (const dataPoint of data.dataPoints) {
            dataPoint.tooltip = dataPoint.label;
        }
    }
}
SVGLegend.DefaultFontSizeInPt = 8;
SVGLegend.LegendIconRadius = 5;
SVGLegend.MaxTextLength = 60;
SVGLegend.TextAndIconPadding = 5;
SVGLegend.TitlePadding = 15;
SVGLegend.LegendEdgeMariginWidth = 10;
SVGLegend.LegendMaxWidthFactor = 0.3;
SVGLegend.TopLegendHeight = 24;
SVGLegend.DefaultTextMargin = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_5__.fromPointToPixel(SVGLegend.DefaultFontSizeInPt);
SVGLegend.LegendIconYRatio = 0.52;
// Navigation Arrow constants
SVGLegend.LegendArrowOffset = 10;
SVGLegend.LegendArrowHeight = 15;
SVGLegend.LegendArrowWidth = 7.5;
SVGLegend.LegendItem = createClassAndSelector("legendItem");
SVGLegend.LegendText = createClassAndSelector("legendText");
SVGLegend.LegendIcon = createClassAndSelector("legendIcon");
SVGLegend.LegendTitle = createClassAndSelector("legendTitle");
SVGLegend.NavigationArrow = createClassAndSelector("navArrow");
//# sourceMappingURL=svgLegend.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-colorutils/lib/colorHelper.js":
/*!**************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-colorutils/lib/colorHelper.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ColorHelper": () => (/* binding */ ColorHelper)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils */ "./node_modules/powerbi-visuals-utils-colorutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js");
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

class ColorHelper {
    constructor(colors, fillProp, defaultDataPointColor) {
        this.colorPalette = colors;
        this.fillProp = fillProp;
        this.defaultDataPointColor = defaultDataPointColor;
    }
    /**
     * Gets the color for the given series value.
     * If no explicit color or default color has been set then the color is
     * allocated from the color scale for this series.
     */
    getColorForSeriesValue(objects, value, themeColorName) {
        if (this.isHighContrast) {
            return this.getThemeColor(themeColorName);
        }
        return (this.fillProp && powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__.getFillColor(objects, this.fillProp))
            || this.defaultDataPointColor
            || this.colorPalette.getColor(String(value)).value;
    }
    /**
     * Gets the color for the given measure.
     */
    getColorForMeasure(objects, measureKey, themeColorName) {
        if (this.isHighContrast) {
            return this.getThemeColor(themeColorName);
        }
        // Note, this allocates the color from the scale regardless of if we use it or not which helps keep colors stable.
        const scaleColor = this.colorPalette.getColor(measureKey).value;
        return (this.fillProp && powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__.getFillColor(objects, this.fillProp))
            || this.defaultDataPointColor
            || scaleColor;
    }
    static normalizeSelector(selector, isSingleSeries) {
        // For dynamic series charts, colors are set per category.  So, exclude any measure (metadata repetition) from the selector.
        if (selector && (isSingleSeries || selector.data)) {
            return { data: selector.data };
        }
        return selector;
    }
    get isHighContrast() {
        return !!(this.colorPalette && this.colorPalette.isHighContrast);
    }
    getThemeColor(themeColorName = "background") {
        return this.colorPalette
            && this.colorPalette[themeColorName]
            && this.colorPalette[themeColorName].value;
    }
    getHighContrastColor(themeColorName = "background", defaultColor) {
        return this.isHighContrast
            ? this.getThemeColor(themeColorName)
            : defaultColor;
    }
}
//# sourceMappingURL=colorHelper.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-colorutils/lib/colorUtils.js":
/*!*************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-colorutils/lib/colorUtils.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calculateHighlightColor": () => (/* binding */ calculateHighlightColor),
/* harmony export */   "channelBlend": () => (/* binding */ channelBlend),
/* harmony export */   "createLinearColorScale": () => (/* binding */ createLinearColorScale),
/* harmony export */   "darken": () => (/* binding */ darken),
/* harmony export */   "hexBlend": () => (/* binding */ hexBlend),
/* harmony export */   "hexString": () => (/* binding */ hexString),
/* harmony export */   "hexToRGBString": () => (/* binding */ hexToRGBString),
/* harmony export */   "normalizeToHexString": () => (/* binding */ normalizeToHexString),
/* harmony export */   "parseColorString": () => (/* binding */ parseColorString),
/* harmony export */   "rgbBlend": () => (/* binding */ rgbBlend),
/* harmony export */   "rgbString": () => (/* binding */ rgbString),
/* harmony export */   "rotate": () => (/* binding */ rotate),
/* harmony export */   "shadeColor": () => (/* binding */ shadeColor)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/

function hexToRGBString(hex, transparency) {
    // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
    const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function (m, r, g, b) {
        return r + r + g + g + b + b;
    });
    // Hex format which return the format r-g-b
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    const rgb = result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
    // Wrong input
    if (rgb === null) {
        return "";
    }
    if (!transparency && transparency !== 0) {
        return "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
    }
    else {
        return "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + transparency + ")";
    }
}
function rotate(rgbString, rotateFactor) {
    if (rotateFactor === 0)
        return rgbString;
    const originalRgb = parseColorString(rgbString);
    const originalHsv = rgbToHsv(originalRgb);
    const rotatedHsv = rotateHsv(originalHsv, rotateFactor);
    const rotatedRgb = hsvToRgb(rotatedHsv);
    return hexString(rotatedRgb);
}
function normalizeToHexString(color) {
    const rgb = parseColorString(color);
    return hexString(rgb);
}
function parseColorString(color) {
    if (color.indexOf("#") >= 0) {
        if (color.length === 7) {
            // #RRGGBB
            const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(color);
            if (result == null || result.length < 4)
                return;
            return {
                R: parseInt(result[1], 16),
                G: parseInt(result[2], 16),
                B: parseInt(result[3], 16),
            };
        }
        else if (color.length === 4) {
            // #RGB
            const result = /^#?([a-f\d])([a-f\d])([a-f\d])$/i.exec(color);
            if (result == null || result.length < 4)
                return;
            return {
                R: parseInt(result[1] + result[1], 16),
                G: parseInt(result[2] + result[2], 16),
                B: parseInt(result[3] + result[3], 16),
            };
        }
    }
    else if (color.indexOf("rgb(") >= 0) {
        // rgb(R, G, B)
        const result = /^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/.exec(color);
        if (result == null || result.length < 4)
            return;
        return {
            R: parseInt(result[1], 10),
            G: parseInt(result[2], 10),
            B: parseInt(result[3], 10),
        };
    }
    else if (color.indexOf("rgba(") >= 0) {
        // rgba(R, G, B, A)
        const result = /^rgba\((\d+),\s*(\d+),\s*(\d+),\s*(\d*(?:\.\d+)?)\)$/.exec(color);
        if (result == null || result.length < 5)
            return;
        return {
            R: parseInt(result[1], 10),
            G: parseInt(result[2], 10),
            B: parseInt(result[3], 10),
            A: parseFloat(result[4]),
        };
    }
}
function rgbToHsv(rgbColor) {
    let s, h;
    const r = rgbColor.R / 255, g = rgbColor.G / 255, b = rgbColor.B / 255;
    const min = Math.min(r, Math.min(g, b));
    const max = Math.max(r, Math.max(g, b));
    const v = max;
    const delta = max - min;
    if (max === 0 || delta === 0) {
        // R, G, and B must be 0.0, or all the same.
        // In this case, S is 0.0, and H is undefined.
        // Using H = 0.0 is as good as any...
        s = 0;
        h = 0;
    }
    else {
        s = delta / max;
        if (r === max) {
            // Between Yellow and Magenta
            h = (g - b) / delta;
        }
        else if (g === max) {
            // Between Cyan and Yellow
            h = 2 + (b - r) / delta;
        }
        else {
            // Between Magenta and Cyan
            h = 4 + (r - g) / delta;
        }
    }
    // Scale h to be between 0.0 and 1.
    // This may require adding 1, if the value
    // is negative.
    h /= 6;
    if (h < 0) {
        h += 1;
    }
    return {
        H: h,
        S: s,
        V: v,
    };
}
function hsvToRgb(hsvColor) {
    let r, g, b;
    const h = hsvColor.H, s = hsvColor.S, v = hsvColor.V;
    if (s === 0) {
        // If s is 0, all colors are the same.
        // This is some flavor of gray.
        r = v;
        g = v;
        b = v;
    }
    else {
        // The color wheel consists of 6 sectors.
        // Figure out which sector you//re in.
        const sectorPos = h * 6;
        const sectorNumber = Math.floor(sectorPos);
        // get the fractional part of the sector.
        // That is, how many degrees into the sector
        // are you?
        const fractionalSector = sectorPos - sectorNumber;
        // Calculate values for the three axes
        // of the color.
        const p = v * (1.0 - s);
        const q = v * (1.0 - (s * fractionalSector));
        const t = v * (1.0 - (s * (1 - fractionalSector)));
        // Assign the fractional colors to r, g, and b
        // based on the sector the angle is in.
        switch (sectorNumber) {
            case 0:
                r = v;
                g = t;
                b = p;
                break;
            case 1:
                r = q;
                g = v;
                b = p;
                break;
            case 2:
                r = p;
                g = v;
                b = t;
                break;
            case 3:
                r = p;
                g = q;
                b = v;
                break;
            case 4:
                r = t;
                g = p;
                b = v;
                break;
            case 5:
                r = v;
                g = p;
                b = q;
                break;
        }
    }
    return {
        R: Math.floor(r * 255),
        G: Math.floor(g * 255),
        B: Math.floor(b * 255),
    };
}
function rotateHsv(hsvColor, rotateFactor) {
    const newH = hsvColor.H + rotateFactor;
    return {
        H: newH > 1 ? newH - 1 : newH,
        S: hsvColor.S,
        V: hsvColor.V,
    };
}
function darken(color, diff) {
    const flooredNumber = Math.floor(diff);
    return {
        R: Math.max(0, color.R - flooredNumber),
        G: Math.max(0, color.G - flooredNumber),
        B: Math.max(0, color.B - flooredNumber),
    };
}
function rgbString(color) {
    if (color.A == null)
        return "rgb(" + color.R + "," + color.G + "," + color.B + ")";
    return "rgba(" + color.R + "," + color.G + "," + color.B + "," + color.A + ")";
}
function hexString(color) {
    return "#" + componentToHex(color.R) + componentToHex(color.G) + componentToHex(color.B);
}
/**
 * Overlays a color with opacity over a background color
 * @param {string} foreColor Color to overlay
 * @param {number} opacity number between 0 (transparent) to 1 (opaque)
 * @param {string} backColor Background color
 * @returns Result color
 */
function hexBlend(foreColor, opacity, backColor) {
    return hexString(rgbBlend(parseColorString(foreColor), opacity, parseColorString(backColor)));
}
/**
 * Overlays a color with opacity over a background color. Any alpha-channel is ignored.
 * @param {RgbColor} foreColor Color to overlay
 * @param {number} opacity number between 0 (transparent) to 1 (opaque). Any value out of range will be corrected.
 * @param {RgbColor} backColor Background color
 * @returns
 */
function rgbBlend(foreColor, opacity, backColor) {
    // correct opacity
    opacity = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(opacity, 0, 1);
    return {
        R: channelBlend(foreColor.R, opacity, backColor.R),
        G: channelBlend(foreColor.G, opacity, backColor.G),
        B: channelBlend(foreColor.B, opacity, backColor.B)
    };
}
/**
 * Blend a single channel for two colors
 * @param {number} foreChannel Channel of foreground color. Will be enforced to be between 0 and 255.
 * @param {number} opacity opacity of the foreground color. Will be enforced to be between 0 and 1.
 * @param {number} backChannel channel of the background color. Will be enforced to be between 0 and 255.
 * @returns result channel value
 */
function channelBlend(foreChannel, opacity, backChannel) {
    opacity = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(opacity, 0, 1);
    foreChannel = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(foreChannel, 0, 255);
    backChannel = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(backChannel, 0, 255);
    return Math.round((opacity * foreChannel) +
        ((1 - opacity) * backChannel));
}
/**
 * Calculate the highlight color from the rgbColor based on the lumianceThreshold and delta.
 * @param {RgbColor} rgbColor The original color.
 * @param {number} lumianceThreshold The lumiance threshold used, the highlight color will be brighter when the lumiance is smaller the threshold, otherwise the highlight color will be darker. Will be enforced to be between 0 and 1.
 * @param {number} delta the highlight color will be calculated based on the delta. Will be enforced to be between 0 and 1. lumianceThreshold + delta cannot greater than 1.
 * @returns result highlight color value
 */
function calculateHighlightColor(rgbColor, lumianceThreshold, delta) {
    const hsvColor = rgbToHsv(rgbColor);
    // For invalid lumianceThreshold and delta value, use default.
    if (lumianceThreshold + delta > 1 || lumianceThreshold <= 0 || delta <= 0) {
        lumianceThreshold = 0.8;
        delta = 0.2;
    }
    // Make it lighter when the lumianceValue is less than 200, otherwise make it darker.
    if (hsvColor.V < lumianceThreshold)
        hsvColor.V = hsvColor.V + delta;
    else
        hsvColor.V = hsvColor.V - delta;
    return hexString(hsvToRgb(hsvColor));
}
function componentToHex(hexComponent) {
    const clamped = powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(hexComponent, 0, 255);
    const hex = clamped.toString(16).toUpperCase();
    return hex.length === 1 ? "0" + hex : hex;
}
function createLinearColorScale(domain, range, clamp) {
    const rangeColors = range.map(v => parseColorString(v));
    return value => {
        // treat undefined and NULL as 0
        if (value == null)
            value = 0;
        // Returns undefined for NaN values
        if (isNaN(value))
            return undefined;
        if (clamp) {
            if (value >= domain[domain.length - 1])
                return range[range.length - 1];
            if (value <= domain[0])
                return range[0];
        }
        let domainMin, domainMax, rangeMin, rangeMax;
        for (let i = 1, len = domain.length; i < len; i++) {
            domainMin = domain[i - 1];
            domainMax = domain[i];
            if (domainMax === value) {
                return range[i];
            }
            else if (value >= domainMin && value <= domainMax) {
                rangeMin = rangeColors[i - 1];
                rangeMax = rangeColors[i];
                break;
            }
        }
        const newValue = {
            R: Math.round((((value - domainMin) * (rangeMax.R - rangeMin.R)) / (domainMax - domainMin)) + rangeMin.R),
            G: Math.round((((value - domainMin) * (rangeMax.G - rangeMin.G)) / (domainMax - domainMin)) + rangeMin.G),
            B: Math.round((((value - domainMin) * (rangeMax.B - rangeMin.B)) / (domainMax - domainMin)) + rangeMin.B)
        };
        return hexString(newValue);
    };
}
/**
 * Convert string hex expression to number, calculate percentage and R, G, B channels.
 * Apply percentage for each channel and return back hex value as string with pound sign.
 */
function shadeColor(color, percent) {
    const hexNum = parseInt(color.slice(1), 16);
    const t = percent < 0 ? 0 : 255;
    const p = percent < 0 ? percent * -1 : percent;
    const R = hexNum >> 16;
    const G = hexNum >> 8 & 0x00FF;
    const B = hexNum & 0x0000FF;
    const hexString = "#" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);
    return hexString;
}
//# sourceMappingURL=colorUtils.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-colorutils/lib/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-colorutils/lib/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ColorHelper": () => (/* reexport safe */ _colorHelper__WEBPACK_IMPORTED_MODULE_0__.ColorHelper),
/* harmony export */   "calculateHighlightColor": () => (/* binding */ calculateHighlightColor),
/* harmony export */   "channelBlend": () => (/* binding */ channelBlend),
/* harmony export */   "createLinearColorScale": () => (/* binding */ createLinearColorScale),
/* harmony export */   "darken": () => (/* binding */ darken),
/* harmony export */   "hexBlend": () => (/* binding */ hexBlend),
/* harmony export */   "hexString": () => (/* binding */ hexString),
/* harmony export */   "hexToRGBString": () => (/* binding */ hexToRGBString),
/* harmony export */   "normalizeToHexString": () => (/* binding */ normalizeToHexString),
/* harmony export */   "parseColorString": () => (/* binding */ parseColorString),
/* harmony export */   "rgbBlend": () => (/* binding */ rgbBlend),
/* harmony export */   "rgbString": () => (/* binding */ rgbString),
/* harmony export */   "rotate": () => (/* binding */ rotate),
/* harmony export */   "shadeColor": () => (/* binding */ shadeColor)
/* harmony export */ });
/* harmony import */ var _colorHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./colorHelper */ "./node_modules/powerbi-visuals-utils-colorutils/lib/colorHelper.js");
/* harmony import */ var _colorUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./colorUtils */ "./node_modules/powerbi-visuals-utils-colorutils/lib/colorUtils.js");


var calculateHighlightColor = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.calculateHighlightColor;
var channelBlend = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.channelBlend;
var createLinearColorScale = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.createLinearColorScale;
var darken = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.darken;
var hexBlend = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.hexBlend;
var hexString = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.hexString;
var hexToRGBString = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.hexToRGBString;
var normalizeToHexString = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.normalizeToHexString;
var parseColorString = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.parseColorString;
var rgbBlend = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.rgbBlend;
var rgbString = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.rgbString;
var rotate = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.rotate;
var shadeColor = _colorUtils__WEBPACK_IMPORTED_MODULE_1__.shadeColor;

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-colorutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-colorutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFillColorByPropertyName": () => (/* binding */ getFillColorByPropertyName),
/* harmony export */   "getValue": () => (/* binding */ getValue)
/* harmony export */ });
function getValue(object, propertyName, defaultValue) {
    if (!object) {
        return defaultValue;
    }
    const propertyValue = object[propertyName];
    if (propertyValue === undefined) {
        return defaultValue;
    }
    return propertyValue;
}
/** Gets the solid color from a fill property using only a propertyName */
function getFillColorByPropertyName(object, propertyName, defaultColor) {
    const value = getValue(object, propertyName);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
//# sourceMappingURL=dataViewObject.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-colorutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-colorutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCommonValue": () => (/* binding */ getCommonValue),
/* harmony export */   "getFillColor": () => (/* binding */ getFillColor),
/* harmony export */   "getObject": () => (/* binding */ getObject),
/* harmony export */   "getValue": () => (/* binding */ getValue)
/* harmony export */ });
/* harmony import */ var _dataViewObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataViewObject */ "./node_modules/powerbi-visuals-utils-colorutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js");

/** Gets the value of the given object/property pair. */
function getValue(objects, propertyId, defaultValue) {
    if (!objects) {
        return defaultValue;
    }
    return _dataViewObject__WEBPACK_IMPORTED_MODULE_0__.getValue(objects[propertyId.objectName], propertyId.propertyName, defaultValue);
}
/** Gets an object from objects. */
function getObject(objects, objectName, defaultValue) {
    if (objects && objects[objectName]) {
        return objects[objectName];
    }
    return defaultValue;
}
/** Gets the solid color from a fill property. */
function getFillColor(objects, propertyId, defaultColor) {
    const value = getValue(objects, propertyId);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
function getCommonValue(objects, propertyId, defaultValue) {
    const value = getValue(objects, propertyId, defaultValue);
    if (value && value.solid) {
        return value.solid.color;
    }
    if (value === undefined
        || value === null
        || (typeof value === "object" && !value.solid)) {
        return defaultValue;
    }
    return value;
}
//# sourceMappingURL=dataViewObjects.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/converterHelper.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-dataviewutils/lib/converterHelper.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "converterHelper": () => (/* binding */ converterHelper)
/* harmony export */ });
/* harmony import */ var _dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataRoleHelper */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js");
// powerbi.extensibility.utils.dataview

var converterHelper;
(function (converterHelper) {
    function categoryIsAlsoSeriesRole(dataView, seriesRoleName, categoryRoleName) {
        if (dataView.categories && dataView.categories.length > 0) {
            // Need to pivot data if our category soure is a series role
            let category = dataView.categories[0];
            return category.source &&
                _dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.hasRole(category.source, seriesRoleName) &&
                _dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.hasRole(category.source, categoryRoleName);
        }
        return false;
    }
    converterHelper.categoryIsAlsoSeriesRole = categoryIsAlsoSeriesRole;
    function getSeriesName(source) {
        return (source.groupName !== undefined)
            ? source.groupName
            : source.queryName;
    }
    converterHelper.getSeriesName = getSeriesName;
    function isImageUrlColumn(column) {
        let misc = getMiscellaneousTypeDescriptor(column);
        return misc != null && misc.imageUrl === true;
    }
    converterHelper.isImageUrlColumn = isImageUrlColumn;
    function isWebUrlColumn(column) {
        let misc = getMiscellaneousTypeDescriptor(column);
        return misc != null && misc.webUrl === true;
    }
    converterHelper.isWebUrlColumn = isWebUrlColumn;
    function getMiscellaneousTypeDescriptor(column) {
        return column
            && column.type
            && column.type.misc;
    }
    converterHelper.getMiscellaneousTypeDescriptor = getMiscellaneousTypeDescriptor;
    function hasImageUrlColumn(dataView) {
        if (!dataView || !dataView.metadata || !dataView.metadata.columns || !dataView.metadata.columns.length) {
            return false;
        }
        return dataView.metadata.columns.some((column) => isImageUrlColumn(column) === true);
    }
    converterHelper.hasImageUrlColumn = hasImageUrlColumn;
})(converterHelper || (converterHelper = {}));
//# sourceMappingURL=converterHelper.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js":
/*!********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCategoryIndexOfRole": () => (/* binding */ getCategoryIndexOfRole),
/* harmony export */   "getMeasureIndexOfRole": () => (/* binding */ getMeasureIndexOfRole),
/* harmony export */   "hasRole": () => (/* binding */ hasRole),
/* harmony export */   "hasRoleInDataView": () => (/* binding */ hasRoleInDataView),
/* harmony export */   "hasRoleInValueColumn": () => (/* binding */ hasRoleInValueColumn)
/* harmony export */ });
function getMeasureIndexOfRole(grouped, roleName) {
    if (!grouped || !grouped.length) {
        return -1;
    }
    let firstGroup = grouped[0];
    if (firstGroup.values && firstGroup.values.length > 0) {
        for (let i = 0, len = firstGroup.values.length; i < len; ++i) {
            let value = firstGroup.values[i];
            if (value && value.source) {
                if (hasRole(value.source, roleName)) {
                    return i;
                }
            }
        }
    }
    return -1;
}
function getCategoryIndexOfRole(categories, roleName) {
    if (categories && categories.length) {
        for (let i = 0, ilen = categories.length; i < ilen; i++) {
            if (hasRole(categories[i].source, roleName)) {
                return i;
            }
        }
    }
    return -1;
}
function hasRole(column, name) {
    let roles = column.roles;
    return roles && roles[name];
}
function hasRoleInDataView(dataView, name) {
    return dataView != null
        && dataView.metadata != null
        && dataView.metadata.columns
        && dataView.metadata.columns.some((c) => c.roles && c.roles[name] !== undefined); // any is an alias of some
}
function hasRoleInValueColumn(valueColumn, name) {
    return valueColumn
        && valueColumn.source
        && valueColumn.source.roles
        && (valueColumn.source.roles[name] === true);
}
//# sourceMappingURL=dataRoleHelper.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js":
/*!********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFillColorByPropertyName": () => (/* binding */ getFillColorByPropertyName),
/* harmony export */   "getValue": () => (/* binding */ getValue)
/* harmony export */ });
function getValue(object, propertyName, defaultValue) {
    if (!object) {
        return defaultValue;
    }
    let propertyValue = object[propertyName];
    if (propertyValue === undefined) {
        return defaultValue;
    }
    return propertyValue;
}
/** Gets the solid color from a fill property using only a propertyName */
function getFillColorByPropertyName(object, propertyName, defaultColor) {
    let value = getValue(object, propertyName);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
//# sourceMappingURL=dataViewObject.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCommonValue": () => (/* binding */ getCommonValue),
/* harmony export */   "getFillColor": () => (/* binding */ getFillColor),
/* harmony export */   "getObject": () => (/* binding */ getObject),
/* harmony export */   "getValue": () => (/* binding */ getValue)
/* harmony export */ });
/* harmony import */ var _dataViewObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataViewObject */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js");

/** Gets the value of the given object/property pair. */
function getValue(objects, propertyId, defaultValue) {
    if (!objects) {
        return defaultValue;
    }
    return _dataViewObject__WEBPACK_IMPORTED_MODULE_0__.getValue(objects[propertyId.objectName], propertyId.propertyName, defaultValue);
}
/** Gets an object from objects. */
function getObject(objects, objectName, defaultValue) {
    if (objects && objects[objectName]) {
        return objects[objectName];
    }
    return defaultValue;
}
/** Gets the solid color from a fill property. */
function getFillColor(objects, propertyId, defaultColor) {
    const value = getValue(objects, propertyId);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
function getCommonValue(objects, propertyId, defaultValue) {
    const value = getValue(objects, propertyId, defaultValue);
    if (value && value.solid) {
        return value.solid.color;
    }
    if (value === undefined
        || value === null
        || (typeof value === "object" && !value.solid)) {
        return defaultValue;
    }
    return value;
}
//# sourceMappingURL=dataViewObjects.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataViewObjectsParser": () => (/* binding */ DataViewObjectsParser)
/* harmony export */ });
/* harmony import */ var _dataViewObjects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataViewObjects */ "./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js");

class DataViewObjectsParser {
    static getDefault() {
        return new this();
    }
    static createPropertyIdentifier(objectName, propertyName) {
        return {
            objectName,
            propertyName
        };
    }
    static parse(dataView) {
        let dataViewObjectParser = this.getDefault(), properties;
        if (!dataView || !dataView.metadata || !dataView.metadata.objects) {
            return dataViewObjectParser;
        }
        properties = dataViewObjectParser.getProperties();
        for (let objectName in properties) {
            for (let propertyName in properties[objectName]) {
                const defaultValue = dataViewObjectParser[objectName][propertyName];
                dataViewObjectParser[objectName][propertyName] = _dataViewObjects__WEBPACK_IMPORTED_MODULE_0__.getCommonValue(dataView.metadata.objects, properties[objectName][propertyName], defaultValue);
            }
        }
        return dataViewObjectParser;
    }
    static isPropertyEnumerable(propertyName) {
        return !DataViewObjectsParser.InnumerablePropertyPrefix.test(propertyName);
    }
    static enumerateObjectInstances(dataViewObjectParser, options) {
        let dataViewProperties = dataViewObjectParser && dataViewObjectParser[options.objectName];
        if (!dataViewProperties) {
            return [];
        }
        let instance = {
            objectName: options.objectName,
            selector: null,
            properties: {}
        };
        for (let key in dataViewProperties) {
            if (dataViewProperties.hasOwnProperty(key)) {
                instance.properties[key] = dataViewProperties[key];
            }
        }
        return {
            instances: [instance]
        };
    }
    getProperties() {
        let properties = {}, objectNames = Object.keys(this);
        objectNames.forEach((objectName) => {
            if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {
                let propertyNames = Object.keys(this[objectName]);
                properties[objectName] = {};
                propertyNames.forEach((propertyName) => {
                    if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {
                        properties[objectName][propertyName] =
                            DataViewObjectsParser.createPropertyIdentifier(objectName, propertyName);
                    }
                });
            }
        });
        return properties;
    }
}
DataViewObjectsParser.InnumerablePropertyPrefix = /^_/;
//# sourceMappingURL=dataViewObjectsParser.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.cultures.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.cultures.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/*
 * Globalize Cultures
 *
 * http://github.com/jquery/globalize
 *
 * Copyright Software Freedom Conservancy, Inc.
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * This file was generated by the Globalize Culture Generator
 * Translation: bugs found in this file need to be fixed in the generator
 */
var powerbiGlobalizeLocales_1 = __webpack_require__(/*! ./powerbiGlobalizeLocales */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/powerbiGlobalizeLocales.js");
function injectCultures(Globalize) {
    Object.keys(powerbiGlobalizeLocales_1.locales).forEach(function (locale) { return Globalize.addCultureInfo.apply(Globalize, powerbiGlobalizeLocales_1.locales[locale]); });
}
exports["default"] = injectCultures;
//# sourceMappingURL=globalize.cultures.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseNegativePattern = exports.parseExact = exports.getEraYear = exports.getEra = exports.getTokenRegExp = exports.formatNumber = exports.formatDate = exports.expandFormat = exports.appendPreOrPostMatch = exports.zeroPad = exports.trim = exports.startsWith = exports.isObject = exports.isFunction = exports.isArray = exports.extend = exports.endsWith = exports.arrayIndexOf = exports.regexTrim = exports.regexParseFloat = exports.regexInfinity = exports.regexHex = exports.Globalize = void 0;
// Global variable (Globalize) or CommonJS module (globalize)
exports.Globalize = function (cultureSelector) {
    return new exports.Globalize.prototype.init(cultureSelector);
};
exports.Globalize.cultures = {};
exports.Globalize.prototype = {
    constructor: exports.Globalize,
    init: function (cultureSelector) {
        this.cultures = exports.Globalize.cultures;
        this.cultureSelector = cultureSelector;
        return this;
    }
};
exports.Globalize.prototype.init.prototype = exports.Globalize.prototype;
// 1.	 When defining a culture, all fields are required except the ones stated as optional.
// 2.	 Each culture should have a ".calendars" object with at least one calendar named "standard"
//		 which serves as the default calendar in use by that culture.
// 3.	 Each culture should have a ".calendar" object which is the current calendar being used,
//		 it may be dynamically changed at any time to one of the calendars in ".calendars".
exports.Globalize.cultures["default"] = {
    // A unique name for the culture in the form <language code>-<country/region code>
    name: "en",
    // the name of the culture in the english language
    englishName: "English",
    // the name of the culture in its own language
    nativeName: "English",
    // whether the culture uses right-to-left text
    isRTL: false,
    // "language" is used for so-called "specific" cultures.
    // For example, the culture "es-CL" means "Spanish, in Chili".
    // It represents the Spanish-speaking culture as it is in Chili,
    // which might have different formatting rules or even translations
    // than Spanish in Spain. A "neutral" culture is one that is not
    // specific to a region. For example, the culture "es" is the generic
    // Spanish culture, which may be a more generalized version of the language
    // that may or may not be what a specific culture expects.
    // For a specific culture like "es-CL", the "language" field refers to the
    // neutral, generic culture information for the language it is using.
    // This is not always a simple matter of the string before the dash.
    // For example, the "zh-Hans" culture is netural (Simplified Chinese).
    // And the "zh-SG" culture is Simplified Chinese in Singapore, whose lanugage
    // field is "zh-CHS", not "zh".
    // This field should be used to navigate from a specific culture to it's
    // more general, neutral culture. If a culture is already as general as it
    // can get, the language may refer to itself.
    language: "en",
    // numberFormat defines general number formatting rules, like the digits in
    // each grouping, the group separator, and how negative numbers are displayed.
    numberFormat: {
        // [negativePattern]
        // Note, numberFormat.pattern has no "positivePattern" unlike percent and currency,
        // but is still defined as an array for consistency with them.
        //   negativePattern: one of "(n)|-n|- n|n-|n -"
        pattern: ["-n"],
        // number of decimal places normally shown
        decimals: 2,
        // string that separates number groups, as in 1,000,000
        ",": ",",
        // string that separates a number from the fractional portion, as in 1.99
        ".": ".",
        // array of numbers indicating the size of each number group.
        // TODO: more detailed description and example
        groupSizes: [3],
        // symbol used for positive numbers
        "+": "+",
        // symbol used for negative numbers
        "-": "-",
        percent: {
            // [negativePattern, positivePattern]
            //   negativePattern: one of "-n %|-n%|-%n|%-n|%n-|n-%|n%-|-% n|n %-|% n-|% -n|n- %"
            //   positivePattern: one of "n %|n%|%n|% n"
            pattern: ["-n %", "n %"],
            // number of decimal places normally shown
            decimals: 2,
            // array of numbers indicating the size of each number group.
            // TODO: more detailed description and example
            groupSizes: [3],
            // string that separates number groups, as in 1,000,000
            ",": ",",
            // string that separates a number from the fractional portion, as in 1.99
            ".": ".",
            // symbol used to represent a percentage
            symbol: "%"
        },
        currency: {
            // [negativePattern, positivePattern]
            //   negativePattern: one of "($n)|-$n|$-n|$n-|(n$)|-n$|n-$|n$-|-n $|-$ n|n $-|$ n-|$ -n|n- $|($ n)|(n $)"
            //   positivePattern: one of "$n|n$|$ n|n $"
            pattern: ["($n)", "$n"],
            // number of decimal places normally shown
            decimals: 2,
            // array of numbers indicating the size of each number group.
            // TODO: more detailed description and example
            groupSizes: [3],
            // string that separates number groups, as in 1,000,000
            ",": ",",
            // string that separates a number from the fractional portion, as in 1.99
            ".": ".",
            // symbol used to represent currency
            symbol: "$"
        }
    },
    // calendars defines all the possible calendars used by this culture.
    // There should be at least one defined with name "standard", and is the default
    // calendar used by the culture.
    // A calendar contains information about how dates are formatted, information about
    // the calendar's eras, a standard set of the date formats,
    // translations for day and month names, and if the calendar is not based on the Gregorian
    // calendar, conversion functions to and from the Gregorian calendar.
    calendars: {
        standard: {
            // name that identifies the type of calendar this is
            name: "Gregorian_USEnglish",
            // separator of parts of a date (e.g. "/" in 11/05/1955)
            "/": "/",
            // separator of parts of a time (e.g. ":" in 05:44 PM)
            ":": ":",
            // the first day of the week (0 = Sunday, 1 = Monday, etc)
            firstDay: 0,
            days: {
                // full day names
                names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                // abbreviated day names
                namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                // shortest day names
                namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
            },
            months: {
                // full month names (13 months for lunar calendards -- 13th month should be "" if not lunar)
                names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
                // abbreviated month names
                namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""]
            },
            // AM and PM designators in one of these forms:
            // The usual view, and the upper and lower case versions
            //   [ standard, lowercase, uppercase ]
            // The culture does not use AM or PM (likely all standard date formats use 24 hour time)
            //   null
            AM: ["AM", "am", "AM"],
            PM: ["PM", "pm", "PM"],
            eras: [
                // eras in reverse chronological order.
                // name: the name of the era in this culture (e.g. A.D., C.E.)
                // start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.
                // offset: offset in years from gregorian calendar
                {
                    "name": "A.D.",
                    "start": null,
                    "offset": 0
                }
            ],
            // when a two digit year is given, it will never be parsed as a four digit
            // year greater than this year (in the appropriate era for the culture)
            // Set it as a full year (e.g. 2029) or use an offset format starting from
            // the current year: "+19" would correspond to 2029 if the current year 2010.
            twoDigitYearMax: 2029,
            // set of predefined date and time patterns used by the culture
            // these represent the format someone in this culture would expect
            // to see given the portions of the date that are shown.
            patterns: {
                // short date pattern
                d: "M/d/yyyy",
                // long date pattern
                D: "dddd, MMMM dd, yyyy",
                // short time pattern
                t: "h:mm tt",
                // long time pattern
                T: "h:mm:ss tt",
                // long date, short time pattern
                f: "dddd, MMMM dd, yyyy h:mm tt",
                // long date, long time pattern
                F: "dddd, MMMM dd, yyyy h:mm:ss tt",
                // month/day pattern
                M: "MMMM dd",
                // month/year pattern
                Y: "yyyy MMMM",
                // S is a sortable format that does not vary by culture
                S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss"
            }
            // optional fields for each calendar:
            /*
            monthsGenitive:
                Same as months but used when the day preceeds the month.
                Omit if the culture has no genitive distinction in month names.
                For an explaination of genitive months, see http://blogs.msdn.com/michkap/archive/2004/12/25/332259.aspx
            convert:
                Allows for the support of non-gregorian based calendars. This convert object is used to
                to convert a date to and from a gregorian calendar date to handle parsing and formatting.
                The two functions:
                    fromGregorian( date )
                        Given the date as a parameter, return an array with parts [ year, month, day ]
                        corresponding to the non-gregorian based year, month, and day for the calendar.
                    toGregorian( year, month, day )
                        Given the non-gregorian year, month, and day, return a new Date() object
                        set to the corresponding date in the gregorian calendar.
            */
        }
    },
    // For localized strings
    messages: {}
};
exports.Globalize.cultures["default"].calendar = exports.Globalize.cultures["default"].calendars.standard;
exports.Globalize.cultures.en = exports.Globalize.cultures["default"];
exports.Globalize.cultureSelector = "en";
//
// private variables
//
exports.regexHex = /^0x[a-f0-9]+$/i;
exports.regexInfinity = /^[+-]?infinity$/i;
exports.regexParseFloat = /^[+-]?\d*\.?\d*(e[+-]?\d+)?$/;
exports.regexTrim = /^\s+|\s+$/g;
//
// private JavaScript utility functions
//
exports.arrayIndexOf = function (array, item) {
    if (array.indexOf) {
        return array.indexOf(item);
    }
    for (var i = 0, length = array.length; i < length; i++) {
        if (array[i] === item) {
            return i;
        }
    }
    return -1;
};
exports.endsWith = function (value, pattern) {
    return value.substring(value.length - pattern.length) === pattern;
};
exports.extend = function (deep) {
    var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
    // Handle a deep copy situation
    if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2;
    }
    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== "object" && !(0, exports.isFunction)(target)) {
        target = {};
    }
    for (; i < length; i++) {
        // Only deal with non-null/undefined values
        if ((options = arguments[i]) != null) {
            // Extend the base object
            for (name in options) {
                src = target[name];
                copy = options[name];
                // Prevent never-ending loop
                if (target === copy) {
                    continue;
                }
                // Recurse if we're merging plain objects or arrays
                if (deep && copy && ((0, exports.isObject)(copy) || (copyIsArray = (0, exports.isArray)(copy)))) {
                    if (copyIsArray) {
                        copyIsArray = false;
                        clone = src && (0, exports.isArray)(src) ? src : [];
                    }
                    else {
                        clone = src && (0, exports.isObject)(src) ? src : {};
                    }
                    // Never move original objects, clone them
                    target[name] = (0, exports.extend)(deep, clone, copy);
                    // Don't bring in undefined values
                }
                else if (copy !== undefined) {
                    target[name] = copy;
                }
            }
        }
    }
    // Return the modified object
    return target;
};
exports.isArray = Array.isArray || function (obj) {
    return Object.prototype.toString.call(obj) === "[object Array]";
};
exports.isFunction = function (obj) {
    return Object.prototype.toString.call(obj) === "[object Function]";
};
exports.isObject = function (obj) {
    return Object.prototype.toString.call(obj) === "[object Object]";
};
exports.startsWith = function (value, pattern) {
    return value.indexOf(pattern) === 0;
};
exports.trim = function (value) {
    return (value + "").replace(exports.regexTrim, "");
};
exports.zeroPad = function (str, count, left) {
    var l;
    for (l = str.length; l < count; l += 1) {
        str = (left ? ("0" + str) : (str + "0"));
    }
    return str;
};
//
// private Globalization utility functions
//
exports.appendPreOrPostMatch = function (preMatch, strings) {
    // appends pre- and post- token match strings while removing escaped characters.
    // Returns a single quote count which is used to determine if the token occurs
    // in a string literal.
    var quoteCount = 0, escaped = false;
    for (var i = 0, il = preMatch.length; i < il; i++) {
        var c = preMatch.charAt(i);
        switch (c) {
            case "\'":
                if (escaped) {
                    strings.push("\'");
                }
                else {
                    quoteCount++;
                }
                escaped = false;
                break;
            case "\\":
                if (escaped) {
                    strings.push("\\");
                }
                escaped = !escaped;
                break;
            default:
                strings.push(c);
                escaped = false;
                break;
        }
    }
    return quoteCount;
};
exports.expandFormat = function (cal, format) {
    // expands unspecified or single character date formats into the full pattern.
    format = format || "F";
    var pattern, patterns = cal.patterns, len = format.length;
    if (len === 1) {
        pattern = patterns[format];
        if (!pattern) {
            throw "Invalid date format string \'" + format + "\'.";
        }
        format = pattern;
    }
    else if (len === 2 && format.charAt(0) === "%") {
        // %X escape format -- intended as a custom format string that is only one character, not a built-in format.
        format = format.charAt(1);
    }
    return format;
};
exports.formatDate = function (value, format, culture) {
    var cal = culture.calendar, convert = cal.convert;
    if (!format || !format.length || format === "i") {
        var ret;
        if (culture && culture.name.length) {
            if (convert) {
                // non-gregorian calendar, so we cannot use built-in toLocaleString()
                ret = (0, exports.formatDate)(value, cal.patterns.F, culture);
            }
            else {
                var eraDate = new Date(value.getTime()), era = (0, exports.getEra)(value, cal.eras);
                eraDate.setFullYear((0, exports.getEraYear)(value, cal, era));
                ret = eraDate.toLocaleString();
            }
        }
        else {
            ret = value.toString();
        }
        return ret;
    }
    var eras = cal.eras, sortable = format === "s";
    format = (0, exports.expandFormat)(cal, format);
    // Start with an empty string
    ret = [];
    var hour, zeros = ["0", "00", "000"], foundDay, checkedDay, dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g, quoteCount = 0, tokenRegExp = (0, exports.getTokenRegExp)(), converted;
    function padZeros(num, c) {
        var r, s = num + "";
        if (c > 1 && s.length < c) {
            r = (zeros[c - 2] + s);
            return r.substring(r.length - c, r.length);
        }
        else {
            r = s;
        }
        return r;
    }
    function hasDay() {
        if (foundDay || checkedDay) {
            return foundDay;
        }
        foundDay = dayPartRegExp.test(format);
        checkedDay = true;
        return foundDay;
    }
    function getPart(date, part) {
        if (converted) {
            return converted[part];
        }
        switch (part) {
            case 0: return date.getFullYear();
            case 1: return date.getMonth();
            case 2: return date.getDate();
        }
    }
    if (!sortable && convert) {
        converted = convert.fromGregorian(value);
    }
    for (;;) {
        // Save the current index
        var index = tokenRegExp.lastIndex, 
        // Look for the next pattern
        ar = tokenRegExp.exec(format);
        // Append the text before the pattern (or the end of the string if not found)
        var preMatch = format.slice(index, ar ? ar.index : format.length);
        quoteCount += (0, exports.appendPreOrPostMatch)(preMatch, ret);
        if (!ar) {
            break;
        }
        // do not replace any matches that occur inside a string literal.
        if (quoteCount % 2) {
            ret.push(ar[0]);
            continue;
        }
        var current = ar[0], clength = current.length;
        switch (current) {
            case "ddd":
            //Day of the week, as a three-letter abbreviation
            case "dddd":
                // Day of the week, using the full name
                var names = (clength === 3) ? cal.days.namesAbbr : cal.days.names;
                ret.push(names[value.getDay()]);
                break;
            case "d":
            // Day of month, without leading zero for single-digit days
            case "dd":
                // Day of month, with leading zero for single-digit days
                foundDay = true;
                ret.push(padZeros(getPart(value, 2), clength));
                break;
            case "MMM":
            // Month, as a three-letter abbreviation
            case "MMMM":
                // Month, using the full name
                var part = getPart(value, 1);
                ret.push((cal.monthsGenitive && hasDay())
                    ?
                        cal.monthsGenitive[clength === 3 ? "namesAbbr" : "names"][part]
                    :
                        cal.months[clength === 3 ? "namesAbbr" : "names"][part]);
                break;
            case "M":
            // Month, as digits, with no leading zero for single-digit months
            case "MM":
                // Month, as digits, with leading zero for single-digit months
                ret.push(padZeros(getPart(value, 1) + 1, clength));
                break;
            case "y":
            // Year, as two digits, but with no leading zero for years less than 10
            case "yy":
            // Year, as two digits, with leading zero for years less than 10
            case "yyyy":
                // Year represented by four full digits
                part = converted ? converted[0] : (0, exports.getEraYear)(value, cal, (0, exports.getEra)(value, eras), sortable);
                if (clength < 4) {
                    part = part % 100;
                }
                ret.push(padZeros(part, clength));
                break;
            case "h":
            // Hours with no leading zero for single-digit hours, using 12-hour clock
            case "hh":
                // Hours with leading zero for single-digit hours, using 12-hour clock
                hour = value.getHours() % 12;
                if (hour === 0)
                    hour = 12;
                ret.push(padZeros(hour, clength));
                break;
            case "H":
            // Hours with no leading zero for single-digit hours, using 24-hour clock
            case "HH":
                // Hours with leading zero for single-digit hours, using 24-hour clock
                ret.push(padZeros(value.getHours(), clength));
                break;
            case "m":
            // Minutes with no leading zero for single-digit minutes
            case "mm":
                // Minutes with leading zero for single-digit minutes
                ret.push(padZeros(value.getMinutes(), clength));
                break;
            case "s":
            // Seconds with no leading zero for single-digit seconds
            case "ss":
                // Seconds with leading zero for single-digit seconds
                ret.push(padZeros(value.getSeconds(), clength));
                break;
            case "t":
            // One character am/pm indicator ("a" or "p")
            case "tt":
                // Multicharacter am/pm indicator
                part = value.getHours() < 12 ? (cal.AM ? cal.AM[0] : " ") : (cal.PM ? cal.PM[0] : " ");
                ret.push(clength === 1 ? part.charAt(0) : part);
                break;
            case "f":
            // Deciseconds
            case "ff":
            // Centiseconds
            case "fff":
                // Milliseconds
                ret.push(padZeros(value.getMilliseconds(), 3).substring(0, clength));
                break;
            case "z":
            // Time zone offset, no leading zero
            case "zz":
                // Time zone offset with leading zero
                hour = value.getTimezoneOffset() / 60;
                ret.push((hour <= 0 ? "+" : "-") + padZeros(Math.floor(Math.abs(hour)), clength));
                break;
            case "zzz":
                // Time zone offset with leading zero
                hour = value.getTimezoneOffset() / 60;
                ret.push((hour <= 0 ? "+" : "-") + padZeros(Math.floor(Math.abs(hour)), 2)
                    // Hard coded ":" separator, rather than using cal.TimeSeparator
                    // Repeated here for consistency, plus ":" was already assumed in date parsing.
                    + ":" + padZeros(Math.abs(value.getTimezoneOffset() % 60), 2));
                break;
            case "g":
            case "gg":
                if (cal.eras) {
                    ret.push(cal.eras[(0, exports.getEra)(value, eras)].name);
                }
                break;
            case "/":
                ret.push(cal["/"]);
                break;
            default:
                throw "Invalid date format pattern \'" + current + "\'.";
        }
    }
    return ret.join("");
};
// formatNumber
(function () {
    var expandNumber;
    expandNumber = function (number, precision, formatInfo) {
        var groupSizes = formatInfo.groupSizes, curSize = groupSizes[0], curGroupIndex = 1, factor = Math.pow(10, precision), rounded = Math.round(number * factor) / factor;
        if (!isFinite(rounded)) {
            rounded = number;
        }
        number = rounded;
        var numberString = number + "", right = "", split = numberString.split(/e/i), exponent = split.length > 1 ? parseInt(split[1], 10) : 0;
        numberString = split[0];
        split = numberString.split(".");
        numberString = split[0];
        right = split.length > 1 ? split[1] : "";
        var l;
        if (exponent > 0) {
            right = (0, exports.zeroPad)(right, exponent, false);
            numberString += right.slice(0, exponent);
            right = right.substring(exponent);
        }
        else if (exponent < 0) {
            exponent = -exponent;
            numberString = (0, exports.zeroPad)(numberString, exponent + 1);
            right = numberString.slice(-exponent, numberString.length) + right;
            numberString = numberString.slice(0, -exponent);
        }
        if (precision > 0) {
            right = formatInfo["."] +
                ((right.length > precision) ? right.slice(0, precision) : (0, exports.zeroPad)(right, precision));
        }
        else {
            right = "";
        }
        var stringIndex = numberString.length - 1, sep = formatInfo[","], ret = "";
        while (stringIndex >= 0) {
            if (curSize === 0 || curSize > stringIndex) {
                return numberString.slice(0, stringIndex + 1) + (ret.length ? (sep + ret + right) : right);
            }
            ret = numberString.slice(stringIndex - curSize + 1, stringIndex + 1) + (ret.length ? (sep + ret) : "");
            stringIndex -= curSize;
            if (curGroupIndex < groupSizes.length) {
                curSize = groupSizes[curGroupIndex];
                curGroupIndex++;
            }
        }
        return numberString.slice(0, stringIndex + 1) + sep + ret + right;
    };
    exports.formatNumber = function (value, format, culture) {
        if (!format || format === "i") {
            return culture.name.length ? value.toLocaleString() : value.toString();
        }
        format = format || "D";
        var nf = culture.numberFormat, number = Math.abs(value), precision = -1, pattern;
        if (format.length > 1)
            precision = parseInt(format.slice(1), 10);
        var current = format.charAt(0).toUpperCase(), formatInfo;
        switch (current) {
            case "D":
                pattern = "n";
                if (precision !== -1) {
                    number = (0, exports.zeroPad)("" + number, precision, true);
                }
                if (value < 0)
                    number = -number;
                break;
            case "N":
                formatInfo = nf;
            // fall through
            case "C":
                formatInfo = formatInfo || nf.currency;
            // fall through
            case "P":
                formatInfo = formatInfo || nf.percent;
                pattern = value < 0 ? formatInfo.pattern[0] : (formatInfo.pattern[1] || "n");
                if (precision === -1)
                    precision = formatInfo.decimals;
                number = expandNumber(number * (current === "P" ? 100 : 1), precision, formatInfo);
                break;
            default:
                throw "Bad number format specifier: " + current;
        }
        var patternParts = /n|\$|-|%/g, ret = "";
        for (;;) {
            var index = patternParts.lastIndex, ar = patternParts.exec(pattern);
            ret += pattern.slice(index, ar ? ar.index : pattern.length);
            if (!ar) {
                break;
            }
            switch (ar[0]) {
                case "n":
                    ret += number;
                    break;
                case "$":
                    ret += nf.currency.symbol;
                    break;
                case "-":
                    // don't make 0 negative
                    if (/[1-9]/.test(number.toString())) {
                        ret += nf["-"];
                    }
                    break;
                case "%":
                    ret += nf.percent.symbol;
                    break;
            }
        }
        return ret;
    };
}());
exports.getTokenRegExp = function () {
    // regular expression for matching date and time tokens in format strings.
    return /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;
};
exports.getEra = function (date, eras) {
    if (!eras)
        return 0;
    var start, ticks = date.getTime();
    for (var i = 0, l = eras.length; i < l; i++) {
        start = eras[i].start;
        if (start === null || ticks >= start) {
            return i;
        }
    }
    return 0;
};
exports.getEraYear = function (date, cal, era, sortable) {
    var year = date.getFullYear();
    if (!sortable && cal.eras) {
        // convert normal gregorian year to era-shifted gregorian
        // year by subtracting the era offset
        year -= cal.eras[era].offset;
    }
    return year;
};
// parseExact
(function () {
    var expandYear, getDayIndex, getMonthIndex, getParseRegExp, outOfRange, toUpper, toUpperArray;
    expandYear = function (cal, year) {
        // expands 2-digit year into 4 digits.
        var now = new Date(), era = (0, exports.getEra)(now);
        if (year < 100) {
            var twoDigitYearMax = cal.twoDigitYearMax;
            twoDigitYearMax = typeof twoDigitYearMax === "string" ? new Date().getFullYear() % 100 + parseInt(twoDigitYearMax, 10) : twoDigitYearMax;
            var curr = (0, exports.getEraYear)(now, cal, era);
            year += curr - (curr % 100);
            if (year > twoDigitYearMax) {
                year -= 100;
            }
        }
        return year;
    };
    getDayIndex = function (cal, value, abbr) {
        var ret, days = cal.days, upperDays = cal._upperDays;
        if (!upperDays) {
            cal._upperDays = upperDays = [
                toUpperArray(days.names),
                toUpperArray(days.namesAbbr),
                toUpperArray(days.namesShort)
            ];
        }
        value = toUpper(value);
        if (abbr) {
            ret = (0, exports.arrayIndexOf)(upperDays[1], value);
            if (ret === -1) {
                ret = (0, exports.arrayIndexOf)(upperDays[2], value);
            }
        }
        else {
            ret = (0, exports.arrayIndexOf)(upperDays[0], value);
        }
        return ret;
    };
    getMonthIndex = function (cal, value, abbr) {
        var months = cal.months, monthsGen = cal.monthsGenitive || cal.months, upperMonths = cal._upperMonths, upperMonthsGen = cal._upperMonthsGen;
        if (!upperMonths) {
            cal._upperMonths = upperMonths = [
                toUpperArray(months.names),
                toUpperArray(months.namesAbbr)
            ];
            cal._upperMonthsGen = upperMonthsGen = [
                toUpperArray(monthsGen.names),
                toUpperArray(monthsGen.namesAbbr)
            ];
        }
        value = toUpper(value);
        var i = (0, exports.arrayIndexOf)(abbr ? upperMonths[1] : upperMonths[0], value);
        if (i < 0) {
            i = (0, exports.arrayIndexOf)(abbr ? upperMonthsGen[1] : upperMonthsGen[0], value);
        }
        return i;
    };
    getParseRegExp = function (cal, format) {
        // converts a format string into a regular expression with groups that
        // can be used to extract date fields from a date string.
        // check for a cached parse regex.
        var re = cal._parseRegExp;
        if (!re) {
            cal._parseRegExp = re = {};
        }
        else {
            var reFormat = re[format];
            if (reFormat) {
                return reFormat;
            }
        }
        // expand single digit formats, then escape regular expression characters.
        var expFormat = (0, exports.expandFormat)(cal, format).replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1"), regexp = ["^"], groups = [], index = 0, quoteCount = 0, tokenRegExp = (0, exports.getTokenRegExp)(), match;
        // iterate through each date token found.
        while ((match = tokenRegExp.exec(expFormat)) !== null) {
            var preMatch = expFormat.slice(index, match.index);
            index = tokenRegExp.lastIndex;
            // don't replace any matches that occur inside a string literal.
            quoteCount += (0, exports.appendPreOrPostMatch)(preMatch, regexp);
            if (quoteCount % 2) {
                regexp.push(match[0]);
                continue;
            }
            // add a regex group for the token.
            var m = match[0], len = m.length, add;
            switch (m) {
                case "dddd":
                case "ddd":
                case "MMMM":
                case "MMM":
                case "gg":
                case "g":
                    add = "(\\D+)";
                    break;
                case "tt":
                case "t":
                    add = "(\\D*)";
                    break;
                case "yyyy":
                case "fff":
                case "ff":
                case "f":
                    add = "(\\d{" + len + "})";
                    break;
                case "dd":
                case "d":
                case "MM":
                case "M":
                case "yy":
                case "y":
                case "HH":
                case "H":
                case "hh":
                case "h":
                case "mm":
                case "m":
                case "ss":
                case "s":
                    add = "(\\d\\d?)";
                    break;
                case "zzz":
                    add = "([+-]?\\d\\d?:\\d{2})";
                    break;
                case "zz":
                case "z":
                    add = "([+-]?\\d\\d?)";
                    break;
                case "/":
                    add = "(\\" + cal["/"] + ")";
                    break;
                default:
                    throw "Invalid date format pattern \'" + m + "\'.";
            }
            if (add) {
                regexp.push(add);
            }
            groups.push(match[0]);
        }
        (0, exports.appendPreOrPostMatch)(expFormat.slice(index), regexp);
        regexp.push("$");
        // allow whitespace to differ when matching formats.
        var regexpStr = regexp.join("").replace(/\s+/g, "\\s+"), parseRegExp = { "regExp": regexpStr, "groups": groups };
        // cache the regex for this format.
        return re[format] = parseRegExp;
    };
    outOfRange = function (value, low, high) {
        return value < low || value > high;
    };
    toUpper = function (value) {
        // "he-IL" has non-breaking space in weekday names.
        return value.split("\u00A0").join(" ").toUpperCase();
    };
    toUpperArray = function (arr) {
        var results = [];
        for (var i = 0, l = arr.length; i < l; i++) {
            results[i] = toUpper(arr[i]);
        }
        return results;
    };
    exports.parseExact = function (value, format, culture) {
        // try to parse the date string by matching against the format string
        // while using the specified culture for date field names.
        value = (0, exports.trim)(value);
        var cal = culture.calendar, 
        // convert date formats into regular expressions with groupings.
        // use the regexp to determine the input format and extract the date fields.
        parseInfo = getParseRegExp(cal, format), match = new RegExp(parseInfo.regExp).exec(value);
        if (match === null) {
            return null;
        }
        // found a date format that matches the input.
        var groups = parseInfo.groups, era = null, year = null, month = null, date = null, weekDay = null, hour = 0, hourOffset, min = 0, sec = 0, msec = 0, tzMinOffset = null, pmHour = false;
        // iterate the format groups to extract and set the date fields.
        for (var j = 0, jl = groups.length; j < jl; j++) {
            var matchGroup = match[j + 1];
            if (matchGroup) {
                var current = groups[j], clength = current.length, matchInt = parseInt(matchGroup, 10);
                switch (current) {
                    case "dd":
                    case "d":
                        // Day of month.
                        date = matchInt;
                        // check that date is generally in valid range, also checking overflow below.
                        if (outOfRange(date, 1, 31))
                            return null;
                        break;
                    case "MMM":
                    case "MMMM":
                        month = getMonthIndex(cal, matchGroup, clength === 3);
                        if (outOfRange(month, 0, 11))
                            return null;
                        break;
                    case "M":
                    case "MM":
                        // Month.
                        month = matchInt - 1;
                        if (outOfRange(month, 0, 11))
                            return null;
                        break;
                    case "y":
                    case "yy":
                    case "yyyy":
                        year = clength < 4 ? expandYear(cal, matchInt) : matchInt;
                        if (outOfRange(year, 0, 9999))
                            return null;
                        break;
                    case "h":
                    case "hh":
                        // Hours (12-hour clock).
                        hour = matchInt;
                        if (hour === 12)
                            hour = 0;
                        if (outOfRange(hour, 0, 11))
                            return null;
                        break;
                    case "H":
                    case "HH":
                        // Hours (24-hour clock).
                        hour = matchInt;
                        if (outOfRange(hour, 0, 23))
                            return null;
                        break;
                    case "m":
                    case "mm":
                        // Minutes.
                        min = matchInt;
                        if (outOfRange(min, 0, 59))
                            return null;
                        break;
                    case "s":
                    case "ss":
                        // Seconds.
                        sec = matchInt;
                        if (outOfRange(sec, 0, 59))
                            return null;
                        break;
                    case "tt":
                    case "t":
                        // AM/PM designator.
                        // see if it is standard, upper, or lower case PM. If not, ensure it is at least one of
                        // the AM tokens. If not, fail the parse for this format.
                        pmHour = cal.PM && (matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2]);
                        if (!pmHour && (!cal.AM || (matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2])))
                            return null;
                        break;
                    case "f":
                    // Deciseconds.
                    case "ff":
                    // Centiseconds.
                    case "fff":
                        // Milliseconds.
                        msec = matchInt * Math.pow(10, 3 - clength);
                        if (outOfRange(msec, 0, 999))
                            return null;
                        break;
                    case "ddd":
                    // Day of week.
                    case "dddd":
                        // Day of week.
                        weekDay = getDayIndex(cal, matchGroup, clength === 3);
                        if (outOfRange(weekDay, 0, 6))
                            return null;
                        break;
                    case "zzz":
                        // Time zone offset in +/- hours:min.
                        var offsets = matchGroup.split(/:/);
                        if (offsets.length !== 2)
                            return null;
                        hourOffset = parseInt(offsets[0], 10);
                        if (outOfRange(hourOffset, -12, 13))
                            return null;
                        var minOffset = parseInt(offsets[1], 10);
                        if (outOfRange(minOffset, 0, 59))
                            return null;
                        tzMinOffset = (hourOffset * 60) + ((0, exports.startsWith)(matchGroup, "-") ? -minOffset : minOffset);
                        break;
                    case "z":
                    case "zz":
                        // Time zone offset in +/- hours.
                        hourOffset = matchInt;
                        if (outOfRange(hourOffset, -12, 13))
                            return null;
                        tzMinOffset = hourOffset * 60;
                        break;
                    case "g":
                    case "gg":
                        var eraName = matchGroup;
                        if (!eraName || !cal.eras)
                            return null;
                        eraName = (0, exports.trim)(eraName.toLowerCase());
                        for (var i = 0, l = cal.eras.length; i < l; i++) {
                            if (eraName === cal.eras[i].name.toLowerCase()) {
                                era = i;
                                break;
                            }
                        }
                        // could not find an era with that name
                        if (era === null)
                            return null;
                        break;
                }
            }
        }
        var result = new Date(), defaultYear, convert = cal.convert;
        defaultYear = convert ? convert.fromGregorian(result)[0] : result.getFullYear();
        if (year === null) {
            year = defaultYear;
        }
        else if (cal.eras) {
            // year must be shifted to normal gregorian year
            // but not if year was not specified, its already normal gregorian
            // per the main if clause above.
            year += cal.eras[(era || 0)].offset;
        }
        // set default day and month to 1 and January, so if unspecified, these are the defaults
        // instead of the current day/month.
        if (month === null) {
            month = 0;
        }
        if (date === null) {
            date = 1;
        }
        // now have year, month, and date, but in the culture's calendar.
        // convert to gregorian if necessary
        if (convert) {
            result = convert.toGregorian(year, month, date);
            // conversion failed, must be an invalid match
            if (result === null)
                return null;
        }
        else {
            // have to set year, month and date together to avoid overflow based on current date.
            result.setFullYear(year, month, date);
            // check to see if date overflowed for specified month (only checked 1-31 above).
            if (result.getDate() !== date)
                return null;
            // invalid day of week.
            if (weekDay !== null && result.getDay() !== weekDay) {
                return null;
            }
        }
        // if pm designator token was found make sure the hours fit the 24-hour clock.
        if (pmHour && hour < 12) {
            hour += 12;
        }
        result.setHours(hour, min, sec, msec);
        if (tzMinOffset !== null) {
            // adjust timezone to utc before applying local offset.
            var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());
            // Safari limits hours and minutes to the range of -127 to 127.	 We need to use setHours
            // to ensure both these fields will not exceed this range.	adjustedMin will range
            // somewhere between -1440 and 1500, so we only need to split this into hours.
            result.setHours(result.getHours() + parseInt((adjustedMin / 60).toString(), 10), adjustedMin % 60);
        }
        return result;
    };
}());
exports.parseNegativePattern = function (value, nf, negativePattern) {
    var neg = nf["-"], pos = nf["+"], ret;
    switch (negativePattern) {
        case "n -":
            neg = " " + neg;
            pos = " " + pos;
        // fall through
        case "n-":
            if ((0, exports.endsWith)(value, neg)) {
                ret = ["-", value.substring(0, value.length - neg.length)];
            }
            else if ((0, exports.endsWith)(value, pos)) {
                ret = ["+", value.substring(0, value.length - pos.length)];
            }
            break;
        case "- n":
            neg += " ";
            pos += " ";
        // fall through
        case "-n":
            if ((0, exports.startsWith)(value, neg)) {
                ret = ["-", value.substring(neg.length)];
            }
            else if ((0, exports.startsWith)(value, pos)) {
                ret = ["+", value.substring(pos.length)];
            }
            break;
        case "(n)":
            if ((0, exports.startsWith)(value, "(") && (0, exports.endsWith)(value, ")")) {
                ret = ["-", value.substring(1, value.length - 1)];
            }
            break;
    }
    return ret || ["", value];
};
//
// public instance functions
//
exports.Globalize.prototype.findClosestCulture = function (cultureSelector) {
    return exports.Globalize.findClosestCulture.call(this, cultureSelector);
};
exports.Globalize.prototype.format = function (value, format, cultureSelector) {
    return exports.Globalize.format.call(this, value, format, cultureSelector);
};
exports.Globalize.prototype.localize = function (key, cultureSelector) {
    return exports.Globalize.localize.call(this, key, cultureSelector);
};
exports.Globalize.prototype.parseInt = function (value, radix, cultureSelector) {
    return exports.Globalize.parseInt.call(this, value, radix, cultureSelector);
};
exports.Globalize.prototype.parseFloat = function (value, radix, cultureSelector) {
    return exports.Globalize.parseFloat.call(this, value, radix, cultureSelector);
};
exports.Globalize.prototype.culture = function (cultureSelector) {
    return exports.Globalize.culture.call(this, cultureSelector);
};
//
// public singleton functions
//
exports.Globalize.addCultureInfo = function (cultureName, baseCultureName, info) {
    var base = {}, isNew = false;
    if (typeof cultureName !== "string") {
        // cultureName argument is optional string. If not specified, assume info is first
        // and only argument. Specified info deep-extends current culture.
        info = cultureName;
        cultureName = this.culture().name;
        base = this.cultures[cultureName];
    }
    else if (typeof baseCultureName !== "string") {
        // baseCultureName argument is optional string. If not specified, assume info is second
        // argument. Specified info deep-extends specified culture.
        // If specified culture does not exist, create by deep-extending default
        info = baseCultureName;
        isNew = (this.cultures[cultureName] == null);
        base = this.cultures[cultureName] || this.cultures["default"];
    }
    else {
        // cultureName and baseCultureName specified. Assume a new culture is being created
        // by deep-extending an specified base culture
        isNew = true;
        base = this.cultures[baseCultureName];
    }
    this.cultures[cultureName] = (0, exports.extend)(true, {}, base, info);
    // Make the standard calendar the current culture if it's a new culture
    if (isNew) {
        this.cultures[cultureName].calendar = this.cultures[cultureName].calendars.standard;
    }
};
exports.Globalize.findClosestCulture = function (name) {
    var match;
    if (!name) {
        return this.cultures[this.cultureSelector] || this.cultures["default"];
    }
    if (typeof name === "string") {
        name = name.split(",");
    }
    if ((0, exports.isArray)(name)) {
        var lang, cultures = this.cultures, list = name, i, l = list.length, prioritized = [];
        for (i = 0; i < l; i++) {
            name = (0, exports.trim)(list[i]);
            var pri, parts = name.split(";");
            lang = (0, exports.trim)(parts[0]);
            if (parts.length === 1) {
                pri = 1;
            }
            else {
                name = (0, exports.trim)(parts[1]);
                if (name.indexOf("q=") === 0) {
                    name = name.substring(2);
                    pri = parseFloat(name);
                    pri = isNaN(pri) ? 0 : pri;
                }
                else {
                    pri = 1;
                }
            }
            prioritized.push({ lang: lang, pri: pri });
        }
        prioritized.sort(function (a, b) {
            return a.pri < b.pri ? 1 : -1;
        });
        // exact match
        for (i = 0; i < l; i++) {
            lang = prioritized[i].lang;
            match = cultures[lang];
            if (match) {
                return match;
            }
        }
        // neutral language match
        for (i = 0; i < l; i++) {
            lang = prioritized[i].lang;
            do {
                var index = lang.lastIndexOf("-");
                if (index === -1) {
                    break;
                }
                // strip off the last part. e.g. en-US => en
                lang = lang.substring(0, index);
                match = cultures[lang];
                if (match) {
                    return match;
                }
            } while (1);
        }
        // last resort: match first culture using that language
        for (i = 0; i < l; i++) {
            lang = prioritized[i].lang;
            for (var cultureKey in cultures) {
                var culture = cultures[cultureKey];
                if (culture.language == lang) {
                    return culture;
                }
            }
        }
    }
    else if (typeof name === "object") {
        return name;
    }
    return match || null;
};
exports.Globalize.format = function (value, format, cultureSelector) {
    var culture = this.findClosestCulture(cultureSelector);
    if (value instanceof Date) {
        value = (0, exports.formatDate)(value, format, culture);
    }
    else if (typeof value === "number") {
        value = (0, exports.formatNumber)(value, format, culture);
    }
    return value;
};
exports.Globalize.localize = function (key, cultureSelector) {
    return (this.findClosestCulture(cultureSelector).messages[key]
        ||
            this.cultures["default"].messages["key"]);
};
exports.Globalize.parseDate = function (value, formats, culture) {
    culture = this.findClosestCulture(culture);
    var date, prop, patterns;
    if (formats) {
        if (typeof formats === "string") {
            formats = [formats];
        }
        if (formats.length) {
            for (var i = 0, l = formats.length; i < l; i++) {
                var format = formats[i];
                if (format) {
                    date = (0, exports.parseExact)(value, format, culture);
                    if (date) {
                        break;
                    }
                }
            }
        }
    }
    else {
        patterns = culture.calendar.patterns;
        for (prop in patterns) {
            date = (0, exports.parseExact)(value, patterns[prop], culture);
            if (date) {
                break;
            }
        }
    }
    return date || null;
};
exports.Globalize.parseInt = function (value, radix, cultureSelector) {
    return Math.floor(exports.Globalize.parseFloat(value, radix, cultureSelector));
};
exports.Globalize.parseFloat = function (value, radix, cultureSelector) {
    // radix argument is optional
    if (typeof radix !== "number") {
        cultureSelector = radix;
        radix = 10;
    }
    var culture = this.findClosestCulture(cultureSelector);
    var ret = NaN, nf = culture.numberFormat;
    if (value.indexOf(culture.numberFormat.currency.symbol) > -1) {
        // remove currency symbol
        value = value.replace(culture.numberFormat.currency.symbol, "");
        // replace decimal seperator
        value = value.replace(culture.numberFormat.currency["."], culture.numberFormat["."]);
    }
    // trim leading and trailing whitespace
    value = (0, exports.trim)(value);
    // allow infinity or hexidecimal
    if (exports.regexInfinity.test(value)) {
        ret = parseFloat(value);
    }
    else if (!radix && exports.regexHex.test(value)) {
        ret = parseInt(value, 16);
    }
    else {
        var signInfo = (0, exports.parseNegativePattern)(value, nf, nf.pattern[0]), sign = signInfo[0], num = signInfo[1];
        // determine sign and number
        if (sign === "" && nf.pattern[0] !== "-n") {
            signInfo = (0, exports.parseNegativePattern)(value, nf, "-n");
            sign = signInfo[0];
            num = signInfo[1];
        }
        sign = sign || "+";
        // determine exponent and number
        var exponent, intAndFraction, exponentPos = num.indexOf("e");
        if (exponentPos < 0)
            exponentPos = num.indexOf("E");
        if (exponentPos < 0) {
            intAndFraction = num;
            exponent = null;
        }
        else {
            intAndFraction = num.substring(0, exponentPos);
            exponent = num.substring(exponentPos + 1);
        }
        // determine decimal position
        var integer, fraction, decSep = nf["."], decimalPos = intAndFraction.indexOf(decSep);
        if (decimalPos < 0) {
            integer = intAndFraction;
            fraction = null;
        }
        else {
            integer = intAndFraction.substring(0, decimalPos);
            fraction = intAndFraction.substring(decimalPos + decSep.length);
        }
        // handle groups (e.g. 1,000,000)
        var groupSep = nf[","];
        integer = integer.split(groupSep).join("");
        var altGroupSep = groupSep.replace(/\u00A0/g, " ");
        if (groupSep !== altGroupSep) {
            integer = integer.split(altGroupSep).join("");
        }
        // build a natively parsable number string
        var p = sign + integer;
        if (fraction !== null) {
            p += "." + fraction;
        }
        if (exponent !== null) {
            // exponent itself may have a number patternd
            var expSignInfo = (0, exports.parseNegativePattern)(exponent, nf, "-n");
            p += "e" + (expSignInfo[0] || "+") + expSignInfo[1];
        }
        if (exports.regexParseFloat.test(p)) {
            ret = parseFloat(p);
        }
    }
    return ret;
};
exports.Globalize.culture = function (cultureSelector) {
    // setter
    if (typeof cultureSelector !== "undefined") {
        this.cultureSelector = cultureSelector;
    }
    // getter
    return this.findClosestCulture(cultureSelector) || this.culture["default"];
};
//# sourceMappingURL=globalize.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/powerbiGlobalizeLocales.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/powerbiGlobalizeLocales.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.locales = void 0;
exports.locales = {
    "ar": ["ar", "default", {
            "name": "ar",
            "englishName": "Arabic",
            "nativeName": "العربية",
            "language": "ar",
            "isRTL": true,
            "numberFormat": {
                "pattern": ["n-"],
                "currency": {
                    "pattern": ["$n-", "$ n"],
                    "symbol": "ر.س.‏"
                }
            },
            "calendars": {
                "standard": {
                    "name": "UmAlQura",
                    "firstDay": 6,
                    "days": {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    "months": {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "bg": ["bg", "default", {
            name: "bg",
            englishName: "Bulgarian",
            nativeName: "български",
            language: "bg",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "лв."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["неделя", "понеделник", "вторник", "сряда", "четвъртък", "петък", "събота"],
                        namesAbbr: ["нед", "пон", "вт", "ср", "четв", "пет", "съб"],
                        namesShort: ["н", "п", "в", "с", "ч", "п", "с"]
                    },
                    months: {
                        names: ["януари", "февруари", "март", "април", "май", "юни", "юли", "август", "септември", "октомври", "ноември", "декември", ""],
                        namesAbbr: ["ян", "февр", "март", "апр", "май", "юни", "юли", "авг", "септ", "окт", "ноември", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "след новата ера", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy 'г.'",
                        D: "dd MMMM yyyy 'г.'",
                        t: "HH:mm 'ч.'",
                        T: "HH:mm:ss 'ч.'",
                        f: "dd MMMM yyyy 'г.' HH:mm 'ч.'",
                        F: "dd MMMM yyyy 'г.' HH:mm:ss 'ч.'",
                        M: "dd MMMM",
                        Y: "MMMM yyyy 'г.'"
                    }
                }
            }
        }],
    "ca": ["ca", "default", {
            name: "ca",
            englishName: "Catalan",
            nativeName: "català",
            language: "ca",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"],
                        namesAbbr: ["dg.", "dl.", "dt.", "dc.", "dj.", "dv.", "ds."],
                        namesShort: ["dg", "dl", "dt", "dc", "dj", "dv", "ds"]
                    },
                    months: {
                        names: ["gener", "febrer", "març", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre", ""],
                        namesAbbr: ["gen", "feb", "març", "abr", "maig", "juny", "jul", "ag", "set", "oct", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' / 'MMMM' / 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' / 'MMMM' / 'yyyy HH:mm",
                        F: "dddd, d' / 'MMMM' / 'yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' / 'yyyy"
                    }
                }
            }
        }],
    "zh-Hans": ["zh-Hans", "default", {
            name: "zh-Hans",
            englishName: "Chinese (Simplified)",
            nativeName: "中文(简体)",
            language: "zh-Hans",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "cs": ["cs", "default", {
            name: "cs",
            englishName: "Czech",
            nativeName: "čeština",
            language: "cs",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Kč"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["neděle", "pondělí", "úterý", "středa", "čtvrtek", "pátek", "sobota"],
                        namesAbbr: ["ne", "po", "út", "st", "čt", "pá", "so"],
                        namesShort: ["ne", "po", "út", "st", "čt", "pá", "so"]
                    },
                    months: {
                        names: ["leden", "únor", "březen", "duben", "květen", "červen", "červenec", "srpen", "září", "říjen", "listopad", "prosinec", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    monthsGenitive: {
                        names: ["ledna", "února", "března", "dubna", "května", "června", "července", "srpna", "září", "října", "listopadu", "prosince", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["dop.", "dop.", "DOP."],
                    PM: ["odp.", "odp.", "ODP."],
                    eras: [{ "name": "n. l.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "da": ["da", "default", {
            name: "da",
            englishName: "Danish",
            nativeName: "dansk",
            language: "da",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                        namesAbbr: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
                        namesShort: ["sø", "ma", "ti", "on", "to", "fr", "lø"]
                    },
                    months: {
                        names: ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "de": ["de", "default", {
            name: "de",
            englishName: "German",
            nativeName: "Deutsch",
            language: "de",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "el": ["el", "default", {
            name: "el",
            englishName: "Greek",
            nativeName: "Ελληνικά",
            language: "el",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"],
                        namesAbbr: ["Κυρ", "Δευ", "Τρι", "Τετ", "Πεμ", "Παρ", "Σαβ"],
                        namesShort: ["Κυ", "Δε", "Τρ", "Τε", "Πε", "Πα", "Σά"]
                    },
                    months: {
                        names: ["Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος", ""],
                        namesAbbr: ["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαϊ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ", ""]
                    },
                    monthsGenitive: {
                        names: ["Ιανουαρίου", "Φεβρουαρίου", "Μαρτίου", "Απριλίου", "Μαΐου", "Ιουνίου", "Ιουλίου", "Αυγούστου", "Σεπτεμβρίου", "Οκτωβρίου", "Νοεμβρίου", "Δεκεμβρίου", ""],
                        namesAbbr: ["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαϊ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ", ""]
                    },
                    AM: ["πμ", "πμ", "ΠΜ"],
                    PM: ["μμ", "μμ", "ΜΜ"],
                    eras: [{ "name": "μ.Χ.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd, d MMMM yyyy",
                        f: "dddd, d MMMM yyyy h:mm tt",
                        F: "dddd, d MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es": ["es", "default", {
            name: "es",
            englishName: "Spanish",
            nativeName: "español",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fi": ["fi", "default", {
            name: "fi",
            englishName: "Finnish",
            nativeName: "suomi",
            language: "fi",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"],
                        namesAbbr: ["su", "ma", "ti", "ke", "to", "pe", "la"],
                        namesShort: ["su", "ma", "ti", "ke", "to", "pe", "la"]
                    },
                    months: {
                        names: ["tammikuu", "helmikuu", "maaliskuu", "huhtikuu", "toukokuu", "kesäkuu", "heinäkuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu", ""],
                        namesAbbr: ["tammi", "helmi", "maalis", "huhti", "touko", "kesä", "heinä", "elo", "syys", "loka", "marras", "joulu", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM'ta 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM'ta 'yyyy H:mm",
                        F: "d. MMMM'ta 'yyyy H:mm:ss",
                        M: "d. MMMM'ta'",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fr": ["fr", "default", {
            name: "fr",
            englishName: "French",
            nativeName: "français",
            language: "fr",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "he": ["he", "default", {
            name: "he",
            englishName: "Hebrew",
            nativeName: "עברית",
            language: "he",
            isRTL: true,
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "₪"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "שבת"],
                        namesAbbr: ["יום א", "יום ב", "יום ג", "יום ד", "יום ה", "יום ו", "שבת"],
                        namesShort: ["א", "ב", "ג", "ד", "ה", "ו", "ש"]
                    },
                    months: {
                        names: ["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר", ""],
                        namesAbbr: ["ינו", "פבר", "מרץ", "אפר", "מאי", "יונ", "יול", "אוג", "ספט", "אוק", "נוב", "דצמ", ""]
                    },
                    eras: [{ "name": "לספירה", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd dd MMMM yyyy HH:mm",
                        F: "dddd dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                },
                Hebrew: {
                    name: "Hebrew",
                    "/": " ",
                    days: {
                        names: ["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "שבת"],
                        namesAbbr: ["א", "ב", "ג", "ד", "ה", "ו", "ש"],
                        namesShort: ["א", "ב", "ג", "ד", "ה", "ו", "ש"]
                    },
                    months: {
                        names: ["תשרי", "חשון", "כסלו", "טבת", "שבט", "אדר", "אדר ב", "ניסן", "אייר", "סיון", "תמוז", "אב", "אלול"],
                        namesAbbr: ["תשרי", "חשון", "כסלו", "טבת", "שבט", "אדר", "אדר ב", "ניסן", "אייר", "סיון", "תמוז", "אב", "אלול"]
                    },
                    eras: [{ "name": "C.E.", "start": null, "offset": 0 }],
                    twoDigitYearMax: 5790,
                    patterns: {
                        d: "dd MMMM yyyy",
                        D: "dddd dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd dd MMMM yyyy HH:mm",
                        F: "dddd dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hu": ["hu", "default", {
            name: "hu",
            englishName: "Hungarian",
            nativeName: "magyar",
            language: "hu",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Ft"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["vasárnap", "hétfő", "kedd", "szerda", "csütörtök", "péntek", "szombat"],
                        namesAbbr: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
                        namesShort: ["V", "H", "K", "Sze", "Cs", "P", "Szo"]
                    },
                    months: {
                        names: ["január", "február", "március", "április", "május", "június", "július", "augusztus", "szeptember", "október", "november", "december", ""],
                        namesAbbr: ["jan.", "febr.", "márc.", "ápr.", "máj.", "jún.", "júl.", "aug.", "szept.", "okt.", "nov.", "dec.", ""]
                    },
                    AM: ["de.", "de.", "DE."],
                    PM: ["du.", "du.", "DU."],
                    eras: [{ "name": "i.sz.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy.MM.dd.",
                        D: "yyyy. MMMM d.",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy. MMMM d. H:mm",
                        F: "yyyy. MMMM d. H:mm:ss",
                        M: "MMMM d.",
                        Y: "yyyy. MMMM"
                    }
                }
            }
        }],
    "is": ["is", "default", {
            name: "is",
            englishName: "Icelandic",
            nativeName: "íslenska",
            language: "is",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    decimals: 0,
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sunnudagur", "mánudagur", "þriðjudagur", "miðvikudagur", "fimmtudagur", "föstudagur", "laugardagur"],
                        namesAbbr: ["sun.", "mán.", "þri.", "mið.", "fim.", "fös.", "lau."],
                        namesShort: ["su", "má", "þr", "mi", "fi", "fö", "la"]
                    },
                    months: {
                        names: ["janúar", "febrúar", "mars", "apríl", "maí", "júní", "júlí", "ágúst", "september", "október", "nóvember", "desember", ""],
                        namesAbbr: ["jan.", "feb.", "mar.", "apr.", "maí", "jún.", "júl.", "ágú.", "sep.", "okt.", "nóv.", "des.", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "it": ["it", "default", {
            name: "it",
            englishName: "Italian",
            nativeName: "italiano",
            language: "it",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"],
                        namesAbbr: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
                        namesShort: ["do", "lu", "ma", "me", "gi", "ve", "sa"]
                    },
                    months: {
                        names: ["gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""],
                        namesAbbr: ["gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ja": ["ja", "default", {
            name: "ja",
            englishName: "Japanese",
            nativeName: "日本語",
            language: "ja",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    decimals: 0,
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
                        namesAbbr: ["日", "月", "火", "水", "木", "金", "土"],
                        namesShort: ["日", "月", "火", "水", "木", "金", "土"]
                    },
                    months: {
                        names: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["午前", "午前", "午前"],
                    PM: ["午後", "午後", "午後"],
                    eras: [{ "name": "西暦", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                },
                Japanese: {
                    name: "Japanese",
                    days: {
                        names: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
                        namesAbbr: ["日", "月", "火", "水", "木", "金", "土"],
                        namesShort: ["日", "月", "火", "水", "木", "金", "土"]
                    },
                    months: {
                        names: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["午前", "午前", "午前"],
                    PM: ["午後", "午後", "午後"],
                    eras: [{ "name": "平成", "start": null, "offset": 1867 }, { "name": "昭和", "start": -1812153600000, "offset": 1911 }, { "name": "大正", "start": -1357603200000, "offset": 1925 }, { "name": "明治", "start": 60022080000, "offset": 1988 }],
                    twoDigitYearMax: 99,
                    patterns: {
                        d: "gg y/M/d",
                        D: "gg y'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "gg y'年'M'月'd'日' H:mm",
                        F: "gg y'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "gg y'年'M'月'"
                    }
                }
            }
        }],
    "ko": ["ko", "default", {
            name: "ko",
            englishName: "Korean",
            nativeName: "한국어",
            language: "ko",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    decimals: 0,
                    symbol: "₩"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
                        namesAbbr: ["일", "월", "화", "수", "목", "금", "토"],
                        namesShort: ["일", "월", "화", "수", "목", "금", "토"]
                    },
                    months: {
                        names: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["오전", "오전", "오전"],
                    PM: ["오후", "오후", "오후"],
                    eras: [{ "name": "서기", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy'년' M'월' d'일' dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "yyyy'년' M'월' d'일' dddd tt h:mm",
                        F: "yyyy'년' M'월' d'일' dddd tt h:mm:ss",
                        M: "M'월' d'일'",
                        Y: "yyyy'년' M'월'"
                    }
                },
                Korean: {
                    name: "Korean",
                    "/": "-",
                    days: {
                        names: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
                        namesAbbr: ["일", "월", "화", "수", "목", "금", "토"],
                        namesShort: ["일", "월", "화", "수", "목", "금", "토"]
                    },
                    months: {
                        names: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["오전", "오전", "오전"],
                    PM: ["오후", "오후", "오후"],
                    eras: [{ "name": "단기", "start": null, "offset": -2333 }],
                    twoDigitYearMax: 4362,
                    patterns: {
                        d: "gg yyyy-MM-dd",
                        D: "gg yyyy'년' M'월' d'일' dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "gg yyyy'년' M'월' d'일' dddd tt h:mm",
                        F: "gg yyyy'년' M'월' d'일' dddd tt h:mm:ss",
                        M: "M'월' d'일'",
                        Y: "gg yyyy'년' M'월'"
                    }
                }
            }
        }],
    "nl": ["nl", "default", {
            name: "nl",
            englishName: "Dutch",
            nativeName: "Nederlands",
            language: "nl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"],
                        namesAbbr: ["zo", "ma", "di", "wo", "do", "vr", "za"],
                        namesShort: ["zo", "ma", "di", "wo", "do", "vr", "za"]
                    },
                    months: {
                        names: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d-M-yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd d MMMM yyyy H:mm",
                        F: "dddd d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "no": ["no", "default", {
            name: "no",
            englishName: "Norwegian",
            nativeName: "norsk",
            language: "no",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                        namesAbbr: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
                        namesShort: ["sø", "ma", "ti", "on", "to", "fr", "lø"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "pl": ["pl", "default", {
            name: "pl",
            englishName: "Polish",
            nativeName: "polski",
            language: "pl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "zł"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["niedziela", "poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota"],
                        namesAbbr: ["N", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
                        namesShort: ["N", "Pn", "Wt", "Śr", "Cz", "Pt", "So"]
                    },
                    months: {
                        names: ["styczeń", "luty", "marzec", "kwiecień", "maj", "czerwiec", "lipiec", "sierpień", "wrzesień", "październik", "listopad", "grudzień", ""],
                        namesAbbr: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""]
                    },
                    monthsGenitive: {
                        names: ["stycznia", "lutego", "marca", "kwietnia", "maja", "czerwca", "lipca", "sierpnia", "września", "października", "listopada", "grudnia", ""],
                        namesAbbr: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "pt": ["pt", "default", {
            name: "pt",
            englishName: "Portuguese",
            nativeName: "Português",
            language: "pt",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "R$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"],
                        namesAbbr: ["dom", "seg", "ter", "qua", "qui", "sex", "sáb"],
                        namesShort: ["D", "S", "T", "Q", "Q", "S", "S"]
                    },
                    months: {
                        names: ["janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""],
                        namesAbbr: ["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' de 'MMMM' de 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' de 'MMMM' de 'yyyy HH:mm",
                        F: "dddd, d' de 'MMMM' de 'yyyy HH:mm:ss",
                        M: "dd' de 'MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "rm": ["rm", "default", {
            name: "rm",
            englishName: "Romansh",
            nativeName: "Rumantsch",
            language: "rm",
            numberFormat: {
                ",": "'",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "fr."
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dumengia", "glindesdi", "mardi", "mesemna", "gievgia", "venderdi", "sonda"],
                        namesAbbr: ["du", "gli", "ma", "me", "gie", "ve", "so"],
                        namesShort: ["du", "gli", "ma", "me", "gie", "ve", "so"]
                    },
                    months: {
                        names: ["schaner", "favrer", "mars", "avrigl", "matg", "zercladur", "fanadur", "avust", "settember", "october", "november", "december", ""],
                        namesAbbr: ["schan", "favr", "mars", "avr", "matg", "zercl", "fan", "avust", "sett", "oct", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "s. Cr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d MMMM yyyy HH:mm",
                        F: "dddd, d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ro": ["ro", "default", {
            name: "ro",
            englishName: "Romanian",
            nativeName: "română",
            language: "ro",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "lei"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["duminică", "luni", "marţi", "miercuri", "joi", "vineri", "sâmbătă"],
                        namesAbbr: ["D", "L", "Ma", "Mi", "J", "V", "S"],
                        namesShort: ["D", "L", "Ma", "Mi", "J", "V", "S"]
                    },
                    months: {
                        names: ["ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie", ""],
                        namesAbbr: ["ian.", "feb.", "mar.", "apr.", "mai.", "iun.", "iul.", "aug.", "sep.", "oct.", "nov.", "dec.", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ru": ["ru", "default", {
            name: "ru",
            englishName: "Russian",
            nativeName: "русский",
            language: "ru",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"],
                        namesAbbr: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                        namesShort: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"]
                    },
                    months: {
                        names: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    monthsGenitive: {
                        names: ["января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря", ""],
                        namesAbbr: ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy 'г.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'г.' H:mm",
                        F: "d MMMM yyyy 'г.' H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hr": ["hr", "default", {
            name: "hr",
            englishName: "Croatian",
            nativeName: "hrvatski",
            language: "hr",
            numberFormat: {
                pattern: ["- n"],
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kn"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["siječanj", "veljača", "ožujak", "travanj", "svibanj", "lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    monthsGenitive: {
                        names: ["siječnja", "veljače", "ožujka", "travnja", "svibnja", "lipnja", "srpnja", "kolovoza", "rujna", "listopada", "studenog", "prosinca", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy.",
                        D: "d. MMMM yyyy.",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy. H:mm",
                        F: "d. MMMM yyyy. H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "sk": ["sk", "default", {
            name: "sk",
            englishName: "Slovak",
            nativeName: "slovenčina",
            language: "sk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["nedeľa", "pondelok", "utorok", "streda", "štvrtok", "piatok", "sobota"],
                        namesAbbr: ["ne", "po", "ut", "st", "št", "pi", "so"],
                        namesShort: ["ne", "po", "ut", "st", "št", "pi", "so"]
                    },
                    months: {
                        names: ["január", "február", "marec", "apríl", "máj", "jún", "júl", "august", "september", "október", "november", "december", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    monthsGenitive: {
                        names: ["januára", "februára", "marca", "apríla", "mája", "júna", "júla", "augusta", "septembra", "októbra", "novembra", "decembra", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. l.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sq": ["sq", "default", {
            name: "sq",
            englishName: "Albanian",
            nativeName: "shqipe",
            language: "sq",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": ".",
                    ".": ",",
                    symbol: "Lek"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["e diel", "e hënë", "e martë", "e mërkurë", "e enjte", "e premte", "e shtunë"],
                        namesAbbr: ["Die", "Hën", "Mar", "Mër", "Enj", "Pre", "Sht"],
                        namesShort: ["Di", "Hë", "Ma", "Më", "En", "Pr", "Sh"]
                    },
                    months: {
                        names: ["janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nëntor", "dhjetor", ""],
                        namesAbbr: ["Jan", "Shk", "Mar", "Pri", "Maj", "Qer", "Kor", "Gsh", "Sht", "Tet", "Nën", "Dhj", ""]
                    },
                    AM: ["PD", "pd", "PD"],
                    PM: ["MD", "md", "MD"],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy-MM-dd",
                        t: "h:mm.tt",
                        T: "h:mm:ss.tt",
                        f: "yyyy-MM-dd h:mm.tt",
                        F: "yyyy-MM-dd h:mm:ss.tt",
                        Y: "yyyy-MM"
                    }
                }
            }
        }],
    "sv": ["sv", "default", {
            name: "sv",
            englishName: "Swedish",
            nativeName: "svenska",
            language: "sv",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"],
                        namesAbbr: ["sö", "må", "ti", "on", "to", "fr", "lö"],
                        namesShort: ["sö", "må", "ti", "on", "to", "fr", "lö"]
                    },
                    months: {
                        names: ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "'den 'd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "'den 'd MMMM yyyy HH:mm",
                        F: "'den 'd MMMM yyyy HH:mm:ss",
                        M: "'den 'd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "th": ["th", "default", {
            name: "th",
            englishName: "Thai",
            nativeName: "ไทย",
            language: "th",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "฿"
                }
            },
            calendars: {
                standard: {
                    name: "ThaiBuddhist",
                    firstDay: 1,
                    days: {
                        names: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"],
                        namesAbbr: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
                        namesShort: ["อ", "จ", "อ", "พ", "พ", "ศ", "ส"]
                    },
                    months: {
                        names: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""],
                        namesAbbr: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""]
                    },
                    eras: [{ "name": "พ.ศ.", "start": null, "offset": -543 }],
                    twoDigitYearMax: 2572,
                    patterns: {
                        d: "d/M/yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 1,
                    days: {
                        names: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"],
                        namesAbbr: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
                        namesShort: ["อ", "จ", "อ", "พ", "พ", "ศ", "ส"]
                    },
                    months: {
                        names: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""],
                        namesAbbr: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "'วัน'dddd'ที่' d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "'วัน'dddd'ที่' d MMMM yyyy H:mm",
                        F: "'วัน'dddd'ที่' d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tr": ["tr", "default", {
            name: "tr",
            englishName: "Turkish",
            nativeName: "Türkçe",
            language: "tr",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "TL"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"],
                        namesAbbr: ["Paz", "Pzt", "Sal", "Çar", "Per", "Cum", "Cmt"],
                        namesShort: ["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"]
                    },
                    months: {
                        names: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık", ""],
                        namesAbbr: ["Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dd MMMM yyyy dddd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy dddd HH:mm",
                        F: "dd MMMM yyyy dddd HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ur": ["ur", "default", {
            name: "ur",
            englishName: "Urdu",
            nativeName: "اُردو",
            language: "ur",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["$n-", "$n"],
                    symbol: "Rs"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"],
                        namesAbbr: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"],
                        namesShort: ["ا", "پ", "م", "ب", "ج", "ج", "ه"]
                    },
                    months: {
                        names: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""],
                        namesAbbr: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""]
                    },
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        f: "dd MMMM, yyyy h:mm tt",
                        F: "dd MMMM, yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                }
            }
        }],
    "id": ["id", "default", {
            name: "id",
            englishName: "Indonesian",
            nativeName: "Bahasa Indonesia",
            language: "id",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    decimals: 0,
                    ",": ".",
                    ".": ",",
                    symbol: "Rp"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"],
                        namesAbbr: ["Minggu", "Sen", "Sel", "Rabu", "Kamis", "Jumat", "Sabtu"],
                        namesShort: ["M", "S", "S", "R", "K", "J", "S"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "Nopember", "Desember", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agust", "Sep", "Okt", "Nop", "Des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM yyyy H:mm",
                        F: "dd MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "uk": ["uk", "default", {
            name: "uk",
            englishName: "Ukrainian",
            nativeName: "українська",
            language: "uk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "₴"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["неділя", "понеділок", "вівторок", "середа", "четвер", "п'ятниця", "субота"],
                        namesAbbr: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                        namesShort: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"]
                    },
                    months: {
                        names: ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень", ""],
                        namesAbbr: ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру", ""]
                    },
                    monthsGenitive: {
                        names: ["січня", "лютого", "березня", "квітня", "травня", "червня", "липня", "серпня", "вересня", "жовтня", "листопада", "грудня", ""],
                        namesAbbr: ["січ", "лют", "бер", "кві", "тра", "чер", "лип", "сер", "вер", "жов", "лис", "гру", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy' р.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy' р.' H:mm",
                        F: "d MMMM yyyy' р.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy' р.'"
                    }
                }
            }
        }],
    "be": ["be", "default", {
            name: "be",
            englishName: "Belarusian",
            nativeName: "Беларускі",
            language: "be",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["нядзеля", "панядзелак", "аўторак", "серада", "чацвер", "пятніца", "субота"],
                        namesAbbr: ["нд", "пн", "аў", "ср", "чц", "пт", "сб"],
                        namesShort: ["нд", "пн", "аў", "ср", "чц", "пт", "сб"]
                    },
                    months: {
                        names: ["Студзень", "Люты", "Сакавік", "Красавік", "Май", "Чэрвень", "Ліпень", "Жнівень", "Верасень", "Кастрычнік", "Лістапад", "Снежань", ""],
                        namesAbbr: ["Сту", "Лют", "Сак", "Кра", "Май", "Чэр", "Ліп", "Жні", "Вер", "Кас", "Ліс", "Сне", ""]
                    },
                    monthsGenitive: {
                        names: ["студзеня", "лютага", "сакавіка", "красавіка", "мая", "чэрвеня", "ліпеня", "жніўня", "верасня", "кастрычніка", "лістапада", "снежня", ""],
                        namesAbbr: ["Сту", "Лют", "Сак", "Кра", "Май", "Чэр", "Ліп", "Жні", "Вер", "Кас", "Ліс", "Сне", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sl": ["sl", "default", {
            name: "sl",
            englishName: "Slovenian",
            nativeName: "slovenski",
            language: "sl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljek", "torek", "sreda", "četrtek", "petek", "sobota"],
                        namesAbbr: ["ned", "pon", "tor", "sre", "čet", "pet", "sob"],
                        namesShort: ["ne", "po", "to", "sr", "če", "pe", "so"]
                    },
                    months: {
                        names: ["januar", "februar", "marec", "april", "maj", "junij", "julij", "avgust", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "et": ["et", "default", {
            name: "et",
            englishName: "Estonian",
            nativeName: "eesti",
            language: "et",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pühapäev", "esmaspäev", "teisipäev", "kolmapäev", "neljapäev", "reede", "laupäev"],
                        namesAbbr: ["P", "E", "T", "K", "N", "R", "L"],
                        namesShort: ["P", "E", "T", "K", "N", "R", "L"]
                    },
                    months: {
                        names: ["jaanuar", "veebruar", "märts", "aprill", "mai", "juuni", "juuli", "august", "september", "oktoober", "november", "detsember", ""],
                        namesAbbr: ["jaan", "veebr", "märts", "apr", "mai", "juuni", "juuli", "aug", "sept", "okt", "nov", "dets", ""]
                    },
                    AM: ["EL", "el", "EL"],
                    PM: ["PL", "pl", "PL"],
                    patterns: {
                        d: "d.MM.yyyy",
                        D: "d. MMMM yyyy'. a.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy'. a.' H:mm",
                        F: "d. MMMM yyyy'. a.' H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy'. a.'"
                    }
                }
            }
        }],
    "lv": ["lv", "default", {
            name: "lv",
            englishName: "Latvian",
            nativeName: "latviešu",
            language: "lv",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "Ls"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["svētdiena", "pirmdiena", "otrdiena", "trešdiena", "ceturtdiena", "piektdiena", "sestdiena"],
                        namesAbbr: ["sv", "pr", "ot", "tr", "ce", "pk", "se"],
                        namesShort: ["sv", "pr", "ot", "tr", "ce", "pk", "se"]
                    },
                    months: {
                        names: ["janvāris", "februāris", "marts", "aprīlis", "maijs", "jūnijs", "jūlijs", "augusts", "septembris", "oktobris", "novembris", "decembris", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jūn", "jūl", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["janvārī", "februārī", "martā", "aprīlī", "maijā", "jūnijā", "jūlijā", "augustā", "septembrī", "oktobrī", "novembrī", "decembrī", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jūn", "jūl", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy.MM.dd.",
                        D: "dddd, yyyy'. gada 'd. MMMM",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, yyyy'. gada 'd. MMMM H:mm",
                        F: "dddd, yyyy'. gada 'd. MMMM H:mm:ss",
                        M: "d. MMMM",
                        Y: "yyyy. MMMM"
                    }
                }
            }
        }],
    "lt": ["lt", "default", {
            name: "lt",
            englishName: "Lithuanian",
            nativeName: "lietuvių",
            language: "lt",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Lt"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sekmadienis", "pirmadienis", "antradienis", "trečiadienis", "ketvirtadienis", "penktadienis", "šeštadienis"],
                        namesAbbr: ["Sk", "Pr", "An", "Tr", "Kt", "Pn", "Št"],
                        namesShort: ["S", "P", "A", "T", "K", "Pn", "Š"]
                    },
                    months: {
                        names: ["sausis", "vasaris", "kovas", "balandis", "gegužė", "birželis", "liepa", "rugpjūtis", "rugsėjis", "spalis", "lapkritis", "gruodis", ""],
                        namesAbbr: ["Sau", "Vas", "Kov", "Bal", "Geg", "Bir", "Lie", "Rgp", "Rgs", "Spl", "Lap", "Grd", ""]
                    },
                    monthsGenitive: {
                        names: ["sausio", "vasario", "kovo", "balandžio", "gegužės", "birželio", "liepos", "rugpjūčio", "rugsėjo", "spalio", "lapkričio", "gruodžio", ""],
                        namesAbbr: ["Sau", "Vas", "Kov", "Bal", "Geg", "Bir", "Lie", "Rgp", "Rgs", "Spl", "Lap", "Grd", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy.MM.dd",
                        D: "yyyy 'm.' MMMM d 'd.'",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'm.' MMMM d 'd.' HH:mm",
                        F: "yyyy 'm.' MMMM d 'd.' HH:mm:ss",
                        M: "MMMM d 'd.'",
                        Y: "yyyy 'm.' MMMM"
                    }
                }
            }
        }],
    "tg": ["tg", "default", {
            name: "tg",
            englishName: "Tajik",
            nativeName: "Тоҷикӣ",
            language: "tg",
            numberFormat: {
                ",": " ",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ";",
                    symbol: "т.р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    days: {
                        names: ["Яш", "Душанбе", "Сешанбе", "Чоршанбе", "Панҷшанбе", "Ҷумъа", "Шанбе"],
                        namesAbbr: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"],
                        namesShort: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"]
                    },
                    months: {
                        names: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["январи", "феврали", "марти", "апрели", "маи", "июни", "июли", "августи", "сентябри", "октябри", "ноябри", "декабри", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fa": ["fa", "default", {
            name: "fa",
            englishName: "Persian",
            nativeName: "فارسى",
            language: "fa",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    ".": "/",
                    symbol: "ريال"
                }
            },
            calendars: {
                standard: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["يكشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["يكشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["ژانويه", "فوريه", "مارس", "آوريل", "مى", "ژوئن", "ژوئيه", "اوت", "سپتامبر", "اُكتبر", "نوامبر", "دسامبر", ""],
                        namesAbbr: ["ژانويه", "فوريه", "مارس", "آوريل", "مى", "ژوئن", "ژوئيه", "اوت", "سپتامبر", "اُكتبر", "نوامبر", "دسامبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "yyyy/MM/dd",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "yyyy/MM/dd hh:mm tt",
                        F: "yyyy/MM/dd hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "vi": ["vi", "default", {
            name: "vi",
            englishName: "Vietnamese",
            nativeName: "Tiếng Việt",
            language: "vi",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "₫"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"],
                        namesAbbr: ["CN", "Hai", "Ba", "Tư", "Năm", "Sáu", "Bảy"],
                        namesShort: ["C", "H", "B", "T", "N", "S", "B"]
                    },
                    months: {
                        names: ["Tháng Giêng", "Tháng Hai", "Tháng Ba", "Tháng Tư", "Tháng Năm", "Tháng Sáu", "Tháng Bảy", "Tháng Tám", "Tháng Chín", "Tháng Mười", "Tháng Mười Một", "Tháng Mười Hai", ""],
                        namesAbbr: ["Thg1", "Thg2", "Thg3", "Thg4", "Thg5", "Thg6", "Thg7", "Thg8", "Thg9", "Thg10", "Thg11", "Thg12", ""]
                    },
                    AM: ["SA", "sa", "SA"],
                    PM: ["CH", "ch", "CH"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        f: "dd MMMM yyyy h:mm tt",
                        F: "dd MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hy": ["hy", "default", {
            name: "hy",
            englishName: "Armenian",
            nativeName: "Հայերեն",
            language: "hy",
            numberFormat: {
                currency: {
                    pattern: ["-n $", "n $"],
                    symbol: "դր."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Կիրակի", "Երկուշաբթի", "Երեքշաբթի", "Չորեքշաբթի", "Հինգշաբթի", "ՈՒրբաթ", "Շաբաթ"],
                        namesAbbr: ["Կիր", "Երկ", "Երք", "Չրք", "Հնգ", "ՈՒր", "Շբթ"],
                        namesShort: ["Կ", "Ե", "Ե", "Չ", "Հ", "Ո", "Շ"]
                    },
                    months: {
                        names: ["Հունվար", "Փետրվար", "Մարտ", "Ապրիլ", "Մայիս", "Հունիս", "Հուլիս", "Օգոստոս", "Սեպտեմբեր", "Հոկտեմբեր", "Նոյեմբեր", "Դեկտեմբեր", ""],
                        namesAbbr: ["ՀՆՎ", "ՓՏՎ", "ՄՐՏ", "ԱՊՐ", "ՄՅՍ", "ՀՆՍ", "ՀԼՍ", "ՕԳՍ", "ՍԵՊ", "ՀՈԿ", "ՆՈՅ", "ԴԵԿ", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM, yyyy H:mm",
                        F: "d MMMM, yyyy H:mm:ss",
                        M: "d MMMM"
                    }
                }
            }
        }],
    "az": ["az", "default", {
            name: "az",
            englishName: "Azeri",
            nativeName: "Azərbaycan­ılı",
            language: "az",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "man."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Bazar", "Bazar ertəsi", "Çərşənbə axşamı", "Çərşənbə", "Cümə axşamı", "Cümə", "Şənbə"],
                        namesAbbr: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"],
                        namesShort: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"]
                    },
                    months: {
                        names: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "İyun", "İyul", "Avgust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    monthsGenitive: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "eu": ["eu", "default", {
            name: "eu",
            englishName: "Basque",
            nativeName: "euskara",
            language: "eu",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["igandea", "astelehena", "asteartea", "asteazkena", "osteguna", "ostirala", "larunbata"],
                        namesAbbr: ["ig.", "al.", "as.", "az.", "og.", "or.", "lr."],
                        namesShort: ["ig", "al", "as", "az", "og", "or", "lr"]
                    },
                    months: {
                        names: ["urtarrila", "otsaila", "martxoa", "apirila", "maiatza", "ekaina", "uztaila", "abuztua", "iraila", "urria", "azaroa", "abendua", ""],
                        namesAbbr: ["urt.", "ots.", "mar.", "api.", "mai.", "eka.", "uzt.", "abu.", "ira.", "urr.", "aza.", "abe.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dddd, yyyy.'eko' MMMM'k 'd",
                        t: "HH:mm",
                        T: "H:mm:ss",
                        f: "dddd, yyyy.'eko' MMMM'k 'd HH:mm",
                        F: "dddd, yyyy.'eko' MMMM'k 'd H:mm:ss",
                        Y: "yyyy.'eko' MMMM"
                    }
                }
            }
        }],
    "hsb": ["hsb", "default", {
            name: "hsb",
            englishName: "Upper Sorbian",
            nativeName: "hornjoserbšćina",
            language: "hsb",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["njedźela", "póndźela", "wutora", "srjeda", "štwórtk", "pjatk", "sobota"],
                        namesAbbr: ["nje", "pón", "wut", "srj", "štw", "pja", "sob"],
                        namesShort: ["n", "p", "w", "s", "š", "p", "s"]
                    },
                    months: {
                        names: ["januar", "februar", "měrc", "apryl", "meja", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "mej", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["januara", "februara", "měrca", "apryla", "meje", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "mej", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "po Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "dddd, 'dnja' d. MMMM yyyy",
                        t: "H.mm 'hodź.'",
                        T: "H:mm:ss",
                        f: "dddd, 'dnja' d. MMMM yyyy H.mm 'hodź.'",
                        F: "dddd, 'dnja' d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "mk": ["mk", "default", {
            name: "mk",
            englishName: "Macedonian (FYROM)",
            nativeName: "македонски јазик",
            language: "mk",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "ден."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недела", "понеделник", "вторник", "среда", "четврток", "петок", "сабота"],
                        namesAbbr: ["нед", "пон", "втр", "срд", "чет", "пет", "саб"],
                        namesShort: ["не", "по", "вт", "ср", "че", "пе", "са"]
                    },
                    months: {
                        names: ["јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември", ""],
                        namesAbbr: ["јан", "фев", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "ное", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, dd MMMM yyyy HH:mm",
                        F: "dddd, dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tn": ["tn", "default", {
            name: "tn",
            englishName: "Setswana",
            nativeName: "Setswana",
            language: "tn",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Latshipi", "Mosupologo", "Labobedi", "Laboraro", "Labone", "Labotlhano", "Lamatlhatso"],
                        namesAbbr: ["Ltp.", "Mos.", "Lbd.", "Lbr.", "Lbn.", "Lbt.", "Lmt."],
                        namesShort: ["Lp", "Ms", "Lb", "Lr", "Ln", "Lt", "Lm"]
                    },
                    months: {
                        names: ["Ferikgong", "Tlhakole", "Mopitloe", "Moranang", "Motsheganong", "Seetebosigo", "Phukwi", "Phatwe", "Lwetse", "Diphalane", "Ngwanatsele", "Sedimothole", ""],
                        namesAbbr: ["Fer.", "Tlhak.", "Mop.", "Mor.", "Motsh.", "Seet.", "Phukw.", "Phatw.", "Lwets.", "Diph.", "Ngwan.", "Sed.", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "xh": ["xh", "default", {
            name: "xh",
            englishName: "isiXhosa",
            nativeName: "isiXhosa",
            language: "xh",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["iCawa", "uMvulo", "uLwesibini", "uLwesithathu", "uLwesine", "uLwesihlanu", "uMgqibelo"],
                        namesShort: ["Ca", "Mv", "Lb", "Lt", "Ln", "Lh", "Mg"]
                    },
                    months: {
                        names: ["Mqungu", "Mdumba", "Kwindla", "Tshazimpuzi", "Canzibe", "Silimela", "Khala", "Thupha", "Msintsi", "Dwarha", "Nkanga", "Mnga", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "zu": ["zu", "default", {
            name: "zu",
            englishName: "isiZulu",
            nativeName: "isiZulu",
            language: "zu",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["iSonto", "uMsombuluko", "uLwesibili", "uLwesithathu", "uLwesine", "uLwesihlanu", "uMgqibelo"],
                        namesAbbr: ["Son.", "Mso.", "Bi.", "Tha.", "Ne.", "Hla.", "Mgq."]
                    },
                    months: {
                        names: ["uMasingana", "uNhlolanja", "uNdasa", "uMbaso", "uNhlaba", "uNhlangulana", "uNtulikazi", "uNcwaba", "uMandulo", "uMfumfu", "uLwezi", "uZibandlela", ""],
                        namesAbbr: ["Mas.", "Nhlo.", "Nda.", "Mba.", "Nhla.", "Nhlang.", "Ntu.", "Ncwa.", "Man.", "Mfu.", "Lwe.", "Zib.", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "af": ["af", "default", {
            name: "af",
            englishName: "Afrikaans",
            nativeName: "Afrikaans",
            language: "af",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"],
                        namesAbbr: ["Son", "Maan", "Dins", "Woen", "Dond", "Vry", "Sat"],
                        namesShort: ["So", "Ma", "Di", "Wo", "Do", "Vr", "Sa"]
                    },
                    months: {
                        names: ["Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ka": ["ka", "default", {
            name: "ka",
            englishName: "Georgian",
            nativeName: "ქართული",
            language: "ka",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Lari"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"],
                        namesAbbr: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"],
                        namesShort: ["კ", "ო", "ს", "ო", "ხ", "პ", "შ"]
                    },
                    months: {
                        names: ["იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი", ""],
                        namesAbbr: ["იან", "თებ", "მარ", "აპრ", "მაის", "ივნ", "ივლ", "აგვ", "სექ", "ოქტ", "ნოემ", "დეკ", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "yyyy 'წლის' dd MM, dddd",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'წლის' dd MM, dddd H:mm",
                        F: "yyyy 'წლის' dd MM, dddd H:mm:ss",
                        M: "dd MM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fo": ["fo", "default", {
            name: "fo",
            englishName: "Faroese",
            nativeName: "føroyskt",
            language: "fo",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["sunnudagur", "mánadagur", "týsdagur", "mikudagur", "hósdagur", "fríggjadagur", "leygardagur"],
                        namesAbbr: ["sun", "mán", "týs", "mik", "hós", "frí", "leyg"],
                        namesShort: ["su", "má", "tý", "mi", "hó", "fr", "ley"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "apríl", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hi": ["hi", "default", {
            name: "hi",
            englishName: "Hindi",
            nativeName: "हिंदी",
            language: "hi",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["रवि.", "सोम.", "मंगल.", "बुध.", "गुरु.", "शुक्र.", "शनि."],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""],
                        namesAbbr: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""]
                    },
                    AM: ["पूर्वाह्न", "पूर्वाह्न", "पूर्वाह्न"],
                    PM: ["अपराह्न", "अपराह्न", "अपराह्न"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "mt": ["mt", "default", {
            name: "mt",
            englishName: "Maltese",
            nativeName: "Malti",
            language: "mt",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Il-Ħadd", "It-Tnejn", "It-Tlieta", "L-Erbgħa", "Il-Ħamis", "Il-Ġimgħa", "Is-Sibt"],
                        namesAbbr: ["Ħad", "Tne", "Tli", "Erb", "Ħam", "Ġim", "Sib"],
                        namesShort: ["I", "I", "I", "L", "I", "I", "I"]
                    },
                    months: {
                        names: ["Jannar", "Frar", "Marzu", "April", "Mejju", "Ġunju", "Lulju", "Awissu", "Settembru", "Ottubru", "Novembru", "Diċembru", ""],
                        namesAbbr: ["Jan", "Fra", "Mar", "Apr", "Mej", "Ġun", "Lul", "Awi", "Set", "Ott", "Nov", "Diċ", ""]
                    },
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' ta\\' 'MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' ta\\' 'MMMM yyyy HH:mm",
                        F: "dddd, d' ta\\' 'MMMM yyyy HH:mm:ss",
                        M: "d' ta\\' 'MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "se": ["se", "default", {
            name: "se",
            englishName: "Sami (Northern)",
            nativeName: "davvisámegiella",
            language: "se",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sotnabeaivi", "vuossárga", "maŋŋebárga", "gaskavahkku", "duorastat", "bearjadat", "lávvardat"],
                        namesAbbr: ["sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"],
                        namesShort: ["s", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđajagimánu", "guovvamánu", "njukčamánu", "cuoŋománu", "miessemánu", "geassemánu", "suoidnemánu", "borgemánu", "čakčamánu", "golggotmánu", "skábmamánu", "juovlamánu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ga": ["ga", "default", {
            name: "ga",
            englishName: "Irish",
            nativeName: "Gaeilge",
            language: "ga",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Dé Domhnaigh", "Dé Luain", "Dé Máirt", "Dé Céadaoin", "Déardaoin", "Dé hAoine", "Dé Sathairn"],
                        namesAbbr: ["Domh", "Luan", "Máir", "Céad", "Déar", "Aoi", "Sath"],
                        namesShort: ["Do", "Lu", "Má", "Cé", "De", "Ao", "Sa"]
                    },
                    months: {
                        names: ["Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", "Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig", ""],
                        namesAbbr: ["Ean", "Feabh", "Már", "Aib", "Bealt", "Meith", "Iúil", "Lún", "M.Fómh", "D.Fómh", "Samh", "Noll", ""]
                    },
                    AM: ["r.n.", "r.n.", "R.N."],
                    PM: ["i.n.", "i.n.", "I.N."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ms": ["ms", "default", {
            name: "ms",
            englishName: "Malay",
            nativeName: "Bahasa Melayu",
            language: "ms",
            numberFormat: {
                currency: {
                    decimals: 0,
                    symbol: "RM"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesAbbr: ["Ahad", "Isnin", "Sel", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesShort: ["A", "I", "S", "R", "K", "J", "S"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""],
                        namesAbbr: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogos", "Sept", "Okt", "Nov", "Dis", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM yyyy H:mm",
                        F: "dd MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "kk": ["kk", "default", {
            name: "kk",
            englishName: "Kazakh",
            nativeName: "Қазақ",
            language: "kk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    ",": " ",
                    ".": "-",
                    symbol: "Т"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Жексенбі", "Дүйсенбі", "Сейсенбі", "Сәрсенбі", "Бейсенбі", "Жұма", "Сенбі"],
                        namesAbbr: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"],
                        namesShort: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"]
                    },
                    months: {
                        names: ["қаңтар", "ақпан", "наурыз", "сәуір", "мамыр", "маусым", "шілде", "тамыз", "қыркүйек", "қазан", "қараша", "желтоқсан", ""],
                        namesAbbr: ["Қаң", "Ақп", "Нау", "Сәу", "Мам", "Мау", "Шіл", "Там", "Қыр", "Қаз", "Қар", "Жел", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy 'ж.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'ж.' H:mm",
                        F: "d MMMM yyyy 'ж.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ky": ["ky", "default", {
            name: "ky",
            englishName: "Kyrgyz",
            nativeName: "Кыргыз",
            language: "ky",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": "-",
                    symbol: "сом"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Жекшемби", "Дүйшөмбү", "Шейшемби", "Шаршемби", "Бейшемби", "Жума", "Ишемби"],
                        namesAbbr: ["Жш", "Дш", "Шш", "Шр", "Бш", "Жм", "Иш"],
                        namesShort: ["Жш", "Дш", "Шш", "Шр", "Бш", "Жм", "Иш"]
                    },
                    months: {
                        names: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d'-'MMMM yyyy'-ж.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d'-'MMMM yyyy'-ж.' H:mm",
                        F: "d'-'MMMM yyyy'-ж.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy'-ж.'"
                    }
                }
            }
        }],
    "sw": ["sw", "default", {
            name: "sw",
            englishName: "Kiswahili",
            nativeName: "Kiswahili",
            language: "sw",
            numberFormat: {
                currency: {
                    symbol: "S"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"],
                        namesAbbr: ["Jumap.", "Jumat.", "Juman.", "Jumat.", "Alh.", "Iju.", "Jumam."],
                        namesShort: ["P", "T", "N", "T", "A", "I", "M"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Decemba", ""],
                        namesAbbr: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Dec", ""]
                    }
                }
            }
        }],
    "tk": ["tk", "default", {
            name: "tk",
            englishName: "Turkmen",
            nativeName: "türkmençe",
            language: "tk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "m."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Duşenbe", "Sişenbe", "Çarşenbe", "Penşenbe", "Anna", "Şenbe", "Ýekşenbe"],
                        namesAbbr: ["Db", "Sb", "Çb", "Pb", "An", "Şb", "Ýb"],
                        namesShort: ["D", "S", "Ç", "P", "A", "Ş", "Ý"]
                    },
                    months: {
                        names: ["Ýanwar", "Fewral", "Mart", "Aprel", "Maý", "lýun", "lýul", "Awgust", "Sentýabr", "Oktýabr", "Noýabr", "Dekabr", ""],
                        namesAbbr: ["Ýan", "Few", "Mart", "Apr", "Maý", "lýun", "lýul", "Awg", "Sen", "Okt", "Not", "Dek", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "yyyy 'ý.' MMMM d",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'ý.' MMMM d H:mm",
                        F: "yyyy 'ý.' MMMM d H:mm:ss",
                        Y: "yyyy 'ý.' MMMM"
                    }
                }
            }
        }],
    "uz": ["uz", "default", {
            name: "uz",
            englishName: "Uzbek",
            nativeName: "U'zbek",
            language: "uz",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    decimals: 0,
                    ",": " ",
                    ".": ",",
                    symbol: "so'm"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["yakshanba", "dushanba", "seshanba", "chorshanba", "payshanba", "juma", "shanba"],
                        namesAbbr: ["yak.", "dsh.", "sesh.", "chr.", "psh.", "jm.", "sh."],
                        namesShort: ["ya", "d", "s", "ch", "p", "j", "sh"]
                    },
                    months: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM yyyy",
                        D: "yyyy 'yil' d-MMMM",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'yil' d-MMMM HH:mm",
                        F: "yyyy 'yil' d-MMMM HH:mm:ss",
                        M: "d-MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tt": ["tt", "default", {
            name: "tt",
            englishName: "Tatar",
            nativeName: "Татар",
            language: "tt",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Якшәмбе", "Дүшәмбе", "Сишәмбе", "Чәршәмбе", "Пәнҗешәмбе", "Җомга", "Шимбә"],
                        namesAbbr: ["Якш", "Дүш", "Сиш", "Чәрш", "Пәнҗ", "Җом", "Шим"],
                        namesShort: ["Я", "Д", "С", "Ч", "П", "Җ", "Ш"]
                    },
                    months: {
                        names: ["Гыйнвар", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["Гыйн.", "Фев.", "Мар.", "Апр.", "Май", "Июнь", "Июль", "Авг.", "Сен.", "Окт.", "Нояб.", "Дек.", ""]
                    },
                    monthsGenitive: {
                        names: ["Гыйнварның", "Февральнең", "Мартның", "Апрельнең", "Майның", "Июньнең", "Июльнең", "Августның", "Сентябрьның", "Октябрьның", "Ноябрьның", "Декабрьның", ""],
                        namesAbbr: ["Гыйн.-ның", "Фев.-нең", "Мар.-ның", "Апр.-нең", "Майның", "Июньнең", "Июльнең", "Авг.-ның", "Сен.-ның", "Окт.-ның", "Нояб.-ның", "Дек.-ның", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "bn": ["bn", "default", {
            name: "bn",
            englishName: "Bengali",
            nativeName: "বাংলা",
            language: "bn",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-%n", "%n"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "টা"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    ":": ".",
                    firstDay: 1,
                    days: {
                        names: ["রবিবার", "সোমবার", "মঙ্গলবার", "বুধবার", "বৃহস্পতিবার", "শুক্রবার", "শনিবার"],
                        namesAbbr: ["রবি.", "সোম.", "মঙ্গল.", "বুধ.", "বৃহস্পতি.", "শুক্র.", "শনি."],
                        namesShort: ["র", "স", "ম", "ব", "ব", "শ", "শ"]
                    },
                    months: {
                        names: ["জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""],
                        namesAbbr: ["জানু.", "ফেব্রু.", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগ.", "সেপ্টে.", "অক্টো.", "নভে.", "ডিসে.", ""]
                    },
                    AM: ["পুর্বাহ্ন", "পুর্বাহ্ন", "পুর্বাহ্ন"],
                    PM: ["অপরাহ্ন", "অপরাহ্ন", "অপরাহ্ন"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH.mm",
                        T: "HH.mm.ss",
                        f: "dd MMMM yyyy HH.mm",
                        F: "dd MMMM yyyy HH.mm.ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "pa": ["pa", "default", {
            name: "pa",
            englishName: "Punjabi",
            nativeName: "ਪੰਜਾਬੀ",
            language: "pa",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ਰੁ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ਐਤਵਾਰ", "ਸੋਮਵਾਰ", "ਮੰਗਲਵਾਰ", "ਬੁੱਧਵਾਰ", "ਵੀਰਵਾਰ", "ਸ਼ੁੱਕਰਵਾਰ", "ਸ਼ਨਿੱਚਰਵਾਰ"],
                        namesAbbr: ["ਐਤ.", "ਸੋਮ.", "ਮੰਗਲ.", "ਬੁੱਧ.", "ਵੀਰ.", "ਸ਼ੁਕਰ.", "ਸ਼ਨਿੱਚਰ."],
                        namesShort: ["ਐ", "ਸ", "ਮ", "ਬ", "ਵ", "ਸ਼", "ਸ਼"]
                    },
                    months: {
                        names: ["ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""],
                        namesAbbr: ["ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""]
                    },
                    AM: ["ਸਵੇਰ", "ਸਵੇਰ", "ਸਵੇਰ"],
                    PM: ["ਸ਼ਾਮ", "ਸ਼ਾਮ", "ਸ਼ਾਮ"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy dddd",
                        t: "tt hh:mm",
                        T: "tt hh:mm:ss",
                        f: "dd MMMM yyyy dddd tt hh:mm",
                        F: "dd MMMM yyyy dddd tt hh:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "gu": ["gu", "default", {
            name: "gu",
            englishName: "Gujarati",
            nativeName: "ગુજરાતી",
            language: "gu",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "રૂ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["રવિવાર", "સોમવાર", "મંગળવાર", "બુધવાર", "ગુરુવાર", "શુક્રવાર", "શનિવાર"],
                        namesAbbr: ["રવિ", "સોમ", "મંગળ", "બુધ", "ગુરુ", "શુક્ર", "શનિ"],
                        namesShort: ["ર", "સ", "મ", "બ", "ગ", "શ", "શ"]
                    },
                    months: {
                        names: ["જાન્યુઆરી", "ફેબ્રુઆરી", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટેમ્બર", "ઑક્ટ્બર", "નવેમ્બર", "ડિસેમ્બર", ""],
                        namesAbbr: ["જાન્યુ", "ફેબ્રુ", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટે", "ઑક્ટો", "નવે", "ડિસે", ""]
                    },
                    AM: ["પૂર્વ મધ્યાહ્ન", "પૂર્વ મધ્યાહ્ન", "પૂર્વ મધ્યાહ્ન"],
                    PM: ["ઉત્તર મધ્યાહ્ન", "ઉત્તર મધ્યાહ્ન", "ઉત્તર મધ્યાહ્ન"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "or": ["or", "default", {
            name: "or",
            englishName: "Oriya",
            nativeName: "ଓଡ଼ିଆ",
            language: "or",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ଟ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["ରବିବାର", "ସୋମବାର", "ମଙ୍ଗଳବାର", "ବୁଧବାର", "ଗୁରୁବାର", "ଶୁକ୍ରବାର", "ଶନିବାର"],
                        namesAbbr: ["ରବି.", "ସୋମ.", "ମଙ୍ଗଳ.", "ବୁଧ.", "ଗୁରୁ.", "ଶୁକ୍ର.", "ଶନି."],
                        namesShort: ["ର", "ସୋ", "ମ", "ବୁ", "ଗୁ", "ଶୁ", "ଶ"]
                    },
                    months: {
                        names: ["ଜାନୁୟାରୀ", "ଫ୍ରେବୃୟାରୀ", "ମାର୍ଚ୍ଚ", "ଏପ୍ରିଲ୍‌", "ମେ", "ଜୁନ୍‌", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "(ଡିସେମ୍ବର", ""],
                        namesAbbr: ["ଜାନୁୟାରୀ", "ଫ୍ରେବୃୟାରୀ", "ମାର୍ଚ୍ଚ", "ଏପ୍ରିଲ୍‌", "ମେ", "ଜୁନ୍‌", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "(ଡିସେମ୍ବର", ""]
                    },
                    eras: [{ "name": "ଖ୍ରୀଷ୍ଟାବ୍ଦ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ta": ["ta", "default", {
            name: "ta",
            englishName: "Tamil",
            nativeName: "தமிழ்",
            language: "ta",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ரூ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ஞாயிற்றுக்கிழமை", "திங்கள்கிழமை", "செவ்வாய்கிழமை", "புதன்கிழமை", "வியாழக்கிழமை", "வெள்ளிக்கிழமை", "சனிக்கிழமை"],
                        namesAbbr: ["ஞாயிறு", "திங்கள்", "செவ்வாய்", "புதன்", "வியாழன்", "வெள்ளி", "சனி"],
                        namesShort: ["ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"]
                    },
                    months: {
                        names: ["ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""],
                        namesAbbr: ["ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""]
                    },
                    AM: ["காலை", "காலை", "காலை"],
                    PM: ["மாலை", "மாலை", "மாலை"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "te": ["te", "default", {
            name: "te",
            englishName: "Telugu",
            nativeName: "తెలుగు",
            language: "te",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "రూ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ఆదివారం", "సోమవారం", "మంగళవారం", "బుధవారం", "గురువారం", "శుక్రవారం", "శనివారం"],
                        namesAbbr: ["ఆది.", "సోమ.", "మంగళ.", "బుధ.", "గురు.", "శుక్ర.", "శని."],
                        namesShort: ["ఆ", "సో", "మం", "బు", "గు", "శు", "శ"]
                    },
                    months: {
                        names: ["జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జూలై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""],
                        namesAbbr: ["జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జూలై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""]
                    },
                    AM: ["పూర్వాహ్న", "పూర్వాహ్న", "పూర్వాహ్న"],
                    PM: ["అపరాహ్న", "అపరాహ్న", "అపరాహ్న"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "kn": ["kn", "default", {
            name: "kn",
            englishName: "Kannada",
            nativeName: "ಕನ್ನಡ",
            language: "kn",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ರೂ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ಭಾನುವಾರ", "ಸೋಮವಾರ", "ಮಂಗಳವಾರ", "ಬುಧವಾರ", "ಗುರುವಾರ", "ಶುಕ್ರವಾರ", "ಶನಿವಾರ"],
                        namesAbbr: ["ಭಾನು.", "ಸೋಮ.", "ಮಂಗಳ.", "ಬುಧ.", "ಗುರು.", "ಶುಕ್ರ.", "ಶನಿ."],
                        namesShort: ["ರ", "ಸ", "ಮ", "ಬ", "ಗ", "ಶ", "ಶ"]
                    },
                    months: {
                        names: ["ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಎಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""],
                        namesAbbr: ["ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಎಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""]
                    },
                    AM: ["ಪೂರ್ವಾಹ್ನ", "ಪೂರ್ವಾಹ್ನ", "ಪೂರ್ವಾಹ್ನ"],
                    PM: ["ಅಪರಾಹ್ನ", "ಅಪರಾಹ್ನ", "ಅಪರಾಹ್ನ"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ml": ["ml", "default", {
            name: "ml",
            englishName: "Malayalam",
            nativeName: "മലയാളം",
            language: "ml",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-%n", "%n"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ക"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    ":": ".",
                    firstDay: 1,
                    days: {
                        names: ["ഞായറാഴ്ച", "തിങ്കളാഴ്ച", "ചൊവ്വാഴ്ച", "ബുധനാഴ്ച", "വ്യാഴാഴ്ച", "വെള്ളിയാഴ്ച", "ശനിയാഴ്ച"],
                        namesAbbr: ["ഞായർ.", "തിങ്കൾ.", "ചൊവ്വ.", "ബുധൻ.", "വ്യാഴം.", "വെള്ളി.", "ശനി."],
                        namesShort: ["ഞ", "ത", "ച", "ബ", "വ", "വെ", "ശ"]
                    },
                    months: {
                        names: ["ജനുവരി", "ഫെബ്റുവരി", "മാറ്ച്ച്", "ഏപ്റില്", "മെയ്", "ജൂണ്", "ജൂലൈ", "ഓഗസ്ററ്", "സെപ്ററംബറ്", "ഒക്ടോബറ്", "നവംബറ്", "ഡിസംബറ്", ""],
                        namesAbbr: ["ജനുവരി", "ഫെബ്റുവരി", "മാറ്ച്ച്", "ഏപ്റില്", "മെയ്", "ജൂണ്", "ജൂലൈ", "ഓഗസ്ററ്", "സെപ്ററംബറ്", "ഒക്ടോബറ്", "നവംബറ്", "ഡിസംബറ്", ""]
                    },
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH.mm",
                        T: "HH.mm.ss",
                        f: "dd MMMM yyyy HH.mm",
                        F: "dd MMMM yyyy HH.mm.ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "as": ["as", "default", {
            name: "as",
            englishName: "Assamese",
            nativeName: "অসমীয়া",
            language: "as",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "n$"],
                    groupSizes: [3, 2],
                    symbol: "ট"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["সোমবাৰ", "মঙ্গলবাৰ", "বুধবাৰ", "বৃহস্পতিবাৰ", "শুক্রবাৰ", "শনিবাৰ", "ৰবিবাৰ"],
                        namesAbbr: ["সোম.", "মঙ্গল.", "বুধ.", "বৃহ.", "শুক্র.", "শনি.", "ৰবি."],
                        namesShort: ["সো", "ম", "বু", "বৃ", "শু", "শ", "র"]
                    },
                    months: {
                        names: ["জানুৱাৰী", "ফেব্রুৱাৰী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টেম্বর", "অক্টোবর", "নবেম্বর", "ডিচেম্বর", ""],
                        namesAbbr: ["জানু", "ফেব্রু", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টে", "অক্টো", "নবে", "ডিচে", ""]
                    },
                    AM: ["ৰাতিপু", "ৰাতিপু", "ৰাতিপু"],
                    PM: ["আবেলি", "আবেলি", "আবেলি"],
                    eras: [{ "name": "খ্রীষ্টাব্দ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "yyyy,MMMM dd, dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "yyyy,MMMM dd, dddd tt h:mm",
                        F: "yyyy,MMMM dd, dddd tt h:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM,yy"
                    }
                }
            }
        }],
    "mr": ["mr", "default", {
            name: "mr",
            englishName: "Marathi",
            nativeName: "मराठी",
            language: "mr",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["रविवार", "सोमवार", "मंगळवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["रवि.", "सोम.", "मंगळ.", "बुध.", "गुरु.", "शुक्र.", "शनि."],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""],
                        namesAbbr: ["जाने.", "फेब्रु.", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टें.", "ऑक्टो.", "नोव्हें.", "डिसें.", ""]
                    },
                    AM: ["म.पू.", "म.पू.", "म.पू."],
                    PM: ["म.नं.", "म.नं.", "म.नं."],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "sa": ["sa", "default", {
            name: "sa",
            englishName: "Sanskrit",
            nativeName: "संस्कृत",
            language: "sa",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["रविवासरः", "सोमवासरः", "मङ्गलवासरः", "बुधवासरः", "गुरुवासरः", "शुक्रवासरः", "शनिवासरः"],
                        namesAbbr: ["रविवासरः", "सोमवासरः", "मङ्गलवासरः", "बुधवासरः", "गुरुवासरः", "शुक्रवासरः", "शनिवासरः"],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""],
                        namesAbbr: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""]
                    },
                    AM: ["पूर्वाह्न", "पूर्वाह्न", "पूर्वाह्न"],
                    PM: ["अपराह्न", "अपराह्न", "अपराह्न"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy dddd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy dddd HH:mm",
                        F: "dd MMMM yyyy dddd HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "mn": ["mn", "default", {
            name: "mn",
            englishName: "Mongolian",
            nativeName: "Монгол хэл",
            language: "mn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "₮"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Ням", "Даваа", "Мягмар", "Лхагва", "Пүрэв", "Баасан", "Бямба"],
                        namesAbbr: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"],
                        namesShort: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"]
                    },
                    months: {
                        names: ["1 дүгээр сар", "2 дугаар сар", "3 дугаар сар", "4 дүгээр сар", "5 дугаар сар", "6 дугаар сар", "7 дугаар сар", "8 дугаар сар", "9 дүгээр сар", "10 дугаар сар", "11 дүгээр сар", "12 дугаар сар", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    monthsGenitive: {
                        names: ["1 дүгээр сарын", "2 дугаар сарын", "3 дугаар сарын", "4 дүгээр сарын", "5 дугаар сарын", "6 дугаар сарын", "7 дугаар сарын", "8 дугаар сарын", "9 дүгээр сарын", "10 дугаар сарын", "11 дүгээр сарын", "12 дугаар сарын", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yy.MM.dd",
                        D: "yyyy 'оны' MMMM d",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'оны' MMMM d H:mm",
                        F: "yyyy 'оны' MMMM d H:mm:ss",
                        M: "d MMMM",
                        Y: "yyyy 'он' MMMM"
                    }
                }
            }
        }],
    "bo": ["bo", "default", {
            name: "bo",
            englishName: "Tibetan",
            nativeName: "བོད་ཡིག",
            language: "bo",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["གཟའ་ཉི་མ།", "གཟའ་ཟླ་བ།", "གཟའ་མིག་དམར།", "གཟའ་ལྷག་པ།", "གཟའ་ཕུར་བུ།", "གཟའ་པ་སངས།", "གཟའ་སྤེན་པ།"],
                        namesAbbr: ["ཉི་མ།", "ཟླ་བ།", "མིག་དམར།", "ལྷག་པ།", "ཕུར་བུ།", "པ་སངས།", "སྤེན་པ།"],
                        namesShort: ["༧", "༡", "༢", "༣", "༤", "༥", "༦"]
                    },
                    months: {
                        names: ["སྤྱི་ཟླ་དང་པོ།", "སྤྱི་ཟླ་གཉིས་པ།", "སྤྱི་ཟླ་གསུམ་པ།", "སྤྱི་ཟླ་བཞི་པ།", "སྤྱི་ཟླ་ལྔ་པ།", "སྤྱི་ཟླ་དྲུག་པ།", "སྤྱི་ཟླ་བདུན་པ།", "སྤྱི་ཟླ་བརྒྱད་པ།", "སྤྱི་ཟླ་དགུ་པ།", "སྤྱི་ཟླ་བཅུ་པོ།", "སྤྱི་ཟླ་བཅུ་གཅིག་པ།", "སྤྱི་ཟླ་བཅུ་གཉིས་པ།", ""],
                        namesAbbr: ["ཟླ་ ༡", "ཟླ་ ༢", "ཟླ་ ༣", "ཟླ་ ༤", "ཟླ་ ༥", "ཟླ་ ༦", "ཟླ་ ༧", "ཟླ་ ༨", "ཟླ་ ༩", "ཟླ་ ༡༠", "ཟླ་ ༡༡", "ཟླ་ ༡༢", ""]
                    },
                    AM: ["སྔ་དྲོ", "སྔ་དྲོ", "སྔ་དྲོ"],
                    PM: ["ཕྱི་དྲོ", "ཕྱི་དྲོ", "ཕྱི་དྲོ"],
                    eras: [{ "name": "སྤྱི་ལོ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ལོའི་ཟླ' M'ཚེས' d",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm",
                        F: "yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm:ss",
                        M: "'ཟླ་' M'ཚེས'd",
                        Y: "yyyy.M"
                    }
                }
            }
        }],
    "cy": ["cy", "default", {
            name: "cy",
            englishName: "Welsh",
            nativeName: "Cymraeg",
            language: "cy",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "£"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Dydd Sul", "Dydd Llun", "Dydd Mawrth", "Dydd Mercher", "Dydd Iau", "Dydd Gwener", "Dydd Sadwrn"],
                        namesAbbr: ["Sul", "Llun", "Maw", "Mer", "Iau", "Gwe", "Sad"],
                        namesShort: ["Su", "Ll", "Ma", "Me", "Ia", "Gw", "Sa"]
                    },
                    months: {
                        names: ["Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr", ""],
                        namesAbbr: ["Ion", "Chwe", "Maw", "Ebr", "Mai", "Meh", "Gor", "Aws", "Med", "Hyd", "Tach", "Rhag", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "km": ["km", "default", {
            name: "km",
            englishName: "Khmer",
            nativeName: "ខ្មែរ",
            language: "km",
            numberFormat: {
                pattern: ["- n"],
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    symbol: "៛"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["ថ្ងៃអាទិត្យ", "ថ្ងៃច័ន្ទ", "ថ្ងៃអង្គារ", "ថ្ងៃពុធ", "ថ្ងៃព្រហស្បតិ៍", "ថ្ងៃសុក្រ", "ថ្ងៃសៅរ៍"],
                        namesAbbr: ["អាទិ.", "ច.", "អ.", "ពុ", "ព្រហ.", "សុ.", "ស."],
                        namesShort: ["អា", "ច", "អ", "ពុ", "ព្", "សុ", "ស"]
                    },
                    months: {
                        names: ["មករា", "កុម្ភៈ", "មិនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ", ""],
                        namesAbbr: ["១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩", "១០", "១១", "១២", ""]
                    },
                    AM: ["ព្រឹក", "ព្រឹក", "ព្រឹក"],
                    PM: ["ល្ងាច", "ល្ងាច", "ល្ងាច"],
                    eras: [{ "name": "មុនគ.ស.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "d MMMM yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy H:mm tt",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "'ថ្ងៃទី' dd 'ខែ' MM",
                        Y: "'ខែ' MM 'ឆ្នាំ' yyyy"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ព្រឹក", "ព្រឹក", "ព្រឹក"],
                    PM: ["ល្ងាច", "ល្ងាច", "ល្ងាច"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm tt",
                        F: "dddd, MMMM dd, yyyy HH:mm:ss"
                    }
                }
            }
        }],
    "lo": ["lo", "default", {
            name: "lo",
            englishName: "Lao",
            nativeName: "ລາວ",
            language: "lo",
            numberFormat: {
                pattern: ["(n)"],
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["(n$)", "n$"],
                    groupSizes: [3, 0],
                    symbol: "₭"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["ວັນອາທິດ", "ວັນຈັນ", "ວັນອັງຄານ", "ວັນພຸດ", "ວັນພະຫັດ", "ວັນສຸກ", "ວັນເສົາ"],
                        namesAbbr: ["ອາທິດ", "ຈັນ", "ອັງຄານ", "ພຸດ", "ພະຫັດ", "ສຸກ", "ເສົາ"],
                        namesShort: ["ອ", "ຈ", "ອ", "ພ", "ພ", "ສ", "ເ"]
                    },
                    months: {
                        names: ["ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""],
                        namesAbbr: ["ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""]
                    },
                    AM: ["ເຊົ້າ", "ເຊົ້າ", "ເຊົ້າ"],
                    PM: ["ແລງ", "ແລງ", "ແລງ"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy H:mm tt",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gl": ["gl", "default", {
            name: "gl",
            englishName: "Galician",
            nativeName: "galego",
            language: "gl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "luns", "martes", "mércores", "xoves", "venres", "sábado"],
                        namesAbbr: ["dom", "luns", "mar", "mér", "xov", "ven", "sáb"],
                        namesShort: ["do", "lu", "ma", "mé", "xo", "ve", "sá"]
                    },
                    months: {
                        names: ["xaneiro", "febreiro", "marzo", "abril", "maio", "xuño", "xullo", "agosto", "setembro", "outubro", "novembro", "decembro", ""],
                        namesAbbr: ["xan", "feb", "mar", "abr", "maio", "xuñ", "xull", "ago", "set", "out", "nov", "dec", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "kok": ["kok", "default", {
            name: "kok",
            englishName: "Konkani",
            nativeName: "कोंकणी",
            language: "kok",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["आयतार", "सोमार", "मंगळार", "बुधवार", "बिरेस्तार", "सुक्रार", "शेनवार"],
                        namesAbbr: ["आय.", "सोम.", "मंगळ.", "बुध.", "बिरे.", "सुक्र.", "शेन."],
                        namesShort: ["आ", "स", "म", "ब", "ब", "स", "श"]
                    },
                    months: {
                        names: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोवेम्बर", "डिसेंबर", ""],
                        namesAbbr: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोवेम्बर", "डिसेंबर", ""]
                    },
                    AM: ["म.पू.", "म.पू.", "म.पू."],
                    PM: ["म.नं.", "म.नं.", "म.नं."],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "syr": ["syr", "default", {
            name: "syr",
            englishName: "Syriac",
            nativeName: "ܣܘܪܝܝܐ",
            language: "syr",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ل.س.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["ܚܕ ܒܫܒܐ", "ܬܪܝܢ ܒܫܒܐ", "ܬܠܬܐ ܒܫܒܐ", "ܐܪܒܥܐ ܒܫܒܐ", "ܚܡܫܐ ܒܫܒܐ", "ܥܪܘܒܬܐ", "ܫܒܬܐ"],
                        namesAbbr: ["܏ܐ ܏ܒܫ", "܏ܒ ܏ܒܫ", "܏ܓ ܏ܒܫ", "܏ܕ ܏ܒܫ", "܏ܗ ܏ܒܫ", "܏ܥܪܘܒ", "܏ܫܒ"],
                        namesShort: ["ܐ", "ܒ", "ܓ", "ܕ", "ܗ", "ܥ", "ܫ"]
                    },
                    months: {
                        names: ["ܟܢܘܢ ܐܚܪܝ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝ ܩܕܝܡ", "ܬܫܪܝ ܐܚܪܝ", "ܟܢܘܢ ܩܕܝܡ", ""],
                        namesAbbr: ["܏ܟܢ ܏ܒ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "܏ܬܫ ܏ܐ", "܏ܬܫ ܏ܒ", "܏ܟܢ ܏ܐ", ""]
                    },
                    AM: ["ܩ.ܛ", "ܩ.ܛ", "ܩ.ܛ"],
                    PM: ["ܒ.ܛ", "ܒ.ܛ", "ܒ.ܛ"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "si": ["si", "default", {
            name: "si",
            englishName: "Sinhala",
            nativeName: "සිංහල",
            language: "si",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    symbol: "රු."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ඉරිදා", "සඳුදා", "අඟහරුවාදා", "බදාදා", "බ්‍රහස්පතින්දා", "සිකුරාදා", "සෙනසුරාදා"],
                        namesAbbr: ["ඉරිදා", "සඳුදා", "කුජදා", "බුදදා", "ගුරුදා", "කිවිදා", "ශනිදා"],
                        namesShort: ["ඉ", "ස", "අ", "බ", "බ්‍ර", "සි", "සෙ"]
                    },
                    months: {
                        names: ["ජනවාරි", "පෙබරවාරි", "මාර්තු", "අ‌ප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අ‌ගෝස්තු", "සැප්තැම්බර්", "ඔක්තෝබර්", "නොවැම්බර්", "දෙසැම්බර්", ""],
                        namesAbbr: ["ජන.", "පෙබ.", "මාර්තු.", "අප්‍රේල්.", "මැයි.", "ජූනි.", "ජූලි.", "අගෝ.", "සැප්.", "ඔක්.", "නොවැ.", "දෙසැ.", ""]
                    },
                    AM: ["පෙ.ව.", "පෙ.ව.", "පෙ.ව."],
                    PM: ["ප.ව.", "ප.ව.", "ප.ව."],
                    eras: [{ "name": "ක්‍රි.ව.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy MMMM' මස 'dd' වැනිදා 'dddd",
                        f: "yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm tt",
                        F: "yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm:ss tt",
                        Y: "yyyy MMMM"
                    }
                }
            }
        }],
    "iu": ["iu", "default", {
            name: "iu",
            englishName: "Inuktitut",
            nativeName: "Inuktitut",
            language: "iu",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Naattiinguja", "Naggajjau", "Aippiq", "Pingatsiq", "Sitammiq", "Tallirmiq", "Sivataarvik"],
                        namesAbbr: ["Nat", "Nag", "Aip", "Pi", "Sit", "Tal", "Siv"],
                        namesShort: ["N", "N", "A", "P", "S", "T", "S"]
                    },
                    months: {
                        names: ["Jaannuari", "Viivvuari", "Maatsi", "Iipuri", "Mai", "Juuni", "Julai", "Aaggiisi", "Sitipiri", "Utupiri", "Nuvipiri", "Tisipiri", ""],
                        namesAbbr: ["Jan", "Viv", "Mas", "Ipu", "Mai", "Jun", "Jul", "Agi", "Sii", "Uut", "Nuv", "Tis", ""]
                    },
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "ddd, MMMM dd,yyyy",
                        f: "ddd, MMMM dd,yyyy h:mm tt",
                        F: "ddd, MMMM dd,yyyy h:mm:ss tt"
                    }
                }
            }
        }],
    "am": ["am", "default", {
            name: "am",
            englishName: "Amharic",
            nativeName: "አማርኛ",
            language: "am",
            numberFormat: {
                decimals: 1,
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    decimals: 1,
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "ETB"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["እሑድ", "ሰኞ", "ማክሰኞ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"],
                        namesAbbr: ["እሑድ", "ሰኞ", "ማክሰ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"],
                        namesShort: ["እ", "ሰ", "ማ", "ረ", "ሐ", "ዓ", "ቅ"]
                    },
                    months: {
                        names: ["ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕረል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክተውበር", "ኖቬምበር", "ዲሴምበር", ""],
                        namesAbbr: ["ጃንዩ", "ፌብሩ", "ማርች", "ኤፕረ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክተ", "ኖቬም", "ዲሴም", ""]
                    },
                    AM: ["ጡዋት", "ጡዋት", "ጡዋት"],
                    PM: ["ከሰዓት", "ከሰዓት", "ከሰዓት"],
                    eras: [{ "name": "ዓመተ  ምሕረት", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd '፣' MMMM d 'ቀን' yyyy",
                        f: "dddd '፣' MMMM d 'ቀን' yyyy h:mm tt",
                        F: "dddd '፣' MMMM d 'ቀን' yyyy h:mm:ss tt",
                        M: "MMMM d ቀን",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tzm": ["tzm", "default", {
            name: "tzm",
            englishName: "Tamazight",
            nativeName: "Tamazight",
            language: "tzm",
            numberFormat: {
                pattern: ["n-"],
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    symbol: "DZD"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 6,
                    days: {
                        names: ["Acer", "Arime", "Aram", "Ahad", "Amhadh", "Sem", "Sedh"],
                        namesAbbr: ["Ace", "Ari", "Ara", "Aha", "Amh", "Sem", "Sed"],
                        namesShort: ["Ac", "Ar", "Ar", "Ah", "Am", "Se", "Se"]
                    },
                    months: {
                        names: ["Yenayer", "Furar", "Maghres", "Yebrir", "Mayu", "Yunyu", "Yulyu", "Ghuct", "Cutenber", "Ktuber", "Wambir", "Dujanbir", ""],
                        namesAbbr: ["Yen", "Fur", "Mag", "Yeb", "May", "Yun", "Yul", "Ghu", "Cut", "Ktu", "Wam", "Duj", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ne": ["ne", "default", {
            name: "ne",
            englishName: "Nepali",
            nativeName: "नेपाली",
            language: "ne",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["आइतवार", "सोमवार", "मङ्गलवार", "बुधवार", "बिहीवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["आइत", "सोम", "मङ्गल", "बुध", "बिही", "शुक्र", "शनि"],
                        namesShort: ["आ", "सो", "म", "बु", "बि", "शु", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जून", "जुलाई", "अगस्त", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""],
                        namesAbbr: ["जन", "फेब", "मार्च", "अप्रिल", "मे", "जून", "जुलाई", "अग", "सेप्ट", "अक्ट", "नोभ", "डिस", ""]
                    },
                    AM: ["विहानी", "विहानी", "विहानी"],
                    PM: ["बेलुकी", "बेलुकी", "बेलुकी"],
                    eras: [{ "name": "a.d.", "start": null, "offset": 0 }],
                    patterns: {
                        Y: "MMMM,yyyy"
                    }
                }
            }
        }],
    "fy": ["fy", "default", {
            name: "fy",
            englishName: "Frisian",
            nativeName: "Frysk",
            language: "fy",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["Snein", "Moandei", "Tiisdei", "Woansdei", "Tongersdei", "Freed", "Sneon"],
                        namesAbbr: ["Sn", "Mo", "Ti", "Wo", "To", "Fr", "Sn"],
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    months: {
                        names: ["jannewaris", "febrewaris", "maart", "april", "maaie", "juny", "july", "augustus", "septimber", "oktober", "novimber", "desimber", ""],
                        namesAbbr: ["jann", "febr", "mrt", "apr", "maaie", "jun", "jul", "aug", "sept", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d-M-yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd d MMMM yyyy H:mm",
                        F: "dddd d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ps": ["ps", "default", {
            name: "ps",
            englishName: "Pashto",
            nativeName: "پښتو",
            language: "ps",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                ",": "،",
                ".": ",",
                percent: {
                    pattern: ["%n-", "%n"],
                    ",": "،",
                    ".": ","
                },
                currency: {
                    pattern: ["$n-", "$n"],
                    ",": "٬",
                    ".": "٫",
                    symbol: "؋"
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګا ښزمرى", "زمرى", "وږى", "تله", "لړم", "لنڈ ۍ", "مرغومى", ""],
                        namesAbbr: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګا ښ", "زمرى", "وږى", "تله", "لړم", "لنڈ ۍ", "مرغومى", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "ل.ه", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy, dd, MMMM, dddd",
                        f: "yyyy, dd, MMMM, dddd h:mm tt",
                        F: "yyyy, dd, MMMM, dddd h:mm:ss tt",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fil": ["fil", "default", {
            name: "fil",
            englishName: "Filipino",
            nativeName: "Filipino",
            language: "fil",
            numberFormat: {
                currency: {
                    symbol: "PhP"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Linggo", "Lunes", "Martes", "Mierkoles", "Huebes", "Biernes", "Sabado"],
                        namesAbbr: ["Lin", "Lun", "Mar", "Mier", "Hueb", "Bier", "Saba"],
                        namesShort: ["L", "L", "M", "M", "H", "B", "S"]
                    },
                    months: {
                        names: ["Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Septyembre", "Oktubre", "Nobyembre", "Disyembre", ""],
                        namesAbbr: ["En", "Peb", "Mar", "Abr", "Mayo", "Hun", "Hul", "Agos", "Sept", "Okt", "Nob", "Dis", ""]
                    },
                    eras: [{ "name": "Anno Domini", "start": null, "offset": 0 }],
                }
            }
        }],
    "dv": ["dv", "default", {
            name: "dv",
            englishName: "Divehi",
            nativeName: "ދިވެހިބަސް",
            language: "dv",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["n $-", "n $"],
                    symbol: "ރ."
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    days: {
                        names: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesAbbr: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesShort: ["އާ", "ހޯ", "އަ", "ބު", "ބު", "ހު", "ހޮ"]
                    },
                    months: {
                        names: ["މުޙައްރަމް", "ޞަފަރު", "ރަބީޢުލްއައްވަލް", "ރަބީޢުލްއާޚިރު", "ޖުމާދަލްއޫލާ", "ޖުމާދަލްއާޚިރާ", "ރަޖަބް", "ޝަޢްބާން", "ރަމަޟާން", "ޝައްވާލް", "ޛުލްޤަޢިދާ", "ޛުލްޙިއްޖާ", ""],
                        namesAbbr: ["މުޙައްރަމް", "ޞަފަރު", "ރަބީޢުލްއައްވަލް", "ރަބީޢުލްއާޚިރު", "ޖުމާދަލްއޫލާ", "ޖުމާދަލްއާޚިރާ", "ރަޖަބް", "ޝަޢްބާން", "ރަމަޟާން", "ޝައްވާލް", "ޛުލްޤަޢިދާ", "ޛުލްޙިއްޖާ", ""]
                    },
                    AM: ["މކ", "މކ", "މކ"],
                    PM: ["މފ", "މފ", "މފ"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd/MM/yyyy HH:mm",
                        F: "dd/MM/yyyy HH:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    days: {
                        names: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesAbbr: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesShort: ["އާ", "ހޯ", "އަ", "ބު", "ބު", "ހު", "ހޮ"]
                    },
                    months: {
                        names: ["ޖަނަވަރީ", "ފެބްރުއަރީ", "މާޗް", "އޭޕްރިލް", "މެއި", "ޖޫން", "ޖުލައި", "އޯގަސްޓް", "ސެޕްޓެމްބަރ", "އޮކްޓޯބަރ", "ނޮވެމްބަރ", "ޑިސެމްބަރ", ""],
                        namesAbbr: ["ޖަނަވަރީ", "ފެބްރުއަރީ", "މާޗް", "އޭޕްރިލް", "މެއި", "ޖޫން", "ޖުލައި", "އޯގަސްޓް", "ސެޕްޓެމްބަރ", "އޮކްޓޯބަރ", "ނޮވެމްބަރ", "ޑިސެމްބަރ", ""]
                    },
                    AM: ["މކ", "މކ", "މކ"],
                    PM: ["މފ", "މފ", "މފ"],
                    eras: [{ "name": "މީލާދީ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yy",
                        D: "ddd, yyyy MMMM dd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "ddd, yyyy MMMM dd HH:mm",
                        F: "ddd, yyyy MMMM dd HH:mm:ss",
                        Y: "yyyy, MMMM"
                    }
                }
            }
        }],
    "ha": ["ha", "default", {
            name: "ha",
            englishName: "Hausa",
            nativeName: "Hausa",
            language: "ha",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Lahadi", "Litinin", "Talata", "Laraba", "Alhamis", "Juma'a", "Asabar"],
                        namesAbbr: ["Lah", "Lit", "Tal", "Lar", "Alh", "Jum", "Asa"],
                        namesShort: ["L", "L", "T", "L", "A", "J", "A"]
                    },
                    months: {
                        names: ["Januwaru", "Febreru", "Maris", "Afrilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktocba", "Nuwamba", "Disamba", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Afr", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""]
                    },
                    AM: ["Safe", "safe", "SAFE"],
                    PM: ["Yamma", "yamma", "YAMMA"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "yo": ["yo", "default", {
            name: "yo",
            englishName: "Yoruba",
            nativeName: "Yoruba",
            language: "yo",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Aiku", "Aje", "Isegun", "Ojo'ru", "Ojo'bo", "Eti", "Abameta"],
                        namesAbbr: ["Aik", "Aje", "Ise", "Ojo", "Ojo", "Eti", "Aba"],
                        namesShort: ["A", "A", "I", "O", "O", "E", "A"]
                    },
                    months: {
                        names: ["Osu kinni", "Osu keji", "Osu keta", "Osu kerin", "Osu karun", "Osu kefa", "Osu keje", "Osu kejo", "Osu kesan", "Osu kewa", "Osu kokanla", "Osu keresi", ""],
                        namesAbbr: ["kin.", "kej.", "ket.", "ker.", "kar.", "kef.", "kej.", "kej.", "kes.", "kew.", "kok.", "ker.", ""]
                    },
                    AM: ["Owuro", "owuro", "OWURO"],
                    PM: ["Ale", "ale", "ALE"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "quz": ["quz", "default", {
            name: "quz",
            englishName: "Quechua",
            nativeName: "runasimi",
            language: "quz",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "$b"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["intichaw", "killachaw", "atipachaw", "quyllurchaw", "Ch' askachaw", "Illapachaw", "k'uychichaw"],
                        namesAbbr: ["int", "kil", "ati", "quy", "Ch'", "Ill", "k'u"],
                        namesShort: ["d", "k", "a", "m", "h", "b", "k"]
                    },
                    months: {
                        names: ["Qulla puquy", "Hatun puquy", "Pauqar waray", "ayriwa", "Aymuray", "Inti raymi", "Anta Sitwa", "Qhapaq Sitwa", "Uma raymi", "Kantaray", "Ayamarq'a", "Kapaq Raymi", ""],
                        namesAbbr: ["Qul", "Hat", "Pau", "ayr", "Aym", "Int", "Ant", "Qha", "Uma", "Kan", "Aya", "Kap", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "nso": ["nso", "default", {
            name: "nso",
            englishName: "Sesotho sa Leboa",
            nativeName: "Sesotho sa Leboa",
            language: "nso",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Lamorena", "Mošupologo", "Labobedi", "Laboraro", "Labone", "Labohlano", "Mokibelo"],
                        namesAbbr: ["Lam", "Moš", "Lbb", "Lbr", "Lbn", "Lbh", "Mok"],
                        namesShort: ["L", "M", "L", "L", "L", "L", "M"]
                    },
                    months: {
                        names: ["Pherekgong", "Hlakola", "Mopitlo", "Moranang", "Mosegamanye", "Ngoatobošego", "Phuphu", "Phato", "Lewedi", "Diphalana", "Dibatsela", "Manthole", ""],
                        namesAbbr: ["Pher", "Hlak", "Mop", "Mor", "Mos", "Ngwat", "Phup", "Phat", "Lew", "Dip", "Dib", "Man", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ba": ["ba", "default", {
            name: "ba",
            englishName: "Bashkir",
            nativeName: "Башҡорт",
            language: "ba",
            numberFormat: {
                ",": " ",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ",",
                    symbol: "һ."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Йәкшәмбе", "Дүшәмбе", "Шишәмбе", "Шаршамбы", "Кесаҙна", "Йома", "Шәмбе"],
                        namesAbbr: ["Йш", "Дш", "Шш", "Шр", "Кс", "Йм", "Шб"],
                        namesShort: ["Йш", "Дш", "Шш", "Шр", "Кс", "Йм", "Шб"]
                    },
                    months: {
                        names: ["ғинуар", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""],
                        namesAbbr: ["ғин", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d MMMM yyyy 'й'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'й' H:mm",
                        F: "d MMMM yyyy 'й' H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "lb": ["lb", "default", {
            name: "lb",
            englishName: "Luxembourgish",
            nativeName: "Lëtzebuergesch",
            language: "lb",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sonndeg", "Méindeg", "Dënschdeg", "Mëttwoch", "Donneschdeg", "Freideg", "Samschdeg"],
                        namesAbbr: ["Son", "Méi", "Dën", "Mët", "Don", "Fre", "Sam"],
                        namesShort: ["So", "Mé", "Dë", "Më", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "Mäerz", "Abrëll", "Mee", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mäe", "Abr", "Mee", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "kl": ["kl", "default", {
            name: "kl",
            englishName: "Greenlandic",
            nativeName: "kalaallisut",
            language: "kl",
            numberFormat: {
                ",": ".",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 0],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["sapaat", "ataasinngorneq", "marlunngorneq", "pingasunngorneq", "sisamanngorneq", "tallimanngorneq", "arfininngorneq"],
                        namesAbbr: ["sap", "ata", "mar", "ping", "sis", "tal", "arf"],
                        namesShort: ["sa", "at", "ma", "pi", "si", "ta", "ar"]
                    },
                    months: {
                        names: ["januari", "februari", "martsi", "apriili", "maaji", "juni", "juli", "aggusti", "septembari", "oktobari", "novembari", "decembari", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ig": ["ig", "default", {
            name: "ig",
            englishName: "Igbo",
            nativeName: "Igbo",
            language: "ig",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Aiku", "Aje", "Isegun", "Ojo'ru", "Ojo'bo", "Eti", "Abameta"],
                        namesAbbr: ["Aik", "Aje", "Ise", "Ojo", "Ojo", "Eti", "Aba"],
                        namesShort: ["A", "A", "I", "O", "O", "E", "A"]
                    },
                    months: {
                        names: ["Onwa mbu", "Onwa ibua", "Onwa ato", "Onwa ano", "Onwa ise", "Onwa isi", "Onwa asa", "Onwa asato", "Onwa itolu", "Onwa iri", "Onwa iri n'ofu", "Onwa iri n'ibua", ""],
                        namesAbbr: ["mbu.", "ibu.", "ato.", "ano.", "ise", "isi", "asa", "asa.", "ito.", "iri.", "n'of.", "n'ib.", ""]
                    },
                    AM: ["Ututu", "ututu", "UTUTU"],
                    PM: ["Efifie", "efifie", "EFIFIE"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "ii": ["ii", "default", {
            name: "ii",
            englishName: "Yi",
            nativeName: "ꆈꌠꁱꂷ",
            language: "ii",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["ꑭꆏꑍ", "ꆏꊂ꒔", "ꆏꊂꑍ", "ꆏꊂꌕ", "ꆏꊂꇖ", "ꆏꊂꉬ", "ꆏꊂꃘ"],
                        namesAbbr: ["ꑭꆏ", "ꆏ꒔", "ꆏꑍ", "ꆏꌕ", "ꆏꇖ", "ꆏꉬ", "ꆏꃘ"],
                        namesShort: ["ꆏ", "꒔", "ꑍ", "ꌕ", "ꇖ", "ꉬ", "ꃘ"]
                    },
                    months: {
                        names: ["ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""],
                        namesAbbr: ["ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""]
                    },
                    AM: ["ꂵꆪꈌꈐ", "ꂵꆪꈌꈐ", "ꂵꆪꈌꈐ"],
                    PM: ["ꂵꆪꈌꉈ", "ꂵꆪꈌꉈ", "ꂵꆪꈌꉈ"],
                    eras: [{ "name": "ꇬꑼ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ꈎ' M'ꆪ' d'ꑍ'",
                        t: "tt h:mm",
                        T: "H:mm:ss",
                        f: "yyyy'ꈎ' M'ꆪ' d'ꑍ' tt h:mm",
                        F: "yyyy'ꈎ' M'ꆪ' d'ꑍ' H:mm:ss",
                        M: "M'ꆪ' d'ꑍ'",
                        Y: "yyyy'ꈎ' M'ꆪ'"
                    }
                }
            }
        }],
    "arn": ["arn", "default", {
            name: "arn",
            englishName: "Mapudungun",
            nativeName: "Mapudungun",
            language: "arn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "moh": ["moh", "default", {
            name: "moh",
            englishName: "Mohawk",
            nativeName: "Kanien'kéha",
            language: "moh",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Awentatokentì:ke", "Awentataón'ke", "Ratironhia'kehronòn:ke", "Soséhne", "Okaristiiáhne", "Ronwaia'tanentaktonhne", "Entákta"],
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    months: {
                        names: ["Tsothohrkó:Wa", "Enniska", "Enniskó:Wa", "Onerahtókha", "Onerahtohkó:Wa", "Ohiari:Ha", "Ohiarihkó:Wa", "Seskéha", "Seskehkó:Wa", "Kenténha", "Kentenhkó:Wa", "Tsothóhrha", ""]
                    }
                }
            }
        }],
    "br": ["br", "default", {
            name: "br",
            englishName: "Breton",
            nativeName: "brezhoneg",
            language: "br",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sul", "Lun", "Meurzh", "Merc'her", "Yaou", "Gwener", "Sadorn"],
                        namesAbbr: ["Sul", "Lun", "Meu.", "Mer.", "Yaou", "Gwe.", "Sad."],
                        namesShort: ["Su", "Lu", "Mz", "Mc", "Ya", "Gw", "Sa"]
                    },
                    months: {
                        names: ["Genver", "C'hwevrer", "Meurzh", "Ebrel", "Mae", "Mezheven", "Gouere", "Eost", "Gwengolo", "Here", "Du", "Kerzu", ""],
                        namesAbbr: ["Gen.", "C'hwe.", "Meur.", "Ebr.", "Mae", "Mezh.", "Goue.", "Eost", "Gwen.", "Here", "Du", "Kzu", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "g. J.-K.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ug": ["ug", "default", {
            name: "ug",
            englishName: "Uyghur",
            nativeName: "ئۇيغۇرچە",
            language: "ug",
            isRTL: true,
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["يەكشەنبە", "دۈشەنبە", "سەيشەنبە", "چارشەنبە", "پەيشەنبە", "جۈمە", "شەنبە"],
                        namesAbbr: ["يە", "دۈ", "سە", "چا", "پە", "جۈ", "شە"],
                        namesShort: ["ي", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["1-ئاي", "2-ئاي", "3-ئاي", "4-ئاي", "5-ئاي", "6-ئاي", "7-ئاي", "8-ئاي", "9-ئاي", "10-ئاي", "11-ئاي", "12-ئاي", ""],
                        namesAbbr: ["1-ئاي", "2-ئاي", "3-ئاي", "4-ئاي", "5-ئاي", "6-ئاي", "7-ئاي", "8-ئاي", "9-ئاي", "10-ئاي", "11-ئاي", "12-ئاي", ""]
                    },
                    AM: ["چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن"],
                    PM: ["چۈشتىن كېيىن", "چۈشتىن كېيىن", "چۈشتىن كېيىن"],
                    eras: [{ "name": "مىلادى", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-M-d",
                        D: "yyyy-'يىلى' MMMM d-'كۈنى،'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy-'يىلى' MMMM d-'كۈنى،' H:mm",
                        F: "yyyy-'يىلى' MMMM d-'كۈنى،' H:mm:ss",
                        M: "MMMM d'-كۈنى'",
                        Y: "yyyy-'يىلى' MMMM"
                    }
                }
            }
        }],
    "mi": ["mi", "default", {
            name: "mi",
            englishName: "Maori",
            nativeName: "Reo Māori",
            language: "mi",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Rātapu", "Rāhina", "Rātū", "Rāapa", "Rāpare", "Rāmere", "Rāhoroi"],
                        namesAbbr: ["Ta", "Hi", "Tū", "Apa", "Pa", "Me", "Ho"],
                        namesShort: ["Ta", "Hi", "Tū", "Aa", "Pa", "Me", "Ho"]
                    },
                    months: {
                        names: ["Kohi-tātea", "Hui-tanguru", "Poutū-te-rangi", "Paenga-whāwhā", "Haratua", "Pipiri", "Hōngongoi", "Here-turi-kōkā", "Mahuru", "Whiringa-ā-nuku", "Whiringa-ā-rangi", "Hakihea", ""],
                        namesAbbr: ["Kohi", "Hui", "Pou", "Pae", "Hara", "Pipi", "Hōngo", "Here", "Mahu", "Nuku", "Rangi", "Haki", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd MMMM, yyyy",
                        f: "dddd, dd MMMM, yyyy h:mm tt",
                        F: "dddd, dd MMMM, yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM, yy"
                    }
                }
            }
        }],
    "oc": ["oc", "default", {
            name: "oc",
            englishName: "Occitan",
            nativeName: "Occitan",
            language: "oc",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimenge", "diluns", "dimars", "dimècres", "dijòus", "divendres", "dissabte"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mèc.", "jòu.", "ven.", "sab."],
                        namesShort: ["di", "lu", "ma", "mè", "jò", "ve", "sa"]
                    },
                    months: {
                        names: ["genier", "febrier", "març", "abril", "mai", "junh", "julh", "agost", "setembre", "octobre", "novembre", "desembre", ""],
                        namesAbbr: ["gen.", "feb.", "mar.", "abr.", "mai.", "jun.", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""]
                    },
                    monthsGenitive: {
                        names: ["de genier", "de febrier", "de març", "d'abril", "de mai", "de junh", "de julh", "d'agost", "de setembre", "d'octobre", "de novembre", "de desembre", ""],
                        namesAbbr: ["gen.", "feb.", "mar.", "abr.", "mai.", "jun.", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "après Jèsus-Crist", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd,' lo 'd MMMM' de 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd,' lo 'd MMMM' de 'yyyy HH:mm",
                        F: "dddd,' lo 'd MMMM' de 'yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "co": ["co", "default", {
            name: "co",
            englishName: "Corsican",
            nativeName: "Corsu",
            language: "co",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dumenica", "luni", "marti", "mercuri", "ghjovi", "venderi", "sabbatu"],
                        namesAbbr: ["dum.", "lun.", "mar.", "mer.", "ghj.", "ven.", "sab."],
                        namesShort: ["du", "lu", "ma", "me", "gh", "ve", "sa"]
                    },
                    months: {
                        names: ["ghjennaghju", "ferraghju", "marzu", "aprile", "maghju", "ghjunghju", "lugliu", "aostu", "settembre", "ottobre", "nuvembre", "dicembre", ""],
                        namesAbbr: ["ghje", "ferr", "marz", "apri", "magh", "ghju", "lugl", "aost", "sett", "otto", "nuve", "dice", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "dopu J-C", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gsw": ["gsw", "default", {
            name: "gsw",
            englishName: "Alsatian",
            nativeName: "Elsässisch",
            language: "gsw",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sundàà", "Mondàà", "Dienschdàà", "Mittwuch", "Dunnerschdàà", "Fridàà", "Sàmschdàà"],
                        namesAbbr: ["Su.", "Mo.", "Di.", "Mi.", "Du.", "Fr.", "Sà."],
                        namesShort: ["Su", "Mo", "Di", "Mi", "Du", "Fr", "Sà"]
                    },
                    months: {
                        names: ["Jänner", "Feverje", "März", "Àpril", "Mai", "Jüni", "Jüli", "Augscht", "September", "Oktower", "Nowember", "Dezember", ""],
                        namesAbbr: ["Jän.", "Fev.", "März", "Apr.", "Mai", "Jüni", "Jüli", "Aug.", "Sept.", "Okt.", "Now.", "Dez.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "Vor J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sah": ["sah", "default", {
            name: "sah",
            englishName: "Yakut",
            nativeName: "саха",
            language: "sah",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "с."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["баскыһыанньа", "бэнидиэнньик", "оптуорунньук", "сэрэдэ", "чэппиэр", "бээтинсэ", "субуота"],
                        namesAbbr: ["Бс", "Бн", "Оп", "Ср", "Чп", "Бт", "Сб"],
                        namesShort: ["Бс", "Бн", "Оп", "Ср", "Чп", "Бт", "Сб"]
                    },
                    months: {
                        names: ["Тохсунньу", "Олунньу", "Кулун тутар", "Муус устар", "Ыам ыйа", "Бэс ыйа", "От ыйа", "Атырдьах ыйа", "Балаҕан ыйа", "Алтынньы", "Сэтинньи", "Ахсынньы", ""],
                        namesAbbr: ["тхс", "олн", "кул", "мст", "ыам", "бэс", "отй", "атр", "блҕ", "алт", "стн", "ахс", ""]
                    },
                    monthsGenitive: {
                        names: ["тохсунньу", "олунньу", "кулун тутар", "муус устар", "ыам ыйын", "бэс ыйын", "от ыйын", "атырдьах ыйын", "балаҕан ыйын", "алтынньы", "сэтинньи", "ахсынньы", ""],
                        namesAbbr: ["тхс", "олн", "кул", "мст", "ыам", "бэс", "отй", "атр", "блҕ", "алт", "стн", "ахс", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "MM.dd.yyyy",
                        D: "MMMM d yyyy 'с.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d yyyy 'с.' H:mm",
                        F: "MMMM d yyyy 'с.' H:mm:ss",
                        Y: "MMMM yyyy 'с.'"
                    }
                }
            }
        }],
    "qut": ["qut", "default", {
            name: "qut",
            englishName: "K'iche",
            nativeName: "K'iche",
            language: "qut",
            numberFormat: {
                currency: {
                    symbol: "Q"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["juq'ij", "kaq'ij", "oxq'ij", "kajq'ij", "joq'ij", "waqq'ij", "wuqq'ij"],
                        namesAbbr: ["juq", "kaq", "oxq", "kajq", "joq", "waqq", "wuqq"],
                        namesShort: ["ju", "ka", "ox", "ka", "jo", "wa", "wu"]
                    },
                    months: {
                        names: ["nab'e ik'", "ukab' ik'", "rox ik'", "ukaj ik'", "uro' ik'", "uwaq ik'", "uwuq ik'", "uwajxaq ik'", "ub'elej ik'", "ulaj ik'", "ujulaj ik'", "ukab'laj ik'", ""],
                        namesAbbr: ["nab'e", "ukab", "rox", "ukaj", "uro", "uwaq", "uwuq", "uwajxaq", "ub'elej", "ulaj", "ujulaj", "ukab'laj", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "rw": ["rw", "default", {
            name: "rw",
            englishName: "Kinyarwanda",
            nativeName: "Kinyarwanda",
            language: "rw",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "RWF"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Ku wa mbere", "Ku wa kabiri", "Ku wa gatatu", "Ku wa kane", "Ku wa gatanu", "Ku wa gatandatu", "Ku cyumweru"],
                        namesAbbr: ["mbe.", "kab.", "gat.", "kan.", "gat.", "gat.", "cyu."],
                        namesShort: ["mb", "ka", "ga", "ka", "ga", "ga", "cy"]
                    },
                    months: {
                        names: ["Mutarama", "Gashyantare", "Werurwe", "Mata", "Gicurasi", "Kamena", "Nyakanga", "Kanama", "Nzeli", "Ukwakira", "Ugushyingo", "Ukuboza", ""],
                        namesAbbr: ["Mut", "Gas", "Wer", "Mat", "Gic", "Kam", "Nya", "Kan", "Nze", "Ukwa", "Ugu", "Uku", ""]
                    },
                    AM: ["saa moya z.m.", "saa moya z.m.", "SAA MOYA Z.M."],
                    PM: ["saa moya z.n.", "saa moya z.n.", "SAA MOYA Z.N."],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                }
            }
        }],
    "wo": ["wo", "default", {
            name: "wo",
            englishName: "Wolof",
            nativeName: "Wolof",
            language: "wo",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "XOF"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "prs": ["prs", "default", {
            name: "prs",
            englishName: "Dari",
            nativeName: "درى",
            language: "prs",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["%n-", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$n-", "$n"],
                    symbol: "؋"
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    firstDay: 5,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    firstDay: 5,
                    days: {
                        names: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګاښ", "زمرى", "وږى", "تله", "لړم", "ليندۍ", "مرغومى", ""],
                        namesAbbr: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګاښ", "زمرى", "وږى", "تله", "لړم", "ليندۍ", "مرغومى", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "ل.ه", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy, dd, MMMM, dddd",
                        f: "yyyy, dd, MMMM, dddd h:mm tt",
                        F: "yyyy, dd, MMMM, dddd h:mm:ss tt",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gd": ["gd", "default", {
            name: "gd",
            englishName: "Scottish Gaelic",
            nativeName: "Gàidhlig",
            language: "gd",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "£"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Didòmhnaich", "Diluain", "Dimàirt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne"],
                        namesAbbr: ["Dòm", "Lua", "Mài", "Cia", "Ard", "Hao", "Sat"],
                        namesShort: ["D", "L", "M", "C", "A", "H", "S"]
                    },
                    months: {
                        names: ["Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd", ""],
                        namesAbbr: ["Fao", "Gea", "Màr", "Gib", "Cèi", "Ògm", "Iuc", "Lùn", "Sul", "Dàm", "Sam", "Dùb", ""]
                    },
                    AM: ["m", "m", "M"],
                    PM: ["f", "f", "F"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-SA": ["ar-SA", "default", {
            name: "ar-SA",
            englishName: "Arabic (Saudi Arabia)",
            nativeName: "العربية (المملكة العربية السعودية)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ر.س.‏"
                }
            },
            calendars: {
                standard: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /*  remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "bg-BG": ["bg-BG", "default", {
            name: "bg-BG",
            englishName: "Bulgarian (Bulgaria)",
            nativeName: "български (България)",
            language: "bg",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "лв."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["неделя", "понеделник", "вторник", "сряда", "четвъртък", "петък", "събота"],
                        namesAbbr: ["нед", "пон", "вт", "ср", "четв", "пет", "съб"],
                        namesShort: ["н", "п", "в", "с", "ч", "п", "с"]
                    },
                    months: {
                        names: ["януари", "февруари", "март", "април", "май", "юни", "юли", "август", "септември", "октомври", "ноември", "декември", ""],
                        namesAbbr: ["ян", "февр", "март", "апр", "май", "юни", "юли", "авг", "септ", "окт", "ноември", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "след новата ера", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy 'г.'",
                        D: "dd MMMM yyyy 'г.'",
                        t: "HH:mm 'ч.'",
                        T: "HH:mm:ss 'ч.'",
                        f: "dd MMMM yyyy 'г.' HH:mm 'ч.'",
                        F: "dd MMMM yyyy 'г.' HH:mm:ss 'ч.'",
                        M: "dd MMMM",
                        Y: "MMMM yyyy 'г.'"
                    }
                }
            }
        }],
    "ca-ES": ["ca-ES", "default", {
            name: "ca-ES",
            englishName: "Catalan (Catalan)",
            nativeName: "català (català)",
            language: "ca",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"],
                        namesAbbr: ["dg.", "dl.", "dt.", "dc.", "dj.", "dv.", "ds."],
                        namesShort: ["dg", "dl", "dt", "dc", "dj", "dv", "ds"]
                    },
                    months: {
                        names: ["gener", "febrer", "març", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre", ""],
                        namesAbbr: ["gen", "feb", "març", "abr", "maig", "juny", "jul", "ag", "set", "oct", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' / 'MMMM' / 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' / 'MMMM' / 'yyyy HH:mm",
                        F: "dddd, d' / 'MMMM' / 'yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' / 'yyyy"
                    }
                }
            }
        }],
    "zh-TW": ["zh-TW", "default", {
            name: "zh-TW",
            englishName: "Chinese (Traditional, Taiwan)",
            nativeName: "中文(台灣)",
            language: "zh-CHT",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "NT$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "西元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "tt hh:mm",
                        T: "tt hh:mm:ss",
                        f: "yyyy'年'M'月'd'日' tt hh:mm",
                        F: "yyyy'年'M'月'd'日' tt hh:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                },
                Taiwan: {
                    name: "Taiwan",
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "", "start": null, "offset": 1911 }],
                    twoDigitYearMax: 99,
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "tt hh:mm",
                        T: "tt hh:mm:ss",
                        f: "yyyy'年'M'月'd'日' tt hh:mm",
                        F: "yyyy'年'M'月'd'日' tt hh:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "cs-CZ": ["cs-CZ", "default", {
            name: "cs-CZ",
            englishName: "Czech (Czech Republic)",
            nativeName: "čeština (Česká republika)",
            language: "cs",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Kč"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["neděle", "pondělí", "úterý", "středa", "čtvrtek", "pátek", "sobota"],
                        namesAbbr: ["ne", "po", "út", "st", "čt", "pá", "so"],
                        namesShort: ["ne", "po", "út", "st", "čt", "pá", "so"]
                    },
                    months: {
                        names: ["leden", "únor", "březen", "duben", "květen", "červen", "červenec", "srpen", "září", "říjen", "listopad", "prosinec", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    monthsGenitive: {
                        names: ["ledna", "února", "března", "dubna", "května", "června", "července", "srpna", "září", "října", "listopadu", "prosince", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["dop.", "dop.", "DOP."],
                    PM: ["odp.", "odp.", "ODP."],
                    eras: [{ "name": "n. l.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "da-DK": ["da-DK", "default", {
            name: "da-DK",
            englishName: "Danish (Denmark)",
            nativeName: "dansk (Danmark)",
            language: "da",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                        namesAbbr: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
                        namesShort: ["sø", "ma", "ti", "on", "to", "fr", "lø"]
                    },
                    months: {
                        names: ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "de-DE": ["de-DE", "default", {
            name: "de-DE",
            englishName: "German (Germany)",
            nativeName: "Deutsch (Deutschland)",
            language: "de",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "el-GR": ["el-GR", "default", {
            name: "el-GR",
            englishName: "Greek (Greece)",
            nativeName: "Ελληνικά (Ελλάδα)",
            language: "el",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"],
                        namesAbbr: ["Κυρ", "Δευ", "Τρι", "Τετ", "Πεμ", "Παρ", "Σαβ"],
                        namesShort: ["Κυ", "Δε", "Τρ", "Τε", "Πε", "Πα", "Σά"]
                    },
                    months: {
                        names: ["Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος", ""],
                        namesAbbr: ["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαϊ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ", ""]
                    },
                    monthsGenitive: {
                        names: ["Ιανουαρίου", "Φεβρουαρίου", "Μαρτίου", "Απριλίου", "Μαΐου", "Ιουνίου", "Ιουλίου", "Αυγούστου", "Σεπτεμβρίου", "Οκτωβρίου", "Νοεμβρίου", "Δεκεμβρίου", ""],
                        namesAbbr: ["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαϊ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ", ""]
                    },
                    AM: ["πμ", "πμ", "ΠΜ"],
                    PM: ["μμ", "μμ", "ΜΜ"],
                    eras: [{ "name": "μ.Χ.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd, d MMMM yyyy",
                        f: "dddd, d MMMM yyyy h:mm tt",
                        F: "dddd, d MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "en-US": ["en-US", "default", {
            englishName: "English (United States)"
        }],
    "fi-FI": ["fi-FI", "default", {
            name: "fi-FI",
            englishName: "Finnish (Finland)",
            nativeName: "suomi (Suomi)",
            language: "fi",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"],
                        namesAbbr: ["su", "ma", "ti", "ke", "to", "pe", "la"],
                        namesShort: ["su", "ma", "ti", "ke", "to", "pe", "la"]
                    },
                    months: {
                        names: ["tammikuu", "helmikuu", "maaliskuu", "huhtikuu", "toukokuu", "kesäkuu", "heinäkuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu", ""],
                        namesAbbr: ["tammi", "helmi", "maalis", "huhti", "touko", "kesä", "heinä", "elo", "syys", "loka", "marras", "joulu", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM'ta 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM'ta 'yyyy H:mm",
                        F: "d. MMMM'ta 'yyyy H:mm:ss",
                        M: "d. MMMM'ta'",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fr-FR": ["fr-FR", "default", {
            name: "fr-FR",
            englishName: "French (France)",
            nativeName: "français (France)",
            language: "fr",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "he-IL": ["he-IL", "default", {
            name: "he-IL",
            englishName: "Hebrew (Israel)",
            nativeName: "עברית (ישראל)",
            language: "he",
            isRTL: true,
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "₪"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "שבת"],
                        namesAbbr: ["יום א", "יום ב", "יום ג", "יום ד", "יום ה", "יום ו", "שבת"],
                        namesShort: ["א", "ב", "ג", "ד", "ה", "ו", "ש"]
                    },
                    months: {
                        names: ["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר", ""],
                        namesAbbr: ["ינו", "פבר", "מרץ", "אפר", "מאי", "יונ", "יול", "אוג", "ספט", "אוק", "נוב", "דצמ", ""]
                    },
                    eras: [{ "name": "לספירה", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd dd MMMM yyyy HH:mm",
                        F: "dddd dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                },
                Hebrew: {
                    name: "Hebrew",
                    "/": " ",
                    days: {
                        names: ["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "שבת"],
                        namesAbbr: ["א", "ב", "ג", "ד", "ה", "ו", "ש"],
                        namesShort: ["א", "ב", "ג", "ד", "ה", "ו", "ש"]
                    },
                    months: {
                        names: ["תשרי", "חשון", "כסלו", "טבת", "שבט", "אדר", "אדר ב", "ניסן", "אייר", "סיון", "תמוז", "אב", "אלול"],
                        namesAbbr: ["תשרי", "חשון", "כסלו", "טבת", "שבט", "אדר", "אדר ב", "ניסן", "אייר", "סיון", "תמוז", "אב", "אלול"]
                    },
                    eras: [{ "name": "C.E.", "start": null, "offset": 0 }],
                    twoDigitYearMax: 5790,
                    patterns: {
                        d: "dd MMMM yyyy",
                        D: "dddd dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd dd MMMM yyyy HH:mm",
                        F: "dddd dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hu-HU": ["hu-HU", "default", {
            name: "hu-HU",
            englishName: "Hungarian (Hungary)",
            nativeName: "magyar (Magyarország)",
            language: "hu",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Ft"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["vasárnap", "hétfő", "kedd", "szerda", "csütörtök", "péntek", "szombat"],
                        namesAbbr: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
                        namesShort: ["V", "H", "K", "Sze", "Cs", "P", "Szo"]
                    },
                    months: {
                        names: ["január", "február", "március", "április", "május", "június", "július", "augusztus", "szeptember", "október", "november", "december", ""],
                        namesAbbr: ["jan.", "febr.", "márc.", "ápr.", "máj.", "jún.", "júl.", "aug.", "szept.", "okt.", "nov.", "dec.", ""]
                    },
                    AM: ["de.", "de.", "DE."],
                    PM: ["du.", "du.", "DU."],
                    eras: [{ "name": "i.sz.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy.MM.dd.",
                        D: "yyyy. MMMM d.",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy. MMMM d. H:mm",
                        F: "yyyy. MMMM d. H:mm:ss",
                        M: "MMMM d.",
                        Y: "yyyy. MMMM"
                    }
                }
            }
        }],
    "is-IS": ["is-IS", "default", {
            name: "is-IS",
            englishName: "Icelandic (Iceland)",
            nativeName: "íslenska (Ísland)",
            language: "is",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    decimals: 0,
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sunnudagur", "mánudagur", "þriðjudagur", "miðvikudagur", "fimmtudagur", "föstudagur", "laugardagur"],
                        namesAbbr: ["sun.", "mán.", "þri.", "mið.", "fim.", "fös.", "lau."],
                        namesShort: ["su", "má", "þr", "mi", "fi", "fö", "la"]
                    },
                    months: {
                        names: ["janúar", "febrúar", "mars", "apríl", "maí", "júní", "júlí", "ágúst", "september", "október", "nóvember", "desember", ""],
                        namesAbbr: ["jan.", "feb.", "mar.", "apr.", "maí", "jún.", "júl.", "ágú.", "sep.", "okt.", "nóv.", "des.", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "it-IT": ["it-IT", "default", {
            name: "it-IT",
            englishName: "Italian (Italy)",
            nativeName: "italiano (Italia)",
            language: "it",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"],
                        namesAbbr: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
                        namesShort: ["do", "lu", "ma", "me", "gi", "ve", "sa"]
                    },
                    months: {
                        names: ["gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""],
                        namesAbbr: ["gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ja-JP": ["ja-JP", "default", {
            name: "ja-JP",
            englishName: "Japanese (Japan)",
            nativeName: "日本語 (日本)",
            language: "ja",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    decimals: 0,
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
                        namesAbbr: ["日", "月", "火", "水", "木", "金", "土"],
                        namesShort: ["日", "月", "火", "水", "木", "金", "土"]
                    },
                    months: {
                        names: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["午前", "午前", "午前"],
                    PM: ["午後", "午後", "午後"],
                    eras: [{ "name": "西暦", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                },
                Japanese: {
                    name: "Japanese",
                    days: {
                        names: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
                        namesAbbr: ["日", "月", "火", "水", "木", "金", "土"],
                        namesShort: ["日", "月", "火", "水", "木", "金", "土"]
                    },
                    months: {
                        names: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["午前", "午前", "午前"],
                    PM: ["午後", "午後", "午後"],
                    eras: [{ "name": "平成", "start": null, "offset": 1867 }, { "name": "昭和", "start": -1812153600000, "offset": 1911 }, { "name": "大正", "start": -1357603200000, "offset": 1925 }, { "name": "明治", "start": 60022080000, "offset": 1988 }],
                    twoDigitYearMax: 99,
                    patterns: {
                        d: "gg y/M/d",
                        D: "gg y'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "gg y'年'M'月'd'日' H:mm",
                        F: "gg y'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "gg y'年'M'月'"
                    }
                }
            }
        }],
    "ko-KR": ["ko-KR", "default", {
            name: "ko-KR",
            englishName: "Korean (Korea)",
            nativeName: "한국어 (대한민국)",
            language: "ko",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    decimals: 0,
                    symbol: "₩"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
                        namesAbbr: ["일", "월", "화", "수", "목", "금", "토"],
                        namesShort: ["일", "월", "화", "수", "목", "금", "토"]
                    },
                    months: {
                        names: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["오전", "오전", "오전"],
                    PM: ["오후", "오후", "오후"],
                    eras: [{ "name": "서기", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy'년' M'월' d'일' dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "yyyy'년' M'월' d'일' dddd tt h:mm",
                        F: "yyyy'년' M'월' d'일' dddd tt h:mm:ss",
                        M: "M'월' d'일'",
                        Y: "yyyy'년' M'월'"
                    }
                },
                Korean: {
                    name: "Korean",
                    "/": "-",
                    days: {
                        names: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
                        namesAbbr: ["일", "월", "화", "수", "목", "금", "토"],
                        namesShort: ["일", "월", "화", "수", "목", "금", "토"]
                    },
                    months: {
                        names: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["오전", "오전", "오전"],
                    PM: ["오후", "오후", "오후"],
                    eras: [{ "name": "단기", "start": null, "offset": -2333 }],
                    twoDigitYearMax: 4362,
                    patterns: {
                        d: "gg yyyy-MM-dd",
                        D: "gg yyyy'년' M'월' d'일' dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "gg yyyy'년' M'월' d'일' dddd tt h:mm",
                        F: "gg yyyy'년' M'월' d'일' dddd tt h:mm:ss",
                        M: "M'월' d'일'",
                        Y: "gg yyyy'년' M'월'"
                    }
                }
            }
        }],
    "nl-NL": ["nl-NL", "default", {
            name: "nl-NL",
            englishName: "Dutch (Netherlands)",
            nativeName: "Nederlands (Nederland)",
            language: "nl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"],
                        namesAbbr: ["zo", "ma", "di", "wo", "do", "vr", "za"],
                        namesShort: ["zo", "ma", "di", "wo", "do", "vr", "za"]
                    },
                    months: {
                        names: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d-M-yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd d MMMM yyyy H:mm",
                        F: "dddd d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "nb-NO": ["nb-NO", "default", {
            name: "nb-NO",
            englishName: "Norwegian, Bokmål (Norway)",
            nativeName: "norsk, bokmål (Norge)",
            language: "nb",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                        namesAbbr: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
                        namesShort: ["sø", "ma", "ti", "on", "to", "fr", "lø"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "pl-PL": ["pl-PL", "default", {
            name: "pl-PL",
            englishName: "Polish (Poland)",
            nativeName: "polski (Polska)",
            language: "pl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "zł"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["niedziela", "poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota"],
                        namesAbbr: ["N", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
                        namesShort: ["N", "Pn", "Wt", "Śr", "Cz", "Pt", "So"]
                    },
                    months: {
                        names: ["styczeń", "luty", "marzec", "kwiecień", "maj", "czerwiec", "lipiec", "sierpień", "wrzesień", "październik", "listopad", "grudzień", ""],
                        namesAbbr: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""]
                    },
                    monthsGenitive: {
                        names: ["stycznia", "lutego", "marca", "kwietnia", "maja", "czerwca", "lipca", "sierpnia", "września", "października", "listopada", "grudnia", ""],
                        namesAbbr: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "pt-BR": ["pt-BR", "default", {
            name: "pt-BR",
            englishName: "Portuguese (Brazil)",
            nativeName: "Português (Brasil)",
            language: "pt",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "R$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"],
                        namesAbbr: ["dom", "seg", "ter", "qua", "qui", "sex", "sáb"],
                        namesShort: ["D", "S", "T", "Q", "Q", "S", "S"]
                    },
                    months: {
                        names: ["janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""],
                        namesAbbr: ["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' de 'MMMM' de 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' de 'MMMM' de 'yyyy HH:mm",
                        F: "dddd, d' de 'MMMM' de 'yyyy HH:mm:ss",
                        M: "dd' de 'MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "rm-CH": ["rm-CH", "default", {
            name: "rm-CH",
            englishName: "Romansh (Switzerland)",
            nativeName: "Rumantsch (Svizra)",
            language: "rm",
            numberFormat: {
                ",": "'",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "fr."
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dumengia", "glindesdi", "mardi", "mesemna", "gievgia", "venderdi", "sonda"],
                        namesAbbr: ["du", "gli", "ma", "me", "gie", "ve", "so"],
                        namesShort: ["du", "gli", "ma", "me", "gie", "ve", "so"]
                    },
                    months: {
                        names: ["schaner", "favrer", "mars", "avrigl", "matg", "zercladur", "fanadur", "avust", "settember", "october", "november", "december", ""],
                        namesAbbr: ["schan", "favr", "mars", "avr", "matg", "zercl", "fan", "avust", "sett", "oct", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "s. Cr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d MMMM yyyy HH:mm",
                        F: "dddd, d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ro-RO": ["ro-RO", "default", {
            name: "ro-RO",
            englishName: "Romanian (Romania)",
            nativeName: "română (România)",
            language: "ro",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "lei"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["duminică", "luni", "marţi", "miercuri", "joi", "vineri", "sâmbătă"],
                        namesAbbr: ["D", "L", "Ma", "Mi", "J", "V", "S"],
                        namesShort: ["D", "L", "Ma", "Mi", "J", "V", "S"]
                    },
                    months: {
                        names: ["ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie", ""],
                        namesAbbr: ["ian.", "feb.", "mar.", "apr.", "mai.", "iun.", "iul.", "aug.", "sep.", "oct.", "nov.", "dec.", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ru-RU": ["ru-RU", "default", {
            name: "ru-RU",
            englishName: "Russian (Russia)",
            nativeName: "русский (Россия)",
            language: "ru",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"],
                        namesAbbr: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                        namesShort: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"]
                    },
                    months: {
                        names: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    monthsGenitive: {
                        names: ["января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря", ""],
                        namesAbbr: ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy 'г.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'г.' H:mm",
                        F: "d MMMM yyyy 'г.' H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hr-HR": ["hr-HR", "default", {
            name: "hr-HR",
            englishName: "Croatian (Croatia)",
            nativeName: "hrvatski (Hrvatska)",
            language: "hr",
            numberFormat: {
                pattern: ["- n"],
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kn"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["siječanj", "veljača", "ožujak", "travanj", "svibanj", "lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    monthsGenitive: {
                        names: ["siječnja", "veljače", "ožujka", "travnja", "svibnja", "lipnja", "srpnja", "kolovoza", "rujna", "listopada", "studenog", "prosinca", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy.",
                        D: "d. MMMM yyyy.",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy. H:mm",
                        F: "d. MMMM yyyy. H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "sk-SK": ["sk-SK", "default", {
            name: "sk-SK",
            englishName: "Slovak (Slovakia)",
            nativeName: "slovenčina (Slovenská republika)",
            language: "sk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["nedeľa", "pondelok", "utorok", "streda", "štvrtok", "piatok", "sobota"],
                        namesAbbr: ["ne", "po", "ut", "st", "št", "pi", "so"],
                        namesShort: ["ne", "po", "ut", "st", "št", "pi", "so"]
                    },
                    months: {
                        names: ["január", "február", "marec", "apríl", "máj", "jún", "júl", "august", "september", "október", "november", "december", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    monthsGenitive: {
                        names: ["januára", "februára", "marca", "apríla", "mája", "júna", "júla", "augusta", "septembra", "októbra", "novembra", "decembra", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. l.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sq-AL": ["sq-AL", "default", {
            name: "sq-AL",
            englishName: "Albanian (Albania)",
            nativeName: "shqipe (Shqipëria)",
            language: "sq",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": ".",
                    ".": ",",
                    symbol: "Lek"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["e diel", "e hënë", "e martë", "e mërkurë", "e enjte", "e premte", "e shtunë"],
                        namesAbbr: ["Die", "Hën", "Mar", "Mër", "Enj", "Pre", "Sht"],
                        namesShort: ["Di", "Hë", "Ma", "Më", "En", "Pr", "Sh"]
                    },
                    months: {
                        names: ["janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nëntor", "dhjetor", ""],
                        namesAbbr: ["Jan", "Shk", "Mar", "Pri", "Maj", "Qer", "Kor", "Gsh", "Sht", "Tet", "Nën", "Dhj", ""]
                    },
                    AM: ["PD", "pd", "PD"],
                    PM: ["MD", "md", "MD"],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy-MM-dd",
                        t: "h:mm.tt",
                        T: "h:mm:ss.tt",
                        f: "yyyy-MM-dd h:mm.tt",
                        F: "yyyy-MM-dd h:mm:ss.tt",
                        Y: "yyyy-MM"
                    }
                }
            }
        }],
    "sv-SE": ["sv-SE", "default", {
            name: "sv-SE",
            englishName: "Swedish (Sweden)",
            nativeName: "svenska (Sverige)",
            language: "sv",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"],
                        namesAbbr: ["sö", "må", "ti", "on", "to", "fr", "lö"],
                        namesShort: ["sö", "må", "ti", "on", "to", "fr", "lö"]
                    },
                    months: {
                        names: ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "'den 'd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "'den 'd MMMM yyyy HH:mm",
                        F: "'den 'd MMMM yyyy HH:mm:ss",
                        M: "'den 'd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "th-TH": ["th-TH", "default", {
            name: "th-TH",
            englishName: "Thai (Thailand)",
            nativeName: "ไทย (ไทย)",
            language: "th",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "฿"
                }
            },
            calendars: {
                standard: {
                    name: "ThaiBuddhist",
                    firstDay: 1,
                    days: {
                        names: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"],
                        namesAbbr: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
                        namesShort: ["อ", "จ", "อ", "พ", "พ", "ศ", "ส"]
                    },
                    months: {
                        names: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""],
                        namesAbbr: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""]
                    },
                    eras: [{ "name": "พ.ศ.", "start": null, "offset": -543 }],
                    twoDigitYearMax: 2572,
                    patterns: {
                        d: "d/M/yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 1,
                    days: {
                        names: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"],
                        namesAbbr: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
                        namesShort: ["อ", "จ", "อ", "พ", "พ", "ศ", "ส"]
                    },
                    months: {
                        names: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""],
                        namesAbbr: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "'วัน'dddd'ที่' d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "'วัน'dddd'ที่' d MMMM yyyy H:mm",
                        F: "'วัน'dddd'ที่' d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tr-TR": ["tr-TR", "default", {
            name: "tr-TR",
            englishName: "Turkish (Turkey)",
            nativeName: "Türkçe (Türkiye)",
            language: "tr",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "TL"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"],
                        namesAbbr: ["Paz", "Pzt", "Sal", "Çar", "Per", "Cum", "Cmt"],
                        namesShort: ["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"]
                    },
                    months: {
                        names: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık", ""],
                        namesAbbr: ["Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dd MMMM yyyy dddd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy dddd HH:mm",
                        F: "dd MMMM yyyy dddd HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ur-PK": ["ur-PK", "default", {
            name: "ur-PK",
            englishName: "Urdu (Islamic Republic of Pakistan)",
            nativeName: "اُردو (پاکستان)",
            language: "ur",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["$n-", "$n"],
                    symbol: "Rs"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"],
                        namesAbbr: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"],
                        namesShort: ["ا", "پ", "م", "ب", "ج", "ج", "ه"]
                    },
                    months: {
                        names: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""],
                        namesAbbr: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""]
                    },
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        f: "dd MMMM, yyyy h:mm tt",
                        F: "dd MMMM, yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                }
            }
        }],
    "id-ID": ["id-ID", "default", {
            name: "id-ID",
            englishName: "Indonesian (Indonesia)",
            nativeName: "Bahasa Indonesia (Indonesia)",
            language: "id",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    decimals: 0,
                    ",": ".",
                    ".": ",",
                    symbol: "Rp"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"],
                        namesAbbr: ["Minggu", "Sen", "Sel", "Rabu", "Kamis", "Jumat", "Sabtu"],
                        namesShort: ["M", "S", "S", "R", "K", "J", "S"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "Nopember", "Desember", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agust", "Sep", "Okt", "Nop", "Des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM yyyy H:mm",
                        F: "dd MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "uk-UA": ["uk-UA", "default", {
            name: "uk-UA",
            englishName: "Ukrainian (Ukraine)",
            nativeName: "українська (Україна)",
            language: "uk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "₴"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["неділя", "понеділок", "вівторок", "середа", "четвер", "п'ятниця", "субота"],
                        namesAbbr: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                        namesShort: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"]
                    },
                    months: {
                        names: ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень", ""],
                        namesAbbr: ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру", ""]
                    },
                    monthsGenitive: {
                        names: ["січня", "лютого", "березня", "квітня", "травня", "червня", "липня", "серпня", "вересня", "жовтня", "листопада", "грудня", ""],
                        namesAbbr: ["січ", "лют", "бер", "кві", "тра", "чер", "лип", "сер", "вер", "жов", "лис", "гру", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy' р.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy' р.' H:mm",
                        F: "d MMMM yyyy' р.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy' р.'"
                    }
                }
            }
        }],
    "be-BY": ["be-BY", "default", {
            name: "be-BY",
            englishName: "Belarusian (Belarus)",
            nativeName: "Беларускі (Беларусь)",
            language: "be",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["нядзеля", "панядзелак", "аўторак", "серада", "чацвер", "пятніца", "субота"],
                        namesAbbr: ["нд", "пн", "аў", "ср", "чц", "пт", "сб"],
                        namesShort: ["нд", "пн", "аў", "ср", "чц", "пт", "сб"]
                    },
                    months: {
                        names: ["Студзень", "Люты", "Сакавік", "Красавік", "Май", "Чэрвень", "Ліпень", "Жнівень", "Верасень", "Кастрычнік", "Лістапад", "Снежань", ""],
                        namesAbbr: ["Сту", "Лют", "Сак", "Кра", "Май", "Чэр", "Ліп", "Жні", "Вер", "Кас", "Ліс", "Сне", ""]
                    },
                    monthsGenitive: {
                        names: ["студзеня", "лютага", "сакавіка", "красавіка", "мая", "чэрвеня", "ліпеня", "жніўня", "верасня", "кастрычніка", "лістапада", "снежня", ""],
                        namesAbbr: ["Сту", "Лют", "Сак", "Кра", "Май", "Чэр", "Ліп", "Жні", "Вер", "Кас", "Ліс", "Сне", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sl-SI": ["sl-SI", "default", {
            name: "sl-SI",
            englishName: "Slovenian (Slovenia)",
            nativeName: "slovenski (Slovenija)",
            language: "sl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljek", "torek", "sreda", "četrtek", "petek", "sobota"],
                        namesAbbr: ["ned", "pon", "tor", "sre", "čet", "pet", "sob"],
                        namesShort: ["ne", "po", "to", "sr", "če", "pe", "so"]
                    },
                    months: {
                        names: ["januar", "februar", "marec", "april", "maj", "junij", "julij", "avgust", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "et-EE": ["et-EE", "default", {
            name: "et-EE",
            englishName: "Estonian (Estonia)",
            nativeName: "eesti (Eesti)",
            language: "et",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pühapäev", "esmaspäev", "teisipäev", "kolmapäev", "neljapäev", "reede", "laupäev"],
                        namesAbbr: ["P", "E", "T", "K", "N", "R", "L"],
                        namesShort: ["P", "E", "T", "K", "N", "R", "L"]
                    },
                    months: {
                        names: ["jaanuar", "veebruar", "märts", "aprill", "mai", "juuni", "juuli", "august", "september", "oktoober", "november", "detsember", ""],
                        namesAbbr: ["jaan", "veebr", "märts", "apr", "mai", "juuni", "juuli", "aug", "sept", "okt", "nov", "dets", ""]
                    },
                    AM: ["EL", "el", "EL"],
                    PM: ["PL", "pl", "PL"],
                    patterns: {
                        d: "d.MM.yyyy",
                        D: "d. MMMM yyyy'. a.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy'. a.' H:mm",
                        F: "d. MMMM yyyy'. a.' H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy'. a.'"
                    }
                }
            }
        }],
    "lv-LV": ["lv-LV", "default", {
            name: "lv-LV",
            englishName: "Latvian (Latvia)",
            nativeName: "latviešu (Latvija)",
            language: "lv",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "Ls"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["svētdiena", "pirmdiena", "otrdiena", "trešdiena", "ceturtdiena", "piektdiena", "sestdiena"],
                        namesAbbr: ["sv", "pr", "ot", "tr", "ce", "pk", "se"],
                        namesShort: ["sv", "pr", "ot", "tr", "ce", "pk", "se"]
                    },
                    months: {
                        names: ["janvāris", "februāris", "marts", "aprīlis", "maijs", "jūnijs", "jūlijs", "augusts", "septembris", "oktobris", "novembris", "decembris", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jūn", "jūl", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["janvārī", "februārī", "martā", "aprīlī", "maijā", "jūnijā", "jūlijā", "augustā", "septembrī", "oktobrī", "novembrī", "decembrī", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jūn", "jūl", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy.MM.dd.",
                        D: "dddd, yyyy'. gada 'd. MMMM",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, yyyy'. gada 'd. MMMM H:mm",
                        F: "dddd, yyyy'. gada 'd. MMMM H:mm:ss",
                        M: "d. MMMM",
                        Y: "yyyy. MMMM"
                    }
                }
            }
        }],
    "lt-LT": ["lt-LT", "default", {
            name: "lt-LT",
            englishName: "Lithuanian (Lithuania)",
            nativeName: "lietuvių (Lietuva)",
            language: "lt",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Lt"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sekmadienis", "pirmadienis", "antradienis", "trečiadienis", "ketvirtadienis", "penktadienis", "šeštadienis"],
                        namesAbbr: ["Sk", "Pr", "An", "Tr", "Kt", "Pn", "Št"],
                        namesShort: ["S", "P", "A", "T", "K", "Pn", "Š"]
                    },
                    months: {
                        names: ["sausis", "vasaris", "kovas", "balandis", "gegužė", "birželis", "liepa", "rugpjūtis", "rugsėjis", "spalis", "lapkritis", "gruodis", ""],
                        namesAbbr: ["Sau", "Vas", "Kov", "Bal", "Geg", "Bir", "Lie", "Rgp", "Rgs", "Spl", "Lap", "Grd", ""]
                    },
                    monthsGenitive: {
                        names: ["sausio", "vasario", "kovo", "balandžio", "gegužės", "birželio", "liepos", "rugpjūčio", "rugsėjo", "spalio", "lapkričio", "gruodžio", ""],
                        namesAbbr: ["Sau", "Vas", "Kov", "Bal", "Geg", "Bir", "Lie", "Rgp", "Rgs", "Spl", "Lap", "Grd", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy.MM.dd",
                        D: "yyyy 'm.' MMMM d 'd.'",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'm.' MMMM d 'd.' HH:mm",
                        F: "yyyy 'm.' MMMM d 'd.' HH:mm:ss",
                        M: "MMMM d 'd.'",
                        Y: "yyyy 'm.' MMMM"
                    }
                }
            }
        }],
    "tg-Cyrl-TJ": ["tg-Cyrl-TJ", "default", {
            name: "tg-Cyrl-TJ",
            englishName: "Tajik (Cyrillic, Tajikistan)",
            nativeName: "Тоҷикӣ (Тоҷикистон)",
            language: "tg-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ";",
                    symbol: "т.р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    days: {
                        names: ["Яш", "Душанбе", "Сешанбе", "Чоршанбе", "Панҷшанбе", "Ҷумъа", "Шанбе"],
                        namesAbbr: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"],
                        namesShort: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"]
                    },
                    months: {
                        names: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["январи", "феврали", "марти", "апрели", "маи", "июни", "июли", "августи", "сентябри", "октябри", "ноябри", "декабри", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fa-IR": ["fa-IR", "default", {
            name: "fa-IR",
            englishName: "Persian",
            nativeName: "فارسى (ایران)",
            language: "fa",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    ".": "/",
                    symbol: "ريال"
                }
            },
            calendars: {
                standard: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["يكشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["يكشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["ژانويه", "فوريه", "مارس", "آوريل", "مى", "ژوئن", "ژوئيه", "اوت", "سپتامبر", "اُكتبر", "نوامبر", "دسامبر", ""],
                        namesAbbr: ["ژانويه", "فوريه", "مارس", "آوريل", "مى", "ژوئن", "ژوئيه", "اوت", "سپتامبر", "اُكتبر", "نوامبر", "دسامبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "yyyy/MM/dd",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "yyyy/MM/dd hh:mm tt",
                        F: "yyyy/MM/dd hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "vi-VN": ["vi-VN", "default", {
            name: "vi-VN",
            englishName: "Vietnamese (Vietnam)",
            nativeName: "Tiếng Việt (Việt Nam)",
            language: "vi",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "₫"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"],
                        namesAbbr: ["CN", "Hai", "Ba", "Tư", "Năm", "Sáu", "Bảy"],
                        namesShort: ["C", "H", "B", "T", "N", "S", "B"]
                    },
                    months: {
                        names: ["Tháng Giêng", "Tháng Hai", "Tháng Ba", "Tháng Tư", "Tháng Năm", "Tháng Sáu", "Tháng Bảy", "Tháng Tám", "Tháng Chín", "Tháng Mười", "Tháng Mười Một", "Tháng Mười Hai", ""],
                        namesAbbr: ["Thg1", "Thg2", "Thg3", "Thg4", "Thg5", "Thg6", "Thg7", "Thg8", "Thg9", "Thg10", "Thg11", "Thg12", ""]
                    },
                    AM: ["SA", "sa", "SA"],
                    PM: ["CH", "ch", "CH"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        f: "dd MMMM yyyy h:mm tt",
                        F: "dd MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hy-AM": ["hy-AM", "default", {
            name: "hy-AM",
            englishName: "Armenian (Armenia)",
            nativeName: "Հայերեն (Հայաստան)",
            language: "hy",
            numberFormat: {
                currency: {
                    pattern: ["-n $", "n $"],
                    symbol: "դր."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Կիրակի", "Երկուշաբթի", "Երեքշաբթի", "Չորեքշաբթի", "Հինգշաբթի", "ՈՒրբաթ", "Շաբաթ"],
                        namesAbbr: ["Կիր", "Երկ", "Երք", "Չրք", "Հնգ", "ՈՒր", "Շբթ"],
                        namesShort: ["Կ", "Ե", "Ե", "Չ", "Հ", "Ո", "Շ"]
                    },
                    months: {
                        names: ["Հունվար", "Փետրվար", "Մարտ", "Ապրիլ", "Մայիս", "Հունիս", "Հուլիս", "Օգոստոս", "Սեպտեմբեր", "Հոկտեմբեր", "Նոյեմբեր", "Դեկտեմբեր", ""],
                        namesAbbr: ["ՀՆՎ", "ՓՏՎ", "ՄՐՏ", "ԱՊՐ", "ՄՅՍ", "ՀՆՍ", "ՀԼՍ", "ՕԳՍ", "ՍԵՊ", "ՀՈԿ", "ՆՈՅ", "ԴԵԿ", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM, yyyy H:mm",
                        F: "d MMMM, yyyy H:mm:ss",
                        M: "d MMMM"
                    }
                }
            }
        }],
    "az-Latn-AZ": ["az-Latn-AZ", "default", {
            name: "az-Latn-AZ",
            englishName: "Azeri (Latin, Azerbaijan)",
            nativeName: "Azərbaycan­ılı (Azərbaycan)",
            language: "az-Latn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "man."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Bazar", "Bazar ertəsi", "Çərşənbə axşamı", "Çərşənbə", "Cümə axşamı", "Cümə", "Şənbə"],
                        namesAbbr: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"],
                        namesShort: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"]
                    },
                    months: {
                        names: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "İyun", "İyul", "Avgust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    monthsGenitive: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "eu-ES": ["eu-ES", "default", {
            name: "eu-ES",
            englishName: "Basque (Basque)",
            nativeName: "euskara (euskara)",
            language: "eu",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["igandea", "astelehena", "asteartea", "asteazkena", "osteguna", "ostirala", "larunbata"],
                        namesAbbr: ["ig.", "al.", "as.", "az.", "og.", "or.", "lr."],
                        namesShort: ["ig", "al", "as", "az", "og", "or", "lr"]
                    },
                    months: {
                        names: ["urtarrila", "otsaila", "martxoa", "apirila", "maiatza", "ekaina", "uztaila", "abuztua", "iraila", "urria", "azaroa", "abendua", ""],
                        namesAbbr: ["urt.", "ots.", "mar.", "api.", "mai.", "eka.", "uzt.", "abu.", "ira.", "urr.", "aza.", "abe.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dddd, yyyy.'eko' MMMM'k 'd",
                        t: "HH:mm",
                        T: "H:mm:ss",
                        f: "dddd, yyyy.'eko' MMMM'k 'd HH:mm",
                        F: "dddd, yyyy.'eko' MMMM'k 'd H:mm:ss",
                        Y: "yyyy.'eko' MMMM"
                    }
                }
            }
        }],
    "hsb-DE": ["hsb-DE", "default", {
            name: "hsb-DE",
            englishName: "Upper Sorbian (Germany)",
            nativeName: "hornjoserbšćina (Němska)",
            language: "hsb",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["njedźela", "póndźela", "wutora", "srjeda", "štwórtk", "pjatk", "sobota"],
                        namesAbbr: ["nje", "pón", "wut", "srj", "štw", "pja", "sob"],
                        namesShort: ["n", "p", "w", "s", "š", "p", "s"]
                    },
                    months: {
                        names: ["januar", "februar", "měrc", "apryl", "meja", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "mej", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["januara", "februara", "měrca", "apryla", "meje", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "mej", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "po Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "dddd, 'dnja' d. MMMM yyyy",
                        t: "H.mm 'hodź.'",
                        T: "H:mm:ss",
                        f: "dddd, 'dnja' d. MMMM yyyy H.mm 'hodź.'",
                        F: "dddd, 'dnja' d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "mk-MK": ["mk-MK", "default", {
            name: "mk-MK",
            englishName: "Macedonian (Former Yugoslav Republic of Macedonia)",
            nativeName: "македонски јазик (Македонија)",
            language: "mk",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "ден."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недела", "понеделник", "вторник", "среда", "четврток", "петок", "сабота"],
                        namesAbbr: ["нед", "пон", "втр", "срд", "чет", "пет", "саб"],
                        namesShort: ["не", "по", "вт", "ср", "че", "пе", "са"]
                    },
                    months: {
                        names: ["јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември", ""],
                        namesAbbr: ["јан", "фев", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "ное", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, dd MMMM yyyy HH:mm",
                        F: "dddd, dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tn-ZA": ["tn-ZA", "default", {
            name: "tn-ZA",
            englishName: "Setswana (South Africa)",
            nativeName: "Setswana (Aforika Borwa)",
            language: "tn",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Latshipi", "Mosupologo", "Labobedi", "Laboraro", "Labone", "Labotlhano", "Lamatlhatso"],
                        namesAbbr: ["Ltp.", "Mos.", "Lbd.", "Lbr.", "Lbn.", "Lbt.", "Lmt."],
                        namesShort: ["Lp", "Ms", "Lb", "Lr", "Ln", "Lt", "Lm"]
                    },
                    months: {
                        names: ["Ferikgong", "Tlhakole", "Mopitloe", "Moranang", "Motsheganong", "Seetebosigo", "Phukwi", "Phatwe", "Lwetse", "Diphalane", "Ngwanatsele", "Sedimothole", ""],
                        namesAbbr: ["Fer.", "Tlhak.", "Mop.", "Mor.", "Motsh.", "Seet.", "Phukw.", "Phatw.", "Lwets.", "Diph.", "Ngwan.", "Sed.", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "xh-ZA": ["xh-ZA", "default", {
            name: "xh-ZA",
            englishName: "isiXhosa (South Africa)",
            nativeName: "isiXhosa (uMzantsi Afrika)",
            language: "xh",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["iCawa", "uMvulo", "uLwesibini", "uLwesithathu", "uLwesine", "uLwesihlanu", "uMgqibelo"],
                        namesShort: ["Ca", "Mv", "Lb", "Lt", "Ln", "Lh", "Mg"]
                    },
                    months: {
                        names: ["Mqungu", "Mdumba", "Kwindla", "Tshazimpuzi", "Canzibe", "Silimela", "Khala", "Thupha", "Msintsi", "Dwarha", "Nkanga", "Mnga", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "zu-ZA": ["zu-ZA", "default", {
            name: "zu-ZA",
            englishName: "isiZulu (South Africa)",
            nativeName: "isiZulu (iNingizimu Afrika)",
            language: "zu",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["iSonto", "uMsombuluko", "uLwesibili", "uLwesithathu", "uLwesine", "uLwesihlanu", "uMgqibelo"],
                        namesAbbr: ["Son.", "Mso.", "Bi.", "Tha.", "Ne.", "Hla.", "Mgq."]
                    },
                    months: {
                        names: ["uMasingana", "uNhlolanja", "uNdasa", "uMbaso", "uNhlaba", "uNhlangulana", "uNtulikazi", "uNcwaba", "uMandulo", "uMfumfu", "uLwezi", "uZibandlela", ""],
                        namesAbbr: ["Mas.", "Nhlo.", "Nda.", "Mba.", "Nhla.", "Nhlang.", "Ntu.", "Ncwa.", "Man.", "Mfu.", "Lwe.", "Zib.", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "af-ZA": ["af-ZA", "default", {
            name: "af-ZA",
            englishName: "Afrikaans (South Africa)",
            nativeName: "Afrikaans (Suid Afrika)",
            language: "af",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"],
                        namesAbbr: ["Son", "Maan", "Dins", "Woen", "Dond", "Vry", "Sat"],
                        namesShort: ["So", "Ma", "Di", "Wo", "Do", "Vr", "Sa"]
                    },
                    months: {
                        names: ["Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ka-GE": ["ka-GE", "default", {
            name: "ka-GE",
            englishName: "Georgian (Georgia)",
            nativeName: "ქართული (საქართველო)",
            language: "ka",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Lari"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"],
                        namesAbbr: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"],
                        namesShort: ["კ", "ო", "ს", "ო", "ხ", "პ", "შ"]
                    },
                    months: {
                        names: ["იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი", ""],
                        namesAbbr: ["იან", "თებ", "მარ", "აპრ", "მაის", "ივნ", "ივლ", "აგვ", "სექ", "ოქტ", "ნოემ", "დეკ", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "yyyy 'წლის' dd MM, dddd",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'წლის' dd MM, dddd H:mm",
                        F: "yyyy 'წლის' dd MM, dddd H:mm:ss",
                        M: "dd MM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fo-FO": ["fo-FO", "default", {
            name: "fo-FO",
            englishName: "Faroese (Faroe Islands)",
            nativeName: "føroyskt (Føroyar)",
            language: "fo",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["sunnudagur", "mánadagur", "týsdagur", "mikudagur", "hósdagur", "fríggjadagur", "leygardagur"],
                        namesAbbr: ["sun", "mán", "týs", "mik", "hós", "frí", "leyg"],
                        namesShort: ["su", "má", "tý", "mi", "hó", "fr", "ley"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "apríl", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hi-IN": ["hi-IN", "default", {
            name: "hi-IN",
            englishName: "Hindi (India)",
            nativeName: "हिंदी (भारत)",
            language: "hi",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["रवि.", "सोम.", "मंगल.", "बुध.", "गुरु.", "शुक्र.", "शनि."],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""],
                        namesAbbr: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""]
                    },
                    AM: ["पूर्वाह्न", "पूर्वाह्न", "पूर्वाह्न"],
                    PM: ["अपराह्न", "अपराह्न", "अपराह्न"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "mt-MT": ["mt-MT", "default", {
            name: "mt-MT",
            englishName: "Maltese (Malta)",
            nativeName: "Malti (Malta)",
            language: "mt",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Il-Ħadd", "It-Tnejn", "It-Tlieta", "L-Erbgħa", "Il-Ħamis", "Il-Ġimgħa", "Is-Sibt"],
                        namesAbbr: ["Ħad", "Tne", "Tli", "Erb", "Ħam", "Ġim", "Sib"],
                        namesShort: ["I", "I", "I", "L", "I", "I", "I"]
                    },
                    months: {
                        names: ["Jannar", "Frar", "Marzu", "April", "Mejju", "Ġunju", "Lulju", "Awissu", "Settembru", "Ottubru", "Novembru", "Diċembru", ""],
                        namesAbbr: ["Jan", "Fra", "Mar", "Apr", "Mej", "Ġun", "Lul", "Awi", "Set", "Ott", "Nov", "Diċ", ""]
                    },
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' ta\\' 'MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' ta\\' 'MMMM yyyy HH:mm",
                        F: "dddd, d' ta\\' 'MMMM yyyy HH:mm:ss",
                        M: "d' ta\\' 'MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "se-NO": ["se-NO", "default", {
            name: "se-NO",
            englishName: "Sami, Northern (Norway)",
            nativeName: "davvisámegiella (Norga)",
            language: "se",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sotnabeaivi", "vuossárga", "maŋŋebárga", "gaskavahkku", "duorastat", "bearjadat", "lávvardat"],
                        namesAbbr: ["sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"],
                        namesShort: ["s", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđajagimánu", "guovvamánu", "njukčamánu", "cuoŋománu", "miessemánu", "geassemánu", "suoidnemánu", "borgemánu", "čakčamánu", "golggotmánu", "skábmamánu", "juovlamánu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ms-MY": ["ms-MY", "default", {
            name: "ms-MY",
            englishName: "Malay (Malaysia)",
            nativeName: "Bahasa Melayu (Malaysia)",
            language: "ms",
            numberFormat: {
                currency: {
                    decimals: 0,
                    symbol: "RM"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesAbbr: ["Ahad", "Isnin", "Sel", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesShort: ["A", "I", "S", "R", "K", "J", "S"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""],
                        namesAbbr: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogos", "Sept", "Okt", "Nov", "Dis", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM yyyy H:mm",
                        F: "dd MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "kk-KZ": ["kk-KZ", "default", {
            name: "kk-KZ",
            englishName: "Kazakh (Kazakhstan)",
            nativeName: "Қазақ (Қазақстан)",
            language: "kk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    ",": " ",
                    ".": "-",
                    symbol: "Т"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Жексенбі", "Дүйсенбі", "Сейсенбі", "Сәрсенбі", "Бейсенбі", "Жұма", "Сенбі"],
                        namesAbbr: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"],
                        namesShort: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"]
                    },
                    months: {
                        names: ["қаңтар", "ақпан", "наурыз", "сәуір", "мамыр", "маусым", "шілде", "тамыз", "қыркүйек", "қазан", "қараша", "желтоқсан", ""],
                        namesAbbr: ["Қаң", "Ақп", "Нау", "Сәу", "Мам", "Мау", "Шіл", "Там", "Қыр", "Қаз", "Қар", "Жел", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy 'ж.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'ж.' H:mm",
                        F: "d MMMM yyyy 'ж.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ky-KG": ["ky-KG", "default", {
            name: "ky-KG",
            englishName: "Kyrgyz (Kyrgyzstan)",
            nativeName: "Кыргыз (Кыргызстан)",
            language: "ky",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": "-",
                    symbol: "сом"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Жекшемби", "Дүйшөмбү", "Шейшемби", "Шаршемби", "Бейшемби", "Жума", "Ишемби"],
                        namesAbbr: ["Жш", "Дш", "Шш", "Шр", "Бш", "Жм", "Иш"],
                        namesShort: ["Жш", "Дш", "Шш", "Шр", "Бш", "Жм", "Иш"]
                    },
                    months: {
                        names: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d'-'MMMM yyyy'-ж.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d'-'MMMM yyyy'-ж.' H:mm",
                        F: "d'-'MMMM yyyy'-ж.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy'-ж.'"
                    }
                }
            }
        }],
    "sw-KE": ["sw-KE", "default", {
            name: "sw-KE",
            englishName: "Kiswahili (Kenya)",
            nativeName: "Kiswahili (Kenya)",
            language: "sw",
            numberFormat: {
                currency: {
                    symbol: "S"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"],
                        namesAbbr: ["Jumap.", "Jumat.", "Juman.", "Jumat.", "Alh.", "Iju.", "Jumam."],
                        namesShort: ["P", "T", "N", "T", "A", "I", "M"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Decemba", ""],
                        namesAbbr: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Dec", ""]
                    }
                }
            }
        }],
    "tk-TM": ["tk-TM", "default", {
            name: "tk-TM",
            englishName: "Turkmen (Turkmenistan)",
            nativeName: "türkmençe (Türkmenistan)",
            language: "tk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "m."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Duşenbe", "Sişenbe", "Çarşenbe", "Penşenbe", "Anna", "Şenbe", "Ýekşenbe"],
                        namesAbbr: ["Db", "Sb", "Çb", "Pb", "An", "Şb", "Ýb"],
                        namesShort: ["D", "S", "Ç", "P", "A", "Ş", "Ý"]
                    },
                    months: {
                        names: ["Ýanwar", "Fewral", "Mart", "Aprel", "Maý", "lýun", "lýul", "Awgust", "Sentýabr", "Oktýabr", "Noýabr", "Dekabr", ""],
                        namesAbbr: ["Ýan", "Few", "Mart", "Apr", "Maý", "lýun", "lýul", "Awg", "Sen", "Okt", "Not", "Dek", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "yyyy 'ý.' MMMM d",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'ý.' MMMM d H:mm",
                        F: "yyyy 'ý.' MMMM d H:mm:ss",
                        Y: "yyyy 'ý.' MMMM"
                    }
                }
            }
        }],
    "uz-Latn-UZ": ["uz-Latn-UZ", "default", {
            name: "uz-Latn-UZ",
            englishName: "Uzbek (Latin, Uzbekistan)",
            nativeName: "U'zbek (U'zbekiston Respublikasi)",
            language: "uz-Latn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    decimals: 0,
                    ",": " ",
                    ".": ",",
                    symbol: "so'm"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["yakshanba", "dushanba", "seshanba", "chorshanba", "payshanba", "juma", "shanba"],
                        namesAbbr: ["yak.", "dsh.", "sesh.", "chr.", "psh.", "jm.", "sh."],
                        namesShort: ["ya", "d", "s", "ch", "p", "j", "sh"]
                    },
                    months: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM yyyy",
                        D: "yyyy 'yil' d-MMMM",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'yil' d-MMMM HH:mm",
                        F: "yyyy 'yil' d-MMMM HH:mm:ss",
                        M: "d-MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tt-RU": ["tt-RU", "default", {
            name: "tt-RU",
            englishName: "Tatar (Russia)",
            nativeName: "Татар (Россия)",
            language: "tt",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Якшәмбе", "Дүшәмбе", "Сишәмбе", "Чәршәмбе", "Пәнҗешәмбе", "Җомга", "Шимбә"],
                        namesAbbr: ["Якш", "Дүш", "Сиш", "Чәрш", "Пәнҗ", "Җом", "Шим"],
                        namesShort: ["Я", "Д", "С", "Ч", "П", "Җ", "Ш"]
                    },
                    months: {
                        names: ["Гыйнвар", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["Гыйн.", "Фев.", "Мар.", "Апр.", "Май", "Июнь", "Июль", "Авг.", "Сен.", "Окт.", "Нояб.", "Дек.", ""]
                    },
                    monthsGenitive: {
                        names: ["Гыйнварның", "Февральнең", "Мартның", "Апрельнең", "Майның", "Июньнең", "Июльнең", "Августның", "Сентябрьның", "Октябрьның", "Ноябрьның", "Декабрьның", ""],
                        namesAbbr: ["Гыйн.-ның", "Фев.-нең", "Мар.-ның", "Апр.-нең", "Майның", "Июньнең", "Июльнең", "Авг.-ның", "Сен.-ның", "Окт.-ның", "Нояб.-ның", "Дек.-ның", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "bn-IN": ["bn-IN", "default", {
            name: "bn-IN",
            englishName: "Bengali (India)",
            nativeName: "বাংলা (ভারত)",
            language: "bn",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-%n", "%n"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "টা"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    ":": ".",
                    firstDay: 1,
                    days: {
                        names: ["রবিবার", "সোমবার", "মঙ্গলবার", "বুধবার", "বৃহস্পতিবার", "শুক্রবার", "শনিবার"],
                        namesAbbr: ["রবি.", "সোম.", "মঙ্গল.", "বুধ.", "বৃহস্পতি.", "শুক্র.", "শনি."],
                        namesShort: ["র", "স", "ম", "ব", "ব", "শ", "শ"]
                    },
                    months: {
                        names: ["জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""],
                        namesAbbr: ["জানু.", "ফেব্রু.", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগ.", "সেপ্টে.", "অক্টো.", "নভে.", "ডিসে.", ""]
                    },
                    AM: ["পুর্বাহ্ন", "পুর্বাহ্ন", "পুর্বাহ্ন"],
                    PM: ["অপরাহ্ন", "অপরাহ্ন", "অপরাহ্ন"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH.mm",
                        T: "HH.mm.ss",
                        f: "dd MMMM yyyy HH.mm",
                        F: "dd MMMM yyyy HH.mm.ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "pa-IN": ["pa-IN", "default", {
            name: "pa-IN",
            englishName: "Punjabi (India)",
            nativeName: "ਪੰਜਾਬੀ (ਭਾਰਤ)",
            language: "pa",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ਰੁ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ਐਤਵਾਰ", "ਸੋਮਵਾਰ", "ਮੰਗਲਵਾਰ", "ਬੁੱਧਵਾਰ", "ਵੀਰਵਾਰ", "ਸ਼ੁੱਕਰਵਾਰ", "ਸ਼ਨਿੱਚਰਵਾਰ"],
                        namesAbbr: ["ਐਤ.", "ਸੋਮ.", "ਮੰਗਲ.", "ਬੁੱਧ.", "ਵੀਰ.", "ਸ਼ੁਕਰ.", "ਸ਼ਨਿੱਚਰ."],
                        namesShort: ["ਐ", "ਸ", "ਮ", "ਬ", "ਵ", "ਸ਼", "ਸ਼"]
                    },
                    months: {
                        names: ["ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""],
                        namesAbbr: ["ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""]
                    },
                    AM: ["ਸਵੇਰ", "ਸਵੇਰ", "ਸਵੇਰ"],
                    PM: ["ਸ਼ਾਮ", "ਸ਼ਾਮ", "ਸ਼ਾਮ"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy dddd",
                        t: "tt hh:mm",
                        T: "tt hh:mm:ss",
                        f: "dd MMMM yyyy dddd tt hh:mm",
                        F: "dd MMMM yyyy dddd tt hh:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "gu-IN": ["gu-IN", "default", {
            name: "gu-IN",
            englishName: "Gujarati (India)",
            nativeName: "ગુજરાતી (ભારત)",
            language: "gu",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "રૂ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["રવિવાર", "સોમવાર", "મંગળવાર", "બુધવાર", "ગુરુવાર", "શુક્રવાર", "શનિવાર"],
                        namesAbbr: ["રવિ", "સોમ", "મંગળ", "બુધ", "ગુરુ", "શુક્ર", "શનિ"],
                        namesShort: ["ર", "સ", "મ", "બ", "ગ", "શ", "શ"]
                    },
                    months: {
                        names: ["જાન્યુઆરી", "ફેબ્રુઆરી", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટેમ્બર", "ઑક્ટ્બર", "નવેમ્બર", "ડિસેમ્બર", ""],
                        namesAbbr: ["જાન્યુ", "ફેબ્રુ", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટે", "ઑક્ટો", "નવે", "ડિસે", ""]
                    },
                    AM: ["પૂર્વ મધ્યાહ્ન", "પૂર્વ મધ્યાહ્ન", "પૂર્વ મધ્યાહ્ન"],
                    PM: ["ઉત્તર મધ્યાહ્ન", "ઉત્તર મધ્યાહ્ન", "ઉત્તર મધ્યાહ્ન"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "or-IN": ["or-IN", "default", {
            name: "or-IN",
            englishName: "Oriya (India)",
            nativeName: "ଓଡ଼ିଆ (ଭାରତ)",
            language: "or",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ଟ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["ରବିବାର", "ସୋମବାର", "ମଙ୍ଗଳବାର", "ବୁଧବାର", "ଗୁରୁବାର", "ଶୁକ୍ରବାର", "ଶନିବାର"],
                        namesAbbr: ["ରବି.", "ସୋମ.", "ମଙ୍ଗଳ.", "ବୁଧ.", "ଗୁରୁ.", "ଶୁକ୍ର.", "ଶନି."],
                        namesShort: ["ର", "ସୋ", "ମ", "ବୁ", "ଗୁ", "ଶୁ", "ଶ"]
                    },
                    months: {
                        names: ["ଜାନୁୟାରୀ", "ଫ୍ରେବୃୟାରୀ", "ମାର୍ଚ୍ଚ", "ଏପ୍ରିଲ୍‌", "ମେ", "ଜୁନ୍‌", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "(ଡିସେମ୍ବର", ""],
                        namesAbbr: ["ଜାନୁୟାରୀ", "ଫ୍ରେବୃୟାରୀ", "ମାର୍ଚ୍ଚ", "ଏପ୍ରିଲ୍‌", "ମେ", "ଜୁନ୍‌", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "(ଡିସେମ୍ବର", ""]
                    },
                    eras: [{ "name": "ଖ୍ରୀଷ୍ଟାବ୍ଦ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ta-IN": ["ta-IN", "default", {
            name: "ta-IN",
            englishName: "Tamil (India)",
            nativeName: "தமிழ் (இந்தியா)",
            language: "ta",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ரூ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ஞாயிற்றுக்கிழமை", "திங்கள்கிழமை", "செவ்வாய்கிழமை", "புதன்கிழமை", "வியாழக்கிழமை", "வெள்ளிக்கிழமை", "சனிக்கிழமை"],
                        namesAbbr: ["ஞாயிறு", "திங்கள்", "செவ்வாய்", "புதன்", "வியாழன்", "வெள்ளி", "சனி"],
                        namesShort: ["ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"]
                    },
                    months: {
                        names: ["ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""],
                        namesAbbr: ["ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""]
                    },
                    AM: ["காலை", "காலை", "காலை"],
                    PM: ["மாலை", "மாலை", "மாலை"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "te-IN": ["te-IN", "default", {
            name: "te-IN",
            englishName: "Telugu (India)",
            nativeName: "తెలుగు (భారత దేశం)",
            language: "te",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "రూ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ఆదివారం", "సోమవారం", "మంగళవారం", "బుధవారం", "గురువారం", "శుక్రవారం", "శనివారం"],
                        namesAbbr: ["ఆది.", "సోమ.", "మంగళ.", "బుధ.", "గురు.", "శుక్ర.", "శని."],
                        namesShort: ["ఆ", "సో", "మం", "బు", "గు", "శు", "శ"]
                    },
                    months: {
                        names: ["జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జూలై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""],
                        namesAbbr: ["జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జూలై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""]
                    },
                    AM: ["పూర్వాహ్న", "పూర్వాహ్న", "పూర్వాహ్న"],
                    PM: ["అపరాహ్న", "అపరాహ్న", "అపరాహ్న"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "kn-IN": ["kn-IN", "default", {
            name: "kn-IN",
            englishName: "Kannada (India)",
            nativeName: "ಕನ್ನಡ (ಭಾರತ)",
            language: "kn",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ರೂ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ಭಾನುವಾರ", "ಸೋಮವಾರ", "ಮಂಗಳವಾರ", "ಬುಧವಾರ", "ಗುರುವಾರ", "ಶುಕ್ರವಾರ", "ಶನಿವಾರ"],
                        namesAbbr: ["ಭಾನು.", "ಸೋಮ.", "ಮಂಗಳ.", "ಬುಧ.", "ಗುರು.", "ಶುಕ್ರ.", "ಶನಿ."],
                        namesShort: ["ರ", "ಸ", "ಮ", "ಬ", "ಗ", "ಶ", "ಶ"]
                    },
                    months: {
                        names: ["ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಎಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""],
                        namesAbbr: ["ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಎಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""]
                    },
                    AM: ["ಪೂರ್ವಾಹ್ನ", "ಪೂರ್ವಾಹ್ನ", "ಪೂರ್ವಾಹ್ನ"],
                    PM: ["ಅಪರಾಹ್ನ", "ಅಪರಾಹ್ನ", "ಅಪರಾಹ್ನ"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ml-IN": ["ml-IN", "default", {
            name: "ml-IN",
            englishName: "Malayalam (India)",
            nativeName: "മലയാളം (ഭാരതം)",
            language: "ml",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-%n", "%n"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ക"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    ":": ".",
                    firstDay: 1,
                    days: {
                        names: ["ഞായറാഴ്ച", "തിങ്കളാഴ്ച", "ചൊവ്വാഴ്ച", "ബുധനാഴ്ച", "വ്യാഴാഴ്ച", "വെള്ളിയാഴ്ച", "ശനിയാഴ്ച"],
                        namesAbbr: ["ഞായർ.", "തിങ്കൾ.", "ചൊവ്വ.", "ബുധൻ.", "വ്യാഴം.", "വെള്ളി.", "ശനി."],
                        namesShort: ["ഞ", "ത", "ച", "ബ", "വ", "വെ", "ശ"]
                    },
                    months: {
                        names: ["ജനുവരി", "ഫെബ്റുവരി", "മാറ്ച്ച്", "ഏപ്റില്", "മെയ്", "ജൂണ്", "ജൂലൈ", "ഓഗസ്ററ്", "സെപ്ററംബറ്", "ഒക്ടോബറ്", "നവംബറ്", "ഡിസംബറ്", ""],
                        namesAbbr: ["ജനുവരി", "ഫെബ്റുവരി", "മാറ്ച്ച്", "ഏപ്റില്", "മെയ്", "ജൂണ്", "ജൂലൈ", "ഓഗസ്ററ്", "സെപ്ററംബറ്", "ഒക്ടോബറ്", "നവംബറ്", "ഡിസംബറ്", ""]
                    },
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH.mm",
                        T: "HH.mm.ss",
                        f: "dd MMMM yyyy HH.mm",
                        F: "dd MMMM yyyy HH.mm.ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "as-IN": ["as-IN", "default", {
            name: "as-IN",
            englishName: "Assamese (India)",
            nativeName: "অসমীয়া (ভাৰত)",
            language: "as",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "n$"],
                    groupSizes: [3, 2],
                    symbol: "ট"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["সোমবাৰ", "মঙ্গলবাৰ", "বুধবাৰ", "বৃহস্পতিবাৰ", "শুক্রবাৰ", "শনিবাৰ", "ৰবিবাৰ"],
                        namesAbbr: ["সোম.", "মঙ্গল.", "বুধ.", "বৃহ.", "শুক্র.", "শনি.", "ৰবি."],
                        namesShort: ["সো", "ম", "বু", "বৃ", "শু", "শ", "র"]
                    },
                    months: {
                        names: ["জানুৱাৰী", "ফেব্রুৱাৰী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টেম্বর", "অক্টোবর", "নবেম্বর", "ডিচেম্বর", ""],
                        namesAbbr: ["জানু", "ফেব্রু", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টে", "অক্টো", "নবে", "ডিচে", ""]
                    },
                    AM: ["ৰাতিপু", "ৰাতিপু", "ৰাতিপু"],
                    PM: ["আবেলি", "আবেলি", "আবেলি"],
                    eras: [{ "name": "খ্রীষ্টাব্দ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "yyyy,MMMM dd, dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "yyyy,MMMM dd, dddd tt h:mm",
                        F: "yyyy,MMMM dd, dddd tt h:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM,yy"
                    }
                }
            }
        }],
    "mr-IN": ["mr-IN", "default", {
            name: "mr-IN",
            englishName: "Marathi (India)",
            nativeName: "मराठी (भारत)",
            language: "mr",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["रविवार", "सोमवार", "मंगळवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["रवि.", "सोम.", "मंगळ.", "बुध.", "गुरु.", "शुक्र.", "शनि."],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""],
                        namesAbbr: ["जाने.", "फेब्रु.", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टें.", "ऑक्टो.", "नोव्हें.", "डिसें.", ""]
                    },
                    AM: ["म.पू.", "म.पू.", "म.पू."],
                    PM: ["म.नं.", "म.नं.", "म.नं."],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "sa-IN": ["sa-IN", "default", {
            name: "sa-IN",
            englishName: "Sanskrit (India)",
            nativeName: "संस्कृत (भारतम्)",
            language: "sa",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["रविवासरः", "सोमवासरः", "मङ्गलवासरः", "बुधवासरः", "गुरुवासरः", "शुक्रवासरः", "शनिवासरः"],
                        namesAbbr: ["रविवासरः", "सोमवासरः", "मङ्गलवासरः", "बुधवासरः", "गुरुवासरः", "शुक्रवासरः", "शनिवासरः"],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""],
                        namesAbbr: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""]
                    },
                    AM: ["पूर्वाह्न", "पूर्वाह्न", "पूर्वाह्न"],
                    PM: ["अपराह्न", "अपराह्न", "अपराह्न"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy dddd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy dddd HH:mm",
                        F: "dd MMMM yyyy dddd HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "mn-MN": ["mn-MN", "default", {
            name: "mn-MN",
            englishName: "Mongolian (Cyrillic, Mongolia)",
            nativeName: "Монгол хэл (Монгол улс)",
            language: "mn-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "₮"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Ням", "Даваа", "Мягмар", "Лхагва", "Пүрэв", "Баасан", "Бямба"],
                        namesAbbr: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"],
                        namesShort: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"]
                    },
                    months: {
                        names: ["1 дүгээр сар", "2 дугаар сар", "3 дугаар сар", "4 дүгээр сар", "5 дугаар сар", "6 дугаар сар", "7 дугаар сар", "8 дугаар сар", "9 дүгээр сар", "10 дугаар сар", "11 дүгээр сар", "12 дугаар сар", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    monthsGenitive: {
                        names: ["1 дүгээр сарын", "2 дугаар сарын", "3 дугаар сарын", "4 дүгээр сарын", "5 дугаар сарын", "6 дугаар сарын", "7 дугаар сарын", "8 дугаар сарын", "9 дүгээр сарын", "10 дугаар сарын", "11 дүгээр сарын", "12 дугаар сарын", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yy.MM.dd",
                        D: "yyyy 'оны' MMMM d",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'оны' MMMM d H:mm",
                        F: "yyyy 'оны' MMMM d H:mm:ss",
                        M: "d MMMM",
                        Y: "yyyy 'он' MMMM"
                    }
                }
            }
        }],
    "bo-CN": ["bo-CN", "default", {
            name: "bo-CN",
            englishName: "Tibetan (PRC)",
            nativeName: "བོད་ཡིག (ཀྲུང་ཧྭ་མི་དམངས་སྤྱི་མཐུན་རྒྱལ་ཁབ།)",
            language: "bo",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["གཟའ་ཉི་མ།", "གཟའ་ཟླ་བ།", "གཟའ་མིག་དམར།", "གཟའ་ལྷག་པ།", "གཟའ་ཕུར་བུ།", "གཟའ་པ་སངས།", "གཟའ་སྤེན་པ།"],
                        namesAbbr: ["ཉི་མ།", "ཟླ་བ།", "མིག་དམར།", "ལྷག་པ།", "ཕུར་བུ།", "པ་སངས།", "སྤེན་པ།"],
                        namesShort: ["༧", "༡", "༢", "༣", "༤", "༥", "༦"]
                    },
                    months: {
                        names: ["སྤྱི་ཟླ་དང་པོ།", "སྤྱི་ཟླ་གཉིས་པ།", "སྤྱི་ཟླ་གསུམ་པ།", "སྤྱི་ཟླ་བཞི་པ།", "སྤྱི་ཟླ་ལྔ་པ།", "སྤྱི་ཟླ་དྲུག་པ།", "སྤྱི་ཟླ་བདུན་པ།", "སྤྱི་ཟླ་བརྒྱད་པ།", "སྤྱི་ཟླ་དགུ་པ།", "སྤྱི་ཟླ་བཅུ་པོ།", "སྤྱི་ཟླ་བཅུ་གཅིག་པ།", "སྤྱི་ཟླ་བཅུ་གཉིས་པ།", ""],
                        namesAbbr: ["ཟླ་ ༡", "ཟླ་ ༢", "ཟླ་ ༣", "ཟླ་ ༤", "ཟླ་ ༥", "ཟླ་ ༦", "ཟླ་ ༧", "ཟླ་ ༨", "ཟླ་ ༩", "ཟླ་ ༡༠", "ཟླ་ ༡༡", "ཟླ་ ༡༢", ""]
                    },
                    AM: ["སྔ་དྲོ", "སྔ་དྲོ", "སྔ་དྲོ"],
                    PM: ["ཕྱི་དྲོ", "ཕྱི་དྲོ", "ཕྱི་དྲོ"],
                    eras: [{ "name": "སྤྱི་ལོ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ལོའི་ཟླ' M'ཚེས' d",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm",
                        F: "yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm:ss",
                        M: "'ཟླ་' M'ཚེས'd",
                        Y: "yyyy.M"
                    }
                }
            }
        }],
    "cy-GB": ["cy-GB", "default", {
            name: "cy-GB",
            englishName: "Welsh (United Kingdom)",
            nativeName: "Cymraeg (y Deyrnas Unedig)",
            language: "cy",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "£"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Dydd Sul", "Dydd Llun", "Dydd Mawrth", "Dydd Mercher", "Dydd Iau", "Dydd Gwener", "Dydd Sadwrn"],
                        namesAbbr: ["Sul", "Llun", "Maw", "Mer", "Iau", "Gwe", "Sad"],
                        namesShort: ["Su", "Ll", "Ma", "Me", "Ia", "Gw", "Sa"]
                    },
                    months: {
                        names: ["Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr", ""],
                        namesAbbr: ["Ion", "Chwe", "Maw", "Ebr", "Mai", "Meh", "Gor", "Aws", "Med", "Hyd", "Tach", "Rhag", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "km-KH": ["km-KH", "default", {
            name: "km-KH",
            englishName: "Khmer (Cambodia)",
            nativeName: "ខ្មែរ (កម្ពុជា)",
            language: "km",
            numberFormat: {
                pattern: ["- n"],
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    symbol: "៛"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["ថ្ងៃអាទិត្យ", "ថ្ងៃច័ន្ទ", "ថ្ងៃអង្គារ", "ថ្ងៃពុធ", "ថ្ងៃព្រហស្បតិ៍", "ថ្ងៃសុក្រ", "ថ្ងៃសៅរ៍"],
                        namesAbbr: ["អាទិ.", "ច.", "អ.", "ពុ", "ព្រហ.", "សុ.", "ស."],
                        namesShort: ["អា", "ច", "អ", "ពុ", "ព្", "សុ", "ស"]
                    },
                    months: {
                        names: ["មករា", "កុម្ភៈ", "មិនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ", ""],
                        namesAbbr: ["១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩", "១០", "១១", "១២", ""]
                    },
                    AM: ["ព្រឹក", "ព្រឹក", "ព្រឹក"],
                    PM: ["ល្ងាច", "ល្ងាច", "ល្ងាច"],
                    eras: [{ "name": "មុនគ.ស.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "d MMMM yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy H:mm tt",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "'ថ្ងៃទី' dd 'ខែ' MM",
                        Y: "'ខែ' MM 'ឆ្នាំ' yyyy"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ព្រឹក", "ព្រឹក", "ព្រឹក"],
                    PM: ["ល្ងាច", "ល្ងាច", "ល្ងាច"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm tt",
                        F: "dddd, MMMM dd, yyyy HH:mm:ss"
                    }
                }
            }
        }],
    "lo-LA": ["lo-LA", "default", {
            name: "lo-LA",
            englishName: "Lao (Lao P.D.R.)",
            nativeName: "ລາວ (ສ.ປ.ປ. ລາວ)",
            language: "lo",
            numberFormat: {
                pattern: ["(n)"],
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["(n$)", "n$"],
                    groupSizes: [3, 0],
                    symbol: "₭"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["ວັນອາທິດ", "ວັນຈັນ", "ວັນອັງຄານ", "ວັນພຸດ", "ວັນພະຫັດ", "ວັນສຸກ", "ວັນເສົາ"],
                        namesAbbr: ["ອາທິດ", "ຈັນ", "ອັງຄານ", "ພຸດ", "ພະຫັດ", "ສຸກ", "ເສົາ"],
                        namesShort: ["ອ", "ຈ", "ອ", "ພ", "ພ", "ສ", "ເ"]
                    },
                    months: {
                        names: ["ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""],
                        namesAbbr: ["ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""]
                    },
                    AM: ["ເຊົ້າ", "ເຊົ້າ", "ເຊົ້າ"],
                    PM: ["ແລງ", "ແລງ", "ແລງ"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy H:mm tt",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gl-ES": ["gl-ES", "default", {
            name: "gl-ES",
            englishName: "Galician (Galician)",
            nativeName: "galego (galego)",
            language: "gl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "luns", "martes", "mércores", "xoves", "venres", "sábado"],
                        namesAbbr: ["dom", "luns", "mar", "mér", "xov", "ven", "sáb"],
                        namesShort: ["do", "lu", "ma", "mé", "xo", "ve", "sá"]
                    },
                    months: {
                        names: ["xaneiro", "febreiro", "marzo", "abril", "maio", "xuño", "xullo", "agosto", "setembro", "outubro", "novembro", "decembro", ""],
                        namesAbbr: ["xan", "feb", "mar", "abr", "maio", "xuñ", "xull", "ago", "set", "out", "nov", "dec", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "kok-IN": ["kok-IN", "default", {
            name: "kok-IN",
            englishName: "Konkani (India)",
            nativeName: "कोंकणी (भारत)",
            language: "kok",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["आयतार", "सोमार", "मंगळार", "बुधवार", "बिरेस्तार", "सुक्रार", "शेनवार"],
                        namesAbbr: ["आय.", "सोम.", "मंगळ.", "बुध.", "बिरे.", "सुक्र.", "शेन."],
                        namesShort: ["आ", "स", "म", "ब", "ब", "स", "श"]
                    },
                    months: {
                        names: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोवेम्बर", "डिसेंबर", ""],
                        namesAbbr: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोवेम्बर", "डिसेंबर", ""]
                    },
                    AM: ["म.पू.", "म.पू.", "म.पू."],
                    PM: ["म.नं.", "म.नं.", "म.नं."],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "syr-SY": ["syr-SY", "default", {
            name: "syr-SY",
            englishName: "Syriac (Syria)",
            nativeName: "ܣܘܪܝܝܐ (سوريا)",
            language: "syr",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ل.س.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["ܚܕ ܒܫܒܐ", "ܬܪܝܢ ܒܫܒܐ", "ܬܠܬܐ ܒܫܒܐ", "ܐܪܒܥܐ ܒܫܒܐ", "ܚܡܫܐ ܒܫܒܐ", "ܥܪܘܒܬܐ", "ܫܒܬܐ"],
                        namesAbbr: ["܏ܐ ܏ܒܫ", "܏ܒ ܏ܒܫ", "܏ܓ ܏ܒܫ", "܏ܕ ܏ܒܫ", "܏ܗ ܏ܒܫ", "܏ܥܪܘܒ", "܏ܫܒ"],
                        namesShort: ["ܐ", "ܒ", "ܓ", "ܕ", "ܗ", "ܥ", "ܫ"]
                    },
                    months: {
                        names: ["ܟܢܘܢ ܐܚܪܝ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝ ܩܕܝܡ", "ܬܫܪܝ ܐܚܪܝ", "ܟܢܘܢ ܩܕܝܡ", ""],
                        namesAbbr: ["܏ܟܢ ܏ܒ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "܏ܬܫ ܏ܐ", "܏ܬܫ ܏ܒ", "܏ܟܢ ܏ܐ", ""]
                    },
                    AM: ["ܩ.ܛ", "ܩ.ܛ", "ܩ.ܛ"],
                    PM: ["ܒ.ܛ", "ܒ.ܛ", "ܒ.ܛ"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "si-LK": ["si-LK", "default", {
            name: "si-LK",
            englishName: "Sinhala (Sri Lanka)",
            nativeName: "සිංහල (ශ්‍රී ලංකා)",
            language: "si",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    symbol: "රු."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ඉරිදා", "සඳුදා", "අඟහරුවාදා", "බදාදා", "බ්‍රහස්පතින්දා", "සිකුරාදා", "සෙනසුරාදා"],
                        namesAbbr: ["ඉරිදා", "සඳුදා", "කුජදා", "බුදදා", "ගුරුදා", "කිවිදා", "ශනිදා"],
                        namesShort: ["ඉ", "ස", "අ", "බ", "බ්‍ර", "සි", "සෙ"]
                    },
                    months: {
                        names: ["ජනවාරි", "පෙබරවාරි", "මාර්තු", "අ‌ප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අ‌ගෝස්තු", "සැප්තැම්බර්", "ඔක්තෝබර්", "නොවැම්බර්", "දෙසැම්බර්", ""],
                        namesAbbr: ["ජන.", "පෙබ.", "මාර්තු.", "අප්‍රේල්.", "මැයි.", "ජූනි.", "ජූලි.", "අගෝ.", "සැප්.", "ඔක්.", "නොවැ.", "දෙසැ.", ""]
                    },
                    AM: ["පෙ.ව.", "පෙ.ව.", "පෙ.ව."],
                    PM: ["ප.ව.", "ප.ව.", "ප.ව."],
                    eras: [{ "name": "ක්‍රි.ව.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy MMMM' මස 'dd' වැනිදා 'dddd",
                        f: "yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm tt",
                        F: "yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm:ss tt",
                        Y: "yyyy MMMM"
                    }
                }
            }
        }],
    "iu-Cans-CA": ["iu-Cans-CA", "default", {
            name: "iu-Cans-CA",
            englishName: "Inuktitut (Syllabics, Canada)",
            nativeName: "ᐃᓄᒃᑎᑐᑦ (ᑲᓇᑕᒥ)",
            language: "iu-Cans",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["ᓈᑦᑏᖑᔭ", "ᓇᒡᒐᔾᔭᐅ", "ᐊᐃᑉᐱᖅ", "ᐱᖓᑦᓯᖅ", "ᓯᑕᒻᒥᖅ", "ᑕᓪᓕᕐᒥᖅ", "ᓯᕙᑖᕐᕕᒃ"],
                        namesAbbr: ["ᓈᑦᑏ", "ᓇᒡᒐ", "ᐊᐃᑉᐱ", "ᐱᖓᑦᓯ", "ᓯᑕ", "ᑕᓪᓕ", "ᓯᕙᑖᕐᕕᒃ"],
                        namesShort: ["ᓈ", "ᓇ", "ᐊ", "ᐱ", "ᓯ", "ᑕ", "ᓯ"]
                    },
                    months: {
                        names: ["ᔮᓐᓄᐊᕆ", "ᕖᕝᕗᐊᕆ", "ᒫᑦᓯ", "ᐄᐳᕆ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐋᒡᒌᓯ", "ᓯᑎᐱᕆ", "ᐅᑐᐱᕆ", "ᓄᕕᐱᕆ", "ᑎᓯᐱᕆ", ""],
                        namesAbbr: ["ᔮᓐᓄ", "ᕖᕝᕗ", "ᒫᑦᓯ", "ᐄᐳᕆ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐋᒡᒌ", "ᓯᑎᐱ", "ᐅᑐᐱ", "ᓄᕕᐱ", "ᑎᓯᐱ", ""]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd,MMMM dd,yyyy",
                        f: "dddd,MMMM dd,yyyy h:mm tt",
                        F: "dddd,MMMM dd,yyyy h:mm:ss tt",
                        Y: "MMMM,yyyy"
                    }
                }
            }
        }],
    "am-ET": ["am-ET", "default", {
            name: "am-ET",
            englishName: "Amharic (Ethiopia)",
            nativeName: "አማርኛ (ኢትዮጵያ)",
            language: "am",
            numberFormat: {
                decimals: 1,
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    decimals: 1,
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "ETB"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["እሑድ", "ሰኞ", "ማክሰኞ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"],
                        namesAbbr: ["እሑድ", "ሰኞ", "ማክሰ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"],
                        namesShort: ["እ", "ሰ", "ማ", "ረ", "ሐ", "ዓ", "ቅ"]
                    },
                    months: {
                        names: ["ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕረል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክተውበር", "ኖቬምበር", "ዲሴምበር", ""],
                        namesAbbr: ["ጃንዩ", "ፌብሩ", "ማርች", "ኤፕረ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክተ", "ኖቬም", "ዲሴም", ""]
                    },
                    AM: ["ጡዋት", "ጡዋት", "ጡዋት"],
                    PM: ["ከሰዓት", "ከሰዓት", "ከሰዓት"],
                    eras: [{ "name": "ዓመተ  ምሕረት", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd '፣' MMMM d 'ቀን' yyyy",
                        f: "dddd '፣' MMMM d 'ቀን' yyyy h:mm tt",
                        F: "dddd '፣' MMMM d 'ቀን' yyyy h:mm:ss tt",
                        M: "MMMM d ቀን",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ne-NP": ["ne-NP", "default", {
            name: "ne-NP",
            englishName: "Nepali (Nepal)",
            nativeName: "नेपाली (नेपाल)",
            language: "ne",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["आइतवार", "सोमवार", "मङ्गलवार", "बुधवार", "बिहीवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["आइत", "सोम", "मङ्गल", "बुध", "बिही", "शुक्र", "शनि"],
                        namesShort: ["आ", "सो", "म", "बु", "बि", "शु", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जून", "जुलाई", "अगस्त", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""],
                        namesAbbr: ["जन", "फेब", "मार्च", "अप्रिल", "मे", "जून", "जुलाई", "अग", "सेप्ट", "अक्ट", "नोभ", "डिस", ""]
                    },
                    AM: ["विहानी", "विहानी", "विहानी"],
                    PM: ["बेलुकी", "बेलुकी", "बेलुकी"],
                    eras: [{ "name": "a.d.", "start": null, "offset": 0 }],
                    patterns: {
                        Y: "MMMM,yyyy"
                    }
                }
            }
        }],
    "fy-NL": ["fy-NL", "default", {
            name: "fy-NL",
            englishName: "Frisian (Netherlands)",
            nativeName: "Frysk (Nederlân)",
            language: "fy",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["Snein", "Moandei", "Tiisdei", "Woansdei", "Tongersdei", "Freed", "Sneon"],
                        namesAbbr: ["Sn", "Mo", "Ti", "Wo", "To", "Fr", "Sn"],
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    months: {
                        names: ["jannewaris", "febrewaris", "maart", "april", "maaie", "juny", "july", "augustus", "septimber", "oktober", "novimber", "desimber", ""],
                        namesAbbr: ["jann", "febr", "mrt", "apr", "maaie", "jun", "jul", "aug", "sept", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d-M-yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd d MMMM yyyy H:mm",
                        F: "dddd d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ps-AF": ["ps-AF", "default", {
            name: "ps-AF",
            englishName: "Pashto (Afghanistan)",
            nativeName: "پښتو (افغانستان)",
            language: "ps",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                ",": "،",
                ".": ",",
                percent: {
                    pattern: ["%n-", "%n"],
                    ",": "،",
                    ".": ","
                },
                currency: {
                    pattern: ["$n-", "$n"],
                    ",": "٬",
                    ".": "٫",
                    symbol: "؋"
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګا ښزمرى", "زمرى", "وږى", "تله", "لړم", "لنڈ ۍ", "مرغومى", ""],
                        namesAbbr: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګا ښ", "زمرى", "وږى", "تله", "لړم", "لنڈ ۍ", "مرغومى", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "ل.ه", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy, dd, MMMM, dddd",
                        f: "yyyy, dd, MMMM, dddd h:mm tt",
                        F: "yyyy, dd, MMMM, dddd h:mm:ss tt",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fil-PH": ["fil-PH", "default", {
            name: "fil-PH",
            englishName: "Filipino (Philippines)",
            nativeName: "Filipino (Pilipinas)",
            language: "fil",
            numberFormat: {
                currency: {
                    symbol: "PhP"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Linggo", "Lunes", "Martes", "Mierkoles", "Huebes", "Biernes", "Sabado"],
                        namesAbbr: ["Lin", "Lun", "Mar", "Mier", "Hueb", "Bier", "Saba"],
                        namesShort: ["L", "L", "M", "M", "H", "B", "S"]
                    },
                    months: {
                        names: ["Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Septyembre", "Oktubre", "Nobyembre", "Disyembre", ""],
                        namesAbbr: ["En", "Peb", "Mar", "Abr", "Mayo", "Hun", "Hul", "Agos", "Sept", "Okt", "Nob", "Dis", ""]
                    },
                    eras: [{ "name": "Anno Domini", "start": null, "offset": 0 }],
                }
            }
        }],
    "dv-MV": ["dv-MV", "default", {
            name: "dv-MV",
            englishName: "Divehi (Maldives)",
            nativeName: "ދިވެހިބަސް (ދިވެހި ރާއްޖެ)",
            language: "dv",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["n $-", "n $"],
                    symbol: "ރ."
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    days: {
                        names: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesAbbr: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesShort: ["އާ", "ހޯ", "އަ", "ބު", "ބު", "ހު", "ހޮ"]
                    },
                    months: {
                        names: ["މުޙައްރަމް", "ޞަފަރު", "ރަބީޢުލްއައްވަލް", "ރަބީޢުލްއާޚިރު", "ޖުމާދަލްއޫލާ", "ޖުމާދަލްއާޚިރާ", "ރަޖަބް", "ޝަޢްބާން", "ރަމަޟާން", "ޝައްވާލް", "ޛުލްޤަޢިދާ", "ޛުލްޙިއްޖާ", ""],
                        namesAbbr: ["މުޙައްރަމް", "ޞަފަރު", "ރަބީޢުލްއައްވަލް", "ރަބީޢުލްއާޚިރު", "ޖުމާދަލްއޫލާ", "ޖުމާދަލްއާޚިރާ", "ރަޖަބް", "ޝަޢްބާން", "ރަމަޟާން", "ޝައްވާލް", "ޛުލްޤަޢިދާ", "ޛުލްޙިއްޖާ", ""]
                    },
                    AM: ["މކ", "މކ", "މކ"],
                    PM: ["މފ", "މފ", "މފ"],
                    eras: [{ "name": "ހިޖްރީ", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd/MM/yyyy HH:mm",
                        F: "dd/MM/yyyy HH:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    days: {
                        names: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesAbbr: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesShort: ["އާ", "ހޯ", "އަ", "ބު", "ބު", "ހު", "ހޮ"]
                    },
                    months: {
                        names: ["ޖަނަވަރީ", "ފެބްރުއަރީ", "މާޗް", "އޭޕްރިލް", "މެއި", "ޖޫން", "ޖުލައި", "އޯގަސްޓް", "ސެޕްޓެމްބަރ", "އޮކްޓޯބަރ", "ނޮވެމްބަރ", "ޑިސެމްބަރ", ""],
                        namesAbbr: ["ޖަނަވަރީ", "ފެބްރުއަރީ", "މާޗް", "އޭޕްރިލް", "މެއި", "ޖޫން", "ޖުލައި", "އޯގަސްޓް", "ސެޕްޓެމްބަރ", "އޮކްޓޯބަރ", "ނޮވެމްބަރ", "ޑިސެމްބަރ", ""]
                    },
                    AM: ["މކ", "މކ", "މކ"],
                    PM: ["މފ", "މފ", "މފ"],
                    eras: [{ "name": "މީލާދީ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yy",
                        D: "ddd, yyyy MMMM dd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "ddd, yyyy MMMM dd HH:mm",
                        F: "ddd, yyyy MMMM dd HH:mm:ss",
                        Y: "yyyy, MMMM"
                    }
                }
            }
        }],
    "ha-Latn-NG": ["ha-Latn-NG", "default", {
            name: "ha-Latn-NG",
            englishName: "Hausa (Latin, Nigeria)",
            nativeName: "Hausa (Nigeria)",
            language: "ha-Latn",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Lahadi", "Litinin", "Talata", "Laraba", "Alhamis", "Juma'a", "Asabar"],
                        namesAbbr: ["Lah", "Lit", "Tal", "Lar", "Alh", "Jum", "Asa"],
                        namesShort: ["L", "L", "T", "L", "A", "J", "A"]
                    },
                    months: {
                        names: ["Januwaru", "Febreru", "Maris", "Afrilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktocba", "Nuwamba", "Disamba", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Afr", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""]
                    },
                    AM: ["Safe", "safe", "SAFE"],
                    PM: ["Yamma", "yamma", "YAMMA"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "yo-NG": ["yo-NG", "default", {
            name: "yo-NG",
            englishName: "Yoruba (Nigeria)",
            nativeName: "Yoruba (Nigeria)",
            language: "yo",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Aiku", "Aje", "Isegun", "Ojo'ru", "Ojo'bo", "Eti", "Abameta"],
                        namesAbbr: ["Aik", "Aje", "Ise", "Ojo", "Ojo", "Eti", "Aba"],
                        namesShort: ["A", "A", "I", "O", "O", "E", "A"]
                    },
                    months: {
                        names: ["Osu kinni", "Osu keji", "Osu keta", "Osu kerin", "Osu karun", "Osu kefa", "Osu keje", "Osu kejo", "Osu kesan", "Osu kewa", "Osu kokanla", "Osu keresi", ""],
                        namesAbbr: ["kin.", "kej.", "ket.", "ker.", "kar.", "kef.", "kej.", "kej.", "kes.", "kew.", "kok.", "ker.", ""]
                    },
                    AM: ["Owuro", "owuro", "OWURO"],
                    PM: ["Ale", "ale", "ALE"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "quz-BO": ["quz-BO", "default", {
            name: "quz-BO",
            englishName: "Quechua (Bolivia)",
            nativeName: "runasimi (Qullasuyu)",
            language: "quz",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "$b"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["intichaw", "killachaw", "atipachaw", "quyllurchaw", "Ch' askachaw", "Illapachaw", "k'uychichaw"],
                        namesAbbr: ["int", "kil", "ati", "quy", "Ch'", "Ill", "k'u"],
                        namesShort: ["d", "k", "a", "m", "h", "b", "k"]
                    },
                    months: {
                        names: ["Qulla puquy", "Hatun puquy", "Pauqar waray", "ayriwa", "Aymuray", "Inti raymi", "Anta Sitwa", "Qhapaq Sitwa", "Uma raymi", "Kantaray", "Ayamarq'a", "Kapaq Raymi", ""],
                        namesAbbr: ["Qul", "Hat", "Pau", "ayr", "Aym", "Int", "Ant", "Qha", "Uma", "Kan", "Aya", "Kap", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "nso-ZA": ["nso-ZA", "default", {
            name: "nso-ZA",
            englishName: "Sesotho sa Leboa (South Africa)",
            nativeName: "Sesotho sa Leboa (Afrika Borwa)",
            language: "nso",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Lamorena", "Mošupologo", "Labobedi", "Laboraro", "Labone", "Labohlano", "Mokibelo"],
                        namesAbbr: ["Lam", "Moš", "Lbb", "Lbr", "Lbn", "Lbh", "Mok"],
                        namesShort: ["L", "M", "L", "L", "L", "L", "M"]
                    },
                    months: {
                        names: ["Pherekgong", "Hlakola", "Mopitlo", "Moranang", "Mosegamanye", "Ngoatobošego", "Phuphu", "Phato", "Lewedi", "Diphalana", "Dibatsela", "Manthole", ""],
                        namesAbbr: ["Pher", "Hlak", "Mop", "Mor", "Mos", "Ngwat", "Phup", "Phat", "Lew", "Dip", "Dib", "Man", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ba-RU": ["ba-RU", "default", {
            name: "ba-RU",
            englishName: "Bashkir (Russia)",
            nativeName: "Башҡорт (Россия)",
            language: "ba",
            numberFormat: {
                ",": " ",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ",",
                    symbol: "һ."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Йәкшәмбе", "Дүшәмбе", "Шишәмбе", "Шаршамбы", "Кесаҙна", "Йома", "Шәмбе"],
                        namesAbbr: ["Йш", "Дш", "Шш", "Шр", "Кс", "Йм", "Шб"],
                        namesShort: ["Йш", "Дш", "Шш", "Шр", "Кс", "Йм", "Шб"]
                    },
                    months: {
                        names: ["ғинуар", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""],
                        namesAbbr: ["ғин", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d MMMM yyyy 'й'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'й' H:mm",
                        F: "d MMMM yyyy 'й' H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "lb-LU": ["lb-LU", "default", {
            name: "lb-LU",
            englishName: "Luxembourgish (Luxembourg)",
            nativeName: "Lëtzebuergesch (Luxembourg)",
            language: "lb",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sonndeg", "Méindeg", "Dënschdeg", "Mëttwoch", "Donneschdeg", "Freideg", "Samschdeg"],
                        namesAbbr: ["Son", "Méi", "Dën", "Mët", "Don", "Fre", "Sam"],
                        namesShort: ["So", "Mé", "Dë", "Më", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "Mäerz", "Abrëll", "Mee", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mäe", "Abr", "Mee", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "kl-GL": ["kl-GL", "default", {
            name: "kl-GL",
            englishName: "Greenlandic (Greenland)",
            nativeName: "kalaallisut (Kalaallit Nunaat)",
            language: "kl",
            numberFormat: {
                ",": ".",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 0],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["sapaat", "ataasinngorneq", "marlunngorneq", "pingasunngorneq", "sisamanngorneq", "tallimanngorneq", "arfininngorneq"],
                        namesAbbr: ["sap", "ata", "mar", "ping", "sis", "tal", "arf"],
                        namesShort: ["sa", "at", "ma", "pi", "si", "ta", "ar"]
                    },
                    months: {
                        names: ["januari", "februari", "martsi", "apriili", "maaji", "juni", "juli", "aggusti", "septembari", "oktobari", "novembari", "decembari", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ig-NG": ["ig-NG", "default", {
            name: "ig-NG",
            englishName: "Igbo (Nigeria)",
            nativeName: "Igbo (Nigeria)",
            language: "ig",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Aiku", "Aje", "Isegun", "Ojo'ru", "Ojo'bo", "Eti", "Abameta"],
                        namesAbbr: ["Aik", "Aje", "Ise", "Ojo", "Ojo", "Eti", "Aba"],
                        namesShort: ["A", "A", "I", "O", "O", "E", "A"]
                    },
                    months: {
                        names: ["Onwa mbu", "Onwa ibua", "Onwa ato", "Onwa ano", "Onwa ise", "Onwa isi", "Onwa asa", "Onwa asato", "Onwa itolu", "Onwa iri", "Onwa iri n'ofu", "Onwa iri n'ibua", ""],
                        namesAbbr: ["mbu.", "ibu.", "ato.", "ano.", "ise", "isi", "asa", "asa.", "ito.", "iri.", "n'of.", "n'ib.", ""]
                    },
                    AM: ["Ututu", "ututu", "UTUTU"],
                    PM: ["Efifie", "efifie", "EFIFIE"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "ii-CN": ["ii-CN", "default", {
            name: "ii-CN",
            englishName: "Yi (PRC)",
            nativeName: "ꆈꌠꁱꂷ (ꍏꉸꏓꂱꇭꉼꇩ)",
            language: "ii",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["ꑭꆏꑍ", "ꆏꊂ꒔", "ꆏꊂꑍ", "ꆏꊂꌕ", "ꆏꊂꇖ", "ꆏꊂꉬ", "ꆏꊂꃘ"],
                        namesAbbr: ["ꑭꆏ", "ꆏ꒔", "ꆏꑍ", "ꆏꌕ", "ꆏꇖ", "ꆏꉬ", "ꆏꃘ"],
                        namesShort: ["ꆏ", "꒔", "ꑍ", "ꌕ", "ꇖ", "ꉬ", "ꃘ"]
                    },
                    months: {
                        names: ["ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""],
                        namesAbbr: ["ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""]
                    },
                    AM: ["ꂵꆪꈌꈐ", "ꂵꆪꈌꈐ", "ꂵꆪꈌꈐ"],
                    PM: ["ꂵꆪꈌꉈ", "ꂵꆪꈌꉈ", "ꂵꆪꈌꉈ"],
                    eras: [{ "name": "ꇬꑼ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ꈎ' M'ꆪ' d'ꑍ'",
                        t: "tt h:mm",
                        T: "H:mm:ss",
                        f: "yyyy'ꈎ' M'ꆪ' d'ꑍ' tt h:mm",
                        F: "yyyy'ꈎ' M'ꆪ' d'ꑍ' H:mm:ss",
                        M: "M'ꆪ' d'ꑍ'",
                        Y: "yyyy'ꈎ' M'ꆪ'"
                    }
                }
            }
        }],
    "arn-CL": ["arn-CL", "default", {
            name: "arn-CL",
            englishName: "Mapudungun (Chile)",
            nativeName: "Mapudungun (Chile)",
            language: "arn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "moh-CA": ["moh-CA", "default", {
            name: "moh-CA",
            englishName: "Mohawk (Mohawk)",
            nativeName: "Kanien'kéha",
            language: "moh",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Awentatokentì:ke", "Awentataón'ke", "Ratironhia'kehronòn:ke", "Soséhne", "Okaristiiáhne", "Ronwaia'tanentaktonhne", "Entákta"],
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    months: {
                        names: ["Tsothohrkó:Wa", "Enniska", "Enniskó:Wa", "Onerahtókha", "Onerahtohkó:Wa", "Ohiari:Ha", "Ohiarihkó:Wa", "Seskéha", "Seskehkó:Wa", "Kenténha", "Kentenhkó:Wa", "Tsothóhrha", ""]
                    }
                }
            }
        }],
    "br-FR": ["br-FR", "default", {
            name: "br-FR",
            englishName: "Breton (France)",
            nativeName: "brezhoneg (Frañs)",
            language: "br",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sul", "Lun", "Meurzh", "Merc'her", "Yaou", "Gwener", "Sadorn"],
                        namesAbbr: ["Sul", "Lun", "Meu.", "Mer.", "Yaou", "Gwe.", "Sad."],
                        namesShort: ["Su", "Lu", "Mz", "Mc", "Ya", "Gw", "Sa"]
                    },
                    months: {
                        names: ["Genver", "C'hwevrer", "Meurzh", "Ebrel", "Mae", "Mezheven", "Gouere", "Eost", "Gwengolo", "Here", "Du", "Kerzu", ""],
                        namesAbbr: ["Gen.", "C'hwe.", "Meur.", "Ebr.", "Mae", "Mezh.", "Goue.", "Eost", "Gwen.", "Here", "Du", "Kzu", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "g. J.-K.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ug-CN": ["ug-CN", "default", {
            name: "ug-CN",
            englishName: "Uyghur (PRC)",
            nativeName: "ئۇيغۇرچە (جۇڭخۇا خەلق جۇمھۇرىيىتى)",
            language: "ug",
            isRTL: true,
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["يەكشەنبە", "دۈشەنبە", "سەيشەنبە", "چارشەنبە", "پەيشەنبە", "جۈمە", "شەنبە"],
                        namesAbbr: ["يە", "دۈ", "سە", "چا", "پە", "جۈ", "شە"],
                        namesShort: ["ي", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["1-ئاي", "2-ئاي", "3-ئاي", "4-ئاي", "5-ئاي", "6-ئاي", "7-ئاي", "8-ئاي", "9-ئاي", "10-ئاي", "11-ئاي", "12-ئاي", ""],
                        namesAbbr: ["1-ئاي", "2-ئاي", "3-ئاي", "4-ئاي", "5-ئاي", "6-ئاي", "7-ئاي", "8-ئاي", "9-ئاي", "10-ئاي", "11-ئاي", "12-ئاي", ""]
                    },
                    AM: ["چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن"],
                    PM: ["چۈشتىن كېيىن", "چۈشتىن كېيىن", "چۈشتىن كېيىن"],
                    eras: [{ "name": "مىلادى", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-M-d",
                        D: "yyyy-'يىلى' MMMM d-'كۈنى،'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy-'يىلى' MMMM d-'كۈنى،' H:mm",
                        F: "yyyy-'يىلى' MMMM d-'كۈنى،' H:mm:ss",
                        M: "MMMM d'-كۈنى'",
                        Y: "yyyy-'يىلى' MMMM"
                    }
                }
            }
        }],
    "mi-NZ": ["mi-NZ", "default", {
            name: "mi-NZ",
            englishName: "Maori (New Zealand)",
            nativeName: "Reo Māori (Aotearoa)",
            language: "mi",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Rātapu", "Rāhina", "Rātū", "Rāapa", "Rāpare", "Rāmere", "Rāhoroi"],
                        namesAbbr: ["Ta", "Hi", "Tū", "Apa", "Pa", "Me", "Ho"],
                        namesShort: ["Ta", "Hi", "Tū", "Aa", "Pa", "Me", "Ho"]
                    },
                    months: {
                        names: ["Kohi-tātea", "Hui-tanguru", "Poutū-te-rangi", "Paenga-whāwhā", "Haratua", "Pipiri", "Hōngongoi", "Here-turi-kōkā", "Mahuru", "Whiringa-ā-nuku", "Whiringa-ā-rangi", "Hakihea", ""],
                        namesAbbr: ["Kohi", "Hui", "Pou", "Pae", "Hara", "Pipi", "Hōngo", "Here", "Mahu", "Nuku", "Rangi", "Haki", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd MMMM, yyyy",
                        f: "dddd, dd MMMM, yyyy h:mm tt",
                        F: "dddd, dd MMMM, yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM, yy"
                    }
                }
            }
        }],
    "oc-FR": ["oc-FR", "default", {
            name: "oc-FR",
            englishName: "Occitan (France)",
            nativeName: "Occitan (França)",
            language: "oc",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimenge", "diluns", "dimars", "dimècres", "dijòus", "divendres", "dissabte"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mèc.", "jòu.", "ven.", "sab."],
                        namesShort: ["di", "lu", "ma", "mè", "jò", "ve", "sa"]
                    },
                    months: {
                        names: ["genier", "febrier", "març", "abril", "mai", "junh", "julh", "agost", "setembre", "octobre", "novembre", "desembre", ""],
                        namesAbbr: ["gen.", "feb.", "mar.", "abr.", "mai.", "jun.", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""]
                    },
                    monthsGenitive: {
                        names: ["de genier", "de febrier", "de març", "d'abril", "de mai", "de junh", "de julh", "d'agost", "de setembre", "d'octobre", "de novembre", "de desembre", ""],
                        namesAbbr: ["gen.", "feb.", "mar.", "abr.", "mai.", "jun.", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "après Jèsus-Crist", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd,' lo 'd MMMM' de 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd,' lo 'd MMMM' de 'yyyy HH:mm",
                        F: "dddd,' lo 'd MMMM' de 'yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "co-FR": ["co-FR", "default", {
            name: "co-FR",
            englishName: "Corsican (France)",
            nativeName: "Corsu (France)",
            language: "co",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dumenica", "luni", "marti", "mercuri", "ghjovi", "venderi", "sabbatu"],
                        namesAbbr: ["dum.", "lun.", "mar.", "mer.", "ghj.", "ven.", "sab."],
                        namesShort: ["du", "lu", "ma", "me", "gh", "ve", "sa"]
                    },
                    months: {
                        names: ["ghjennaghju", "ferraghju", "marzu", "aprile", "maghju", "ghjunghju", "lugliu", "aostu", "settembre", "ottobre", "nuvembre", "dicembre", ""],
                        namesAbbr: ["ghje", "ferr", "marz", "apri", "magh", "ghju", "lugl", "aost", "sett", "otto", "nuve", "dice", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "dopu J-C", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gsw-FR": ["gsw-FR", "default", {
            name: "gsw-FR",
            englishName: "Alsatian (France)",
            nativeName: "Elsässisch (Frànkrisch)",
            language: "gsw",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sundàà", "Mondàà", "Dienschdàà", "Mittwuch", "Dunnerschdàà", "Fridàà", "Sàmschdàà"],
                        namesAbbr: ["Su.", "Mo.", "Di.", "Mi.", "Du.", "Fr.", "Sà."],
                        namesShort: ["Su", "Mo", "Di", "Mi", "Du", "Fr", "Sà"]
                    },
                    months: {
                        names: ["Jänner", "Feverje", "März", "Àpril", "Mai", "Jüni", "Jüli", "Augscht", "September", "Oktower", "Nowember", "Dezember", ""],
                        namesAbbr: ["Jän.", "Fev.", "März", "Apr.", "Mai", "Jüni", "Jüli", "Aug.", "Sept.", "Okt.", "Now.", "Dez.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "Vor J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sah-RU": ["sah-RU", "default", {
            name: "sah-RU",
            englishName: "Yakut (Russia)",
            nativeName: "саха (Россия)",
            language: "sah",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "с."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["баскыһыанньа", "бэнидиэнньик", "оптуорунньук", "сэрэдэ", "чэппиэр", "бээтинсэ", "субуота"],
                        namesAbbr: ["Бс", "Бн", "Оп", "Ср", "Чп", "Бт", "Сб"],
                        namesShort: ["Бс", "Бн", "Оп", "Ср", "Чп", "Бт", "Сб"]
                    },
                    months: {
                        names: ["Тохсунньу", "Олунньу", "Кулун тутар", "Муус устар", "Ыам ыйа", "Бэс ыйа", "От ыйа", "Атырдьах ыйа", "Балаҕан ыйа", "Алтынньы", "Сэтинньи", "Ахсынньы", ""],
                        namesAbbr: ["тхс", "олн", "кул", "мст", "ыам", "бэс", "отй", "атр", "блҕ", "алт", "стн", "ахс", ""]
                    },
                    monthsGenitive: {
                        names: ["тохсунньу", "олунньу", "кулун тутар", "муус устар", "ыам ыйын", "бэс ыйын", "от ыйын", "атырдьах ыйын", "балаҕан ыйын", "алтынньы", "сэтинньи", "ахсынньы", ""],
                        namesAbbr: ["тхс", "олн", "кул", "мст", "ыам", "бэс", "отй", "атр", "блҕ", "алт", "стн", "ахс", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "MM.dd.yyyy",
                        D: "MMMM d yyyy 'с.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d yyyy 'с.' H:mm",
                        F: "MMMM d yyyy 'с.' H:mm:ss",
                        Y: "MMMM yyyy 'с.'"
                    }
                }
            }
        }],
    "qut-GT": ["qut-GT", "default", {
            name: "qut-GT",
            englishName: "K'iche (Guatemala)",
            nativeName: "K'iche (Guatemala)",
            language: "qut",
            numberFormat: {
                currency: {
                    symbol: "Q"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["juq'ij", "kaq'ij", "oxq'ij", "kajq'ij", "joq'ij", "waqq'ij", "wuqq'ij"],
                        namesAbbr: ["juq", "kaq", "oxq", "kajq", "joq", "waqq", "wuqq"],
                        namesShort: ["ju", "ka", "ox", "ka", "jo", "wa", "wu"]
                    },
                    months: {
                        names: ["nab'e ik'", "ukab' ik'", "rox ik'", "ukaj ik'", "uro' ik'", "uwaq ik'", "uwuq ik'", "uwajxaq ik'", "ub'elej ik'", "ulaj ik'", "ujulaj ik'", "ukab'laj ik'", ""],
                        namesAbbr: ["nab'e", "ukab", "rox", "ukaj", "uro", "uwaq", "uwuq", "uwajxaq", "ub'elej", "ulaj", "ujulaj", "ukab'laj", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "rw-RW": ["rw-RW", "default", {
            name: "rw-RW",
            englishName: "Kinyarwanda (Rwanda)",
            nativeName: "Kinyarwanda (Rwanda)",
            language: "rw",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "RWF"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Ku wa mbere", "Ku wa kabiri", "Ku wa gatatu", "Ku wa kane", "Ku wa gatanu", "Ku wa gatandatu", "Ku cyumweru"],
                        namesAbbr: ["mbe.", "kab.", "gat.", "kan.", "gat.", "gat.", "cyu."],
                        namesShort: ["mb", "ka", "ga", "ka", "ga", "ga", "cy"]
                    },
                    months: {
                        names: ["Mutarama", "Gashyantare", "Werurwe", "Mata", "Gicurasi", "Kamena", "Nyakanga", "Kanama", "Nzeli", "Ukwakira", "Ugushyingo", "Ukuboza", ""],
                        namesAbbr: ["Mut", "Gas", "Wer", "Mat", "Gic", "Kam", "Nya", "Kan", "Nze", "Ukwa", "Ugu", "Uku", ""]
                    },
                    AM: ["saa moya z.m.", "saa moya z.m.", "SAA MOYA Z.M."],
                    PM: ["saa moya z.n.", "saa moya z.n.", "SAA MOYA Z.N."],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                }
            }
        }],
    "wo-SN": ["wo-SN", "default", {
            name: "wo-SN",
            englishName: "Wolof (Senegal)",
            nativeName: "Wolof (Sénégal)",
            language: "wo",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "XOF"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "prs-AF": ["prs-AF", "default", {
            name: "prs-AF",
            englishName: "Dari (Afghanistan)",
            nativeName: "درى (افغانستان)",
            language: "prs",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["%n-", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$n-", "$n"],
                    symbol: "؋"
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    firstDay: 5,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    firstDay: 5,
                    days: {
                        names: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګاښ", "زمرى", "وږى", "تله", "لړم", "ليندۍ", "مرغومى", ""],
                        namesAbbr: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګاښ", "زمرى", "وږى", "تله", "لړم", "ليندۍ", "مرغومى", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "ل.ه", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy, dd, MMMM, dddd",
                        f: "yyyy, dd, MMMM, dddd h:mm tt",
                        F: "yyyy, dd, MMMM, dddd h:mm:ss tt",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gd-GB": ["gd-GB", "default", {
            name: "gd-GB",
            englishName: "Scottish Gaelic (United Kingdom)",
            nativeName: "Gàidhlig (An Rìoghachd Aonaichte)",
            language: "gd",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "£"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Didòmhnaich", "Diluain", "Dimàirt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne"],
                        namesAbbr: ["Dòm", "Lua", "Mài", "Cia", "Ard", "Hao", "Sat"],
                        namesShort: ["D", "L", "M", "C", "A", "H", "S"]
                    },
                    months: {
                        names: ["Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd", ""],
                        namesAbbr: ["Fao", "Gea", "Màr", "Gib", "Cèi", "Ògm", "Iuc", "Lùn", "Sul", "Dàm", "Sam", "Dùb", ""]
                    },
                    AM: ["m", "m", "M"],
                    PM: ["f", "f", "F"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-IQ": ["ar-IQ", "default", {
            name: "ar-IQ",
            englishName: "Arabic (Iraq)",
            nativeName: "العربية (العراق)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "د.ع.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "zh-CN": ["zh-CN", "default", {
            name: "zh-CN",
            englishName: "Chinese (Simplified, PRC)",
            nativeName: "中文(中华人民共和国)",
            language: "zh-CHS",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "de-CH": ["de-CH", "default", {
            name: "de-CH",
            englishName: "German (Switzerland)",
            nativeName: "Deutsch (Schweiz)",
            language: "de",
            numberFormat: {
                ",": "'",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "Fr."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "en-GB": ["en-GB", "default", {
            name: "en-GB",
            englishName: "English (United Kingdom)",
            nativeName: "English (United Kingdom)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "£"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-MX": ["es-MX", "default", {
            name: "es-MX",
            englishName: "Spanish (Mexico)",
            nativeName: "Español (México)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fr-BE": ["fr-BE", "default", {
            name: "fr-BE",
            englishName: "French (Belgium)",
            nativeName: "français (Belgique)",
            language: "fr",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "it-CH": ["it-CH", "default", {
            name: "it-CH",
            englishName: "Italian (Switzerland)",
            nativeName: "italiano (Svizzera)",
            language: "it",
            numberFormat: {
                ",": "'",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "fr."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"],
                        namesAbbr: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
                        namesShort: ["do", "lu", "ma", "me", "gi", "ve", "sa"]
                    },
                    months: {
                        names: ["gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""],
                        namesAbbr: ["gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "nl-BE": ["nl-BE", "default", {
            name: "nl-BE",
            englishName: "Dutch (Belgium)",
            nativeName: "Nederlands (België)",
            language: "nl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"],
                        namesAbbr: ["zo", "ma", "di", "wo", "do", "vr", "za"],
                        namesShort: ["zo", "ma", "di", "wo", "do", "vr", "za"]
                    },
                    months: {
                        names: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd d MMMM yyyy H:mm",
                        F: "dddd d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "nn-NO": ["nn-NO", "default", {
            name: "nn-NO",
            englishName: "Norwegian, Nynorsk (Norway)",
            nativeName: "norsk, nynorsk (Noreg)",
            language: "nn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "måndag", "tysdag", "onsdag", "torsdag", "fredag", "laurdag"],
                        namesAbbr: ["sø", "må", "ty", "on", "to", "fr", "la"],
                        namesShort: ["sø", "må", "ty", "on", "to", "fr", "la"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "pt-PT": ["pt-PT", "default", {
            name: "pt-PT",
            englishName: "Portuguese (Portugal)",
            nativeName: "português (Portugal)",
            language: "pt",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"],
                        namesAbbr: ["dom", "seg", "ter", "qua", "qui", "sex", "sáb"],
                        namesShort: ["D", "S", "T", "Q", "Q", "S", "S"]
                    },
                    months: {
                        names: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro", ""],
                        namesAbbr: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dddd, d' de 'MMMM' de 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' de 'MMMM' de 'yyyy HH:mm",
                        F: "dddd, d' de 'MMMM' de 'yyyy HH:mm:ss",
                        M: "d/M",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Latn-CS": ["sr-Latn-CS", "default", {
            name: "sr-Latn-CS",
            englishName: "Serbian (Latin, Serbia and Montenegro (Former))",
            nativeName: "srpski (Srbija i Crna Gora (Prethodno))",
            language: "sr-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Din."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sv-FI": ["sv-FI", "default", {
            name: "sv-FI",
            englishName: "Swedish (Finland)",
            nativeName: "svenska (Finland)",
            language: "sv",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"],
                        namesAbbr: ["sö", "må", "ti", "on", "to", "fr", "lö"],
                        namesShort: ["sö", "må", "ti", "on", "to", "fr", "lö"]
                    },
                    months: {
                        names: ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "'den 'd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "'den 'd MMMM yyyy HH:mm",
                        F: "'den 'd MMMM yyyy HH:mm:ss",
                        M: "'den 'd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "az-Cyrl-AZ": ["az-Cyrl-AZ", "default", {
            name: "az-Cyrl-AZ",
            englishName: "Azeri (Cyrillic, Azerbaijan)",
            nativeName: "Азәрбајҹан (Азәрбајҹан)",
            language: "az-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "ман."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Базар", "Базар ертәси", "Чәршәнбә ахшамы", "Чәршәнбә", "Ҹүмә ахшамы", "Ҹүмә", "Шәнбә"],
                        namesAbbr: ["Б", "Бе", "Ча", "Ч", "Ҹа", "Ҹ", "Ш"],
                        namesShort: ["Б", "Бе", "Ча", "Ч", "Ҹа", "Ҹ", "Ш"]
                    },
                    months: {
                        names: ["Јанвар", "Феврал", "Март", "Апрел", "Мај", "Ијун", "Ијул", "Август", "Сентјабр", "Октјабр", "Нојабр", "Декабр", ""],
                        namesAbbr: ["Јан", "Фев", "Мар", "Апр", "Мај", "Ијун", "Ијул", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["јанвар", "феврал", "март", "апрел", "мај", "ијун", "ијул", "август", "сентјабр", "октјабр", "нојабр", "декабр", ""],
                        namesAbbr: ["Јан", "Фев", "Мар", "Апр", "мая", "ијун", "ијул", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "dsb-DE": ["dsb-DE", "default", {
            name: "dsb-DE",
            englishName: "Lower Sorbian (Germany)",
            nativeName: "dolnoserbšćina (Nimska)",
            language: "dsb",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["njeźela", "ponjeźele", "wałtora", "srjoda", "stwortk", "pětk", "sobota"],
                        namesAbbr: ["nje", "pon", "wał", "srj", "stw", "pět", "sob"],
                        namesShort: ["n", "p", "w", "s", "s", "p", "s"]
                    },
                    months: {
                        names: ["januar", "februar", "měrc", "apryl", "maj", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "maj", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["januara", "februara", "měrca", "apryla", "maja", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "maj", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "po Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "dddd, 'dnja' d. MMMM yyyy",
                        t: "H.mm 'goź.'",
                        T: "H:mm:ss",
                        f: "dddd, 'dnja' d. MMMM yyyy H.mm 'goź.'",
                        F: "dddd, 'dnja' d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "se-SE": ["se-SE", "default", {
            name: "se-SE",
            englishName: "Sami, Northern (Sweden)",
            nativeName: "davvisámegiella (Ruoŧŧa)",
            language: "se",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["sotnabeaivi", "mánnodat", "disdat", "gaskavahkku", "duorastat", "bearjadat", "lávvardat"],
                        namesAbbr: ["sotn", "mán", "dis", "gask", "duor", "bear", "láv"],
                        namesShort: ["s", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđajagimánu", "guovvamánu", "njukčamánu", "cuoŋománu", "miessemánu", "geassemánu", "suoidnemánu", "borgemánu", "čakčamánu", "golggotmánu", "skábmamánu", "juovlamánu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ga-IE": ["ga-IE", "default", {
            name: "ga-IE",
            englishName: "Irish (Ireland)",
            nativeName: "Gaeilge (Éire)",
            language: "ga",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Dé Domhnaigh", "Dé Luain", "Dé Máirt", "Dé Céadaoin", "Déardaoin", "Dé hAoine", "Dé Sathairn"],
                        namesAbbr: ["Domh", "Luan", "Máir", "Céad", "Déar", "Aoi", "Sath"],
                        namesShort: ["Do", "Lu", "Má", "Cé", "De", "Ao", "Sa"]
                    },
                    months: {
                        names: ["Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", "Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig", ""],
                        namesAbbr: ["Ean", "Feabh", "Már", "Aib", "Bealt", "Meith", "Iúil", "Lún", "M.Fómh", "D.Fómh", "Samh", "Noll", ""]
                    },
                    AM: ["r.n.", "r.n.", "R.N."],
                    PM: ["i.n.", "i.n.", "I.N."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ms-BN": ["ms-BN", "default", {
            name: "ms-BN",
            englishName: "Malay (Brunei Darussalam)",
            nativeName: "Bahasa Melayu (Brunei Darussalam)",
            language: "ms",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    decimals: 0,
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesAbbr: ["Ahad", "Isnin", "Sel", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesShort: ["A", "I", "S", "R", "K", "J", "S"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""],
                        namesAbbr: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogos", "Sept", "Okt", "Nov", "Dis", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM yyyy H:mm",
                        F: "dd MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "uz-Cyrl-UZ": ["uz-Cyrl-UZ", "default", {
            name: "uz-Cyrl-UZ",
            englishName: "Uzbek (Cyrillic, Uzbekistan)",
            nativeName: "Ўзбек (Ўзбекистон)",
            language: "uz-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "сўм"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["якшанба", "душанба", "сешанба", "чоршанба", "пайшанба", "жума", "шанба"],
                        namesAbbr: ["якш", "дш", "сш", "чш", "пш", "ж", "ш"],
                        namesShort: ["я", "д", "с", "ч", "п", "ж", "ш"]
                    },
                    months: {
                        names: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["январ", "феврал", "март", "апрел", "май", "июн", "июл", "август", "сентябр", "октябр", "ноябр", "декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "мая", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "yyyy 'йил' d-MMMM",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'йил' d-MMMM HH:mm",
                        F: "yyyy 'йил' d-MMMM HH:mm:ss",
                        M: "d-MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "bn-BD": ["bn-BD", "default", {
            name: "bn-BD",
            englishName: "Bengali (Bangladesh)",
            nativeName: "বাংলা (বাংলাদেশ)",
            language: "bn",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-%n", "%n"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "৳"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    ":": ".",
                    firstDay: 1,
                    days: {
                        names: ["রবিবার", "সোমবার", "মঙ্গলবার", "বুধবার", "বৃহস্পতিবার", "শুক্রবার", "শনিবার"],
                        namesAbbr: ["রবি.", "সোম.", "মঙ্গল.", "বুধ.", "বৃহস্পতি.", "শুক্র.", "শনি."],
                        namesShort: ["র", "স", "ম", "ব", "ব", "শ", "শ"]
                    },
                    months: {
                        names: ["জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""],
                        namesAbbr: ["জানু.", "ফেব্রু.", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগ.", "সেপ্টে.", "অক্টো.", "নভে.", "ডিসে.", ""]
                    },
                    AM: ["পুর্বাহ্ন", "পুর্বাহ্ন", "পুর্বাহ্ন"],
                    PM: ["অপরাহ্ন", "অপরাহ্ন", "অপরাহ্ন"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH.mm",
                        T: "HH.mm.ss",
                        f: "dd MMMM yyyy HH.mm",
                        F: "dd MMMM yyyy HH.mm.ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "mn-Mong-CN": ["mn-Mong-CN", "default", {
            name: "mn-Mong-CN",
            englishName: "Mongolian (Traditional Mongolian, PRC)",
            nativeName: "ᠮᠤᠨᠭᠭᠤᠯ ᠬᠡᠯᠡ (ᠪᠦᠭᠦᠳᠡ ᠨᠠᠢᠷᠠᠮᠳᠠᠬᠤ ᠳᠤᠮᠳᠠᠳᠤ ᠠᠷᠠᠳ ᠣᠯᠣᠰ)",
            language: "mn-Mong",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ"],
                        namesAbbr: ["ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ"],
                        namesShort: ["ᠡ‍", "ᠨᠢ‍", "ᠬᠣ‍", "ᠭᠤ‍", "ᠳᠥ‍", "ᠲᠠ‍", "ᠵᠢ‍"]
                    },
                    months: {
                        names: ["ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", ""],
                        namesAbbr: ["ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ᠣᠨ ᠲᠣᠭᠠᠯᠠᠯ ᠤᠨ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm",
                        F: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm:ss",
                        M: "M'ᠰᠠᠷ᠎ᠠ' d'ᠡᠳᠦᠷ'",
                        Y: "yyyy'ᠣᠨ' M'ᠰᠠᠷ᠎ᠠ'"
                    }
                }
            }
        }],
    "iu-Latn-CA": ["iu-Latn-CA", "default", {
            name: "iu-Latn-CA",
            englishName: "Inuktitut (Latin, Canada)",
            nativeName: "Inuktitut (Kanatami)",
            language: "iu-Latn",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Naattiinguja", "Naggajjau", "Aippiq", "Pingatsiq", "Sitammiq", "Tallirmiq", "Sivataarvik"],
                        namesAbbr: ["Nat", "Nag", "Aip", "Pi", "Sit", "Tal", "Siv"],
                        namesShort: ["N", "N", "A", "P", "S", "T", "S"]
                    },
                    months: {
                        names: ["Jaannuari", "Viivvuari", "Maatsi", "Iipuri", "Mai", "Juuni", "Julai", "Aaggiisi", "Sitipiri", "Utupiri", "Nuvipiri", "Tisipiri", ""],
                        namesAbbr: ["Jan", "Viv", "Mas", "Ipu", "Mai", "Jun", "Jul", "Agi", "Sii", "Uut", "Nuv", "Tis", ""]
                    },
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "ddd, MMMM dd,yyyy",
                        f: "ddd, MMMM dd,yyyy h:mm tt",
                        F: "ddd, MMMM dd,yyyy h:mm:ss tt"
                    }
                }
            }
        }],
    "tzm-Latn-DZ": ["tzm-Latn-DZ", "default", {
            name: "tzm-Latn-DZ",
            englishName: "Tamazight (Latin, Algeria)",
            nativeName: "Tamazight (Djazaïr)",
            language: "tzm-Latn",
            numberFormat: {
                pattern: ["n-"],
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    symbol: "DZD"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 6,
                    days: {
                        names: ["Acer", "Arime", "Aram", "Ahad", "Amhadh", "Sem", "Sedh"],
                        namesAbbr: ["Ace", "Ari", "Ara", "Aha", "Amh", "Sem", "Sed"],
                        namesShort: ["Ac", "Ar", "Ar", "Ah", "Am", "Se", "Se"]
                    },
                    months: {
                        names: ["Yenayer", "Furar", "Maghres", "Yebrir", "Mayu", "Yunyu", "Yulyu", "Ghuct", "Cutenber", "Ktuber", "Wambir", "Dujanbir", ""],
                        namesAbbr: ["Yen", "Fur", "Mag", "Yeb", "May", "Yun", "Yul", "Ghu", "Cut", "Ktu", "Wam", "Duj", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "quz-EC": ["quz-EC", "default", {
            name: "quz-EC",
            englishName: "Quechua (Ecuador)",
            nativeName: "runasimi (Ecuador)",
            language: "quz",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["intichaw", "killachaw", "atipachaw", "quyllurchaw", "Ch' askachaw", "Illapachaw", "k'uychichaw"],
                        namesAbbr: ["int", "kil", "ati", "quy", "Ch'", "Ill", "k'u"],
                        namesShort: ["d", "k", "a", "m", "h", "b", "k"]
                    },
                    months: {
                        names: ["Qulla puquy", "Hatun puquy", "Pauqar waray", "ayriwa", "Aymuray", "Inti raymi", "Anta Sitwa", "Qhapaq Sitwa", "Uma raymi", "Kantaray", "Ayamarq'a", "Kapaq Raymi", ""],
                        namesAbbr: ["Qul", "Hat", "Pau", "ayr", "Aym", "Int", "Ant", "Qha", "Uma", "Kan", "Aya", "Kap", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "ar-EG": ["ar-EG", "default", {
            name: "ar-EG",
            englishName: "Arabic (Egypt)",
            nativeName: "العربية (مصر)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ج.م.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "zh-HK": ["zh-HK", "default", {
            name: "zh-HK",
            englishName: "Chinese (Traditional, Hong Kong S.A.R.)",
            nativeName: "中文(香港特別行政區)",
            language: "zh-CHT",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    symbol: "HK$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "de-AT": ["de-AT", "default", {
            name: "de-AT",
            englishName: "German (Austria)",
            nativeName: "Deutsch (Österreich)",
            language: "de",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Jänner", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jän", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, dd. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, dd. MMMM yyyy HH:mm",
                        F: "dddd, dd. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "en-AU": ["en-AU", "default", {
            name: "en-AU",
            englishName: "English (Australia)",
            nativeName: "English (Australia)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "dddd, d MMMM yyyy",
                        f: "dddd, d MMMM yyyy h:mm tt",
                        F: "dddd, d MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-ES": ["es-ES", "default", {
            name: "es-ES",
            englishName: "Spanish (Spain, International Sort)",
            nativeName: "Español (España, alfabetización internacional)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fr-CA": ["fr-CA", "default", {
            name: "fr-CA",
            englishName: "French (Canada)",
            nativeName: "français (Canada)",
            language: "fr",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["(n $)", "n $"],
                    ",": " ",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "d MMMM"
                    }
                }
            }
        }],
    "sr-Cyrl-CS": ["sr-Cyrl-CS", "default", {
            name: "sr-Cyrl-CS",
            englishName: "Serbian (Cyrillic, Serbia and Montenegro (Former))",
            nativeName: "српски (Србија и Црна Гора (Претходно))",
            language: "sr-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Дин."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["не", "по", "ут", "ср", "че", "пе", "су"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "se-FI": ["se-FI", "default", {
            name: "se-FI",
            englishName: "Sami, Northern (Finland)",
            nativeName: "davvisámegiella (Suopma)",
            language: "se",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sotnabeaivi", "vuossárga", "maŋŋebárga", "gaskavahkku", "duorastat", "bearjadat", "lávvardat"],
                        namesAbbr: ["sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"],
                        namesShort: ["s", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđajagimánu", "guovvamánu", "njukčamánu", "cuoŋománu", "miessemánu", "geassemánu", "suoidnemánu", "borgemánu", "čakčamánu", "golggotmánu", "skábmamánu", "juovlamánu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "MMMM d'. b. 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d'. b. 'yyyy H:mm",
                        F: "MMMM d'. b. 'yyyy H:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "quz-PE": ["quz-PE", "default", {
            name: "quz-PE",
            englishName: "Quechua (Peru)",
            nativeName: "runasimi (Piruw)",
            language: "quz",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    symbol: "S/."
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["intichaw", "killachaw", "atipachaw", "quyllurchaw", "Ch' askachaw", "Illapachaw", "k'uychichaw"],
                        namesAbbr: ["int", "kil", "ati", "quy", "Ch'", "Ill", "k'u"],
                        namesShort: ["d", "k", "a", "m", "h", "b", "k"]
                    },
                    months: {
                        names: ["Qulla puquy", "Hatun puquy", "Pauqar waray", "ayriwa", "Aymuray", "Inti raymi", "Anta Sitwa", "Qhapaq Sitwa", "Uma raymi", "Kantaray", "Ayamarq'a", "Kapaq Raymi", ""],
                        namesAbbr: ["Qul", "Hat", "Pau", "ayr", "Aym", "Int", "Ant", "Qha", "Uma", "Kan", "Aya", "Kap", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "ar-LY": ["ar-LY", "default", {
            name: "ar-LY",
            englishName: "Arabic (Libya)",
            nativeName: "العربية (ليبيا)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$n"],
                    decimals: 3,
                    symbol: "د.ل.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "zh-SG": ["zh-SG", "default", {
            name: "zh-SG",
            englishName: "Chinese (Simplified, Singapore)",
            nativeName: "中文(新加坡)",
            language: "zh-CHS",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "yyyy'年'M'月'd'日'",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "yyyy'年'M'月'd'日' tt h:mm",
                        F: "yyyy'年'M'月'd'日' tt h:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "de-LU": ["de-LU", "default", {
            name: "de-LU",
            englishName: "German (Luxembourg)",
            nativeName: "Deutsch (Luxemburg)",
            language: "de",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "en-CA": ["en-CA", "default", {
            name: "en-CA",
            englishName: "English (Canada)",
            nativeName: "English (Canada)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "MMMM-dd-yy",
                        f: "MMMM-dd-yy h:mm tt",
                        F: "MMMM-dd-yy h:mm:ss tt"
                    }
                }
            }
        }],
    "es-GT": ["es-GT", "default", {
            name: "es-GT",
            englishName: "Spanish (Guatemala)",
            nativeName: "Español (Guatemala)",
            language: "es",
            numberFormat: {
                currency: {
                    symbol: "Q"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fr-CH": ["fr-CH", "default", {
            name: "fr-CH",
            englishName: "French (Switzerland)",
            nativeName: "français (Suisse)",
            language: "fr",
            numberFormat: {
                ",": "'",
                percent: {
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "fr."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hr-BA": ["hr-BA", "default", {
            name: "hr-BA",
            englishName: "Croatian (Latin, Bosnia and Herzegovina)",
            nativeName: "hrvatski (Bosna i Hercegovina)",
            language: "hr",
            numberFormat: {
                pattern: ["- n"],
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "KM"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["siječanj", "veljača", "ožujak", "travanj", "svibanj", "lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    monthsGenitive: {
                        names: ["siječnja", "veljače", "ožujka", "travnja", "svibnja", "lipnja", "srpnja", "kolovoza", "rujna", "listopada", "studenog", "prosinca", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy.",
                        D: "d. MMMM yyyy.",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy. H:mm",
                        F: "d. MMMM yyyy. H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "smj-NO": ["smj-NO", "default", {
            name: "smj-NO",
            englishName: "Sami, Lule (Norway)",
            nativeName: "julevusámegiella (Vuodna)",
            language: "smj",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sådnåbiejvve", "mánnodahka", "dijstahka", "gasskavahkko", "duorastahka", "bierjjedahka", "lávvodahka"],
                        namesAbbr: ["såd", "mán", "dis", "gas", "duor", "bier", "láv"],
                        namesShort: ["s", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ådåjakmánno", "guovvamánno", "sjnjuktjamánno", "vuoratjismánno", "moarmesmánno", "biehtsemánno", "sjnjilltjamánno", "bårggemánno", "ragátmánno", "gålgådismánno", "basádismánno", "javllamánno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    monthsGenitive: {
                        names: ["ådåjakmáno", "guovvamáno", "sjnjuktjamáno", "vuoratjismáno", "moarmesmáno", "biehtsemáno", "sjnjilltjamáno", "bårggemáno", "ragátmáno", "gålgådismáno", "basádismáno", "javllamáno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-DZ": ["ar-DZ", "default", {
            name: "ar-DZ",
            englishName: "Arabic (Algeria)",
            nativeName: "العربية (الجزائر)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "د.ج.‏"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MM/yyyy H:mm",
                        F: "dd/MM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MMMM/yyyy H:mm",
                        F: "dd/MMMM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                }
            }
        }],
    "zh-MO": ["zh-MO", "default", {
            name: "zh-MO",
            englishName: "Chinese (Traditional, Macao S.A.R.)",
            nativeName: "中文(澳門特別行政區)",
            language: "zh-CHT",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    symbol: "MOP"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "de-LI": ["de-LI", "default", {
            name: "de-LI",
            englishName: "German (Liechtenstein)",
            nativeName: "Deutsch (Liechtenstein)",
            language: "de",
            numberFormat: {
                ",": "'",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "CHF"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "en-NZ": ["en-NZ", "default", {
            name: "en-NZ",
            englishName: "English (New Zealand)",
            nativeName: "English (New Zealand)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "dddd, d MMMM yyyy",
                        f: "dddd, d MMMM yyyy h:mm tt",
                        F: "dddd, d MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-CR": ["es-CR", "default", {
            name: "es-CR",
            englishName: "Spanish (Costa Rica)",
            nativeName: "Español (Costa Rica)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    ",": ".",
                    ".": ",",
                    symbol: "₡"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fr-LU": ["fr-LU", "default", {
            name: "fr-LU",
            englishName: "French (Luxembourg)",
            nativeName: "français (Luxembourg)",
            language: "fr",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "bs-Latn-BA": ["bs-Latn-BA", "default", {
            name: "bs-Latn-BA",
            englishName: "Bosnian (Latin, Bosnia and Herzegovina)",
            nativeName: "bosanski (Bosna i Hercegovina)",
            language: "bs-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "KM"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "juni", "juli", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "smj-SE": ["smj-SE", "default", {
            name: "smj-SE",
            englishName: "Sami, Lule (Sweden)",
            nativeName: "julevusámegiella (Svierik)",
            language: "smj",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ájllek", "mánnodahka", "dijstahka", "gasskavahkko", "duorastahka", "bierjjedahka", "lávvodahka"],
                        namesAbbr: ["ájl", "mán", "dis", "gas", "duor", "bier", "láv"],
                        namesShort: ["á", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ådåjakmánno", "guovvamánno", "sjnjuktjamánno", "vuoratjismánno", "moarmesmánno", "biehtsemánno", "sjnjilltjamánno", "bårggemánno", "ragátmánno", "gålgådismánno", "basádismánno", "javllamánno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    monthsGenitive: {
                        names: ["ådåjakmáno", "guovvamáno", "sjnjuktjamáno", "vuoratjismáno", "moarmesmáno", "biehtsemáno", "sjnjilltjamáno", "bårggemáno", "ragátmáno", "gålgådismáno", "basádismáno", "javllamáno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-MA": ["ar-MA", "default", {
            name: "ar-MA",
            englishName: "Arabic (Morocco)",
            nativeName: "العربية (المملكة المغربية)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "د.م.‏"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "ماي", "يونيو", "يوليوز", "غشت", "شتنبر", "أكتوبر", "نونبر", "دجنبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "ماي", "يونيو", "يوليوز", "غشت", "شتنبر", "أكتوبر", "نونبر", "دجنبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MM/yyyy H:mm",
                        F: "dd/MM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MMMM/yyyy H:mm",
                        F: "dd/MMMM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                }
            }
        }],
    "en-IE": ["en-IE", "default", {
            name: "en-IE",
            englishName: "English (Ireland)",
            nativeName: "English (Ireland)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-PA": ["es-PA", "default", {
            name: "es-PA",
            englishName: "Spanish (Panama)",
            nativeName: "Español (Panamá)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["($ n)", "$ n"],
                    symbol: "B/."
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fr-MC": ["fr-MC", "default", {
            name: "fr-MC",
            englishName: "French (Monaco)",
            nativeName: "français (Principauté de Monaco)",
            language: "fr",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sr-Latn-BA": ["sr-Latn-BA", "default", {
            name: "sr-Latn-BA",
            englishName: "Serbian (Latin, Bosnia and Herzegovina)",
            nativeName: "srpski (Bosna i Hercegovina)",
            language: "sr-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "KM"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sma-NO": ["sma-NO", "default", {
            name: "sma-NO",
            englishName: "Sami, Southern (Norway)",
            nativeName: "åarjelsaemiengiele (Nöörje)",
            language: "sma",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["aejlege", "måanta", "dæjsta", "gaskevåhkoe", "duarsta", "bearjadahke", "laavvardahke"],
                        namesAbbr: ["aej", "måa", "dæj", "gask", "duar", "bearj", "laav"],
                        namesShort: ["a", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["tsïengele", "goevte", "njoktje", "voerhtje", "suehpede", "ruffie", "snjaltje", "mïetske", "skïerede", "golke", "rahka", "goeve", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    monthsGenitive: {
                        names: ["tsïengelen", "goevten", "njoktjen", "voerhtjen", "suehpeden", "ruffien", "snjaltjen", "mïetsken", "skïereden", "golken", "rahkan", "goeven", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-TN": ["ar-TN", "default", {
            name: "ar-TN",
            englishName: "Arabic (Tunisia)",
            nativeName: "العربية (تونس)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$ n"],
                    decimals: 3,
                    symbol: "د.ت.‏"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MM/yyyy H:mm",
                        F: "dd/MM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MMMM/yyyy H:mm",
                        F: "dd/MMMM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                }
            }
        }],
    "en-ZA": ["en-ZA", "default", {
            name: "en-ZA",
            englishName: "English (South Africa)",
            nativeName: "English (South Africa)",
            numberFormat: {
                ",": " ",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " "
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-DO": ["es-DO", "default", {
            name: "es-DO",
            englishName: "Spanish (Dominican Republic)",
            nativeName: "Español (República Dominicana)",
            language: "es",
            numberFormat: {
                currency: {
                    symbol: "RD$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Cyrl-BA": ["sr-Cyrl-BA", "default", {
            name: "sr-Cyrl-BA",
            englishName: "Serbian (Cyrillic, Bosnia and Herzegovina)",
            nativeName: "српски (Босна и Херцеговина)",
            language: "sr-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "КМ"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["н", "п", "у", "с", "ч", "п", "с"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "sma-SE": ["sma-SE", "default", {
            name: "sma-SE",
            englishName: "Sami, Southern (Sweden)",
            nativeName: "åarjelsaemiengiele (Sveerje)",
            language: "sma",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["aejlege", "måanta", "dæjsta", "gaskevåhkoe", "duarsta", "bearjadahke", "laavvardahke"],
                        namesAbbr: ["aej", "måa", "dæj", "gask", "duar", "bearj", "laav"],
                        namesShort: ["a", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["tsïengele", "goevte", "njoktje", "voerhtje", "suehpede", "ruffie", "snjaltje", "mïetske", "skïerede", "golke", "rahka", "goeve", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    monthsGenitive: {
                        names: ["tsïengelen", "goevten", "njoktjen", "voerhtjen", "suehpeden", "ruffien", "snjaltjen", "mïetsken", "skïereden", "golken", "rahkan", "goeven", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-OM": ["ar-OM", "default", {
            name: "ar-OM",
            englishName: "Arabic (Oman)",
            nativeName: "العربية (عمان)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    decimals: 3,
                    symbol: "ر.ع.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-JM": ["en-JM", "default", {
            name: "en-JM",
            englishName: "English (Jamaica)",
            nativeName: "English (Jamaica)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "J$"
                }
            },
            calendars: {
                standard: {
                    patterns: {
                        d: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "es-VE": ["es-VE", "default", {
            name: "es-VE",
            englishName: "Spanish (Bolivarian Republic of Venezuela)",
            nativeName: "Español (Republica Bolivariana de Venezuela)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "Bs. F."
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "bs-Cyrl-BA": ["bs-Cyrl-BA", "default", {
            name: "bs-Cyrl-BA",
            englishName: "Bosnian (Cyrillic, Bosnia and Herzegovina)",
            nativeName: "босански (Босна и Херцеговина)",
            language: "bs-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "КМ"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недјеља", "понедјељак", "уторак", "сриједа", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["н", "п", "у", "с", "ч", "п", "с"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "sms-FI": ["sms-FI", "default", {
            name: "sms-FI",
            englishName: "Sami, Skolt (Finland)",
            nativeName: "sääm´ǩiõll (Lää´ddjânnam)",
            language: "sms",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pâ´sspei´vv", "vuõssargg", "mââibargg", "seärad", "nelljdpei´vv", "piâtnâc", "sue´vet"],
                        namesAbbr: ["pâ", "vu", "mâ", "se", "ne", "pi", "su"],
                        namesShort: ["p", "v", "m", "s", "n", "p", "s"]
                    },
                    months: {
                        names: ["ođđee´jjmään", "tä´lvvmään", "pâ´zzlâšttammään", "njuhččmään", "vue´ssmään", "ǩie´ssmään", "suei´nnmään", "på´rǧǧmään", "čõhččmään", "kålggmään", "skamm´mään", "rosttovmään", ""],
                        namesAbbr: ["ođjm", "tä´lvv", "pâzl", "njuh", "vue", "ǩie", "suei", "på´r", "čõh", "kålg", "ska", "rost", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđee´jjmannu", "tä´lvvmannu", "pâ´zzlâšttammannu", "njuhččmannu", "vue´ssmannu", "ǩie´ssmannu", "suei´nnmannu", "på´rǧǧmannu", "čõhččmannu", "kålggmannu", "skamm´mannu", "rosttovmannu", ""],
                        namesAbbr: ["ođjm", "tä´lvv", "pâzl", "njuh", "vue", "ǩie", "suei", "på´r", "čõh", "kålg", "ska", "rost", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "MMMM d'. p. 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d'. p. 'yyyy H:mm",
                        F: "MMMM d'. p. 'yyyy H:mm:ss",
                        M: "MMMM d'. p. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-YE": ["ar-YE", "default", {
            name: "ar-YE",
            englishName: "Arabic (Yemen)",
            nativeName: "العربية (اليمن)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ر.ي.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-029": ["en-029", "default", {
            name: "en-029",
            englishName: "English (Caribbean)",
            nativeName: "English (Caribbean)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    patterns: {
                        d: "MM/dd/yyyy"
                    }
                }
            }
        }],
    "es-CO": ["es-CO", "default", {
            name: "es-CO",
            englishName: "Spanish (Colombia)",
            nativeName: "Español (Colombia)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Latn-RS": ["sr-Latn-RS", "default", {
            name: "sr-Latn-RS",
            englishName: "Serbian (Latin, Serbia)",
            nativeName: "srpski (Srbija)",
            language: "sr-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Din."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "smn-FI": ["smn-FI", "default", {
            name: "smn-FI",
            englishName: "Sami, Inari (Finland)",
            nativeName: "sämikielâ (Suomâ)",
            language: "smn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pasepeivi", "vuossargâ", "majebargâ", "koskokko", "tuorâstâh", "vástuppeivi", "lávárdâh"],
                        namesAbbr: ["pa", "vu", "ma", "ko", "tu", "vá", "lá"],
                        namesShort: ["p", "v", "m", "k", "t", "v", "l"]
                    },
                    months: {
                        names: ["uđđâivemáánu", "kuovâmáánu", "njuhčâmáánu", "cuáŋuimáánu", "vyesimáánu", "kesimáánu", "syeinimáánu", "porgemáánu", "čohčâmáánu", "roovvâdmáánu", "skammâmáánu", "juovlâmáánu", ""],
                        namesAbbr: ["uđiv", "kuov", "njuh", "cuoŋ", "vyes", "kesi", "syei", "porg", "čoh", "roov", "ska", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "MMMM d'. p. 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d'. p. 'yyyy H:mm",
                        F: "MMMM d'. p. 'yyyy H:mm:ss",
                        M: "MMMM d'. p. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-SY": ["ar-SY", "default", {
            name: "ar-SY",
            englishName: "Arabic (Syria)",
            nativeName: "العربية (سوريا)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ل.س.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-BZ": ["en-BZ", "default", {
            name: "en-BZ",
            englishName: "English (Belize)",
            nativeName: "English (Belize)",
            numberFormat: {
                currency: {
                    groupSizes: [3, 0],
                    symbol: "BZ$"
                }
            },
            calendars: {
                standard: {
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd MMMM yyyy hh:mm tt",
                        F: "dddd, dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-PE": ["es-PE", "default", {
            name: "es-PE",
            englishName: "Spanish (Peru)",
            nativeName: "Español (Perú)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["$ -n", "$ n"],
                    symbol: "S/."
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Cyrl-RS": ["sr-Cyrl-RS", "default", {
            name: "sr-Cyrl-RS",
            englishName: "Serbian (Cyrillic, Serbia)",
            nativeName: "српски (Србија)",
            language: "sr-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Дин."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["не", "по", "ут", "ср", "че", "пе", "су"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-JO": ["ar-JO", "default", {
            name: "ar-JO",
            englishName: "Arabic (Jordan)",
            nativeName: "العربية (الأردن)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$ n"],
                    decimals: 3,
                    symbol: "د.ا.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-TT": ["en-TT", "default", {
            name: "en-TT",
            englishName: "English (Trinidad and Tobago)",
            nativeName: "English (Trinidad y Tobago)",
            numberFormat: {
                currency: {
                    groupSizes: [3, 0],
                    symbol: "TT$"
                }
            },
            calendars: {
                standard: {
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd MMMM yyyy hh:mm tt",
                        F: "dddd, dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-AR": ["es-AR", "default", {
            name: "es-AR",
            englishName: "Spanish (Argentina)",
            nativeName: "Español (Argentina)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Latn-ME": ["sr-Latn-ME", "default", {
            name: "sr-Latn-ME",
            englishName: "Serbian (Latin, Montenegro)",
            nativeName: "srpski (Crna Gora)",
            language: "sr-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-LB": ["ar-LB", "default", {
            name: "ar-LB",
            englishName: "Arabic (Lebanon)",
            nativeName: "العربية (لبنان)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ل.ل.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-ZW": ["en-ZW", "default", {
            name: "en-ZW",
            englishName: "English (Zimbabwe)",
            nativeName: "English (Zimbabwe)",
            numberFormat: {
                currency: {
                    symbol: "Z$"
                }
            }
        }],
    "es-EC": ["es-EC", "default", {
            name: "es-EC",
            englishName: "Spanish (Ecuador)",
            nativeName: "Español (Ecuador)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Cyrl-ME": ["sr-Cyrl-ME", "default", {
            name: "sr-Cyrl-ME",
            englishName: "Serbian (Cyrillic, Montenegro)",
            nativeName: "српски (Црна Гора)",
            language: "sr-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["не", "по", "ут", "ср", "че", "пе", "су"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-KW": ["ar-KW", "default", {
            name: "ar-KW",
            englishName: "Arabic (Kuwait)",
            nativeName: "العربية (الكويت)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$ n"],
                    decimals: 3,
                    symbol: "د.ك.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-PH": ["en-PH", "default", {
            name: "en-PH",
            englishName: "English (Republic of the Philippines)",
            nativeName: "English (Philippines)",
            numberFormat: {
                currency: {
                    symbol: "Php"
                }
            }
        }],
    "es-CL": ["es-CL", "default", {
            name: "es-CL",
            englishName: "Spanish (Chile)",
            nativeName: "Español (Chile)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "ar-AE": ["ar-AE", "default", {
            name: "ar-AE",
            englishName: "Arabic (U.A.E.)",
            nativeName: "العربية (الإمارات العربية المتحدة)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "د.إ.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "es-UY": ["es-UY", "default", {
            name: "es-UY",
            englishName: "Spanish (Uruguay)",
            nativeName: "Español (Uruguay)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "$U"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "ar-BH": ["ar-BH", "default", {
            name: "ar-BH",
            englishName: "Arabic (Bahrain)",
            nativeName: "العربية (البحرين)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$ n"],
                    decimals: 3,
                    symbol: "د.ب.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "es-PY": ["es-PY", "default", {
            name: "es-PY",
            englishName: "Spanish (Paraguay)",
            nativeName: "Español (Paraguay)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "Gs"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "ar-QA": ["ar-QA", "default", {
            name: "ar-QA",
            englishName: "Arabic (Qatar)",
            nativeName: "العربية (قطر)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ر.ق.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-IN": ["en-IN", "default", {
            name: "en-IN",
            englishName: "English (India)",
            nativeName: "English (India)",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "Rs."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "es-BO": ["es-BO", "default", {
            name: "es-BO",
            englishName: "Spanish (Bolivia)",
            nativeName: "Español (Bolivia)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "$b"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "en-MY": ["en-MY", "default", {
            name: "en-MY",
            englishName: "English (Malaysia)",
            nativeName: "English (Malaysia)",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    symbol: "RM"
                }
            },
            calendars: {
                standard: {
                    days: {
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd, d MMMM, yyyy",
                        f: "dddd, d MMMM, yyyy h:mm tt",
                        F: "dddd, d MMMM, yyyy h:mm:ss tt",
                        M: "d MMMM"
                    }
                }
            }
        }],
    "es-SV": ["es-SV", "default", {
            name: "es-SV",
            englishName: "Spanish (El Salvador)",
            nativeName: "Español (El Salvador)",
            language: "es",
            numberFormat: {
                currency: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "en-SG": ["en-SG", "default", {
            name: "en-SG",
            englishName: "English (Singapore)",
            nativeName: "English (Singapore)",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                }
            },
            calendars: {
                standard: {
                    days: {
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd, d MMMM, yyyy",
                        f: "dddd, d MMMM, yyyy h:mm tt",
                        F: "dddd, d MMMM, yyyy h:mm:ss tt",
                        M: "d MMMM"
                    }
                }
            }
        }],
    "es-HN": ["es-HN", "default", {
            name: "es-HN",
            englishName: "Spanish (Honduras)",
            nativeName: "Español (Honduras)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 0],
                    symbol: "L."
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "es-NI": ["es-NI", "default", {
            name: "es-NI",
            englishName: "Spanish (Nicaragua)",
            nativeName: "Español (Nicaragua)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["($ n)", "$ n"],
                    groupSizes: [3, 0],
                    symbol: "C$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "es-PR": ["es-PR", "default", {
            name: "es-PR",
            englishName: "Spanish (Puerto Rico)",
            nativeName: "Español (Puerto Rico)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["($ n)", "$ n"],
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "es-US": ["es-US", "default", {
            name: "es-US",
            englishName: "Spanish (United States)",
            nativeName: "Español (Estados Unidos)",
            language: "es",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sa"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        M: "dd' de 'MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "bs-Cyrl": ["bs-Cyrl", "default", {
            name: "bs-Cyrl",
            englishName: "Bosnian (Cyrillic)",
            nativeName: "босански",
            language: "bs-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "КМ"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недјеља", "понедјељак", "уторак", "сриједа", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["н", "п", "у", "с", "ч", "п", "с"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "bs-Latn": ["bs-Latn", "default", {
            name: "bs-Latn",
            englishName: "Bosnian (Latin)",
            nativeName: "bosanski",
            language: "bs-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "KM"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "juni", "juli", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sr-Cyrl": ["sr-Cyrl", "default", {
            name: "sr-Cyrl",
            englishName: "Serbian (Cyrillic)",
            nativeName: "српски",
            language: "sr-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Дин."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["не", "по", "ут", "ср", "че", "пе", "су"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sr-Latn": ["sr-Latn", "default", {
            name: "sr-Latn",
            englishName: "Serbian (Latin)",
            nativeName: "srpski",
            language: "sr-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Din."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "smn": ["smn", "default", {
            name: "smn",
            englishName: "Sami (Inari)",
            nativeName: "sämikielâ",
            language: "smn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pasepeivi", "vuossargâ", "majebargâ", "koskokko", "tuorâstâh", "vástuppeivi", "lávárdâh"],
                        namesAbbr: ["pa", "vu", "ma", "ko", "tu", "vá", "lá"],
                        namesShort: ["p", "v", "m", "k", "t", "v", "l"]
                    },
                    months: {
                        names: ["uđđâivemáánu", "kuovâmáánu", "njuhčâmáánu", "cuáŋuimáánu", "vyesimáánu", "kesimáánu", "syeinimáánu", "porgemáánu", "čohčâmáánu", "roovvâdmáánu", "skammâmáánu", "juovlâmáánu", ""],
                        namesAbbr: ["uđiv", "kuov", "njuh", "cuoŋ", "vyes", "kesi", "syei", "porg", "čoh", "roov", "ska", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "MMMM d'. p. 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d'. p. 'yyyy H:mm",
                        F: "MMMM d'. p. 'yyyy H:mm:ss",
                        M: "MMMM d'. p. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "az-Cyrl": ["az-Cyrl", "default", {
            name: "az-Cyrl",
            englishName: "Azeri (Cyrillic)",
            nativeName: "Азәрбајҹан дили",
            language: "az-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "ман."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Базар", "Базар ертәси", "Чәршәнбә ахшамы", "Чәршәнбә", "Ҹүмә ахшамы", "Ҹүмә", "Шәнбә"],
                        namesAbbr: ["Б", "Бе", "Ча", "Ч", "Ҹа", "Ҹ", "Ш"],
                        namesShort: ["Б", "Бе", "Ча", "Ч", "Ҹа", "Ҹ", "Ш"]
                    },
                    months: {
                        names: ["Јанвар", "Феврал", "Март", "Апрел", "Мај", "Ијун", "Ијул", "Август", "Сентјабр", "Октјабр", "Нојабр", "Декабр", ""],
                        namesAbbr: ["Јан", "Фев", "Мар", "Апр", "Мај", "Ијун", "Ијул", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["јанвар", "феврал", "март", "апрел", "мај", "ијун", "ијул", "август", "сентјабр", "октјабр", "нојабр", "декабр", ""],
                        namesAbbr: ["Јан", "Фев", "Мар", "Апр", "мая", "ијун", "ијул", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sms": ["sms", "default", {
            name: "sms",
            englishName: "Sami (Skolt)",
            nativeName: "sääm´ǩiõll",
            language: "sms",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pâ´sspei´vv", "vuõssargg", "mââibargg", "seärad", "nelljdpei´vv", "piâtnâc", "sue´vet"],
                        namesAbbr: ["pâ", "vu", "mâ", "se", "ne", "pi", "su"],
                        namesShort: ["p", "v", "m", "s", "n", "p", "s"]
                    },
                    months: {
                        names: ["ođđee´jjmään", "tä´lvvmään", "pâ´zzlâšttammään", "njuhččmään", "vue´ssmään", "ǩie´ssmään", "suei´nnmään", "på´rǧǧmään", "čõhččmään", "kålggmään", "skamm´mään", "rosttovmään", ""],
                        namesAbbr: ["ođjm", "tä´lvv", "pâzl", "njuh", "vue", "ǩie", "suei", "på´r", "čõh", "kålg", "ska", "rost", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđee´jjmannu", "tä´lvvmannu", "pâ´zzlâšttammannu", "njuhččmannu", "vue´ssmannu", "ǩie´ssmannu", "suei´nnmannu", "på´rǧǧmannu", "čõhččmannu", "kålggmannu", "skamm´mannu", "rosttovmannu", ""],
                        namesAbbr: ["ođjm", "tä´lvv", "pâzl", "njuh", "vue", "ǩie", "suei", "på´r", "čõh", "kålg", "ska", "rost", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "MMMM d'. p. 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d'. p. 'yyyy H:mm",
                        F: "MMMM d'. p. 'yyyy H:mm:ss",
                        M: "MMMM d'. p. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "zh": ["zh", "default", {
            name: "zh",
            englishName: "Chinese",
            nativeName: "中文",
            language: "zh",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "nn": ["nn", "default", {
            name: "nn",
            englishName: "Norwegian (Nynorsk)",
            nativeName: "norsk (nynorsk)",
            language: "nn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "måndag", "tysdag", "onsdag", "torsdag", "fredag", "laurdag"],
                        namesAbbr: ["sø", "må", "ty", "on", "to", "fr", "la"],
                        namesShort: ["sø", "må", "ty", "on", "to", "fr", "la"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "bs": ["bs", "default", {
            name: "bs",
            englishName: "Bosnian",
            nativeName: "bosanski",
            language: "bs",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "KM"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "juni", "juli", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "az-Latn": ["az-Latn", "default", {
            name: "az-Latn",
            englishName: "Azeri (Latin)",
            nativeName: "Azərbaycan­ılı",
            language: "az-Latn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "man."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Bazar", "Bazar ertəsi", "Çərşənbə axşamı", "Çərşənbə", "Cümə axşamı", "Cümə", "Şənbə"],
                        namesAbbr: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"],
                        namesShort: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"]
                    },
                    months: {
                        names: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "İyun", "İyul", "Avgust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    monthsGenitive: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sma": ["sma", "default", {
            name: "sma",
            englishName: "Sami (Southern)",
            nativeName: "åarjelsaemiengiele",
            language: "sma",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["aejlege", "måanta", "dæjsta", "gaskevåhkoe", "duarsta", "bearjadahke", "laavvardahke"],
                        namesAbbr: ["aej", "måa", "dæj", "gask", "duar", "bearj", "laav"],
                        namesShort: ["a", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["tsïengele", "goevte", "njoktje", "voerhtje", "suehpede", "ruffie", "snjaltje", "mïetske", "skïerede", "golke", "rahka", "goeve", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    monthsGenitive: {
                        names: ["tsïengelen", "goevten", "njoktjen", "voerhtjen", "suehpeden", "ruffien", "snjaltjen", "mïetsken", "skïereden", "golken", "rahkan", "goeven", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "uz-Cyrl": ["uz-Cyrl", "default", {
            name: "uz-Cyrl",
            englishName: "Uzbek (Cyrillic)",
            nativeName: "Ўзбек",
            language: "uz-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "сўм"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["якшанба", "душанба", "сешанба", "чоршанба", "пайшанба", "жума", "шанба"],
                        namesAbbr: ["якш", "дш", "сш", "чш", "пш", "ж", "ш"],
                        namesShort: ["я", "д", "с", "ч", "п", "ж", "ш"]
                    },
                    months: {
                        names: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["январ", "феврал", "март", "апрел", "май", "июн", "июл", "август", "сентябр", "октябр", "ноябр", "декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "мая", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "yyyy 'йил' d-MMMM",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'йил' d-MMMM HH:mm",
                        F: "yyyy 'йил' d-MMMM HH:mm:ss",
                        M: "d-MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "mn-Cyrl": ["mn-Cyrl", "default", {
            name: "mn-Cyrl",
            englishName: "Mongolian (Cyrillic)",
            nativeName: "Монгол хэл",
            language: "mn-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "₮"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Ням", "Даваа", "Мягмар", "Лхагва", "Пүрэв", "Баасан", "Бямба"],
                        namesAbbr: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"],
                        namesShort: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"]
                    },
                    months: {
                        names: ["1 дүгээр сар", "2 дугаар сар", "3 дугаар сар", "4 дүгээр сар", "5 дугаар сар", "6 дугаар сар", "7 дугаар сар", "8 дугаар сар", "9 дүгээр сар", "10 дугаар сар", "11 дүгээр сар", "12 дугаар сар", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    monthsGenitive: {
                        names: ["1 дүгээр сарын", "2 дугаар сарын", "3 дугаар сарын", "4 дүгээр сарын", "5 дугаар сарын", "6 дугаар сарын", "7 дугаар сарын", "8 дугаар сарын", "9 дүгээр сарын", "10 дугаар сарын", "11 дүгээр сарын", "12 дугаар сарын", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yy.MM.dd",
                        D: "yyyy 'оны' MMMM d",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'оны' MMMM d H:mm",
                        F: "yyyy 'оны' MMMM d H:mm:ss",
                        M: "d MMMM",
                        Y: "yyyy 'он' MMMM"
                    }
                }
            }
        }],
    "iu-Cans": ["iu-Cans", "default", {
            name: "iu-Cans",
            englishName: "Inuktitut (Syllabics)",
            nativeName: "ᐃᓄᒃᑎᑐᑦ",
            language: "iu-Cans",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["ᓈᑦᑏᖑᔭ", "ᓇᒡᒐᔾᔭᐅ", "ᐊᐃᑉᐱᖅ", "ᐱᖓᑦᓯᖅ", "ᓯᑕᒻᒥᖅ", "ᑕᓪᓕᕐᒥᖅ", "ᓯᕙᑖᕐᕕᒃ"],
                        namesAbbr: ["ᓈᑦᑏ", "ᓇᒡᒐ", "ᐊᐃᑉᐱ", "ᐱᖓᑦᓯ", "ᓯᑕ", "ᑕᓪᓕ", "ᓯᕙᑖᕐᕕᒃ"],
                        namesShort: ["ᓈ", "ᓇ", "ᐊ", "ᐱ", "ᓯ", "ᑕ", "ᓯ"]
                    },
                    months: {
                        names: ["ᔮᓐᓄᐊᕆ", "ᕖᕝᕗᐊᕆ", "ᒫᑦᓯ", "ᐄᐳᕆ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐋᒡᒌᓯ", "ᓯᑎᐱᕆ", "ᐅᑐᐱᕆ", "ᓄᕕᐱᕆ", "ᑎᓯᐱᕆ", ""],
                        namesAbbr: ["ᔮᓐᓄ", "ᕖᕝᕗ", "ᒫᑦᓯ", "ᐄᐳᕆ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐋᒡᒌ", "ᓯᑎᐱ", "ᐅᑐᐱ", "ᓄᕕᐱ", "ᑎᓯᐱ", ""]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd,MMMM dd,yyyy",
                        f: "dddd,MMMM dd,yyyy h:mm tt",
                        F: "dddd,MMMM dd,yyyy h:mm:ss tt",
                        Y: "MMMM,yyyy"
                    }
                }
            }
        }],
    "zh-Hant": ["zh-Hant", "default", {
            name: "zh-Hant",
            englishName: "Chinese (Traditional)",
            nativeName: "中文(繁體)",
            language: "zh-Hant",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    symbol: "HK$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "nb": ["nb", "default", {
            name: "nb",
            englishName: "Norwegian (Bokmål)",
            nativeName: "norsk (bokmål)",
            language: "nb",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                        namesAbbr: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
                        namesShort: ["sø", "ma", "ti", "on", "to", "fr", "lø"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sr": ["sr", "default", {
            name: "sr",
            englishName: "Serbian",
            nativeName: "srpski",
            language: "sr",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Din."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tg-Cyrl": ["tg-Cyrl", "default", {
            name: "tg-Cyrl",
            englishName: "Tajik (Cyrillic)",
            nativeName: "Тоҷикӣ",
            language: "tg-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ";",
                    symbol: "т.р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    days: {
                        names: ["Яш", "Душанбе", "Сешанбе", "Чоршанбе", "Панҷшанбе", "Ҷумъа", "Шанбе"],
                        namesAbbr: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"],
                        namesShort: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"]
                    },
                    months: {
                        names: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["январи", "феврали", "марти", "апрели", "маи", "июни", "июли", "августи", "сентябри", "октябри", "ноябри", "декабри", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "dsb": ["dsb", "default", {
            name: "dsb",
            englishName: "Lower Sorbian",
            nativeName: "dolnoserbšćina",
            language: "dsb",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["njeźela", "ponjeźele", "wałtora", "srjoda", "stwortk", "pětk", "sobota"],
                        namesAbbr: ["nje", "pon", "wał", "srj", "stw", "pět", "sob"],
                        namesShort: ["n", "p", "w", "s", "s", "p", "s"]
                    },
                    months: {
                        names: ["januar", "februar", "měrc", "apryl", "maj", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "maj", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["januara", "februara", "měrca", "apryla", "maja", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "maj", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "po Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "dddd, 'dnja' d. MMMM yyyy",
                        t: "H.mm 'goź.'",
                        T: "H:mm:ss",
                        f: "dddd, 'dnja' d. MMMM yyyy H.mm 'goź.'",
                        F: "dddd, 'dnja' d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "smj": ["smj", "default", {
            name: "smj",
            englishName: "Sami (Lule)",
            nativeName: "julevusámegiella",
            language: "smj",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ájllek", "mánnodahka", "dijstahka", "gasskavahkko", "duorastahka", "bierjjedahka", "lávvodahka"],
                        namesAbbr: ["ájl", "mán", "dis", "gas", "duor", "bier", "láv"],
                        namesShort: ["á", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ådåjakmánno", "guovvamánno", "sjnjuktjamánno", "vuoratjismánno", "moarmesmánno", "biehtsemánno", "sjnjilltjamánno", "bårggemánno", "ragátmánno", "gålgådismánno", "basádismánno", "javllamánno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    monthsGenitive: {
                        names: ["ådåjakmáno", "guovvamáno", "sjnjuktjamáno", "vuoratjismáno", "moarmesmáno", "biehtsemáno", "sjnjilltjamáno", "bårggemáno", "ragátmáno", "gålgådismáno", "basádismáno", "javllamáno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "uz-Latn": ["uz-Latn", "default", {
            name: "uz-Latn",
            englishName: "Uzbek (Latin)",
            nativeName: "U'zbek",
            language: "uz-Latn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    decimals: 0,
                    ",": " ",
                    ".": ",",
                    symbol: "so'm"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["yakshanba", "dushanba", "seshanba", "chorshanba", "payshanba", "juma", "shanba"],
                        namesAbbr: ["yak.", "dsh.", "sesh.", "chr.", "psh.", "jm.", "sh."],
                        namesShort: ["ya", "d", "s", "ch", "p", "j", "sh"]
                    },
                    months: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM yyyy",
                        D: "yyyy 'yil' d-MMMM",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'yil' d-MMMM HH:mm",
                        F: "yyyy 'yil' d-MMMM HH:mm:ss",
                        M: "d-MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "mn-Mong": ["mn-Mong", "default", {
            name: "mn-Mong",
            englishName: "Mongolian (Traditional Mongolian)",
            nativeName: "ᠮᠤᠨᠭᠭᠤᠯ ᠬᠡᠯᠡ",
            language: "mn-Mong",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ"],
                        namesAbbr: ["ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ"],
                        namesShort: ["ᠡ‍", "ᠨᠢ‍", "ᠬᠣ‍", "ᠭᠤ‍", "ᠳᠥ‍", "ᠲᠠ‍", "ᠵᠢ‍"]
                    },
                    months: {
                        names: ["ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", ""],
                        namesAbbr: ["ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ᠣᠨ ᠲᠣᠭᠠᠯᠠᠯ ᠤᠨ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm",
                        F: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm:ss",
                        M: "M'ᠰᠠᠷ᠎ᠠ' d'ᠡᠳᠦᠷ'",
                        Y: "yyyy'ᠣᠨ' M'ᠰᠠᠷ᠎ᠠ'"
                    }
                }
            }
        }],
    "iu-Latn": ["iu-Latn", "default", {
            name: "iu-Latn",
            englishName: "Inuktitut (Latin)",
            nativeName: "Inuktitut",
            language: "iu-Latn",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Naattiinguja", "Naggajjau", "Aippiq", "Pingatsiq", "Sitammiq", "Tallirmiq", "Sivataarvik"],
                        namesAbbr: ["Nat", "Nag", "Aip", "Pi", "Sit", "Tal", "Siv"],
                        namesShort: ["N", "N", "A", "P", "S", "T", "S"]
                    },
                    months: {
                        names: ["Jaannuari", "Viivvuari", "Maatsi", "Iipuri", "Mai", "Juuni", "Julai", "Aaggiisi", "Sitipiri", "Utupiri", "Nuvipiri", "Tisipiri", ""],
                        namesAbbr: ["Jan", "Viv", "Mas", "Ipu", "Mai", "Jun", "Jul", "Agi", "Sii", "Uut", "Nuv", "Tis", ""]
                    },
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "ddd, MMMM dd,yyyy",
                        f: "ddd, MMMM dd,yyyy h:mm tt",
                        F: "ddd, MMMM dd,yyyy h:mm:ss tt"
                    }
                }
            }
        }],
    "tzm-Latn": ["tzm-Latn", "default", {
            name: "tzm-Latn",
            englishName: "Tamazight (Latin)",
            nativeName: "Tamazight",
            language: "tzm-Latn",
            numberFormat: {
                pattern: ["n-"],
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    symbol: "DZD"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 6,
                    days: {
                        names: ["Acer", "Arime", "Aram", "Ahad", "Amhadh", "Sem", "Sedh"],
                        namesAbbr: ["Ace", "Ari", "Ara", "Aha", "Amh", "Sem", "Sed"],
                        namesShort: ["Ac", "Ar", "Ar", "Ah", "Am", "Se", "Se"]
                    },
                    months: {
                        names: ["Yenayer", "Furar", "Maghres", "Yebrir", "Mayu", "Yunyu", "Yulyu", "Ghuct", "Cutenber", "Ktuber", "Wambir", "Dujanbir", ""],
                        namesAbbr: ["Yen", "Fur", "Mag", "Yeb", "May", "Yun", "Yul", "Ghu", "Cut", "Ktu", "Wam", "Duj", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ha-Latn": ["ha-Latn", "default", {
            name: "ha-Latn",
            englishName: "Hausa (Latin)",
            nativeName: "Hausa",
            language: "ha-Latn",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Lahadi", "Litinin", "Talata", "Laraba", "Alhamis", "Juma'a", "Asabar"],
                        namesAbbr: ["Lah", "Lit", "Tal", "Lar", "Alh", "Jum", "Asa"],
                        namesShort: ["L", "L", "T", "L", "A", "J", "A"]
                    },
                    months: {
                        names: ["Januwaru", "Febreru", "Maris", "Afrilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktocba", "Nuwamba", "Disamba", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Afr", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""]
                    },
                    AM: ["Safe", "safe", "SAFE"],
                    PM: ["Yamma", "yamma", "YAMMA"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "zh-CHS": ["zh-CHS", "default", {
            name: "zh-CHS",
            englishName: "Chinese (Simplified) Legacy",
            nativeName: "中文(简体) 旧版",
            language: "zh-CHS",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "zh-CHT": ["zh-CHT", "default", {
            name: "zh-CHT",
            englishName: "Chinese (Traditional) Legacy",
            nativeName: "中文(繁體) 舊版",
            language: "zh-CHT",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    symbol: "HK$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }]
};
//# sourceMappingURL=powerbiGlobalizeLocales.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateTimeSequence.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateTimeSequence.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DateTimeSequence = void 0;
var dateUtils = __webpack_require__(/*! ./dateUtils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateUtils.js");
// powerbi.extensibility.utils.type
var powerbi_visuals_utils_typeutils_1 = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/index.js");
var NumericSequence = powerbi_visuals_utils_typeutils_1.numericSequence.NumericSequence;
var NumericSequenceRange = powerbi_visuals_utils_typeutils_1.numericSequenceRange.NumericSequenceRange;
// powerbi.extensibility.utils.formatting
var iFormattingService_1 = __webpack_require__(/*! ./../formattingService/iFormattingService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/iFormattingService.js");
// Repreasents the sequence of the dates/times
var DateTimeSequence = /** @class */ (function () {
    // Constructors
    // Creates new instance of the DateTimeSequence
    function DateTimeSequence(unit) {
        this.unit = unit;
        this.sequence = [];
        this.min = new Date("9999-12-31T23:59:59.999");
        this.max = new Date("0001-01-01T00:00:00.000");
    }
    // Methods
    /**
     * Add a new Date to a sequence.
     * @param date - date to add
     */
    DateTimeSequence.prototype.add = function (date) {
        if (date < this.min) {
            this.min = date;
        }
        if (date > this.max) {
            this.max = date;
        }
        this.sequence.push(date);
    };
    // Methods
    /**
     * Extends the sequence to cover new date range
     * @param min - new min to be covered by sequence
     * @param max - new max to be covered by sequence
     */
    DateTimeSequence.prototype.extendToCover = function (min, max) {
        var x = this.min;
        while (min < x) {
            x = DateTimeSequence.ADD_INTERVAL(x, -this.interval, this.unit);
            this.sequence.splice(0, 0, x);
        }
        this.min = x;
        x = this.max;
        while (x < max) {
            x = DateTimeSequence.ADD_INTERVAL(x, this.interval, this.unit);
            this.sequence.push(x);
        }
        this.max = x;
    };
    /**
     * Move the sequence to cover new date range
     * @param min - new min to be covered by sequence
     * @param max - new max to be covered by sequence
     */
    DateTimeSequence.prototype.moveToCover = function (min, max) {
        var delta = DateTimeSequence.getDelta(min, max, this.unit);
        var count = Math.floor(delta / this.interval);
        this.min = DateTimeSequence.ADD_INTERVAL(this.min, count * this.interval, this.unit);
        this.sequence = [];
        this.sequence.push(this.min);
        this.max = this.min;
        while (this.max < max) {
            this.max = DateTimeSequence.ADD_INTERVAL(this.max, this.interval, this.unit);
            this.sequence.push(this.max);
        }
    };
    // Static
    /**
     * Calculate a new DateTimeSequence
     * @param dataMin - Date representing min of the data range
     * @param dataMax - Date representing max of the data range
     * @param expectedCount - expected number of intervals in the sequence
     * @param unit - of the intervals in the sequence
     */
    DateTimeSequence.CALCULATE = function (dataMin, dataMax, expectedCount, unit) {
        if (!unit) {
            unit = DateTimeSequence.GET_INTERVAL_UNIT(dataMin, dataMax, expectedCount);
        }
        switch (unit) {
            case iFormattingService_1.DateTimeUnit.Year:
                return DateTimeSequence.CALCULATE_YEARS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Month:
                return DateTimeSequence.CALCULATE_MONTHS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Week:
                return DateTimeSequence.CALCULATE_WEEKS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Day:
                return DateTimeSequence.CALCULATE_DAYS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Hour:
                return DateTimeSequence.CALCULATE_HOURS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Minute:
                return DateTimeSequence.CALCULATE_MINUTES(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Second:
                return DateTimeSequence.CALCULATE_SECONDS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Millisecond:
                return DateTimeSequence.CALCULATE_MILLISECONDS(dataMin, dataMax, expectedCount);
        }
    };
    DateTimeSequence.CALCULATE_YEARS = function (dataMin, dataMax, expectedCount) {
        // Calculate range and sequence
        var yearsRange = NumericSequenceRange.calculateDataRange(dataMin.getFullYear(), dataMax.getFullYear(), false);
        // Calculate year sequence
        var sequence = NumericSequence.calculate(NumericSequenceRange.calculate(0, yearsRange.max - yearsRange.min), expectedCount, 0, null, null, [1, 2, 5]);
        var newMinYear = Math.floor(yearsRange.min / sequence.interval) * sequence.interval;
        var date = new Date(newMinYear, 0, 1);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Year);
    };
    DateTimeSequence.CALCULATE_MONTHS = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var minYear = dataMin.getFullYear();
        var maxYear = dataMax.getFullYear();
        var minMonth = dataMin.getMonth();
        var maxMonth = (maxYear - minYear) * 12 + dataMax.getMonth();
        var date = new Date(minYear, 0, 1);
        // Calculate month sequence
        var sequence = NumericSequence.calculateUnits(minMonth, maxMonth, expectedCount, [1, 2, 3, 6, 12]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Month);
    };
    DateTimeSequence.CALCULATE_WEEKS = function (dataMin, dataMax, expectedCount) {
        var firstDayOfWeek = 0;
        var minDayOfWeek = dataMin.getDay();
        var dayOffset = (minDayOfWeek - firstDayOfWeek + 7) % 7;
        var minDay = dataMin.getDate() - dayOffset;
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), minDay);
        var min = 0;
        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Week));
        // Calculate week sequence
        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 4, 8]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Week);
    };
    DateTimeSequence.CALCULATE_DAYS = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate());
        var min = 0;
        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(dataMin, dataMax, iFormattingService_1.DateTimeUnit.Day));
        // Calculate day sequence
        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 7, 14]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Day);
    };
    DateTimeSequence.CALCULATE_HOURS = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate());
        var min = powerbi_visuals_utils_typeutils_1.double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Hour));
        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Hour));
        // Calculate hour sequence
        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 3, 6, 12, 24]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Hour);
    };
    DateTimeSequence.CALCULATE_MINUTES = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours());
        var min = powerbi_visuals_utils_typeutils_1.double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Minute));
        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Minute));
        // Calculate minutes numeric sequence
        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 5, 10, 15, 30, 60, 60 * 2, 60 * 3, 60 * 6, 60 * 12, 60 * 24]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Minute);
    };
    DateTimeSequence.CALCULATE_SECONDS = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours(), dataMin.getMinutes());
        var min = powerbi_visuals_utils_typeutils_1.double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Second));
        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Second));
        // Calculate minutes numeric sequence
        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 5, 10, 15, 30, 60, 60 * 2, 60 * 5, 60 * 10, 60 * 15, 60 * 30, 60 * 60]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Second);
    };
    DateTimeSequence.CALCULATE_MILLISECONDS = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours(), dataMin.getMinutes(), dataMin.getSeconds());
        var min = DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Millisecond);
        var max = DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Millisecond);
        // Calculate milliseconds numeric sequence
        var sequence = NumericSequence.calculate(NumericSequenceRange.calculate(min, max), expectedCount, 0);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Millisecond);
    };
    DateTimeSequence.ADD_INTERVAL = function (value, interval, unit) {
        interval = Math.round(interval);
        switch (unit) {
            case iFormattingService_1.DateTimeUnit.Year:
                return dateUtils.addYears(value, interval);
            case iFormattingService_1.DateTimeUnit.Month:
                return dateUtils.addMonths(value, interval);
            case iFormattingService_1.DateTimeUnit.Week:
                return dateUtils.addWeeks(value, interval);
            case iFormattingService_1.DateTimeUnit.Day:
                return dateUtils.addDays(value, interval);
            case iFormattingService_1.DateTimeUnit.Hour:
                return dateUtils.addHours(value, interval);
            case iFormattingService_1.DateTimeUnit.Minute:
                return dateUtils.addMinutes(value, interval);
            case iFormattingService_1.DateTimeUnit.Second:
                return dateUtils.addSeconds(value, interval);
            case iFormattingService_1.DateTimeUnit.Millisecond:
                return dateUtils.addMilliseconds(value, interval);
        }
    };
    DateTimeSequence.fromNumericSequence = function (date, sequence, unit) {
        var result = new DateTimeSequence(unit);
        for (var i = 0; i < sequence.sequence.length; i++) {
            var x = sequence.sequence[i];
            var d = DateTimeSequence.ADD_INTERVAL(date, x, unit);
            result.add(d);
        }
        result.interval = sequence.interval;
        result.intervalOffset = sequence.intervalOffset;
        return result;
    };
    DateTimeSequence.getDelta = function (min, max, unit) {
        var delta = 0;
        switch (unit) {
            case iFormattingService_1.DateTimeUnit.Year:
                delta = max.getFullYear() - min.getFullYear();
                break;
            case iFormattingService_1.DateTimeUnit.Month:
                delta = (max.getFullYear() - min.getFullYear()) * 12 + max.getMonth() - min.getMonth();
                break;
            case iFormattingService_1.DateTimeUnit.Week:
                delta = (max.getTime() - min.getTime()) / (7 * 24 * 3600000);
                break;
            case iFormattingService_1.DateTimeUnit.Day:
                delta = (max.getTime() - min.getTime()) / (24 * 3600000);
                break;
            case iFormattingService_1.DateTimeUnit.Hour:
                delta = (max.getTime() - min.getTime()) / 3600000;
                break;
            case iFormattingService_1.DateTimeUnit.Minute:
                delta = (max.getTime() - min.getTime()) / 60000;
                break;
            case iFormattingService_1.DateTimeUnit.Second:
                delta = (max.getTime() - min.getTime()) / 1000;
                break;
            case iFormattingService_1.DateTimeUnit.Millisecond:
                delta = max.getTime() - min.getTime();
                break;
        }
        return delta;
    };
    DateTimeSequence.GET_INTERVAL_UNIT = function (min, max, maxCount) {
        maxCount = Math.max(maxCount, 2);
        var totalDays = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Day);
        if (totalDays > 356 && totalDays >= 30 * 6 * maxCount)
            return iFormattingService_1.DateTimeUnit.Year;
        if (totalDays > 60 && totalDays > 7 * maxCount)
            return iFormattingService_1.DateTimeUnit.Month;
        if (totalDays > 14 && totalDays > 2 * maxCount)
            return iFormattingService_1.DateTimeUnit.Week;
        var totalHours = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Hour);
        if (totalDays > 2 && totalHours > 12 * maxCount)
            return iFormattingService_1.DateTimeUnit.Day;
        if (totalHours >= 24 && totalHours >= maxCount)
            return iFormattingService_1.DateTimeUnit.Hour;
        var totalMinutes = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Minute);
        if (totalMinutes > 2 && totalMinutes >= maxCount)
            return iFormattingService_1.DateTimeUnit.Minute;
        var totalSeconds = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Second);
        if (totalSeconds > 2 && totalSeconds >= 0.8 * maxCount)
            return iFormattingService_1.DateTimeUnit.Second;
        var totalMilliseconds = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Millisecond);
        if (totalMilliseconds > 0)
            return iFormattingService_1.DateTimeUnit.Millisecond;
        // If the size of the range is 0 we need to guess the unit based on the date's non-zero values starting with milliseconds
        var date = min;
        if (date.getMilliseconds() !== 0)
            return iFormattingService_1.DateTimeUnit.Millisecond;
        if (date.getSeconds() !== 0)
            return iFormattingService_1.DateTimeUnit.Second;
        if (date.getMinutes() !== 0)
            return iFormattingService_1.DateTimeUnit.Minute;
        if (date.getHours() !== 0)
            return iFormattingService_1.DateTimeUnit.Hour;
        if (date.getDate() !== 1)
            return iFormattingService_1.DateTimeUnit.Day;
        if (date.getMonth() !== 0)
            return iFormattingService_1.DateTimeUnit.Month;
        return iFormattingService_1.DateTimeUnit.Year;
    };
    // Constants
    DateTimeSequence.MIN_COUNT = 1;
    DateTimeSequence.MAX_COUNT = 1000;
    return DateTimeSequence;
}());
exports.DateTimeSequence = DateTimeSequence;
//# sourceMappingURL=dateTimeSequence.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateUtils.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateUtils.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addMilliseconds = exports.addSeconds = exports.addMinutes = exports.addHours = exports.addDays = exports.addWeeks = exports.addMonths = exports.addYears = void 0;
// dateUtils module provides DateTimeSequence with set of additional date manipulation routines
var MonthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var MonthDaysLeap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
/**
 * Returns bool indicating weither the provided year is a leap year.
 * @param year - year value
 */
function isLeap(year) {
    return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);
}
/**
 * Returns number of days in the provided year/month.
 * @param year - year value
 * @param month - month value
 */
function getMonthDays(year, month) {
    return isLeap(year) ? MonthDaysLeap[month] : MonthDays[month];
}
/**
 * Adds a specified number of years to the provided date.
 * @param date - date value
 * @param yearDelta - number of years to add
 */
function addYears(date, yearDelta) {
    var year = date.getFullYear();
    var month = date.getMonth();
    var day = date.getDate();
    var isLeapDay = month === 2 && day === 29;
    var result = new Date(date.getTime());
    year = year + yearDelta;
    if (isLeapDay && !isLeap(year)) {
        day = 28;
    }
    result.setFullYear(year, month, day);
    return result;
}
exports.addYears = addYears;
/**
 * Adds a specified number of months to the provided date.
 * @param date - date value
 * @param monthDelta - number of months to add
 */
function addMonths(date, monthDelta) {
    var year = date.getFullYear();
    var month = date.getMonth();
    var day = date.getDate();
    var result = new Date(date.getTime());
    year += (monthDelta - (monthDelta % 12)) / 12;
    month += monthDelta % 12;
    // VSTS 1325771: Certain column charts don't display any data
    // Wrap arround the month if is after december (value 11)
    if (month > 11) {
        month = month % 12;
        year++;
    }
    day = Math.min(day, getMonthDays(year, month));
    result.setFullYear(year, month, day);
    return result;
}
exports.addMonths = addMonths;
/**
 * Adds a specified number of weeks to the provided date.
 * @param date - date value
 * @param weeks - number of weeks to add
 */
function addWeeks(date, weeks) {
    return addDays(date, weeks * 7);
}
exports.addWeeks = addWeeks;
/**
 * Adds a specified number of days to the provided date.
 * @param date - date value
 * @param days - number of days to add
 */
function addDays(date, days) {
    var year = date.getFullYear();
    var month = date.getMonth();
    var day = date.getDate();
    var result = new Date(date.getTime());
    result.setFullYear(year, month, day + days);
    return result;
}
exports.addDays = addDays;
/**
 * Adds a specified number of hours to the provided date.
 * @param date - date value
 * @param hours - number of hours to add
 */
function addHours(date, hours) {
    return new Date(date.getTime() + hours * 3600000);
}
exports.addHours = addHours;
/**
 * Adds a specified number of minutes to the provided date.
 * @param date - date value
 * @param minutes - number of minutes to add
 */
function addMinutes(date, minutes) {
    return new Date(date.getTime() + minutes * 60000);
}
exports.addMinutes = addMinutes;
/**
 * Adds a specified number of seconds to the provided date.
 * @param date - date value
 * @param seconds - number of seconds to add
 */
function addSeconds(date, seconds) {
    return new Date(date.getTime() + seconds * 1000);
}
exports.addSeconds = addSeconds;
/**
 * Adds a specified number of milliseconds to the provided date.
 * @param date - date value
 * @param milliseconds - number of milliseconds to add
 */
function addMilliseconds(date, milliseconds) {
    return new Date(date.getTime() + milliseconds);
}
exports.addMilliseconds = addMilliseconds;
//# sourceMappingURL=dateUtils.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystem.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystem.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLabelsDisplayUnitSystem = exports.WholeUnitsDisplayUnitSystem = exports.DefaultDisplayUnitSystem = exports.NoDisplayUnitSystem = exports.DisplayUnitSystem = exports.DisplayUnit = void 0;
/* eslint-disable no-useless-escape */
var formattingService_1 = __webpack_require__(/*! ./../formattingService/formattingService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingService.js");
var powerbi_visuals_utils_typeutils_1 = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/index.js");
// Constants
var maxExponent = 24;
var defaultScientificBigNumbersBoundary = 1E15;
var scientificSmallNumbersBoundary = 1E-4;
var PERCENTAGE_FORMAT = "%";
var SCIENTIFIC_FORMAT = "E+0";
var DEFAULT_SCIENTIFIC_FORMAT = "0.##" + SCIENTIFIC_FORMAT;
// Regular expressions
/**
 * This regex looks for strings that match one of the following conditions:
 *   - Optionally contain "0", "#", followed by a period, followed by at least one "0" or "#" (Ex. ###,000.###)
 *   - Contains at least one of "0", "#", or "," (Ex. ###,000)
 *   - Contain a "g" (indicates to use the general .NET numeric format string)
 * The entire string (start to end) must match, and the match is not case-sensitive.
 */
var SUPPORTED_SCIENTIFIC_FORMATS = /^([0\#,]*\.[0\#]+|[0\#,]+|g)$/i;
var DisplayUnit = /** @class */ (function () {
    function DisplayUnit() {
    }
    // Methods
    DisplayUnit.prototype.project = function (value) {
        if (this.value) {
            return powerbi_visuals_utils_typeutils_1.double.removeDecimalNoise(value / this.value);
        }
        else {
            return value;
        }
    };
    DisplayUnit.prototype.reverseProject = function (value) {
        if (this.value) {
            return value * this.value;
        }
        else {
            return value;
        }
    };
    DisplayUnit.prototype.isApplicableTo = function (value) {
        value = Math.abs(value);
        var precision = powerbi_visuals_utils_typeutils_1.double.getPrecision(value, 3);
        return powerbi_visuals_utils_typeutils_1.double.greaterOrEqualWithPrecision(value, this.applicableRangeMin, precision) && powerbi_visuals_utils_typeutils_1.double.lessWithPrecision(value, this.applicableRangeMax, precision);
    };
    DisplayUnit.prototype.isScaling = function () {
        return this.value > 1;
    };
    return DisplayUnit;
}());
exports.DisplayUnit = DisplayUnit;
var DisplayUnitSystem = /** @class */ (function () {
    // Constructor
    function DisplayUnitSystem(units) {
        this.units = units ? units : [];
    }
    Object.defineProperty(DisplayUnitSystem.prototype, "title", {
        // Properties
        get: function () {
            return this.displayUnit ? this.displayUnit.title : undefined;
        },
        enumerable: false,
        configurable: true
    });
    // Methods
    DisplayUnitSystem.prototype.update = function (value) {
        if (value === undefined)
            return;
        this.unitBaseValue = value;
        this.displayUnit = this.findApplicableDisplayUnit(value);
    };
    DisplayUnitSystem.prototype.findApplicableDisplayUnit = function (value) {
        for (var _i = 0, _a = this.units; _i < _a.length; _i++) {
            var unit = _a[_i];
            if (unit.isApplicableTo(value))
                return unit;
        }
        return undefined;
    };
    DisplayUnitSystem.prototype.format = function (value, format, decimals, trailingZeros, cultureSelector) {
        decimals = this.getNumberOfDecimalsForFormatting(format, decimals);
        var nonScientificFormat = "";
        if (this.isFormatSupported(format)
            && !this.hasScientitifcFormat(format)
            && this.isScalingUnit()
            && this.shouldRespectScalingUnit(format)) {
            value = this.displayUnit.project(value);
            nonScientificFormat = this.displayUnit.labelFormat;
        }
        return this.formatHelper({
            value: value,
            nonScientificFormat: nonScientificFormat,
            format: format,
            decimals: decimals,
            trailingZeros: trailingZeros,
            cultureSelector: cultureSelector
        });
    };
    DisplayUnitSystem.prototype.isFormatSupported = function (format) {
        return !DisplayUnitSystem.UNSUPPORTED_FORMATS.test(format);
    };
    DisplayUnitSystem.prototype.isPercentageFormat = function (format) {
        return format && format.indexOf(PERCENTAGE_FORMAT) >= 0;
    };
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    DisplayUnitSystem.prototype.shouldRespectScalingUnit = function (format) {
        return true;
    };
    DisplayUnitSystem.prototype.getNumberOfDecimalsForFormatting = function (format, decimals) {
        return decimals;
    };
    DisplayUnitSystem.prototype.isScalingUnit = function () {
        return this.displayUnit && this.displayUnit.isScaling();
    };
    DisplayUnitSystem.prototype.formatHelper = function (options) {
        var value = options.value, cultureSelector = options.cultureSelector, decimals = options.decimals, trailingZeros = options.trailingZeros;
        var nonScientificFormat = options.nonScientificFormat, format = options.format;
        // If the format is "general" and we want to override the number of decimal places then use the default numeric format string.
        if ((format === "g" || format === "G") && decimals != null) {
            format = "#,0.00";
        }
        format = formattingService_1.numberFormat.addDecimalsToFormat(format, decimals, trailingZeros);
        if (format && !formattingService_1.formattingService.isStandardNumberFormat(format)) {
            return formattingService_1.formattingService.formatNumberWithCustomOverride(value, format, nonScientificFormat, cultureSelector);
        }
        if (!format) {
            format = "G";
        }
        if (!nonScientificFormat) {
            nonScientificFormat = "{0}";
        }
        var text = formattingService_1.formattingService.formatValue(value, format, cultureSelector);
        return formattingService_1.formattingService.format(nonScientificFormat, [text]);
    };
    //  Formats a single value by choosing an appropriate base for the DisplayUnitSystem before formatting.
    DisplayUnitSystem.prototype.formatSingleValue = function (value, format, decimals, trailingZeros, cultureSelector) {
        // Change unit base to a value appropriate for this value
        this.update(this.shouldUseValuePrecision(value) ? powerbi_visuals_utils_typeutils_1.double.getPrecision(value, 8) : value);
        return this.format(value, format, decimals, trailingZeros, cultureSelector);
    };
    DisplayUnitSystem.prototype.shouldUseValuePrecision = function (value) {
        if (this.units.length === 0)
            return true;
        // Check if the value is big enough to have a valid unit by checking against the smallest unit (that it's value bigger than 1).
        var applicableRangeMin = 0;
        for (var i = 0; i < this.units.length; i++) {
            if (this.units[i].isScaling()) {
                applicableRangeMin = this.units[i].applicableRangeMin;
                break;
            }
        }
        return Math.abs(value) < applicableRangeMin;
    };
    DisplayUnitSystem.prototype.isScientific = function (value) {
        return value < -defaultScientificBigNumbersBoundary || value > defaultScientificBigNumbersBoundary ||
            (-scientificSmallNumbersBoundary < value && value < scientificSmallNumbersBoundary && value !== 0);
    };
    DisplayUnitSystem.prototype.hasScientitifcFormat = function (format) {
        return format && format.toUpperCase().indexOf("E") !== -1;
    };
    DisplayUnitSystem.prototype.supportsScientificFormat = function (format) {
        if (format)
            return SUPPORTED_SCIENTIFIC_FORMATS.test(format);
        return true;
    };
    DisplayUnitSystem.prototype.shouldFallbackToScientific = function (value, format) {
        return !this.hasScientitifcFormat(format)
            && this.supportsScientificFormat(format)
            && this.isScientific(value);
    };
    DisplayUnitSystem.prototype.getScientificFormat = function (data, format, decimals, trailingZeros) {
        // Use scientific format outside of the range
        if (this.isFormatSupported(format) && this.shouldFallbackToScientific(data, format)) {
            var numericFormat = formattingService_1.numberFormat.getNumericFormat(data, format);
            if (decimals)
                numericFormat = formattingService_1.numberFormat.addDecimalsToFormat(numericFormat ? numericFormat : "0", Math.abs(decimals), trailingZeros);
            if (numericFormat)
                return numericFormat + SCIENTIFIC_FORMAT;
            else
                return DEFAULT_SCIENTIFIC_FORMAT;
        }
        return format;
    };
    DisplayUnitSystem.UNSUPPORTED_FORMATS = /^(p\d*)|(e\d*)$/i;
    return DisplayUnitSystem;
}());
exports.DisplayUnitSystem = DisplayUnitSystem;
// Provides a unit system that is defined by formatting in the model, and is suitable for visualizations shown in single number visuals in explore mode.
var NoDisplayUnitSystem = /** @class */ (function (_super) {
    __extends(NoDisplayUnitSystem, _super);
    // Constructor
    function NoDisplayUnitSystem() {
        return _super.call(this, []) || this;
    }
    return NoDisplayUnitSystem;
}(DisplayUnitSystem));
exports.NoDisplayUnitSystem = NoDisplayUnitSystem;
/** Provides a unit system that creates a more concise format for displaying values. This is suitable for most of the cases where
    we are showing values (chart axes) and as such it is the default unit system. */
var DefaultDisplayUnitSystem = /** @class */ (function (_super) {
    __extends(DefaultDisplayUnitSystem, _super);
    // Constructor
    function DefaultDisplayUnitSystem(unitLookup) {
        return _super.call(this, DefaultDisplayUnitSystem.getUnits(unitLookup)) || this;
    }
    // Methods
    DefaultDisplayUnitSystem.prototype.format = function (data, format, decimals, trailingZeros, cultureSelector) {
        format = this.getScientificFormat(data, format, decimals, trailingZeros);
        return _super.prototype.format.call(this, data, format, decimals, trailingZeros, cultureSelector);
    };
    DefaultDisplayUnitSystem.RESET = function () {
        DefaultDisplayUnitSystem.units = null;
    };
    DefaultDisplayUnitSystem.getUnits = function (unitLookup) {
        if (!DefaultDisplayUnitSystem.units) {
            DefaultDisplayUnitSystem.units = createDisplayUnits(unitLookup, function (value, previousUnitValue, min) {
                // When dealing with millions/billions/trillions we need to switch to millions earlier: for example instead of showing 100K 200K 300K we should show 0.1M 0.2M 0.3M etc
                if (value - previousUnitValue >= 1000) {
                    return value / 10;
                }
                return min;
            });
            // Ensure last unit has max of infinity
            DefaultDisplayUnitSystem.units[DefaultDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;
        }
        return DefaultDisplayUnitSystem.units;
    };
    return DefaultDisplayUnitSystem;
}(DisplayUnitSystem));
exports.DefaultDisplayUnitSystem = DefaultDisplayUnitSystem;
/** Provides a unit system that creates a more concise format for displaying values, but only allows showing a unit if we have at least
    one of those units (e.g. 0.9M is not allowed since it's less than 1 million). This is suitable for cases such as dashboard tiles
    where we have restricted space but do not want to show partial units. */
var WholeUnitsDisplayUnitSystem = /** @class */ (function (_super) {
    __extends(WholeUnitsDisplayUnitSystem, _super);
    // Constructor
    function WholeUnitsDisplayUnitSystem(unitLookup) {
        return _super.call(this, WholeUnitsDisplayUnitSystem.getUnits(unitLookup)) || this;
    }
    WholeUnitsDisplayUnitSystem.RESET = function () {
        WholeUnitsDisplayUnitSystem.units = null;
    };
    WholeUnitsDisplayUnitSystem.getUnits = function (unitLookup) {
        if (!WholeUnitsDisplayUnitSystem.units) {
            WholeUnitsDisplayUnitSystem.units = createDisplayUnits(unitLookup);
            // Ensure last unit has max of infinity
            WholeUnitsDisplayUnitSystem.units[WholeUnitsDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;
        }
        return WholeUnitsDisplayUnitSystem.units;
    };
    WholeUnitsDisplayUnitSystem.prototype.format = function (data, format, decimals, trailingZeros, cultureSelector) {
        format = this.getScientificFormat(data, format, decimals, trailingZeros);
        return _super.prototype.format.call(this, data, format, decimals, trailingZeros, cultureSelector);
    };
    return WholeUnitsDisplayUnitSystem;
}(DisplayUnitSystem));
exports.WholeUnitsDisplayUnitSystem = WholeUnitsDisplayUnitSystem;
var DataLabelsDisplayUnitSystem = /** @class */ (function (_super) {
    __extends(DataLabelsDisplayUnitSystem, _super);
    function DataLabelsDisplayUnitSystem(unitLookup) {
        return _super.call(this, DataLabelsDisplayUnitSystem.getUnits(unitLookup)) || this;
    }
    DataLabelsDisplayUnitSystem.prototype.isFormatSupported = function (format) {
        return !DataLabelsDisplayUnitSystem.UNSUPPORTED_FORMATS.test(format);
    };
    DataLabelsDisplayUnitSystem.getUnits = function (unitLookup) {
        if (!DataLabelsDisplayUnitSystem.units) {
            var units = [];
            var adjustMinBasedOnPreviousUnit = function (value, previousUnitValue, min) {
                // Never returns true, we are always ignoring
                // We do not early switch (e.g. 100K instead of 0.1M)
                // Intended? If so, remove this function, otherwise, remove if statement
                if (value === -1)
                    if (value - previousUnitValue >= 1000) {
                        return value / 10;
                    }
                return min;
            };
            // Add Auto & None
            var names = unitLookup(-1);
            addUnitIfNonEmpty(units, DataLabelsDisplayUnitSystem.AUTO_DISPLAYUNIT_VALUE, names.title, names.format, adjustMinBasedOnPreviousUnit);
            names = unitLookup(0);
            addUnitIfNonEmpty(units, DataLabelsDisplayUnitSystem.NONE_DISPLAYUNIT_VALUE, names.title, names.format, adjustMinBasedOnPreviousUnit);
            // Add normal units
            DataLabelsDisplayUnitSystem.units = units.concat(createDisplayUnits(unitLookup, adjustMinBasedOnPreviousUnit));
            // Ensure last unit has max of infinity
            DataLabelsDisplayUnitSystem.units[DataLabelsDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;
        }
        return DataLabelsDisplayUnitSystem.units;
    };
    DataLabelsDisplayUnitSystem.prototype.format = function (data, format, decimals, trailingZeros, cultureSelector) {
        format = this.getScientificFormat(data, format, decimals, trailingZeros);
        return _super.prototype.format.call(this, data, format, decimals, trailingZeros, cultureSelector);
    };
    // Constants
    DataLabelsDisplayUnitSystem.AUTO_DISPLAYUNIT_VALUE = 0;
    DataLabelsDisplayUnitSystem.NONE_DISPLAYUNIT_VALUE = 1;
    DataLabelsDisplayUnitSystem.UNSUPPORTED_FORMATS = /^(e\d*)$/i;
    return DataLabelsDisplayUnitSystem;
}(DisplayUnitSystem));
exports.DataLabelsDisplayUnitSystem = DataLabelsDisplayUnitSystem;
function createDisplayUnits(unitLookup, adjustMinBasedOnPreviousUnit) {
    var units = [];
    for (var i = 3; i < maxExponent; i++) {
        var names = unitLookup(i);
        if (names)
            addUnitIfNonEmpty(units, powerbi_visuals_utils_typeutils_1.double.pow10(i), names.title, names.format, adjustMinBasedOnPreviousUnit);
    }
    return units;
}
function addUnitIfNonEmpty(units, value, title, labelFormat, adjustMinBasedOnPreviousUnit) {
    if (title || labelFormat) {
        var min = value;
        if (units.length > 0) {
            var previousUnit = units[units.length - 1];
            if (adjustMinBasedOnPreviousUnit)
                min = adjustMinBasedOnPreviousUnit(value, previousUnit.value, min);
            previousUnit.applicableRangeMax = min;
        }
        var unit = new DisplayUnit();
        unit.value = value;
        unit.applicableRangeMin = min;
        unit.applicableRangeMax = min * 1000;
        unit.title = title;
        unit.labelFormat = labelFormat;
        units.push(unit);
    }
}
//# sourceMappingURL=displayUnitSystem.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystemType.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystemType.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisplayUnitSystemType = void 0;
// The system used to determine display units used during formatting
var DisplayUnitSystemType;
(function (DisplayUnitSystemType) {
    // Default display unit system, which saves space by using units such as K, M, bn with PowerView rules for when to pick a unit. Suitable for chart axes.
    DisplayUnitSystemType[DisplayUnitSystemType["Default"] = 0] = "Default";
    // A verbose display unit system that will only respect the formatting defined in the model. Suitable for explore mode single-value cards.
    DisplayUnitSystemType[DisplayUnitSystemType["Verbose"] = 1] = "Verbose";
    /**
     * A display unit system that uses units such as K, M, bn if we have at least one of those units (e.g. 0.9M is not valid as it's less than 1 million).
     * Suitable for dashboard tile cards
     */
    DisplayUnitSystemType[DisplayUnitSystemType["WholeUnits"] = 2] = "WholeUnits";
    // A display unit system that also contains Auto and None units for data labels
    DisplayUnitSystemType[DisplayUnitSystemType["DataLabels"] = 3] = "DataLabels";
})(DisplayUnitSystemType = exports.DisplayUnitSystemType || (exports.DisplayUnitSystemType = {}));
//# sourceMappingURL=displayUnitSystemType.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/family.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/family.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Family = exports.fallbackFonts = void 0;
var familyInfo_1 = __webpack_require__(/*! ./familyInfo */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/familyInfo.js");
exports.fallbackFonts = ["helvetica", "arial", "sans-serif"];
exports.Family = {
    light: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    semilight: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    regular: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    semibold: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    bold: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    lightSecondary: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    regularSecondary: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    boldSecondary: new familyInfo_1.FamilyInfo(exports.fallbackFonts)
};
//# sourceMappingURL=family.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/familyInfo.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/familyInfo.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FamilyInfo = void 0;
var FamilyInfo = /** @class */ (function () {
    function FamilyInfo(families) {
        this.families = families;
    }
    Object.defineProperty(FamilyInfo.prototype, "family", {
        /**
         * Gets the first font "wf_" font family since it will always be loaded.
         */
        get: function () {
            return this.getFamily();
        },
        enumerable: false,
        configurable: true
    });
    /**
    * Gets the first font family that matches regex (if provided).
    * Default regex looks for "wf_" fonts which are always loaded.
    */
    FamilyInfo.prototype.getFamily = function (regex) {
        if (regex === void 0) { regex = /^wf_/; }
        if (!this.families) {
            return null;
        }
        if (regex) {
            for (var _i = 0, _a = this.families; _i < _a.length; _i++) {
                var fontFamily = _a[_i];
                if (regex.test(fontFamily)) {
                    return fontFamily;
                }
            }
        }
        return this.families[0];
    };
    Object.defineProperty(FamilyInfo.prototype, "css", {
        /**
         * Gets the CSS string for the "font-family" CSS attribute.
         */
        get: function () {
            return this.getCSS();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets the CSS string for the "font-family" CSS attribute.
     */
    FamilyInfo.prototype.getCSS = function () {
        return this.families ? this.families.map((function (font) { return font.indexOf(" ") > 0 ? "'" + font + "'" : font; })).join(", ") : null;
    };
    return FamilyInfo;
}());
exports.FamilyInfo = FamilyInfo;
//# sourceMappingURL=familyInfo.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formatting.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formatting.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
/* eslint-disable no-useless-escape */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fixDateTimeFormat = exports.findDateFormat = void 0;
var regexCache;
/**
 * Translate .NET format into something supported by Globalize.
 */
function findDateFormat(value, format, cultureName) {
    switch (format) {
        case "m":
            // Month + day
            format = "M";
            break;
        case "O":
        case "o":
            // Roundtrip
            format = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'0000'";
            break;
        case "R":
        case "r":
            // RFC1123 pattern - - time must be converted to UTC before formatting
            value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());
            format = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
            break;
        case "s":
            // Sortable - should use invariant culture
            format = "S";
            break;
        case "u":
            // Universal sortable - should convert to UTC before applying the "yyyy'-'MM'-'dd HH':'mm':'ss'Z' format.
            value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());
            format = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
            break;
        case "U":
            // Universal full - the pattern is same as F but the time must be converted to UTC before formatting
            value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());
            format = "F";
            break;
        case "y":
        case "Y":
            // Year and month
            switch (cultureName) {
                case "default":
                case "en":
                case "en-US":
                    format = "MMMM, yyyy"; // Fix the default year-month pattern for english
                    break;
                default:
                    format = "Y"; // For other cultures - use the localized pattern
            }
            break;
    }
    return { value: value, format: format };
}
exports.findDateFormat = findDateFormat;
/**
 * Translates unsupported .NET custom format expressions to the custom expressions supported by Globalize.
 */
function fixDateTimeFormat(format) {
    // Fix for the "K" format (timezone):
    // T he js dates don't have a kind property so we'll support only local kind which is equavalent to zzz format.
    format = format.replace(/%K/g, "zzz");
    format = format.replace(/K/g, "zzz");
    format = format.replace(/fffffff/g, "fff0000");
    format = format.replace(/ffffff/g, "fff000");
    format = format.replace(/fffff/g, "fff00");
    format = format.replace(/ffff/g, "fff0");
    // Fix for the 5 digit year: "yyyyy" format.
    // The Globalize doesn't support dates greater than 9999 so we replace the "yyyyy" with "0yyyy".
    format = format.replace(/yyyyy/g, "0yyyy");
    // Fix for the 3 digit year: "yyy" format.
    // The Globalize doesn't support this formatting so we need to replace it with the 4 digit year "yyyy" format.
    format = format.replace(/(^y|^)yyy(^y|$)/g, "yyyy");
    if (!regexCache) {
        // Creating Regexes for cases "Using single format specifier"
        // - http://msdn.microsoft.com/en-us/library/8kb3ddd4.aspx#UsingSingleSpecifiers
        // This is not supported from The Globalize.
        // The case covers all single "%" lead specifier (like "%d" but not %dd)
        // The cases as single "%d" are filtered in if the bellow.
        // (?!S) where S is the specifier make sure that we only one symbol for specifier.
        regexCache = ["d", "f", "F", "g", "h", "H", "K", "m", "M", "s", "t", "y", "z", ":", "/"].map(function (s) {
            return { r: new RegExp("\%" + s + "(?!" + s + ")", "g"), s: s };
        });
    }
    if (format.indexOf("%") !== -1 && format.length > 2) {
        for (var i = 0; i < regexCache.length; i++) {
            format = format.replace(regexCache[i].r, regexCache[i].s);
        }
    }
    return format;
}
exports.fixDateTimeFormat = fixDateTimeFormat;
//# sourceMappingURL=formatting.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/dateTimeFormat.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/dateTimeFormat.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.format = exports.canFormat = void 0;
var formatting_1 = __webpack_require__(/*! ./../formatting */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formatting.js");
var formattingEncoder = __webpack_require__(/*! ./formattingEncoder */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingEncoder.js");
var stringExtensions = __webpack_require__(/*! ./../stringExtensions */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/stringExtensions.js");
var globalize_1 = __webpack_require__(/*! ./../../globalize/globalize */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.js");
var _currentCachedFormat;
var _currentCachedProcessedFormat;
// Evaluates if the value can be formatted using the NumberFormat
function canFormat(value) {
    return value instanceof Date;
}
exports.canFormat = canFormat;
// Formats the date using provided format and culture
function format(value, format, culture) {
    format = format || "G";
    var isStandard = format.length === 1;
    try {
        if (isStandard) {
            return formatDateStandard(value, format, culture);
        }
        else {
            return formatDateCustom(value, format, culture);
        }
    }
    catch (e) {
        return formatDateStandard(value, "G", culture);
    }
}
exports.format = format;
// Formats the date using standard format expression
function formatDateStandard(value, format, culture) {
    // In order to provide parity with .NET we have to support additional set of DateTime patterns.
    var patterns = culture.calendar.patterns;
    // Extend supported set of patterns
    ensurePatterns(culture.calendar);
    // Handle extended set of formats
    var output = (0, formatting_1.findDateFormat)(value, format, culture.name);
    if (output.format.length === 1)
        format = patterns[output.format];
    else
        format = output.format;
    // need to revisit when globalization is enabled
    if (!culture) {
        culture = this.getCurrentCulture();
    }
    return globalize_1.Globalize.format(output.value, format, culture);
}
// Formats the date using custom format expression
function formatDateCustom(value, format, culture) {
    var result;
    var literals = [];
    format = formattingEncoder.preserveLiterals(format, literals);
    if (format.indexOf("F") > -1) {
        // F is not supported so we need to replace the F with f based on the milliseconds
        // Replace all sequences of F longer than 3 with "FFF"
        format = stringExtensions.replaceAll(format, "FFFF", "FFF");
        // Based on milliseconds update the format to use fff
        var milliseconds = value.getMilliseconds();
        if (milliseconds % 10 >= 1) {
            format = stringExtensions.replaceAll(format, "FFF", "fff");
        }
        format = stringExtensions.replaceAll(format, "FFF", "FF");
        if ((milliseconds % 100) / 10 >= 1) {
            format = stringExtensions.replaceAll(format, "FF", "ff");
        }
        format = stringExtensions.replaceAll(format, "FF", "F");
        if ((milliseconds % 1000) / 100 >= 1) {
            format = stringExtensions.replaceAll(format, "F", "f");
        }
        format = stringExtensions.replaceAll(format, "F", "");
        if (format === "" || format === "%")
            return "";
    }
    format = processCustomDateTimeFormat(format);
    result = globalize_1.Globalize.format(value, format, culture);
    result = localize(result, culture.calendar);
    result = formattingEncoder.restoreLiterals(result, literals, false);
    return result;
}
// Translates unsupported .NET custom format expressions to the custom expressions supported by JQuery.Globalize
function processCustomDateTimeFormat(format) {
    if (format === _currentCachedFormat) {
        return _currentCachedProcessedFormat;
    }
    _currentCachedFormat = format;
    format = (0, formatting_1.fixDateTimeFormat)(format);
    _currentCachedProcessedFormat = format;
    return format;
}
// Localizes the time separator symbol
function localize(value, dictionary) {
    var timeSeparator = dictionary[":"];
    if (timeSeparator === ":") {
        return value;
    }
    var result = "";
    var count = value.length;
    for (var i = 0; i < count; i++) {
        var char = value.charAt(i);
        switch (char) {
            case ":":
                result += timeSeparator;
                break;
            default:
                result += char;
                break;
        }
    }
    return result;
}
function ensurePatterns(calendar) {
    var patterns = calendar.patterns;
    if (patterns["g"] === undefined) {
        patterns["g"] = patterns["f"].replace(patterns["D"], patterns["d"]); // Generic: Short date, short time
        patterns["G"] = patterns["F"].replace(patterns["D"], patterns["d"]); // Generic: Short date, long time
    }
}
//# sourceMappingURL=dateTimeFormat.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingEncoder.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingEncoder.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.restoreLiterals = exports.preserveLiterals = exports.removeLiterals = void 0;
// quoted and escaped literal patterns
// NOTE: the final three cases match .NET behavior
var literalPatterns = [
    "'[^']*'",
    "\"[^\"]*\"",
    "\\\\.",
    "'[^']*$",
    "\"[^\"]*$",
    "\\\\$", // backslash at end of string
];
var literalMatcher = new RegExp(literalPatterns.join("|"), "g");
// Unicode U+E000 - U+F8FF is a private area and so we can use the chars from the range to encode the escaped sequences
function removeLiterals(format) {
    literalMatcher.lastIndex = 0;
    // just in case consecutive non-literals have some meaning
    return format.replace(literalMatcher, "\uE100");
}
exports.removeLiterals = removeLiterals;
function preserveLiterals(format, literals) {
    literalMatcher.lastIndex = 0;
    for (;;) {
        var match = literalMatcher.exec(format);
        if (!match)
            break;
        var literal = match[0];
        var literalOffset = literalMatcher.lastIndex - literal.length;
        var token = String.fromCharCode(0xE100 + literals.length);
        literals.push(literal);
        format = format.substring(0, literalOffset) + token + format.substring(literalMatcher.lastIndex);
        // back to avoid skipping due to removed literal substring
        literalMatcher.lastIndex = literalOffset + 1;
    }
    return format;
}
exports.preserveLiterals = preserveLiterals;
function restoreLiterals(format, literals, quoted) {
    if (quoted === void 0) { quoted = true; }
    var count = literals.length;
    for (var i = 0; i < count; i++) {
        var token = String.fromCharCode(0xE100 + i);
        var literal = literals[i];
        if (!quoted) {
            // caller wants literals to be re-inserted without escaping
            var firstChar = literal[0];
            if (firstChar === "\\" || literal.length === 1 || literal[literal.length - 1] !== firstChar) {
                // either escaped literal OR quoted literal that's missing the trailing quote
                // in either case we only remove the leading character
                literal = literal.substring(1);
            }
            else {
                // so must be a quoted literal with both starting and ending quote
                literal = literal.substring(1, literal.length - 1);
            }
        }
        format = format.replace(token, literal);
    }
    return format;
}
exports.restoreLiterals = restoreLiterals;
//# sourceMappingURL=formattingEncoder.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingService.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingService.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/* eslint-disable no-useless-escape */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formattingEncoder = exports.dateTimeFormat = exports.numberFormat = exports.formattingService = exports.FormattingService = void 0;
var globalize_1 = __webpack_require__(/*! ./../../globalize/globalize */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.js");
var globalize_cultures_1 = __webpack_require__(/*! ./../../globalize/globalize.cultures */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.cultures.js");
(0, globalize_cultures_1.default)(globalize_1.Globalize);
var dateTimeFormat = __webpack_require__(/*! ./dateTimeFormat */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/dateTimeFormat.js");
exports.dateTimeFormat = dateTimeFormat;
var numberFormat = __webpack_require__(/*! ./numberFormat */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/numberFormat.js");
exports.numberFormat = numberFormat;
var formattingEncoder = __webpack_require__(/*! ./formattingEncoder */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingEncoder.js");
exports.formattingEncoder = formattingEncoder;
var iFormattingService_1 = __webpack_require__(/*! ./iFormattingService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/iFormattingService.js");
var IndexedTokensRegex = /({{)|(}})|{(\d+[^}]*)}/g;
// Formatting Service
var FormattingService = /** @class */ (function () {
    function FormattingService() {
    }
    FormattingService.prototype.formatValue = function (value, formatValue, cultureSelector) {
        // Handle special cases
        if (value === undefined || value === null) {
            return "";
        }
        var gculture = this.getCulture(cultureSelector);
        if (dateTimeFormat.canFormat(value)) {
            // Dates
            return dateTimeFormat.format(value, formatValue, gculture);
        }
        else if (numberFormat.canFormat(value)) {
            // Numbers
            return numberFormat.format(value, formatValue, gculture);
        }
        // Other data types - return as string
        return value.toString();
    };
    FormattingService.prototype.format = function (formatWithIndexedTokens, args, culture) {
        var _this = this;
        if (!formatWithIndexedTokens) {
            return "";
        }
        return formatWithIndexedTokens.replace(IndexedTokensRegex, function (match, left, right, argToken) {
            if (left) {
                return "{";
            }
            else if (right) {
                return "}";
            }
            else {
                var parts = argToken.split(":");
                var argIndex = parseInt(parts[0], 10);
                var argFormat = parts[1];
                return _this.formatValue(args[argIndex], argFormat, culture);
            }
        });
    };
    FormattingService.prototype.isStandardNumberFormat = function (format) {
        return numberFormat.isStandardFormat(format);
    };
    FormattingService.prototype.formatNumberWithCustomOverride = function (value, format, nonScientificOverrideFormat, culture) {
        var gculture = this.getCulture(culture);
        return numberFormat.formatWithCustomOverride(value, format, nonScientificOverrideFormat, gculture);
    };
    FormattingService.prototype.dateFormatString = function (unit) {
        if (!this._dateTimeScaleFormatInfo)
            this.initialize();
        return this._dateTimeScaleFormatInfo.getFormatString(unit);
    };
    /**
     * Sets the current localization culture
     * @param cultureSelector - name of a culture: "en", "en-UK", "fr-FR" etc. (See National Language Support (NLS) for full lists. Use "default" for invariant culture).
     */
    FormattingService.prototype.setCurrentCulture = function (cultureSelector) {
        if (this._currentCultureSelector !== cultureSelector) {
            this._currentCulture = this.getCulture(cultureSelector);
            this._currentCultureSelector = cultureSelector;
            this._dateTimeScaleFormatInfo = new DateTimeScaleFormatInfo(this._currentCulture);
        }
    };
    /**
     * Gets the culture assotiated with the specified cultureSelector ("en", "en-US", "fr-FR" etc).
     * @param cultureSelector - name of a culture: "en", "en-UK", "fr-FR" etc. (See National Language Support (NLS) for full lists. Use "default" for invariant culture).
     * Exposing this function for testability of unsupported cultures
     */
    FormattingService.prototype.getCulture = function (cultureSelector) {
        if (cultureSelector == null) {
            if (this._currentCulture == null) {
                this.initialize();
            }
            return this._currentCulture;
        }
        else {
            var culture = globalize_1.Globalize.findClosestCulture(cultureSelector);
            if (!culture)
                culture = globalize_1.Globalize.culture("en-US");
            return culture;
        }
    };
    // By default the Globalization module initializes to the culture/calendar provided in the language/culture URL params
    FormattingService.prototype.initialize = function () {
        var cultureName = this.getCurrentCulture();
        this.setCurrentCulture(cultureName);
        var calendarName = this.getUrlParam("calendar");
        if (calendarName) {
            var culture = this._currentCulture;
            var c = culture.calendars[calendarName];
            if (c) {
                culture.calendar = c;
            }
        }
    };
    /**
     *  Exposing this function for testability
     */
    FormattingService.prototype.getCurrentCulture = function () {
        if (window === null || window === void 0 ? void 0 : window.navigator) {
            return window.navigator.userLanguage || window.navigator["language"];
        }
        return "en-US";
    };
    /**
     *  Exposing this function for testability
     *  @param name: queryString name
     */
    FormattingService.prototype.getUrlParam = function (name) {
        var param = window.location.search.match(RegExp("[?&]" + name + "=([^&]*)"));
        return param ? param[1] : undefined;
    };
    return FormattingService;
}());
exports.FormattingService = FormattingService;
// DateTimeScaleFormatInfo is used to calculate and keep the Date formats used for different units supported by the DateTimeScaleModel
var DateTimeScaleFormatInfo = /** @class */ (function () {
    // Constructor
    /**
     * Creates new instance of the DateTimeScaleFormatInfo class.
     * @param culture - culture which calendar info is going to be used to derive the formats.
     */
    function DateTimeScaleFormatInfo(culture) {
        var calendar = culture.calendar;
        var patterns = calendar.patterns;
        var monthAbbreviations = calendar["months"]["namesAbbr"];
        var cultureHasMonthAbbr = monthAbbreviations && monthAbbreviations[0];
        var yearMonthPattern = patterns["Y"];
        var monthDayPattern = patterns["M"];
        var fullPattern = patterns["f"];
        var longTimePattern = patterns["T"];
        var shortTimePattern = patterns["t"];
        var separator = fullPattern.indexOf(",") > -1 ? ", " : " ";
        var hasYearSymbol = yearMonthPattern.indexOf("yyyy'") === 0 && yearMonthPattern.length > 6 && yearMonthPattern[6] === "\'";
        this.YearPattern = hasYearSymbol ? yearMonthPattern.substring(0, 7) : "yyyy";
        var yearPos = fullPattern.indexOf("yy");
        var monthPos = fullPattern.indexOf("MMMM");
        this.MonthPattern = cultureHasMonthAbbr && monthPos > -1 ? (yearPos > monthPos ? "MMM yyyy" : "yyyy MMM") : yearMonthPattern;
        this.DayPattern = cultureHasMonthAbbr ? monthDayPattern.replace("MMMM", "MMM") : monthDayPattern;
        var minutePos = fullPattern.indexOf("mm");
        var pmPos = fullPattern.indexOf("tt");
        var shortHourPattern = pmPos > -1 ? shortTimePattern.replace(":mm ", "") : shortTimePattern;
        this.HourPattern = yearPos < minutePos ? this.DayPattern + separator + shortHourPattern : shortHourPattern + separator + this.DayPattern;
        this.MinutePattern = shortTimePattern;
        this.SecondPattern = longTimePattern;
        this.MillisecondPattern = longTimePattern.replace("ss", "ss.fff");
        // Special cases
        switch (culture.name) {
            case "fi-FI":
                this.DayPattern = this.DayPattern.replace("'ta'", ""); // Fix for finish 'ta' suffix for month names.
                this.HourPattern = this.HourPattern.replace("'ta'", "");
                break;
        }
    }
    // Methods
    /**
     * Returns the format string of the provided DateTimeUnit.
     * @param unit - date or time unit
     */
    DateTimeScaleFormatInfo.prototype.getFormatString = function (unit) {
        switch (unit) {
            case iFormattingService_1.DateTimeUnit.Year:
                return this.YearPattern;
            case iFormattingService_1.DateTimeUnit.Month:
                return this.MonthPattern;
            case iFormattingService_1.DateTimeUnit.Week:
            case iFormattingService_1.DateTimeUnit.Day:
                return this.DayPattern;
            case iFormattingService_1.DateTimeUnit.Hour:
                return this.HourPattern;
            case iFormattingService_1.DateTimeUnit.Minute:
                return this.MinutePattern;
            case iFormattingService_1.DateTimeUnit.Second:
                return this.SecondPattern;
            case iFormattingService_1.DateTimeUnit.Millisecond:
                return this.MillisecondPattern;
        }
    };
    return DateTimeScaleFormatInfo;
}());
var formattingService = new FormattingService();
exports.formattingService = formattingService;
//# sourceMappingURL=formattingService.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/iFormattingService.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/iFormattingService.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DateTimeUnit = void 0;
// Enumeration of DateTimeUnits
var DateTimeUnit;
(function (DateTimeUnit) {
    DateTimeUnit[DateTimeUnit["Year"] = 0] = "Year";
    DateTimeUnit[DateTimeUnit["Month"] = 1] = "Month";
    DateTimeUnit[DateTimeUnit["Week"] = 2] = "Week";
    DateTimeUnit[DateTimeUnit["Day"] = 3] = "Day";
    DateTimeUnit[DateTimeUnit["Hour"] = 4] = "Hour";
    DateTimeUnit[DateTimeUnit["Minute"] = 5] = "Minute";
    DateTimeUnit[DateTimeUnit["Second"] = 6] = "Second";
    DateTimeUnit[DateTimeUnit["Millisecond"] = 7] = "Millisecond";
})(DateTimeUnit = exports.DateTimeUnit || (exports.DateTimeUnit = {}));
//# sourceMappingURL=iFormattingService.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/numberFormat.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/numberFormat.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCustomFormatMetadata = exports.formatWithCustomOverride = exports.format = exports.isStandardFormat = exports.canFormat = exports.getComponents = exports.hasFormatComponents = exports.addDecimalsToFormat = exports.getNumericFormat = exports.NumberFormatComponentsDelimeter = void 0;
/**
 * NumberFormat module contains the static methods for formatting the numbers.
 * It extends the Globalize functionality to support complete set of .NET
 * formatting expressions for numeric types including custom formats.
 */
/* eslint-disable no-useless-escape */
var globalize_1 = __webpack_require__(/*! ./../../globalize/globalize */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.js");
// powerbi.extensibility.utils.type
var powerbi_visuals_utils_typeutils_1 = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/index.js");
// powerbi.extensibility.utils.formatting
var stringExtensions = __webpack_require__(/*! ./../stringExtensions */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/stringExtensions.js");
var formattingEncoder = __webpack_require__(/*! ./formattingEncoder */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingEncoder.js");
var formattingService_1 = __webpack_require__(/*! ./formattingService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingService.js");
var NumericalPlaceHolderRegex = /\{.+\}/;
var ScientificFormatRegex = /e[+-]*[0#]+/i;
var StandardFormatRegex = /^[a-z]\d{0,2}$/i; // a letter + up to 2 digits for precision specifier
var TrailingZerosRegex = /0+$/;
var DecimalFormatRegex = /\.([0#]*)/g;
var NumericFormatRegex = /[0#,\.]+[0,#]*/g;
// (?=...) is a positive lookahead assertion. The RE is asking for the last digit placeholder, [0#],
// which is followed by non-digit placeholders and the end of string, [^0#]*$. But it only matches
// the last digit placeholder, not anything that follows because the positive lookahead isn"t included
// in the match - it is only a condition.
var LastNumericPlaceholderRegex = /([0#])(?=[^0#]*$)/;
var DecimalFormatCharacter = ".";
var ZeroPlaceholder = "0";
var DigitPlaceholder = "#";
var ExponentialFormatChar = "E";
var NumericPlaceholders = [ZeroPlaceholder, DigitPlaceholder];
var NumericPlaceholderRegex = new RegExp(NumericPlaceholders.join("|"), "g");
exports.NumberFormatComponentsDelimeter = ";";
function getNonScientificFormatWithPrecision(baseFormat, numericFormat) {
    if (!numericFormat || baseFormat === undefined)
        return baseFormat;
    var newFormat = "{0:" + numericFormat + "}";
    return baseFormat.replace("{0}", newFormat);
}
function getNumericFormat(value, baseFormat) {
    if (baseFormat == null)
        return baseFormat;
    if (hasFormatComponents(baseFormat)) {
        var _a = getComponents(baseFormat), positive = _a.positive, negative = _a.negative, zero = _a.zero;
        if (value > 0)
            return getNumericFormatFromComponent(value, positive);
        else if (value === 0)
            return getNumericFormatFromComponent(value, zero);
        return getNumericFormatFromComponent(value, negative);
    }
    return getNumericFormatFromComponent(value, baseFormat);
}
exports.getNumericFormat = getNumericFormat;
function getNumericFormatFromComponent(value, format) {
    var match = powerbi_visuals_utils_typeutils_1.regExpExtensions.run(NumericFormatRegex, format);
    if (match)
        return match[0];
    return format;
}
function addDecimalsToFormat(baseFormat, decimals, trailingZeros) {
    if (decimals == null)
        return baseFormat;
    // Default format string
    if (baseFormat == null)
        baseFormat = ZeroPlaceholder;
    if (hasFormatComponents(baseFormat)) {
        var _a = getComponents(baseFormat), positive = _a.positive, negative = _a.negative, zero = _a.zero;
        var formats = [positive, negative, zero];
        for (var i = 0; i < formats.length; i++) {
            // Update format in formats array
            formats[i] = addDecimalsToFormatComponent(formats[i], decimals, trailingZeros);
        }
        return formats.join(exports.NumberFormatComponentsDelimeter);
    }
    return addDecimalsToFormatComponent(baseFormat, decimals, trailingZeros);
}
exports.addDecimalsToFormat = addDecimalsToFormat;
function addDecimalsToFormatComponent(format, decimals, trailingZeros) {
    decimals = Math.abs(decimals);
    if (decimals >= 0) {
        var literals = [];
        format = formattingEncoder.preserveLiterals(format, literals);
        var placeholder = trailingZeros ? ZeroPlaceholder : DigitPlaceholder;
        var decimalPlaceholders = stringExtensions.repeat(placeholder, Math.abs(decimals));
        var match = powerbi_visuals_utils_typeutils_1.regExpExtensions.run(DecimalFormatRegex, format);
        if (match) {
            var beforeDecimal = format.substring(0, match.index);
            var formatDecimal = format.substring(match.index + 1, match[1].length + match.index + 1);
            var afterDecimal = format.substring(match.index + match[0].length);
            if (trailingZeros)
                // Use explicit decimals argument as placeholders
                formatDecimal = decimalPlaceholders;
            else {
                var decimalChange = decimalPlaceholders.length - formatDecimal.length;
                if (decimalChange > 0)
                    // Append decimalPlaceholders to existing decimal portion of format string
                    formatDecimal = formatDecimal + decimalPlaceholders.slice(-decimalChange);
                else if (decimalChange < 0)
                    // Remove decimals from formatDecimal
                    formatDecimal = formatDecimal.slice(0, decimalChange);
            }
            if (formatDecimal.length > 0)
                formatDecimal = DecimalFormatCharacter + formatDecimal;
            format = beforeDecimal + formatDecimal + afterDecimal;
        }
        else if (decimalPlaceholders.length > 0) {
            // Replace last numeric placeholder with decimal portion
            format = format.replace(LastNumericPlaceholderRegex, "$1" + DecimalFormatCharacter + decimalPlaceholders);
        }
        if (literals.length !== 0)
            format = formattingEncoder.restoreLiterals(format, literals);
    }
    return format;
}
function hasFormatComponents(format) {
    return formattingEncoder.removeLiterals(format).indexOf(exports.NumberFormatComponentsDelimeter) !== -1;
}
exports.hasFormatComponents = hasFormatComponents;
function getComponents(format) {
    var signFormat = {
        hasNegative: false,
        positive: format,
        negative: format,
        zero: format,
    };
    // escape literals so semi-colon in a literal isn't interpreted as a delimiter
    // NOTE: OK to use the literals extracted here for all three components before since the literals are indexed.
    // For example, "'pos-lit';'neg-lit'" will get preserved as "\uE000;\uE001" and the literal array will be
    // ['pos-lit', 'neg-lit']. When the negative components is restored, its \uE001 will select the second
    // literal.
    var literals = [];
    format = formattingEncoder.preserveLiterals(format, literals);
    var signSpecificFormats = format.split(exports.NumberFormatComponentsDelimeter);
    var formatCount = signSpecificFormats.length;
    if (formatCount > 1) {
        if (literals.length !== 0)
            signSpecificFormats = signSpecificFormats.map(function (signSpecificFormat) { return formattingEncoder.restoreLiterals(signSpecificFormat, literals); });
        signFormat.hasNegative = true;
        signFormat.positive = signFormat.zero = signSpecificFormats[0];
        signFormat.negative = signSpecificFormats[1];
        if (formatCount > 2)
            signFormat.zero = signSpecificFormats[2];
    }
    return signFormat;
}
exports.getComponents = getComponents;
var _lastCustomFormatMeta;
// Evaluates if the value can be formatted using the NumberFormat
function canFormat(value) {
    return typeof (value) === "number";
}
exports.canFormat = canFormat;
function isStandardFormat(format) {
    return StandardFormatRegex.test(format);
}
exports.isStandardFormat = isStandardFormat;
// Formats the number using specified format expression and culture
function format(value, format, culture) {
    format = format || "G";
    try {
        if (isStandardFormat(format))
            return formatNumberStandard(value, format, culture);
        return formatNumberCustom(value, format, culture);
    }
    catch (e) {
        return globalize_1.Globalize.format(value, undefined, culture);
    }
}
exports.format = format;
// Performs a custom format with a value override.  Typically used for custom formats showing scaled values.
function formatWithCustomOverride(value, format, nonScientificOverrideFormat, culture) {
    return formatNumberCustom(value, format, culture, nonScientificOverrideFormat);
}
exports.formatWithCustomOverride = formatWithCustomOverride;
// Formats the number using standard format expression
function formatNumberStandard(value, format, culture) {
    var result;
    var precision = (format.length > 1 ? parseInt(format.substring(1, format.length), 10) : undefined);
    var numberFormatInfo = culture.numberFormat;
    var formatChar = format.charAt(0);
    var abs = Math.abs(value);
    switch (formatChar) {
        case "e":
        case "E":
            if (precision === undefined) {
                precision = 6;
            }
            format = "0." + stringExtensions.repeat("0", precision) + formatChar + "+000";
            result = formatNumberCustom(value, format, culture);
            break;
        case "f":
        case "F":
            result = precision !== undefined ? value.toFixed(precision) : value.toFixed(numberFormatInfo.decimals);
            result = localize(result, numberFormatInfo);
            break;
        case "g":
        case "G":
            if (abs === 0 || (1E-4 <= abs && abs < 1E15)) {
                // For the range of 0.0001 to 1,000,000,000,000,000 - use the normal form
                result = precision !== undefined ? value.toPrecision(precision) : value.toString();
            }
            else {
                // Otherwise use exponential
                // Assert that value is a number and fall back on returning value if it is not
                if (typeof (value) !== "number")
                    return String(value);
                result = precision !== undefined ? value.toExponential(precision) : value.toExponential();
                result = result.replace("e", "E");
            }
            result = localize(result, numberFormatInfo);
            break;
        case "r":
        case "R":
            result = value.toString();
            result = localize(result, numberFormatInfo);
            break;
        case "x":
        case "X":
            result = value.toString(16);
            if (formatChar === "X") {
                result = result.toUpperCase();
            }
            if (precision !== undefined) {
                var actualPrecision = result.length;
                var isNegative = value < 0;
                if (isNegative) {
                    actualPrecision--;
                }
                var paddingZerosCount = precision - actualPrecision;
                var paddingZeros = undefined;
                if (paddingZerosCount > 0) {
                    paddingZeros = stringExtensions.repeat("0", paddingZerosCount);
                }
                if (isNegative) {
                    result = "-" + paddingZeros + result.substring(1);
                }
                else {
                    result = paddingZeros + result;
                }
            }
            result = localize(result, numberFormatInfo);
            break;
        default:
            result = globalize_1.Globalize.format(value, format, culture);
    }
    return result;
}
// Formats the number using custom format expression
function formatNumberCustom(value, format, culture, nonScientificOverrideFormat) {
    var result;
    var numberFormatInfo = culture.numberFormat;
    if (isFinite(value)) {
        // Split format by positive[;negative;zero] pattern
        var formatComponents = getComponents(format);
        // Pick a format based on the sign of value
        if (value > 0) {
            format = formatComponents.positive;
        }
        else if (value === 0) {
            format = formatComponents.zero;
        }
        else {
            format = formatComponents.negative;
        }
        // Normalize value if we have an explicit negative format
        if (formatComponents.hasNegative)
            value = Math.abs(value);
        // Get format metadata
        var formatMeta = getCustomFormatMetadata(format, true /*calculatePrecision*/);
        // Preserve literals and escaped chars
        var literals = [];
        if (formatMeta.hasLiterals) {
            format = formattingEncoder.preserveLiterals(format, literals);
        }
        // Scientific format
        if (formatMeta.hasE && !nonScientificOverrideFormat) {
            var scientificMatch = powerbi_visuals_utils_typeutils_1.regExpExtensions.run(ScientificFormatRegex, format);
            if (scientificMatch) {
                // Case 2.1. Scientific custom format
                var formatM = format.substring(0, scientificMatch.index);
                var formatE = format.substring(scientificMatch.index + 2); // E(+|-)
                var precision = getCustomFormatPrecision(formatM, formatMeta);
                var scale = getCustomFormatScale(formatM, formatMeta);
                if (scale !== 1) {
                    value = value * scale;
                }
                // Assert that value is a number and fall back on returning value if it is not
                if (typeof (value) !== "number")
                    return String(value);
                var s = value.toExponential(precision);
                var indexOfE = s.indexOf("e");
                var mantissa = s.substring(0, indexOfE);
                var exp = s.substring(indexOfE + 1);
                var resultM = fuseNumberWithCustomFormat(mantissa, formatM, numberFormatInfo);
                var resultE = fuseNumberWithCustomFormat(exp, formatE, numberFormatInfo);
                if (resultE.charAt(0) === "+" && scientificMatch[0].charAt(1) !== "+") {
                    resultE = resultE.substring(1);
                }
                var e = scientificMatch[0].charAt(0);
                result = resultM + e + resultE;
            }
        }
        // Non scientific format
        if (result === undefined) {
            var valueFormatted = void 0;
            var isValueGlobalized = false;
            var precision = getCustomFormatPrecision(format, formatMeta);
            var scale = getCustomFormatScale(format, formatMeta);
            if (scale !== 1)
                value = value * scale;
            // Rounding
            value = parseFloat(toNonScientific(value, precision));
            if (!isFinite(value)) {
                // very large and small finite values can become infinite by parseFloat(toNonScientific())
                return globalize_1.Globalize.format(value, undefined);
            }
            if (nonScientificOverrideFormat) {
                // Get numeric format from format string
                var numericFormat = getNumericFormat(value, format);
                // Add separators and decimalFormat to nonScientificFormat
                nonScientificOverrideFormat = getNonScientificFormatWithPrecision(nonScientificOverrideFormat, numericFormat);
                // Format the value
                valueFormatted = formattingService_1.formattingService.format(nonScientificOverrideFormat, [value], culture.name);
                isValueGlobalized = true;
            }
            else
                valueFormatted = toNonScientific(value, precision);
            result = fuseNumberWithCustomFormat(valueFormatted, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized);
        }
        if (formatMeta.hasLiterals) {
            result = formattingEncoder.restoreLiterals(result, literals, false);
        }
        _lastCustomFormatMeta = formatMeta;
    }
    else {
        return globalize_1.Globalize.format(value, undefined);
    }
    return result;
}
// Returns string with the fixed point respresentation of the number
function toNonScientific(value, precision) {
    var result = "";
    var precisionZeros = 0;
    // Double precision numbers support actual 15-16 decimal digits of precision.
    if (precision > 16) {
        precisionZeros = precision - 16;
        precision = 16;
    }
    var digitsBeforeDecimalPoint = powerbi_visuals_utils_typeutils_1.double.log10(Math.abs(value));
    if (digitsBeforeDecimalPoint < 16) {
        if (digitsBeforeDecimalPoint > 0) {
            var maxPrecision = 16 - digitsBeforeDecimalPoint;
            if (precision > maxPrecision) {
                precisionZeros += precision - maxPrecision;
                precision = maxPrecision;
            }
        }
        result = value.toFixed(precision);
    }
    else if (digitsBeforeDecimalPoint === 16) {
        result = value.toFixed(0);
        precisionZeros += precision;
        if (precisionZeros > 0) {
            result += ".";
        }
    }
    else { // digitsBeforeDecimalPoint > 16
        // Different browsers have different implementations of the toFixed().
        // In IE it returns fixed format no matter what's the number. In FF and Chrome the method returns exponential format for numbers greater than 1E21.
        // So we need to check for range and convert the to exponential with the max precision.
        // Then we convert exponential string to fixed by removing the dot and padding with "power" zeros.
        // Assert that value is a number and fall back on returning value if it is not
        if (typeof (value) !== "number")
            return String(value);
        result = value.toExponential(15);
        var indexOfE = result.indexOf("e");
        if (indexOfE > 0) {
            var indexOfDot = result.indexOf(".");
            var mantissa = result.substring(0, indexOfE);
            var exp = result.substring(indexOfE + 1);
            var powerZeros = parseInt(exp, 10) - (mantissa.length - indexOfDot - 1);
            result = mantissa.replace(".", "") + stringExtensions.repeat("0", powerZeros);
            if (precision > 0) {
                result = result + "." + stringExtensions.repeat("0", precision);
            }
        }
    }
    if (precisionZeros > 0) {
        result = result + stringExtensions.repeat("0", precisionZeros);
    }
    return result;
}
/**
 * Returns the formatMetadata of the format
 * When calculating precision and scale, if format string of
 * positive[;negative;zero] => positive format will be used
 * @param (required) format - format string
 * @param (optional) calculatePrecision - calculate precision of positive format
 * @param (optional) calculateScale - calculate scale of positive format
 */
function getCustomFormatMetadata(format, calculatePrecision, calculateScale, calculatePartsPerScale) {
    if (_lastCustomFormatMeta !== undefined && format === _lastCustomFormatMeta.format) {
        return _lastCustomFormatMeta;
    }
    var literals = [];
    var escaped = formattingEncoder.preserveLiterals(format, literals);
    var result = {
        format: format,
        hasLiterals: literals.length !== 0,
        hasE: false,
        hasCommas: false,
        hasDots: false,
        hasPercent: false,
        hasPermile: false,
        precision: undefined,
        scale: undefined,
        partsPerScale: undefined,
    };
    for (var i = 0, length_1 = escaped.length; i < length_1; i++) {
        var c = escaped.charAt(i);
        switch (c) {
            case "e":
            case "E":
                result.hasE = true;
                break;
            case ",":
                result.hasCommas = true;
                break;
            case ".":
                result.hasDots = true;
                break;
            case "%":
                result.hasPercent = true;
                break;
            case "\u2030": // ‰
                result.hasPermile = true;
                break;
        }
    }
    // Use positive format for calculating these values
    var formatComponents = getComponents(format);
    if (calculatePrecision)
        result.precision = getCustomFormatPrecision(formatComponents.positive, result);
    if (calculatePartsPerScale)
        result.partsPerScale = getCustomFormatPartsPerScale(formatComponents.positive, result);
    if (calculateScale)
        result.scale = getCustomFormatScale(formatComponents.positive, result);
    return result;
}
exports.getCustomFormatMetadata = getCustomFormatMetadata;
/** Returns the decimal precision of format based on the number of # and 0 chars after the decimal point
     * Important: The input format string needs to be split to the appropriate pos/neg/zero portion to work correctly */
function getCustomFormatPrecision(format, formatMeta) {
    if (formatMeta.precision > -1) {
        return formatMeta.precision;
    }
    var result = 0;
    if (formatMeta.hasDots) {
        if (formatMeta.hasLiterals) {
            format = formattingEncoder.removeLiterals(format);
        }
        var dotIndex = format.indexOf(".");
        if (dotIndex > -1) {
            var count = format.length;
            for (var i = dotIndex; i < count; i++) {
                var char = format.charAt(i);
                if (char.match(NumericPlaceholderRegex))
                    result++;
                // 0.00E+0 :: Break before counting 0 in
                // exponential portion of format string
                if (char === ExponentialFormatChar)
                    break;
            }
            result = Math.min(19, result);
        }
    }
    formatMeta.precision = result;
    return result;
}
function getCustomFormatPartsPerScale(format, formatMeta) {
    if (formatMeta.partsPerScale != null)
        return formatMeta.partsPerScale;
    var result = 1;
    if (formatMeta.hasPercent && format.indexOf("%") > -1) {
        result = result * 100;
    }
    if (formatMeta.hasPermile && format.indexOf(/* ‰ */ "\u2030") > -1) {
        result = result * 1000;
    }
    formatMeta.partsPerScale = result;
    return result;
}
// Returns the scale factor of the format based on the "%" and scaling "," chars in the format
function getCustomFormatScale(format, formatMeta) {
    if (formatMeta.scale > -1) {
        return formatMeta.scale;
    }
    var result = getCustomFormatPartsPerScale(format, formatMeta);
    if (formatMeta.hasCommas) {
        var dotIndex = format.indexOf(".");
        if (dotIndex === -1) {
            dotIndex = format.length;
        }
        for (var i = dotIndex - 1; i > -1; i--) {
            var char = format.charAt(i);
            if (char === ",") {
                result = result / 1000;
            }
            else {
                break;
            }
        }
    }
    formatMeta.scale = result;
    return result;
}
function fuseNumberWithCustomFormat(value, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized) {
    var suppressModifyValue = !!nonScientificOverrideFormat;
    var formatParts = format.split(".", 2);
    if (formatParts.length === 2) {
        var wholeFormat = formatParts[0];
        var fractionFormat = formatParts[1];
        var displayUnit = "";
        // Remove display unit from value before splitting on "." as localized display units sometimes end with "."
        if (nonScientificOverrideFormat) {
            displayUnit = nonScientificOverrideFormat.replace(NumericalPlaceHolderRegex, "");
            value = value.replace(displayUnit, "");
        }
        var globalizedDecimalSeparator = numberFormatInfo["."];
        var decimalSeparator = isValueGlobalized ? globalizedDecimalSeparator : ".";
        var valueParts = value.split(decimalSeparator, 2);
        var wholeValue = valueParts.length === 1 ? valueParts[0] + displayUnit : valueParts[0];
        var fractionValue = valueParts.length === 2 ? valueParts[1] + displayUnit : "";
        fractionValue = fractionValue.replace(TrailingZerosRegex, "");
        var wholeFormattedValue = fuseNumberWithCustomFormatLeft(wholeValue, wholeFormat, numberFormatInfo, suppressModifyValue);
        var fractionFormattedValue = fuseNumberWithCustomFormatRight(fractionValue, fractionFormat, suppressModifyValue);
        if (fractionFormattedValue.fmtOnly || fractionFormattedValue.value === "")
            return wholeFormattedValue + fractionFormattedValue.value;
        return wholeFormattedValue + globalizedDecimalSeparator + fractionFormattedValue.value;
    }
    return fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue);
}
function fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue) {
    var groupSymbolIndex = format.indexOf(",");
    var enableGroups = groupSymbolIndex > -1 && groupSymbolIndex < Math.max(format.lastIndexOf("0"), format.lastIndexOf("#")) && numberFormatInfo[","];
    var groupDigitCount = 0;
    var groupIndex = 0;
    var groupSizes = numberFormatInfo.groupSizes || [3];
    var groupSize = groupSizes[0];
    var groupSeparator = numberFormatInfo[","];
    var sign = "";
    var firstChar = value.charAt(0);
    if (firstChar === "+" || firstChar === "-") {
        sign = numberFormatInfo[firstChar];
        value = value.substring(1);
    }
    var isZero = value === "0";
    var result = "";
    var leftBuffer = "";
    var vi = value.length - 1;
    var fmtOnly = true;
    // Iterate through format chars and replace 0 and # with the digits from the value string
    for (var fi = format.length - 1; fi > -1; fi--) {
        var formatChar = format.charAt(fi);
        switch (formatChar) {
            case ZeroPlaceholder:
            case DigitPlaceholder:
                fmtOnly = false;
                if (leftBuffer !== "") {
                    result = leftBuffer + result;
                    leftBuffer = "";
                }
                if (!suppressModifyValue) {
                    if (vi > -1 || formatChar === ZeroPlaceholder) {
                        if (enableGroups) {
                            // If the groups are enabled we'll need to keep track of the current group index and periodically insert group separator,
                            if (groupDigitCount === groupSize) {
                                result = groupSeparator + result;
                                groupIndex++;
                                if (groupIndex < groupSizes.length) {
                                    groupSize = groupSizes[groupIndex];
                                }
                                groupDigitCount = 1;
                            }
                            else {
                                groupDigitCount++;
                            }
                        }
                    }
                    if (vi > -1) {
                        if (isZero && formatChar === DigitPlaceholder) {
                            // Special case - if we need to format a zero value and the # symbol is used - we don't copy it into the result)
                        }
                        else {
                            result = value.charAt(vi) + result;
                        }
                        vi--;
                    }
                    else if (formatChar !== DigitPlaceholder) {
                        result = formatChar + result;
                    }
                }
                break;
            case ",":
                // We should skip all the , chars
                break;
            default:
                leftBuffer = formatChar + leftBuffer;
                break;
        }
    }
    // If the value didn't fit into the number of zeros provided in the format then we should insert the missing part of the value into the result
    if (!suppressModifyValue) {
        if (vi > -1 && result !== "") {
            if (enableGroups) {
                while (vi > -1) {
                    if (groupDigitCount === groupSize) {
                        result = groupSeparator + result;
                        groupIndex++;
                        if (groupIndex < groupSizes.length) {
                            groupSize = groupSizes[groupIndex];
                        }
                        groupDigitCount = 1;
                    }
                    else {
                        groupDigitCount++;
                    }
                    result = value.charAt(vi) + result;
                    vi--;
                }
            }
            else {
                result = value.substring(0, vi + 1) + result;
            }
        }
        // Insert sign in front of the leftBuffer and result
        return sign + leftBuffer + result;
    }
    if (fmtOnly)
        // If the format doesn't specify any digits to be displayed, then just return the format we've parsed up until now.
        return sign + leftBuffer + result;
    return sign + leftBuffer + value + result;
}
function fuseNumberWithCustomFormatRight(value, format, suppressModifyValue) {
    var formatLength = format.length;
    var valueLength = value.length;
    if (suppressModifyValue) {
        var lastChar = format.charAt(formatLength - 1);
        if (!lastChar.match(NumericPlaceholderRegex))
            return {
                value: value + lastChar,
                fmtOnly: value === "",
            };
        return {
            value: value,
            fmtOnly: value === "",
        };
    }
    var result = "", fmtOnly = true, vi = 0;
    for (var fi = 0; fi < formatLength; fi++) {
        var formatChar = format.charAt(fi);
        if (vi < valueLength) {
            switch (formatChar) {
                case ZeroPlaceholder:
                case DigitPlaceholder:
                    result += value[vi++];
                    fmtOnly = false;
                    break;
                default:
                    result += formatChar;
            }
        }
        else {
            if (formatChar !== DigitPlaceholder) {
                result += formatChar;
                fmtOnly = fmtOnly && (formatChar !== ZeroPlaceholder);
            }
        }
    }
    return {
        value: result,
        fmtOnly: fmtOnly,
    };
}
function localize(value, dictionary) {
    var plus = dictionary["+"];
    var minus = dictionary["-"];
    var dot = dictionary["."];
    var comma = dictionary[","];
    if (plus === "+" && minus === "-" && dot === "." && comma === ",") {
        return value;
    }
    var count = value.length;
    var result = "";
    for (var i = 0; i < count; i++) {
        var char = value.charAt(i);
        switch (char) {
            case "+":
                result = result + plus;
                break;
            case "-":
                result = result + minus;
                break;
            case ".":
                result = result + dot;
                break;
            case ",":
                result = result + comma;
                break;
            default:
                result = result + char;
                break;
        }
    }
    return result;
}
//# sourceMappingURL=numberFormat.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.familyInfo = exports.font = exports.formattingService = exports.displayUnitSystemType = exports.dateTimeSequence = exports.displayUnitSystem = exports.dateUtils = exports.wordBreaker = exports.textUtil = exports.textMeasurementService = exports.stringExtensions = exports.valueFormatter = exports.formatting = exports.interfaces = void 0;
var formatting = __webpack_require__(/*! ./formatting */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formatting.js");
exports.formatting = formatting;
var valueFormatter = __webpack_require__(/*! ./valueFormatter */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/valueFormatter.js");
exports.valueFormatter = valueFormatter;
var stringExtensions = __webpack_require__(/*! ./stringExtensions */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/stringExtensions.js");
exports.stringExtensions = stringExtensions;
var textMeasurementService = __webpack_require__(/*! ./textMeasurementService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/textMeasurementService.js");
exports.textMeasurementService = textMeasurementService;
var interfaces = __webpack_require__(/*! ./interfaces */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/interfaces.js");
exports.interfaces = interfaces;
var font = __webpack_require__(/*! ./font/family */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/family.js");
exports.font = font;
var familyInfo = __webpack_require__(/*! ./font/familyInfo */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/familyInfo.js");
exports.familyInfo = familyInfo;
var textUtil = __webpack_require__(/*! ./textUtil */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/textUtil.js");
exports.textUtil = textUtil;
var dateUtils = __webpack_require__(/*! ./date/dateUtils */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateUtils.js");
exports.dateUtils = dateUtils;
var dateTimeSequence = __webpack_require__(/*! ./date/dateTimeSequence */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateTimeSequence.js");
exports.dateTimeSequence = dateTimeSequence;
var displayUnitSystem = __webpack_require__(/*! ./displayUnitSystem/displayUnitSystem */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystem.js");
exports.displayUnitSystem = displayUnitSystem;
var displayUnitSystemType = __webpack_require__(/*! ./displayUnitSystem/displayUnitSystemType */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystemType.js");
exports.displayUnitSystemType = displayUnitSystemType;
var formattingService = __webpack_require__(/*! ./formattingService/formattingService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingService.js");
exports.formattingService = formattingService;
var wordBreaker = __webpack_require__(/*! ./wordBreaker */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/wordBreaker.js");
exports.wordBreaker = wordBreaker;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/interfaces.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/interfaces.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=interfaces.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/storageService/ephemeralStorageService.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/storageService/ephemeralStorageService.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ephemeralStorageService = exports.EphemeralStorageService = void 0;
var EphemeralStorageService = /** @class */ (function () {
    function EphemeralStorageService(clearCacheInterval) {
        this.cache = {};
        this.clearCacheInterval = (clearCacheInterval != null)
            ? clearCacheInterval
            : EphemeralStorageService.defaultClearCacheInterval;
        this.clearCache();
    }
    EphemeralStorageService.prototype.getData = function (key) {
        return this.cache[key];
    };
    EphemeralStorageService.prototype.setData = function (key, data) {
        var _this = this;
        this.cache[key] = data;
        if (this.clearCacheTimerId == null) {
            this.clearCacheTimerId = setTimeout(function () { return _this.clearCache(); }, this.clearCacheInterval);
        }
    };
    EphemeralStorageService.prototype.clearCache = function () {
        this.cache = {};
        this.clearCacheTimerId = undefined;
    };
    EphemeralStorageService.defaultClearCacheInterval = (1000 * 60 * 60 * 24); // 1 day
    return EphemeralStorageService;
}());
exports.EphemeralStorageService = EphemeralStorageService;
exports.ephemeralStorageService = new EphemeralStorageService();
//# sourceMappingURL=ephemeralStorageService.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/stringExtensions.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/stringExtensions.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stripTagDelimiters = exports.deriveClsCompliantName = exports.stringifyAsPrettyJSON = exports.normalizeFileName = exports.escapeStringForRegex = exports.constructNameFromList = exports.findUniqueName = exports.ensureUniqueNames = exports.replaceAll = exports.repeat = exports.getLengthDifference = exports.trimWhitespace = exports.trimTrailingWhitespace = exports.isWhitespace = exports.containsWhitespace = exports.isNullOrUndefinedOrWhiteSpaceString = exports.isNullOrEmpty = exports.stringToArrayBuffer = exports.normalizeCase = exports.containsIgnoreCase = exports.contains = exports.startsWith = exports.startsWithIgnoreCase = exports.equalIgnoreCase = exports.format = exports.endsWith = void 0;
/* eslint-disable no-useless-escape */
var HtmlTagRegex = new RegExp("[<>]", "g");
/**
 * Checks if a string ends with a sub-string.
 */
function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
}
exports.endsWith = endsWith;
function format() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var s = args[0];
    if (isNullOrUndefinedOrWhiteSpaceString(s))
        return s;
    for (var i = 0; i < args.length - 1; i++) {
        var reg = new RegExp("\\{" + i + "\\}", "gm");
        s = s.replace(reg, args[i + 1]);
    }
    return s;
}
exports.format = format;
/**
 * Compares two strings for equality, ignoring case.
 */
function equalIgnoreCase(a, b) {
    return normalizeCase(a) === normalizeCase(b);
}
exports.equalIgnoreCase = equalIgnoreCase;
function startsWithIgnoreCase(a, b) {
    var normalizedSearchString = normalizeCase(b);
    return normalizeCase(a).indexOf(normalizedSearchString) === 0;
}
exports.startsWithIgnoreCase = startsWithIgnoreCase;
function startsWith(a, b) {
    return a.indexOf(b) === 0;
}
exports.startsWith = startsWith;
// Determines whether a string contains a specified substring (by case-sensitive comparison).
function contains(source, substring) {
    if (source == null)
        return false;
    return source.indexOf(substring) !== -1;
}
exports.contains = contains;
// Determines whether a string contains a specified substring (while ignoring case).
function containsIgnoreCase(source, substring) {
    if (source == null)
        return false;
    return contains(normalizeCase(source), normalizeCase(substring));
}
exports.containsIgnoreCase = containsIgnoreCase;
/**
 * Normalizes case for a string.
 * Used by equalIgnoreCase method.
 */
function normalizeCase(value) {
    return value.toUpperCase();
}
exports.normalizeCase = normalizeCase;
/**
 * Receives a string and returns an ArrayBuffer of its characters.
 * @return An ArrayBuffer of the string's characters.
 * If the string is empty or null or undefined - returns null.
 */
function stringToArrayBuffer(str) {
    if (isNullOrEmpty(str)) {
        return null;
    }
    var buffer = new ArrayBuffer(str.length);
    var bufferView = new Uint8Array(buffer);
    for (var i = 0, strLen = str.length; i < strLen; i++) {
        bufferView[i] = str.charCodeAt(i);
    }
    return bufferView;
}
exports.stringToArrayBuffer = stringToArrayBuffer;
/**
 * Is string null or empty or undefined?
 * @return True if the value is null or undefined or empty string,
 * otherwise false.
 */
function isNullOrEmpty(value) {
    return (value == null) || (value.length === 0);
}
exports.isNullOrEmpty = isNullOrEmpty;
/**
 * Returns true if the string is null, undefined, empty, or only includes white spaces.
 * @return True if the str is null, undefined, empty, or only includes white spaces,
 * otherwise false.
 */
function isNullOrUndefinedOrWhiteSpaceString(str) {
    return isNullOrEmpty(str) || isNullOrEmpty(str.trim());
}
exports.isNullOrUndefinedOrWhiteSpaceString = isNullOrUndefinedOrWhiteSpaceString;
/**
 * Returns a value indicating whether the str contains any whitespace.
 */
function containsWhitespace(str) {
    var expr = /\s/;
    return expr.test(str);
}
exports.containsWhitespace = containsWhitespace;
/**
 * Returns a value indicating whether the str is a whitespace string.
 */
function isWhitespace(str) {
    return str.trim() === "";
}
exports.isWhitespace = isWhitespace;
/**
 * Returns the string with any trailing whitespace from str removed.
 */
function trimTrailingWhitespace(str) {
    return str.replace(/\s+$/, "");
}
exports.trimTrailingWhitespace = trimTrailingWhitespace;
/**
 * Returns the string with any leading and trailing whitespace from str removed.
 */
function trimWhitespace(str) {
    return str.replace(/^\s+/, "").replace(/\s+$/, "");
}
exports.trimWhitespace = trimWhitespace;
/**
 * Returns length difference between the two provided strings.
 */
function getLengthDifference(left, right) {
    return Math.abs(left.length - right.length);
}
exports.getLengthDifference = getLengthDifference;
/**
 * Repeat char or string several times.
 * @param char The string to repeat.
 * @param count How many times to repeat the string.
 */
function repeat(char, count) {
    var result = "";
    for (var i = 0; i < count; i++) {
        result += char;
    }
    return result;
}
exports.repeat = repeat;
/**
 * Replace all the occurrences of the textToFind in the text with the textToReplace.
 * @param text The original string.
 * @param textToFind Text to find in the original string.
 * @param textToReplace New text replacing the textToFind.
 */
function replaceAll(text, textToFind, textToReplace) {
    if (!textToFind)
        return text;
    var pattern = escapeStringForRegex(textToFind);
    return text.replace(new RegExp(pattern, "gi"), textToReplace);
}
exports.replaceAll = replaceAll;
function ensureUniqueNames(names) {
    var usedNames = {};
    // Make sure we are giving fair chance for all columns to stay with their original name
    // First we fill the used names map to contain all the original unique names from the list.
    for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
        var name_1 = names_1[_i];
        usedNames[name_1] = false;
    }
    var uniqueNames = [];
    // Now we go over all names and find a unique name for each
    for (var _a = 0, names_2 = names; _a < names_2.length; _a++) {
        var name_2 = names_2[_a];
        var uniqueName = name_2;
        // If the (original) column name is already taken lets try to find another name
        if (usedNames[uniqueName]) {
            var counter = 0;
            // Find a name that is not already in the map
            while (usedNames[uniqueName] !== undefined) {
                uniqueName = name_2 + "." + (++counter);
            }
        }
        uniqueNames.push(uniqueName);
        usedNames[uniqueName] = true;
    }
    return uniqueNames;
}
exports.ensureUniqueNames = ensureUniqueNames;
/**
 * Returns a name that is not specified in the values.
 */
function findUniqueName(usedNames, baseName) {
    // Find a unique name
    var i = 0, uniqueName = baseName;
    while (usedNames[uniqueName]) {
        uniqueName = baseName + (++i);
    }
    return uniqueName;
}
exports.findUniqueName = findUniqueName;
function constructNameFromList(list, separator, maxCharacter) {
    var labels = [];
    var exceeded;
    var length = 0;
    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
        var item = list_1[_i];
        if (length + item.length > maxCharacter && labels.length > 0) {
            exceeded = true;
            break;
        }
        labels.push(item);
        length += item.length;
    }
    var separatorWithSpace = " " + separator + " ";
    var name = labels.join(separatorWithSpace);
    if (exceeded)
        name += separatorWithSpace + "...";
    return name;
}
exports.constructNameFromList = constructNameFromList;
function escapeStringForRegex(s) {
    return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1");
}
exports.escapeStringForRegex = escapeStringForRegex;
/**
 * Remove file name reserved characters <>:"/\|?* from input string.
 */
function normalizeFileName(fileName) {
    return fileName.replace(/[\<\>\:"\/\\\|\?*]/g, "");
}
exports.normalizeFileName = normalizeFileName;
/**
 * Similar to JSON.stringify, but strips away escape sequences so that the resulting
 * string is human-readable (and parsable by JSON formatting/validating tools).
 */
function stringifyAsPrettyJSON(object) {
    // let specialCharacterRemover = (key: string, value: string) => value.replace(/[^\w\s]/gi, "");
    return JSON.stringify(object /*, specialCharacterRemover*/);
}
exports.stringifyAsPrettyJSON = stringifyAsPrettyJSON;
/**
 * Derive a CLS-compliant name from a specified string.  If no allowed characters are present, return a fallback string instead.
 * (6708134): this should have a fully Unicode-aware implementation
 */
function deriveClsCompliantName(input, fallback) {
    var result = input.replace(/^[^A-Za-z]*/g, "").replace(/[ :\.\/\\\-\u00a0\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000]/g, "_").replace(/[\W]/g, "");
    return result.length > 0 ? result : fallback;
}
exports.deriveClsCompliantName = deriveClsCompliantName;
// Performs cheap sanitization by stripping away HTML tag (<>) characters.
function stripTagDelimiters(s) {
    return s.replace(HtmlTagRegex, "");
}
exports.stripTagDelimiters = stripTagDelimiters;
//# sourceMappingURL=stringExtensions.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/textMeasurementService.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/textMeasurementService.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.wordBreakOverflowingText = exports.wordBreak = exports.svgEllipsis = exports.getTailoredTextOrDefault = exports.getDivElementWidth = exports.getSvgMeasurementProperties = exports.getMeasurementProperties = exports.measureSvgTextElementWidth = exports.estimateSvgTextHeight = exports.estimateSvgTextBaselineDelta = exports.measureSvgTextHeight = exports.measureSvgTextRect = exports.measureSvgTextWidth = exports.removeSpanElement = void 0;
// powerbi.extensibility.utils.type
var powerbi_visuals_utils_typeutils_1 = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/index.js");
// powerbi.extensibility.utils.formatting
var wordBreaker = __webpack_require__(/*! ./wordBreaker */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/wordBreaker.js");
var ephemeralStorageService_1 = __webpack_require__(/*! ./storageService/ephemeralStorageService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/storageService/ephemeralStorageService.js");
var ellipsis = "...";
var spanElement;
var svgTextElement;
var canvasCtx;
var fallbackFontFamily;
/**
 * Idempotent function for adding the elements to the DOM.
 */
function ensureDOM() {
    if (spanElement) {
        return;
    }
    spanElement = document.createElement("span");
    document.body.appendChild(spanElement);
    // The style hides the svg element from the canvas, preventing canvas from scrolling down to show svg black square.
    /* eslint-disable-next-line powerbi-visuals/no-http-string */
    var svgElement = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svgElement.setAttribute("height", "0");
    svgElement.setAttribute("width", "0");
    svgElement.setAttribute("position", "absolute");
    svgElement.style.top = "0px";
    svgElement.style.left = "0px";
    svgElement.style.position = "absolute";
    svgElement.style.height = "0px";
    svgElement.style.width = "0px";
    /* eslint-disable-next-line powerbi-visuals/no-http-string */
    svgTextElement = document.createElementNS("http://www.w3.org/2000/svg", "text");
    svgElement.appendChild(svgTextElement);
    document.body.appendChild(svgElement);
    var canvasElement = document.createElement("canvas");
    canvasCtx = canvasElement.getContext("2d");
    var style = window.getComputedStyle(svgTextElement);
    if (style) {
        fallbackFontFamily = style.fontFamily;
    }
    else {
        fallbackFontFamily = "";
    }
}
/**
 * Removes spanElement from DOM.
 */
function removeSpanElement() {
    if (spanElement && spanElement.remove) {
        spanElement.remove();
    }
    spanElement = null;
}
exports.removeSpanElement = removeSpanElement;
/**
 * Measures the width of the text with the given SVG text properties.
 * @param textProperties The text properties to use for text measurement.
 * @param text The text to measure.
 */
function measureSvgTextWidth(textProperties, text) {
    ensureDOM();
    canvasCtx.font =
        (textProperties.fontStyle || "") + " " +
            (textProperties.fontVariant || "") + " " +
            (textProperties.fontWeight || "") + " " +
            textProperties.fontSize + " " +
            (textProperties.fontFamily || fallbackFontFamily);
    return canvasCtx.measureText(text || textProperties.text).width;
}
exports.measureSvgTextWidth = measureSvgTextWidth;
/**
 * Return the rect with the given SVG text properties.
 * @param textProperties The text properties to use for text measurement.
 * @param text The text to measure.
 */
function measureSvgTextRect(textProperties, text) {
    ensureDOM();
    // Removes DOM elements faster than innerHTML
    while (svgTextElement.firstChild) {
        svgTextElement.removeChild(svgTextElement.firstChild);
    }
    svgTextElement.setAttribute("style", null);
    svgTextElement.style.visibility = "hidden";
    svgTextElement.style.fontFamily = textProperties.fontFamily || fallbackFontFamily;
    svgTextElement.style.fontVariant = textProperties.fontVariant;
    svgTextElement.style.fontSize = textProperties.fontSize;
    svgTextElement.style.fontWeight = textProperties.fontWeight;
    svgTextElement.style.fontStyle = textProperties.fontStyle;
    svgTextElement.style.whiteSpace = textProperties.whiteSpace || "nowrap";
    svgTextElement.appendChild(document.createTextNode(text || textProperties.text));
    // We're expecting the browser to give a synchronous measurement here
    // We're using SVGTextElement because it works across all browsers
    return svgTextElement.getBBox();
}
exports.measureSvgTextRect = measureSvgTextRect;
/**
 * Measures the height of the text with the given SVG text properties.
 * @param textProperties The text properties to use for text measurement.
 * @param text The text to measure.
 */
function measureSvgTextHeight(textProperties, text) {
    return measureSvgTextRect(textProperties, text).height;
}
exports.measureSvgTextHeight = measureSvgTextHeight;
/**
 * Returns the text Rect with the given SVG text properties.
 * Does NOT return text width; obliterates text value
 * @param {TextProperties} textProperties - The text properties to use for text measurement
 */
function estimateSvgTextRect(textProperties) {
    var propertiesKey = textProperties.fontFamily + textProperties.fontSize;
    var rect = ephemeralStorageService_1.ephemeralStorageService.getData(propertiesKey);
    if (rect == null) {
        // To estimate we check the height of a particular character, once it is cached, subsequent
        // calls should always get the height from the cache (regardless of the text).
        var estimatedTextProperties = {
            fontFamily: textProperties.fontFamily,
            fontSize: textProperties.fontSize,
            text: "M",
        };
        rect = exports.measureSvgTextRect(estimatedTextProperties);
        // NOTE: In some cases (disconnected/hidden DOM) we may provide incorrect measurement results (zero sized bounding-box), so
        // we only store values in the cache if we are confident they are correct.
        if (rect.height > 0)
            ephemeralStorageService_1.ephemeralStorageService.setData(propertiesKey, rect);
    }
    return rect;
}
/**
 * Returns the text Rect with the given SVG text properties.
 * @param {TextProperties} textProperties - The text properties to use for text measurement
 */
function estimateSvgTextBaselineDelta(textProperties) {
    var rect = estimateSvgTextRect(textProperties);
    return rect.y + rect.height;
}
exports.estimateSvgTextBaselineDelta = estimateSvgTextBaselineDelta;
/**
 * Estimates the height of the text with the given SVG text properties.
 * @param {TextProperties} textProperties - The text properties to use for text measurement
 */
function estimateSvgTextHeight(textProperties, tightFightForNumeric) {
    if (tightFightForNumeric === void 0) { tightFightForNumeric = false; }
    var height = estimateSvgTextRect(textProperties).height;
    // replace it with new baseline calculation
    if (tightFightForNumeric)
        height *= 0.7;
    return height;
}
exports.estimateSvgTextHeight = estimateSvgTextHeight;
/**
 * Measures the width of the svgElement.
 * @param svgElement The SVGTextElement to be measured.
 */
function measureSvgTextElementWidth(svgElement) {
    return measureSvgTextWidth(getSvgMeasurementProperties(svgElement));
}
exports.measureSvgTextElementWidth = measureSvgTextElementWidth;
/**
 * Fetches the text measurement properties of the given DOM element.
 * @param element The selector for the DOM Element.
 */
function getMeasurementProperties(element) {
    var style = window.getComputedStyle(element);
    return {
        text: element.value || element.textContent,
        fontFamily: style.fontFamily,
        fontSize: style.fontSize,
        fontWeight: style.fontWeight,
        fontStyle: style.fontStyle,
        fontVariant: style.fontVariant,
        whiteSpace: style.whiteSpace
    };
}
exports.getMeasurementProperties = getMeasurementProperties;
/**
 * Fetches the text measurement properties of the given SVG text element.
 * @param element The SVGTextElement to be measured.
 */
function getSvgMeasurementProperties(element) {
    var style = window.getComputedStyle(element);
    if (style) {
        return {
            text: element.textContent,
            fontFamily: style.fontFamily,
            fontSize: style.fontSize,
            fontWeight: style.fontWeight,
            fontStyle: style.fontStyle,
            fontVariant: style.fontVariant,
            whiteSpace: style.whiteSpace
        };
    }
    else {
        return {
            text: element.textContent,
            fontFamily: "",
            fontSize: "0",
        };
    }
}
exports.getSvgMeasurementProperties = getSvgMeasurementProperties;
/**
 * Returns the width of a div element.
 * @param element The div element.
 */
function getDivElementWidth(element) {
    var style = window.getComputedStyle(element);
    if (style)
        return style.width;
    else
        return "0";
}
exports.getDivElementWidth = getDivElementWidth;
/**
 * Compares labels text size to the available size and renders ellipses when the available size is smaller.
 * @param textProperties The text properties (including text content) to use for text measurement.
 * @param maxWidth The maximum width available for rendering the text.
 */
function getTailoredTextOrDefault(textProperties, maxWidth) {
    ensureDOM();
    var strLength = textProperties.text.length;
    if (strLength === 0) {
        return textProperties.text;
    }
    var width = measureSvgTextWidth(textProperties);
    if (width < maxWidth) {
        return textProperties.text;
    }
    // Create a copy of the textProperties so we don't modify the one that's passed in.
    var copiedTextProperties = powerbi_visuals_utils_typeutils_1.prototype.inherit(textProperties);
    // Take the properties and apply them to svgTextElement
    // Then, do the binary search to figure out the substring we want
    // Set the substring on textElement argument
    var text = copiedTextProperties.text = ellipsis + copiedTextProperties.text;
    var min = 1;
    var max = text.length;
    var i = ellipsis.length;
    while (min <= max) {
        // num | 0 prefered to Math.floor(num) for performance benefits
        i = (min + max) / 2 | 0;
        copiedTextProperties.text = text.substring(0, i);
        width = measureSvgTextWidth(copiedTextProperties);
        if (maxWidth > width) {
            min = i + 1;
        }
        else if (maxWidth < width) {
            max = i - 1;
        }
        else {
            break;
        }
    }
    // Since the search algorithm almost never finds an exact match,
    // it will pick one of the closest two, which could result in a
    // value bigger with than 'maxWidth' thus we need to go back by
    // one to guarantee a smaller width than 'maxWidth'.
    copiedTextProperties.text = text.substring(0, i);
    width = measureSvgTextWidth(copiedTextProperties);
    if (width > maxWidth) {
        i--;
    }
    return text.substring(ellipsis.length, i) + ellipsis;
}
exports.getTailoredTextOrDefault = getTailoredTextOrDefault;
/**
 * Compares labels text size to the available size and renders ellipses when the available size is smaller.
 * @param textElement The SVGTextElement containing the text to render.
 * @param maxWidth The maximum width available for rendering the text.
 */
function svgEllipsis(textElement, maxWidth) {
    var properties = getSvgMeasurementProperties(textElement);
    var originalText = properties.text;
    var tailoredText = getTailoredTextOrDefault(properties, maxWidth);
    if (originalText !== tailoredText) {
        textElement.textContent = tailoredText;
    }
}
exports.svgEllipsis = svgEllipsis;
/**
 * Word break textContent of <text> SVG element into <tspan>s
 * Each tspan will be the height of a single line of text
 * @param textElement - the SVGTextElement containing the text to wrap
 * @param maxWidth - the maximum width available
 * @param maxHeight - the maximum height available (defaults to single line)
 * @param linePadding - (optional) padding to add to line height
 */
function wordBreak(textElement, maxWidth, maxHeight, linePadding) {
    if (linePadding === void 0) { linePadding = 0; }
    var properties = getSvgMeasurementProperties(textElement);
    var height = estimateSvgTextHeight(properties) + linePadding;
    var maxNumLines = Math.max(1, Math.floor(maxHeight / height));
    // Save y of parent textElement to apply as first tspan dy
    var firstDY = textElement ? textElement.getAttribute("y") : null;
    // Store and clear text content
    var labelText = textElement ? textElement.textContent : null;
    textElement.textContent = null;
    // Append a tspan for each word broken section
    var words = wordBreaker.splitByWidth(labelText, properties, measureSvgTextWidth, maxWidth, maxNumLines);
    var fragment = document.createDocumentFragment();
    for (var i = 0, ilen = words.length; i < ilen; i++) {
        var dy = i === 0 ? firstDY : height;
        properties.text = words[i];
        /* eslint-disable-next-line powerbi-visuals/no-http-string */
        var textElement_1 = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
        textElement_1.setAttribute("x", "0");
        textElement_1.setAttribute("dy", dy ? dy.toString() : null);
        textElement_1.appendChild(document.createTextNode(getTailoredTextOrDefault(properties, maxWidth)));
        fragment.appendChild(textElement_1);
    }
    textElement.appendChild(fragment);
}
exports.wordBreak = wordBreak;
/**
 * Word break textContent of span element into <span>s
 * Each span will be the height of a single line of text
 * @param textElement - the element containing the text to wrap
 * @param maxWidth - the maximum width available
 * @param maxHeight - the maximum height available (defaults to single line)
 * @param linePadding - (optional) padding to add to line height
 */
function wordBreakOverflowingText(textElement, maxWidth, maxHeight, linePadding) {
    if (linePadding === void 0) { linePadding = 0; }
    var properties = getSvgMeasurementProperties(textElement);
    var height = estimateSvgTextHeight(properties) + linePadding;
    var maxNumLines = Math.max(1, Math.floor(maxHeight / height));
    // Store and clear text content
    var labelText = textElement.textContent;
    textElement.textContent = null;
    // Append a span for each word broken section
    var words = wordBreaker.splitByWidth(labelText, properties, measureSvgTextWidth, maxWidth, maxNumLines);
    var fragment = document.createDocumentFragment();
    for (var i = 0; i < words.length; i++) {
        var span = document.createElement("span");
        span.style.overflow = "hidden";
        span.style.whiteSpace = "nowrap";
        span.style.textOverflow = "ellipsis";
        span.style.display = "block";
        span.style.width = powerbi_visuals_utils_typeutils_1.pixelConverter.toString(maxWidth);
        span.appendChild(document.createTextNode(words[i]));
        span.appendChild(document.createTextNode(getTailoredTextOrDefault(properties, maxWidth)));
        fragment.appendChild(span);
    }
    textElement.appendChild(fragment);
}
exports.wordBreakOverflowingText = wordBreakOverflowingText;
//# sourceMappingURL=textMeasurementService.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/textUtil.js":
/*!********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/textUtil.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.replaceSpaceWithNBSP = exports.removeEllipses = exports.removeBreakingSpaces = void 0;
/**
 * Contains functions/constants to aid in text manupilation.
 */
/**
 * Remove breaking spaces from given string and replace by none breaking space (&nbsp).
 */
function removeBreakingSpaces(str) {
    return str.toString().replace(new RegExp(" ", "g"), "&nbsp");
}
exports.removeBreakingSpaces = removeBreakingSpaces;
/**
 * Remove ellipses from a given string
 */
function removeEllipses(str) {
    return str.replace(/(…)|(\.\.\.)/g, "");
}
exports.removeEllipses = removeEllipses;
/**
* Replace every whitespace (0x20) with Non-Breaking Space (0xA0)
    * @param {string} txt String to replace White spaces
    * @returns Text after replcing white spaces
    */
function replaceSpaceWithNBSP(txt) {
    if (txt != null) {
        return txt.replace(/ /g, "\xA0");
    }
}
exports.replaceSpaceWithNBSP = replaceSpaceWithNBSP;
//# sourceMappingURL=textUtil.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/valueFormatter.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/valueFormatter.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.calculateExactDigitsPrecision = exports.getDisplayUnits = exports.formatListOr = exports.formatListAnd = exports.getFormatStringByColumn = exports.getFormatString = exports.createDisplayUnitSystem = exports.formatVariantMeasureValue = exports.format = exports.create = exports.checkValueInBounds = exports.createDefaultFormatter = exports.setLocaleOptions = exports.getFormatMetadata = exports.getLocalizedString = exports.DefaultDateFormat = exports.DefaultNumericFormat = exports.DefaultIntegerFormat = void 0;
var displayUnitSystem_1 = __webpack_require__(/*! ./displayUnitSystem/displayUnitSystem */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystem.js");
var displayUnitSystemType_1 = __webpack_require__(/*! ./displayUnitSystem/displayUnitSystemType */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystemType.js");
var stringExtensions = __webpack_require__(/*! ./stringExtensions */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/stringExtensions.js");
var formattingService_1 = __webpack_require__(/*! ./formattingService/formattingService */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingService.js");
var dateTimeSequence_1 = __webpack_require__(/*! ./date/dateTimeSequence */ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateTimeSequence.js");
var powerbi_visuals_utils_typeutils_1 = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/index.js");
var powerbi_visuals_utils_dataviewutils_1 = __webpack_require__(/*! powerbi-visuals-utils-dataviewutils */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/index.js");
// powerbi.extensibility.utils.type
var ValueType = powerbi_visuals_utils_typeutils_1.valueType.ValueType;
var PrimitiveType = powerbi_visuals_utils_typeutils_1.valueType.PrimitiveType;
var StringExtensions = stringExtensions;
var BeautifiedFormat = {
    "0.00 %;-0.00 %;0.00 %": "Percentage",
    "0.0 %;-0.0 %;0.0 %": "Percentage1",
};
exports.DefaultIntegerFormat = "g";
exports.DefaultNumericFormat = "#,0.00";
exports.DefaultDateFormat = "d";
var defaultLocalizedStrings = {
    "NullValue": "(Blank)",
    "BooleanTrue": "True",
    "BooleanFalse": "False",
    "NaNValue": "NaN",
    "InfinityValue": "+Infinity",
    "NegativeInfinityValue": "-Infinity",
    "RestatementComma": "{0}, {1}",
    "RestatementCompoundAnd": "{0} and {1}",
    "RestatementCompoundOr": "{0} or {1}",
    "DisplayUnitSystem_EAuto_Title": "Auto",
    "DisplayUnitSystem_E0_Title": "None",
    "DisplayUnitSystem_E3_LabelFormat": "{0}K",
    "DisplayUnitSystem_E3_Title": "Thousands",
    "DisplayUnitSystem_E6_LabelFormat": "{0}M",
    "DisplayUnitSystem_E6_Title": "Millions",
    "DisplayUnitSystem_E9_LabelFormat": "{0}bn",
    "DisplayUnitSystem_E9_Title": "Billions",
    "DisplayUnitSystem_E12_LabelFormat": "{0}T",
    "DisplayUnitSystem_E12_Title": "Trillions",
    "Percentage": "#,0.##%",
    "Percentage1": "#,0.#%",
    "TableTotalLabel": "Total",
    "Tooltip_HighlightedValueDisplayName": "Highlighted",
    "Funnel_PercentOfFirst": "Percent of first",
    "Funnel_PercentOfPrevious": "Percent of previous",
    "Funnel_PercentOfFirst_Highlight": "Percent of first (highlighted)",
    "Funnel_PercentOfPrevious_Highlight": "Percent of previous (highlighted)",
    // Geotagging strings
    "GeotaggingString_Continent": "continent",
    "GeotaggingString_Continents": "continents",
    "GeotaggingString_Country": "country",
    "GeotaggingString_Countries": "countries",
    "GeotaggingString_State": "state",
    "GeotaggingString_States": "states",
    "GeotaggingString_City": "city",
    "GeotaggingString_Cities": "cities",
    "GeotaggingString_Town": "town",
    "GeotaggingString_Towns": "towns",
    "GeotaggingString_Province": "province",
    "GeotaggingString_Provinces": "provinces",
    "GeotaggingString_County": "county",
    "GeotaggingString_Counties": "counties",
    "GeotaggingString_Village": "village",
    "GeotaggingString_Villages": "villages",
    "GeotaggingString_Post": "post",
    "GeotaggingString_Zip": "zip",
    "GeotaggingString_Code": "code",
    "GeotaggingString_Place": "place",
    "GeotaggingString_Places": "places",
    "GeotaggingString_Address": "address",
    "GeotaggingString_Addresses": "addresses",
    "GeotaggingString_Street": "street",
    "GeotaggingString_Streets": "streets",
    "GeotaggingString_Longitude": "longitude",
    "GeotaggingString_Longitude_Short": "lon",
    "GeotaggingString_Longitude_Short2": "long",
    "GeotaggingString_Latitude": "latitude",
    "GeotaggingString_Latitude_Short": "lat",
    "GeotaggingString_PostalCode": "postal code",
    "GeotaggingString_PostalCodes": "postal codes",
    "GeotaggingString_ZipCode": "zip code",
    "GeotaggingString_ZipCodes": "zip codes",
    "GeotaggingString_Territory": "territory",
    "GeotaggingString_Territories": "territories",
};
function beautify(format) {
    var key = BeautifiedFormat[format];
    if (key)
        return defaultLocalizedStrings[key] || format;
    return format;
}
function describeUnit(exponent) {
    var exponentLookup = (exponent === -1) ? "Auto" : exponent.toString();
    var title = defaultLocalizedStrings["DisplayUnitSystem_E" + exponentLookup + "_Title"];
    var format = (exponent <= 0) ? "{0}" : defaultLocalizedStrings["DisplayUnitSystem_E" + exponentLookup + "_LabelFormat"];
    if (title || format)
        return { title: title, format: format };
}
function getLocalizedString(stringId) {
    return defaultLocalizedStrings[stringId];
}
exports.getLocalizedString = getLocalizedString;
// NOTE: Define default locale options, but these can be overriden by setLocaleOptions.
var localizationOptions = {
    nullValue: defaultLocalizedStrings["NullValue"],
    trueValue: defaultLocalizedStrings["BooleanTrue"],
    falseValue: defaultLocalizedStrings["BooleanFalse"],
    NaN: defaultLocalizedStrings["NaNValue"],
    infinity: defaultLocalizedStrings["InfinityValue"],
    negativeInfinity: defaultLocalizedStrings["NegativeInfinityValue"],
    beautify: function (format) { return beautify(format); },
    describe: function (exponent) { return describeUnit(exponent); },
    restatementComma: defaultLocalizedStrings["RestatementComma"],
    restatementCompoundAnd: defaultLocalizedStrings["RestatementCompoundAnd"],
    restatementCompoundOr: defaultLocalizedStrings["RestatementCompoundOr"],
};
var MaxScaledDecimalPlaces = 2;
var MaxValueForDisplayUnitRounding = 1000;
var MinIntegerValueForDisplayUnits = 10000;
var MinPrecisionForDisplayUnits = 2;
var DateTimeMetadataColumn = {
    displayName: "",
    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.DateTime),
};
function getFormatMetadata(format) {
    return formattingService_1.numberFormat.getCustomFormatMetadata(format);
}
exports.getFormatMetadata = getFormatMetadata;
function setLocaleOptions(options) {
    localizationOptions = options;
    displayUnitSystem_1.DefaultDisplayUnitSystem.RESET();
    displayUnitSystem_1.WholeUnitsDisplayUnitSystem.RESET();
}
exports.setLocaleOptions = setLocaleOptions;
function createDefaultFormatter(formatString, allowFormatBeautification, cultureSelector) {
    var formatBeautified = allowFormatBeautification
        ? localizationOptions.beautify(formatString)
        : formatString;
    return {
        format: function (value) {
            if (value == null) {
                return localizationOptions.nullValue;
            }
            return formatCore({
                value: value,
                cultureSelector: cultureSelector,
                format: formatBeautified
            });
        }
    };
}
exports.createDefaultFormatter = createDefaultFormatter;
/**
 * Check that provided value is in provided bounds. If not -- replace it by minimal or maximal replacement value
 * @param targetNum checking value
 * @param min minimal bound of value
 * @param max maximal bound of value
 * @param lessMinReplacement value that will be returned if checking value is lesser than minimal
 * @param greaterMaxReplacement value that will be returned if checking value is greater than maximal
 */
function checkValueInBounds(targetNum, min, max, lessMinReplacement, greaterMaxReplacement) {
    if (lessMinReplacement === void 0) { lessMinReplacement = min; }
    if (greaterMaxReplacement === void 0) { greaterMaxReplacement = max; }
    if (max !== undefined && max !== null) {
        targetNum = targetNum <= max ? targetNum : greaterMaxReplacement;
    }
    if (min !== undefined && min !== null) {
        targetNum = targetNum > min ? targetNum : lessMinReplacement;
    }
    return targetNum;
}
exports.checkValueInBounds = checkValueInBounds;
// Creates an IValueFormatter to be used for a range of values.
function create(options) {
    var format = options.allowFormatBeautification
        ? localizationOptions.beautify(options.format)
        : options.format;
    var cultureSelector = options.cultureSelector;
    if (shouldUseNumericDisplayUnits(options)) {
        var displayUnitSystem_2 = createDisplayUnitSystem(options.displayUnitSystemType);
        var singleValueFormattingMode_1 = !!options.formatSingleValues;
        displayUnitSystem_2.update(Math.max(Math.abs(options.value || 0), Math.abs(options.value2 || 0)));
        var forcePrecision_1 = options.precision != null;
        var decimals_1;
        if (forcePrecision_1)
            decimals_1 = -options.precision;
        else if (displayUnitSystem_2.displayUnit && displayUnitSystem_2.displayUnit.value > 1)
            decimals_1 = -MaxScaledDecimalPlaces;
        return {
            format: function (value) {
                var formattedValue = getStringFormat(value, true /*nullsAreBlank*/);
                if (!StringExtensions.isNullOrUndefinedOrWhiteSpaceString(formattedValue)) {
                    return formattedValue;
                }
                // Round to Double.DEFAULT_PRECISION
                if (value
                    && !displayUnitSystem_2.isScalingUnit()
                    && Math.abs(value) < MaxValueForDisplayUnitRounding
                    && !forcePrecision_1) {
                    value = powerbi_visuals_utils_typeutils_1.double.roundToPrecision(value);
                }
                if (singleValueFormattingMode_1) {
                    return displayUnitSystem_2.formatSingleValue(value, format, decimals_1, forcePrecision_1, cultureSelector);
                }
                else {
                    return displayUnitSystem_2.format(value, format, decimals_1, forcePrecision_1, cultureSelector);
                }
            },
            displayUnit: displayUnitSystem_2.displayUnit,
            options: options
        };
    }
    if (shouldUseDateUnits(options.value, options.value2, options.tickCount)) {
        var unit_1 = dateTimeSequence_1.DateTimeSequence.GET_INTERVAL_UNIT(options.value /* minDate */, options.value2 /* maxDate */, options.tickCount);
        return {
            format: function (value) {
                if (value == null) {
                    return localizationOptions.nullValue;
                }
                var formatString = formattingService_1.formattingService.dateFormatString(unit_1);
                return formatCore({
                    value: value,
                    cultureSelector: cultureSelector,
                    format: formatString,
                });
            },
            options: options
        };
    }
    return createDefaultFormatter(format, false, cultureSelector);
}
exports.create = create;
function format(value, format, allowFormatBeautification, cultureSelector) {
    if (value == null) {
        return localizationOptions.nullValue;
    }
    var formatString = allowFormatBeautification
        ? localizationOptions.beautify(format)
        : format;
    return formatCore({
        value: value,
        cultureSelector: cultureSelector,
        format: formatString
    });
}
exports.format = format;
/**
 * Value formatting function to handle variant measures.
 * For a Date/Time value within a non-date/time field, it's formatted with the default date/time formatString instead of as a number
 * @param {any} value Value to be formatted
 * @param {DataViewMetadataColumn} column Field which the value belongs to
 * @param {DataViewObjectPropertyIdentifier} formatStringProp formatString Property ID
 * @param {boolean} nullsAreBlank? Whether to show "(Blank)" instead of empty string for null values
 * @returns Formatted value
 */
function formatVariantMeasureValue(value, column, formatStringProp, nullsAreBlank, cultureSelector) {
    // If column type is not datetime, but the value is of time datetime,
    // then use the default date format string
    if (!(column && column.type && column.type.dateTime) && value instanceof Date) {
        var valueFormat = getFormatString(DateTimeMetadataColumn, null, false);
        return formatCore({
            value: value,
            nullsAreBlank: nullsAreBlank,
            cultureSelector: cultureSelector,
            format: valueFormat
        });
    }
    else {
        var valueFormat = getFormatString(column, formatStringProp);
        return formatCore({
            value: value,
            nullsAreBlank: nullsAreBlank,
            cultureSelector: cultureSelector,
            format: valueFormat
        });
    }
}
exports.formatVariantMeasureValue = formatVariantMeasureValue;
function createDisplayUnitSystem(displayUnitSystemType) {
    if (displayUnitSystemType == null)
        return new displayUnitSystem_1.DefaultDisplayUnitSystem(localizationOptions.describe);
    switch (displayUnitSystemType) {
        case displayUnitSystemType_1.DisplayUnitSystemType.Default:
            return new displayUnitSystem_1.DefaultDisplayUnitSystem(localizationOptions.describe);
        case displayUnitSystemType_1.DisplayUnitSystemType.WholeUnits:
            return new displayUnitSystem_1.WholeUnitsDisplayUnitSystem(localizationOptions.describe);
        case displayUnitSystemType_1.DisplayUnitSystemType.Verbose:
            return new displayUnitSystem_1.NoDisplayUnitSystem();
        case displayUnitSystemType_1.DisplayUnitSystemType.DataLabels:
            return new displayUnitSystem_1.DataLabelsDisplayUnitSystem(localizationOptions.describe);
        default:
            return new displayUnitSystem_1.DefaultDisplayUnitSystem(localizationOptions.describe);
    }
}
exports.createDisplayUnitSystem = createDisplayUnitSystem;
function shouldUseNumericDisplayUnits(options) {
    var value = options.value;
    var value2 = options.value2;
    var format = options.format;
    // For singleValue visuals like card, gauge we don't want to roundoff data to the nearest thousands so format the whole number / integers below 10K to not use display units
    if (options.formatSingleValues && format) {
        if (Math.abs(value) < MinIntegerValueForDisplayUnits) {
            var isCustomFormat = !formattingService_1.numberFormat.isStandardFormat(format);
            if (isCustomFormat) {
                var precision = formattingService_1.numberFormat.getCustomFormatMetadata(format, true /*calculatePrecision*/).precision;
                if (precision < MinPrecisionForDisplayUnits)
                    return false;
            }
            else if (powerbi_visuals_utils_typeutils_1.double.isInteger(value))
                return false;
        }
    }
    if ((typeof value === "number") || (typeof value2 === "number")) {
        return true;
    }
}
function shouldUseDateUnits(value, value2, tickCount) {
    // must check both value and value2 because we'll need to get an interval for date units
    return (value instanceof Date) && (value2 instanceof Date) && (tickCount !== undefined && tickCount !== null);
}
/*
    * Get the column format. Order of precendence is:
    *  1. Column format
    *  2. Default PowerView policy for column type
    */
function getFormatString(column, formatStringProperty, suppressTypeFallback) {
    if (column) {
        if (formatStringProperty) {
            var propertyValue = powerbi_visuals_utils_dataviewutils_1.dataViewObjects.getValue(column.objects, formatStringProperty);
            if (propertyValue)
                return propertyValue;
        }
        if (!suppressTypeFallback) {
            var columnType = column.type;
            if (columnType) {
                if (columnType.dateTime)
                    return exports.DefaultDateFormat;
                if (columnType.integer) {
                    if (columnType.temporal && columnType.temporal.year)
                        return "0";
                    return exports.DefaultIntegerFormat;
                }
                if (columnType.numeric)
                    return exports.DefaultNumericFormat;
            }
        }
    }
}
exports.getFormatString = getFormatString;
function getFormatStringByColumn(column, suppressTypeFallback) {
    if (column) {
        if (column.format) {
            return column.format;
        }
        if (!suppressTypeFallback) {
            var columnType = column.type;
            if (columnType) {
                if (columnType.dateTime) {
                    return exports.DefaultDateFormat;
                }
                if (columnType.integer) {
                    if (columnType.temporal && columnType.temporal.year) {
                        return "0";
                    }
                    return exports.DefaultIntegerFormat;
                }
                if (columnType.numeric) {
                    return exports.DefaultNumericFormat;
                }
            }
        }
    }
    return undefined;
}
exports.getFormatStringByColumn = getFormatStringByColumn;
function formatListCompound(strings, conjunction) {
    var result;
    if (!strings) {
        return null;
    }
    var length = strings.length;
    if (length > 0) {
        result = strings[0];
        var lastIndex = length - 1;
        for (var i = 1, len = lastIndex; i < len; i++) {
            var value = strings[i];
            result = StringExtensions.format(localizationOptions.restatementComma, result, value);
        }
        if (length > 1) {
            var value = strings[lastIndex];
            result = StringExtensions.format(conjunction, result, value);
        }
    }
    else {
        result = null;
    }
    return result;
}
// The returned string will look like 'A, B, ..., and C'
function formatListAnd(strings) {
    return formatListCompound(strings, localizationOptions.restatementCompoundAnd);
}
exports.formatListAnd = formatListAnd;
// The returned string will look like 'A, B, ..., or C'
function formatListOr(strings) {
    return formatListCompound(strings, localizationOptions.restatementCompoundOr);
}
exports.formatListOr = formatListOr;
function formatCore(options) {
    var value = options.value, format = options.format, nullsAreBlank = options.nullsAreBlank, cultureSelector = options.cultureSelector;
    var formattedValue = getStringFormat(value, nullsAreBlank ? nullsAreBlank : false);
    if (!StringExtensions.isNullOrUndefinedOrWhiteSpaceString(formattedValue)) {
        return formattedValue;
    }
    return formattingService_1.formattingService.formatValue(value, format, cultureSelector);
}
function getStringFormat(value, nullsAreBlank) {
    if (value == null && nullsAreBlank) {
        return localizationOptions.nullValue;
    }
    if (value === true) {
        return localizationOptions.trueValue;
    }
    if (value === false) {
        return localizationOptions.falseValue;
    }
    if (typeof value === "number" && isNaN(value)) {
        return localizationOptions.NaN;
    }
    if (value === Number.NEGATIVE_INFINITY) {
        return localizationOptions.negativeInfinity;
    }
    if (value === Number.POSITIVE_INFINITY) {
        return localizationOptions.infinity;
    }
    return "";
}
function getDisplayUnits(displayUnitSystemType) {
    var displayUnitSystem = createDisplayUnitSystem(displayUnitSystemType);
    return displayUnitSystem.units;
}
exports.getDisplayUnits = getDisplayUnits;
/**
 * Precision calculating function to build values showing minimum 3 digits as 3.56 or 25.7 or 754 or 2345
 * @param {number} inputValue Value to be basement for precision calculation
 * @param {string} format Format that will be used for value formatting (to detect percentage values)
 * @param {number} displayUnits Dispaly units that will be used for value formatting (to correctly calculate precision)
 * @param {number} digitsNum Number of visible digits, including digits before separator
 * @returns calculated precision
 */
function calculateExactDigitsPrecision(inputValue, format, displayUnits, digitsNum) {
    if (!inputValue && inputValue !== 0) {
        return 0;
    }
    var precision = 0;
    var inPercent = format && format.indexOf("%") !== -1;
    var value = inPercent ? inputValue * 100 : inputValue;
    value = displayUnits > 0 ? value / displayUnits : value;
    var leftPartLength = parseInt(value).toString().length;
    if ((inPercent || displayUnits > 0) && leftPartLength >= digitsNum) {
        return 0;
    }
    // Auto units, calculate final value 
    if (displayUnits === 0) {
        var unitsDegree = Math.floor(leftPartLength / 3);
        unitsDegree = leftPartLength % 3 === 0 ? unitsDegree - 1 : unitsDegree;
        var divider = Math.pow(1000, unitsDegree);
        if (divider > 0) {
            value = value / divider;
        }
    }
    leftPartLength = parseInt(value).toString().length;
    var restOfDiv = leftPartLength % digitsNum;
    if (restOfDiv === 0) {
        precision = 0;
    }
    else {
        precision = digitsNum - restOfDiv;
    }
    return precision;
}
exports.calculateExactDigitsPrecision = calculateExactDigitsPrecision;
//# sourceMappingURL=valueFormatter.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/lib/src/wordBreaker.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/lib/src/wordBreaker.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.splitByWidth = exports.getMaxWordWidth = exports.wordCount = exports.hasBreakers = exports.find = void 0;
var SPACE = " ";
var BREAKERS_REGEX = /[\s\n]+/g;
function search(index, content, backward) {
    if (backward) {
        for (var i = index - 1; i > -1; i--) {
            if (hasBreakers(content[i]))
                return i + 1;
        }
    }
    else {
        for (var i = index, ilen = content.length; i < ilen; i++) {
            if (hasBreakers(content[i]))
                return i;
        }
    }
    return backward ? 0 : content.length;
}
/**
 * Find the word nearest the cursor specified within content
 * @param index - point within content to search forward/backward from
 * @param content - string to search
*/
function find(index, content) {
    var result = { start: 0, end: 0 };
    if (content.length === 0) {
        return result;
    }
    result.start = search(index, content, true);
    result.end = search(index, content, false);
    return result;
}
exports.find = find;
/**
 * Test for presence of breakers within content
 * @param content - string to test
*/
function hasBreakers(content) {
    BREAKERS_REGEX.lastIndex = 0;
    return BREAKERS_REGEX.test(content);
}
exports.hasBreakers = hasBreakers;
/**
 * Count the number of pieces when broken by BREAKERS_REGEX
 * ~2.7x faster than WordBreaker.split(content).length
 * @param content - string to break and count
*/
function wordCount(content) {
    var count = 1;
    BREAKERS_REGEX.lastIndex = 0;
    BREAKERS_REGEX.exec(content);
    while (BREAKERS_REGEX.lastIndex !== 0) {
        count++;
        BREAKERS_REGEX.exec(content);
    }
    return count;
}
exports.wordCount = wordCount;
function getMaxWordWidth(content, textWidthMeasurer, properties) {
    var words = split(content);
    var maxWidth = 0;
    for (var _i = 0, words_1 = words; _i < words_1.length; _i++) {
        var w = words_1[_i];
        properties.text = w;
        maxWidth = Math.max(maxWidth, textWidthMeasurer(properties));
    }
    return maxWidth;
}
exports.getMaxWordWidth = getMaxWordWidth;
function split(content) {
    return content.split(BREAKERS_REGEX);
}
function getWidth(content, properties, textWidthMeasurer) {
    properties.text = content;
    return textWidthMeasurer(properties);
}
function truncate(content, properties, truncator, maxWidth) {
    properties.text = content;
    return truncator(properties, maxWidth);
}
/**
 * Split content by breakers (words) and greedy fit as many words
 * into each index in the result based on max width and number of lines
 * e.g. Each index in result corresponds to a line of content
 *      when used by AxisHelper.LabelLayoutStrategy.wordBreak
 * @param content - string to split
 * @param properties - text properties to be used by @param:textWidthMeasurer
 * @param textWidthMeasurer - function to calculate width of given text content
 * @param maxWidth - maximum allowed width of text content in each result
 * @param maxNumLines - maximum number of results we will allow, valid values must be greater than 0
 * @param truncator - (optional) if specified, used as a function to truncate content to a given width
*/
function splitByWidth(content, properties, textWidthMeasurer, maxWidth, maxNumLines, truncator) {
    // Default truncator returns string as-is
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    truncator = truncator ? truncator : function (properties, maxWidth) { return properties.text; };
    var result = [];
    var words = split(content);
    var usedWidth = 0;
    var wordsInLine = [];
    for (var _i = 0, words_2 = words; _i < words_2.length; _i++) {
        var word = words_2[_i];
        // Last line? Just add whatever is left
        if ((maxNumLines > 0) && (result.length >= maxNumLines - 1)) {
            wordsInLine.push(word);
            continue;
        }
        // Determine width if we add this word
        // Account for SPACE we will add when joining...
        var wordWidth = wordsInLine.length === 0
            ? getWidth(word, properties, textWidthMeasurer)
            : getWidth(SPACE + word, properties, textWidthMeasurer);
        // If width would exceed max width,
        // then push used words and start new split result
        if (usedWidth + wordWidth > maxWidth) {
            // Word alone exceeds max width, just add it.
            if (wordsInLine.length === 0) {
                result.push(truncate(word, properties, truncator, maxWidth));
                usedWidth = 0;
                wordsInLine = [];
                continue;
            }
            result.push(truncate(wordsInLine.join(SPACE), properties, truncator, maxWidth));
            usedWidth = 0;
            wordsInLine = [];
        }
        // ...otherwise, add word and continue
        wordsInLine.push(word);
        usedWidth += wordWidth;
    }
    // Push remaining words onto result (if any)
    if (wordsInLine && wordsInLine.length) {
        result.push(truncate(wordsInLine.join(SPACE), properties, truncator, maxWidth));
    }
    return result;
}
exports.splitByWidth = splitByWidth;
//# sourceMappingURL=wordBreaker.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/converterHelper.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/converterHelper.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "categoryIsAlsoSeriesRole": () => (/* binding */ categoryIsAlsoSeriesRole),
/* harmony export */   "getMiscellaneousTypeDescriptor": () => (/* binding */ getMiscellaneousTypeDescriptor),
/* harmony export */   "getSeriesName": () => (/* binding */ getSeriesName),
/* harmony export */   "hasImageUrlColumn": () => (/* binding */ hasImageUrlColumn),
/* harmony export */   "isImageUrlColumn": () => (/* binding */ isImageUrlColumn),
/* harmony export */   "isWebUrlColumn": () => (/* binding */ isWebUrlColumn)
/* harmony export */ });
/* harmony import */ var _dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataRoleHelper */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js");
// powerbi.extensibility.utils.dataview

function categoryIsAlsoSeriesRole(dataView, seriesRoleName, categoryRoleName) {
    if (dataView.categories && dataView.categories.length > 0) {
        // Need to pivot data if our category soure is a series role
        const category = dataView.categories[0];
        return category.source &&
            _dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.hasRole(category.source, seriesRoleName) &&
            _dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.hasRole(category.source, categoryRoleName);
    }
    return false;
}
function getSeriesName(source) {
    return (source.groupName !== undefined)
        ? source.groupName
        : source.queryName;
}
function isImageUrlColumn(column) {
    const misc = getMiscellaneousTypeDescriptor(column);
    return misc != null && misc.imageUrl === true;
}
function isWebUrlColumn(column) {
    const misc = getMiscellaneousTypeDescriptor(column);
    return misc != null && misc.webUrl === true;
}
function getMiscellaneousTypeDescriptor(column) {
    return column
        && column.type
        && column.type.misc;
}
function hasImageUrlColumn(dataView) {
    if (!dataView || !dataView.metadata || !dataView.metadata.columns || !dataView.metadata.columns.length) {
        return false;
    }
    return dataView.metadata.columns.some((column) => isImageUrlColumn(column) === true);
}
//# sourceMappingURL=converterHelper.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCategoryIndexOfRole": () => (/* binding */ getCategoryIndexOfRole),
/* harmony export */   "getMeasureIndexOfRole": () => (/* binding */ getMeasureIndexOfRole),
/* harmony export */   "hasRole": () => (/* binding */ hasRole),
/* harmony export */   "hasRoleInDataView": () => (/* binding */ hasRoleInDataView),
/* harmony export */   "hasRoleInValueColumn": () => (/* binding */ hasRoleInValueColumn)
/* harmony export */ });
function getMeasureIndexOfRole(grouped, roleName) {
    if (!grouped || !grouped.length) {
        return -1;
    }
    const firstGroup = grouped[0];
    if (firstGroup.values && firstGroup.values.length > 0) {
        for (let i = 0, len = firstGroup.values.length; i < len; ++i) {
            const value = firstGroup.values[i];
            if (value && value.source) {
                if (hasRole(value.source, roleName)) {
                    return i;
                }
            }
        }
    }
    return -1;
}
function getCategoryIndexOfRole(categories, roleName) {
    if (categories && categories.length) {
        for (let i = 0, ilen = categories.length; i < ilen; i++) {
            if (hasRole(categories[i].source, roleName)) {
                return i;
            }
        }
    }
    return -1;
}
function hasRole(column, name) {
    const roles = column.roles;
    return roles && roles[name];
}
function hasRoleInDataView(dataView, name) {
    return dataView != null
        && dataView.metadata != null
        && dataView.metadata.columns
        && dataView.metadata.columns.some((c) => c.roles && c.roles[name] !== undefined); // any is an alias of some
}
function hasRoleInValueColumn(valueColumn, name) {
    return valueColumn
        && valueColumn.source
        && valueColumn.source.roles
        && (valueColumn.source.roles[name] === true);
}
//# sourceMappingURL=dataRoleHelper.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFillColorByPropertyName": () => (/* binding */ getFillColorByPropertyName),
/* harmony export */   "getValue": () => (/* binding */ getValue)
/* harmony export */ });
function getValue(object, propertyName, defaultValue) {
    if (!object) {
        return defaultValue;
    }
    const propertyValue = object[propertyName];
    if (propertyValue === undefined) {
        return defaultValue;
    }
    return propertyValue;
}
/** Gets the solid color from a fill property using only a propertyName */
function getFillColorByPropertyName(object, propertyName, defaultColor) {
    const value = getValue(object, propertyName);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
//# sourceMappingURL=dataViewObject.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCommonValue": () => (/* binding */ getCommonValue),
/* harmony export */   "getFillColor": () => (/* binding */ getFillColor),
/* harmony export */   "getObject": () => (/* binding */ getObject),
/* harmony export */   "getValue": () => (/* binding */ getValue)
/* harmony export */ });
/* harmony import */ var _dataViewObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataViewObject */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js");

/** Gets the value of the given object/property pair. */
function getValue(objects, propertyId, defaultValue) {
    if (!objects) {
        return defaultValue;
    }
    return _dataViewObject__WEBPACK_IMPORTED_MODULE_0__.getValue(objects[propertyId.objectName], propertyId.propertyName, defaultValue);
}
/** Gets an object from objects. */
function getObject(objects, objectName, defaultValue) {
    if (objects && objects[objectName]) {
        return objects[objectName];
    }
    return defaultValue;
}
/** Gets the solid color from a fill property. */
function getFillColor(objects, propertyId, defaultColor) {
    const value = getValue(objects, propertyId);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
function getCommonValue(objects, propertyId, defaultValue) {
    const value = getValue(objects, propertyId, defaultValue);
    if (value && value.solid) {
        return value.solid.color;
    }
    if (value === undefined
        || value === null
        || (typeof value === "object" && !value.solid)) {
        return defaultValue;
    }
    return value;
}
//# sourceMappingURL=dataViewObjects.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataViewObjectsParser": () => (/* binding */ DataViewObjectsParser)
/* harmony export */ });
/* harmony import */ var _dataViewObjects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataViewObjects */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js");

class DataViewObjectsParser {
    static getDefault() {
        return new this();
    }
    static createPropertyIdentifier(objectName, propertyName) {
        return {
            objectName,
            propertyName
        };
    }
    static parse(dataView) {
        const dataViewObjectParser = this.getDefault();
        if (!dataView || !dataView.metadata || !dataView.metadata.objects) {
            return dataViewObjectParser;
        }
        const properties = dataViewObjectParser.getProperties();
        for (const objectName in properties) {
            for (const propertyName in properties[objectName]) {
                const defaultValue = dataViewObjectParser[objectName][propertyName];
                dataViewObjectParser[objectName][propertyName] = _dataViewObjects__WEBPACK_IMPORTED_MODULE_0__.getCommonValue(dataView.metadata.objects, properties[objectName][propertyName], defaultValue);
            }
        }
        return dataViewObjectParser;
    }
    static isPropertyEnumerable(propertyName) {
        return !DataViewObjectsParser.InnumerablePropertyPrefix.test(propertyName);
    }
    static enumerateObjectInstances(dataViewObjectParser, options) {
        const dataViewProperties = dataViewObjectParser && dataViewObjectParser[options.objectName];
        if (!dataViewProperties) {
            return [];
        }
        const instance = {
            objectName: options.objectName,
            selector: null,
            properties: {}
        };
        for (const key in dataViewProperties) {
            if (Object.prototype.hasOwnProperty.call(dataViewProperties, key)) {
                instance.properties[key] = dataViewProperties[key];
            }
        }
        return {
            instances: [instance]
        };
    }
    getProperties() {
        const properties = {}, objectNames = Object.keys(this);
        objectNames.forEach((objectName) => {
            if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {
                const propertyNames = Object.keys(this[objectName]);
                properties[objectName] = {};
                propertyNames.forEach((propertyName) => {
                    if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {
                        properties[objectName][propertyName] =
                            DataViewObjectsParser.createPropertyIdentifier(objectName, propertyName);
                    }
                });
            }
        });
        return properties;
    }
}
DataViewObjectsParser.InnumerablePropertyPrefix = /^_/;
//# sourceMappingURL=dataViewObjectsParser.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewTransform.js":
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewTransform.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createValueColumns": () => (/* binding */ createValueColumns),
/* harmony export */   "groupValues": () => (/* binding */ groupValues),
/* harmony export */   "setGrouped": () => (/* binding */ setGrouped)
/* harmony export */ });
// TODO: refactor & focus DataViewTransform into a service with well-defined dependencies.
// TODO: refactor this, setGrouped, and groupValues to a test helper to stop using it in the product
function createValueColumns(values = [], valueIdentityFields, source) {
    const result = values;
    setGrouped(result);
    if (valueIdentityFields) {
        result.identityFields = valueIdentityFields;
    }
    if (source) {
        result.source = source;
    }
    return result;
}
function setGrouped(values, groupedResult) {
    values.grouped = groupedResult
        ? () => groupedResult
        : () => groupValues(values);
}
/** Group together the values with a common identity. */
function groupValues(values) {
    const groups = [];
    let currentGroup;
    for (let i = 0, len = values.length; i < len; i++) {
        const value = values[i];
        if (!currentGroup || currentGroup.identity !== value.identity) {
            currentGroup = {
                values: []
            };
            if (value.identity) {
                currentGroup.identity = value.identity;
                const source = value.source;
                // allow null, which will be formatted as (Blank).
                if (source.groupName !== undefined) {
                    currentGroup.name = source.groupName;
                }
                else if (source.displayName) {
                    currentGroup.name = source.displayName;
                }
            }
            groups.push(currentGroup);
        }
        currentGroup.values.push(value);
    }
    return groups;
}
//# sourceMappingURL=dataViewTransform.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewWildcard.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewWildcard.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDataViewWildcardSelector": () => (/* binding */ createDataViewWildcardSelector)
/* harmony export */ });
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
function createDataViewWildcardSelector(dataViewWildcardMatchingOption) {
    if (dataViewWildcardMatchingOption == null) {
        dataViewWildcardMatchingOption = 0 /* DataViewWildcardMatchingOption.InstancesAndTotals */;
    }
    const selector = {
        data: [
            {
                dataViewWildcard: {
                    matchingOption: dataViewWildcardMatchingOption
                }
            }
        ]
    };
    return selector;
}
//# sourceMappingURL=dataViewWildcard.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/index.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/index.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "converterHelper": () => (/* reexport module object */ _converterHelper__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   "dataRoleHelper": () => (/* reexport module object */ _dataRoleHelper__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   "dataViewObject": () => (/* reexport module object */ _dataViewObject__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   "dataViewObjects": () => (/* reexport module object */ _dataViewObjects__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   "dataViewObjectsParser": () => (/* reexport module object */ _dataViewObjectsParser__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   "dataViewTransform": () => (/* reexport module object */ _dataViewTransform__WEBPACK_IMPORTED_MODULE_5__),
/* harmony export */   "dataViewWildcard": () => (/* reexport module object */ _dataViewWildcard__WEBPACK_IMPORTED_MODULE_6__),
/* harmony export */   "validationHelper": () => (/* reexport module object */ _validationHelper__WEBPACK_IMPORTED_MODULE_7__)
/* harmony export */ });
/* harmony import */ var _converterHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./converterHelper */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/converterHelper.js");
/* harmony import */ var _dataRoleHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataRoleHelper */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js");
/* harmony import */ var _dataViewObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataViewObject */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js");
/* harmony import */ var _dataViewObjects__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dataViewObjects */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js");
/* harmony import */ var _dataViewObjectsParser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dataViewObjectsParser */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser.js");
/* harmony import */ var _dataViewTransform__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dataViewTransform */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewTransform.js");
/* harmony import */ var _dataViewWildcard__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dataViewWildcard */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewWildcard.js");
/* harmony import */ var _validationHelper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./validationHelper */ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/validationHelper.js");









//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/validationHelper.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-formattingutils/node_modules/powerbi-visuals-utils-dataviewutils/lib/validationHelper.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isFileImage": () => (/* binding */ isFileImage),
/* harmony export */   "isImageUrlAllowed": () => (/* binding */ isImageUrlAllowed)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
function isImageUrlAllowed(url) {
    // Excludes all URLs that don't contain .gif .jpg .png or .svg extensions and don't start from "http(s)://".
    // Base64 incoded images are allowable too.
    return (/^https?:\/\/.+\.(gif|jpg|png|svg)$/i).test(url) || (/^data:image\/(gif|jpeg|png|svg\+xml);base64,/i).test(url);
}
function isFileImage(url, imageCheckResultCallBack) {
    const request = new XMLHttpRequest();
    request.onreadystatechange = function () {
        if (request.readyState !== this.HEADERS_RECEIVED) {
            return;
        }
        const contentType = request.getResponseHeader("Content-Type"), supportedTypes = ["image/png", "image/jpeg", "image/gif", "image/svg+xml"];
        if (supportedTypes.indexOf(contentType) > -1) {
            return imageCheckResultCallBack(true, contentType);
        }
        return imageCheckResultCallBack(false, contentType);
    };
    request.open("HEAD", url, true);
    request.send();
}
//# sourceMappingURL=validationHelper.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivityBaseService.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivityBaseService.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FilterAction": () => (/* binding */ FilterAction),
/* harmony export */   "InteractivityBaseService": () => (/* binding */ InteractivityBaseService),
/* harmony export */   "appendClearCatcher": () => (/* binding */ appendClearCatcher),
/* harmony export */   "dataHasSelection": () => (/* binding */ dataHasSelection)
/* harmony export */ });
var FilterAction;
(function (FilterAction) {
    FilterAction[FilterAction["merge"] = 0] = "merge";
    FilterAction[FilterAction["remove"] = 1] = "remove";
})(FilterAction || (FilterAction = {}));
/**
* Creates a clear an svg rect to catch clear clicks.
*/
function appendClearCatcher(selection) {
    return selection
        .append("rect")
        .classed("clearCatcher", true)
        .attr("width", "100%")
        .attr("height", "100%");
}
function dataHasSelection(data) {
    for (let i = 0, ilen = data.length; i < ilen; i++) {
        if (data[i].selected) {
            return true;
        }
    }
    return false;
}
class InteractivityBaseService {
    constructor() {
        // References
        /* eslint-disable @typescript-eslint/no-empty-function */
        this.renderSelectionInVisual = () => { };
        this.renderSelectionInLegend = () => { };
        this.renderSelectionInLabels = () => { };
        /* eslint-enable @typescript-eslint/no-empty-function */
        // Selection state
        this.isInvertedSelectionMode = false;
    }
    // IInteractivityService Implementation
    //  Binds the visual to the interactivityService
    bind(options) {
        // Bind the data
        if (options.interactivityServiceOptions && options.interactivityServiceOptions.overrideSelectionFromData) {
            // Override selection state from data points if needed
            this.takeSelectionStateFromDataPoints(options.dataPoints);
        }
        if (options.interactivityServiceOptions) {
            if (options.interactivityServiceOptions.isLegend) {
                // Bind to legend data instead of normal data if isLegend
                this.selectableLegendDataPoints = options.dataPoints;
                this.renderSelectionInLegend = () => options.behavior.renderSelection(this.legendHasSelection());
            }
            else if (options.interactivityServiceOptions.isLabels) {
                // Bind to label data instead of normal data if isLabels
                this.selectableLabelsDataPoints = options.dataPoints;
                this.renderSelectionInLabels = () => options.behavior.renderSelection(this.labelsHasSelection());
            }
            else {
                this.selectableDataPoints = options.dataPoints;
                this.renderSelectionInVisual = () => options.behavior.renderSelection(this.hasSelection());
            }
        }
        else {
            this.selectableDataPoints = options.dataPoints;
            this.renderSelectionInVisual = () => options.behavior.renderSelection(this.hasSelection());
        }
        options.behavior.bindEvents(options, this);
        // Sync data points with current selection state
        this.syncSelectionState();
    }
    /**
     * Sets the selected state of all selectable data points to false and invokes the behavior's select command.
     */
    clearSelection() {
        this.applyToAllSelectableDataPoints((dataPoint) => dataPoint.selected = false);
        this.renderAll();
    }
    legendHasSelection() {
        return this.selectableLegendDataPoints ? dataHasSelection(this.selectableLegendDataPoints) : false;
    }
    labelsHasSelection() {
        return this.selectableLabelsDataPoints ? dataHasSelection(this.selectableLabelsDataPoints) : false;
    }
    isSelectionModeInverted() {
        return this.isInvertedSelectionMode;
    }
    handleSelection(dataPoints, multiSelect) {
        if (!dataPoints) {
            return;
        }
        this.select(dataPoints, multiSelect);
        this.sendSelectionToHost();
        this.renderAll();
    }
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    handleContextMenu(dataPoint, point) {
        // don't need to handle context menu here.
        // see InteractivitySelectionService class
        return;
    }
    handleClearSelection() {
        this.clearSelection();
        this.sendSelectionToHost();
    }
    renderAll() {
        this.renderSelectionInVisual();
        this.renderSelectionInLegend();
        this.renderSelectionInLabels();
    }
    applyToAllSelectableDataPoints(action) {
        const selectableDataPoints = this.selectableDataPoints;
        const selectableLegendDataPoints = this.selectableLegendDataPoints;
        const selectableLabelsDataPoints = this.selectableLabelsDataPoints;
        if (selectableDataPoints) {
            for (const dataPoint of selectableDataPoints) {
                action(dataPoint);
            }
        }
        if (selectableLegendDataPoints) {
            for (const dataPoint of selectableLegendDataPoints) {
                action(dataPoint);
            }
        }
        if (selectableLabelsDataPoints) {
            for (const dataPoint of selectableLabelsDataPoints) {
                action(dataPoint);
            }
        }
    }
}
//# sourceMappingURL=interactivityBaseService.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivitySelectionService.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivitySelectionService.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InteractivitySelectionService": () => (/* binding */ InteractivitySelectionService),
/* harmony export */   "createInteractivitySelectionService": () => (/* binding */ createInteractivitySelectionService)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/arrayExtensions.js");
/* harmony import */ var _interactivityBaseService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interactivityBaseService */ "./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivityBaseService.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
// powerbi.extensibility.utils.type


class InteractivitySelectionService extends _interactivityBaseService__WEBPACK_IMPORTED_MODULE_0__.InteractivityBaseService {
    constructor(hostServices) {
        super();
        this.selectionManager = hostServices.createSelectionManager();
        if (this.selectionManager.registerOnSelectCallback) {
            // when selecton was updated on Power BI side need to display actual selection state on the visual
            this.selectionManager.registerOnSelectCallback(() => {
                this.restoreSelection();
            });
        }
    }
    /**
     * Sets the selected state of all selectable data points to false and invokes the behavior's select command.
     */
    clearSelection() {
        this.selectionManager.clear();
        super.clearSelection();
    }
    handleContextMenu(dataPoint, point) {
        this.selectionManager.showContextMenu(dataPoint && dataPoint.identity ? dataPoint.identity : {}, point);
    }
    applySelectionStateToData(dataPoints, hasHighlights) {
        if (hasHighlights && this.hasSelection()) {
            this.selectionManager.clear();
        }
        const selectedIds = this.selectionManager.getSelectionIds();
        for (const dataPoint of dataPoints) {
            dataPoint.selected = this.isDataPointSelected(dataPoint, selectedIds);
        }
        return this.hasSelection();
    }
    /**
     * Apply new selections to change internal state of interactivity service
     */
    restoreSelection() {
        // syncSelectionState gets actual selectedIds
        // from selection manager and updates selectable datapoints state to correspond state
        this.syncSelectionState();
        // render new state of selection
        this.renderAll();
    }
    /**
     * Checks whether there is at least one item selected.
     */
    hasSelection() {
        return this.selectionManager.getSelectionIds().length > 0;
    }
    /**
     * Syncs the selection state for all data points that have the same category. Returns
     * true if the selection state was out of sync and corrections were made; false if
     * the data is already in sync with the service.
     *
     * If the data is not compatible with the current service's current selection state,
     * the state is cleared and the cleared selection is sent to the host.
     *
     * Ignores series for now, since we don't support series selection at the moment.
     */
    syncSelectionState() {
        if (this.isInvertedSelectionMode) {
            return this.syncSelectionStateInverted();
        }
        if (!this.selectableDataPoints && !this.selectableLegendDataPoints) {
            return;
        }
        // get current state of selections from selection manager
        const selectedIds = this.selectionManager.getSelectionIds();
        if (this.selectableDataPoints) {
            // update datapoints (set selection state for datapoint, update `selected` property of datapoint)
            this.updateSelectableDataPointsBySelectedIds(this.selectableDataPoints, selectedIds);
        }
        if (this.selectableLegendDataPoints) {
            // update datapoints for legend datapoint (set selection state for datapoint, update `selected` property of datapoint)
            this.updateSelectableDataPointsBySelectedIds(this.selectableLegendDataPoints, selectedIds);
        }
        if (this.selectableLabelsDataPoints) {
            // update datapoints for label datapoints
            for (const labelsDataPoint of this.selectableLabelsDataPoints) {
                labelsDataPoint.selected = selectedIds.some((value) => {
                    return value.includes(labelsDataPoint.identity);
                });
            }
        }
    }
    // Marks a data point as selected and syncs selection with the host.
    select(dataPoints, multiSelect) {
        const selectableDataPoints = [].concat(dataPoints);
        const originalSelectedIds = [...this.selectionManager.getSelectionIds()];
        if (!multiSelect || !selectableDataPoints.length) {
            // if multiselect isn't active need to reset curent selections
            // or clear selection by passing empty array of selection in dataPoints parameter
            this.selectionManager.clear();
        }
        // array of selection of selected datapoints
        const selectionIdsToSelect = [];
        selectableDataPoints.forEach((dataPoint) => {
            if (!dataPoint || !dataPoint.identity) {
                return;
            }
            const shouldDataPointBeSelected = !this.isDataPointSelected(dataPoint, originalSelectedIds);
            // update state of datapoint, set as selected and acumulate selectionId in temp array
            if (shouldDataPointBeSelected) {
                dataPoint.selected = true;
                selectionIdsToSelect.push(dataPoint.identity);
            }
            else {
                // set selection as false if datapoint isn't selected
                dataPoint.selected = false;
                if (multiSelect) {
                    selectionIdsToSelect.push(dataPoint.identity);
                }
            }
        });
        // if multiselect isn't active selection manager resets current state of selection and applies new selections
        this.selectionManager.select(selectionIdsToSelect, multiSelect);
        this.syncSelectionState();
    }
    takeSelectionStateFromDataPoints(dataPoints) {
        const selectedIds = this.selectionManager.getSelectionIds();
        // Replace the existing selectedIds rather than merging.
        powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_1__.clear(selectedIds);
        for (const dataPoint of dataPoints) {
            if (dataPoint.selected) {
                selectedIds.push(dataPoint.identity);
            }
        }
    }
    sendSelectionToHost() {
        // don't need to send to host something, selectionManager responsible for that
        return;
    }
    syncSelectionStateInverted() {
        const selectedIds = this.selectionManager.getSelectionIds();
        const selectableDataPoints = this.selectableDataPoints;
        if (!selectableDataPoints) {
            return;
        }
        if (selectedIds.length === 0) {
            for (const dataPoint of selectableDataPoints) {
                dataPoint.selected = false;
            }
        }
        else {
            for (const dataPoint of selectableDataPoints) {
                if (selectedIds.some((value) => value.includes(dataPoint.identity))) {
                    dataPoint.selected = true;
                }
                else if (dataPoint.selected) {
                    dataPoint.selected = false;
                }
            }
        }
    }
    updateSelectableDataPointsBySelectedIds(selectableDataPoints, selectedIds) {
        let foundMatchingId = false;
        for (const dataPoint of selectableDataPoints) {
            dataPoint.selected = this.isDataPointSelected(dataPoint, selectedIds);
            if (dataPoint.selected)
                foundMatchingId = true;
        }
        return foundMatchingId;
    }
    isDataPointSelected(dataPoint, selectedIds) {
        return selectedIds.some((value) => value.includes(dataPoint.identity));
    }
}
/**
 * Factory method to create an IInteractivityService instance.
 */
function createInteractivitySelectionService(hostServices) {
    return new InteractivitySelectionService(hostServices);
}
//# sourceMappingURL=interactivitySelectionService.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivityUtils.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-interactivityutils/lib/interactivityUtils.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPositionOfLastInputEvent": () => (/* binding */ getPositionOfLastInputEvent),
/* harmony export */   "registerGroupSelectionHandler": () => (/* binding */ registerGroupSelectionHandler),
/* harmony export */   "registerStandardSelectionHandler": () => (/* binding */ registerStandardSelectionHandler)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/selectAll.js");
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-selection */ "./node_modules/d3-selection/src/select.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/

function getPositionOfLastInputEvent() {
    return {
        x: event.clientX,
        y: event.clientY
    };
}
function registerStandardSelectionHandler(selection, selectionHandler) {
    const internalSelection = (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"])(selection.nodes());
    internalSelection.on("click", (event, d) => {
        selectionHandler.handleSelection(d, event.ctrlKey);
    });
}
function registerGroupSelectionHandler(group, selectionHandler) {
    const internalSelection = (0,d3_selection__WEBPACK_IMPORTED_MODULE_0__["default"])(group.nodes());
    internalSelection.on("click", (event) => {
        const target = event.target;
        const d = (0,d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"])(target).datum();
        selectionHandler.handleSelection(d, event.ctrlKey);
    });
}
//# sourceMappingURL=interactivityUtils.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-svgutils/lib/cssConstants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-svgutils/lib/cssConstants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "absoluteValue": () => (/* binding */ absoluteValue),
/* harmony export */   "autoValue": () => (/* binding */ autoValue),
/* harmony export */   "backgroundColorProperty": () => (/* binding */ backgroundColorProperty),
/* harmony export */   "backgroundImageProperty": () => (/* binding */ backgroundImageProperty),
/* harmony export */   "backgroundProperty": () => (/* binding */ backgroundProperty),
/* harmony export */   "backgroundRepeatProperty": () => (/* binding */ backgroundRepeatProperty),
/* harmony export */   "backgroundSizeProperty": () => (/* binding */ backgroundSizeProperty),
/* harmony export */   "blockValue": () => (/* binding */ blockValue),
/* harmony export */   "boldValue": () => (/* binding */ boldValue),
/* harmony export */   "borderBottomWidthProperty": () => (/* binding */ borderBottomWidthProperty),
/* harmony export */   "borderLeftWidthProperty": () => (/* binding */ borderLeftWidthProperty),
/* harmony export */   "borderProperty": () => (/* binding */ borderProperty),
/* harmony export */   "borderRightWidthProperty": () => (/* binding */ borderRightWidthProperty),
/* harmony export */   "borderTopWidthProperty": () => (/* binding */ borderTopWidthProperty),
/* harmony export */   "bottomProperty": () => (/* binding */ bottomProperty),
/* harmony export */   "colorProperty": () => (/* binding */ colorProperty),
/* harmony export */   "coverValue": () => (/* binding */ coverValue),
/* harmony export */   "createClassAndSelector": () => (/* binding */ createClassAndSelector),
/* harmony export */   "cursorProperty": () => (/* binding */ cursorProperty),
/* harmony export */   "displayProperty": () => (/* binding */ displayProperty),
/* harmony export */   "fontSizeProperty": () => (/* binding */ fontSizeProperty),
/* harmony export */   "fontWeightProperty": () => (/* binding */ fontWeightProperty),
/* harmony export */   "heightProperty": () => (/* binding */ heightProperty),
/* harmony export */   "hiddenValue": () => (/* binding */ hiddenValue),
/* harmony export */   "inlineBlockValue": () => (/* binding */ inlineBlockValue),
/* harmony export */   "leftProperty": () => (/* binding */ leftProperty),
/* harmony export */   "marginLeftProperty": () => (/* binding */ marginLeftProperty),
/* harmony export */   "marginTopProperty": () => (/* binding */ marginTopProperty),
/* harmony export */   "maxWidthProperty": () => (/* binding */ maxWidthProperty),
/* harmony export */   "minWidthProperty": () => (/* binding */ minWidthProperty),
/* harmony export */   "noneValue": () => (/* binding */ noneValue),
/* harmony export */   "opacityProperty": () => (/* binding */ opacityProperty),
/* harmony export */   "overflowProperty": () => (/* binding */ overflowProperty),
/* harmony export */   "overflowXProperty": () => (/* binding */ overflowXProperty),
/* harmony export */   "overflowYProperty": () => (/* binding */ overflowYProperty),
/* harmony export */   "paddingLeftProperty": () => (/* binding */ paddingLeftProperty),
/* harmony export */   "paddingRightProperty": () => (/* binding */ paddingRightProperty),
/* harmony export */   "pixelUnits": () => (/* binding */ pixelUnits),
/* harmony export */   "pointerValue": () => (/* binding */ pointerValue),
/* harmony export */   "positionProperty": () => (/* binding */ positionProperty),
/* harmony export */   "rightProperty": () => (/* binding */ rightProperty),
/* harmony export */   "scrollValue": () => (/* binding */ scrollValue),
/* harmony export */   "styleAttribute": () => (/* binding */ styleAttribute),
/* harmony export */   "tableRowValue": () => (/* binding */ tableRowValue),
/* harmony export */   "textAlignProperty": () => (/* binding */ textAlignProperty),
/* harmony export */   "textShadowProperty": () => (/* binding */ textShadowProperty),
/* harmony export */   "topProperty": () => (/* binding */ topProperty),
/* harmony export */   "transformProperty": () => (/* binding */ transformProperty),
/* harmony export */   "transparentValue": () => (/* binding */ transparentValue),
/* harmony export */   "visibilityProperty": () => (/* binding */ visibilityProperty),
/* harmony export */   "visibleValue": () => (/* binding */ visibleValue),
/* harmony export */   "webkitTransformProperty": () => (/* binding */ webkitTransformProperty),
/* harmony export */   "widthProperty": () => (/* binding */ widthProperty),
/* harmony export */   "zeroPixelValue": () => (/* binding */ zeroPixelValue)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
function createClassAndSelector(className) {
    return {
        className: className,
        selectorName: "." + className,
    };
}
const styleAttribute = "style";
const pixelUnits = "px";
const heightProperty = "height";
const widthProperty = "width";
const topProperty = "top";
const bottomProperty = "bottom";
const leftProperty = "left";
const rightProperty = "right";
const marginTopProperty = "margin-top";
const marginLeftProperty = "margin-left";
const displayProperty = "display";
const backgroundProperty = "background";
const backgroundColorProperty = "background-color";
const backgroundRepeatProperty = "background-repeat";
const backgroundSizeProperty = "background-size";
const backgroundImageProperty = "background-image";
const textShadowProperty = "text-shadow";
const textAlignProperty = "text-align";
const borderProperty = "border";
const borderTopWidthProperty = "border-top-width";
const borderBottomWidthProperty = "border-bottom-width";
const borderLeftWidthProperty = "border-left-width";
const borderRightWidthProperty = "border-right-width";
const fontSizeProperty = "font-size";
const fontWeightProperty = "font-weight";
const colorProperty = "color";
const opacityProperty = "opacity";
const paddingLeftProperty = "padding-left";
const paddingRightProperty = "padding-right";
const positionProperty = "position";
const maxWidthProperty = "max-width";
const minWidthProperty = "min-width";
const overflowProperty = "overflow";
const overflowXProperty = "overflow-x";
const overflowYProperty = "overflow-y";
const transformProperty = "transform";
const webkitTransformProperty = "-webkit-transform";
const cursorProperty = "cursor";
const visibilityProperty = "visibility";
const absoluteValue = "absolute";
const zeroPixelValue = "0px";
const autoValue = "auto";
const hiddenValue = "hidden";
const noneValue = "none";
const blockValue = "block";
const inlineBlockValue = "inline-block";
const transparentValue = "transparent";
const boldValue = "bold";
const visibleValue = "visible";
const tableRowValue = "table-row";
const coverValue = "cover";
const pointerValue = "pointer";
const scrollValue = "scroll";
//# sourceMappingURL=cssConstants.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-svgutils/lib/manipulation.js":
/*!*************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-svgutils/lib/manipulation.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AlmostZero": () => (/* binding */ AlmostZero),
/* harmony export */   "createArrow": () => (/* binding */ createArrow),
/* harmony export */   "ensureDAttribute": () => (/* binding */ ensureDAttribute),
/* harmony export */   "ensureValidSVGPoint": () => (/* binding */ ensureValidSVGPoint),
/* harmony export */   "flushAllD3Transitions": () => (/* binding */ flushAllD3Transitions),
/* harmony export */   "flushAllD3TransitionsIfNeeded": () => (/* binding */ flushAllD3TransitionsIfNeeded),
/* harmony export */   "getTransformScaleRatios": () => (/* binding */ getTransformScaleRatios),
/* harmony export */   "parseTranslateTransform": () => (/* binding */ parseTranslateTransform),
/* harmony export */   "scale": () => (/* binding */ scale),
/* harmony export */   "transformOrigin": () => (/* binding */ transformOrigin),
/* harmony export */   "translate": () => (/* binding */ translate),
/* harmony export */   "translateAndRotate": () => (/* binding */ translateAndRotate),
/* harmony export */   "translateAndScale": () => (/* binding */ translateAndScale),
/* harmony export */   "translateWithPixels": () => (/* binding */ translateWithPixels),
/* harmony export */   "translateXWithPixels": () => (/* binding */ translateXWithPixels)
/* harmony export */ });
/* harmony import */ var d3_timer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-timer */ "./node_modules/d3-timer/src/timer.js");
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

/**
 * Very small values, when stringified, may be converted to scientific notation and cause a temporarily
 * invalid attribute or style property value.
 * For example, the number 0.0000001 is converted to the string "1e-7".
 * This is particularly noticeable when interpolating opacity values.
 * To avoid scientific notation, start or end the transition at 1e-6,
 * which is the smallest value that is not stringified in exponential notation.
 */
const AlmostZero = 1e-6;
/**
     * Creates a translate string for use with the SVG transform call.
     */
function translate(x, y) {
    return "translate(" + x + "," + y + ")";
}
/**
 * Creates a translateX string for use with the SVG transform call.
 */
function translateXWithPixels(x) {
    return "translateX(" + x + "px)";
}
function translateWithPixels(x, y) {
    return "translate(" + x + "px," + y + "px)";
}
/**
 * Creates a translate + rotate string for use with the SVG transform call.
 */
function translateAndRotate(x, y, px, py, angle) {
    return "translate("
        + x + "," + y + ")"
        + " rotate(" + angle + "," + px + "," + py + ")";
}
/**
 * Creates a scale string for use in a CSS transform property.
 */
function scale(scale) {
    return `scale(${scale})`;
}
/**
 * Creates a translate + scale string for use with the SVG transform call.
 */
function translateAndScale(x, y, ratio) {
    return "translate("
        + x + "," + y + ")"
        + " scale(" + ratio + ")";
}
/**
 * Creates a transform origin string for use in a CSS transform-origin property.
 */
function transformOrigin(xOffset, yOffset) {
    return `${xOffset} ${yOffset}`;
}
/**
 * Forces all D3 transitions to complete.
 * Normally, zero-delay transitions are executed after an instantaneous delay (<10ms).
 * This can cause a brief flicker if the browser renders the page twice: once at the end of the first event loop,
 * then again immediately on the first timer callback. By flushing the timer queue at the end of the first event loop,
 * you can run any zero-delay transitions immediately and avoid the flicker.
 *
 * These flickers are noticable on IE, and with a large number of webviews(not recommend you ever do this) on iOS.
 */
function flushAllD3Transitions() {
    const now = Date.now;
    Date.now = function () { return Infinity; };
    (0,d3_timer__WEBPACK_IMPORTED_MODULE_0__.timerFlush)();
    Date.now = now;
}
/**
 * Wrapper for flushAllD3Transitions.
 */
function flushAllD3TransitionsIfNeeded(options) {
    if (!options)
        return;
    const animationOptions = options;
    if (animationOptions && animationOptions.transitionImmediate) {
        flushAllD3Transitions();
    }
}
/**
 * There is a known bug in IE10 that causes cryptic crashes for SVG elements with a null "d" attribute:
 * https://github.com/mbostock/d3/issues/1737
 */
function ensureDAttribute(pathElement) {
    if (!pathElement.getAttribute("d")) {
        pathElement.setAttribute("d", "");
    }
}
/**
 * In IE10, it is possible to return SVGPoints with NaN members.
 */
function ensureValidSVGPoint(point) {
    if (isNaN(point.x)) {
        point.x = 0;
    }
    if (isNaN(point.y)) {
        point.y = 0;
    }
}
/**
 * Parse the Transform string with value "translate(x,y)".
 * In Chrome for the translate(position) string the delimiter
 * is a comma and in IE it is a spaceso checking for both.
 */
function parseTranslateTransform(input) {
    if (!input || input.length === 0) { // Interpet falsy and empty string as a no-op translate
        return {
            x: "0",
            y: "0",
        };
    }
    const translateCoordinates = input.split(/[\s,]+/);
    let yValue = "0";
    let xValue;
    const xCoord = translateCoordinates[0];
    // Y coordinate is ommited in I.E if it is 0, so need to check against that
    if (translateCoordinates.length === 1) {
        // 10 refers to the length of "translate("
        xValue = xCoord.substring(10, xCoord.length - 1);
    }
    else {
        const yCoord = translateCoordinates[1];
        yValue = yCoord.substring(0, yCoord.length - 1);
        // 10 refers to the length of "translate("
        xValue = xCoord.substring(10, xCoord.length);
    }
    return {
        x: xValue,
        y: yValue
    };
}
/**
 * Create an arrow.
 */
function createArrow(width, height, rotate) {
    const transform = "rotate(" + rotate + " " + width / 2 + " " + height / 2 + ")";
    let path = "M0 0";
    path += "L0 " + height;
    path += "L" + width + " " + height / 2 + " Z";
    return {
        path: path,
        transform: transform
    };
}
/**
 * Use the ratio of the scaled bounding rect and the SVG DOM bounding box to get the x and y transform scale values
 * @deprecated This function is unreliable across browser implementations, prefer to use SVGScaleDetector if needed.
 */
function getTransformScaleRatios(svgElement) {
    if (svgElement != null) {
        const scaledRect = svgElement.getBoundingClientRect();
        const domRect = svgElement.getBBox();
        if (domRect.height > 0 && domRect.width > 0) {
            return {
                x: scaledRect.width / domRect.width,
                y: scaledRect.height / domRect.height
            };
        }
    }
    return { x: 1, y: 1 };
}
//# sourceMappingURL=manipulation.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-svgutils/lib/shapes/shapes.js":
/*!**************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-svgutils/lib/shapes/shapes.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "add": () => (/* binding */ add),
/* harmony export */   "bottom": () => (/* binding */ bottom),
/* harmony export */   "bottomLeft": () => (/* binding */ bottomLeft),
/* harmony export */   "bottomRight": () => (/* binding */ bottomRight),
/* harmony export */   "clone": () => (/* binding */ clone),
/* harmony export */   "combine": () => (/* binding */ combine),
/* harmony export */   "containsPoint": () => (/* binding */ containsPoint),
/* harmony export */   "deflate": () => (/* binding */ deflate),
/* harmony export */   "deflateBy": () => (/* binding */ deflateBy),
/* harmony export */   "equal": () => (/* binding */ equal),
/* harmony export */   "equalWithPrecision": () => (/* binding */ equalWithPrecision),
/* harmony export */   "equals": () => (/* binding */ equals),
/* harmony export */   "getCentroid": () => (/* binding */ getCentroid),
/* harmony export */   "getClosestPoint": () => (/* binding */ getClosestPoint),
/* harmony export */   "getOffset": () => (/* binding */ getOffset),
/* harmony export */   "getSize": () => (/* binding */ getSize),
/* harmony export */   "inflate": () => (/* binding */ inflate),
/* harmony export */   "inflateBy": () => (/* binding */ inflateBy),
/* harmony export */   "intersect": () => (/* binding */ intersect),
/* harmony export */   "isEmpty": () => (/* binding */ isEmpty),
/* harmony export */   "isIntersecting": () => (/* binding */ isIntersecting),
/* harmony export */   "offset": () => (/* binding */ offset),
/* harmony export */   "right": () => (/* binding */ right),
/* harmony export */   "setSize": () => (/* binding */ setSize),
/* harmony export */   "subtract": () => (/* binding */ subtract),
/* harmony export */   "toString": () => (/* binding */ toString),
/* harmony export */   "topLeft": () => (/* binding */ topLeft),
/* harmony export */   "topRight": () => (/* binding */ topRight)
/* harmony export */ });
/* harmony import */ var powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! powerbi-visuals-utils-typeutils */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
// module powerbi.extensibility.utils.svg {

function getOffset(rect) {
    return { x: rect.left, y: rect.top };
}
function getSize(rect) {
    return { width: rect.width, height: rect.height };
}
function setSize(rect, value) {
    rect.width = value.width;
    rect.height = value.height;
}
function right(rect) {
    return rect.left + rect.width;
}
function bottom(rect) {
    return rect.top + rect.height;
}
function topLeft(rect) {
    return { x: rect.left, y: rect.top };
}
function topRight(rect) {
    return { x: rect.left + rect.width, y: rect.top };
}
function bottomLeft(rect) {
    return { x: rect.left, y: rect.top + rect.height };
}
function bottomRight(rect) {
    return { x: rect.left + rect.width, y: rect.top + rect.height };
}
function equals(rect, other) {
    return other !== undefined && other !== null &&
        rect.left === other.left && rect.top === other.top && rect.width === other.width && rect.height === other.height;
}
function clone(rect) {
    return (rect !== null) ? { left: rect.left, top: rect.top, width: rect.width, height: rect.height } : null;
}
function toString(rect) {
    return "{left:" + rect.left + ", top:" + rect.top + ", width:" + rect.width + ", height:" + rect.height + "}";
}
function offset(rect, offsetX, offsetY) {
    const newLeft = ((rect.left + offsetX) >= 0) ? rect.left + offsetX : 0;
    const newTop = ((rect.top + offsetY) >= 0) ? rect.top + offsetY : 0;
    return { left: newLeft, top: newTop, width: rect.width, height: rect.height };
}
function add(rect, rect2) {
    return {
        left: rect.left + rect2.left,
        top: rect.top + rect2.top,
        height: rect.height + rect2.height,
        width: rect.width + rect2.width
    };
}
function subtract(rect, rect2) {
    return {
        left: rect.left - rect2.left,
        top: rect.top - rect2.top,
        height: rect.height - rect2.height,
        width: rect.width - rect2.width
    };
}
function inflate(rect, padding) {
    const result = clone(rect);
    if (padding) {
        result.left -= padding.left;
        result.top -= padding.top;
        result.width += padding.left + padding.right;
        result.height += padding.top + padding.bottom;
    }
    return result;
}
function deflate(rect, padding) {
    const result = clone(rect);
    if (padding) {
        result.left += padding.left;
        result.top += padding.top;
        result.width -= padding.left + padding.right;
        result.height -= padding.top + padding.bottom;
    }
    return result;
}
function inflateBy(rect, padding) {
    return { left: rect.left - padding, top: rect.top - padding, width: rect.width + padding + padding, height: rect.height + padding + padding };
}
function deflateBy(rect, padding) {
    return { left: rect.left + padding, top: rect.top + padding, width: rect.width - padding - padding, height: rect.height - padding - padding };
}
/**
 * Get closest point.
 *
 * @return the closest point on the rect to the (x,y) point given.
 * In case the (x,y) given is inside the rect, (x,y) will be returned.
 * Otherwise, a point on a border will be returned.
 */
function getClosestPoint(rect, x, y) {
    return {
        x: Math.min(Math.max(rect.left, x), rect.left + rect.width),
        y: Math.min(Math.max(rect.top, y), rect.top + rect.height)
    };
}
function equal(rect1, rect2) {
    return rect1 === rect2 ||
        (rect1 !== undefined && rect2 !== undefined && rect1.left === rect2.left && rect1.top === rect2.top && rect1.width === rect2.width && rect1.height === rect2.height);
}
function equalWithPrecision(rect1, rect2) {
    return rect1 === rect2 ||
        (rect1 !== undefined && rect2 !== undefined &&
            powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.equalWithPrecision(rect1.left, rect2.left) && powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.equalWithPrecision(rect1.top, rect2.top) &&
            powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.equalWithPrecision(rect1.width, rect2.width) && powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.equalWithPrecision(rect1.height, rect2.height));
}
function isEmpty(rect) {
    return rect === undefined || rect === null || (rect.width === 0 && rect.height === 0);
}
function containsPoint(rect, point) {
    if ((rect === null) || (point === null)) {
        return false;
    }
    return powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.lessOrEqualWithPrecision(rect.left, point.x) &&
        powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.lessOrEqualWithPrecision(point.x, rect.left + rect.width) &&
        powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.lessOrEqualWithPrecision(rect.top, point.y) &&
        powerbi_visuals_utils_typeutils__WEBPACK_IMPORTED_MODULE_0__.lessOrEqualWithPrecision(point.y, rect.top + rect.height);
}
function isIntersecting(rect1, rect2) {
    if (!rect1 || !rect2) {
        return false;
    }
    const left = Math.max(rect1.left, rect2.left);
    const right = Math.min(rect1.left + rect1.width, rect2.left + rect2.width);
    if (left > right) {
        return false;
    }
    const top = Math.max(rect1.top, rect2.top);
    const bottom = Math.min(rect1.top + rect1.height, rect2.top + rect2.height);
    return top <= bottom;
}
function intersect(rect1, rect2) {
    if (!rect1) {
        return rect2;
    }
    if (!rect2) {
        return rect1;
    }
    const left = Math.max(rect1.left, rect2.left);
    const top = Math.max(rect1.top, rect2.top);
    const right = Math.min(rect1.left + rect1.width, rect2.left + rect2.width);
    const bottom = Math.min(rect1.top + rect1.height, rect2.top + rect2.height);
    if (left <= right && top <= bottom) {
        return { left: left, top: top, width: right - left, height: bottom - top };
    }
    else {
        return { left: 0, top: 0, width: 0, height: 0 };
    }
}
function combine(rect1, rect2) {
    if (!rect1) {
        return rect2;
    }
    if (!rect2) {
        return rect1;
    }
    const left = Math.min(rect1.left, rect2.left);
    const top = Math.min(rect1.top, rect2.top);
    const right = Math.max(rect1.left + rect1.width, rect2.left + rect2.width);
    const bottom = Math.max(rect1.top + rect1.height, rect2.top + rect2.height);
    return { left: left, top: top, width: right - left, height: bottom - top };
}
function getCentroid(rect) {
    return {
        x: rect.left + (rect.width / 2),
        y: rect.top + (rect.height / 2)
    };
}
//# sourceMappingURL=shapes.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/lib/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/lib/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TooltipServiceWrapper": () => (/* reexport safe */ _tooltipService__WEBPACK_IMPORTED_MODULE_0__.TooltipServiceWrapper),
/* harmony export */   "createTooltipServiceWrapper": () => (/* reexport safe */ _tooltipService__WEBPACK_IMPORTED_MODULE_0__.createTooltipServiceWrapper),
/* harmony export */   "touchEndEventName": () => (/* reexport safe */ _tooltipTouch__WEBPACK_IMPORTED_MODULE_1__.touchEndEventName),
/* harmony export */   "touchStartEventName": () => (/* reexport safe */ _tooltipTouch__WEBPACK_IMPORTED_MODULE_1__.touchStartEventName),
/* harmony export */   "usePointerEvents": () => (/* reexport safe */ _tooltipTouch__WEBPACK_IMPORTED_MODULE_1__.usePointerEvents)
/* harmony export */ });
/* harmony import */ var _tooltipService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tooltipService */ "./node_modules/powerbi-visuals-utils-tooltiputils/lib/tooltipService.js");
/* harmony import */ var _tooltipTouch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tooltipTouch */ "./node_modules/powerbi-visuals-utils-tooltiputils/lib/tooltipTouch.js");



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/lib/tooltipService.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/lib/tooltipService.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TooltipServiceWrapper": () => (/* binding */ TooltipServiceWrapper),
/* harmony export */   "createTooltipServiceWrapper": () => (/* binding */ createTooltipServiceWrapper)
/* harmony export */ });
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-selection */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selectAll.js");
/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-selection */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/pointers.js");
/* harmony import */ var _tooltipTouch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tooltipTouch */ "./node_modules/powerbi-visuals-utils-tooltiputils/lib/tooltipTouch.js");


const DefaultHandleTouchDelay = 500;
function createTooltipServiceWrapper(tooltipService, rootElement, handleTouchDelay = DefaultHandleTouchDelay) {
    return new TooltipServiceWrapper({
        tooltipService: tooltipService,
        rootElement: rootElement,
        handleTouchDelay: handleTouchDelay,
    });
}
class TooltipServiceWrapper {
    constructor(options) {
        this.visualHostTooltipService = options.tooltipService;
        this.rootElement = options.rootElement;
        this.handleTouchDelay = options.handleTouchDelay;
    }
    addTooltip(selection, getTooltipInfoDelegate, getDataPointIdentity, reloadTooltipDataOnMouseMove) {
        if (!selection || !this.visualHostTooltipService.enabled()) {
            return;
        }
        let rootNode = this.rootElement;
        let internalSelection = (0,d3_selection__WEBPACK_IMPORTED_MODULE_1__["default"])(selection.nodes());
        // Mouse events
        internalSelection.on("mouseover.tooltip", (event, data) => {
            // Ignore mouseover while handling touch events
            if (!this.canDisplayTooltip(event)) {
                return;
            }
            let coordinates = this.getCoordinates(event, rootNode, true);
            let tooltipInfo = getTooltipInfoDelegate(data);
            if (tooltipInfo == null) {
                return;
            }
            let selectionIds = getDataPointIdentity ? [getDataPointIdentity(data)] : [];
            this.visualHostTooltipService.show({
                coordinates: coordinates,
                isTouchEvent: false,
                dataItems: tooltipInfo,
                identities: selectionIds
            });
        });
        internalSelection.on("mouseout.tooltip", (event, data) => {
            this.visualHostTooltipService.hide({
                isTouchEvent: false,
                immediately: false,
            });
        });
        internalSelection.on("mousemove.tooltip", (event, data) => {
            // Ignore mousemove while handling touch events
            if (!this.canDisplayTooltip(event)) {
                return;
            }
            let coordinates = this.getCoordinates(event, rootNode, true);
            let tooltipInfo;
            if (reloadTooltipDataOnMouseMove) {
                tooltipInfo = getTooltipInfoDelegate(data);
                if (tooltipInfo == null) {
                    return;
                }
            }
            let selectionIds = getDataPointIdentity ? [getDataPointIdentity(data)] : [];
            this.visualHostTooltipService.move({
                coordinates: coordinates,
                isTouchEvent: false,
                dataItems: tooltipInfo,
                identities: selectionIds
            });
        });
        // --- Touch events ---
        let touchStartEventName = _tooltipTouch__WEBPACK_IMPORTED_MODULE_0__.touchStartEventName();
        let touchEndEventName = _tooltipTouch__WEBPACK_IMPORTED_MODULE_0__.touchEndEventName();
        let isPointerEvent = _tooltipTouch__WEBPACK_IMPORTED_MODULE_0__.usePointerEvents();
        internalSelection.on(touchStartEventName + ".tooltip", (event, data) => {
            let coordinates = this.getCoordinates(event, rootNode, true);
            let tooltipInfo = getTooltipInfoDelegate(data);
            let selectionIds = getDataPointIdentity ? [getDataPointIdentity(data)] : [];
            this.handleTouchTimeoutId = window.setTimeout(() => {
                this.visualHostTooltipService.show({
                    coordinates: coordinates,
                    isTouchEvent: true,
                    dataItems: tooltipInfo,
                    identities: selectionIds
                });
                this.handleTouchTimeoutId = undefined;
            }, this.handleTouchDelay);
        });
        internalSelection.on(touchEndEventName + ".tooltip", () => {
            this.cancelTouchTimeoutEvents();
        });
    }
    cancelTouchTimeoutEvents() {
        if (this.handleTouchTimeoutId) {
            clearTimeout(this.handleTouchTimeoutId);
        }
    }
    hide() {
        this.visualHostTooltipService.hide({ immediately: true, isTouchEvent: false });
    }
    canDisplayTooltip(event) {
        let canDisplay = true;
        const mouseEvent = event;
        if (mouseEvent.buttons !== undefined) {
            // Check mouse buttons state
            let hasMouseButtonPressed = mouseEvent.buttons !== 0;
            canDisplay = !hasMouseButtonPressed;
        }
        // Make sure we are not ignoring mouse events immediately after touch end.
        canDisplay = canDisplay && (this.handleTouchTimeoutId == null);
        return canDisplay;
    }
    getCoordinates(event, rootNode, isPointerEvent) {
        let coordinates;
        if (isPointerEvent) {
            // DO NOT USE - WebKit bug in getScreenCTM with nested SVG results in slight negative coordinate shift
            // Also, IE will incorporate transform scale but WebKit does not, forcing us to detect browser and adjust appropriately.
            // Just use non-scaled coordinates for all browsers, and adjust for the transform scale later (see lineChart.findIndex)
            // coordinates = d3.mouse(rootNode);
            // copied from d3_eventSource (which is not exposed)
            let e = event, s;
            while (s = e.sourceEvent)
                e = s;
            let rect = rootNode.getBoundingClientRect();
            coordinates = [
                e.clientX - rect.left - rootNode.clientLeft,
                e.clientY - rect.top - rootNode.clientTop
            ];
        }
        else {
            let touchCoordinates = (0,d3_selection__WEBPACK_IMPORTED_MODULE_2__["default"])(event);
            if (touchCoordinates && touchCoordinates.length > 0) {
                coordinates = touchCoordinates[0];
            }
        }
        return coordinates;
    }
}
//# sourceMappingURL=tooltipService.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/lib/tooltipTouch.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/lib/tooltipTouch.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "touchEndEventName": () => (/* binding */ touchEndEventName),
/* harmony export */   "touchStartEventName": () => (/* binding */ touchStartEventName),
/* harmony export */   "usePointerEvents": () => (/* binding */ usePointerEvents)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
function touchStartEventName() {
    let eventName = "touchstart";
    return eventName;
}
function touchEndEventName() {
    let eventName = "touchend";
    return eventName;
}
function usePointerEvents() {
    let eventName = touchStartEventName();
    return eventName === "pointerdown" || eventName === "MSPointerDown";
}
//# sourceMappingURL=tooltipTouch.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/array.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/array.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return typeof x === "object" && "length" in x
    ? x // Array, TypedArray, NodeList, array-like
    : Array.from(x); // Map, Set, iterable, string, or anything else
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/constant.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/constant.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return function() {
    return x;
  };
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/creator.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/creator.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _namespace_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./namespace.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespace.js");
/* harmony import */ var _namespaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./namespaces.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespaces.js");



function creatorInherit(name) {
  return function() {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === _namespaces_js__WEBPACK_IMPORTED_MODULE_0__.xhtml && document.documentElement.namespaceURI === _namespaces_js__WEBPACK_IMPORTED_MODULE_0__.xhtml
        ? document.createElement(name)
        : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name) {
  var fullname = (0,_namespace_js__WEBPACK_IMPORTED_MODULE_1__["default"])(name);
  return (fullname.local
      ? creatorFixed
      : creatorInherit)(fullname);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/matcher.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/matcher.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "childMatcher": () => (/* binding */ childMatcher),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return function() {
    return this.matches(selector);
  };
}

function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}



/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespace.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespace.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _namespaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./namespaces.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespaces.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return _namespaces_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasOwnProperty(prefix) ? {space: _namespaces_js__WEBPACK_IMPORTED_MODULE_0__["default"][prefix], local: name} : name; // eslint-disable-line no-prototype-builtins
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespaces.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespaces.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "xhtml": () => (/* binding */ xhtml)
/* harmony export */ });
var xhtml = "http://www.w3.org/1999/xhtml";

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
});


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/pointer.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/pointer.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _sourceEvent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sourceEvent.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/sourceEvent.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(event, node) {
  event = (0,_sourceEvent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(event);
  if (node === undefined) node = event.currentTarget;
  if (node) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      point.x = event.clientX, point.y = event.clientY;
      point = point.matrixTransform(node.getScreenCTM().inverse());
      return [point.x, point.y];
    }
    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
    }
  }
  return [event.pageX, event.pageY];
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/pointers.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/pointers.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _pointer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pointer.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/pointer.js");
/* harmony import */ var _sourceEvent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sourceEvent.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/sourceEvent.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(events, node) {
  if (events.target) { // i.e., instanceof Event, not TouchList or iterable
    events = (0,_sourceEvent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(events);
    if (node === undefined) node = events.currentTarget;
    events = events.touches || [events];
  }
  return Array.from(events, event => (0,_pointer_js__WEBPACK_IMPORTED_MODULE_1__["default"])(event, node));
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selectAll.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selectAll.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./array.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/array.js");
/* harmony import */ var _selection_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selection/index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return typeof selector === "string"
      ? new _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.Selection([document.querySelectorAll(selector)], [document.documentElement])
      : new _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.Selection([selector == null ? [] : (0,_array_js__WEBPACK_IMPORTED_MODULE_1__["default"])(selector)], _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.root);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/append.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/append.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _creator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../creator.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/creator.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name) {
  var create = typeof name === "function" ? name : (0,_creator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(name);
  return this.select(function() {
    return this.appendChild(create.apply(this, arguments));
  });
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/attr.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/attr.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _namespace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../namespace.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/namespace.js");


function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);
    else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value) {
  var fullname = (0,_namespace_js__WEBPACK_IMPORTED_MODULE_0__["default"])(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local
        ? node.getAttributeNS(fullname.space, fullname.local)
        : node.getAttribute(fullname);
  }

  return this.each((value == null
      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)
      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/call.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/call.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/classed.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/classed.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }

  return this.each((typeof value === "function"
      ? classedFunction : value
      ? classedTrue
      : classedFalse)(names, value));
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/clone.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/clone.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/data.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/data.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _enter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enter.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/enter.js");
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../array.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/array.js");
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constant.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/constant.js");





function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length;

  // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new _enter_js__WEBPACK_IMPORTED_MODULE_0__.EnterNode(parent, data[i]);
    }
  }

  // Put any non-null nodes that don’t fit into exit.
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = new Map,
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue;

  // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }

  // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.
  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data[i], i, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new _enter_js__WEBPACK_IMPORTED_MODULE_0__.EnterNode(parent, data[i]);
    }
  }

  // Add any remaining nodes that were not bound to data to exit.
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {
      exit[i] = node;
    }
  }
}

function datum(node) {
  return node.__data__;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value, key) {
  if (!arguments.length) return Array.from(this, datum);

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;

  if (typeof value !== "function") value = (0,_constant_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = (0,_array_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value.call(parent, parent && parent.__data__, j, parents)),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);

    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

    // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
        previous._next = next || null;
      }
    }
  }

  update = new _index_js__WEBPACK_IMPORTED_MODULE_3__.Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/datum.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/datum.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  return arguments.length
      ? this.property("__data__", value)
      : this.node().__data__;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/dispatch.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/dispatch.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _window_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/window.js");


function dispatchEvent(node, type, params) {
  var window = (0,_window_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(type, params) {
  return this.each((typeof params === "function"
      ? dispatchFunction
      : dispatchConstant)(type, params));
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/each.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/each.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(callback) {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/empty.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/empty.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return !this.node();
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/enter.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/enter.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EnterNode": () => (/* binding */ EnterNode),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _sparse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sparse.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/sparse.js");
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(this._enter || this._groups.map(_sparse_js__WEBPACK_IMPORTED_MODULE_1__["default"]), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
  querySelector: function(selector) { return this._parent.querySelector(selector); },
  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
};


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/exit.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/exit.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _sparse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sparse.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/sparse.js");
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(this._exit || this._groups.map(_sparse_js__WEBPACK_IMPORTED_MODULE_1__["default"]), this._parents);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/filter.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/filter.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _matcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matcher.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/matcher.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(match) {
  if (typeof match !== "function") match = (0,_matcher_js__WEBPACK_IMPORTED_MODULE_0__["default"])(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_1__.Selection(subgroups, this._parents);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/html.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/html.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  return arguments.length
      ? this.each(value == null
          ? htmlRemove : (typeof value === "function"
          ? htmlFunction
          : htmlConstant)(value))
      : this.node().innerHTML;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Selection": () => (/* binding */ Selection),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "root": () => (/* binding */ root)
/* harmony export */ });
/* harmony import */ var _select_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./select.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/select.js");
/* harmony import */ var _selectAll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectAll.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectAll.js");
/* harmony import */ var _selectChild_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selectChild.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectChild.js");
/* harmony import */ var _selectChildren_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selectChildren.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectChildren.js");
/* harmony import */ var _filter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./filter.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/filter.js");
/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./data.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/data.js");
/* harmony import */ var _enter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./enter.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/enter.js");
/* harmony import */ var _exit_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./exit.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/exit.js");
/* harmony import */ var _join_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./join.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/join.js");
/* harmony import */ var _merge_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./merge.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/merge.js");
/* harmony import */ var _order_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./order.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/order.js");
/* harmony import */ var _sort_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./sort.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/sort.js");
/* harmony import */ var _call_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./call.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/call.js");
/* harmony import */ var _nodes_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./nodes.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/nodes.js");
/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./node.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/node.js");
/* harmony import */ var _size_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./size.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/size.js");
/* harmony import */ var _empty_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./empty.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/empty.js");
/* harmony import */ var _each_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./each.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/each.js");
/* harmony import */ var _attr_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./attr.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/attr.js");
/* harmony import */ var _style_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./style.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/style.js");
/* harmony import */ var _property_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./property.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/property.js");
/* harmony import */ var _classed_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./classed.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/classed.js");
/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./text.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/text.js");
/* harmony import */ var _html_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./html.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/html.js");
/* harmony import */ var _raise_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./raise.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/raise.js");
/* harmony import */ var _lower_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./lower.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/lower.js");
/* harmony import */ var _append_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./append.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/append.js");
/* harmony import */ var _insert_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./insert.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/insert.js");
/* harmony import */ var _remove_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./remove.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/remove.js");
/* harmony import */ var _clone_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./clone.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/clone.js");
/* harmony import */ var _datum_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./datum.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/datum.js");
/* harmony import */ var _on_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./on.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/on.js");
/* harmony import */ var _dispatch_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./dispatch.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/dispatch.js");
/* harmony import */ var _iterator_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./iterator.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/iterator.js");



































var root = [null];

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

function selection_selection() {
  return this;
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: _select_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  selectAll: _selectAll_js__WEBPACK_IMPORTED_MODULE_1__["default"],
  selectChild: _selectChild_js__WEBPACK_IMPORTED_MODULE_2__["default"],
  selectChildren: _selectChildren_js__WEBPACK_IMPORTED_MODULE_3__["default"],
  filter: _filter_js__WEBPACK_IMPORTED_MODULE_4__["default"],
  data: _data_js__WEBPACK_IMPORTED_MODULE_5__["default"],
  enter: _enter_js__WEBPACK_IMPORTED_MODULE_6__["default"],
  exit: _exit_js__WEBPACK_IMPORTED_MODULE_7__["default"],
  join: _join_js__WEBPACK_IMPORTED_MODULE_8__["default"],
  merge: _merge_js__WEBPACK_IMPORTED_MODULE_9__["default"],
  selection: selection_selection,
  order: _order_js__WEBPACK_IMPORTED_MODULE_10__["default"],
  sort: _sort_js__WEBPACK_IMPORTED_MODULE_11__["default"],
  call: _call_js__WEBPACK_IMPORTED_MODULE_12__["default"],
  nodes: _nodes_js__WEBPACK_IMPORTED_MODULE_13__["default"],
  node: _node_js__WEBPACK_IMPORTED_MODULE_14__["default"],
  size: _size_js__WEBPACK_IMPORTED_MODULE_15__["default"],
  empty: _empty_js__WEBPACK_IMPORTED_MODULE_16__["default"],
  each: _each_js__WEBPACK_IMPORTED_MODULE_17__["default"],
  attr: _attr_js__WEBPACK_IMPORTED_MODULE_18__["default"],
  style: _style_js__WEBPACK_IMPORTED_MODULE_19__["default"],
  property: _property_js__WEBPACK_IMPORTED_MODULE_20__["default"],
  classed: _classed_js__WEBPACK_IMPORTED_MODULE_21__["default"],
  text: _text_js__WEBPACK_IMPORTED_MODULE_22__["default"],
  html: _html_js__WEBPACK_IMPORTED_MODULE_23__["default"],
  raise: _raise_js__WEBPACK_IMPORTED_MODULE_24__["default"],
  lower: _lower_js__WEBPACK_IMPORTED_MODULE_25__["default"],
  append: _append_js__WEBPACK_IMPORTED_MODULE_26__["default"],
  insert: _insert_js__WEBPACK_IMPORTED_MODULE_27__["default"],
  remove: _remove_js__WEBPACK_IMPORTED_MODULE_28__["default"],
  clone: _clone_js__WEBPACK_IMPORTED_MODULE_29__["default"],
  datum: _datum_js__WEBPACK_IMPORTED_MODULE_30__["default"],
  on: _on_js__WEBPACK_IMPORTED_MODULE_31__["default"],
  dispatch: _dispatch_js__WEBPACK_IMPORTED_MODULE_32__["default"],
  [Symbol.iterator]: _iterator_js__WEBPACK_IMPORTED_MODULE_33__["default"]
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (selection);


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/insert.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/insert.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _creator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../creator.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/creator.js");
/* harmony import */ var _selector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../selector.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selector.js");



function constantNull() {
  return null;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, before) {
  var create = typeof name === "function" ? name : (0,_creator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(name),
      select = before == null ? constantNull : typeof before === "function" ? before : (0,_selector_js__WEBPACK_IMPORTED_MODULE_1__["default"])(before);
  return this.select(function() {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/iterator.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/iterator.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function* __WEBPACK_DEFAULT_EXPORT__() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) yield node;
    }
  }
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/join.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/join.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
  if (onupdate != null) update = onupdate(update);
  if (onexit == null) exit.remove(); else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/lower.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/lower.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return this.each(lower);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/merge.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/merge.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selection) {
  if (!(selection instanceof _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection)) throw new Error("invalid merge");

  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(merges, this._parents);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/node.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/node.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/nodes.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/nodes.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return Array.from(this);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/on.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/on.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {type: t, name: name};
  });
}

function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;
    else delete this.__on;
  };
}

function onAdd(typename, value, options) {
  return function() {
    var on = this.__on, o, listener = contextListener(value);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
        this.addEventListener(o.type, o.listener = listener, o.options = options);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, options);
    o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};
    if (!on) this.__on = [o];
    else on.push(o);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(typename, value, options) {
  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));
  return this;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/order.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/order.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {

  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/property.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/property.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];
    else this[name] = v;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value) {
  return arguments.length > 1
      ? this.each((value == null
          ? propertyRemove : typeof value === "function"
          ? propertyFunction
          : propertyConstant)(name, value))
      : this.node()[name];
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/raise.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/raise.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return this.each(raise);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/remove.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/remove.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return this.each(remove);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/select.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/select.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _selector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../selector.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selector.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(select) {
  if (typeof select !== "function") select = (0,_selector_js__WEBPACK_IMPORTED_MODULE_0__["default"])(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_1__.Selection(subgroups, this._parents);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectAll.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectAll.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../array.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/array.js");
/* harmony import */ var _selectorAll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../selectorAll.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selectorAll.js");




function arrayAll(select) {
  return function() {
    var group = select.apply(this, arguments);
    return group == null ? [] : (0,_array_js__WEBPACK_IMPORTED_MODULE_0__["default"])(group);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(select) {
  if (typeof select === "function") select = arrayAll(select);
  else select = (0,_selectorAll_js__WEBPACK_IMPORTED_MODULE_1__["default"])(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_2__.Selection(subgroups, parents);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectChild.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectChild.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _matcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matcher.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/matcher.js");


var find = Array.prototype.find;

function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}

function childFirst() {
  return this.firstElementChild;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(match) {
  return this.select(match == null ? childFirst
      : childFind(typeof match === "function" ? match : (0,_matcher_js__WEBPACK_IMPORTED_MODULE_0__.childMatcher)(match)));
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectChildren.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/selectChildren.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _matcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matcher.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/matcher.js");


var filter = Array.prototype.filter;

function children() {
  return this.children;
}

function childrenFilter(match) {
  return function() {
    return filter.call(this.children, match);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(match) {
  return this.selectAll(match == null ? children
      : childrenFilter(typeof match === "function" ? match : (0,_matcher_js__WEBPACK_IMPORTED_MODULE_0__.childMatcher)(match)));
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/size.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/size.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  let size = 0;
  for (const node of this) ++size; // eslint-disable-line no-unused-vars
  return size;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/sort.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/sort.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/index.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/sparse.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/sparse.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(update) {
  return new Array(update.length);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/style.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/style.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "styleValue": () => (/* binding */ styleValue)
/* harmony export */ });
/* harmony import */ var _window_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window.js */ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/window.js");


function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);
    else this.style.setProperty(name, v, priority);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value, priority) {
  return arguments.length > 1
      ? this.each((value == null
            ? styleRemove : typeof value === "function"
            ? styleFunction
            : styleConstant)(name, value, priority == null ? "" : priority))
      : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name)
      || (0,_window_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).getComputedStyle(node, null).getPropertyValue(name);
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/text.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selection/text.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  return arguments.length
      ? this.each(value == null
          ? textRemove : (typeof value === "function"
          ? textFunction
          : textConstant)(value))
      : this.node().textContent;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selector.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selector.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function none() {}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selectorAll.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/selectorAll.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function empty() {
  return [];
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/sourceEvent.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/sourceEvent.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(event) {
  let sourceEvent;
  while (sourceEvent = event.sourceEvent) event = sourceEvent;
  return event;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/window.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-tooltiputils/node_modules/d3-selection/src/window.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(node) {
  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
      || (node.document && node) // node is a Window
      || node.defaultView; // node is a Document
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js":
/*!********************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/double.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_PRECISION": () => (/* binding */ DEFAULT_PRECISION),
/* harmony export */   "DEFAULT_PRECISION_IN_DECIMAL_DIGITS": () => (/* binding */ DEFAULT_PRECISION_IN_DECIMAL_DIGITS),
/* harmony export */   "EPSILON": () => (/* binding */ EPSILON),
/* harmony export */   "LOG_E_10": () => (/* binding */ LOG_E_10),
/* harmony export */   "MAX_EXP": () => (/* binding */ MAX_EXP),
/* harmony export */   "MAX_VALUE": () => (/* binding */ MAX_VALUE),
/* harmony export */   "MIN_EXP": () => (/* binding */ MIN_EXP),
/* harmony export */   "MIN_VALUE": () => (/* binding */ MIN_VALUE),
/* harmony export */   "NEGATIVE_POWERS": () => (/* binding */ NEGATIVE_POWERS),
/* harmony export */   "POSITIVE_POWERS": () => (/* binding */ POSITIVE_POWERS),
/* harmony export */   "ceilToPrecision": () => (/* binding */ ceilToPrecision),
/* harmony export */   "ceilWithPrecision": () => (/* binding */ ceilWithPrecision),
/* harmony export */   "detectPrecision": () => (/* binding */ detectPrecision),
/* harmony export */   "ensureInRange": () => (/* binding */ ensureInRange),
/* harmony export */   "equalWithPrecision": () => (/* binding */ equalWithPrecision),
/* harmony export */   "floorToPrecision": () => (/* binding */ floorToPrecision),
/* harmony export */   "floorWithPrecision": () => (/* binding */ floorWithPrecision),
/* harmony export */   "getPrecision": () => (/* binding */ getPrecision),
/* harmony export */   "greaterOrEqualWithPrecision": () => (/* binding */ greaterOrEqualWithPrecision),
/* harmony export */   "greaterWithPrecision": () => (/* binding */ greaterWithPrecision),
/* harmony export */   "isInteger": () => (/* binding */ isInteger),
/* harmony export */   "lessOrEqualWithPrecision": () => (/* binding */ lessOrEqualWithPrecision),
/* harmony export */   "lessWithPrecision": () => (/* binding */ lessWithPrecision),
/* harmony export */   "log10": () => (/* binding */ log10),
/* harmony export */   "pow10": () => (/* binding */ pow10),
/* harmony export */   "project": () => (/* binding */ project),
/* harmony export */   "removeDecimalNoise": () => (/* binding */ removeDecimalNoise),
/* harmony export */   "round": () => (/* binding */ round),
/* harmony export */   "roundToPrecision": () => (/* binding */ roundToPrecision),
/* harmony export */   "toIncrement": () => (/* binding */ toIncrement)
/* harmony export */ });
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
/**
 * Module Double contains a set of constants and precision based utility methods
 * for dealing with doubles and their decimal garbage in the javascript.
 */
// Constants.
const MIN_VALUE = -Number.MAX_VALUE;
const MAX_VALUE = Number.MAX_VALUE;
const MIN_EXP = -308;
const MAX_EXP = 308;
const EPSILON = 1E-323;
const DEFAULT_PRECISION = 0.0001;
const DEFAULT_PRECISION_IN_DECIMAL_DIGITS = 12;
const LOG_E_10 = Math.log(10);
const POSITIVE_POWERS = [
    1E0, 1E1, 1E2, 1E3, 1E4, 1E5, 1E6, 1E7, 1E8, 1E9, 1E10, 1E11, 1E12, 1E13, 1E14, 1E15, 1E16, 1E17, 1E18, 1E19, 1E20, 1E21, 1E22, 1E23, 1E24, 1E25, 1E26, 1E27, 1E28, 1E29, 1E30, 1E31, 1E32, 1E33, 1E34, 1E35, 1E36, 1E37, 1E38, 1E39, 1E40, 1E41, 1E42, 1E43, 1E44, 1E45, 1E46, 1E47, 1E48, 1E49, 1E50, 1E51, 1E52, 1E53, 1E54, 1E55, 1E56, 1E57, 1E58, 1E59, 1E60, 1E61, 1E62, 1E63, 1E64, 1E65, 1E66, 1E67, 1E68, 1E69, 1E70, 1E71, 1E72, 1E73, 1E74, 1E75, 1E76, 1E77, 1E78, 1E79, 1E80, 1E81, 1E82, 1E83, 1E84, 1E85, 1E86, 1E87, 1E88, 1E89, 1E90, 1E91, 1E92, 1E93, 1E94, 1E95, 1E96, 1E97, 1E98, 1E99,
    1E100, 1E101, 1E102, 1E103, 1E104, 1E105, 1E106, 1E107, 1E108, 1E109, 1E110, 1E111, 1E112, 1E113, 1E114, 1E115, 1E116, 1E117, 1E118, 1E119, 1E120, 1E121, 1E122, 1E123, 1E124, 1E125, 1E126, 1E127, 1E128, 1E129, 1E130, 1E131, 1E132, 1E133, 1E134, 1E135, 1E136, 1E137, 1E138, 1E139, 1E140, 1E141, 1E142, 1E143, 1E144, 1E145, 1E146, 1E147, 1E148, 1E149, 1E150, 1E151, 1E152, 1E153, 1E154, 1E155, 1E156, 1E157, 1E158, 1E159, 1E160, 1E161, 1E162, 1E163, 1E164, 1E165, 1E166, 1E167, 1E168, 1E169, 1E170, 1E171, 1E172, 1E173, 1E174, 1E175, 1E176, 1E177, 1E178, 1E179, 1E180, 1E181, 1E182, 1E183, 1E184, 1E185, 1E186, 1E187, 1E188, 1E189, 1E190, 1E191, 1E192, 1E193, 1E194, 1E195, 1E196, 1E197, 1E198, 1E199,
    1E200, 1E201, 1E202, 1E203, 1E204, 1E205, 1E206, 1E207, 1E208, 1E209, 1E210, 1E211, 1E212, 1E213, 1E214, 1E215, 1E216, 1E217, 1E218, 1E219, 1E220, 1E221, 1E222, 1E223, 1E224, 1E225, 1E226, 1E227, 1E228, 1E229, 1E230, 1E231, 1E232, 1E233, 1E234, 1E235, 1E236, 1E237, 1E238, 1E239, 1E240, 1E241, 1E242, 1E243, 1E244, 1E245, 1E246, 1E247, 1E248, 1E249, 1E250, 1E251, 1E252, 1E253, 1E254, 1E255, 1E256, 1E257, 1E258, 1E259, 1E260, 1E261, 1E262, 1E263, 1E264, 1E265, 1E266, 1E267, 1E268, 1E269, 1E270, 1E271, 1E272, 1E273, 1E274, 1E275, 1E276, 1E277, 1E278, 1E279, 1E280, 1E281, 1E282, 1E283, 1E284, 1E285, 1E286, 1E287, 1E288, 1E289, 1E290, 1E291, 1E292, 1E293, 1E294, 1E295, 1E296, 1E297, 1E298, 1E299,
    1E300, 1E301, 1E302, 1E303, 1E304, 1E305, 1E306, 1E307, 1E308
];
const NEGATIVE_POWERS = [
    1E0, 1E-1, 1E-2, 1E-3, 1E-4, 1E-5, 1E-6, 1E-7, 1E-8, 1E-9, 1E-10, 1E-11, 1E-12, 1E-13, 1E-14, 1E-15, 1E-16, 1E-17, 1E-18, 1E-19, 1E-20, 1E-21, 1E-22, 1E-23, 1E-24, 1E-25, 1E-26, 1E-27, 1E-28, 1E-29, 1E-30, 1E-31, 1E-32, 1E-33, 1E-34, 1E-35, 1E-36, 1E-37, 1E-38, 1E-39, 1E-40, 1E-41, 1E-42, 1E-43, 1E-44, 1E-45, 1E-46, 1E-47, 1E-48, 1E-49, 1E-50, 1E-51, 1E-52, 1E-53, 1E-54, 1E-55, 1E-56, 1E-57, 1E-58, 1E-59, 1E-60, 1E-61, 1E-62, 1E-63, 1E-64, 1E-65, 1E-66, 1E-67, 1E-68, 1E-69, 1E-70, 1E-71, 1E-72, 1E-73, 1E-74, 1E-75, 1E-76, 1E-77, 1E-78, 1E-79, 1E-80, 1E-81, 1E-82, 1E-83, 1E-84, 1E-85, 1E-86, 1E-87, 1E-88, 1E-89, 1E-90, 1E-91, 1E-92, 1E-93, 1E-94, 1E-95, 1E-96, 1E-97, 1E-98, 1E-99,
    1E-100, 1E-101, 1E-102, 1E-103, 1E-104, 1E-105, 1E-106, 1E-107, 1E-108, 1E-109, 1E-110, 1E-111, 1E-112, 1E-113, 1E-114, 1E-115, 1E-116, 1E-117, 1E-118, 1E-119, 1E-120, 1E-121, 1E-122, 1E-123, 1E-124, 1E-125, 1E-126, 1E-127, 1E-128, 1E-129, 1E-130, 1E-131, 1E-132, 1E-133, 1E-134, 1E-135, 1E-136, 1E-137, 1E-138, 1E-139, 1E-140, 1E-141, 1E-142, 1E-143, 1E-144, 1E-145, 1E-146, 1E-147, 1E-148, 1E-149, 1E-150, 1E-151, 1E-152, 1E-153, 1E-154, 1E-155, 1E-156, 1E-157, 1E-158, 1E-159, 1E-160, 1E-161, 1E-162, 1E-163, 1E-164, 1E-165, 1E-166, 1E-167, 1E-168, 1E-169, 1E-170, 1E-171, 1E-172, 1E-173, 1E-174, 1E-175, 1E-176, 1E-177, 1E-178, 1E-179, 1E-180, 1E-181, 1E-182, 1E-183, 1E-184, 1E-185, 1E-186, 1E-187, 1E-188, 1E-189, 1E-190, 1E-191, 1E-192, 1E-193, 1E-194, 1E-195, 1E-196, 1E-197, 1E-198, 1E-199,
    1E-200, 1E-201, 1E-202, 1E-203, 1E-204, 1E-205, 1E-206, 1E-207, 1E-208, 1E-209, 1E-210, 1E-211, 1E-212, 1E-213, 1E-214, 1E-215, 1E-216, 1E-217, 1E-218, 1E-219, 1E-220, 1E-221, 1E-222, 1E-223, 1E-224, 1E-225, 1E-226, 1E-227, 1E-228, 1E-229, 1E-230, 1E-231, 1E-232, 1E-233, 1E-234, 1E-235, 1E-236, 1E-237, 1E-238, 1E-239, 1E-240, 1E-241, 1E-242, 1E-243, 1E-244, 1E-245, 1E-246, 1E-247, 1E-248, 1E-249, 1E-250, 1E-251, 1E-252, 1E-253, 1E-254, 1E-255, 1E-256, 1E-257, 1E-258, 1E-259, 1E-260, 1E-261, 1E-262, 1E-263, 1E-264, 1E-265, 1E-266, 1E-267, 1E-268, 1E-269, 1E-270, 1E-271, 1E-272, 1E-273, 1E-274, 1E-275, 1E-276, 1E-277, 1E-278, 1E-279, 1E-280, 1E-281, 1E-282, 1E-283, 1E-284, 1E-285, 1E-286, 1E-287, 1E-288, 1E-289, 1E-290, 1E-291, 1E-292, 1E-293, 1E-294, 1E-295, 1E-296, 1E-297, 1E-298, 1E-299,
    1E-300, 1E-301, 1E-302, 1E-303, 1E-304, 1E-305, 1E-306, 1E-307, 1E-308, 1E-309, 1E-310, 1E-311, 1E-312, 1E-313, 1E-314, 1E-315, 1E-316, 1E-317, 1E-318, 1E-319, 1E-320, 1E-321, 1E-322, 1E-323, 1E-324
];
/**
 * Returns powers of 10.
 * Unlike the Math.pow this function produces no decimal garbage.
 * @param exp Exponent.
 */
function pow10(exp) {
    // Positive & zero
    if (exp >= 0) {
        if (exp < POSITIVE_POWERS.length) {
            return POSITIVE_POWERS[exp];
        }
        else {
            return Infinity;
        }
    }
    // Negative
    exp = -exp;
    if (exp > 0 && exp < NEGATIVE_POWERS.length) { // if exp==int.MIN_VALUE then changing the sign will overflow and keep the number negative - we need to check for exp > 0 to filter out this corner case
        return NEGATIVE_POWERS[exp];
    }
    else {
        return 0;
    }
}
/**
 * Returns the 10 base logarithm of the number.
 * Unlike Math.log function this produces integer results with no decimal garbage.
 * @param val Positive value or zero.
 */
// eslint-disable-next-line max-lines-per-function
function log10(val) {
    // Fast Log10() algorithm
    if (val > 1 && val < 1E16) {
        if (val < 1E8) {
            if (val < 1E4) {
                if (val < 1E2) {
                    if (val < 1E1) {
                        return 0;
                    }
                    else {
                        return 1;
                    }
                }
                else {
                    if (val < 1E3) {
                        return 2;
                    }
                    else {
                        return 3;
                    }
                }
            }
            else {
                if (val < 1E6) {
                    if (val < 1E5) {
                        return 4;
                    }
                    else {
                        return 5;
                    }
                }
                else {
                    if (val < 1E7) {
                        return 6;
                    }
                    else {
                        return 7;
                    }
                }
            }
        }
        else {
            if (val < 1E12) {
                if (val < 1E10) {
                    if (val < 1E9) {
                        return 8;
                    }
                    else {
                        return 9;
                    }
                }
                else {
                    if (val < 1E11) {
                        return 10;
                    }
                    else {
                        return 11;
                    }
                }
            }
            else {
                if (val < 1E14) {
                    if (val < 1E13) {
                        return 12;
                    }
                    else {
                        return 13;
                    }
                }
                else {
                    if (val < 1E15) {
                        return 14;
                    }
                    else {
                        return 15;
                    }
                }
            }
        }
    }
    if (val > 1E-16 && val < 1) {
        if (val < 1E-8) {
            if (val < 1E-12) {
                if (val < 1E-14) {
                    if (val < 1E-15) {
                        return -16;
                    }
                    else {
                        return -15;
                    }
                }
                else {
                    if (val < 1E-13) {
                        return -14;
                    }
                    else {
                        return -13;
                    }
                }
            }
            else {
                if (val < 1E-10) {
                    if (val < 1E-11) {
                        return -12;
                    }
                    else {
                        return -11;
                    }
                }
                else {
                    if (val < 1E-9) {
                        return -10;
                    }
                    else {
                        return -9;
                    }
                }
            }
        }
        else {
            if (val < 1E-4) {
                if (val < 1E-6) {
                    if (val < 1E-7) {
                        return -8;
                    }
                    else {
                        return -7;
                    }
                }
                else {
                    if (val < 1E-5) {
                        return -6;
                    }
                    else {
                        return -5;
                    }
                }
            }
            else {
                if (val < 1E-2) {
                    if (val < 1E-3) {
                        return -4;
                    }
                    else {
                        return -3;
                    }
                }
                else {
                    if (val < 1E-1) {
                        return -2;
                    }
                    else {
                        return -1;
                    }
                }
            }
        }
    }
    // JS Math provides only natural log function so we need to calc the 10 base logarithm:
    // logb(x) = logk(x)/logk(b);
    const log10 = Math.log(val) / LOG_E_10;
    return floorWithPrecision(log10);
}
/**
 * Returns a power of 10 representing precision of the number based on the number of meaningful decimal digits.
 * For example the precision of 56,263.3767 with the 6 meaningful decimal digit is 0.1.
 * @param x Value.
 * @param decimalDigits How many decimal digits are meaningfull.
 */
function getPrecision(x, decimalDigits) {
    if (decimalDigits === undefined) {
        decimalDigits = DEFAULT_PRECISION_IN_DECIMAL_DIGITS;
    }
    if (!x || !isFinite(x)) {
        return undefined;
    }
    const exp = log10(Math.abs(x));
    if (exp < MIN_EXP) {
        return 0;
    }
    const precisionExp = Math.max(exp - decimalDigits, -NEGATIVE_POWERS.length + 1);
    return pow10(precisionExp);
}
/**
 * Checks if a delta between 2 numbers is less than provided precision.
 * @param x One value.
 * @param y Another value.
 * @param precision Precision value.
 */
function equalWithPrecision(x, y, precision) {
    precision = detectPrecision(precision, x, y);
    return x === y || Math.abs(x - y) < precision;
}
/**
 * Checks if a first value is less than another taking
 * into account the loose precision based equality.
 * @param x One value.
 * @param y Another value.
 * @param precision Precision value.
 */
function lessWithPrecision(x, y, precision) {
    precision = detectPrecision(precision, x, y);
    return x < y && Math.abs(x - y) > precision;
}
/**
 * Checks if a first value is less or equal than another taking
 * into account the loose precision based equality.
 * @param x One value.
 * @param y Another value.
 * @param precision Precision value.
 */
function lessOrEqualWithPrecision(x, y, precision) {
    precision = detectPrecision(precision, x, y);
    return x < y || Math.abs(x - y) < precision;
}
/**
 * Checks if a first value is greater than another taking
 * into account the loose precision based equality.
 * @param x One value.
 * @param y Another value.
 * @param precision Precision value.
 */
function greaterWithPrecision(x, y, precision) {
    precision = detectPrecision(precision, x, y);
    return x > y && Math.abs(x - y) > precision;
}
/**
 * Checks if a first value is greater or equal to another taking
 * into account the loose precision based equality.
 * @param x One value.
 * @param y Another value.
 * @param precision Precision value.
 */
function greaterOrEqualWithPrecision(x, y, precision) {
    precision = detectPrecision(precision, x, y);
    return x > y || Math.abs(x - y) < precision;
}
/**
 * Floors the number unless it's withing the precision distance from the higher int.
 * @param x One value.
 * @param precision Precision value.
 */
function floorWithPrecision(x, precision) {
    precision = precision != null ? precision : DEFAULT_PRECISION;
    const roundX = Math.round(x);
    if (Math.abs(x - roundX) < precision) {
        return roundX;
    }
    else {
        return Math.floor(x);
    }
}
/**
 * Ceils the number unless it's withing the precision distance from the lower int.
 * @param x One value.
 * @param precision Precision value.
 */
function ceilWithPrecision(x, precision) {
    precision = detectPrecision(precision, DEFAULT_PRECISION);
    const roundX = Math.round(x);
    if (Math.abs(x - roundX) < precision) {
        return roundX;
    }
    else {
        return Math.ceil(x);
    }
}
/**
 * Floors the number to the provided precision.
 * For example 234,578 floored to 1,000 precision is 234,000.
 * @param x One value.
 * @param precision Precision value.
 */
function floorToPrecision(x, precision) {
    precision = detectPrecision(precision, DEFAULT_PRECISION);
    if (precision === 0 || x === 0) {
        return x;
    }
    // Precision must be a Power of 10
    return Math.floor(x / precision) * precision;
}
/**
 * Ceils the number to the provided precision.
 * For example 234,578 floored to 1,000 precision is 235,000.
 * @param x One value.
 * @param precision Precision value.
 */
function ceilToPrecision(x, precision) {
    precision = detectPrecision(precision, DEFAULT_PRECISION);
    if (precision === 0 || x === 0) {
        return x;
    }
    // Precision must be a Power of 10
    return Math.ceil(x / precision) * precision;
}
/**
 * Rounds the number to the provided precision.
 * For example 234,578 floored to 1,000 precision is 235,000.
 * @param x One value.
 * @param precision Precision value.
 */
function roundToPrecision(x, precision) {
    precision = detectPrecision(precision, DEFAULT_PRECISION);
    if (precision === 0 || x === 0) {
        return x;
    }
    // Precision must be a Power of 10
    let result = Math.round(x / precision) * precision;
    const decimalDigits = Math.round(log10(Math.abs(x)) - log10(precision)) + 1;
    if (decimalDigits > 0 && decimalDigits < 16) {
        result = parseFloat(result.toPrecision(decimalDigits));
    }
    return result;
}
/**
 * Returns the value making sure that it's restricted to the provided range.
 * @param x One value.
 * @param min Range min boundary.
 * @param max Range max boundary.
 */
function ensureInRange(x, min, max) {
    if (x === undefined || x === null) {
        return x;
    }
    if (x < min) {
        return min;
    }
    if (x > max) {
        return max;
    }
    return x;
}
/**
 * Rounds the value - this method is actually faster than Math.round - used in the graphics utils.
 * @param x Value to round.
 */
function round(x) {
    return (0.5 + x) << 0;
}
/**
 * Projects the value from the source range into the target range.
 * @param value Value to project.
 * @param fromMin Minimum of the source range.
 * @param toMin Minimum of the target range.
 * @param toMax Maximum of the target range.
 */
function project(value, fromMin, fromSize, toMin, toSize) {
    if (fromSize === 0 || toSize === 0) {
        if (fromMin <= value && value <= fromMin + fromSize) {
            return toMin;
        }
        else {
            return NaN;
        }
    }
    const relativeX = (value - fromMin) / fromSize;
    const projectedX = toMin + relativeX * toSize;
    return projectedX;
}
/**
 * Removes decimal noise.
 * @param value Value to be processed.
 */
function removeDecimalNoise(value) {
    return roundToPrecision(value, getPrecision(value));
}
/**
 * Checks whether the number is integer.
 * @param value Value to be checked.
 */
function isInteger(value) {
    return value !== null && value % 1 === 0;
}
/**
 * Dividing by increment will give us count of increments
 * Round out the rough edges into even integer
 * Multiply back by increment to get rounded value
 * e.g. Rounder.toIncrement(0.647291, 0.05) => 0.65
 * @param value - value to round to nearest increment
 * @param increment - smallest increment to round toward
 */
function toIncrement(value, increment) {
    return Math.round(value / increment) * increment;
}
/**
 * Overrides the given precision with defaults if necessary. Exported only for tests
 *
 * precision defined returns precision
 * x defined with y undefined returns twelve digits of precision based on x
 * x defined but zero with y defined; returns twelve digits of precision based on y
 * x and y defined retursn twelve digits of precision based on the minimum of the two
 * if no applicable precision is found based on those (such as x and y being zero), the default precision is used
 */
function detectPrecision(precision, x, y) {
    if (precision !== undefined) {
        return precision;
    }
    let calculatedPrecision;
    if (!y) {
        calculatedPrecision = getPrecision(x);
    }
    else if (!x) {
        calculatedPrecision = getPrecision(y);
    }
    else {
        calculatedPrecision = getPrecision(Math.min(Math.abs(x), Math.abs(y)));
    }
    return calculatedPrecision || DEFAULT_PRECISION;
}
//# sourceMappingURL=double.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/arrayExtensions.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/arrayExtensions.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clear": () => (/* binding */ clear),
/* harmony export */   "copy": () => (/* binding */ copy),
/* harmony export */   "createWithId": () => (/* binding */ createWithId),
/* harmony export */   "createWithName": () => (/* binding */ createWithName),
/* harmony export */   "diff": () => (/* binding */ diff),
/* harmony export */   "distinct": () => (/* binding */ distinct),
/* harmony export */   "emptyToNull": () => (/* binding */ emptyToNull),
/* harmony export */   "ensureArray": () => (/* binding */ ensureArray),
/* harmony export */   "extendWithId": () => (/* binding */ extendWithId),
/* harmony export */   "extendWithName": () => (/* binding */ extendWithName),
/* harmony export */   "findItemWithName": () => (/* binding */ findItemWithName),
/* harmony export */   "findWithId": () => (/* binding */ findWithId),
/* harmony export */   "indexOf": () => (/* binding */ indexOf),
/* harmony export */   "indexWithName": () => (/* binding */ indexWithName),
/* harmony export */   "insertSorted": () => (/* binding */ insertSorted),
/* harmony export */   "intersect": () => (/* binding */ intersect),
/* harmony export */   "isArrayOrInheritedArray": () => (/* binding */ isArrayOrInheritedArray),
/* harmony export */   "isInArray": () => (/* binding */ isInArray),
/* harmony export */   "isSorted": () => (/* binding */ isSorted),
/* harmony export */   "isSortedNumeric": () => (/* binding */ isSortedNumeric),
/* harmony export */   "isUndefinedOrEmpty": () => (/* binding */ isUndefinedOrEmpty),
/* harmony export */   "range": () => (/* binding */ range),
/* harmony export */   "removeFirst": () => (/* binding */ removeFirst),
/* harmony export */   "rotate": () => (/* binding */ rotate),
/* harmony export */   "sequenceEqual": () => (/* binding */ sequenceEqual),
/* harmony export */   "swap": () => (/* binding */ swap),
/* harmony export */   "take": () => (/* binding */ take),
/* harmony export */   "union": () => (/* binding */ union),
/* harmony export */   "unionSingle": () => (/* binding */ unionSingle)
/* harmony export */ });
/**
 * Returns items that exist in target and other.
 */
function intersect(target, other) {
    const result = [];
    for (let i = target.length - 1; i >= 0; --i) {
        if (other.indexOf(target[i]) !== -1) {
            result.push(target[i]);
        }
    }
    return result;
}
/**
 * Return elements exists in target but not exists in other.
 */
function diff(target, other) {
    const result = [];
    for (let i = target.length - 1; i >= 0; --i) {
        const value = target[i];
        if (other.indexOf(value) === -1) {
            result.push(value);
        }
    }
    return result;
}
/**
 * Return an array with only the distinct items in the source.
 */
function distinct(source) {
    const result = [];
    for (let i = 0, len = source.length; i < len; i++) {
        const value = source[i];
        if (result.indexOf(value) === -1) {
            result.push(value);
        }
    }
    return result;
}
/**
 * Pushes content of source onto target,
 * for parts of course that do not already exist in target.
 */
function union(target, source) {
    for (let i = 0, len = source.length; i < len; ++i) {
        unionSingle(target, source[i]);
    }
}
/**
 * Pushes value onto target, if value does not already exist in target.
 */
function unionSingle(target, value) {
    if (target.indexOf(value) < 0) {
        target.push(value);
    }
}
/**
 * Returns an array with a range of items from source,
 * including the startIndex & endIndex.
 */
function range(source, startIndex, endIndex) {
    const result = [];
    for (let i = startIndex; i <= endIndex; ++i) {
        result.push(source[i]);
    }
    return result;
}
/**
 * Returns an array that includes items from source, up to the specified count.
 */
function take(source, count) {
    const result = [];
    for (let i = 0; i < count; ++i) {
        result.push(source[i]);
    }
    return result;
}
function copy(source) {
    return take(source, source.length);
}
/**
  * Returns a value indicating whether the arrays have the same values in the same sequence.
  */
function sequenceEqual(left, right, comparison) {
    // Normalize falsy to null
    if (!left) {
        left = null;
    }
    if (!right) {
        right = null;
    }
    // T can be same as U, and it is possible for left and right to be the same array object...
    if (left === right) {
        return true;
    }
    if (!!left !== !!right) {
        return false;
    }
    const len = left.length;
    if (len !== right.length) {
        return false;
    }
    let i = 0;
    while (i < len && comparison(left[i], right[i])) {
        ++i;
    }
    return i === len;
}
/**
 * Returns null if the specified array is empty.
 * Otherwise returns the specified array.
 */
function emptyToNull(array) {
    if (array && array.length === 0) {
        return null;
    }
    return array;
}
function indexOf(array, predicate) {
    for (let i = 0, len = array.length; i < len; ++i) {
        if (predicate(array[i])) {
            return i;
        }
    }
    return -1;
}
/**
 * Returns a copy of the array rotated by the specified offset.
 */
function rotate(array, offset) {
    if (offset === 0)
        return array.slice();
    const rotated = array.slice(offset);
    Array.prototype.push.apply(rotated, array.slice(0, offset));
    return rotated;
}
function createWithId() {
    return extendWithId([]);
}
function extendWithId(array) {
    const extended = array;
    extended.withId = withId;
    return extended;
}
/**
 * Finds and returns the first item with a matching ID.
 */
function findWithId(array, id) {
    for (let i = 0, len = array.length; i < len; i++) {
        const item = array[i];
        if (item.id === id)
            return item;
    }
}
function withId(id) {
    return findWithId(this, id);
}
function createWithName() {
    return extendWithName([]);
}
function extendWithName(array) {
    const extended = array;
    extended.withName = withName;
    return extended;
}
function findItemWithName(array, name) {
    const index = indexWithName(array, name);
    if (index >= 0)
        return array[index];
}
function indexWithName(array, name) {
    for (let i = 0, len = array.length; i < len; i++) {
        const item = array[i];
        if (item.name === name)
            return i;
    }
    return -1;
}
/**
 * Inserts a number in sorted order into a list of numbers already in sorted order.
 * @returns True if the item was added, false if it already existed.
 */
function insertSorted(list, value) {
    const len = list.length;
    // NOTE: iterate backwards because incoming values tend to be sorted already.
    for (let i = len - 1; i >= 0; i--) {
        const diff = list[i] - value;
        if (diff === 0)
            return false;
        if (diff > 0)
            continue;
        // diff < 0
        list.splice(i + 1, 0, value);
        return true;
    }
    list.unshift(value);
    return true;
}
/**
 * Removes the first occurrence of a value from a list if it exists.
 * @returns True if the value was removed, false if it did not exist in the list.
 */
function removeFirst(list, value) {
    const index = list.indexOf(value);
    if (index < 0)
        return false;
    list.splice(index, 1);
    return true;
}
/**
 * Finds and returns the first item with a matching name.
 */
function withName(name) {
    return findItemWithName(this, name);
}
/**
 * Deletes all items from the array.
 */
function clear(array) {
    if (!array)
        return;
    while (array.length > 0)
        array.pop();
}
function isUndefinedOrEmpty(array) {
    if (!array || array.length === 0) {
        return true;
    }
    return false;
}
function swap(array, firstIndex, secondIndex) {
    const temp = array[firstIndex];
    array[firstIndex] = array[secondIndex];
    array[secondIndex] = temp;
}
function isInArray(array, lookupItem, compareCallback) {
    return array.some(item => compareCallback(item, lookupItem));
}
/** Checks if the given object is an Array, and looking all the way up the prototype chain. */
function isArrayOrInheritedArray(obj) {
    let nextPrototype = obj;
    while (nextPrototype != null) {
        if (Array.isArray(nextPrototype))
            return true;
        nextPrototype = Object.getPrototypeOf(nextPrototype);
    }
    return false;
}
/**
 * Returns true if the specified values array is sorted in an order as determined by the specified compareFunction.
 */
function isSorted(values, compareFunction) {
    const ilen = values.length;
    if (ilen >= 2) {
        for (let i = 1; i < ilen; i++) {
            if (compareFunction(values[i - 1], values[i]) > 0) {
                return false;
            }
        }
    }
    return true;
}
/**
 * Returns true if the specified number values array is sorted in ascending order
 * (or descending order if the specified descendingOrder is truthy).
 */
function isSortedNumeric(values, descendingOrder) {
    const compareFunction = descendingOrder ?
        (a, b) => b - a :
        (a, b) => a - b;
    return isSorted(values, compareFunction);
}
/**
 * Ensures that the given T || T[] is in array form, either returning the array or
 * converting single items into an array of length one.
 */
function ensureArray(value) {
    if (Array.isArray(value)) {
        return value;
    }
    return [value];
}
//# sourceMappingURL=arrayExtensions.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/enumExtensions.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/enumExtensions.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getBitCount": () => (/* binding */ getBitCount),
/* harmony export */   "hasFlag": () => (/* binding */ hasFlag),
/* harmony export */   "resetFlag": () => (/* binding */ resetFlag),
/* harmony export */   "setFlag": () => (/* binding */ setFlag),
/* harmony export */   "toString": () => (/* binding */ toString)
/* harmony export */ });
/* harmony import */ var _double__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../double */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.

/**
 * Extensions for Enumerations.
 */
/**
 * Gets a value indicating whether the value has the bit flags set.
 */
function hasFlag(value, flag) {
    return (value & flag) === flag;
}
/**
 * Sets a value of a flag without modifying any other flags.
 */
function setFlag(value, flag) {
    return value |= flag;
}
/**
 * Resets a value of a flag without modifying any other flags.
 */
function resetFlag(value, flag) {
    return value &= ~flag;
}
/**
 * According to the TypeScript Handbook, this is safe to do.
 */
function toString(enumType, value) {
    return enumType[value];
}
/**
 * Returns the number of 1's in the specified value that is a set of binary bit flags.
 */
function getBitCount(value) {
    if (!(0,_double__WEBPACK_IMPORTED_MODULE_0__.isInteger)(value))
        return 0;
    let bitCount = 0;
    let shiftingValue = value;
    while (shiftingValue !== 0) {
        if ((shiftingValue & 1) === 1) {
            bitCount++;
        }
        shiftingValue = shiftingValue >>> 1;
    }
    return bitCount;
}
//# sourceMappingURL=enumExtensions.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/logicExtensions.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/logicExtensions.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "XOR": () => (/* binding */ XOR)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
function XOR(a, b) {
    return (a || b) && !(a && b);
}
//# sourceMappingURL=logicExtensions.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/regExpExtensions.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/regExpExtensions.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "run": () => (/* binding */ run)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
/**
 * Runs exec on regex starting from 0 index
 * This is the expected behavior but RegExp actually remember
 * the last index they stopped at (found match at) and will
 * return unexpected results when run in sequence.
 * @param regex - regular expression object
 * @param value - string to search wiht regex
 * @param start - index within value to start regex
 */
function run(regex, value, start) {
    regex.lastIndex = start || 0;
    return regex.exec(value);
}
//# sourceMappingURL=regExpExtensions.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/stringExtensions.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/stringExtensions.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "endsWith": () => (/* binding */ endsWith)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/**
 * Extensions to String class.
 */
/**
 * Checks if a string ends with a sub-string.
 */
function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
}
//# sourceMappingURL=stringExtensions.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arrayExtensions": () => (/* reexport module object */ _extensions_arrayExtensions__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   "double": () => (/* reexport module object */ _double__WEBPACK_IMPORTED_MODULE_7__),
/* harmony export */   "enumExtensions": () => (/* reexport module object */ _extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   "jsonComparer": () => (/* reexport module object */ _jsonComparer__WEBPACK_IMPORTED_MODULE_8__),
/* harmony export */   "logicExtensions": () => (/* reexport module object */ _extensions_logicExtensions__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   "numericSequence": () => (/* reexport module object */ _numericSequence_numericSequence__WEBPACK_IMPORTED_MODULE_5__),
/* harmony export */   "numericSequenceRange": () => (/* reexport module object */ _numericSequence_numericSequenceRange__WEBPACK_IMPORTED_MODULE_6__),
/* harmony export */   "pixelConverter": () => (/* reexport module object */ _pixelConverter__WEBPACK_IMPORTED_MODULE_9__),
/* harmony export */   "prototype": () => (/* reexport module object */ _prototype__WEBPACK_IMPORTED_MODULE_10__),
/* harmony export */   "regExpExtensions": () => (/* reexport module object */ _extensions_regExpExtensions__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   "stringExtensions": () => (/* reexport module object */ _extensions_stringExtensions__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   "textSizeDefaults": () => (/* reexport module object */ _textSizeDefaults__WEBPACK_IMPORTED_MODULE_11__),
/* harmony export */   "valueType": () => (/* reexport module object */ _valueType__WEBPACK_IMPORTED_MODULE_12__)
/* harmony export */ });
/* harmony import */ var _extensions_arrayExtensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extensions/arrayExtensions */ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/arrayExtensions.js");
/* harmony import */ var _extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extensions/enumExtensions */ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/enumExtensions.js");
/* harmony import */ var _extensions_logicExtensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extensions/logicExtensions */ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/logicExtensions.js");
/* harmony import */ var _extensions_regExpExtensions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extensions/regExpExtensions */ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/regExpExtensions.js");
/* harmony import */ var _extensions_stringExtensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extensions/stringExtensions */ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/stringExtensions.js");
/* harmony import */ var _numericSequence_numericSequence__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./numericSequence/numericSequence */ "./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequence.js");
/* harmony import */ var _numericSequence_numericSequenceRange__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./numericSequence/numericSequenceRange */ "./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequenceRange.js");
/* harmony import */ var _double__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./double */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/* harmony import */ var _jsonComparer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./jsonComparer */ "./node_modules/powerbi-visuals-utils-typeutils/lib/jsonComparer.js");
/* harmony import */ var _pixelConverter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pixelConverter */ "./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js");
/* harmony import */ var _prototype__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./prototype */ "./node_modules/powerbi-visuals-utils-typeutils/lib/prototype.js");
/* harmony import */ var _textSizeDefaults__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./textSizeDefaults */ "./node_modules/powerbi-visuals-utils-typeutils/lib/textSizeDefaults.js");
/* harmony import */ var _valueType__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./valueType */ "./node_modules/powerbi-visuals-utils-typeutils/lib/valueType.js");














//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/jsonComparer.js":
/*!**************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/jsonComparer.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "equals": () => (/* binding */ equals)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
/**
 * Performs JSON-style comparison of two objects.
 */
function equals(x, y) {
    if (x === y)
        return true;
    return JSON.stringify(x) === JSON.stringify(y);
}
//# sourceMappingURL=jsonComparer.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequence.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequence.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NumericSequence": () => (/* binding */ NumericSequence)
/* harmony export */ });
/* harmony import */ var _double__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../double */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/* harmony import */ var _numericSequenceRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./numericSequenceRange */ "./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequenceRange.js");
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */


class NumericSequence {
    // eslint-disable-next-line max-lines-per-function
    static calculate(range, expectedCount, maxAllowedMargin, minPower, useZeroRefPoint, steps) {
        const result = new NumericSequence();
        if (expectedCount === undefined)
            expectedCount = 10;
        else
            expectedCount = _double__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(expectedCount, NumericSequence.MIN_COUNT, NumericSequence.MAX_COUNT);
        if (minPower === undefined)
            minPower = _double__WEBPACK_IMPORTED_MODULE_0__.MIN_EXP;
        if (useZeroRefPoint === undefined)
            useZeroRefPoint = false;
        if (maxAllowedMargin === undefined)
            maxAllowedMargin = 1;
        if (steps === undefined)
            steps = [1, 2, 5];
        // Handle single stop case
        if (range.forcedSingleStop) {
            result.interval = range.getSize();
            result.intervalOffset = result.interval - (range.forcedSingleStop - range.min);
            result.min = range.min;
            result.max = range.max;
            result.sequence = [range.forcedSingleStop];
            return result;
        }
        let interval = 0;
        let min = 0;
        let max = 9;
        const canExtendMin = maxAllowedMargin > 0 && !range.hasFixedMin;
        const canExtendMax = maxAllowedMargin > 0 && !range.hasFixedMax;
        const size = range.getSize();
        let exp = _double__WEBPACK_IMPORTED_MODULE_0__.log10(size);
        // Account for Exp of steps
        const stepExp = _double__WEBPACK_IMPORTED_MODULE_0__.log10(steps[0]);
        exp = exp - stepExp;
        // Account for MaxCount
        const expectedCountExp = _double__WEBPACK_IMPORTED_MODULE_0__.log10(expectedCount);
        exp = exp - expectedCountExp;
        // Account for MinPower
        exp = Math.max(exp, minPower - stepExp + 1);
        let count = undefined;
        // Create array of "good looking" numbers
        if (interval !== 0) {
            // If explicit interval is defined - use it instead of the steps array.
            const power = _double__WEBPACK_IMPORTED_MODULE_0__.pow10(exp);
            const roundMin = _double__WEBPACK_IMPORTED_MODULE_0__.floorToPrecision(range.min, power);
            const roundMax = _double__WEBPACK_IMPORTED_MODULE_0__.ceilToPrecision(range.max, power);
            const roundRange = _numericSequenceRange__WEBPACK_IMPORTED_MODULE_1__.NumericSequenceRange.calculateFixedRange(roundMin, roundMax);
            roundRange.shrinkByStep(range, interval);
            min = roundRange.min;
            max = roundRange.max;
            count = Math.floor(roundRange.getSize() / interval);
        }
        else {
            // No interval defined -> find optimal interval
            let dexp;
            for (dexp = 0; dexp < 3; dexp++) {
                const e = exp + dexp;
                const power = _double__WEBPACK_IMPORTED_MODULE_0__.pow10(e);
                const roundMin = _double__WEBPACK_IMPORTED_MODULE_0__.floorToPrecision(range.min, power);
                const roundMax = _double__WEBPACK_IMPORTED_MODULE_0__.ceilToPrecision(range.max, power);
                // Go throught the steps array looking for the smallest step that produces the right interval count.
                const stepsCount = steps.length;
                const stepPower = _double__WEBPACK_IMPORTED_MODULE_0__.pow10(e - 1);
                for (let i = 0; i < stepsCount; i++) {
                    const step = steps[i] * stepPower;
                    const roundRange = _numericSequenceRange__WEBPACK_IMPORTED_MODULE_1__.NumericSequenceRange.calculateFixedRange(roundMin, roundMax, useZeroRefPoint);
                    roundRange.shrinkByStep(range, step);
                    // If the range is based on Data we might need to extend it to provide nice data margins.
                    if (canExtendMin && range.min === roundRange.min && maxAllowedMargin >= 1)
                        roundRange.min -= step;
                    if (canExtendMax && range.max === roundRange.max && maxAllowedMargin >= 1)
                        roundRange.max += step;
                    // Count the intervals
                    count = _double__WEBPACK_IMPORTED_MODULE_0__.ceilWithPrecision(roundRange.getSize() / step, _double__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PRECISION);
                    if (count <= expectedCount || (dexp === 2 && i === stepsCount - 1) || (expectedCount === 1 && count === 2 && (step > range.getSize() || (range.min < 0 && range.max > 0 && step * 2 >= range.getSize())))) {
                        interval = step;
                        min = roundRange.min;
                        max = roundRange.max;
                        break;
                    }
                }
                // Increase the scale power until the interval is found
                if (interval !== 0)
                    break;
            }
        }
        // Avoid extreme count cases (>1000 ticks)
        if (count > expectedCount * 32 || count > NumericSequence.MAX_COUNT) {
            count = Math.min(expectedCount * 32, NumericSequence.MAX_COUNT);
            interval = (max - min) / count;
        }
        result.min = min;
        result.max = max;
        result.interval = interval;
        result.intervalOffset = min - range.min;
        result.maxAllowedMargin = maxAllowedMargin;
        result.canExtendMin = canExtendMin;
        result.canExtendMax = canExtendMax;
        // Fill in the Sequence
        const precision = _double__WEBPACK_IMPORTED_MODULE_0__.getPrecision(interval, 0);
        result.precision = precision;
        const sequence = [];
        let x = _double__WEBPACK_IMPORTED_MODULE_0__.roundToPrecision(min, precision);
        sequence.push(x);
        for (let i = 0; i < count; i++) {
            x = _double__WEBPACK_IMPORTED_MODULE_0__.roundToPrecision(x + interval, precision);
            sequence.push(x);
        }
        result.sequence = sequence;
        result.trimMinMax(range.min, range.max);
        return result;
    }
    /**
     * Calculates the sequence of int numbers which are mapped to the multiples of the units grid.
     * @min - The minimum of the range.
     * @max - The maximum of the range.
     * @maxCount - The max count of intervals.
     * @steps - array of intervals.
     */
    static calculateUnits(min, max, maxCount, steps) {
        // Initialization actions
        maxCount = _double__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(maxCount, NumericSequence.MIN_COUNT, NumericSequence.MAX_COUNT);
        if (min === max) {
            max = min + 1;
        }
        let stepCount = 0;
        let step = 0;
        // Calculate step
        for (let i = 0; i < steps.length; i++) {
            step = steps[i];
            const maxStepCount = _double__WEBPACK_IMPORTED_MODULE_0__.ceilWithPrecision(max / step);
            const minStepCount = _double__WEBPACK_IMPORTED_MODULE_0__.floorWithPrecision(min / step);
            stepCount = maxStepCount - minStepCount;
            if (stepCount <= maxCount) {
                break;
            }
        }
        // Calculate the offset
        let offset = -min;
        offset = offset % step;
        // Create sequence
        const result = new NumericSequence();
        result.sequence = [];
        for (let x = min + offset;; x += step) {
            result.sequence.push(x);
            if (x >= max)
                break;
        }
        result.interval = step;
        result.intervalOffset = offset;
        result.min = result.sequence[0];
        result.max = result.sequence[result.sequence.length - 1];
        return result;
    }
    trimMinMax(min, max) {
        const minMargin = (min - this.min) / this.interval;
        const maxMargin = (this.max - max) / this.interval;
        const marginPrecision = 0.001;
        if (!this.canExtendMin || (minMargin > this.maxAllowedMargin && minMargin > marginPrecision)) {
            this.min = min;
        }
        if (!this.canExtendMax || (maxMargin > this.maxAllowedMargin && maxMargin > marginPrecision)) {
            this.max = max;
        }
    }
}
NumericSequence.MIN_COUNT = 1;
NumericSequence.MAX_COUNT = 1000;
//# sourceMappingURL=numericSequence.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequenceRange.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequenceRange.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NumericSequenceRange": () => (/* binding */ NumericSequenceRange),
/* harmony export */   "hasValue": () => (/* binding */ hasValue)
/* harmony export */ });
/* harmony import */ var _double__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../double */ "./node_modules/powerbi-visuals-utils-typeutils/lib/double.js");
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

class NumericSequenceRange {
    _ensureIncludeZero() {
        if (this.includeZero) {
            // fixed min and max has higher priority than includeZero
            if (this.min > 0 && !this.hasFixedMin) {
                this.min = 0;
            }
            if (this.max < 0 && !this.hasFixedMax) {
                this.max = 0;
            }
        }
    }
    _ensureNotEmpty() {
        if (this.min === this.max) {
            if (!this.min) {
                this.min = 0;
                this.max = NumericSequenceRange.DEFAULT_MAX;
                this.hasFixedMin = true;
                this.hasFixedMax = true;
            }
            else {
                // We are dealing with a single data value (includeZero is not set)
                // In order to fix the range we need to extend it in both directions by half of the interval.
                // Interval is calculated based on the number:
                // 1. Integers below 10,000 are extended by 0.5: so the [2006-2006] empty range is extended to [2005.5-2006.5] range and the ForsedSingleStop=2006
                // 2. Other numbers are extended by half of their power: [700,001-700,001] => [650,001-750,001] and the ForsedSingleStop=null as we want the intervals to be calculated to cover the range.
                const value = this.min;
                const exp = _double__WEBPACK_IMPORTED_MODULE_0__.log10(Math.abs(value));
                let step;
                if (exp >= 0 && exp < 4) {
                    step = 0.5;
                    this.forcedSingleStop = value;
                }
                else {
                    step = _double__WEBPACK_IMPORTED_MODULE_0__.pow10(exp) / 2;
                    this.forcedSingleStop = null;
                }
                this.min = value - step;
                this.max = value + step;
            }
        }
    }
    _ensureDirection() {
        if (this.min > this.max) {
            const temp = this.min;
            this.min = this.max;
            this.max = temp;
        }
    }
    getSize() {
        return this.max - this.min;
    }
    shrinkByStep(range, step) {
        let oldCount = this.min / step;
        let newCount = range.min / step;
        let deltaCount = Math.floor(newCount - oldCount);
        this.min += deltaCount * step;
        oldCount = this.max / step;
        newCount = range.max / step;
        deltaCount = Math.ceil(newCount - oldCount);
        this.max += deltaCount * step;
    }
    static calculate(dataMin, dataMax, fixedMin, fixedMax, includeZero) {
        const result = new NumericSequenceRange();
        result.includeZero = includeZero ? true : false;
        result.hasDataRange = hasValue(dataMin) && hasValue(dataMax);
        result.hasFixedMin = hasValue(fixedMin);
        result.hasFixedMax = hasValue(fixedMax);
        dataMin = _double__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(dataMin, NumericSequenceRange.MIN_SUPPORTED_DOUBLE, NumericSequenceRange.MAX_SUPPORTED_DOUBLE);
        dataMax = _double__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(dataMax, NumericSequenceRange.MIN_SUPPORTED_DOUBLE, NumericSequenceRange.MAX_SUPPORTED_DOUBLE);
        // Calculate the range using the min, max, dataRange
        if (result.hasFixedMin && result.hasFixedMax) {
            result.min = fixedMin;
            result.max = fixedMax;
        }
        else if (result.hasFixedMin) {
            result.min = fixedMin;
            result.max = dataMax > fixedMin ? dataMax : fixedMin;
        }
        else if (result.hasFixedMax) {
            result.min = dataMin < fixedMax ? dataMin : fixedMax;
            result.max = fixedMax;
        }
        else if (result.hasDataRange) {
            result.min = dataMin;
            result.max = dataMax;
        }
        else {
            result.min = 0;
            result.max = 0;
        }
        result._ensureIncludeZero();
        result._ensureNotEmpty();
        result._ensureDirection();
        if (result.min === 0) {
            result.hasFixedMin = true; // If the range starts from zero we should prevent extending the intervals into the negative range
        }
        else if (result.max === 0) {
            result.hasFixedMax = true; // If the range ends at zero we should prevent extending the intervals into the positive range
        }
        return result;
    }
    static calculateDataRange(dataMin, dataMax, includeZero) {
        if (!hasValue(dataMin) || !hasValue(dataMax)) {
            return NumericSequenceRange.calculateFixedRange(0, NumericSequenceRange.DEFAULT_MAX);
        }
        else {
            return NumericSequenceRange.calculate(dataMin, dataMax, null, null, includeZero);
        }
    }
    static calculateFixedRange(fixedMin, fixedMax, includeZero) {
        const result = new NumericSequenceRange();
        result.hasDataRange = false;
        result.includeZero = includeZero;
        result.min = fixedMin;
        result.max = fixedMax;
        result._ensureIncludeZero();
        result._ensureNotEmpty();
        result._ensureDirection();
        result.hasFixedMin = true;
        result.hasFixedMax = true;
        return result;
    }
}
NumericSequenceRange.DEFAULT_MAX = 10;
NumericSequenceRange.MIN_SUPPORTED_DOUBLE = -1E307;
NumericSequenceRange.MAX_SUPPORTED_DOUBLE = 1E307;
/** Note: Exported for testability */
function hasValue(value) {
    return value !== undefined && value !== null;
}
//# sourceMappingURL=numericSequenceRange.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js":
/*!****************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromPoint": () => (/* binding */ fromPoint),
/* harmony export */   "fromPointToPixel": () => (/* binding */ fromPointToPixel),
/* harmony export */   "toPoint": () => (/* binding */ toPoint),
/* harmony export */   "toString": () => (/* binding */ toString)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
const PxPtRatio = 4 / 3;
const PixelString = "px";
/**
 * Appends 'px' to the end of number value for use as pixel string in styles
 */
function toString(px) {
    return px + PixelString;
}
/**
 * Converts point value (pt) to pixels
 * Returns a string for font-size property
 * e.g. fromPoint(8) => '24px'
 */
function fromPoint(pt) {
    return toString(fromPointToPixel(pt));
}
/**
 * Converts point value (pt) to pixels
 * Returns a number for font-size property
 * e.g. fromPoint(8) => 24px
 */
function fromPointToPixel(pt) {
    return (PxPtRatio * pt);
}
/**
 * Converts pixel value (px) to pt
 * e.g. toPoint(24) => 8
 */
function toPoint(px) {
    return px / PxPtRatio;
}
//# sourceMappingURL=pixelConverter.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/prototype.js":
/*!***********************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/prototype.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "inherit": () => (/* binding */ inherit),
/* harmony export */   "inheritSingle": () => (/* binding */ inheritSingle),
/* harmony export */   "overrideArray": () => (/* binding */ overrideArray)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/**
 * Returns a new object with the provided obj as its prototype.
 */
function inherit(obj, extension) {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    function wrapCtor() { }
    wrapCtor.prototype = obj;
    const inherited = new wrapCtor();
    if (extension)
        extension(inherited);
    return inherited;
}
/**
 * Returns a new object with the provided obj as its prototype
 * if, and only if, the prototype has not been previously set
 */
function inheritSingle(obj) {
    const proto = Object.getPrototypeOf(obj);
    if (proto === Object.prototype || proto === Array.prototype)
        obj = inherit(obj);
    return obj;
}
/**
 * Uses the provided callback function to selectively replace contents in the provided array.
 * @return A new array with those values overriden
 * or undefined if no overrides are necessary.
 */
function overrideArray(prototype, override) {
    if (!prototype)
        return;
    let overwritten;
    for (let i = 0, len = prototype.length; i < len; i++) {
        const value = override(prototype[i]);
        if (value) {
            if (!overwritten)
                overwritten = inherit(prototype);
            overwritten[i] = value;
        }
    }
    return overwritten;
}
//# sourceMappingURL=prototype.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/textSizeDefaults.js":
/*!******************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/textSizeDefaults.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextSizeMax": () => (/* binding */ TextSizeMax),
/* harmony export */   "TextSizeMin": () => (/* binding */ TextSizeMin),
/* harmony export */   "getScale": () => (/* binding */ getScale)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
/**
 * Values are in terms of 'pt'
 * Convert to pixels using PixelConverter.fromPoint
 */
/**
 * Stored in terms of 'pt'
 * Convert to pixels using PixelConverter.fromPoint
 */
const TextSizeMin = 8;
/**
 * Stored in terms of 'pt'
 * Convert to pixels using PixelConverter.fromPoint
 */
const TextSizeMax = 40;
const TextSizeRange = TextSizeMax - TextSizeMin;
/**
 * Returns the percentage of this value relative to the TextSizeMax
 * @param textSize - should be given in terms of 'pt'
 */
function getScale(textSize) {
    return (textSize - TextSizeMin) / TextSizeRange;
}
//# sourceMappingURL=textSizeDefaults.js.map

/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-typeutils/lib/valueType.js":
/*!***********************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-typeutils/lib/valueType.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExtendedType": () => (/* binding */ ExtendedType),
/* harmony export */   "FormattingType": () => (/* binding */ FormattingType),
/* harmony export */   "GeographyType": () => (/* binding */ GeographyType),
/* harmony export */   "MiscellaneousType": () => (/* binding */ MiscellaneousType),
/* harmony export */   "PrimitiveType": () => (/* binding */ PrimitiveType),
/* harmony export */   "ScriptType": () => (/* binding */ ScriptType),
/* harmony export */   "TemporalType": () => (/* binding */ TemporalType),
/* harmony export */   "ValueType": () => (/* binding */ ValueType)
/* harmony export */ });
/* harmony import */ var _extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extensions/enumExtensions */ "./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/enumExtensions.js");
/* harmony import */ var _jsonComparer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsonComparer */ "./node_modules/powerbi-visuals-utils-typeutils/lib/jsonComparer.js");
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// powerbi.extensibility.utils.type


/** Describes a data value type, including a primitive type and extended type if any (derived from data category). */
class ValueType {
    /** Do not call the ValueType constructor directly. Use the ValueType.fromXXX methods. */
    constructor(underlyingType, category, enumType, variantTypes) {
        this.underlyingType = underlyingType;
        this.category = category;
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Temporal)) {
            this.temporalType = new TemporalType(underlyingType);
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Geography)) {
            this.geographyType = new GeographyType(underlyingType);
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Miscellaneous)) {
            this.miscType = new MiscellaneousType(underlyingType);
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Formatting)) {
            this.formattingType = new FormattingType(underlyingType);
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Enumeration)) {
            this.enumType = enumType;
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Scripting)) {
            this.scriptingType = new ScriptType(underlyingType);
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Variant)) {
            this.variationTypes = variantTypes;
        }
    }
    /** Creates or retrieves a ValueType object based on the specified ValueTypeDescriptor. */
    static fromDescriptor(descriptor) {
        descriptor = descriptor || {};
        // Simplified primitive types
        if (descriptor.text)
            return ValueType.fromExtendedType(ExtendedType.Text);
        if (descriptor.integer)
            return ValueType.fromExtendedType(ExtendedType.Integer);
        if (descriptor.numeric)
            return ValueType.fromExtendedType(ExtendedType.Double);
        if (descriptor.bool)
            return ValueType.fromExtendedType(ExtendedType.Boolean);
        if (descriptor.dateTime)
            return ValueType.fromExtendedType(ExtendedType.DateTime);
        if (descriptor.duration)
            return ValueType.fromExtendedType(ExtendedType.Duration);
        if (descriptor.binary)
            return ValueType.fromExtendedType(ExtendedType.Binary);
        if (descriptor.none)
            return ValueType.fromExtendedType(ExtendedType.None);
        // Extended types
        if (descriptor.scripting) {
            if (descriptor.scripting.source)
                return ValueType.fromExtendedType(ExtendedType.ScriptSource);
        }
        if (descriptor.enumeration)
            return ValueType.fromEnum(descriptor.enumeration);
        if (descriptor.temporal) {
            if (descriptor.temporal.year)
                return ValueType.fromExtendedType(ExtendedType.Years_Integer);
            if (descriptor.temporal.quarter)
                return ValueType.fromExtendedType(ExtendedType.Quarters_Integer);
            if (descriptor.temporal.month)
                return ValueType.fromExtendedType(ExtendedType.Months_Integer);
            if (descriptor.temporal.day)
                return ValueType.fromExtendedType(ExtendedType.DayOfMonth_Integer);
            if (descriptor.temporal.paddedDateTableDate)
                return ValueType.fromExtendedType(ExtendedType.PaddedDateTableDates);
        }
        if (descriptor.geography) {
            if (descriptor.geography.address)
                return ValueType.fromExtendedType(ExtendedType.Address);
            if (descriptor.geography.city)
                return ValueType.fromExtendedType(ExtendedType.City);
            if (descriptor.geography.continent)
                return ValueType.fromExtendedType(ExtendedType.Continent);
            if (descriptor.geography.country)
                return ValueType.fromExtendedType(ExtendedType.Country);
            if (descriptor.geography.county)
                return ValueType.fromExtendedType(ExtendedType.County);
            if (descriptor.geography.region)
                return ValueType.fromExtendedType(ExtendedType.Region);
            if (descriptor.geography.postalCode)
                return ValueType.fromExtendedType(ExtendedType.PostalCode_Text);
            if (descriptor.geography.stateOrProvince)
                return ValueType.fromExtendedType(ExtendedType.StateOrProvince);
            if (descriptor.geography.place)
                return ValueType.fromExtendedType(ExtendedType.Place);
            if (descriptor.geography.latitude)
                return ValueType.fromExtendedType(ExtendedType.Latitude_Double);
            if (descriptor.geography.longitude)
                return ValueType.fromExtendedType(ExtendedType.Longitude_Double);
        }
        if (descriptor.misc) {
            if (descriptor.misc.image)
                return ValueType.fromExtendedType(ExtendedType.Image);
            if (descriptor.misc.imageUrl)
                return ValueType.fromExtendedType(ExtendedType.ImageUrl);
            if (descriptor.misc.webUrl)
                return ValueType.fromExtendedType(ExtendedType.WebUrl);
            if (descriptor.misc.barcode)
                return ValueType.fromExtendedType(ExtendedType.Barcode_Text);
        }
        if (descriptor.formatting) {
            if (descriptor.formatting.color)
                return ValueType.fromExtendedType(ExtendedType.Color);
            if (descriptor.formatting.formatString)
                return ValueType.fromExtendedType(ExtendedType.FormatString);
            if (descriptor.formatting.alignment)
                return ValueType.fromExtendedType(ExtendedType.Alignment);
            if (descriptor.formatting.labelDisplayUnits)
                return ValueType.fromExtendedType(ExtendedType.LabelDisplayUnits);
            if (descriptor.formatting.fontSize)
                return ValueType.fromExtendedType(ExtendedType.FontSize);
            if (descriptor.formatting.labelDensity)
                return ValueType.fromExtendedType(ExtendedType.LabelDensity);
        }
        if (descriptor.extendedType) {
            return ValueType.fromExtendedType(descriptor.extendedType);
        }
        if (descriptor.operations) {
            if (descriptor.operations.searchEnabled)
                return ValueType.fromExtendedType(ExtendedType.SearchEnabled);
        }
        if (descriptor.variant) {
            const variantTypes = descriptor.variant.map((variantType) => ValueType.fromDescriptor(variantType));
            return ValueType.fromVariant(variantTypes);
        }
        return ValueType.fromExtendedType(ExtendedType.Null);
    }
    /** Advanced: Generally use fromDescriptor instead. Creates or retrieves a ValueType object for the specified ExtendedType. */
    static fromExtendedType(extendedType) {
        extendedType = extendedType || ExtendedType.Null;
        const primitiveType = getPrimitiveType(extendedType), category = getCategoryFromExtendedType(extendedType);
        return ValueType.fromPrimitiveTypeAndCategory(primitiveType, category);
    }
    /** Creates or retrieves a ValueType object for the specified PrimitiveType and data category. */
    static fromPrimitiveTypeAndCategory(primitiveType, category) {
        primitiveType = primitiveType || PrimitiveType.Null;
        category = category || null;
        let id = primitiveType.toString();
        if (category)
            id += "|" + category;
        return ValueType.typeCache[id] || (ValueType.typeCache[id] = new ValueType(toExtendedType(primitiveType, category), category));
    }
    /** Creates a ValueType to describe the given IEnumType. */
    static fromEnum(enumType) {
        return new ValueType(ExtendedType.Enumeration, null, enumType);
    }
    /** Creates a ValueType to describe the given Variant type. */
    static fromVariant(variantTypes) {
        return new ValueType(ExtendedType.Variant, /* category */ null, /* enumType */ null, variantTypes);
    }
    /** Determines if the specified type is compatible from at least one of the otherTypes. */
    static isCompatibleTo(typeDescriptor, otherTypes) {
        const valueType = ValueType.fromDescriptor(typeDescriptor);
        for (const otherType of otherTypes) {
            const otherValueType = ValueType.fromDescriptor(otherType);
            if (otherValueType.isCompatibleFrom(valueType))
                return true;
        }
        return false;
    }
    /** Determines if the instance ValueType is convertable from the 'other' ValueType. */
    isCompatibleFrom(other) {
        const otherPrimitiveType = other.primitiveType;
        if (this === other ||
            this.primitiveType === otherPrimitiveType ||
            otherPrimitiveType === PrimitiveType.Null ||
            // Return true if both types are numbers
            (this.numeric && other.numeric))
            return true;
        return false;
    }
    /**
     * Determines if the instance ValueType is equal to the 'other' ValueType
     * @param {ValueType} other the other ValueType to check equality against
     * @returns True if the instance ValueType is equal to the 'other' ValueType
     */
    equals(other) {
        return (0,_jsonComparer__WEBPACK_IMPORTED_MODULE_1__.equals)(this, other);
    }
    /** Gets the exact primitive type of this ValueType. */
    get primitiveType() {
        return getPrimitiveType(this.underlyingType);
    }
    /** Gets the exact extended type of this ValueType. */
    get extendedType() {
        return this.underlyingType;
    }
    /** Gets the data category string (if any) for this ValueType. */
    get categoryString() {
        return this.category;
    }
    // Simplified primitive types
    /** Indicates whether the type represents text values. */
    get text() {
        return this.primitiveType === PrimitiveType.Text;
    }
    /** Indicates whether the type represents any numeric value. */
    get numeric() {
        return _extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(this.underlyingType, ExtendedType.Numeric);
    }
    /** Indicates whether the type represents integer numeric values. */
    get integer() {
        return this.primitiveType === PrimitiveType.Integer;
    }
    /** Indicates whether the type represents Boolean values. */
    get bool() {
        return this.primitiveType === PrimitiveType.Boolean;
    }
    /** Indicates whether the type represents any date/time values. */
    get dateTime() {
        return this.primitiveType === PrimitiveType.DateTime ||
            this.primitiveType === PrimitiveType.Date ||
            this.primitiveType === PrimitiveType.Time;
    }
    /** Indicates whether the type represents duration values. */
    get duration() {
        return this.primitiveType === PrimitiveType.Duration;
    }
    /** Indicates whether the type represents binary values. */
    get binary() {
        return this.primitiveType === PrimitiveType.Binary;
    }
    /** Indicates whether the type represents none values. */
    get none() {
        return this.primitiveType === PrimitiveType.None;
    }
    // Extended types
    /** Returns an object describing temporal values represented by the type, if it represents a temporal type. */
    get temporal() {
        return this.temporalType;
    }
    /** Returns an object describing geographic values represented by the type, if it represents a geographic type. */
    get geography() {
        return this.geographyType;
    }
    /** Returns an object describing the specific values represented by the type, if it represents a miscellaneous extended type. */
    get misc() {
        return this.miscType;
    }
    /** Returns an object describing the formatting values represented by the type, if it represents a formatting type. */
    get formatting() {
        return this.formattingType;
    }
    /** Returns an object describing the enum values represented by the type, if it represents an enumeration type. */
    get enumeration() {
        return this.enumType;
    }
    get scripting() {
        return this.scriptingType;
    }
    /** Returns an array describing the variant values represented by the type, if it represents an Variant type. */
    get variant() {
        return this.variationTypes;
    }
}
ValueType.typeCache = {};
class ScriptType {
    constructor(underlyingType) {
        this.underlyingType = underlyingType;
    }
    get source() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ScriptSource);
    }
}
class TemporalType {
    constructor(underlyingType) {
        this.underlyingType = underlyingType;
    }
    get year() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Years);
    }
    get quarter() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Quarters);
    }
    get month() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Months);
    }
    get day() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.DayOfMonth);
    }
    get paddedDateTableDate() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.PaddedDateTableDates);
    }
}
class GeographyType {
    constructor(underlyingType) {
        this.underlyingType = underlyingType;
    }
    get address() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Address);
    }
    get city() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.City);
    }
    get continent() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Continent);
    }
    get country() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Country);
    }
    get county() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.County);
    }
    get region() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Region);
    }
    get postalCode() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.PostalCode);
    }
    get stateOrProvince() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.StateOrProvince);
    }
    get place() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Place);
    }
    get latitude() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Latitude);
    }
    get longitude() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Longitude);
    }
}
class MiscellaneousType {
    constructor(underlyingType) {
        this.underlyingType = underlyingType;
    }
    get image() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Image);
    }
    get imageUrl() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ImageUrl);
    }
    get webUrl() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.WebUrl);
    }
    get barcode() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Barcode);
    }
}
class FormattingType {
    constructor(underlyingType) {
        this.underlyingType = underlyingType;
    }
    get color() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Color);
    }
    get formatString() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FormatString);
    }
    get alignment() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Alignment);
    }
    get labelDisplayUnits() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDisplayUnits);
    }
    get fontSize() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FontSize);
    }
    get labelDensity() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDensity);
    }
}
/** Defines primitive value types. Must be consistent with types defined by server conceptual schema. */
var PrimitiveType;
(function (PrimitiveType) {
    PrimitiveType[PrimitiveType["Null"] = 0] = "Null";
    PrimitiveType[PrimitiveType["Text"] = 1] = "Text";
    PrimitiveType[PrimitiveType["Decimal"] = 2] = "Decimal";
    PrimitiveType[PrimitiveType["Double"] = 3] = "Double";
    PrimitiveType[PrimitiveType["Integer"] = 4] = "Integer";
    PrimitiveType[PrimitiveType["Boolean"] = 5] = "Boolean";
    PrimitiveType[PrimitiveType["Date"] = 6] = "Date";
    PrimitiveType[PrimitiveType["DateTime"] = 7] = "DateTime";
    PrimitiveType[PrimitiveType["DateTimeZone"] = 8] = "DateTimeZone";
    PrimitiveType[PrimitiveType["Time"] = 9] = "Time";
    PrimitiveType[PrimitiveType["Duration"] = 10] = "Duration";
    PrimitiveType[PrimitiveType["Binary"] = 11] = "Binary";
    PrimitiveType[PrimitiveType["None"] = 12] = "None";
    PrimitiveType[PrimitiveType["Variant"] = 13] = "Variant";
})(PrimitiveType || (PrimitiveType = {}));
var PrimitiveTypeStrings;
(function (PrimitiveTypeStrings) {
    PrimitiveTypeStrings[PrimitiveTypeStrings["Null"] = 0] = "Null";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Text"] = 1] = "Text";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Decimal"] = 2] = "Decimal";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Double"] = 3] = "Double";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Integer"] = 4] = "Integer";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Boolean"] = 5] = "Boolean";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Date"] = 6] = "Date";
    PrimitiveTypeStrings[PrimitiveTypeStrings["DateTime"] = 7] = "DateTime";
    PrimitiveTypeStrings[PrimitiveTypeStrings["DateTimeZone"] = 8] = "DateTimeZone";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Time"] = 9] = "Time";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Duration"] = 10] = "Duration";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Binary"] = 11] = "Binary";
    PrimitiveTypeStrings[PrimitiveTypeStrings["None"] = 12] = "None";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Variant"] = 13] = "Variant";
})(PrimitiveTypeStrings || (PrimitiveTypeStrings = {}));
/** Defines extended value types, which include primitive types and known data categories constrained to expected primitive types. */
var ExtendedType;
(function (ExtendedType) {
    // Flags (1 << 8-15 range [0xFF00])
    // Important: Enum members must be declared before they are used in TypeScript.
    ExtendedType[ExtendedType["Numeric"] = 256] = "Numeric";
    ExtendedType[ExtendedType["Temporal"] = 512] = "Temporal";
    ExtendedType[ExtendedType["Geography"] = 1024] = "Geography";
    ExtendedType[ExtendedType["Miscellaneous"] = 2048] = "Miscellaneous";
    ExtendedType[ExtendedType["Formatting"] = 4096] = "Formatting";
    ExtendedType[ExtendedType["Scripting"] = 8192] = "Scripting";
    // Primitive types (0-255 range [0xFF] | flags)
    // The member names and base values must match those in PrimitiveType.
    ExtendedType[ExtendedType["Null"] = 0] = "Null";
    ExtendedType[ExtendedType["Text"] = 1] = "Text";
    ExtendedType[ExtendedType["Decimal"] = 258] = "Decimal";
    ExtendedType[ExtendedType["Double"] = 259] = "Double";
    ExtendedType[ExtendedType["Integer"] = 260] = "Integer";
    ExtendedType[ExtendedType["Boolean"] = 5] = "Boolean";
    ExtendedType[ExtendedType["Date"] = 518] = "Date";
    ExtendedType[ExtendedType["DateTime"] = 519] = "DateTime";
    ExtendedType[ExtendedType["DateTimeZone"] = 520] = "DateTimeZone";
    ExtendedType[ExtendedType["Time"] = 521] = "Time";
    ExtendedType[ExtendedType["Duration"] = 10] = "Duration";
    ExtendedType[ExtendedType["Binary"] = 11] = "Binary";
    ExtendedType[ExtendedType["None"] = 12] = "None";
    ExtendedType[ExtendedType["Variant"] = 13] = "Variant";
    // Extended types (0-32767 << 16 range [0xFFFF0000] | corresponding primitive type | flags)
    // Temporal
    ExtendedType[ExtendedType["Years"] = 66048] = "Years";
    ExtendedType[ExtendedType["Years_Text"] = 66049] = "Years_Text";
    ExtendedType[ExtendedType["Years_Integer"] = 66308] = "Years_Integer";
    ExtendedType[ExtendedType["Years_Date"] = 66054] = "Years_Date";
    ExtendedType[ExtendedType["Years_DateTime"] = 66055] = "Years_DateTime";
    ExtendedType[ExtendedType["Months"] = 131584] = "Months";
    ExtendedType[ExtendedType["Months_Text"] = 131585] = "Months_Text";
    ExtendedType[ExtendedType["Months_Integer"] = 131844] = "Months_Integer";
    ExtendedType[ExtendedType["Months_Date"] = 131590] = "Months_Date";
    ExtendedType[ExtendedType["Months_DateTime"] = 131591] = "Months_DateTime";
    ExtendedType[ExtendedType["PaddedDateTableDates"] = 197127] = "PaddedDateTableDates";
    ExtendedType[ExtendedType["Quarters"] = 262656] = "Quarters";
    ExtendedType[ExtendedType["Quarters_Text"] = 262657] = "Quarters_Text";
    ExtendedType[ExtendedType["Quarters_Integer"] = 262916] = "Quarters_Integer";
    ExtendedType[ExtendedType["Quarters_Date"] = 262662] = "Quarters_Date";
    ExtendedType[ExtendedType["Quarters_DateTime"] = 262663] = "Quarters_DateTime";
    ExtendedType[ExtendedType["DayOfMonth"] = 328192] = "DayOfMonth";
    ExtendedType[ExtendedType["DayOfMonth_Text"] = 328193] = "DayOfMonth_Text";
    ExtendedType[ExtendedType["DayOfMonth_Integer"] = 328452] = "DayOfMonth_Integer";
    ExtendedType[ExtendedType["DayOfMonth_Date"] = 328198] = "DayOfMonth_Date";
    ExtendedType[ExtendedType["DayOfMonth_DateTime"] = 328199] = "DayOfMonth_DateTime";
    // Geography
    ExtendedType[ExtendedType["Address"] = 6554625] = "Address";
    ExtendedType[ExtendedType["City"] = 6620161] = "City";
    ExtendedType[ExtendedType["Continent"] = 6685697] = "Continent";
    ExtendedType[ExtendedType["Country"] = 6751233] = "Country";
    ExtendedType[ExtendedType["County"] = 6816769] = "County";
    ExtendedType[ExtendedType["Region"] = 6882305] = "Region";
    ExtendedType[ExtendedType["PostalCode"] = 6947840] = "PostalCode";
    ExtendedType[ExtendedType["PostalCode_Text"] = 6947841] = "PostalCode_Text";
    ExtendedType[ExtendedType["PostalCode_Integer"] = 6948100] = "PostalCode_Integer";
    ExtendedType[ExtendedType["StateOrProvince"] = 7013377] = "StateOrProvince";
    ExtendedType[ExtendedType["Place"] = 7078913] = "Place";
    ExtendedType[ExtendedType["Latitude"] = 7144448] = "Latitude";
    ExtendedType[ExtendedType["Latitude_Decimal"] = 7144706] = "Latitude_Decimal";
    ExtendedType[ExtendedType["Latitude_Double"] = 7144707] = "Latitude_Double";
    ExtendedType[ExtendedType["Longitude"] = 7209984] = "Longitude";
    ExtendedType[ExtendedType["Longitude_Decimal"] = 7210242] = "Longitude_Decimal";
    ExtendedType[ExtendedType["Longitude_Double"] = 7210243] = "Longitude_Double";
    // Miscellaneous
    ExtendedType[ExtendedType["Image"] = 13109259] = "Image";
    ExtendedType[ExtendedType["ImageUrl"] = 13174785] = "ImageUrl";
    ExtendedType[ExtendedType["WebUrl"] = 13240321] = "WebUrl";
    ExtendedType[ExtendedType["Barcode"] = 13305856] = "Barcode";
    ExtendedType[ExtendedType["Barcode_Text"] = 13305857] = "Barcode_Text";
    ExtendedType[ExtendedType["Barcode_Integer"] = 13306116] = "Barcode_Integer";
    // Formatting
    ExtendedType[ExtendedType["Color"] = 19664897] = "Color";
    ExtendedType[ExtendedType["FormatString"] = 19730433] = "FormatString";
    ExtendedType[ExtendedType["Alignment"] = 20058113] = "Alignment";
    ExtendedType[ExtendedType["LabelDisplayUnits"] = 20123649] = "LabelDisplayUnits";
    ExtendedType[ExtendedType["FontSize"] = 20189443] = "FontSize";
    ExtendedType[ExtendedType["LabelDensity"] = 20254979] = "LabelDensity";
    // Enumeration
    ExtendedType[ExtendedType["Enumeration"] = 26214401] = "Enumeration";
    // Scripting
    ExtendedType[ExtendedType["ScriptSource"] = 32776193] = "ScriptSource";
    // NOTE: To avoid confusion, underscores should be used only to delimit primitive type variants of an extended type
    // (e.g. Year_Integer or Latitude_Double above)
    // Operations
    ExtendedType[ExtendedType["SearchEnabled"] = 65541] = "SearchEnabled";
})(ExtendedType || (ExtendedType = {}));
var ExtendedTypeStrings;
(function (ExtendedTypeStrings) {
    ExtendedTypeStrings[ExtendedTypeStrings["Numeric"] = 256] = "Numeric";
    ExtendedTypeStrings[ExtendedTypeStrings["Temporal"] = 512] = "Temporal";
    ExtendedTypeStrings[ExtendedTypeStrings["Geography"] = 1024] = "Geography";
    ExtendedTypeStrings[ExtendedTypeStrings["Miscellaneous"] = 2048] = "Miscellaneous";
    ExtendedTypeStrings[ExtendedTypeStrings["Formatting"] = 4096] = "Formatting";
    ExtendedTypeStrings[ExtendedTypeStrings["Scripting"] = 8192] = "Scripting";
    ExtendedTypeStrings[ExtendedTypeStrings["Null"] = 0] = "Null";
    ExtendedTypeStrings[ExtendedTypeStrings["Text"] = 1] = "Text";
    ExtendedTypeStrings[ExtendedTypeStrings["Decimal"] = 258] = "Decimal";
    ExtendedTypeStrings[ExtendedTypeStrings["Double"] = 259] = "Double";
    ExtendedTypeStrings[ExtendedTypeStrings["Integer"] = 260] = "Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["Boolean"] = 5] = "Boolean";
    ExtendedTypeStrings[ExtendedTypeStrings["Date"] = 518] = "Date";
    ExtendedTypeStrings[ExtendedTypeStrings["DateTime"] = 519] = "DateTime";
    ExtendedTypeStrings[ExtendedTypeStrings["DateTimeZone"] = 520] = "DateTimeZone";
    ExtendedTypeStrings[ExtendedTypeStrings["Time"] = 521] = "Time";
    ExtendedTypeStrings[ExtendedTypeStrings["Duration"] = 10] = "Duration";
    ExtendedTypeStrings[ExtendedTypeStrings["Binary"] = 11] = "Binary";
    ExtendedTypeStrings[ExtendedTypeStrings["None"] = 12] = "None";
    ExtendedTypeStrings[ExtendedTypeStrings["Variant"] = 13] = "Variant";
    ExtendedTypeStrings[ExtendedTypeStrings["Years"] = 66048] = "Years";
    ExtendedTypeStrings[ExtendedTypeStrings["Years_Text"] = 66049] = "Years_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["Years_Integer"] = 66308] = "Years_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["Years_Date"] = 66054] = "Years_Date";
    ExtendedTypeStrings[ExtendedTypeStrings["Years_DateTime"] = 66055] = "Years_DateTime";
    ExtendedTypeStrings[ExtendedTypeStrings["Months"] = 131584] = "Months";
    ExtendedTypeStrings[ExtendedTypeStrings["Months_Text"] = 131585] = "Months_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["Months_Integer"] = 131844] = "Months_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["Months_Date"] = 131590] = "Months_Date";
    ExtendedTypeStrings[ExtendedTypeStrings["Months_DateTime"] = 131591] = "Months_DateTime";
    ExtendedTypeStrings[ExtendedTypeStrings["PaddedDateTableDates"] = 197127] = "PaddedDateTableDates";
    ExtendedTypeStrings[ExtendedTypeStrings["Quarters"] = 262656] = "Quarters";
    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_Text"] = 262657] = "Quarters_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_Integer"] = 262916] = "Quarters_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_Date"] = 262662] = "Quarters_Date";
    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_DateTime"] = 262663] = "Quarters_DateTime";
    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth"] = 328192] = "DayOfMonth";
    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_Text"] = 328193] = "DayOfMonth_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_Integer"] = 328452] = "DayOfMonth_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_Date"] = 328198] = "DayOfMonth_Date";
    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_DateTime"] = 328199] = "DayOfMonth_DateTime";
    ExtendedTypeStrings[ExtendedTypeStrings["Address"] = 6554625] = "Address";
    ExtendedTypeStrings[ExtendedTypeStrings["City"] = 6620161] = "City";
    ExtendedTypeStrings[ExtendedTypeStrings["Continent"] = 6685697] = "Continent";
    ExtendedTypeStrings[ExtendedTypeStrings["Country"] = 6751233] = "Country";
    ExtendedTypeStrings[ExtendedTypeStrings["County"] = 6816769] = "County";
    ExtendedTypeStrings[ExtendedTypeStrings["Region"] = 6882305] = "Region";
    ExtendedTypeStrings[ExtendedTypeStrings["PostalCode"] = 6947840] = "PostalCode";
    ExtendedTypeStrings[ExtendedTypeStrings["PostalCode_Text"] = 6947841] = "PostalCode_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["PostalCode_Integer"] = 6948100] = "PostalCode_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["StateOrProvince"] = 7013377] = "StateOrProvince";
    ExtendedTypeStrings[ExtendedTypeStrings["Place"] = 7078913] = "Place";
    ExtendedTypeStrings[ExtendedTypeStrings["Latitude"] = 7144448] = "Latitude";
    ExtendedTypeStrings[ExtendedTypeStrings["Latitude_Decimal"] = 7144706] = "Latitude_Decimal";
    ExtendedTypeStrings[ExtendedTypeStrings["Latitude_Double"] = 7144707] = "Latitude_Double";
    ExtendedTypeStrings[ExtendedTypeStrings["Longitude"] = 7209984] = "Longitude";
    ExtendedTypeStrings[ExtendedTypeStrings["Longitude_Decimal"] = 7210242] = "Longitude_Decimal";
    ExtendedTypeStrings[ExtendedTypeStrings["Longitude_Double"] = 7210243] = "Longitude_Double";
    ExtendedTypeStrings[ExtendedTypeStrings["Image"] = 13109259] = "Image";
    ExtendedTypeStrings[ExtendedTypeStrings["ImageUrl"] = 13174785] = "ImageUrl";
    ExtendedTypeStrings[ExtendedTypeStrings["WebUrl"] = 13240321] = "WebUrl";
    ExtendedTypeStrings[ExtendedTypeStrings["Barcode"] = 13305856] = "Barcode";
    ExtendedTypeStrings[ExtendedTypeStrings["Barcode_Text"] = 13305857] = "Barcode_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["Barcode_Integer"] = 13306116] = "Barcode_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["Color"] = 19664897] = "Color";
    ExtendedTypeStrings[ExtendedTypeStrings["FormatString"] = 19730433] = "FormatString";
    ExtendedTypeStrings[ExtendedTypeStrings["Alignment"] = 20058113] = "Alignment";
    ExtendedTypeStrings[ExtendedTypeStrings["LabelDisplayUnits"] = 20123649] = "LabelDisplayUnits";
    ExtendedTypeStrings[ExtendedTypeStrings["FontSize"] = 20189443] = "FontSize";
    ExtendedTypeStrings[ExtendedTypeStrings["LabelDensity"] = 20254979] = "LabelDensity";
    ExtendedTypeStrings[ExtendedTypeStrings["Enumeration"] = 26214401] = "Enumeration";
    ExtendedTypeStrings[ExtendedTypeStrings["ScriptSource"] = 32776193] = "ScriptSource";
    ExtendedTypeStrings[ExtendedTypeStrings["SearchEnabled"] = 65541] = "SearchEnabled";
})(ExtendedTypeStrings || (ExtendedTypeStrings = {}));
const PrimitiveTypeMask = 0xFF;
const PrimitiveTypeWithFlagsMask = 0xFFFF;
const PrimitiveTypeFlagsExcludedMask = 0xFFFF0000;
function getPrimitiveType(extendedType) {
    return extendedType & PrimitiveTypeMask;
}
function isPrimitiveType(extendedType) {
    return (extendedType & PrimitiveTypeWithFlagsMask) === extendedType;
}
function getCategoryFromExtendedType(extendedType) {
    if (isPrimitiveType(extendedType))
        return null;
    let category = ExtendedTypeStrings[extendedType];
    if (category) {
        // Check for ExtendedType declaration without a primitive type.
        // If exists, use it as category (e.g. Longitude rather than Longitude_Double)
        // Otherwise use the ExtendedType declaration with a primitive type (e.g. Address)
        const delimIdx = category.lastIndexOf("_");
        if (delimIdx > 0) {
            const baseCategory = category.slice(0, delimIdx);
            if (ExtendedTypeStrings[baseCategory]) {
                category = baseCategory;
            }
        }
    }
    return category || null;
}
function toExtendedType(primitiveType, category) {
    const primitiveString = PrimitiveTypeStrings[primitiveType];
    let t = ExtendedTypeStrings[primitiveString];
    if (t == null) {
        t = ExtendedType.Null;
    }
    if (primitiveType && category) {
        let categoryType = ExtendedTypeStrings[category];
        if (categoryType) {
            const categoryPrimitiveType = getPrimitiveType(categoryType);
            if (categoryPrimitiveType === PrimitiveType.Null) {
                // Category supports multiple primitive types, check if requested primitive type is supported
                // (note: important to use t here rather than primitiveType as it may include primitive type flags)
                categoryType = t | categoryType;
                if (ExtendedTypeStrings[categoryType]) {
                    t = categoryType;
                }
            }
            else if (categoryPrimitiveType === primitiveType) {
                // Primitive type matches the single supported type for the category
                t = categoryType;
            }
        }
    }
    return t;
}
function matchesExtendedTypeWithAnyPrimitive(a, b) {
    return (a & PrimitiveTypeFlagsExcludedMask) === (b & PrimitiveTypeFlagsExcludedMask);
}
//# sourceMappingURL=valueType.js.map

/***/ }),

/***/ "./node_modules/d3-array/src/ascending.js":
/*!************************************************!*\
  !*** ./node_modules/d3-array/src/ascending.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ascending)
/* harmony export */ });
function ascending(a, b) {
  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}


/***/ }),

/***/ "./node_modules/d3-array/src/bisect.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-array/src/bisect.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bisectCenter": () => (/* binding */ bisectCenter),
/* harmony export */   "bisectLeft": () => (/* binding */ bisectLeft),
/* harmony export */   "bisectRight": () => (/* binding */ bisectRight),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ascending_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ascending.js */ "./node_modules/d3-array/src/ascending.js");
/* harmony import */ var _bisector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bisector.js */ "./node_modules/d3-array/src/bisector.js");
/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./number.js */ "./node_modules/d3-array/src/number.js");




const ascendingBisect = (0,_bisector_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_ascending_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
const bisectRight = ascendingBisect.right;
const bisectLeft = ascendingBisect.left;
const bisectCenter = (0,_bisector_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_number_js__WEBPACK_IMPORTED_MODULE_2__["default"]).center;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (bisectRight);


/***/ }),

/***/ "./node_modules/d3-array/src/bisector.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-array/src/bisector.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ bisector)
/* harmony export */ });
/* harmony import */ var _ascending_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ascending.js */ "./node_modules/d3-array/src/ascending.js");
/* harmony import */ var _descending_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./descending.js */ "./node_modules/d3-array/src/descending.js");



function bisector(f) {
  let compare1, compare2, delta;

  // If an accessor is specified, promote it to a comparator. In this case we
  // can test whether the search value is (self-) comparable. We can’t do this
  // for a comparator (except for specific, known comparators) because we can’t
  // tell if the comparator is symmetric, and an asymmetric comparator can’t be
  // used to test whether a single value is comparable.
  if (f.length !== 2) {
    compare1 = _ascending_js__WEBPACK_IMPORTED_MODULE_0__["default"];
    compare2 = (d, x) => (0,_ascending_js__WEBPACK_IMPORTED_MODULE_0__["default"])(f(d), x);
    delta = (d, x) => f(d) - x;
  } else {
    compare1 = f === _ascending_js__WEBPACK_IMPORTED_MODULE_0__["default"] || f === _descending_js__WEBPACK_IMPORTED_MODULE_1__["default"] ? f : zero;
    compare2 = f;
    delta = f;
  }

  function left(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = (lo + hi) >>> 1;
        if (compare2(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }

  function right(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = (lo + hi) >>> 1;
        if (compare2(a[mid], x) <= 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }

  function center(a, x, lo = 0, hi = a.length) {
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }

  return {left, center, right};
}

function zero() {
  return 0;
}


/***/ }),

/***/ "./node_modules/d3-array/src/descending.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-array/src/descending.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ descending)
/* harmony export */ });
function descending(a, b) {
  return a == null || b == null ? NaN
    : b < a ? -1
    : b > a ? 1
    : b >= a ? 0
    : NaN;
}


/***/ }),

/***/ "./node_modules/d3-array/src/max.js":
/*!******************************************!*\
  !*** ./node_modules/d3-array/src/max.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ max)
/* harmony export */ });
function max(values, valueof) {
  let max;
  if (valueof === undefined) {
    for (const value of values) {
      if (value != null
          && (max < value || (max === undefined && value >= value))) {
        max = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null
          && (max < value || (max === undefined && value >= value))) {
        max = value;
      }
    }
  }
  return max;
}


/***/ }),

/***/ "./node_modules/d3-array/src/min.js":
/*!******************************************!*\
  !*** ./node_modules/d3-array/src/min.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ min)
/* harmony export */ });
function min(values, valueof) {
  let min;
  if (valueof === undefined) {
    for (const value of values) {
      if (value != null
          && (min > value || (min === undefined && value >= value))) {
        min = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null
          && (min > value || (min === undefined && value >= value))) {
        min = value;
      }
    }
  }
  return min;
}


/***/ }),

/***/ "./node_modules/d3-array/src/number.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-array/src/number.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ number),
/* harmony export */   "numbers": () => (/* binding */ numbers)
/* harmony export */ });
function number(x) {
  return x === null ? NaN : +x;
}

function* numbers(values, valueof) {
  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        yield value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        yield value;
      }
    }
  }
}


/***/ }),

/***/ "./node_modules/d3-array/src/range.js":
/*!********************************************!*\
  !*** ./node_modules/d3-array/src/range.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ range)
/* harmony export */ });
function range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}


/***/ }),

/***/ "./node_modules/d3-array/src/ticks.js":
/*!********************************************!*\
  !*** ./node_modules/d3-array/src/ticks.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ticks),
/* harmony export */   "tickIncrement": () => (/* binding */ tickIncrement),
/* harmony export */   "tickStep": () => (/* binding */ tickStep)
/* harmony export */ });
const e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function tickSpec(start, stop, count) {
  const step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log10(step)),
      error = step / Math.pow(10, power),
      factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
  let i1, i2, inc;
  if (power < 0) {
    inc = Math.pow(10, -power) / factor;
    i1 = Math.round(start * inc);
    i2 = Math.round(stop * inc);
    if (i1 / inc < start) ++i1;
    if (i2 / inc > stop) --i2;
    inc = -inc;
  } else {
    inc = Math.pow(10, power) * factor;
    i1 = Math.round(start / inc);
    i2 = Math.round(stop / inc);
    if (i1 * inc < start) ++i1;
    if (i2 * inc > stop) --i2;
  }
  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);
  return [i1, i2, inc];
}

function ticks(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  if (!(count > 0)) return [];
  if (start === stop) return [start];
  const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);
  if (!(i2 >= i1)) return [];
  const n = i2 - i1 + 1, ticks = new Array(n);
  if (reverse) {
    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) / -inc;
    else for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) * inc;
  } else {
    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) / -inc;
    else for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) * inc;
  }
  return ticks;
}

function tickIncrement(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  return tickSpec(start, stop, count)[2];
}

function tickStep(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);
  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}


/***/ }),

/***/ "./node_modules/d3-axis/src/axis.js":
/*!******************************************!*\
  !*** ./node_modules/d3-axis/src/axis.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "axisBottom": () => (/* binding */ axisBottom),
/* harmony export */   "axisLeft": () => (/* binding */ axisLeft),
/* harmony export */   "axisRight": () => (/* binding */ axisRight),
/* harmony export */   "axisTop": () => (/* binding */ axisTop)
/* harmony export */ });
/* harmony import */ var _identity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./identity.js */ "./node_modules/d3-axis/src/identity.js");


var top = 1,
    right = 2,
    bottom = 3,
    left = 4,
    epsilon = 1e-6;

function translateX(x) {
  return "translate(" + x + ",0)";
}

function translateY(y) {
  return "translate(0," + y + ")";
}

function number(scale) {
  return d => +scale(d);
}

function center(scale, offset) {
  offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;
  if (scale.round()) offset = Math.round(offset);
  return d => +scale(d) + offset;
}

function entering() {
  return !this.__axis;
}

function axis(orient, scale) {
  var tickArguments = [],
      tickValues = null,
      tickFormat = null,
      tickSizeInner = 6,
      tickSizeOuter = 6,
      tickPadding = 3,
      offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5,
      k = orient === top || orient === left ? -1 : 1,
      x = orient === left || orient === right ? "x" : "y",
      transform = orient === top || orient === bottom ? translateX : translateY;

  function axis(context) {
    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : _identity_js__WEBPACK_IMPORTED_MODULE_0__["default"]) : tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,
        range = scale.range(),
        range0 = +range[0] + offset,
        range1 = +range[range.length - 1] + offset,
        position = (scale.bandwidth ? center : number)(scale.copy(), offset),
        selection = context.selection ? context.selection() : context,
        path = selection.selectAll(".domain").data([null]),
        tick = selection.selectAll(".tick").data(values, scale).order(),
        tickExit = tick.exit(),
        tickEnter = tick.enter().append("g").attr("class", "tick"),
        line = tick.select("line"),
        text = tick.select("text");

    path = path.merge(path.enter().insert("path", ".tick")
        .attr("class", "domain")
        .attr("stroke", "currentColor"));

    tick = tick.merge(tickEnter);

    line = line.merge(tickEnter.append("line")
        .attr("stroke", "currentColor")
        .attr(x + "2", k * tickSizeInner));

    text = text.merge(tickEnter.append("text")
        .attr("fill", "currentColor")
        .attr(x, k * spacing)
        .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

    if (context !== selection) {
      path = path.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);

      tickExit = tickExit.transition(context)
          .attr("opacity", epsilon)
          .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d + offset) : this.getAttribute("transform"); });

      tickEnter
          .attr("opacity", epsilon)
          .attr("transform", function(d) { var p = this.parentNode.__axis; return transform((p && isFinite(p = p(d)) ? p : position(d)) + offset); });
    }

    tickExit.remove();

    path
        .attr("d", orient === left || orient === right
            ? (tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1)
            : (tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1));

    tick
        .attr("opacity", 1)
        .attr("transform", function(d) { return transform(position(d) + offset); });

    line
        .attr(x + "2", k * tickSizeInner);

    text
        .attr(x, k * spacing)
        .text(format);

    selection.filter(entering)
        .attr("fill", "none")
        .attr("font-size", 10)
        .attr("font-family", "sans-serif")
        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

    selection
        .each(function() { this.__axis = position; });
  }

  axis.scale = function(_) {
    return arguments.length ? (scale = _, axis) : scale;
  };

  axis.ticks = function() {
    return tickArguments = Array.from(arguments), axis;
  };

  axis.tickArguments = function(_) {
    return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis) : tickArguments.slice();
  };

  axis.tickValues = function(_) {
    return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis) : tickValues && tickValues.slice();
  };

  axis.tickFormat = function(_) {
    return arguments.length ? (tickFormat = _, axis) : tickFormat;
  };

  axis.tickSize = function(_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
  };

  axis.tickSizeInner = function(_) {
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
  };

  axis.tickSizeOuter = function(_) {
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
  };

  axis.tickPadding = function(_) {
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
  };

  axis.offset = function(_) {
    return arguments.length ? (offset = +_, axis) : offset;
  };

  return axis;
}

function axisTop(scale) {
  return axis(top, scale);
}

function axisRight(scale) {
  return axis(right, scale);
}

function axisBottom(scale) {
  return axis(bottom, scale);
}

function axisLeft(scale) {
  return axis(left, scale);
}


/***/ }),

/***/ "./node_modules/d3-axis/src/identity.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-axis/src/identity.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return x;
}


/***/ }),

/***/ "./node_modules/d3-color/src/color.js":
/*!********************************************!*\
  !*** ./node_modules/d3-color/src/color.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Color": () => (/* binding */ Color),
/* harmony export */   "Rgb": () => (/* binding */ Rgb),
/* harmony export */   "brighter": () => (/* binding */ brighter),
/* harmony export */   "darker": () => (/* binding */ darker),
/* harmony export */   "default": () => (/* binding */ color),
/* harmony export */   "hsl": () => (/* binding */ hsl),
/* harmony export */   "hslConvert": () => (/* binding */ hslConvert),
/* harmony export */   "rgb": () => (/* binding */ rgb),
/* harmony export */   "rgbConvert": () => (/* binding */ rgbConvert)
/* harmony export */ });
/* harmony import */ var _define_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./define.js */ "./node_modules/d3-color/src/define.js");


function Color() {}

var darker = 0.7;
var brighter = 1 / darker;

var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`),
    reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`),
    reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`),
    reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`),
    reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`),
    reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

(0,_define_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor, this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex, // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHex8() {
  return this.rgb().formatHex8();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
      : null) // invalid hex
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
      : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

(0,_define_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Rgb, rgb, (0,_define_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return (-0.5 <= this.r && this.r < 255.5)
        && (-0.5 <= this.g && this.g < 255.5)
        && (-0.5 <= this.b && this.b < 255.5)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex, // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}

function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}

function rgb_formatRgb() {
  const a = clampa(this.opacity);
  return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}

function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}

function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}

function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl;
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0,_define_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Hsl, hsl, (0,_define_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
  }
}));

function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}

function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}


/***/ }),

/***/ "./node_modules/d3-color/src/define.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-color/src/define.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "extend": () => (/* binding */ extend)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}


/***/ }),

/***/ "./node_modules/d3-format/src/defaultLocale.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-format/src/defaultLocale.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ defaultLocale),
/* harmony export */   "format": () => (/* binding */ format),
/* harmony export */   "formatPrefix": () => (/* binding */ formatPrefix)
/* harmony export */ });
/* harmony import */ var _locale_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./locale.js */ "./node_modules/d3-format/src/locale.js");


var locale;
var format;
var formatPrefix;

defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale(definition) {
  locale = (0,_locale_js__WEBPACK_IMPORTED_MODULE_0__["default"])(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}


/***/ }),

/***/ "./node_modules/d3-format/src/exponent.js":
/*!************************************************!*\
  !*** ./node_modules/d3-format/src/exponent.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatDecimal.js */ "./node_modules/d3-format/src/formatDecimal.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return x = (0,_formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__.formatDecimalParts)(Math.abs(x)), x ? x[1] : NaN;
}


/***/ }),

/***/ "./node_modules/d3-format/src/formatDecimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-format/src/formatDecimal.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "formatDecimalParts": () => (/* binding */ formatDecimalParts)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return Math.abs(x = Math.round(x)) >= 1e21
      ? x.toLocaleString("en").replace(/,/g, "")
      : x.toString(10);
}

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].
function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i, coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}


/***/ }),

/***/ "./node_modules/d3-format/src/formatGroup.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-format/src/formatGroup.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(grouping, thousands) {
  return function(value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}


/***/ }),

/***/ "./node_modules/d3-format/src/formatNumerals.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-format/src/formatNumerals.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}


/***/ }),

/***/ "./node_modules/d3-format/src/formatPrefixAuto.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-format/src/formatPrefixAuto.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "prefixExponent": () => (/* binding */ prefixExponent)
/* harmony export */ });
/* harmony import */ var _formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatDecimal.js */ "./node_modules/d3-format/src/formatDecimal.js");


var prefixExponent;

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x, p) {
  var d = (0,_formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__.formatDecimalParts)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient
      : i > n ? coefficient + new Array(i - n + 1).join("0")
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
      : "0." + new Array(1 - i).join("0") + (0,_formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__.formatDecimalParts)(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}


/***/ }),

/***/ "./node_modules/d3-format/src/formatRounded.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-format/src/formatRounded.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatDecimal.js */ "./node_modules/d3-format/src/formatDecimal.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x, p) {
  var d = (0,_formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__.formatDecimalParts)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}


/***/ }),

/***/ "./node_modules/d3-format/src/formatSpecifier.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-format/src/formatSpecifier.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FormatSpecifier": () => (/* binding */ FormatSpecifier),
/* harmony export */   "default": () => (/* binding */ formatSpecifier)
/* harmony export */ });
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function() {
  return this.fill
      + this.align
      + this.sign
      + this.symbol
      + (this.zero ? "0" : "")
      + (this.width === undefined ? "" : Math.max(1, this.width | 0))
      + (this.comma ? "," : "")
      + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
      + (this.trim ? "~" : "")
      + this.type;
};


/***/ }),

/***/ "./node_modules/d3-format/src/formatTrim.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-format/src/formatTrim.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
    }
  }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}


/***/ }),

/***/ "./node_modules/d3-format/src/formatTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-format/src/formatTypes.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatDecimal.js */ "./node_modules/d3-format/src/formatDecimal.js");
/* harmony import */ var _formatPrefixAuto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatPrefixAuto.js */ "./node_modules/d3-format/src/formatPrefixAuto.js");
/* harmony import */ var _formatRounded_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatRounded.js */ "./node_modules/d3-format/src/formatRounded.js");




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  "%": (x, p) => (x * 100).toFixed(p),
  "b": (x) => Math.round(x).toString(2),
  "c": (x) => x + "",
  "d": _formatDecimal_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  "e": (x, p) => x.toExponential(p),
  "f": (x, p) => x.toFixed(p),
  "g": (x, p) => x.toPrecision(p),
  "o": (x) => Math.round(x).toString(8),
  "p": (x, p) => (0,_formatRounded_js__WEBPACK_IMPORTED_MODULE_1__["default"])(x * 100, p),
  "r": _formatRounded_js__WEBPACK_IMPORTED_MODULE_1__["default"],
  "s": _formatPrefixAuto_js__WEBPACK_IMPORTED_MODULE_2__["default"],
  "X": (x) => Math.round(x).toString(16).toUpperCase(),
  "x": (x) => Math.round(x).toString(16)
});


/***/ }),

/***/ "./node_modules/d3-format/src/identity.js":
/*!************************************************!*\
  !*** ./node_modules/d3-format/src/identity.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return x;
}


/***/ }),

/***/ "./node_modules/d3-format/src/locale.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-format/src/locale.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _exponent_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./exponent.js */ "./node_modules/d3-format/src/exponent.js");
/* harmony import */ var _formatGroup_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatGroup.js */ "./node_modules/d3-format/src/formatGroup.js");
/* harmony import */ var _formatNumerals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatNumerals.js */ "./node_modules/d3-format/src/formatNumerals.js");
/* harmony import */ var _formatSpecifier_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatSpecifier.js */ "./node_modules/d3-format/src/formatSpecifier.js");
/* harmony import */ var _formatTrim_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./formatTrim.js */ "./node_modules/d3-format/src/formatTrim.js");
/* harmony import */ var _formatTypes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./formatTypes.js */ "./node_modules/d3-format/src/formatTypes.js");
/* harmony import */ var _formatPrefixAuto_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./formatPrefixAuto.js */ "./node_modules/d3-format/src/formatPrefixAuto.js");
/* harmony import */ var _identity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./identity.js */ "./node_modules/d3-format/src/identity.js");









var map = Array.prototype.map,
    prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? _identity_js__WEBPACK_IMPORTED_MODULE_0__["default"] : (0,_formatGroup_js__WEBPACK_IMPORTED_MODULE_1__["default"])(map.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? _identity_js__WEBPACK_IMPORTED_MODULE_0__["default"] : (0,_formatNumerals_js__WEBPACK_IMPORTED_MODULE_2__["default"])(map.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "−" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = (0,_formatSpecifier_js__WEBPACK_IMPORTED_MODULE_3__["default"])(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type;

    // The "n" type is an alias for ",g".
    if (type === "n") comma = true, type = "g";

    // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!_formatTypes_js__WEBPACK_IMPORTED_MODULE_4__["default"][type]) precision === undefined && (precision = 12), trim = true, type = "g";

    // If zero fill is specified, padding goes after sign and before digits.
    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = _formatTypes_js__WEBPACK_IMPORTED_MODULE_4__["default"][type],
        maybeSuffix = /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision === undefined ? 6
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
        : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i, n, c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Determine the sign. -0 is not less than 0, but 1 / -0 is!
        var valueNegative = value < 0 || 1 / value < 0;

        // Perform the initial formatting.
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

        // Trim insignificant zeros.
        if (trim) value = (0,_formatTrim_js__WEBPACK_IMPORTED_MODULE_5__["default"])(value);

        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + _formatPrefixAuto_js__WEBPACK_IMPORTED_MODULE_6__.prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<": value = valuePrefix + value + valueSuffix + padding; break;
        case "=": value = valuePrefix + padding + value + valueSuffix; break;
        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
        default: value = padding + valuePrefix + value + valueSuffix; break;
      }

      return numerals(value);
    }

    format.toString = function() {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = (0,_formatSpecifier_js__WEBPACK_IMPORTED_MODULE_3__["default"])(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor((0,_exponent_js__WEBPACK_IMPORTED_MODULE_7__["default"])(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function(value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}


/***/ }),

/***/ "./node_modules/d3-format/src/precisionFixed.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-format/src/precisionFixed.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _exponent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exponent.js */ "./node_modules/d3-format/src/exponent.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(step) {
  return Math.max(0, -(0,_exponent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Math.abs(step)));
}


/***/ }),

/***/ "./node_modules/d3-format/src/precisionPrefix.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-format/src/precisionPrefix.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _exponent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exponent.js */ "./node_modules/d3-format/src/exponent.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor((0,_exponent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) / 3))) * 3 - (0,_exponent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Math.abs(step)));
}


/***/ }),

/***/ "./node_modules/d3-format/src/precisionRound.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-format/src/precisionRound.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _exponent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exponent.js */ "./node_modules/d3-format/src/exponent.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, (0,_exponent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(max) - (0,_exponent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(step)) + 1;
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/array.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/array.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "genericArray": () => (/* binding */ genericArray)
/* harmony export */ });
/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./value.js */ "./node_modules/d3-interpolate/src/value.js");
/* harmony import */ var _numberArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./numberArray.js */ "./node_modules/d3-interpolate/src/numberArray.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  return ((0,_numberArray_js__WEBPACK_IMPORTED_MODULE_0__.isNumberArray)(b) ? _numberArray_js__WEBPACK_IMPORTED_MODULE_0__["default"] : genericArray)(a, b);
}

function genericArray(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = (0,_value_js__WEBPACK_IMPORTED_MODULE_1__["default"])(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];

  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/basis.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/basis.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "basis": () => (/* binding */ basis),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
      + (4 - 6 * t2 + 3 * t3) * v1
      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
      + t3 * v3) / 6;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/basisClosed.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-interpolate/src/basisClosed.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _basis_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basis.js */ "./node_modules/d3-interpolate/src/basis.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return (0,_basis_js__WEBPACK_IMPORTED_MODULE_0__.basis)((t - i / n) * n, v0, v1, v2, v3);
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/color.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/color.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ nogamma),
/* harmony export */   "gamma": () => (/* binding */ gamma),
/* harmony export */   "hue": () => (/* binding */ hue)
/* harmony export */ });
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constant.js */ "./node_modules/d3-interpolate/src/constant.js");


function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(isNaN(a) ? b : a);
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/constant.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-interpolate/src/constant.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (x => () => x);


/***/ }),

/***/ "./node_modules/d3-interpolate/src/date.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-interpolate/src/date.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  var d = new Date;
  return a = +a, b = +b, function(t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/number.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-interpolate/src/number.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/numberArray.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-interpolate/src/numberArray.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "isNumberArray": () => (/* binding */ isNumberArray)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i;
  return function(t) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
    return c;
  };
}

function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/object.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-interpolate/src/object.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ "./node_modules/d3-interpolate/src/value.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = (0,_value_js__WEBPACK_IMPORTED_MODULE_0__["default"])(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/rgb.js":
/*!************************************************!*\
  !*** ./node_modules/d3-interpolate/src/rgb.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "rgbBasis": () => (/* binding */ rgbBasis),
/* harmony export */   "rgbBasisClosed": () => (/* binding */ rgbBasisClosed)
/* harmony export */ });
/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-color */ "./node_modules/d3-color/src/color.js");
/* harmony import */ var _basis_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./basis.js */ "./node_modules/d3-interpolate/src/basis.js");
/* harmony import */ var _basisClosed_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./basisClosed.js */ "./node_modules/d3-interpolate/src/basisClosed.js");
/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./color.js */ "./node_modules/d3-interpolate/src/color.js");





/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((function rgbGamma(y) {
  var color = (0,_color_js__WEBPACK_IMPORTED_MODULE_0__.gamma)(y);

  function rgb(start, end) {
    var r = color((start = (0,d3_color__WEBPACK_IMPORTED_MODULE_1__.rgb)(start)).r, (end = (0,d3_color__WEBPACK_IMPORTED_MODULE_1__.rgb)(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = (0,_color_js__WEBPACK_IMPORTED_MODULE_0__["default"])(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;

  return rgb;
})(1));

function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i, color;
    for (i = 0; i < n; ++i) {
      color = (0,d3_color__WEBPACK_IMPORTED_MODULE_1__.rgb)(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function(t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(_basis_js__WEBPACK_IMPORTED_MODULE_2__["default"]);
var rgbBasisClosed = rgbSpline(_basisClosed_js__WEBPACK_IMPORTED_MODULE_3__["default"]);


/***/ }),

/***/ "./node_modules/d3-interpolate/src/round.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/round.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  return a = +a, b = +b, function(t) {
    return Math.round(a * (1 - t) + b * t);
  };
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/string.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-interpolate/src/string.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./number.js */ "./node_modules/d3-interpolate/src/number.js");


var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function() {
    return b;
  };
}

function one(b) {
  return function(t) {
    return b(t) + "";
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a))
      && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) { // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: (0,_number_js__WEBPACK_IMPORTED_MODULE_0__["default"])(am, bm)});
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? (q[0]
      ? one(q[0].x)
      : zero(b))
      : (b = q.length, function(t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
}


/***/ }),

/***/ "./node_modules/d3-interpolate/src/value.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/value.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-color */ "./node_modules/d3-color/src/color.js");
/* harmony import */ var _rgb_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rgb.js */ "./node_modules/d3-interpolate/src/rgb.js");
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./array.js */ "./node_modules/d3-interpolate/src/array.js");
/* harmony import */ var _date_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./date.js */ "./node_modules/d3-interpolate/src/date.js");
/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./number.js */ "./node_modules/d3-interpolate/src/number.js");
/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./object.js */ "./node_modules/d3-interpolate/src/object.js");
/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./string.js */ "./node_modules/d3-interpolate/src/string.js");
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constant.js */ "./node_modules/d3-interpolate/src/constant.js");
/* harmony import */ var _numberArray_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./numberArray.js */ "./node_modules/d3-interpolate/src/numberArray.js");










/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(b)
      : (t === "number" ? _number_js__WEBPACK_IMPORTED_MODULE_1__["default"]
      : t === "string" ? ((c = (0,d3_color__WEBPACK_IMPORTED_MODULE_2__["default"])(b)) ? (b = c, _rgb_js__WEBPACK_IMPORTED_MODULE_3__["default"]) : _string_js__WEBPACK_IMPORTED_MODULE_4__["default"])
      : b instanceof d3_color__WEBPACK_IMPORTED_MODULE_2__["default"] ? _rgb_js__WEBPACK_IMPORTED_MODULE_3__["default"]
      : b instanceof Date ? _date_js__WEBPACK_IMPORTED_MODULE_5__["default"]
      : (0,_numberArray_js__WEBPACK_IMPORTED_MODULE_6__.isNumberArray)(b) ? _numberArray_js__WEBPACK_IMPORTED_MODULE_6__["default"]
      : Array.isArray(b) ? _array_js__WEBPACK_IMPORTED_MODULE_7__.genericArray
      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? _object_js__WEBPACK_IMPORTED_MODULE_8__["default"]
      : _number_js__WEBPACK_IMPORTED_MODULE_1__["default"])(a, b);
}


/***/ }),

/***/ "./node_modules/d3-scale/src/band.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-scale/src/band.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ band),
/* harmony export */   "point": () => (/* binding */ point)
/* harmony export */ });
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/range.js");
/* harmony import */ var _init_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./init.js */ "./node_modules/d3-scale/src/init.js");
/* harmony import */ var _ordinal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ordinal.js */ "./node_modules/d3-scale/src/ordinal.js");




function band() {
  var scale = (0,_ordinal_js__WEBPACK_IMPORTED_MODULE_0__["default"])().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      r0 = 0,
      r1 = 1,
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;

  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = r1 < r0,
        start = reverse ? r1 : r0,
        stop = reverse ? r0 : r1;
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = (0,d3_array__WEBPACK_IMPORTED_MODULE_1__["default"])(n).map(function(i) { return start + step * i; });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function(_) {
    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };

  scale.rangeRound = function(_) {
    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
  };

  scale.bandwidth = function() {
    return bandwidth;
  };

  scale.step = function() {
    return step;
  };

  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };

  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };

  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };

  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function() {
    return band(domain(), [r0, r1])
        .round(round)
        .paddingInner(paddingInner)
        .paddingOuter(paddingOuter)
        .align(align);
  };

  return _init_js__WEBPACK_IMPORTED_MODULE_2__.initRange.apply(rescale(), arguments);
}

function pointish(scale) {
  var copy = scale.copy;

  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function() {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}


/***/ }),

/***/ "./node_modules/d3-scale/src/constant.js":
/*!***********************************************!*\
  !*** ./node_modules/d3-scale/src/constant.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ constants)
/* harmony export */ });
function constants(x) {
  return function() {
    return x;
  };
}


/***/ }),

/***/ "./node_modules/d3-scale/src/continuous.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-scale/src/continuous.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "copy": () => (/* binding */ copy),
/* harmony export */   "default": () => (/* binding */ continuous),
/* harmony export */   "identity": () => (/* binding */ identity),
/* harmony export */   "transformer": () => (/* binding */ transformer)
/* harmony export */ });
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/bisect.js");
/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-interpolate */ "./node_modules/d3-interpolate/src/value.js");
/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-interpolate */ "./node_modules/d3-interpolate/src/number.js");
/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-interpolate */ "./node_modules/d3-interpolate/src/round.js");
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constant.js */ "./node_modules/d3-scale/src/constant.js");
/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./number.js */ "./node_modules/d3-scale/src/number.js");





var unit = [0, 1];

function identity(x) {
  return x;
}

function normalize(a, b) {
  return (b -= (a = +a))
      ? function(x) { return (x - a) / b; }
      : (0,_constant_js__WEBPACK_IMPORTED_MODULE_0__["default"])(isNaN(b) ? NaN : 0.5);
}

function clamper(a, b) {
  var t;
  if (a > b) t = a, a = b, b = t;
  return function(x) { return Math.max(a, Math.min(b, x)); };
}

// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
function bimap(domain, range, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x) { return r0(d0(x)); };
}

function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1;

  // Reverse descending domains.
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function(x) {
    var i = (0,d3_array__WEBPACK_IMPORTED_MODULE_1__["default"])(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target
      .domain(source.domain())
      .range(source.range())
      .interpolate(source.interpolate())
      .clamp(source.clamp())
      .unknown(source.unknown());
}

function transformer() {
  var domain = unit,
      range = unit,
      interpolate = d3_interpolate__WEBPACK_IMPORTED_MODULE_2__["default"],
      transform,
      untransform,
      unknown,
      clamp = identity,
      piecewise,
      output,
      input;

  function rescale() {
    var n = Math.min(domain.length, range.length);
    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }

  scale.invert = function(y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), d3_interpolate__WEBPACK_IMPORTED_MODULE_3__["default"])))(y)));
  };

  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, _number_js__WEBPACK_IMPORTED_MODULE_4__["default"]), rescale()) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };

  scale.rangeRound = function(_) {
    return range = Array.from(_), interpolate = d3_interpolate__WEBPACK_IMPORTED_MODULE_5__["default"], rescale();
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;
  };

  scale.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}

function continuous() {
  return transformer()(identity, identity);
}


/***/ }),

/***/ "./node_modules/d3-scale/src/init.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-scale/src/init.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "initInterpolator": () => (/* binding */ initInterpolator),
/* harmony export */   "initRange": () => (/* binding */ initRange)
/* harmony export */ });
function initRange(domain, range) {
  switch (arguments.length) {
    case 0: break;
    case 1: this.range(domain); break;
    default: this.range(range).domain(domain); break;
  }
  return this;
}

function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0: break;
    case 1: {
      if (typeof domain === "function") this.interpolator(domain);
      else this.range(domain);
      break;
    }
    default: {
      this.domain(domain);
      if (typeof interpolator === "function") this.interpolator(interpolator);
      else this.range(interpolator);
      break;
    }
  }
  return this;
}


/***/ }),

/***/ "./node_modules/d3-scale/src/linear.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-scale/src/linear.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ linear),
/* harmony export */   "linearish": () => (/* binding */ linearish)
/* harmony export */ });
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/ticks.js");
/* harmony import */ var _continuous_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./continuous.js */ "./node_modules/d3-scale/src/continuous.js");
/* harmony import */ var _init_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./init.js */ "./node_modules/d3-scale/src/init.js");
/* harmony import */ var _tickFormat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tickFormat.js */ "./node_modules/d3-scale/src/tickFormat.js");





function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function(count) {
    var d = domain();
    return (0,d3_array__WEBPACK_IMPORTED_MODULE_0__["default"])(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function(count, specifier) {
    var d = domain();
    return (0,_tickFormat_js__WEBPACK_IMPORTED_MODULE_1__["default"])(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };

  scale.nice = function(count) {
    if (count == null) count = 10;

    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    
    while (maxIter-- > 0) {
      step = (0,d3_array__WEBPACK_IMPORTED_MODULE_0__.tickIncrement)(start, stop, count);
      if (step === prestep) {
        d[i0] = start
        d[i1] = stop
        return domain(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = (0,_continuous_js__WEBPACK_IMPORTED_MODULE_2__["default"])();

  scale.copy = function() {
    return (0,_continuous_js__WEBPACK_IMPORTED_MODULE_2__.copy)(scale, linear());
  };

  _init_js__WEBPACK_IMPORTED_MODULE_3__.initRange.apply(scale, arguments);

  return linearish(scale);
}


/***/ }),

/***/ "./node_modules/d3-scale/src/log.js":
/*!******************************************!*\
  !*** ./node_modules/d3-scale/src/log.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ log),
/* harmony export */   "loggish": () => (/* binding */ loggish)
/* harmony export */ });
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/ticks.js");
/* harmony import */ var d3_format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-format */ "./node_modules/d3-format/src/formatSpecifier.js");
/* harmony import */ var d3_format__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-format */ "./node_modules/d3-format/src/defaultLocale.js");
/* harmony import */ var _nice_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nice.js */ "./node_modules/d3-scale/src/nice.js");
/* harmony import */ var _continuous_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./continuous.js */ "./node_modules/d3-scale/src/continuous.js");
/* harmony import */ var _init_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./init.js */ "./node_modules/d3-scale/src/init.js");






function transformLog(x) {
  return Math.log(x);
}

function transformExp(x) {
  return Math.exp(x);
}

function transformLogn(x) {
  return -Math.log(-x);
}

function transformExpn(x) {
  return -Math.exp(-x);
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10
      : base === Math.E ? Math.exp
      : x => Math.pow(base, x);
}

function logp(base) {
  return base === Math.E ? Math.log
      : base === 10 && Math.log10
      || base === 2 && Math.log2
      || (base = Math.log(base), x => Math.log(x) / base);
}

function reflect(f) {
  return (x, k) => -f(-x, k);
}

function loggish(transform) {
  const scale = transform(transformLog, transformExp);
  const domain = scale.domain;
  let base = 10;
  let logs;
  let pows;

  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }

  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = count => {
    const d = domain();
    let u = d[0];
    let v = d[d.length - 1];
    const r = v < u;

    if (r) ([u, v] = [v, u]);

    let i = logs(u);
    let j = logs(v);
    let k;
    let t;
    const n = count == null ? 10 : +count;
    let z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.floor(i), j = Math.ceil(j);
      if (u > 0) for (; i <= j; ++i) {
        for (k = 1; k < base; ++k) {
          t = i < 0 ? k / pows(-i) : k * pows(i);
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i <= j; ++i) {
        for (k = base - 1; k >= 1; --k) {
          t = i > 0 ? k / pows(-i) : k * pows(i);
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
      if (z.length * 2 < n) z = (0,d3_array__WEBPACK_IMPORTED_MODULE_0__["default"])(u, v, n);
    } else {
      z = (0,d3_array__WEBPACK_IMPORTED_MODULE_0__["default"])(i, j, Math.min(j - i, n)).map(pows);
    }
    return r ? z.reverse() : z;
  };

  scale.tickFormat = (count, specifier) => {
    if (count == null) count = 10;
    if (specifier == null) specifier = base === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base % 1) && (specifier = (0,d3_format__WEBPACK_IMPORTED_MODULE_1__["default"])(specifier)).precision == null) specifier.trim = true;
      specifier = (0,d3_format__WEBPACK_IMPORTED_MODULE_2__.format)(specifier);
    }
    if (count === Infinity) return specifier;
    const k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
    return d => {
      let i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = () => {
    return domain((0,_nice_js__WEBPACK_IMPORTED_MODULE_3__["default"])(domain(), {
      floor: x => pows(Math.floor(logs(x))),
      ceil: x => pows(Math.ceil(logs(x)))
    }));
  };

  return scale;
}

function log() {
  const scale = loggish((0,_continuous_js__WEBPACK_IMPORTED_MODULE_4__.transformer)()).domain([1, 10]);
  scale.copy = () => (0,_continuous_js__WEBPACK_IMPORTED_MODULE_4__.copy)(scale, log()).base(scale.base());
  _init_js__WEBPACK_IMPORTED_MODULE_5__.initRange.apply(scale, arguments);
  return scale;
}


/***/ }),

/***/ "./node_modules/d3-scale/src/nice.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-scale/src/nice.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ nice)
/* harmony export */ });
function nice(domain, interval) {
  domain = domain.slice();

  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}


/***/ }),

/***/ "./node_modules/d3-scale/src/number.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-scale/src/number.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ number)
/* harmony export */ });
function number(x) {
  return +x;
}


/***/ }),

/***/ "./node_modules/d3-scale/src/ordinal.js":
/*!**********************************************!*\
  !*** ./node_modules/d3-scale/src/ordinal.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ordinal),
/* harmony export */   "implicit": () => (/* binding */ implicit)
/* harmony export */ });
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-array */ "./node_modules/internmap/src/index.js");
/* harmony import */ var _init_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./init.js */ "./node_modules/d3-scale/src/init.js");



const implicit = Symbol("implicit");

function ordinal() {
  var index = new d3_array__WEBPACK_IMPORTED_MODULE_0__.InternMap(),
      domain = [],
      range = [],
      unknown = implicit;

  function scale(d) {
    let i = index.get(d);
    if (i === undefined) {
      if (unknown !== implicit) return unknown;
      index.set(d, i = domain.push(d) - 1);
    }
    return range[i % range.length];
  }

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = new d3_array__WEBPACK_IMPORTED_MODULE_0__.InternMap();
    for (const value of _) {
      if (index.has(value)) continue;
      index.set(value, domain.push(value) - 1);
    }
    return scale;
  };

  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), scale) : range.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return ordinal(domain, range).unknown(unknown);
  };

  _init_js__WEBPACK_IMPORTED_MODULE_1__.initRange.apply(scale, arguments);

  return scale;
}


/***/ }),

/***/ "./node_modules/d3-scale/src/tickFormat.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-scale/src/tickFormat.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ tickFormat)
/* harmony export */ });
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-array */ "./node_modules/d3-array/src/ticks.js");
/* harmony import */ var d3_format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-format */ "./node_modules/d3-format/src/formatSpecifier.js");
/* harmony import */ var d3_format__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-format */ "./node_modules/d3-format/src/precisionPrefix.js");
/* harmony import */ var d3_format__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-format */ "./node_modules/d3-format/src/defaultLocale.js");
/* harmony import */ var d3_format__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! d3-format */ "./node_modules/d3-format/src/precisionRound.js");
/* harmony import */ var d3_format__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-format */ "./node_modules/d3-format/src/precisionFixed.js");



function tickFormat(start, stop, count, specifier) {
  var step = (0,d3_array__WEBPACK_IMPORTED_MODULE_0__.tickStep)(start, stop, count),
      precision;
  specifier = (0,d3_format__WEBPACK_IMPORTED_MODULE_1__["default"])(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = (0,d3_format__WEBPACK_IMPORTED_MODULE_2__["default"])(step, value))) specifier.precision = precision;
      return (0,d3_format__WEBPACK_IMPORTED_MODULE_3__.formatPrefix)(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = (0,d3_format__WEBPACK_IMPORTED_MODULE_4__["default"])(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = (0,d3_format__WEBPACK_IMPORTED_MODULE_5__["default"])(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return (0,d3_format__WEBPACK_IMPORTED_MODULE_3__.format)(specifier);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/array.js":
/*!************************************************!*\
  !*** ./node_modules/d3-selection/src/array.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ array)
/* harmony export */ });
// Given something array like (or null), returns something that is strictly an
// array. This is used to ensure that array-like objects passed to d3.selectAll
// or selection.selectAll are converted into proper arrays when creating a
// selection; we don’t ever want to create a selection backed by a live
// HTMLCollection or NodeList. However, note that selection.selectAll will use a
// static NodeList as a group, since it safely derived from querySelectorAll.
function array(x) {
  return x == null ? [] : Array.isArray(x) ? x : Array.from(x);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/constant.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-selection/src/constant.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(x) {
  return function() {
    return x;
  };
}


/***/ }),

/***/ "./node_modules/d3-selection/src/creator.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-selection/src/creator.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _namespace_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./namespace.js */ "./node_modules/d3-selection/src/namespace.js");
/* harmony import */ var _namespaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./namespaces.js */ "./node_modules/d3-selection/src/namespaces.js");



function creatorInherit(name) {
  return function() {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === _namespaces_js__WEBPACK_IMPORTED_MODULE_0__.xhtml && document.documentElement.namespaceURI === _namespaces_js__WEBPACK_IMPORTED_MODULE_0__.xhtml
        ? document.createElement(name)
        : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name) {
  var fullname = (0,_namespace_js__WEBPACK_IMPORTED_MODULE_1__["default"])(name);
  return (fullname.local
      ? creatorFixed
      : creatorInherit)(fullname);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/matcher.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-selection/src/matcher.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "childMatcher": () => (/* binding */ childMatcher),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return function() {
    return this.matches(selector);
  };
}

function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}



/***/ }),

/***/ "./node_modules/d3-selection/src/namespace.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-selection/src/namespace.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _namespaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./namespaces.js */ "./node_modules/d3-selection/src/namespaces.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return _namespaces_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasOwnProperty(prefix) ? {space: _namespaces_js__WEBPACK_IMPORTED_MODULE_0__["default"][prefix], local: name} : name; // eslint-disable-line no-prototype-builtins
}


/***/ }),

/***/ "./node_modules/d3-selection/src/namespaces.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-selection/src/namespaces.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "xhtml": () => (/* binding */ xhtml)
/* harmony export */ });
var xhtml = "http://www.w3.org/1999/xhtml";

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
});


/***/ }),

/***/ "./node_modules/d3-selection/src/select.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-selection/src/select.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _selection_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selection/index.js */ "./node_modules/d3-selection/src/selection/index.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return typeof selector === "string"
      ? new _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.Selection([[document.querySelector(selector)]], [document.documentElement])
      : new _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.Selection([[selector]], _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.root);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selectAll.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-selection/src/selectAll.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./array.js */ "./node_modules/d3-selection/src/array.js");
/* harmony import */ var _selection_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selection/index.js */ "./node_modules/d3-selection/src/selection/index.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return typeof selector === "string"
      ? new _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.Selection([document.querySelectorAll(selector)], [document.documentElement])
      : new _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.Selection([(0,_array_js__WEBPACK_IMPORTED_MODULE_1__["default"])(selector)], _selection_index_js__WEBPACK_IMPORTED_MODULE_0__.root);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/append.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/append.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _creator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../creator.js */ "./node_modules/d3-selection/src/creator.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name) {
  var create = typeof name === "function" ? name : (0,_creator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(name);
  return this.select(function() {
    return this.appendChild(create.apply(this, arguments));
  });
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/attr.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/attr.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _namespace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../namespace.js */ "./node_modules/d3-selection/src/namespace.js");


function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);
    else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value) {
  var fullname = (0,_namespace_js__WEBPACK_IMPORTED_MODULE_0__["default"])(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local
        ? node.getAttributeNS(fullname.space, fullname.local)
        : node.getAttribute(fullname);
  }

  return this.each((value == null
      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)
      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/call.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/call.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/classed.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/classed.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }

  return this.each((typeof value === "function"
      ? classedFunction : value
      ? classedTrue
      : classedFalse)(names, value));
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/clone.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/clone.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/data.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/data.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _enter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enter.js */ "./node_modules/d3-selection/src/selection/enter.js");
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constant.js */ "./node_modules/d3-selection/src/constant.js");




function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length;

  // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new _enter_js__WEBPACK_IMPORTED_MODULE_0__.EnterNode(parent, data[i]);
    }
  }

  // Put any non-null nodes that don’t fit into exit.
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = new Map,
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue;

  // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }

  // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.
  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data[i], i, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new _enter_js__WEBPACK_IMPORTED_MODULE_0__.EnterNode(parent, data[i]);
    }
  }

  // Add any remaining nodes that were not bound to data to exit.
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {
      exit[i] = node;
    }
  }
}

function datum(node) {
  return node.__data__;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value, key) {
  if (!arguments.length) return Array.from(this, datum);

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;

  if (typeof value !== "function") value = (0,_constant_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);

    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

    // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
        previous._next = next || null;
      }
    }
  }

  update = new _index_js__WEBPACK_IMPORTED_MODULE_2__.Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}

// Given some data, this returns an array-like view of it: an object that
// exposes a length property and allows numeric indexing. Note that unlike
// selectAll, this isn’t worried about “live” collections because the resulting
// array will only be used briefly while data is being bound. (It is possible to
// cause the data to change while iterating by using a key function, but please
// don’t; we’d rather avoid a gratuitous copy.)
function arraylike(data) {
  return typeof data === "object" && "length" in data
    ? data // Array, TypedArray, NodeList, array-like
    : Array.from(data); // Map, Set, iterable, string, or anything else
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/datum.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/datum.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  return arguments.length
      ? this.property("__data__", value)
      : this.node().__data__;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/dispatch.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/dispatch.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _window_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window.js */ "./node_modules/d3-selection/src/window.js");


function dispatchEvent(node, type, params) {
  var window = (0,_window_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(type, params) {
  return this.each((typeof params === "function"
      ? dispatchFunction
      : dispatchConstant)(type, params));
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/each.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/each.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(callback) {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/empty.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/empty.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return !this.node();
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/enter.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/enter.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EnterNode": () => (/* binding */ EnterNode),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _sparse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sparse.js */ "./node_modules/d3-selection/src/selection/sparse.js");
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(this._enter || this._groups.map(_sparse_js__WEBPACK_IMPORTED_MODULE_1__["default"]), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
  querySelector: function(selector) { return this._parent.querySelector(selector); },
  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
};


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/exit.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/exit.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _sparse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sparse.js */ "./node_modules/d3-selection/src/selection/sparse.js");
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(this._exit || this._groups.map(_sparse_js__WEBPACK_IMPORTED_MODULE_1__["default"]), this._parents);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/filter.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/filter.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _matcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matcher.js */ "./node_modules/d3-selection/src/matcher.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(match) {
  if (typeof match !== "function") match = (0,_matcher_js__WEBPACK_IMPORTED_MODULE_0__["default"])(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_1__.Selection(subgroups, this._parents);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/html.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/html.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  return arguments.length
      ? this.each(value == null
          ? htmlRemove : (typeof value === "function"
          ? htmlFunction
          : htmlConstant)(value))
      : this.node().innerHTML;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Selection": () => (/* binding */ Selection),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "root": () => (/* binding */ root)
/* harmony export */ });
/* harmony import */ var _select_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./select.js */ "./node_modules/d3-selection/src/selection/select.js");
/* harmony import */ var _selectAll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectAll.js */ "./node_modules/d3-selection/src/selection/selectAll.js");
/* harmony import */ var _selectChild_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selectChild.js */ "./node_modules/d3-selection/src/selection/selectChild.js");
/* harmony import */ var _selectChildren_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selectChildren.js */ "./node_modules/d3-selection/src/selection/selectChildren.js");
/* harmony import */ var _filter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./filter.js */ "./node_modules/d3-selection/src/selection/filter.js");
/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./data.js */ "./node_modules/d3-selection/src/selection/data.js");
/* harmony import */ var _enter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./enter.js */ "./node_modules/d3-selection/src/selection/enter.js");
/* harmony import */ var _exit_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./exit.js */ "./node_modules/d3-selection/src/selection/exit.js");
/* harmony import */ var _join_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./join.js */ "./node_modules/d3-selection/src/selection/join.js");
/* harmony import */ var _merge_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./merge.js */ "./node_modules/d3-selection/src/selection/merge.js");
/* harmony import */ var _order_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./order.js */ "./node_modules/d3-selection/src/selection/order.js");
/* harmony import */ var _sort_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./sort.js */ "./node_modules/d3-selection/src/selection/sort.js");
/* harmony import */ var _call_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./call.js */ "./node_modules/d3-selection/src/selection/call.js");
/* harmony import */ var _nodes_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./nodes.js */ "./node_modules/d3-selection/src/selection/nodes.js");
/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./node.js */ "./node_modules/d3-selection/src/selection/node.js");
/* harmony import */ var _size_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./size.js */ "./node_modules/d3-selection/src/selection/size.js");
/* harmony import */ var _empty_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./empty.js */ "./node_modules/d3-selection/src/selection/empty.js");
/* harmony import */ var _each_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./each.js */ "./node_modules/d3-selection/src/selection/each.js");
/* harmony import */ var _attr_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./attr.js */ "./node_modules/d3-selection/src/selection/attr.js");
/* harmony import */ var _style_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./style.js */ "./node_modules/d3-selection/src/selection/style.js");
/* harmony import */ var _property_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./property.js */ "./node_modules/d3-selection/src/selection/property.js");
/* harmony import */ var _classed_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./classed.js */ "./node_modules/d3-selection/src/selection/classed.js");
/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./text.js */ "./node_modules/d3-selection/src/selection/text.js");
/* harmony import */ var _html_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./html.js */ "./node_modules/d3-selection/src/selection/html.js");
/* harmony import */ var _raise_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./raise.js */ "./node_modules/d3-selection/src/selection/raise.js");
/* harmony import */ var _lower_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./lower.js */ "./node_modules/d3-selection/src/selection/lower.js");
/* harmony import */ var _append_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./append.js */ "./node_modules/d3-selection/src/selection/append.js");
/* harmony import */ var _insert_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./insert.js */ "./node_modules/d3-selection/src/selection/insert.js");
/* harmony import */ var _remove_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./remove.js */ "./node_modules/d3-selection/src/selection/remove.js");
/* harmony import */ var _clone_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./clone.js */ "./node_modules/d3-selection/src/selection/clone.js");
/* harmony import */ var _datum_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./datum.js */ "./node_modules/d3-selection/src/selection/datum.js");
/* harmony import */ var _on_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./on.js */ "./node_modules/d3-selection/src/selection/on.js");
/* harmony import */ var _dispatch_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./dispatch.js */ "./node_modules/d3-selection/src/selection/dispatch.js");
/* harmony import */ var _iterator_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./iterator.js */ "./node_modules/d3-selection/src/selection/iterator.js");



































var root = [null];

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

function selection_selection() {
  return this;
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: _select_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  selectAll: _selectAll_js__WEBPACK_IMPORTED_MODULE_1__["default"],
  selectChild: _selectChild_js__WEBPACK_IMPORTED_MODULE_2__["default"],
  selectChildren: _selectChildren_js__WEBPACK_IMPORTED_MODULE_3__["default"],
  filter: _filter_js__WEBPACK_IMPORTED_MODULE_4__["default"],
  data: _data_js__WEBPACK_IMPORTED_MODULE_5__["default"],
  enter: _enter_js__WEBPACK_IMPORTED_MODULE_6__["default"],
  exit: _exit_js__WEBPACK_IMPORTED_MODULE_7__["default"],
  join: _join_js__WEBPACK_IMPORTED_MODULE_8__["default"],
  merge: _merge_js__WEBPACK_IMPORTED_MODULE_9__["default"],
  selection: selection_selection,
  order: _order_js__WEBPACK_IMPORTED_MODULE_10__["default"],
  sort: _sort_js__WEBPACK_IMPORTED_MODULE_11__["default"],
  call: _call_js__WEBPACK_IMPORTED_MODULE_12__["default"],
  nodes: _nodes_js__WEBPACK_IMPORTED_MODULE_13__["default"],
  node: _node_js__WEBPACK_IMPORTED_MODULE_14__["default"],
  size: _size_js__WEBPACK_IMPORTED_MODULE_15__["default"],
  empty: _empty_js__WEBPACK_IMPORTED_MODULE_16__["default"],
  each: _each_js__WEBPACK_IMPORTED_MODULE_17__["default"],
  attr: _attr_js__WEBPACK_IMPORTED_MODULE_18__["default"],
  style: _style_js__WEBPACK_IMPORTED_MODULE_19__["default"],
  property: _property_js__WEBPACK_IMPORTED_MODULE_20__["default"],
  classed: _classed_js__WEBPACK_IMPORTED_MODULE_21__["default"],
  text: _text_js__WEBPACK_IMPORTED_MODULE_22__["default"],
  html: _html_js__WEBPACK_IMPORTED_MODULE_23__["default"],
  raise: _raise_js__WEBPACK_IMPORTED_MODULE_24__["default"],
  lower: _lower_js__WEBPACK_IMPORTED_MODULE_25__["default"],
  append: _append_js__WEBPACK_IMPORTED_MODULE_26__["default"],
  insert: _insert_js__WEBPACK_IMPORTED_MODULE_27__["default"],
  remove: _remove_js__WEBPACK_IMPORTED_MODULE_28__["default"],
  clone: _clone_js__WEBPACK_IMPORTED_MODULE_29__["default"],
  datum: _datum_js__WEBPACK_IMPORTED_MODULE_30__["default"],
  on: _on_js__WEBPACK_IMPORTED_MODULE_31__["default"],
  dispatch: _dispatch_js__WEBPACK_IMPORTED_MODULE_32__["default"],
  [Symbol.iterator]: _iterator_js__WEBPACK_IMPORTED_MODULE_33__["default"]
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (selection);


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/insert.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/insert.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _creator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../creator.js */ "./node_modules/d3-selection/src/creator.js");
/* harmony import */ var _selector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../selector.js */ "./node_modules/d3-selection/src/selector.js");



function constantNull() {
  return null;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, before) {
  var create = typeof name === "function" ? name : (0,_creator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(name),
      select = before == null ? constantNull : typeof before === "function" ? before : (0,_selector_js__WEBPACK_IMPORTED_MODULE_1__["default"])(before);
  return this.select(function() {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/iterator.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/iterator.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function* __WEBPACK_DEFAULT_EXPORT__() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) yield node;
    }
  }
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/join.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/join.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter) enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update = onupdate(update);
    if (update) update = update.selection();
  }
  if (onexit == null) exit.remove(); else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/lower.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/lower.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return this.each(lower);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/merge.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/merge.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {
  var selection = context.selection ? context.selection() : context;

  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(merges, this._parents);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/node.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/node.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/nodes.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/nodes.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return Array.from(this);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/on.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/on.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {type: t, name: name};
  });
}

function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;
    else delete this.__on;
  };
}

function onAdd(typename, value, options) {
  return function() {
    var on = this.__on, o, listener = contextListener(value);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
        this.addEventListener(o.type, o.listener = listener, o.options = options);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, options);
    o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};
    if (!on) this.__on = [o];
    else on.push(o);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(typename, value, options) {
  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));
  return this;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/order.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/order.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {

  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/property.js":
/*!*************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/property.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];
    else this[name] = v;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value) {
  return arguments.length > 1
      ? this.each((value == null
          ? propertyRemove : typeof value === "function"
          ? propertyFunction
          : propertyConstant)(name, value))
      : this.node()[name];
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/raise.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/raise.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return this.each(raise);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/remove.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/remove.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  return this.each(remove);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/select.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/select.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _selector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../selector.js */ "./node_modules/d3-selection/src/selector.js");



/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(select) {
  if (typeof select !== "function") select = (0,_selector_js__WEBPACK_IMPORTED_MODULE_0__["default"])(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_1__.Selection(subgroups, this._parents);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/selectAll.js":
/*!**************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/selectAll.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");
/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../array.js */ "./node_modules/d3-selection/src/array.js");
/* harmony import */ var _selectorAll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../selectorAll.js */ "./node_modules/d3-selection/src/selectorAll.js");




function arrayAll(select) {
  return function() {
    return (0,_array_js__WEBPACK_IMPORTED_MODULE_0__["default"])(select.apply(this, arguments));
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(select) {
  if (typeof select === "function") select = arrayAll(select);
  else select = (0,_selectorAll_js__WEBPACK_IMPORTED_MODULE_1__["default"])(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_2__.Selection(subgroups, parents);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/selectChild.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/selectChild.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _matcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matcher.js */ "./node_modules/d3-selection/src/matcher.js");


var find = Array.prototype.find;

function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}

function childFirst() {
  return this.firstElementChild;
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(match) {
  return this.select(match == null ? childFirst
      : childFind(typeof match === "function" ? match : (0,_matcher_js__WEBPACK_IMPORTED_MODULE_0__.childMatcher)(match)));
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/selectChildren.js":
/*!*******************************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/selectChildren.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _matcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../matcher.js */ "./node_modules/d3-selection/src/matcher.js");


var filter = Array.prototype.filter;

function children() {
  return Array.from(this.children);
}

function childrenFilter(match) {
  return function() {
    return filter.call(this.children, match);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(match) {
  return this.selectAll(match == null ? children
      : childrenFilter(typeof match === "function" ? match : (0,_matcher_js__WEBPACK_IMPORTED_MODULE_0__.childMatcher)(match)));
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/size.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/size.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  let size = 0;
  for (const node of this) ++size; // eslint-disable-line no-unused-vars
  return size;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/sort.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/sort.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/d3-selection/src/selection/index.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }

  return new _index_js__WEBPACK_IMPORTED_MODULE_0__.Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/sparse.js":
/*!***********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/sparse.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(update) {
  return new Array(update.length);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/style.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/style.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "styleValue": () => (/* binding */ styleValue)
/* harmony export */ });
/* harmony import */ var _window_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../window.js */ "./node_modules/d3-selection/src/window.js");


function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);
    else this.style.setProperty(name, v, priority);
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, value, priority) {
  return arguments.length > 1
      ? this.each((value == null
            ? styleRemove : typeof value === "function"
            ? styleFunction
            : styleConstant)(name, value, priority == null ? "" : priority))
      : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name)
      || (0,_window_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).getComputedStyle(node, null).getPropertyValue(name);
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selection/text.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-selection/src/selection/text.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(value) {
  return arguments.length
      ? this.each(value == null
          ? textRemove : (typeof value === "function"
          ? textFunction
          : textConstant)(value))
      : this.node().textContent;
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selector.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-selection/src/selector.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function none() {}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}


/***/ }),

/***/ "./node_modules/d3-selection/src/selectorAll.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-selection/src/selectorAll.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function empty() {
  return [];
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}


/***/ }),

/***/ "./node_modules/d3-selection/src/window.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-selection/src/window.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(node) {
  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
      || (node.document && node) // node is a Window
      || node.defaultView; // node is a Document
}


/***/ }),

/***/ "./node_modules/d3-timer/src/timer.js":
/*!********************************************!*\
  !*** ./node_modules/d3-timer/src/timer.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Timer": () => (/* binding */ Timer),
/* harmony export */   "now": () => (/* binding */ now),
/* harmony export */   "timer": () => (/* binding */ timer),
/* harmony export */   "timerFlush": () => (/* binding */ timerFlush)
/* harmony export */ });
var frame = 0, // is an animation frame pending?
    timeout = 0, // is a timeout pending?
    interval = 0, // are any timers active?
    pokeDelay = 1000, // how frequently we check for clock skew
    taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call =
  this._time =
  this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;
      else taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer;
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.
  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);
    t = t._next;
  }
  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(), delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.
  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}


/***/ }),

/***/ "./node_modules/internmap/src/index.js":
/*!*********************************************!*\
  !*** ./node_modules/internmap/src/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InternMap": () => (/* binding */ InternMap),
/* harmony export */   "InternSet": () => (/* binding */ InternSet)
/* harmony export */ });
class InternMap extends Map {
  constructor(entries, key = keyof) {
    super();
    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
    if (entries != null) for (const [key, value] of entries) this.set(key, value);
  }
  get(key) {
    return super.get(intern_get(this, key));
  }
  has(key) {
    return super.has(intern_get(this, key));
  }
  set(key, value) {
    return super.set(intern_set(this, key), value);
  }
  delete(key) {
    return super.delete(intern_delete(this, key));
  }
}

class InternSet extends Set {
  constructor(values, key = keyof) {
    super();
    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
    if (values != null) for (const value of values) this.add(value);
  }
  has(value) {
    return super.has(intern_get(this, value));
  }
  add(value) {
    return super.add(intern_set(this, value));
  }
  delete(value) {
    return super.delete(intern_delete(this, value));
  }
}

function intern_get({_intern, _key}, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}

function intern_set({_intern, _key}, value) {
  const key = _key(value);
  if (_intern.has(key)) return _intern.get(key);
  _intern.set(key, value);
  return value;
}

function intern_delete({_intern, _key}, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(key);
    _intern.delete(key);
  }
  return value;
}

function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/ascending.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/ascending.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ascending)
/* harmony export */ });
function ascending(a, b) {
  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/bisect.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/bisect.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bisectCenter": () => (/* binding */ bisectCenter),
/* harmony export */   "bisectLeft": () => (/* binding */ bisectLeft),
/* harmony export */   "bisectRight": () => (/* binding */ bisectRight),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ascending_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ascending.js */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/ascending.js");
/* harmony import */ var _bisector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bisector.js */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/bisector.js");
/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./number.js */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/number.js");




const ascendingBisect = (0,_bisector_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_ascending_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
const bisectRight = ascendingBisect.right;
const bisectLeft = ascendingBisect.left;
const bisectCenter = (0,_bisector_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_number_js__WEBPACK_IMPORTED_MODULE_2__["default"]).center;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (bisectRight);


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/bisector.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/bisector.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ bisector)
/* harmony export */ });
/* harmony import */ var _ascending_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ascending.js */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/ascending.js");
/* harmony import */ var _descending_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./descending.js */ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/descending.js");



function bisector(f) {
  let compare1, compare2, delta;

  // If an accessor is specified, promote it to a comparator. In this case we
  // can test whether the search value is (self-) comparable. We can’t do this
  // for a comparator (except for specific, known comparators) because we can’t
  // tell if the comparator is symmetric, and an asymmetric comparator can’t be
  // used to test whether a single value is comparable.
  if (f.length !== 2) {
    compare1 = _ascending_js__WEBPACK_IMPORTED_MODULE_0__["default"];
    compare2 = (d, x) => (0,_ascending_js__WEBPACK_IMPORTED_MODULE_0__["default"])(f(d), x);
    delta = (d, x) => f(d) - x;
  } else {
    compare1 = f === _ascending_js__WEBPACK_IMPORTED_MODULE_0__["default"] || f === _descending_js__WEBPACK_IMPORTED_MODULE_1__["default"] ? f : zero;
    compare2 = f;
    delta = f;
  }

  function left(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = (lo + hi) >>> 1;
        if (compare2(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }

  function right(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;
      do {
        const mid = (lo + hi) >>> 1;
        if (compare2(a[mid], x) <= 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }

  function center(a, x, lo = 0, hi = a.length) {
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }

  return {left, center, right};
}

function zero() {
  return 0;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/descending.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/descending.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ descending)
/* harmony export */ });
function descending(a, b) {
  return a == null || b == null ? NaN
    : b < a ? -1
    : b > a ? 1
    : b >= a ? 0
    : NaN;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/max.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/max.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ max)
/* harmony export */ });
function max(values, valueof) {
  let max;
  if (valueof === undefined) {
    for (const value of values) {
      if (value != null
          && (max < value || (max === undefined && value >= value))) {
        max = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null
          && (max < value || (max === undefined && value >= value))) {
        max = value;
      }
    }
  }
  return max;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/min.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/min.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ min)
/* harmony export */ });
function min(values, valueof) {
  let min;
  if (valueof === undefined) {
    for (const value of values) {
      if (value != null
          && (min > value || (min === undefined && value >= value))) {
        min = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null
          && (min > value || (min === undefined && value >= value))) {
        min = value;
      }
    }
  }
  return min;
}


/***/ }),

/***/ "./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/number.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/powerbi-visuals-utils-chartutils/node_modules/d3-array/src/number.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ number),
/* harmony export */   "numbers": () => (/* binding */ numbers)
/* harmony export */ });
function number(x) {
  return x === null ? NaN : +x;
}

function* numbers(values, valueof) {
  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        yield value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        yield value;
      }
    }
  }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*****************************************!*\
  !*** ./.tmp/precompile/visualPlugin.ts ***!
  \*****************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_visual__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/visual */ "./src/visual.ts");

var powerbiKey = "powerbi";
var powerbi = window[powerbiKey];
var stackedColumnChartByAkvelonCC88FD95630A41AC8562F09033A48946 = {
  name: 'stackedColumnChartByAkvelonCC88FD95630A41AC8562F09033A48946',
  displayName: 'Stacked Column Chart by Akvelon 2.0.2',
  "class": 'Visual',
  apiVersion: '4.7.0',
  create: function create(options) {
    if (_src_visual__WEBPACK_IMPORTED_MODULE_0__.Visual) {
      return new _src_visual__WEBPACK_IMPORTED_MODULE_0__.Visual(options);
    }
    throw 'Visual instance not found';
  },
  createModalDialog: function createModalDialog(dialogId, options, initialState) {
    var dialogRegistry = globalThis.dialogRegistry;
    if (dialogId in dialogRegistry) {
      new dialogRegistry[dialogId](options, initialState);
    }
  },
  custom: true
};
if (typeof powerbi !== "undefined") {
  powerbi.visuals = powerbi.visuals || {};
  powerbi.visuals.plugins = powerbi.visuals.plugins || {};
  powerbi.visuals.plugins["stackedColumnChartByAkvelonCC88FD95630A41AC8562F09033A48946"] = stackedColumnChartByAkvelonCC88FD95630A41AC8562F09033A48946;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackedColumnChartByAkvelonCC88FD95630A41AC8562F09033A48946);
})();

stackedColumnChartByAkvelonCC88FD95630A41AC8562F09033A48946 = __webpack_exports__;
/******/ })()
;