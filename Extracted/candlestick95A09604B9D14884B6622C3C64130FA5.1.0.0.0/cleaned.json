{
    "visual": {
        "name": "candlestick",
        "displayName": "Candlestick",
        "guid": "candlestick95A09604B9D14884B6622C3C64130FA5",
        "visualClassName": "Visual",
        "version": "1.0.0",
        "description": "candlestick",
        "supportUrl": "none",
        "gitHubUrl": "https://github.com/D-BI-TECH/Candlestick"
    },
    "author": {
        "name": "DavisZHANG",
        "email": "hooooooong@outlook.com"
    },
    "apiVersion": "2.6.0",
    "style": "style/visual.less",
    "stringResources": {
        "en-US": {
            "date": "Date",
            "close": "Close",
            "open": "Open",
            "high": "High",
            "low": "Low",
            "Candlestick": "Candles",
            "CandleStyle": "Style",
            "GoodColor": "Good Color",
            "BadColor": "Bad Color",
            "MA Lines": "MA Lines",
            "MA05": "MA05",
            "MA10": "MA10",
            "MA20": "MA20",
            "MA30": "MA30",
            "MA60": "MA60",
            "ma_customized": "MA (customized)",
            "ma_Items": "Moving Days",
            "ma_Name": "Line Name",
            "ma_customized_color": "Line Color",
            "X_Axis": "X Axis",
            "xFonts": "Fonts",
            "DateFormat": "Date Format",
            "xItems": "Items",
            "xSize": "Size",
            "xColor": "Color",
            "xGrid": "Grid",
            "xGridColor": "Grid Color",
            "xGridStyle": "Grid Style",
            "Y_Axis": "Y Axis",
            "yFonts": "Fonts",
            "ySize": "Size",
            "yColor": "Color",
            "yGrid": "Grid",
            "yGridColor": "Grid Color",
            "Separator": "Separator (,)",
            "yEnd": "End",
            "yStart": "Start",
            "HoverTooltip": "Tooltip",
            "tFonts": "Fonts",
            "tSize": "Fonts Size",
            "tColor": "Fonts Color",
            "Bg_Color": "Background Color",
            "Border_Color": "Border Color",
            "Include_Date": "Show Date",
            "Include_MA": "Show MA",
            "Advance": "Advance",
            "Show Latest Price": "Show Latest Price",
            "Line Style": "Style",
            "Line Color": "Color",
            "show_annotations": "High-Low Annotations",
            "annotations_style": "Arrow Style",
            "annotations_color": "Color",
            "annotations_italic": "Italic",
            "annotations_font_size": "Font Size",
            "annotations_text_max": "Text(high)",
            "annotations_text_min": "Text(low)",
            "Background": "Background",
            "Paper Color": "Paper Color",
            "Plot Color": "Plot Color",
            "Others": "Others",
            "Mode Bar": "Mode Bar",
            "EnableCopy": "Copy Button",
            "SpikeColor": "Spike Line Color",
            "SpikeStyle": "Spike Line Style"
        },
        "zh-CN": {
            "date": "\u65e5\u671f",
            "close": "\u6536\u76d8",
            "open": "\u5f00\u76d8",
            "high": "\u6700\u9ad8",
            "low": "\u6700\u4f4e",
            "Candlestick": "\u8721\u70db\u56fe",
            "CandleStyle": "\u6837\u5f0f",
            "GoodColor": "\u989c\u8272\uff08\u6da8\uff09",
            "BadColor": " \u989c\u8272\uff08\u8dcc\uff09 ",
            "MA Lines": "\u65e5\u5747\u7ebf",
            "MA05": "5\u65e5\u5747\u7ebf",
            "MA10": "10\u65e5\u5747\u7ebf",
            "MA20": "20\u65e5\u5747\u7ebf",
            "MA30": "30\u65e5\u5747\u7ebf",
            "MA60": "60\u65e5\u5747\u7ebf",
            "ma_customized": "\u65e5\u5747\u7ebf\uff08\u81ea\u5b9a\u4e49\uff09",
            "ma_Items": "\u79fb\u52a8\u9879\u6570",
            "ma_Name": "\u540d\u79f0",
            "ma_customized_color": "\u989c\u8272",
            "X_Axis": "X\u8f74",
            "xFonts": "\u5b57\u4f53",
            "DateFormat": "\u65e5\u671f\u683c\u5f0f",
            "xItems": "\u663e\u793a\u6807\u7b7e\u6570",
            "xSize": "\u6807\u7b7e\u5c3a\u5bf8",
            "xColor": "\u6807\u7b7e\u989c\u8272",
            "xGrid": "\u7f51\u683c\u7ebf",
            "xGridColor": "\u7f51\u683c\u7ebf\u989c\u8272",
            "xGridStyle": "\u7f51\u683c\u7ebf\u6837\u5f0f",
            "Y_Axis": "Y\u8f74",
            "yFonts": "\u5b57\u4f53",
            "ySize": "\u6807\u7b7e\u5c3a\u5bf8",
            "yColor": "\u6807\u7b7e\u989c\u8272",
            "yGrid": "\u7f51\u683c\u7ebf",
            "yGridColor": "\u7f51\u683c\u7ebf\u989c\u8272",
            "Separator": "\u5343\u5206\u4f4d\u5206\u9694\u7b26",
            "yEnd": "\u6700\u5c0f\u503c",
            "yStart": "\u6700\u5927\u503c",
            "HoverTooltip": "\u5de5\u5177\u63d0\u793a",
            "tFonts": "\u5b57\u4f53",
            "tSize": "\u5b57\u7b26\u5c3a\u5bf8",
            "tColor": "\u5b57\u4f53\u989c\u8272",
            "Bg_Color": "\u80cc\u666f\u8272",
            "Border_Color": "\u8fb9\u6846\u8272",
            "Include_Date": "\u5305\u542b\u65e5\u671f",
            "Include_MA": "\u5305\u542b\u65e5\u5747\u7ebf",
            "Advance": "\u9ad8\u7ea7",
            "Show Latest Price": "\u663e\u793a\u6700\u65b0\u6536\u76d8\u4ef7",
            "Line Style": "\u6837\u5f0f",
            "Line Color": "\u989c\u8272",
            "show_annotations": " \u9ad8\u4f4e\u4f4d\u6807\u6ce8",
            "annotations_style": "\u7bad\u5934\u6837\u5f0f",
            "annotations_color": "\u989c\u8272",
            "annotations_italic": "\u659c\u4f53",
            "annotations_font_size": "\u5b57\u7b26\u5c3a\u5bf8",
            "annotations_text_max": "\u6807\u6ce8\uff08\u6700\u9ad8\uff09",
            "annotations_text_min": "\u6807\u6ce8\uff08\u6700\u4f4e\uff09",
            "Background": "\u80cc\u666f",
            "Paper Color": "\u5e95\u8272",
            "Plot Color": "\u7ed8\u56fe\u533a",
            "Others": "\u5176\u4ed6",
            "Mode Bar": "\u5de5\u5177\u680f",
            "EnableCopy": "\u6570\u636e\u526a\u8d34\u529f\u80fd",
            "SpikeColor": "\u60ac\u6d6e\u7ebf\u989c\u8272",
            "SpikeStyle": "\u60ac\u6d6e\u7ebf\u6837\u5f0f"
        }
    },
    "capabilities": {
        "dataRoles": [
            {
                "displayName": "Date",
                "displayNameKey": "date",
                "kind": "Grouping",
                "name": "da"
            },
            {
                "displayName": "Close",
                "displayNameKey": "close",
                "kind": "Measure",
                "name": "cl"
            },
            {
                "displayName": "Open",
                "displayNameKey": "open",
                "kind": "Measure",
                "name": "op"
            },
            {
                "displayName": "High",
                "displayNameKey": "high",
                "kind": "Measure",
                "name": "hi"
            },
            {
                "displayName": "Low",
                "displayNameKey": "low",
                "kind": "Measure",
                "name": "lo"
            }
        ],
        "dataViewMappings": [
            {
                "conditions": [
                    {
                        "da": {
                            "max": 1
                        },
                        "cl": {
                            "max": 1
                        },
                        "op": {
                            "max": 1
                        },
                        "hi": {
                            "max": 1
                        },
                        "lo": {
                            "max": 1
                        }
                    }
                ],
                "scriptResult": {
                    "dataInput": {
                        "table": {
                            "rows": {
                                "select": [
                                    {
                                        "for": {
                                            "in": "da"
                                        }
                                    },
                                    {
                                        "for": {
                                            "in": "cl"
                                        }
                                    },
                                    {
                                        "for": {
                                            "in": "op"
                                        }
                                    },
                                    {
                                        "for": {
                                            "in": "hi"
                                        }
                                    },
                                    {
                                        "for": {
                                            "in": "lo"
                                        }
                                    }
                                ],
                                "dataReductionAlgorithm": {
                                    "top": {
                                        "count": 10000
                                    }
                                }
                            }
                        }
                    },
                    "script": {
                        "scriptProviderDefault": "R",
                        "scriptOutputType": "html",
                        "source": {
                            "objectName": "rcv_script",
                            "propertyName": "source"
                        },
                        "provider": {
                            "objectName": "rcv_script",
                            "propertyName": "provider"
                        },
                        "scriptSourceDefault": "\n############### Utility functions ###############\nlibraryRequireInstall = function(packageName, ...)\n{\n  if(!require(packageName, character.only = TRUE)) \n    warning(paste(\"*** The package: '\", packageName, \"' was not installed ***\", sep=\"\"))\n}\n\nlibraryRequireInstall(\"XML\")\nlibraryRequireInstall(\"htmlwidgets\")\n\ninternalSaveWidget <- function(widget, fname)\n{\n  tempFname = paste(fname, \".tmp\", sep=\"\")\n  htmlwidgets::saveWidget(widget, file = tempFname, selfcontained = FALSE)\n  FlattenHTML(tempFname, fname)\n}\n\nFlattenHTML <- function(fnameIn, fnameOut)\n{\n  # Read and parse HTML file\n  # Embed all js and css files into one unified file\n  \n  if(!file.exists(fnameIn))\n    return(FALSE)\n  \n  dir = dirname(fnameIn)\n  html = htmlTreeParse(fnameIn, useInternal = TRUE)\n  top = xmlRoot(html)\n  \n  # extract all <script> tags with src value\n  srcNode=getNodeSet(top, '//script[@src]')\n  for (node in srcNode)\n  {\n    b = xmlAttrs(node)\n    fname = file.path(dir, b['src'])\n    alternateSrc = FindSrcReplacement(fname)\n    if (!is.null(alternateSrc))\n    {\n      s = alternateSrc\n      names(s) = 'src'\n      newNode = xmlNode(\"script\",attrs = s)\n      replaceNodes(node, newNode)\n    }else{\n      str=ReadFileForEmbedding(fname);\n      if (!is.null(str))\n      {      \n        newNode = xmlNode(\"script\", str, attrs = c(type = \"text/javascript\"))\n        replaceNodes(node, newNode)\n      }\n    }\n  }\n  \n  # extract all <link> tags with src value\n  linkNode=getNodeSet(top, '//link[@href]')\n  for (node in linkNode)\n  {\n    b = xmlAttrs(node)\n    fname = file.path(dir, b['href'])\n    str = ReadFileForEmbedding(fname, FALSE);\n    if (!is.null(str))\n    {\n      newNode = xmlNode(\"style\", str)\n      replaceNodes(node, newNode)\n    }\n  }\n  \n  saveXML(html, file = fnameOut)\n  return(TRUE)\n}\n\nReadFileForEmbedding <- function(fname, addCdata = TRUE)\n{\n  data = ReadFullFile(fname)\n  if (is.null(data))\n    return(NULL)\n\n  str = paste(data, collapse ='\\n')\n  if (addCdata) {\n    str = paste(cbind('// <![CDATA[', str,'// ]]>'), collapse ='\\n')\n  }\n  return(str)\n}\n\nReadFullFile <- function(fname)\n{\n  if(!file.exists(fname))\n    return(NULL)\n  \n  con = file(fname, open = \"r\")\n  data = readLines(con)\n  close(con)\n  return(data)\n}\n\nFindSrcReplacement <- function(str)\n{\n  # finds reference to 'plotly' js and replaces with a version from CDN\n  # This allows the HTML to be smaller, since this script is not fully embedded in it\n  str <- iconv(str, to=\"UTF-8\")\n  # str <- iconv(str, to=\"GBK\")\n  pattern = \"plotlyjs-(\\\\w.+)/plotly-latest.min.js\"\n  match1=regexpr(pattern, str)\n  attr(match1, 'useBytes') <- FALSE\n  strMatch=regmatches(str, match1, invert = FALSE)\n  if (length(strMatch) == 0) return(NULL)\n  \n  pattern2 = \"-(\\\\d.+)/\"\n  match2 = regexpr(pattern2, strMatch[1])\n  attr(match2, 'useBytes') <- FALSE\n  strmatch = regmatches(strMatch[1], match2)\n  if (length(strmatch) == 0) return(NULL)\n  \n  # CDN url is https://cdn.plot.ly/plotly-<Version>.js\n  # This matches the specific version used in the plotly package used.\n  verstr = substr(strmatch, 2, nchar(strmatch)-1)\n  str = paste('https://cdn.plot.ly/plotly-', verstr,'.min.js', sep='')\n  return(str)\n}\n\nReadFullFileReplaceString <- function(fnameIn, fnameOut, sourceString,targetString) {\n  if(!file.exists(fnameIn))\n    return(NULL)\n  tx  <- readLines(fnameIn,encoding = \"UTF-8\")\n  #tx  <- readLines(fnameIn,encoding = \"ASCII\")\n  tx2  <- gsub(pattern = sourceString, replace = targetString, x = tx)\n  #tx2 <- iconv(tx2, to=\"GBK\")\n  writeLines(tx2, con = fnameOut)\n}\n\n\n#################################################\nConvertDF64encoding = function (df, withoutEncoding = FALSE)\n{\n  header_row <- paste(names(df), collapse=\", \")\n  tab <- apply(df, 1, function(x)paste(x, collapse=\", \"))\n  \n  if(withoutEncoding){\n    text <- paste(c(header_row, tab), collapse=\"\\n\")\n    x <- text\n  }\n  else\n  {\n    text <- paste(c(header_row, tab), collapse=\"\\n\")\n    x <- caTools::base64encode(text)\n  }\n  return(x)\n}\n\n\nKeepOutDataInHTML = function(df, htmlFile = 'out.html',  limitExportSize = 1000)\n{\n  if(nrow(df)>limitExportSize)\n    df = df[1:limitExportSize,]\n  \n  outDataString64 = ConvertDF64encoding(df)\n  \n  linkElem = '\\n<a href=\"\"  download=\"data.csv\"  style=\"position: absolute; top:0px; left: 0px; z-index: 20000;\" id = \"mydataURL\">export</a>\\n'\n  updateLinkElem = paste('<script>\\n link_element = document.getElementById(\"mydataURL\");link_element.href = outDataString64href;', '\\n</script> ', sep =' ')\n  var64 = paste('<script> outDataString64 =\"', outDataString64, '\"; </script>', sep =\"\")\n  var64href = paste('<script> outDataString64href =\"data:;base64,', outDataString64, '\"; </script>', sep =\"\")\n  \n  buttonElem = '<button style=\"position: absolute; top:0px; left: 0px; z-index: 20000;\"  onclick=\"myFunctionCopy(1)\">Copy To Clipboard</button>'\n  funcScript = '<script> \n  function myFunctionCopy(is64) \n  {\n  const el = document.createElement(\"textarea\");\n  if(is64)\n  {\n  el.value = atob(outDataString64);\n  }\n  else\n  {\n  el.value = outDataStringPlane;\n  }\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(el);};\t\n  </script>'\n  \n  endOfBody = paste(var64,funcScript, buttonElem,'\\n</body>',sep =\"\")\n  ReadFullFileReplaceString('out.html', 'out.html', '</body>', endOfBody)\n}\n\nisError = function(code){\ntryCatch({\n  code\n  FALSE\n}, error=function(e) TRUE)\n}\n\nWarning = function(description){\n      \n    f0 <- list(\n    family = \"Times New Roman\",\n    size = 24,\n    color = toRGB(\"grey50\"))\n\n    f1 <- list(\n    family = \"Times New Roman\",\n    size = 20,\n    color = toRGB(\"grey50\"))\n\n    f2 <- list(\n    family = \"Times New Roman\",\n    size = 10,\n    color = toRGB(\"grey50\"))\n\n    Warning = \"Warning:\"\n    Description = description\n    Footer = \"Candlestick (version:1.0.0  2020) By Davis ZHANG.\"\n\n    p <- plot_ly(hoverinfo = \"none\",color  = \"#F0FFFF\") %>%\n        add_text(x = 1,y = 1,text = Warning,\n        textfont = f0, textposition = \"middle center\") %>%\n        add_text(x = 1,y = 0.9,text = Description,\n        textfont = f1, textposition = \"middle center\") %>%\n        add_text(x = 1,y = 0.6,text = Footer,\n        textfont = f2, textposition = \"bottom center\") %>%\n        layout(showlegend = F,\n        xaxis = list(visible=FALSE),\n        yaxis = list(visible=FALSE)) %>%\n        layout(plot_bgcolor  = \"#101010\",\n           paper_bgcolor = \"#101010\")%>%\n        config(displayModeBar=FALSE)\n\n    return(p)\n}\n#source('./r_files/export_df.r')\n############### Library Declarations ###############\nlibraryRequireInstall(\"ggplot2\");\nlibraryRequireInstall(\"plotly\");\n#libraryRequireInstall(\"showtext\");\n####################################################\npowerbi_rEnableShowText =  1\npowerbi_rEnableShowTextForCJKLanguages =  1\n#showtext_auto(enable = TRUE)\n#Sys.setlocale(\"LC_ALL\",\"CHS\")\n\nCandleStyle <- \"classical\"\nif(exists(\"candlestick_CandleStyle\")){\n   CandleStyle <- candlestick_CandleStyle\n}\n\nGoodColor <- \"green\"\nif(exists(\"candlestick_GoodColor\")){\n   GoodColor <- candlestick_GoodColor\n}\n\nBadColor <- \"red\"\nif(exists(\"candlestick_BadColor\")){\n   BadColor <- candlestick_BadColor\n}\n\nLineColor_1 <- \"#FF00FF\"\nif(exists(\"lines_ma_customized_color\")){\n   LineColor_1 <- lines_ma_customized_color\n}\n\nli_ma05 = FALSE\nif(exists(\"lines_ma05\")){\n    li_ma05 <- lines_ma05\n}\n\nli_ma10 = FALSE\nif(exists(\"lines_ma10\")){\n    li_ma10 <- lines_ma10\n}\n\nli_ma20 = FALSE\nif(exists(\"lines_ma20\")){\n    li_ma20 <- lines_ma20\n}\n\nli_ma30 = FALSE\nif(exists(\"lines_ma30\")){\n    li_ma30 <- lines_ma30\n}\n\nli_ma60 = FALSE\nif(exists(\"lines_ma60\")){\n    li_ma60 <- lines_ma60\n}\n\nli_ma_c = FALSE\nif(exists(\"lines_ma_customized\")){\n    li_ma_c <- lines_ma_customized\n}\n\nli_ma_i = 7\nif(exists(\"lines_ma_customized_items\")){\n    li_ma_i <- lines_ma_customized_items\n}\n\nma_custom_name = NULL\nif(exists(\"lines_ma_customized_name\")){\n    ma_custom_name <- lines_ma_customized_name\n}\n\nxFonts <- \"Arial\"\nif(exists(\"xAxis_Fonts\")){\n   xFonts <- xAxis_Fonts\n}\n\nxSize <- 8\nif(exists(\"xAxis_Size\")){\n   xSize <- xAxis_Size\n}\n\nxColor <- \"#FF2435\"\nif(exists(\"xAxis_Color\")){\n   xColor <- xAxis_Color\n}\n\nFormat <- \"%Y-%m-%d\"\nif(exists(\"xAxis_Format\")){\n    Format <- xAxis_Format\n}\n\nx_Grid <- FALSE\nif(exists(\"xAxis_Grid\")){\n    x_Grid <- xAxis_Grid\n}\n\nxGridColor <- \"#FF2435\"\nif(exists(\"xAxis_GridColor\")){\n   xGridColor <- xAxis_GridColor\n}\n\nxGridStyle <- \"3\"\nif(exists(\"xAxis_GridStyle\")){\n   xGridStyle <- xAxis_GridStyle\n}\n\nyFonts <- \"Arial\"\nif(exists(\"yAxis_Fonts\")){\n   yFonts <- yAxis_Fonts\n}\n\nySize <- 8\nif(exists(\"yAxis_Size\")){\n   ySize <- yAxis_Size\n}\n\nyColor <- \"#FF2435\"\nif(exists(\"yAxis_Color\")){\n   yColor <- yAxis_Color\n}\n\ny_Grid <- TRUE\nif(exists(\"yAxis_Grid\")){\n    y_Grid <- yAxis_Grid\n}\n\nyGridColor <- \"#FF2435\"\nif(exists(\"yAxis_GridColor\")){\n   yGridColor <- yAxis_GridColor\n}\n\nyGridWidth <- 0.5\nif(exists(\"yAxis_GridWidth\")){\n   yGridWidth <- yAxis_GridWidth\n}\n\nSeparator <- FALSE\nif(exists(\"yAxis_Separator\")){\n    Separator <- yAxis_Separator\n}\n\nshow_latest_cl <- FALSE\nif(exists(\"advance_show_latest_cl\")){\n   show_latest_cl <- advance_show_latest_cl\n} \n\nshow_annotations <- FALSE\nif(exists(\"advance_show_annotations\")){\n   show_annotations <- advance_show_annotations\n} \n\nannotations_style <- 4\nif(exists(\"advance_annotations_style\")){\n   annotations_style <- advance_annotations_style\n} \n\nannotations_color <- '#F0FFFF'\nif(exists(\"advance_annotations_color\")){\n   annotations_color <- advance_annotations_color\n} \n\nannotations_font_size <- 12\nif(exists(\"advance_annotations_font_size\")){\n   annotations_font_size <- advance_annotations_font_size \n} \n\nannotations_italic <- FALSE\nif(exists(\"advance_annotations_italic\")){\n   annotations_italic <- advance_annotations_italic\n} \n\nannotations_text_max <- \"Value High\"\nif(exists(\"advance_annotations_text_max\")){\n    if(advance_annotations_text_max!=\"\"){\n        annotations_text_max <- advance_annotations_text_max\n    }\n} \n\nannotations_text_min <- \"Value Low\"\nif(exists(\"advance_annotations_text_min\")){\n    if(advance_annotations_text_min!=\"\"){\n        annotations_text_min <- advance_annotations_text_min\n    }\n} \n\nshow_Hover <- TRUE\nif(exists(\"hover_show\")){\n    show_Hover <- hover_show\n}\n\nshow_Date <- FALSE\nif(exists(\"hover_show_Date\")){\n    show_Date <- hover_show_Date\n}\n\nshow_MA <- FALSE\nif(exists(\"hover_show_MA\")){\n    show_MA <- hover_show_MA\n}\n\nh_f <- \"Arial\"\nif(exists(\"hover_Fonts\")){\n   h_f <- hover_Fonts\n}\n\nh_f_Color <- \"white\"\nif(exists(\"hover_Fonts_Color\")){\n   h_f_Color <- hover_Fonts_Color\n}\n\nh_f_Size <- 12\nif(exists(\"hover_Size\")){\n   h_f_Size <- hover_Size\n}\n\n\nh_Bg_Color <- \"#232F34\"\nif(exists(\"hover_Bg_Color\")){\n   h_Bg_Color <- hover_Bg_Color\n}\n\nh_Border_Color <- \"#232F34\"\nif(exists(\"hover_Border_Color\")){\n   h_Border_Color <- hover_Border_Color\n}\n\nh_Align <- 0\nif(exists(\"hover_h_Align\")){\n   h_Align <- hover_h_Align\n}\n\nbg_show = TRUE\nif(exists(\"background_show\")){\n   bg_show <- background_show\n}\n\nPaper_Color <- \"#000000\"\nif(exists(\"background_PaperColor\")){\n   Paper_Color <- background_PaperColor\n}\n\nPlot_Color <- \"#222222\"\nif(exists(\"background_PlotColor\")){\n   Plot_Color <- background_PlotColor\n}\n\ndisplay_bar = 'H'\nif(exists(\"modeBar_display\")){\n    display_bar <- modeBar_display\n}\n\nEnableCopy <- FALSE\nif(exists(\"modeBar_EnableCopy\")){\n    EnableCopy <- modeBar_EnableCopy\n}\n\nSpikeColor <- \"#ADD8E6\"\nif(exists(\"modeBar_SpikeColor\")){\n    SpikeColor <- modeBar_SpikeColor\n}\n\nSpikeStyle <- \"solid\"\nif(exists(\"modeBar_SpikeStyle\")){\n    SpikeStyle<- modeBar_SpikeStyle\n}\n\nvalidToPlot=TRUE\n################### Function ####################\nif(!exists(\"da\")||!exists(\"cl\")||!exists(\"op\")||!exists(\"hi\")||!exists(\"lo\")){\n    validToPlot = FALSE\n    p<-Warning(\"One or more fields (date,close,open...) may be missing.\")\n} else if(isError(as.Date(unlist(da))))\n{\n    validToPlot = FALSE\n    p<-Warning(\"An error occurred during data conversion!<br>Wrong data type for 'Date'.\")\n} else if(isError(as.numeric(unlist(cl))))\n{\n    validToPlot = FALSE\n    p<-Warning(\"An error occurred during data conversion!<br>Wrong data type for 'Close'.\")\n} else if(\n    isError(max(hi,na.rm=T)) || isError(max(lo,na.rm=T)) || isError(max(cl,na.rm=T)) || isError(max(op,na.rm=T))\n){\n    validToPlot = FALSE\n    p<-Warning(\"The referenced field cannot be related.\")\n} else \n{\n#This code should be added before unlist()\nda_names <- names(da)[1]\ncl_names <- names(cl)[1]\nop_names <- names(op)[1]\nhi_names <- names(hi)[1]\nlo_names <- names(lo)[1]\n################### Actual code ####################\n#g = qplot(`Petal.Length`, data = iris, fill = `Species`, main = Sys.time());\nif(class(cl)!=\"numeric\"){\n    cl <- as.numeric(unlist(cl))\n} else {\n    cl <- unlist(cl)\n}\n\nif(class(op)!=\"numeric\"){\n    op <- as.numeric(unlist(op))\n} else {\n    op <- unlist(op)\n}\n\nif(class(hi)!=\"numeric\"){\n    hi <- as.numeric(unlist(hi))\n} else {\n    hi <- unlist(hi)\n}\n\nif(class(lo)!=\"numeric\"){\n    lo <- as.numeric(unlist(lo))\n} else {\n    lo <- unlist(lo)\n}\n\nyMax <- max(hi,na.rm=T)\nif(exists(\"yAxis_yMax\")){\n   yMax <- yAxis_yMax\n}\n\nyMin <- min(lo,na.rm=T)\nif(exists(\"yAxis_yMin\")){\n   yMin <- yAxis_yMin\n}\n\n#yIndex <- round(seq(from=yMin,to=yMax,length=5),2)\nx_items <- 7\nif(exists(\"xAxis_Items\")){\n    x_items <- round(xAxis_Items,0)\n}\n\nif(nrow(da)>10){\n   xIndex <- round(seq(from=1,to=nrow(da),length=x_items)) \n} else {\n   xIndex <- round(seq(from=1,to=nrow(da),length=nrow(da)))\n}\n\n#length(xIndex) == length(unlist(xIndex))\nid <- 1:nrow(da)\n\n\n\nif(class(da)!=\"Date\"){\n    da <- as.Date(unlist(da))\n} else {\n    da <- unlist(da)\n}\n\ndt <- data.frame(id,da,cl,op,hi,lo,stringsAsFactors=FALSE)\n\ndt <- dt[!(dt$cl==0 & dt$op==0 & dt$lo==0 & dt$hi==0),]\n####################################################\ndetach(\"package:plotly\", unload = TRUE)\nma <- function(x, n = 5){filter(x, rep(1 / n, n), sides = 1)}\n\n\n\nif(li_ma05){\n    dt$MA05 <- ma(dt$cl,5)\n} \n\nif(li_ma10){\n    dt$MA10 <- ma(dt$cl,10)\n} \n\nif(li_ma20){\n    dt$MA20 <- ma(dt$cl,20)\n} \n\nif(li_ma30){\n    dt$MA30 <- ma(dt$cl,30)\n} \n\nif(li_ma60){\n    dt$MA60 <- ma(dt$cl,60)\n} \n\nif(li_ma_c){\n    #dt[paste(\"MA\", li_ma_i, sep = \"\")] <- assign(paste(\"MA\", li_ma_i, sep = \"\"), ma(dt$cl,li_ma_i))\n    dt$MA_C <- assign(paste(\"MA\", li_ma_i, sep = \"\"), ma(dt$cl,li_ma_i))\n} \n\n####################################################\nlibrary(plotly)\ndt$candleLow <- pmin(op,cl)\ndt$candleUp <- pmax(op,cl)\ndt$candleMid <- cl\ndt$col <- GoodColor\ndt$col[dt$cl<dt$op] <- BadColor\n\n#dt<-dt[complete.cases(dt),]\n#dt <- dt[!(dt$cl==0 & dt$op==0 & dt$lo==0 & dt$hi==0),]\n\n\ncandleWidth <- 0.35\nlineWidth <- 0.25\ntrendlineWidth <- 0.30\n#trendlineNames <- names(li[1])\ncloseNames <- names(cl[1])\ndateNames <- names(da[1])\n\n\nif(xSize<5){\n    xSize <- 5\n} else if(xSize > 20){\n    xSize <- 20\n}\n\nif(ySize<5){\n    ySize <- 5\n} else if(ySize > 20){\n    ySize <- 20\n}\n\nif(x_items<3){\n    ySize <- 3\n} else if(x_items>length(dt$id)) {\n    ySize <- length(dt$id)\n}\n\nuse_default_name <- TRUE\nif(is.null(ma_custom_name)||ma_custom_name==\"\"){\n   if(li_ma_i<10){\n       ma_custom_name <- paste(\"MA\",0,li_ma_i, sep =\"\")\n   } else {\n       ma_custom_name <- paste(\"MA\",li_ma_i, sep =\"\")\n   } \n} else {\n   use_default_name <- FALSE\n}\n####################################################\n\n####################################################\ng <- ggplot(dt,aes(x=id))\n\nxLab <- format(dt$da[c(xIndex)],Format)\n\ng <- g + scale_x_continuous(breaks=xIndex,labels=xLab) \n\n#g <- g + scale_x_continuous(breaks=xIndex,labels=xLab) + \n#  scale_y_continuous(breaks=yIndex,labels=yLab) #this is \"fixed y-axis label\" version, the plot will generate auto axis by plotly if remove it.\n\n\nif (exists(\"xAxis_show\") && xAxis_show!=TRUE){\n    g <- g + theme(\n      axis.text.x=element_blank()\n  )\n} else if(x_items>14) {\n    g <- g + theme(\n    axis.text.x = element_text(color = xColor,family = xFonts\n    ,size = xSize, angle = 45, hjust = 0.5, vjust = 0.5, face = \"plain\")\n  )\n} else {\n    g <- g + theme(\n    axis.text.x = element_text(color = xColor,family = xFonts\n    ,size = xSize, angle = 0, hjust = 0, vjust = 0, face = \"plain\")\n    )\n}\n\n# Customize ggplot2 axis labels with different colors will not working after it transfer to plotly object.\n\nif (exists(\"yAxis_show\") && yAxis_show!=TRUE){\n  g <- g + theme(\n    axis.text.y=element_blank()\n  )\n} else {\n  g <- g + theme(\n  axis.text.y = element_text(color = yColor,family = yFonts,size = ySize, angle = 0, hjust = 0, vjust = 0, face = \"plain\"\n  )\n  )\n}\n\ng <- g + geom_line(data = dt,color=\"transparent\",size=trendlineWidth,aes(x=id,y=cl))\n\n#layers <- 2\n\nif(show_latest_cl){\n    #layers <- layers + 1\n    latest_cl_style <- \"solid\"\n    if(exists(\"advance_latest_cl_style\")){\n        latest_cl_style <- advance_latest_cl_style\n    }\n\n    latest_cl_color <- \"steelblue\"\n    if(exists(\"advance_latest_cl_color\")){\n    latest_cl_color <- advance_latest_cl_color\n    } \n    g <- g + geom_hline(yintercept=cl[nrow(dt)],size=0.3,color=latest_cl_color,linetype=latest_cl_style)\n}\n\n\n\nif(CandleStyle==\"classical\"){\n  g <- g +\n  geom_linerange(data = dt,color=dt$col,size=lineWidth,aes(ymin=candleUp,ymax=hi)) +\n  geom_linerange(data = dt,color=dt$col,size=lineWidth,aes(ymin=lo,ymax=candleLow)) +\n  geom_rect(data = dt,color=dt$col,fill=dt$col,size=lineWidth,aes(xmin=id-candleWidth,xmax=id+candleWidth,ymin=candleLow,ymax=candleUp))+\n  guides(fill=FALSE)\n  #layers <- layers + 5\n} else if (CandleStyle==\"caps\"){\n  g <- g +\n  geom_linerange(data = dt,color=dt$col,size=lineWidth,aes(ymin=candleUp,ymax=hi)) +\n  geom_linerange(data = dt,color=dt$col,size=lineWidth,aes(ymin=lo,ymax=candleLow)) +\n  geom_rect(data = dt,color=dt$col,size=lineWidth,aes(xmin=id-candleWidth,xmax=id+candleWidth,ymin=lo,ymax=lo)) + \n  geom_rect(data = dt,color=dt$col,size=lineWidth,aes(xmin=id-candleWidth,xmax=id+candleWidth,ymin=hi,ymax=hi)) + \n  geom_rect(data = dt,color=dt$col,size=lineWidth,fill=dt$col,aes(xmin=id-candleWidth,xmax=id+candleWidth,ymin=candleLow,ymax=candleUp))+\n  guides(fill=FALSE) \n  #layers <- layers + 9  \n} else if (CandleStyle==\"yin-yang\"){\n  dt$fill <- BadColor\n  dt$fill[dt$cl>dt$op] <- \"transparent\"\n  g <- g +\n  geom_linerange(data = dt,color=dt$col,size=lineWidth,aes(ymin=candleUp,ymax=hi)) +\n  geom_linerange(data = dt,color=dt$col,size=lineWidth,aes(ymin=lo,ymax=candleLow)) +\n  geom_rect(data = dt,color=dt$col,size=lineWidth,fill=dt$fill,aes(xmin=id-candleWidth,xmax=id+candleWidth,ymin=candleLow,ymax=candleUp))+\n  guides(fill=FALSE)  \n  #layers <- layers + 5   \n} else if (CandleStyle==\"yin-yang with caps\"){\n  dt$fill <- BadColor\n  dt$fill[dt$cl>dt$op] <- \"transparent\"\n  g <- g +\n  geom_linerange(data = dt,color=dt$col,size=lineWidth,aes(ymin=candleUp,ymax=hi)) +\n  geom_linerange(data = dt,color=dt$col,size=lineWidth,aes(ymin=lo,ymax=candleLow)) +\n  geom_rect(data = dt,color=dt$col,size=lineWidth,aes(xmin=id-candleWidth,xmax=id+candleWidth,ymin=lo,ymax=lo)) + \n  geom_rect(data = dt,color=dt$col,size=lineWidth,aes(xmin=id-candleWidth,xmax=id+candleWidth,ymin=hi,ymax=hi)) +\n  geom_rect(data = dt,color=dt$col,fill=dt$fill,size=lineWidth,aes(xmin=id-candleWidth,xmax=id+candleWidth,ymin=candleLow,ymax=candleUp))+\n  guides(fill=FALSE)   \n  #layers <- layers + 9 \n} else if (CandleStyle==\"bar\"){\n  g <- g +\n  geom_linerange(data = dt,color=dt$col,size=lineWidth,aes(ymin=lo,ymax=hi)) +\n  geom_rect(data = dt,color=dt$col,size=lineWidth,aes(xmin=id-candleWidth,xmax=id,ymin=op,ymax=op)) + \n  geom_rect(data = dt,color=dt$col,size=lineWidth,aes(xmin=id,xmax=id+candleWidth,ymin=cl,ymax=cl)) +\n  guides(fill=FALSE)   \n}\n\n\n\nif(li_ma05){\n  g <- g + geom_line(data = dt,color=\"#FFFAF0\",size=trendlineWidth,aes(x=id,y=MA05))\n  #layers <- layers + 1\n}\n\nif(li_ma10){\n  g <- g + geom_line(data = dt,color=\"yellow\",size=trendlineWidth,aes(x=id,y=MA10))\n  #layers <- layers + 1\n}\n\nif(li_ma20){\n  g <- g + geom_line(data = dt,color=\"#8A2BE2\",size=trendlineWidth,aes(x=id,y=MA20))\n  #layers <- layers + 1\n}\n\nif(li_ma30){\n  g <- g + geom_line(data = dt,color=\"green\",size=trendlineWidth,aes(x=id,y=MA30))\n  #layers <- layers + 1\n}\n\nif(li_ma60){\n  g <- g + geom_line(data = dt,color=\"#4169E1\",size=trendlineWidth,aes(x=id,y=MA60))\n  #layers <- layers + 1\n}\n\nif(li_ma_c){\n  #g <- g + geom_line(data = dt,color=LineColor_1,size=trendlineWidth,aes(x=id,y=get(paste(\"MA\", li_ma_i, sep = \"\"))))\n  g <- g + geom_line(data = dt,color=LineColor_1,size=trendlineWidth,aes(x=id,y=MA_C))\n  #layers <- layers + 1\n}\n\n\ng <- g + theme(\n  axis.ticks=element_blank(),\n  panel.background = element_rect(fill = \"transparent\"), # bg of the panel\n  plot.background = element_rect(fill = \"transparent\"), # bg of the plot\n  panel.grid.major = element_blank(), # get rid of major grid\n  #panel.grid.minor = element_blank(), # get rid of minor grid\n  legend.position = 'none',\n  legend.background = element_rect(fill = \"transparent\"), # get rid of legend bg\n  legend.box.background = element_rect(fill = \"transparent\") # get rid of legend panel bg\n) + labs(x = NULL,y=NULL)\n############# Create and save widget ###############\np <- plotly_build(g)\n#p$x$data[[8]]$text <- paste(names(da[1]), \": \", da, \"<br>\", \"8\", \": \", round(cl,2) , sep =\"\" )\n#p$x$data[[9]]$text <- paste(names(da[1]), \": \", da, \"<br>\", \"9\", \": \", round(cl,2) , sep =\"\" )\n\nif(show_Hover){\n    h_title <- paste(\"---\",\"<b>\", format(da,Format),\"</b>\",\"---\")\n    h_Close <- paste(cl_names, \": \", round(cl,2),sep =\"\")\n    h_Open <- paste(op_names, \": \", round(op,2),sep =\"\")\n    h_High <- paste(hi_names, \": \", round(hi,2),sep =\"\")\n    h_Low <- paste(lo_names, \": \", round(lo,2),sep =\"\")\n    h_Custom <- paste(ma_custom_name, \":\", round(cl,2),sep =\"\")\n    N <- max(length(h_Close),length(h_Open),length(h_High),length(h_Low),length(h_Custom))\n    h_line <- paste(rep(\"-\",N),collapse=\"\")\n        if(show_Date){\n            p$x$data[[1]]$text <-  paste(\n            h_title,\"<br>\",\n            \"<br>\",   \n            h_Close,\"<br>\", \n            h_Open,\"<br>\", \n            h_High,\"<br>\", \n            h_Low,\"<br>\", \n            sep =\"\" )\n        } else {\n            p$x$data[[1]]$text <-  paste(\n            h_Close,\"<br>\", \n            h_Open,\"<br>\", \n            h_High,\"<br>\", \n            h_Low,\"<br>\", \n            sep =\"\" )\n        }\nif(show_MA){\n    if(use_default_name){\n    if(li_ma_i<5){\n        if(li_ma_c){\n            p$x$data[[1]]$text <- paste(\n            p$x$data[[1]]$text,ma_custom_name, \": \", round(dt$MA_C,2) ,\"<br>\", \n            sep =\"\" )\n        }\n    }\n\n    if(li_ma05){\n        p$x$data[[1]]$text <- paste(\n        p$x$data[[1]]$text, \"MA05\", \": \", round(dt$MA05,2) ,\"<br>\", \n        sep =\"\" )\n    }\n\n    if(li_ma_i>=5 && li_ma_i<10){\n        if(li_ma_c){\n            p$x$data[[1]]$text <- paste(\n            p$x$data[[1]]$text, ma_custom_name, \": \", round(dt$MA_C,2) ,\"<br>\", \n            sep =\"\" )\n        }\n    }\n\n    if(li_ma10){\n        p$x$data[[1]]$text <- paste(\n        p$x$data[[1]]$text, \"MA10\", \": \", round(dt$MA10,2) ,\"<br>\", \n        sep =\"\" )\n    }\n\n    if(li_ma_i>=10 && li_ma_i<20){\n        if(li_ma_c){\n            p$x$data[[1]]$text <- paste(\n            p$x$data[[1]]$text, ma_custom_name, \": \", round(dt$MA_C,2) ,\"<br>\", \n            sep =\"\" )\n        }\n    }\n\n    if(li_ma20){\n        p$x$data[[1]]$text <- paste(\n        p$x$data[[1]]$text, \"MA20\", \": \", round(dt$MA20,2) ,\"<br>\", \n        sep =\"\" )\n    }\n\n    if(li_ma_i>=20 && li_ma_i<30){\n        if(li_ma_c){\n            p$x$data[[1]]$text <- paste(\n            p$x$data[[1]]$text,ma_custom_name, \": \", round(dt$MA_C,2) ,\"<br>\", \n            sep =\"\" )\n            }\n        }\n\n        if(li_ma30){\n            p$x$data[[1]]$text <- paste(\n            p$x$data[[1]]$text, \"MA30\", \": \", round(dt$MA30,2) ,\"<br>\", \n            sep =\"\" )\n        }\n  \n        if(li_ma_i>=30 && li_ma_i<60){\n            if(li_ma_c){\n                p$x$data[[1]]$text <- paste(\n                p$x$data[[1]]$text, ma_custom_name, \": \", round(dt$MA_C,2) ,\"<br>\", \n                sep =\"\" )\n            }\n        }\n\n        if(li_ma60){\n            p$x$data[[1]]$text <- paste(\n            p$x$data[[1]]$text, \"MA60\", \": \", round(dt$MA60,2) ,\"<br>\", \n            sep =\"\" )\n        }\n\n        if(li_ma_i>=60){\n            if(li_ma_c){\n                p$x$data[[1]]$text <- paste(\n                p$x$data[[1]]$text, ma_custom_name, \": \", round(dt$MA_C,2) ,\"<br>\", \n                sep =\"\" )\n            }\n        }\n    } else {\n        if(li_ma_c){\n            p$x$data[[1]]$text <- paste(\n            p$x$data[[1]]$text, ma_custom_name, \": \", round(dt$MA_C,2) ,\"<br>\", \n            sep =\"\" )\n        }\n\n        if(li_ma05){\n            p$x$data[[1]]$text <- paste(\n            p$x$data[[1]]$text, \"MA05\", \": \", round(dt$MA05,2) ,\"<br>\", \n            sep =\"\" )\n        }\n\n        if(li_ma10){\n            p$x$data[[1]]$text <- paste(\n            p$x$data[[1]]$text, \"MA10\", \": \", round(dt$MA10,2) ,\"<br>\", \n            sep =\"\" )\n        }\n\n        if(li_ma20){\n            p$x$data[[1]]$text <- paste(\n            p$x$data[[1]]$text, \"MA20\", \": \", round(dt$MA20,2) ,\"<br>\", \n            sep =\"\" )\n        }\n\n        if(li_ma30){\n            p$x$data[[1]]$text <- paste(\n            p$x$data[[1]]$text, \"MA30\", \": \", round(dt$MA30,2) ,\"<br>\", \n            sep =\"\" )\n        }\n\n        if(li_ma60){\n            p$x$data[[1]]$text <- paste(\n            p$x$data[[1]]$text, \"MA60\", \": \", round(dt$MA60,2) ,\"<br>\", \n            sep =\"\" )\n        }\n    }\n  }\n} else {\n  p$x$data[[1]]$hoverinfo <- \"none\"  \n  #p$x$data[[3]]$hoverinfo <- \"none\"  \n}\n\n#p$x$data[[1]]$hoverinfo <- \"none\"\n#p$x$data[[2]]$hoverinfo <- \"none\"\n\n\nfont <- list(\n  family = h_f,\n  size = h_f_Size,\n  color = h_f_Color\n)\n\nhover_label <- list(\n  bgcolor = h_Bg_Color,\n  bordercolor = h_Border_Color,\n  font = font,\n  hoverinfo = \"none\",\n  align = \"center\"\n)\n\n#p$x$data[[3]]$hoverlabel <- hover_label\np$x$data[[1]]$hoverlabel <- hover_label\n\n\n\nmodebarSetting = 'hover'\nif(display_bar=='T'){\n   modebarSetting<-TRUE\n} else if(display_bar=='F'){\n    modebarSetting<-FALSE\n}\n\n#p$x$layout$hoverdistance=100\np$x$layout$spikedistance=1000\np$x$layout$hovermode='closest'\n#p$x$layout$showlegend = TRUE\n\n#p$x$layout$xaxis$autorange = TRUE \np$x$layout$xaxis$showline = TRUE\np$x$layout$xaxis$linecolor = xColor\np$x$layout$xaxis$linewidth = 2\np$x$layout$xaxis$ticks = \"inside\"\np$x$layout$xaxis$tickcolor = xColor\nif(x_Grid){\n    p$x$layout$xaxis$showgrid = TRUE\n    p$x$layout$xaxis$gridcolor <- xGridColor\n}\n\np$x$layout$xaxis$spikethickness = 0.4\np$x$layout$xaxis$spikedash = SpikeStyle\np$x$layout$xaxis$spikecolor = SpikeColor\np$x$layout$xaxis$spikemode = \"across\"\n\np$x$layout$yaxis$spikethickness = 0.4\np$x$layout$yaxis$spikedash = SpikeStyle\np$x$layout$yaxis$spikecolor = SpikeColor\np$x$layout$yaxis$spikemode = \"toaxis\"\np$x$layout$yaxis$spikesnap = \"cursor\"\n\np$x$layout$yaxis$autorange = TRUE\np$x$layout$yaxis$autotick = TRUE\n\np$x$layout$yaxis$tickmode = \"auto\" #This is the key for auto axis index.\n\np$x$layout$yaxis$showline = TRUE\np$x$layout$yaxis$linecolor = yColor\np$x$layout$yaxis$linewidth = 2\np$x$layout$yaxis$ticks = \"inside\"\np$x$layout$yaxis$tickcolor = yColor\nif(y_Grid){\n    if(yGridWidth<=0){\n    yGridWidth <- 0.1\n    } else if(yGridWidth > 2){\n    yGridWidth <- 2\n    }\n    p$x$layout$yaxis$showgrid = TRUE\n    p$x$layout$yaxis$gridcolor <- yGridColor\n    p$x$layout$yaxis$gridwidth <- yGridWidth\n\n} \n\n\nif(Separator){\n  p$x$layout$yaxis$separatethousands = TRUE\n}\n\nay <- list(\n  overlaying = \"y\",\n  side = \"left\",\n  size = 5,\n  tickwidth = p$x$layout$yaxis$tickwidth,\n  hoverinfo = \"none\"\n)\n\nif (exists(\"yAxis_show\") && yAxis_show==TRUE){\nif(show_latest_cl){\n\n    p <- p %>% layout(\n        yaxis2 = ay\n    )\n    p <- p %>% add_lines(y = ~dt$cl[nrow(dt)], yaxis = \"y2\",hoverinfo = \"none\",\n     line=list(color=latest_cl_color,width=5,dash=latest_cl_style)) #this will not showing the line for unknown reason,but it's required for y2 axis label.\n\n    p$x$layout$yaxis2$gridcolor <- latest_cl_color\n    p$x$layout$yaxis2$showgrid = FALSE\n    #p$x$layout$yaxis2$overlaying <- \"y\"\n    p$x$layout$yaxis2$tickfont$size <- p$x$layout$yaxis$tickfont$size\n    p$x$layout$yaxis2$tickfont$family <- p$x$layout$yaxis$tickfont$family\n    if(dt$cl[nrow(dt)]<10){\n        p$x$layout$yaxis2$tickvals <- list(round(dt$cl[nrow(dt)],1))\n    } else {\n        p$x$layout$yaxis2$tickvals <- list(round(dt$cl[nrow(dt)],0))\n    }\n    p$x$layout$yaxis2$range <- p$x$layout$yaxis$range\n    p$x$layout$yaxis2$tickfont$color <- latest_cl_color\n    #if(y_Grid==FALSE){\n        p$x$layout$yaxis2$ticklen =1.4\n        p$x$layout$yaxis2$tickcolor = \"transparent\"\n    #}\n\n        if(Separator){\n            p$x$layout$yaxis2$ticktext <- format(round(dt$cl[nrow(dt)],0),big.mark=\",\")\n            #p$x$layout$yaxis2$separatethousands = TRUE #using ticktext will disable this.\n        } else {\n            p$x$layout$yaxis2$ticktext <- round(dt$cl[nrow(dt)],0)\n        }\n   \n\n\n\n}\n}\nannotation_font <- list(color = annotations_color,family = h_f,size = annotations_font_size)\n\nax_value_max <- 50\nif(dt$id[which.max(dt$hi)]>length(dt$id)/2){\n    ax_value_max <- ax_value_max * -1\n}\nax_value_min <- 50\nif(dt$id[which.min(dt$lo)]>length(dt$id)/2){\n    ax_value_min <- ax_value_min * -1\n}\n\nif(annotations_italic){\n    annotations_text_max <- paste(\"<i>\",annotations_text_max,\"</i>\",sep=\"\")\n    annotations_text_min <- paste(\"<i>\",annotations_text_min,\"</i>\",sep=\"\")\n}\n\nif(show_annotations){\np <- p %>% add_annotations(x = dt$id[which.max(dt$hi)],y = dt$hi[which.max(dt$hi)],showarrow = TRUE,\n    text = annotations_text_max,ax=ax_value_max,ay=-15,arrowsize = 0.2,arrowhead = annotations_style,arrowcolor = annotations_color,font = annotation_font)\np <- p %>% add_annotations(x = dt$id[which.min(dt$lo)],y = dt$lo[which.min(dt$lo)],showarrow = TRUE,\n    text = annotations_text_min,ax=ax_value_min,ay=15,arrowsize = 0.2,arrowhead = annotations_style,arrowcolor = annotations_color,font = annotation_font)\n}\n\nfor(i in 2:length(p$x$data)){\n   p$x$data[[i]]$hoverinfo <- \"none\" \n}\n\np <- p %>% config(displaylogo = FALSE, cloud=FALSE,displayModeBar = modebarSetting ,\n    modeBarButtonsToRemove = c(\"autoScale2d\",\"hoverClosestCartesian\",\"toImage\"))       \n#\"zoomIn2d\", \"zoomOut2d\"\nif(bg_show){\np <- p %>% layout(plot_bgcolor  = Plot_Color,\n           paper_bgcolor = Paper_Color)\n} else {\n   p <- p %>% layout(plot_bgcolor  = \"transparent\",\n           paper_bgcolor = \"transparent\") \n}\n\n\np$x$layout$margin$b <- 0\np$sizingPolicy$padding <- 0\n\n}\n####################################################\ninternalSaveWidget(p, 'out.html');\nReadFullFileReplaceString('out.html', 'out.html', ',\"padding\":[0-9]*,', ',\"padding\":0,')\n####################################################\n\n\n\nif(EnableCopy && validToPlot)\n{\n  if(CandleStyle==\"yin-yang\"||CandleStyle==\"yin-yang with caps\"){\n      dt[,c(\"id\",\"candleLow\",\"candleUp\",\"candleMid\",\"col\",\"fill\")] <- list(NULL) \n  } else {\n      dt[,c(\"id\",\"candleLow\",\"candleUp\",\"candleMid\",\"col\")] <- list(NULL)\n  }\n  \n  names(dt)[names(dt)==\"da\"]<-da_names\n  names(dt)[names(dt)==\"cl\"]<-cl_names\n  names(dt)[names(dt)==\"op\"]<-op_names\n  names(dt)[names(dt)==\"hi\"]<-hi_names\n  names(dt)[names(dt)==\"lo\"]<-lo_names\n  if(li_ma_c){\n      names(dt)[names(dt)==\"MA_C\"]<-ma_custom_name\n  }\n  \n  KeepOutDataInHTML(df = dt, htmlFile = 'out.html',  limitExportSize = 1000)\n}"
                    }
                }
            }
        ],
        "objects": {
            "candlestick": {
                "displayName": "Candles",
                "displayNameKey": "Candlestick",
                "properties": {
                    "CandleStyle": {
                        "displayName": "Candle Style",
                        "displayNameKey": "CandleStyle",
                        "description": "Candle Style",
                        "type": {
                            "enumeration": [
                                {
                                    "displayName": "Classical",
                                    "displayNameKey": "classical",
                                    "value": "classical"
                                },
                                {
                                    "displayName": "Caps",
                                    "displayNameKey": "caps",
                                    "value": "caps"
                                },
                                {
                                    "displayName": "Yin-yang",
                                    "displayNameKey": "yin-yang",
                                    "value": "yin-yang"
                                },
                                {
                                    "displayName": "Yin-yang with Caps",
                                    "displayNameKey": "yin-yang with caps",
                                    "value": "yin-yang with caps"
                                },
                                {
                                    "displayName": "Bar",
                                    "displayNameKey": "bar",
                                    "value": "bar"
                                }
                            ]
                        }
                    },
                    "GoodColor": {
                        "displayName": "Good Color",
                        "displayNameKey": "GoodColor",
                        "type": {
                            "fill": {
                                "solid": {
                                    "color": true
                                }
                            }
                        }
                    },
                    "BadColor": {
                        "displayName": "Bad Color",
                        "displayNameKey": "BadColor",
                        "type": {
                            "fill": {
                                "solid": {
                                    "color": true
                                }
                            }
                        }
                    }
                }
            },
            "lines": {
                "displayName": "MA Lines",
                "displayNameKey": "MA Lines",
                "properties": {
                    "ma05": {
                        "displayName": "MA05",
                        "displayNameKey": "MA05",
                        "description": "5 DAYS MOVING AVG (predefinded)",
                        "type": {
                            "bool": true
                        }
                    },
                    "ma10": {
                        "displayName": "MA10",
                        "displayNameKey": "MA10",
                        "description": "10 DAYS MOVING AVG (predefinded)",
                        "type": {
                            "bool": true
                        }
                    },
                    "ma20": {
                        "displayName": "MA20",
                        "displayNameKey": "MA20",
                        "description": "20 DAYS MOVING AVG (predefinded)",
                        "type": {
                            "bool": true
                        }
                    },
                    "ma30": {
                        "displayName": "MA30",
                        "displayNameKey": "MA30",
                        "description": "30 DAYS MOVING AVG (predefinded)",
                        "type": {
                            "bool": true
                        }
                    },
                    "ma60": {
                        "displayName": "MA60",
                        "displayNameKey": "MA60",
                        "description": "60 DAYS MOVING AVG (predefinded)",
                        "type": {
                            "bool": true
                        }
                    },
                    "ma_customized": {
                        "displayName": "MA (customized)",
                        "displayNameKey": "ma_customized",
                        "type": {
                            "bool": true
                        }
                    },
                    "ma_customized_items": {
                        "displayName": "Items",
                        "displayNameKey": "ma_Items",
                        "placeHolderText": "Input an integer here",
                        "type": {
                            "numeric": true
                        }
                    },
                    "ma_customized_name": {
                        "displayName": "Name",
                        "displayNameKey": "ma_Name",
                        "description": "Name of this MA line",
                        "placeHolderText": "Default",
                        "type": {
                            "text": true
                        }
                    },
                    "ma_customized_color": {
                        "displayName": "Color",
                        "displayNameKey": "ma_customized_color",
                        "type": {
                            "fill": {
                                "solid": {
                                    "color": true
                                }
                            }
                        }
                    }
                }
            },
            "xAxis": {
                "displayName": "X Axis",
                "displayNameKey": "X_Axis",
                "properties": {
                    "show": {
                        "type": {
                            "bool": true
                        }
                    },
                    "Fonts": {
                        "displayName": "Fonts",
                        "displayNameKey": "xFonts",
                        "description": "Setting Font Family",
                        "type": {
                            "enumeration": [
                                {
                                    "displayName": "Default",
                                    "displayNameKey": "FontsDefault",
                                    "value": "Arial"
                                },
                                {
                                    "displayName": "Balto",
                                    "displayNameKey": "Balto",
                                    "value": "Balto"
                                },
                                {
                                    "displayName": "Courier New",
                                    "displayNameKey": "Courier New",
                                    "value": "Courier New"
                                },
                                {
                                    "displayName": "Droid Sans",
                                    "displayNameKey": "Droid Sans",
                                    "value": "Droid Sans"
                                },
                                {
                                    "displayName": "Droid Serif",
                                    "displayNameKey": "Droid Serif",
                                    "value": "Droid Serif"
                                },
                                {
                                    "displayName": "Droid Sans Mono",
                                    "displayNameKey": "Droid Sans Mono",
                                    "value": "Droid Sans Mono"
                                },
                                {
                                    "displayName": "Gravitas One",
                                    "displayNameKey": "Gravitas One",
                                    "value": "Gravitas One"
                                },
                                {
                                    "displayName": "Old Standard TT",
                                    "displayNameKey": "Old Standard TT",
                                    "value": "Old Standard TT"
                                },
                                {
                                    "displayName": "Open Sans",
                                    "displayNameKey": "Open Sans",
                                    "value": "Open Sans"
                                },
                                {
                                    "displayName": "Sans Serif",
                                    "displayNameKey": "sans serif",
                                    "value": "sans serif"
                                },
                                {
                                    "displayName": "Raleway",
                                    "displayNameKey": "Raleway",
                                    "value": "Raleway"
                                },
                                {
                                    "displayName": "Times New Roman",
                                    "displayNameKey": "Times New Roman",
                                    "value": "Times New Roman"
                                }
                            ]
                        }
                    },
                    "Format": {
                        "displayName": "Date Format",
                        "displayNameKey": "DateFormat",
                        "description": "Setting Date Format",
                        "type": {
                            "enumeration": [
                                {
                                    "displayName": "2019",
                                    "displayNameKey": "2019",
                                    "value": "%Y"
                                },
                                {
                                    "displayName": "2019-12",
                                    "displayNameKey": "2019-12",
                                    "value": "%Y-%m"
                                },
                                {
                                    "displayName": "2019/12",
                                    "displayNameKey": "2019/12",
                                    "value": "%Y/%m"
                                },
                                {
                                    "displayName": "12/2019",
                                    "displayNameKey": "12/2019",
                                    "value": "%m/%Y"
                                },
                                {
                                    "displayName": "19/12",
                                    "displayNameKey": "19/12",
                                    "value": "%y/%m"
                                },
                                {
                                    "displayName": "12/19",
                                    "displayNameKey": "12/19",
                                    "value": "%m/%y"
                                },
                                {
                                    "displayName": "12-31",
                                    "displayNameKey": "12-31",
                                    "value": "%m-%d"
                                },
                                {
                                    "displayName": "12/31",
                                    "displayNameKey": "12/31",
                                    "value": "%m/%d"
                                },
                                {
                                    "displayName": "2019-12-31",
                                    "displayNameKey": "2019-12-31",
                                    "value": "%Y-%m-%d"
                                },
                                {
                                    "displayName": "2019/12/31",
                                    "displayNameKey": "2019/12/31",
                                    "value": "%Y/%m/%d"
                                },
                                {
                                    "displayName": "12/31/2019",
                                    "displayNameKey": "12/31/2019",
                                    "value": "%m/%d/%Y"
                                },
                                {
                                    "displayName": "31/12/2019",
                                    "displayNameKey": "31/12/2019",
                                    "value": "%d/%m/%Y"
                                },
                                {
                                    "displayName": "19/12/31",
                                    "displayNameKey": "19/12/31",
                                    "value": "%y/%m/%d"
                                },
                                {
                                    "displayName": "12/31/19",
                                    "displayNameKey": "12/31/19",
                                    "value": "%m/%d/%y"
                                },
                                {
                                    "displayName": "31/12/19",
                                    "displayNameKey": "31/12/19",
                                    "value": "%d/%m/%y"
                                }
                            ]
                        }
                    },
                    "Items": {
                        "displayName": "Items",
                        "displayNameKey": "xItems",
                        "description": "Number of x-axis labels",
                        "placeHolderText": "Default",
                        "type": {
                            "numeric": true
                        }
                    },
                    "Size": {
                        "displayName": "Size",
                        "displayNameKey": "xSize",
                        "description": "X Axis Text Size",
                        "type": {
                            "numeric": true
                        }
                    },
                    "Color": {
                        "displayName": "Color",
                        "displayNameKey": "xColor",
                        "type": {
                            "fill": {
                                "solid": {
                                    "color": true
                                }
                            }
                        }
                    },
                    "Grid": {
                        "displayName": "Grid",
                        "displayNameKey": "xGrid",
                        "type": {
                            "bool": true
                        }
                    },
                    "GridColor": {
                        "displayName": "Grid Color",
                        "displayNameKey": "xGridColor",
                        "type": {
                            "fill": {
                                "solid": {
                                    "color": true
                                }
                            }
                        }
                    },
                    "GridStyle": {
                        "displayName": "Grid Style",
                        "displayNameKey": "xGridStyle",
                        "description": "Setting Grid Style",
                        "type": {
                            "enumeration": [
                                {
                                    "displayName": "\u2501\u2501\u2501\u2501\u2501",
                                    "displayNameKey": "GridStyleSolid",
                                    "value": "1"
                                },
                                {
                                    "displayName": "\u2501 \u2501 \u2501 \u2501",
                                    "displayNameKey": "GridStyleDashed",
                                    "value": "2"
                                },
                                {
                                    "displayName": " \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7",
                                    "displayNameKey": "GridStyleDotted",
                                    "value": "3"
                                },
                                {
                                    "displayName": "\u00b7 \u2501 \u00b7 \u2501 \u00b7 \u2501 \u00b7",
                                    "displayNameKey": "GridStyleDottedDashed",
                                    "value": "4"
                                }
                            ]
                        }
                    }
                }
            },
            "yAxis": {
                "displayName": "Y Axis",
                "displayNameKey": "Y_Axis",
                "properties": {
                    "show": {
                        "type": {
                            "bool": true
                        }
                    },
                    "Fonts": {
                        "displayName": "Fonts",
                        "displayNameKey": "yFonts",
                        "description": "Setting Font Family",
                        "type": {
                            "enumeration": [
                                {
                                    "displayName": "Default",
                                    "displayNameKey": "FontsDefault",
                                    "value": "Arial"
                                },
                                {
                                    "displayName": "Balto",
                                    "displayNameKey": "Balto",
                                    "value": "Balto"
                                },
                                {
                                    "displayName": "Courier New",
                                    "displayNameKey": "Courier New",
                                    "value": "Courier New"
                                },
                                {
                                    "displayName": "Droid Sans",
                                    "displayNameKey": "Droid Sans",
                                    "value": "Droid Sans"
                                },
                                {
                                    "displayName": "Droid Serif",
                                    "displayNameKey": "Droid Serif",
                                    "value": "Droid Serif"
                                },
                                {
                                    "displayName": "Droid Sans Mono",
                                    "displayNameKey": "Droid Sans Mono",
                                    "value": "Droid Sans Mono"
                                },
                                {
                                    "displayName": "Gravitas One",
                                    "displayNameKey": "Gravitas One",
                                    "value": "Gravitas One"
                                },
                                {
                                    "displayName": "Old Standard TT",
                                    "displayNameKey": "Old Standard TT",
                                    "value": "Old Standard TT"
                                },
                                {
                                    "displayName": "Open Sans",
                                    "displayNameKey": "Open Sans",
                                    "value": "Open Sans"
                                },
                                {
                                    "displayName": "Sans Serif",
                                    "displayNameKey": "sans serif",
                                    "value": "sans serif"
                                },
                                {
                                    "displayName": "Raleway",
                                    "displayNameKey": "Raleway",
                                    "value": "Raleway"
                                },
                                {
                                    "displayName": "Times New Roman",
                                    "displayNameKey": "Times New Roman",
                                    "value": "Times New Roman"
                                }
                            ]
                        }
                    },
                    "Size": {
                        "displayName": "Size",
                        "displayNameKey": "ySize",
                        "description": "Y Axis Text Size",
                        "type": {
                            "numeric": true
                        }
                    },
                    "Color": {
                        "displayName": "Color",
                        "displayNameKey": "yColor",
                        "type": {
                            "fill": {
                                "solid": {
                                    "color": true
                                }
                            }
                        }
                    },
                    "Grid": {
                        "displayName": "Grid",
                        "displayNameKey": "yGrid",
                        "type": {
                            "bool": true
                        }
                    },
                    "GridColor": {
                        "displayName": "Grid Color",
                        "displayNameKey": "yGridColor",
                        "type": {
                            "fill": {
                                "solid": {
                                    "color": true
                                }
                            }
                        }
                    },
                    "GridWidth": {
                        "displayName": "Grid Width",
                        "displayNameKey": "yGridWidth",
                        "placeHolderText": "Default:0.5",
                        "description": "Setting Grid Width",
                        "type": {
                            "numeric": true
                        }
                    },
                    "Separator": {
                        "displayName": "Separator (,)",
                        "displayNameKey": "Separator",
                        "description": "Use 1000 Separator (,)",
                        "type": {
                            "bool": true
                        }
                    },
                    "yMax": {
                        "displayName": "End",
                        "displayNameKey": "yEnd",
                        "description": "End Value of Y Axis",
                        "placeHolderText": "Auto",
                        "type": {
                            "numeric": true
                        }
                    },
                    "yMin": {
                        "displayName": "Start",
                        "displayNameKey": "yStart",
                        "description": "Start Value of Y Axis",
                        "placeHolderText": "Auto",
                        "type": {
                            "numeric": true
                        }
                    }
                }
            },
            "hover": {
                "displayName": "Tooltip",
                "displayNameKey": "HoverTooltip",
                "properties": {
                    "show": {
                        "type": {
                            "bool": true
                        }
                    },
                    "Fonts": {
                        "displayName": "Fonts",
                        "displayNameKey": "tFonts",
                        "description": "Setting Font Family",
                        "type": {
                            "enumeration": [
                                {
                                    "displayName": "Default",
                                    "displayNameKey": "FontsDefault",
                                    "value": "Arial"
                                },
                                {
                                    "displayName": "Balto",
                                    "displayNameKey": "Balto",
                                    "value": "Balto"
                                },
                                {
                                    "displayName": "Courier New",
                                    "displayNameKey": "Courier New",
                                    "value": "Courier New"
                                },
                                {
                                    "displayName": "Droid Sans",
                                    "displayNameKey": "Droid Sans",
                                    "value": "Droid Sans"
                                },
                                {
                                    "displayName": "Droid Serif",
                                    "displayNameKey": "Droid Serif",
                                    "value": "Droid Serif"
                                },
                                {
                                    "displayName": "Droid Sans Mono",
                                    "displayNameKey": "Droid Sans Mono",
                                    "value": "Droid Sans Mono"
                                },
                                {
                                    "displayName": "Gravitas One",
                                    "displayNameKey": "Gravitas One",
                                    "value": "Gravitas One"
                                },
                                {
                                    "displayName": "Old Standard TT",
                                    "displayNameKey": "Old Standard TT",
                                    "value": "Old Standard TT"
                                },
                                {
                                    "displayName": "Open Sans",
                                    "displayNameKey": "Open Sans",
                                    "value": "Open Sans"
                                },
                                {
                                    "displayName": "Sans Serif",
                                    "displayNameKey": "sans serif",
                                    "value": "sans serif"
                                },
                                {
                                    "displayName": "Raleway",
                                    "displayNameKey": "Raleway",
                                    "value": "Raleway"
                                },
                                {
                                    "displayName": "Times New Roman",
                                    "displayNameKey": "Times New Roman",
                                    "value": "Times New Roman"
                                },
                                {
                                    "displayName": "Microsoft YaHei",
                                    "displayNameKey": "Microsoft YaHei",
                                    "value": "Microsoft YaHei"
                                }
                            ]
                        }
                    },
                    "Size": {
                        "displayName": "Font Size",
                        "displayNameKey": "tSize",
                        "description": "Setting Font Size",
                        "type": {
                            "numeric": true
                        }
                    },
                    "Fonts_Color": {
                        "displayName": "Font Color",
                        "displayNameKey": "tColor",
                        "description": "Setting Font Color",
                        "type": {
                            "fill": {
                                "solid": {
                                    "color": true
                                }
                            }
                        }
                    },
                    "Bg_Color": {
                        "displayName": "Background Color",
                        "displayNameKey": "Bg_Color",
                        "type": {
                            "fill": {
                                "solid": {
                                    "color": true
                                }
                            }
                        }
                    },
                    "Border_Color": {
                        "displayName": "Border Color",
                        "displayNameKey": "Border_Color",
                        "type": {
                            "fill": {
                                "solid": {
                                    "color": true
                                }
                            }
                        }
                    },
                    "show_Date": {
                        "displayName": "Include Date",
                        "displayNameKey": "Include_Date",
                        "type": {
                            "bool": true
                        }
                    },
                    "show_MA": {
                        "displayName": "Include MA",
                        "displayNameKey": "Include_MA",
                        "type": {
                            "bool": true
                        }
                    }
                }
            },
            "advance": {
                "displayName": "Advance",
                "displayNameKey": "Advance",
                "properties": {
                    "show_latest_cl": {
                        "displayName": "Show Latest Price",
                        "displayNameKey": "Show Latest Price",
                        "type": {
                            "bool": true
                        }
                    },
                    "latest_cl_style": {
                        "displayName": "Style",
                        "displayNameKey": "Line Style",
                        "type": {
                            "enumeration": [
                                {
                                    "displayName": "\u2501\u2501\u2501\u2501\u2501",
                                    "displayNameKey": "LineStyleSolid",
                                    "value": "solid"
                                },
                                {
                                    "displayName": "\u2501 \u2501 \u2501 \u2501",
                                    "displayNameKey": "LineStyleDashed",
                                    "value": "dash"
                                },
                                {
                                    "displayName": " \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7",
                                    "displayNameKey": "LineStyleDotted",
                                    "value": "dot"
                                },
                                {
                                    "displayName": "\u00b7 \u2501 \u00b7 \u2501 \u00b7 \u2501 \u00b7",
                                    "displayNameKey": "LineStyleDottedDashed",
                                    "value": "dashdot"
                                }
                            ]
                        }
                    },
                    "latest_cl_color": {
                        "displayName": "Color",
                        "displayNameKey": "Line Color",
                        "type": {
                            "fill": {
                                "solid": {
                                    "color": true
                                }
                            }
                        }
                    },
                    "show_annotations": {
                        "displayName": "High-Low Annotations",
                        "displayNameKey": "show_annotations",
                        "type": {
                            "bool": true
                        }
                    },
                    "annotations_style": {
                        "displayName": "Arrow Style",
                        "displayNameKey": "annotations_style",
                        "type": {
                            "enumeration": [
                                {
                                    "displayName": "Type 1",
                                    "displayNameKey": "Type 1",
                                    "value": "1"
                                },
                                {
                                    "displayName": "Type 2",
                                    "displayNameKey": "Type 2",
                                    "value": "2"
                                },
                                {
                                    "displayName": "Type 3",
                                    "displayNameKey": "Type 3",
                                    "value": "3"
                                },
                                {
                                    "displayName": "Type 4",
                                    "displayNameKey": "Type 4",
                                    "value": "4"
                                },
                                {
                                    "displayName": "Type 5",
                                    "displayNameKey": "Type 5",
                                    "value": "5"
                                }
                            ]
                        }
                    },
                    "annotations_color": {
                        "displayName": "Color",
                        "displayNameKey": "annotations_color",
                        "type": {
                            "fill": {
                                "solid": {
                                    "color": true
                                }
                            }
                        }
                    },
                    "annotations_italic": {
                        "displayName": "Italic",
                        "displayNameKey": "annotations_italic",
                        "type": {
                            "bool": true
                        }
                    },
                    "annotations_font_size": {
                        "displayName": "Font Size",
                        "displayNameKey": "annotations_font_size",
                        "description": "Setting Font Size",
                        "placeHolderText": "Default:12",
                        "type": {
                            "numeric": true
                        }
                    },
                    "annotations_text_max": {
                        "displayName": "Text(max)",
                        "displayNameKey": "annotations_text_max",
                        "description": "Customize text for max value",
                        "placeHolderText": "Default:Value High",
                        "type": {
                            "text": true
                        }
                    },
                    "annotations_text_min": {
                        "displayName": "Text(min)",
                        "displayNameKey": "annotations_text_min",
                        "description": "Customize text for min value",
                        "placeHolderText": "Default:Value Low",
                        "type": {
                            "text": true
                        }
                    }
                }
            },
            "background": {
                "displayName": "Background",
                "displayNameKey": "Background",
                "properties": {
                    "show": {
                        "type": {
                            "bool": true
                        }
                    },
                    "PaperColor": {
                        "displayName": "Paper Color",
                        "displayNameKey": "Paper Color",
                        "type": {
                            "fill": {
                                "solid": {
                                    "color": true
                                }
                            }
                        }
                    },
                    "PlotColor": {
                        "displayName": "Plot Color",
                        "displayNameKey": "Plot Color",
                        "type": {
                            "fill": {
                                "solid": {
                                    "color": true
                                }
                            }
                        }
                    }
                }
            },
            "modeBar": {
                "displayName": "Others",
                "displayNameKey": "Others",
                "properties": {
                    "display": {
                        "displayName": "Mode Bar",
                        "displayNameKey": "Mode Bar",
                        "type": {
                            "enumeration": [
                                {
                                    "displayName": "Display",
                                    "displayNameKey": "Display",
                                    "value": "T"
                                },
                                {
                                    "displayName": "Hover",
                                    "displayNameKey": "Hover",
                                    "value": "H"
                                },
                                {
                                    "displayName": "Remove",
                                    "displayNameKey": "Remove",
                                    "value": "F"
                                }
                            ]
                        }
                    },
                    "EnableCopy": {
                        "displayName": "Copy Button",
                        "displayNameKey": "EnableCopy",
                        "type": {
                            "bool": true
                        }
                    },
                    "SpikeColor": {
                        "displayName": "Spike Line Color",
                        "displayNameKey": "SpikeColor",
                        "type": {
                            "fill": {
                                "solid": {
                                    "color": true
                                }
                            }
                        }
                    },
                    "SpikeStyle": {
                        "displayName": "Spike Line Style",
                        "displayNameKey": "SpikeStyle",
                        "type": {
                            "enumeration": [
                                {
                                    "displayName": "\u2501\u2501\u2501\u2501\u2501",
                                    "displayNameKey": "SpikeStyleSolid",
                                    "value": "solid"
                                },
                                {
                                    "displayName": "\u2501 \u2501 \u2501 \u2501",
                                    "displayNameKey": "SpikeStyleDashed",
                                    "value": "dash"
                                },
                                {
                                    "displayName": " \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7",
                                    "displayNameKey": "SpikeStyleDotted",
                                    "value": "dot"
                                },
                                {
                                    "displayName": "\u00b7 \u2501 \u00b7 \u2501 \u00b7 \u2501 \u00b7",
                                    "displayNameKey": "SpikeStyleDottedDashed",
                                    "value": "dashdot"
                                }
                            ]
                        }
                    }
                }
            }
        },
        "suppressDefaultTitle": true
    },
    "dependencies": {
        "cranPackages": [
            {
                "name": "ggplot2",
                "displayName": "GG Plot 2",
                "url": "https://cran.r-project.org/web/packages/ggplot2/index.html"
            },
            {
                "name": "plotly",
                "displayName": "Plotly",
                "url": "https://cran.r-project.org/web/packages/plotly/index.html"
            },
            {
                "name": "htmlwidgets",
                "displayName": "HTML Widgets",
                "url": "https://cran.r-project.org/web/packages/htmlwidgets/index.html"
            },
            {
                "name": "XML",
                "displayName": "XML",
                "url": "https://cran.r-project.org/web/packages/XML/index.html"
            }
        ]
    },
    "visualEntryPoint": "",
    "externalJS": [],
    "assets": {
        "icon": "assets/icon.png"
    }
}