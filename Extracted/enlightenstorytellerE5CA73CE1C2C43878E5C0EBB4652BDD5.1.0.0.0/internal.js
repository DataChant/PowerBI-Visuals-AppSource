var enlightenstorytellerE5CA73CE1C2C43878E5C0EBB4652BDD5;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 9742:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ 8764:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



const base64 = __webpack_require__(9742)
const ieee754 = __webpack_require__(645)
const customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null

exports.lW = Buffer
__webpack_unused_export__ = SlowBuffer
exports.h2 = 50

const K_MAX_LENGTH = 0x7fffffff
__webpack_unused_export__ = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    const arr = new Uint8Array(1)
    const proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  const buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  const valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  const b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  const length = byteLength(string, encoding) | 0
  let buf = createBuffer(length)

  const actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0
  const buf = createBuffer(length)
  for (let i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    const copy = new Uint8Array(arrayView)
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  let buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    const len = checked(obj.length) | 0
    const buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  let x = a.length
  let y = b.length

  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  let i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  const buffer = Buffer.allocUnsafe(length)
  let pos = 0
  for (i = 0; i < list.length; ++i) {
    let buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
        buf.copy(buffer, pos)
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        )
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos)
    }
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  const len = string.length
  const mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  let loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  const i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  const len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (let i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  const len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (let i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  const len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (let i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  const length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  let str = ''
  const max = exports.h2
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  let x = thisEnd - thisStart
  let y = end - start
  const len = Math.min(x, y)

  const thisCopy = this.slice(thisStart, thisEnd)
  const targetCopy = target.slice(start, end)

  for (let i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  let indexSize = 1
  let arrLength = arr.length
  let valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  let i
  if (dir) {
    let foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      let found = true
      for (let j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  const remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  const strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  let i
  for (i = 0; i < length; ++i) {
    const parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  const remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  const res = []

  let i = start
  while (i < end) {
    const firstByte = buf[i]
    let codePoint = null
    let bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1

    if (i + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  const len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  let res = ''
  let i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  const len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  let out = ''
  for (let i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  const bytes = buf.slice(start, end)
  let res = ''
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (let i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  const len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  const newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  let val = this[offset + --byteLength]
  let mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const lo = first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24

  const hi = this[++offset] +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    last * 2 ** 24

  return BigInt(lo) + (BigInt(hi) << BigInt(32))
})

Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const hi = first * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  const lo = this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last

  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
})

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let i = byteLength
  let mul = 1
  let val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = this[offset + 4] +
    this[offset + 5] * 2 ** 8 +
    this[offset + 6] * 2 ** 16 +
    (last << 24) // Overflow

  return (BigInt(val) << BigInt(32)) +
    BigInt(first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24)
})

Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  return (BigInt(val) << BigInt(32)) +
    BigInt(this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last)
})

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let mul = 1
  let i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let i = byteLength - 1
  let mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function wrtBigUInt64LE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  return offset
}

function wrtBigUInt64BE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset + 7] = lo
  lo = lo >> 8
  buf[offset + 6] = lo
  lo = lo >> 8
  buf[offset + 5] = lo
  lo = lo >> 8
  buf[offset + 4] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset + 3] = hi
  hi = hi >> 8
  buf[offset + 2] = hi
  hi = hi >> 8
  buf[offset + 1] = hi
  hi = hi >> 8
  buf[offset] = hi
  return offset + 8
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = 0
  let mul = 1
  let sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = byteLength - 1
  let mul = 1
  let sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  const len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      const code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  let i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    const bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    const len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// CUSTOM ERRORS
// =============

// Simplified versions from Node, changed for Buffer-only usage
const errors = {}
function E (sym, getMessage, Base) {
  errors[sym] = class NodeError extends Base {
    constructor () {
      super()

      Object.defineProperty(this, 'message', {
        value: getMessage.apply(this, arguments),
        writable: true,
        configurable: true
      })

      // Add the error code to the name to include it in the stack trace.
      this.name = `${this.name} [${sym}]`
      // Access the stack to generate the error message including the error code
      // from the name.
      this.stack // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.
      delete this.name
    }

    get code () {
      return sym
    }

    set code (value) {
      Object.defineProperty(this, 'code', {
        configurable: true,
        enumerable: true,
        value,
        writable: true
      })
    }

    toString () {
      return `${this.name} [${sym}]: ${this.message}`
    }
  }
}

E('ERR_BUFFER_OUT_OF_BOUNDS',
  function (name) {
    if (name) {
      return `${name} is outside of buffer bounds`
    }

    return 'Attempt to access memory outside buffer bounds'
  }, RangeError)
E('ERR_INVALID_ARG_TYPE',
  function (name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
  }, TypeError)
E('ERR_OUT_OF_RANGE',
  function (str, range, input) {
    let msg = `The value of "${str}" is out of range.`
    let received = input
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input))
    } else if (typeof input === 'bigint') {
      received = String(input)
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received)
      }
      received += 'n'
    }
    msg += ` It must be ${range}. Received ${received}`
    return msg
  }, RangeError)

function addNumericalSeparator (val) {
  let res = ''
  let i = val.length
  const start = val[0] === '-' ? 1 : 0
  for (; i >= start + 4; i -= 3) {
    res = `_${val.slice(i - 3, i)}${res}`
  }
  return `${val.slice(0, i)}${res}`
}

// CHECK FUNCTIONS
// ===============

function checkBounds (buf, offset, byteLength) {
  validateNumber(offset, 'offset')
  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1))
  }
}

function checkIntBI (value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    const n = typeof min === 'bigint' ? 'n' : ''
    let range
    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`
      } else {
        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                `${(byteLength + 1) * 8 - 1}${n}`
      }
    } else {
      range = `>= ${min}${n} and <= ${max}${n}`
    }
    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
  }
  checkBounds(buf, offset, byteLength)
}

function validateNumber (value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
  }
}

function boundsError (value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type)
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
                                    `>= ${type ? 1 : 0} and <= ${length}`,
                                    value)
}

// HELPER FUNCTIONS
// ================

const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  let codePoint
  const length = string.length
  let leadSurrogate = null
  const bytes = []

  for (let i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  let c, hi, lo
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  let i
  for (i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = (function () {
  const alphabet = '0123456789abcdef'
  const table = new Array(256)
  for (let i = 0; i < 16; ++i) {
    const i16 = i * 16
    for (let j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

// Return not function with Error if BigInt not supported
function defineBigIntMethod (fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
}

function BufferBigIntNotDefined () {
  throw new Error('BigInt not supported')
}


/***/ }),

/***/ 645:
/***/ ((__unused_webpack_module, exports) => {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ 5444:
/***/ ((module) => {

module.exports = {"dataRoles":[{"displayName":"Data points","name":"datapoint","kind":"GroupingOrMeasure"}],"dataViewMappings":[{"table":{"rows":{"select":[{"bind":{"to":"datapoint"}}]},"dataReductionAlgorithm":{"top":{"count":5}}}}],"objects":{"lookandfeel":{"displayName":"Look & Feel","properties":{"randomBackground":{"displayName":"Randomize Colors","type":{"bool":true}},"background":{"displayName":"Background colour","type":{"fill":{"solid":{"color":true}}}},"fontcolour":{"displayName":"Font colour","type":{"fill":{"solid":{"color":true}}}},"fontSize":{"displayName":"Font size","type":{"formatting":{"fontSize":true}}},"fontFamily":{"displayName":"Font Family","type":{"formatting":{"fontFamily":true}}},"alignment":{"displayName":"Alignment","type":{"formatting":{"alignment":true}}}}},"configuration":{"displayName":"Configuration","properties":{"openaiapikey":{"displayName":"OpenAI API Key","type":{"text":true}},"storystyle":{"displayName":"Story Style","type":{"enumeration":[{"displayName":"-- Surprise me! --","value":"?"},{"displayName":"Simple","value":"Write a sentence about the following:"},{"displayName":"Optimistic","value":"Write a summary of the following, being really optimistic:"},{"displayName":"Funny","value":"Write a short joke about the following, make sure you stay positive and include the data:"},{"displayName":"Epic Fantasy","value":"Write a story about the following in the style of an epic fantasy novel:"},{"displayName":"Poem","value":"Write a poem about the following:"},{"displayName":"Smack talk","value":"Write a summary including smack talk, don't hold back, be brutal. use the following data:"},{"displayName":"Haiku","value":"Write a haiku about the following:"},{"displayName":"Clickbait","value":"Write a clickbait worthy summary of the following:"},{"displayName":"Snoop Dog","value":"Write a summary of the following in the style of Snoop Dog, make sure you exagerate and use lots of jargon:"},{"displayName":"Dramatic","value":"Write a summary of the following, being overly dramitic:"},{"displayName":"Inspiring","value":"Write a summary of the following, being as inspiring as possible:"},{"displayName":"Polititian","value":"Write a summary of the following in the style of Donald Trump:"},{"displayName":"Rap battle","value":"Create a rap battle about the following:"},{"displayName":"Horror","value":"Write a summary of the following in the style of a horror novel:"},{"displayName":"Romance","value":"Write a summary of the following in the style of a romance novel:"},{"displayName":"Mystery","value":"Write a summary of the following in the style of a mystery novel:"},{"displayName":"Sci-fi","value":"Write a summary of the following in the style of a sci-fi novel:"},{"displayName":"Fantasy","value":"Write a summary of the following in the style of a fantasy novel:"},{"displayName":"Western","value":"Write a summary of the following in the style of a western novel:"},{"displayName":"Thriller","value":"Write a summary of the following in the style of a thriller novel:"},{"displayName":"Detective","value":"Write a summary of the following in the style of a detective novel:"},{"displayName":"Comedy","value":"Write a summary of the following in the style of a comedy novel:"},{"displayName":"Drama","value":"Write a summary of the following in the style of a drama novel:"},{"displayName":"Action","value":"Write a summary of the following in the style of an action novel:"},{"displayName":"Adventure","value":"Write a summary of the following in the style of an adventure novel:"}]}}}},"embedded":{"displayName":"Unlock","properties":{"enlightenkey":{"displayName":"Unlock key","description":"Key required to unlock. Contact publisher.","placeHolderText":"Enter your key here","type":{"text":true}}}},"persist":{"displayName":"Persist","properties":{"firstRun":{"displayName":"firstrun","type":{"numeric":true}}}}},"privileges":[{"name":"WebAccess","essential":true,"parameters":["https://api.openai.com/v1/"]}]}

/***/ }),

/***/ 5502:
/***/ ((module) => {

module.exports = {"visual":{"name":"enlightenstoryteller","displayName":"Enlighten Storyteller","guid":"enlightenstorytellerE5CA73CE1C2C43878E5C0EBB4652BDD5","visualClassName":"Visual","version":"1.0.0.0","description":"Tell stories with your data","supportUrl":"https://enlighten.co.nz","gitHubUrl":""},"apiVersion":"5.1.0","author":{"name":"enlighten designs","email":"sales@enlighten.co.nz"},"assets":{"icon":"assets/icon.png"},"externalJS":null,"style":"style/visual.less","capabilities":"capabilities.json","dependencies":null,"stringResources":[]}

/***/ }),

/***/ 1166:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;
/* provided dependency */ var Buffer = __webpack_require__(8764)["lW"];

var navigator = {};
navigator.userAgent = false;

var window = {};
/*
 * jsrsasign(all) 11.0.0 (2024-01-16) (c) 2010-2023 Kenji Urushima | kjur.github.io/jsrsasign/license
 */
var VERSION = "11.0.0";
var VERSION_FULL = "jsrsasign(all) 11.0.0 (2024-01-16) (c) 2010-2023 Kenji Urushima | kjur.github.io/jsrsasign/license";

/*! CryptoJS v3.1.2 core-fix.js
 * code.google.com/p/crypto-js
 * (c) 2009-2013 by Jeff Mott. All rights reserved.
 * code.google.com/p/crypto-js/wiki/License
 * THIS IS FIX of 'core.js' to fix Hmac issue.
 * https://code.google.com/p/crypto-js/issues/detail?id=84
 * https://crypto-js.googlecode.com/svn-history/r667/branches/3.x/src/core.js
 */
var CryptoJS=CryptoJS||(function(e,g){var a={};var b=a.lib={};var j=b.Base=(function(){function n(){}return{extend:function(p){n.prototype=this;var o=new n();if(p){o.mixIn(p)}if(!o.hasOwnProperty("init")){o.init=function(){o.$super.init.apply(this,arguments)}}o.init.prototype=o;o.$super=this;return o},create:function(){var o=this.extend();o.init.apply(o,arguments);return o},init:function(){},mixIn:function(p){for(var o in p){if(p.hasOwnProperty(o)){this[o]=p[o]}}if(p.hasOwnProperty("toString")){this.toString=p.toString}},clone:function(){return this.init.prototype.extend(this)}}}());var l=b.WordArray=j.extend({init:function(o,n){o=this.words=o||[];if(n!=g){this.sigBytes=n}else{this.sigBytes=o.length*4}},toString:function(n){return(n||h).stringify(this)},concat:function(t){var q=this.words;var p=t.words;var n=this.sigBytes;var s=t.sigBytes;this.clamp();if(n%4){for(var r=0;r<s;r++){var o=(p[r>>>2]>>>(24-(r%4)*8))&255;q[(n+r)>>>2]|=o<<(24-((n+r)%4)*8)}}else{for(var r=0;r<s;r+=4){q[(n+r)>>>2]=p[r>>>2]}}this.sigBytes+=s;return this},clamp:function(){var o=this.words;var n=this.sigBytes;o[n>>>2]&=4294967295<<(32-(n%4)*8);o.length=e.ceil(n/4)},clone:function(){var n=j.clone.call(this);n.words=this.words.slice(0);return n},random:function(p){var o=[];for(var n=0;n<p;n+=4){o.push((e.random()*4294967296)|0)}return new l.init(o,p)}});var m=a.enc={};var h=m.Hex={stringify:function(p){var r=p.words;var o=p.sigBytes;var q=[];for(var n=0;n<o;n++){var s=(r[n>>>2]>>>(24-(n%4)*8))&255;q.push((s>>>4).toString(16));q.push((s&15).toString(16))}return q.join("")},parse:function(p){var n=p.length;var q=[];for(var o=0;o<n;o+=2){q[o>>>3]|=parseInt(p.substr(o,2),16)<<(24-(o%8)*4)}return new l.init(q,n/2)}};var d=m.Latin1={stringify:function(q){var r=q.words;var p=q.sigBytes;var n=[];for(var o=0;o<p;o++){var s=(r[o>>>2]>>>(24-(o%4)*8))&255;n.push(String.fromCharCode(s))}return n.join("")},parse:function(p){var n=p.length;var q=[];for(var o=0;o<n;o++){q[o>>>2]|=(p.charCodeAt(o)&255)<<(24-(o%4)*8)}return new l.init(q,n)}};var c=m.Utf8={stringify:function(n){try{return decodeURIComponent(escape(d.stringify(n)))}catch(o){throw new Error("Malformed UTF-8 data")}},parse:function(n){return d.parse(unescape(encodeURIComponent(n)))}};var i=b.BufferedBlockAlgorithm=j.extend({reset:function(){this._data=new l.init();this._nDataBytes=0},_append:function(n){if(typeof n=="string"){n=c.parse(n)}this._data.concat(n);this._nDataBytes+=n.sigBytes},_process:function(w){var q=this._data;var x=q.words;var n=q.sigBytes;var t=this.blockSize;var v=t*4;var u=n/v;if(w){u=e.ceil(u)}else{u=e.max((u|0)-this._minBufferSize,0)}var s=u*t;var r=e.min(s*4,n);if(s){for(var p=0;p<s;p+=t){this._doProcessBlock(x,p)}var o=x.splice(0,s);q.sigBytes-=r}return new l.init(o,r)},clone:function(){var n=j.clone.call(this);n._data=this._data.clone();return n},_minBufferSize:0});var f=b.Hasher=i.extend({cfg:j.extend(),init:function(n){this.cfg=this.cfg.extend(n);this.reset()},reset:function(){i.reset.call(this);this._doReset()},update:function(n){this._append(n);this._process();return this},finalize:function(n){if(n){this._append(n)}var o=this._doFinalize();return o},blockSize:512/32,_createHelper:function(n){return function(p,o){return new n.init(o).finalize(p)}},_createHmacHelper:function(n){return function(p,o){return new k.HMAC.init(n,o).finalize(p)}}});var k=a.algo={};return a}(Math));
/*
CryptoJS v3.1.2 x64-core-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function(g){var a=CryptoJS,f=a.lib,e=f.Base,h=f.WordArray,a=a.x64={};a.Word=e.extend({init:function(b,c){this.high=b;this.low=c}});a.WordArray=e.extend({init:function(b,c){b=this.words=b||[];this.sigBytes=c!=g?c:8*b.length},toX32:function(){for(var b=this.words,c=b.length,a=[],d=0;d<c;d++){var e=b[d];a.push(e.high);a.push(e.low)}return h.create(a,this.sigBytes)},clone:function(){for(var b=e.clone.call(this),c=b.words=this.words.slice(0),a=c.length,d=0;d<a;d++)c[d]=c[d].clone();return b}})})();

/*
CryptoJS v3.1.2 cipher-core.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
CryptoJS.lib.Cipher||function(u){var g=CryptoJS,f=g.lib,k=f.Base,l=f.WordArray,q=f.BufferedBlockAlgorithm,r=g.enc.Base64,v=g.algo.EvpKDF,n=f.Cipher=q.extend({cfg:k.extend(),createEncryptor:function(a,b){return this.create(this._ENC_XFORM_MODE,a,b)},createDecryptor:function(a,b){return this.create(this._DEC_XFORM_MODE,a,b)},init:function(a,b,c){this.cfg=this.cfg.extend(c);this._xformMode=a;this._key=b;this.reset()},reset:function(){q.reset.call(this);this._doReset()},process:function(a){this._append(a);
return this._process()},finalize:function(a){a&&this._append(a);return this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(a){return{encrypt:function(b,c,d){return("string"==typeof c?s:j).encrypt(a,b,c,d)},decrypt:function(b,c,d){return("string"==typeof c?s:j).decrypt(a,b,c,d)}}}});f.StreamCipher=n.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var m=g.mode={},t=function(a,b,c){var d=this._iv;d?this._iv=u:d=this._prevBlock;for(var e=
0;e<c;e++)a[b+e]^=d[e]},h=(f.BlockCipherMode=k.extend({createEncryptor:function(a,b){return this.Encryptor.create(a,b)},createDecryptor:function(a,b){return this.Decryptor.create(a,b)},init:function(a,b){this._cipher=a;this._iv=b}})).extend();h.Encryptor=h.extend({processBlock:function(a,b){var c=this._cipher,d=c.blockSize;t.call(this,a,b,d);c.encryptBlock(a,b);this._prevBlock=a.slice(b,b+d)}});h.Decryptor=h.extend({processBlock:function(a,b){var c=this._cipher,d=c.blockSize,e=a.slice(b,b+d);c.decryptBlock(a,
b);t.call(this,a,b,d);this._prevBlock=e}});m=m.CBC=h;h=(g.pad={}).Pkcs7={pad:function(a,b){for(var c=4*b,c=c-a.sigBytes%c,d=c<<24|c<<16|c<<8|c,e=[],f=0;f<c;f+=4)e.push(d);c=l.create(e,c);a.concat(c)},unpad:function(a){a.sigBytes-=a.words[a.sigBytes-1>>>2]&255}};f.BlockCipher=n.extend({cfg:n.cfg.extend({mode:m,padding:h}),reset:function(){n.reset.call(this);var a=this.cfg,b=a.iv,a=a.mode;if(this._xformMode==this._ENC_XFORM_MODE)var c=a.createEncryptor;else c=a.createDecryptor,this._minBufferSize=1;
this._mode=c.call(a,this,b&&b.words)},_doProcessBlock:function(a,b){this._mode.processBlock(a,b)},_doFinalize:function(){var a=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){a.pad(this._data,this.blockSize);var b=this._process(!0)}else b=this._process(!0),a.unpad(b);return b},blockSize:4});var p=f.CipherParams=k.extend({init:function(a){this.mixIn(a)},toString:function(a){return(a||this.formatter).stringify(this)}}),m=(g.format={}).OpenSSL={stringify:function(a){var b=a.ciphertext;a=a.salt;
return(a?l.create([1398893684,1701076831]).concat(a).concat(b):b).toString(r)},parse:function(a){a=r.parse(a);var b=a.words;if(1398893684==b[0]&&1701076831==b[1]){var c=l.create(b.slice(2,4));b.splice(0,4);a.sigBytes-=16}return p.create({ciphertext:a,salt:c})}},j=f.SerializableCipher=k.extend({cfg:k.extend({format:m}),encrypt:function(a,b,c,d){d=this.cfg.extend(d);var e=a.createEncryptor(c,d);b=e.finalize(b);e=e.cfg;return p.create({ciphertext:b,key:c,iv:e.iv,algorithm:a,mode:e.mode,padding:e.padding,
blockSize:a.blockSize,formatter:d.format})},decrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);return a.createDecryptor(c,d).finalize(b.ciphertext)},_parse:function(a,b){return"string"==typeof a?b.parse(a,this):a}}),g=(g.kdf={}).OpenSSL={execute:function(a,b,c,d){d||(d=l.random(8));a=v.create({keySize:b+c}).compute(a,d);c=l.create(a.words.slice(b),4*c);a.sigBytes=4*b;return p.create({key:a,iv:c,salt:d})}},s=f.PasswordBasedCipher=j.extend({cfg:j.cfg.extend({kdf:g}),encrypt:function(a,
b,c,d){d=this.cfg.extend(d);c=d.kdf.execute(c,a.keySize,a.ivSize);d.iv=c.iv;a=j.encrypt.call(this,a,b,c.key,d);a.mixIn(c);return a},decrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);c=d.kdf.execute(c,a.keySize,a.ivSize,b.salt);d.iv=c.iv;return j.decrypt.call(this,a,b,c.key,d)}})}();

/*
CryptoJS v3.1.2 aes.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function(){for(var q=CryptoJS,x=q.lib.BlockCipher,r=q.algo,j=[],y=[],z=[],A=[],B=[],C=[],s=[],u=[],v=[],w=[],g=[],k=0;256>k;k++)g[k]=128>k?k<<1:k<<1^283;for(var n=0,l=0,k=0;256>k;k++){var f=l^l<<1^l<<2^l<<3^l<<4,f=f>>>8^f&255^99;j[n]=f;y[f]=n;var t=g[n],D=g[t],E=g[D],b=257*g[f]^16843008*f;z[n]=b<<24|b>>>8;A[n]=b<<16|b>>>16;B[n]=b<<8|b>>>24;C[n]=b;b=16843009*E^65537*D^257*t^16843008*n;s[f]=b<<24|b>>>8;u[f]=b<<16|b>>>16;v[f]=b<<8|b>>>24;w[f]=b;n?(n=t^g[g[g[E^t]]],l^=g[g[l]]):n=l=1}var F=[0,1,2,4,8,
16,32,64,128,27,54],r=r.AES=x.extend({_doReset:function(){for(var c=this._key,e=c.words,a=c.sigBytes/4,c=4*((this._nRounds=a+6)+1),b=this._keySchedule=[],h=0;h<c;h++)if(h<a)b[h]=e[h];else{var d=b[h-1];h%a?6<a&&4==h%a&&(d=j[d>>>24]<<24|j[d>>>16&255]<<16|j[d>>>8&255]<<8|j[d&255]):(d=d<<8|d>>>24,d=j[d>>>24]<<24|j[d>>>16&255]<<16|j[d>>>8&255]<<8|j[d&255],d^=F[h/a|0]<<24);b[h]=b[h-a]^d}e=this._invKeySchedule=[];for(a=0;a<c;a++)h=c-a,d=a%4?b[h]:b[h-4],e[a]=4>a||4>=h?d:s[j[d>>>24]]^u[j[d>>>16&255]]^v[j[d>>>
8&255]]^w[j[d&255]]},encryptBlock:function(c,e){this._doCryptBlock(c,e,this._keySchedule,z,A,B,C,j)},decryptBlock:function(c,e){var a=c[e+1];c[e+1]=c[e+3];c[e+3]=a;this._doCryptBlock(c,e,this._invKeySchedule,s,u,v,w,y);a=c[e+1];c[e+1]=c[e+3];c[e+3]=a},_doCryptBlock:function(c,e,a,b,h,d,j,m){for(var n=this._nRounds,f=c[e]^a[0],g=c[e+1]^a[1],k=c[e+2]^a[2],p=c[e+3]^a[3],l=4,t=1;t<n;t++)var q=b[f>>>24]^h[g>>>16&255]^d[k>>>8&255]^j[p&255]^a[l++],r=b[g>>>24]^h[k>>>16&255]^d[p>>>8&255]^j[f&255]^a[l++],s=
b[k>>>24]^h[p>>>16&255]^d[f>>>8&255]^j[g&255]^a[l++],p=b[p>>>24]^h[f>>>16&255]^d[g>>>8&255]^j[k&255]^a[l++],f=q,g=r,k=s;q=(m[f>>>24]<<24|m[g>>>16&255]<<16|m[k>>>8&255]<<8|m[p&255])^a[l++];r=(m[g>>>24]<<24|m[k>>>16&255]<<16|m[p>>>8&255]<<8|m[f&255])^a[l++];s=(m[k>>>24]<<24|m[p>>>16&255]<<16|m[f>>>8&255]<<8|m[g&255])^a[l++];p=(m[p>>>24]<<24|m[f>>>16&255]<<16|m[g>>>8&255]<<8|m[k&255])^a[l++];c[e]=q;c[e+1]=r;c[e+2]=s;c[e+3]=p},keySize:8});q.AES=x._createHelper(r)})();

/*
CryptoJS v3.1.2 tripledes-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function(){function j(b,c){var a=(this._lBlock>>>b^this._rBlock)&c;this._rBlock^=a;this._lBlock^=a<<b}function l(b,c){var a=(this._rBlock>>>b^this._lBlock)&c;this._lBlock^=a;this._rBlock^=a<<b}var h=CryptoJS,e=h.lib,n=e.WordArray,e=e.BlockCipher,g=h.algo,q=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],p=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,
55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],r=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],s=[{"0":8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,
2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,
1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{"0":1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,
75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,
276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{"0":260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,
14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,
17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{"0":2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,
98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,
1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{"0":128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,
10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,
83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{"0":268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,
2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{"0":1048576,
16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,
496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{"0":134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,
2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,
2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],t=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],m=g.DES=e.extend({_doReset:function(){for(var b=this._key.words,c=[],a=0;56>a;a++){var f=q[a]-1;c[a]=b[f>>>5]>>>31-f%32&1}b=this._subKeys=[];for(f=0;16>f;f++){for(var d=b[f]=[],e=r[f],a=0;24>a;a++)d[a/6|0]|=c[(p[a]-1+e)%28]<<31-a%6,d[4+(a/6|0)]|=c[28+(p[a+24]-1+e)%28]<<31-a%6;d[0]=d[0]<<1|d[0]>>>31;for(a=1;7>a;a++)d[a]>>>=
4*(a-1)+3;d[7]=d[7]<<5|d[7]>>>27}c=this._invSubKeys=[];for(a=0;16>a;a++)c[a]=b[15-a]},encryptBlock:function(b,c){this._doCryptBlock(b,c,this._subKeys)},decryptBlock:function(b,c){this._doCryptBlock(b,c,this._invSubKeys)},_doCryptBlock:function(b,c,a){this._lBlock=b[c];this._rBlock=b[c+1];j.call(this,4,252645135);j.call(this,16,65535);l.call(this,2,858993459);l.call(this,8,16711935);j.call(this,1,1431655765);for(var f=0;16>f;f++){for(var d=a[f],e=this._lBlock,h=this._rBlock,g=0,k=0;8>k;k++)g|=s[k][((h^
d[k])&t[k])>>>0];this._lBlock=h;this._rBlock=e^g}a=this._lBlock;this._lBlock=this._rBlock;this._rBlock=a;j.call(this,1,1431655765);l.call(this,8,16711935);l.call(this,2,858993459);j.call(this,16,65535);j.call(this,4,252645135);b[c]=this._lBlock;b[c+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});h.DES=e._createHelper(m);g=g.TripleDES=e.extend({_doReset:function(){var b=this._key.words;this._des1=m.createEncryptor(n.create(b.slice(0,2)));this._des2=m.createEncryptor(n.create(b.slice(2,4)));this._des3=
m.createEncryptor(n.create(b.slice(4,6)))},encryptBlock:function(b,c){this._des1.encryptBlock(b,c);this._des2.decryptBlock(b,c);this._des3.encryptBlock(b,c)},decryptBlock:function(b,c){this._des3.decryptBlock(b,c);this._des2.encryptBlock(b,c);this._des1.decryptBlock(b,c)},keySize:6,ivSize:2,blockSize:2});h.TripleDES=e._createHelper(g)})();

/*
CryptoJS v3.1.2 enc-base64.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function(){var h=CryptoJS,j=h.lib.WordArray;h.enc.Base64={stringify:function(b){var e=b.words,f=b.sigBytes,c=this._map;b.clamp();b=[];for(var a=0;a<f;a+=3)for(var d=(e[a>>>2]>>>24-8*(a%4)&255)<<16|(e[a+1>>>2]>>>24-8*((a+1)%4)&255)<<8|e[a+2>>>2]>>>24-8*((a+2)%4)&255,g=0;4>g&&a+0.75*g<f;g++)b.push(c.charAt(d>>>6*(3-g)&63));if(e=c.charAt(64))for(;b.length%4;)b.push(e);return b.join("")},parse:function(b){var e=b.length,f=this._map,c=f.charAt(64);c&&(c=b.indexOf(c),-1!=c&&(e=c));for(var c=[],a=0,d=0;d<
e;d++)if(d%4){var g=f.indexOf(b.charAt(d-1))<<2*(d%4),h=f.indexOf(b.charAt(d))>>>6-2*(d%4);c[a>>>2]|=(g|h)<<24-8*(a%4);a++}return j.create(c,a)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}})();

/*
CryptoJS v3.1.2 md5.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function(E){function h(a,f,g,j,p,h,k){a=a+(f&g|~f&j)+p+k;return(a<<h|a>>>32-h)+f}function k(a,f,g,j,p,h,k){a=a+(f&j|g&~j)+p+k;return(a<<h|a>>>32-h)+f}function l(a,f,g,j,h,k,l){a=a+(f^g^j)+h+l;return(a<<k|a>>>32-k)+f}function n(a,f,g,j,h,k,l){a=a+(g^(f|~j))+h+l;return(a<<k|a>>>32-k)+f}for(var r=CryptoJS,q=r.lib,F=q.WordArray,s=q.Hasher,q=r.algo,a=[],t=0;64>t;t++)a[t]=4294967296*E.abs(E.sin(t+1))|0;q=q.MD5=s.extend({_doReset:function(){this._hash=new F.init([1732584193,4023233417,2562383102,271733878])},
_doProcessBlock:function(m,f){for(var g=0;16>g;g++){var j=f+g,p=m[j];m[j]=(p<<8|p>>>24)&16711935|(p<<24|p>>>8)&4278255360}var g=this._hash.words,j=m[f+0],p=m[f+1],q=m[f+2],r=m[f+3],s=m[f+4],t=m[f+5],u=m[f+6],v=m[f+7],w=m[f+8],x=m[f+9],y=m[f+10],z=m[f+11],A=m[f+12],B=m[f+13],C=m[f+14],D=m[f+15],b=g[0],c=g[1],d=g[2],e=g[3],b=h(b,c,d,e,j,7,a[0]),e=h(e,b,c,d,p,12,a[1]),d=h(d,e,b,c,q,17,a[2]),c=h(c,d,e,b,r,22,a[3]),b=h(b,c,d,e,s,7,a[4]),e=h(e,b,c,d,t,12,a[5]),d=h(d,e,b,c,u,17,a[6]),c=h(c,d,e,b,v,22,a[7]),
b=h(b,c,d,e,w,7,a[8]),e=h(e,b,c,d,x,12,a[9]),d=h(d,e,b,c,y,17,a[10]),c=h(c,d,e,b,z,22,a[11]),b=h(b,c,d,e,A,7,a[12]),e=h(e,b,c,d,B,12,a[13]),d=h(d,e,b,c,C,17,a[14]),c=h(c,d,e,b,D,22,a[15]),b=k(b,c,d,e,p,5,a[16]),e=k(e,b,c,d,u,9,a[17]),d=k(d,e,b,c,z,14,a[18]),c=k(c,d,e,b,j,20,a[19]),b=k(b,c,d,e,t,5,a[20]),e=k(e,b,c,d,y,9,a[21]),d=k(d,e,b,c,D,14,a[22]),c=k(c,d,e,b,s,20,a[23]),b=k(b,c,d,e,x,5,a[24]),e=k(e,b,c,d,C,9,a[25]),d=k(d,e,b,c,r,14,a[26]),c=k(c,d,e,b,w,20,a[27]),b=k(b,c,d,e,B,5,a[28]),e=k(e,b,
c,d,q,9,a[29]),d=k(d,e,b,c,v,14,a[30]),c=k(c,d,e,b,A,20,a[31]),b=l(b,c,d,e,t,4,a[32]),e=l(e,b,c,d,w,11,a[33]),d=l(d,e,b,c,z,16,a[34]),c=l(c,d,e,b,C,23,a[35]),b=l(b,c,d,e,p,4,a[36]),e=l(e,b,c,d,s,11,a[37]),d=l(d,e,b,c,v,16,a[38]),c=l(c,d,e,b,y,23,a[39]),b=l(b,c,d,e,B,4,a[40]),e=l(e,b,c,d,j,11,a[41]),d=l(d,e,b,c,r,16,a[42]),c=l(c,d,e,b,u,23,a[43]),b=l(b,c,d,e,x,4,a[44]),e=l(e,b,c,d,A,11,a[45]),d=l(d,e,b,c,D,16,a[46]),c=l(c,d,e,b,q,23,a[47]),b=n(b,c,d,e,j,6,a[48]),e=n(e,b,c,d,v,10,a[49]),d=n(d,e,b,c,
C,15,a[50]),c=n(c,d,e,b,t,21,a[51]),b=n(b,c,d,e,A,6,a[52]),e=n(e,b,c,d,r,10,a[53]),d=n(d,e,b,c,y,15,a[54]),c=n(c,d,e,b,p,21,a[55]),b=n(b,c,d,e,w,6,a[56]),e=n(e,b,c,d,D,10,a[57]),d=n(d,e,b,c,u,15,a[58]),c=n(c,d,e,b,B,21,a[59]),b=n(b,c,d,e,s,6,a[60]),e=n(e,b,c,d,z,10,a[61]),d=n(d,e,b,c,q,15,a[62]),c=n(c,d,e,b,x,21,a[63]);g[0]=g[0]+b|0;g[1]=g[1]+c|0;g[2]=g[2]+d|0;g[3]=g[3]+e|0},_doFinalize:function(){var a=this._data,f=a.words,g=8*this._nDataBytes,j=8*a.sigBytes;f[j>>>5]|=128<<24-j%32;var h=E.floor(g/
4294967296);f[(j+64>>>9<<4)+15]=(h<<8|h>>>24)&16711935|(h<<24|h>>>8)&4278255360;f[(j+64>>>9<<4)+14]=(g<<8|g>>>24)&16711935|(g<<24|g>>>8)&4278255360;a.sigBytes=4*(f.length+1);this._process();a=this._hash;f=a.words;for(g=0;4>g;g++)j=f[g],f[g]=(j<<8|j>>>24)&16711935|(j<<24|j>>>8)&4278255360;return a},clone:function(){var a=s.clone.call(this);a._hash=this._hash.clone();return a}});r.MD5=s._createHelper(q);r.HmacMD5=s._createHmacHelper(q)})(Math);

/*
CryptoJS v3.1.2 sha1-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function(){var k=CryptoJS,b=k.lib,m=b.WordArray,l=b.Hasher,d=[],b=k.algo.SHA1=l.extend({_doReset:function(){this._hash=new m.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(n,p){for(var a=this._hash.words,e=a[0],f=a[1],h=a[2],j=a[3],b=a[4],c=0;80>c;c++){if(16>c)d[c]=n[p+c]|0;else{var g=d[c-3]^d[c-8]^d[c-14]^d[c-16];d[c]=g<<1|g>>>31}g=(e<<5|e>>>27)+b+d[c];g=20>c?g+((f&h|~f&j)+1518500249):40>c?g+((f^h^j)+1859775393):60>c?g+((f&h|f&j|h&j)-1894007588):g+((f^h^
j)-899497514);b=j;j=h;h=f<<30|f>>>2;f=e;e=g}a[0]=a[0]+e|0;a[1]=a[1]+f|0;a[2]=a[2]+h|0;a[3]=a[3]+j|0;a[4]=a[4]+b|0},_doFinalize:function(){var b=this._data,d=b.words,a=8*this._nDataBytes,e=8*b.sigBytes;d[e>>>5]|=128<<24-e%32;d[(e+64>>>9<<4)+14]=Math.floor(a/4294967296);d[(e+64>>>9<<4)+15]=a;b.sigBytes=4*d.length;this._process();return this._hash},clone:function(){var b=l.clone.call(this);b._hash=this._hash.clone();return b}});k.SHA1=l._createHelper(b);k.HmacSHA1=l._createHmacHelper(b)})();

/*
CryptoJS v3.1.2 sha256-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function(k){for(var g=CryptoJS,h=g.lib,v=h.WordArray,j=h.Hasher,h=g.algo,s=[],t=[],u=function(q){return 4294967296*(q-(q|0))|0},l=2,b=0;64>b;){var d;a:{d=l;for(var w=k.sqrt(d),r=2;r<=w;r++)if(!(d%r)){d=!1;break a}d=!0}d&&(8>b&&(s[b]=u(k.pow(l,0.5))),t[b]=u(k.pow(l,1/3)),b++);l++}var n=[],h=h.SHA256=j.extend({_doReset:function(){this._hash=new v.init(s.slice(0))},_doProcessBlock:function(q,h){for(var a=this._hash.words,c=a[0],d=a[1],b=a[2],k=a[3],f=a[4],g=a[5],j=a[6],l=a[7],e=0;64>e;e++){if(16>e)n[e]=
q[h+e]|0;else{var m=n[e-15],p=n[e-2];n[e]=((m<<25|m>>>7)^(m<<14|m>>>18)^m>>>3)+n[e-7]+((p<<15|p>>>17)^(p<<13|p>>>19)^p>>>10)+n[e-16]}m=l+((f<<26|f>>>6)^(f<<21|f>>>11)^(f<<7|f>>>25))+(f&g^~f&j)+t[e]+n[e];p=((c<<30|c>>>2)^(c<<19|c>>>13)^(c<<10|c>>>22))+(c&d^c&b^d&b);l=j;j=g;g=f;f=k+m|0;k=b;b=d;d=c;c=m+p|0}a[0]=a[0]+c|0;a[1]=a[1]+d|0;a[2]=a[2]+b|0;a[3]=a[3]+k|0;a[4]=a[4]+f|0;a[5]=a[5]+g|0;a[6]=a[6]+j|0;a[7]=a[7]+l|0},_doFinalize:function(){var d=this._data,b=d.words,a=8*this._nDataBytes,c=8*d.sigBytes;
b[c>>>5]|=128<<24-c%32;b[(c+64>>>9<<4)+14]=k.floor(a/4294967296);b[(c+64>>>9<<4)+15]=a;d.sigBytes=4*b.length;this._process();return this._hash},clone:function(){var b=j.clone.call(this);b._hash=this._hash.clone();return b}});g.SHA256=j._createHelper(h);g.HmacSHA256=j._createHmacHelper(h)})(Math);

/*
CryptoJS v3.1.2 sha224-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function(){var b=CryptoJS,d=b.lib.WordArray,a=b.algo,c=a.SHA256,a=a.SHA224=c.extend({_doReset:function(){this._hash=new d.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var a=c._doFinalize.call(this);a.sigBytes-=4;return a}});b.SHA224=c._createHelper(a);b.HmacSHA224=c._createHmacHelper(a)})();

/*
CryptoJS v3.1.2 sha512-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function(){function a(){return d.create.apply(d,arguments)}for(var n=CryptoJS,r=n.lib.Hasher,e=n.x64,d=e.Word,T=e.WordArray,e=n.algo,ea=[a(1116352408,3609767458),a(1899447441,602891725),a(3049323471,3964484399),a(3921009573,2173295548),a(961987163,4081628472),a(1508970993,3053834265),a(2453635748,2937671579),a(2870763221,3664609560),a(3624381080,2734883394),a(310598401,1164996542),a(607225278,1323610764),a(1426881987,3590304994),a(1925078388,4068182383),a(2162078206,991336113),a(2614888103,633803317),
a(3248222580,3479774868),a(3835390401,2666613458),a(4022224774,944711139),a(264347078,2341262773),a(604807628,2007800933),a(770255983,1495990901),a(1249150122,1856431235),a(1555081692,3175218132),a(1996064986,2198950837),a(2554220882,3999719339),a(2821834349,766784016),a(2952996808,2566594879),a(3210313671,3203337956),a(3336571891,1034457026),a(3584528711,2466948901),a(113926993,3758326383),a(338241895,168717936),a(666307205,1188179964),a(773529912,1546045734),a(1294757372,1522805485),a(1396182291,
2643833823),a(1695183700,2343527390),a(1986661051,1014477480),a(2177026350,1206759142),a(2456956037,344077627),a(2730485921,1290863460),a(2820302411,3158454273),a(3259730800,3505952657),a(3345764771,106217008),a(3516065817,3606008344),a(3600352804,1432725776),a(4094571909,1467031594),a(275423344,851169720),a(430227734,3100823752),a(506948616,1363258195),a(659060556,3750685593),a(883997877,3785050280),a(958139571,3318307427),a(1322822218,3812723403),a(1537002063,2003034995),a(1747873779,3602036899),
a(1955562222,1575990012),a(2024104815,1125592928),a(2227730452,2716904306),a(2361852424,442776044),a(2428436474,593698344),a(2756734187,3733110249),a(3204031479,2999351573),a(3329325298,3815920427),a(3391569614,3928383900),a(3515267271,566280711),a(3940187606,3454069534),a(4118630271,4000239992),a(116418474,1914138554),a(174292421,2731055270),a(289380356,3203993006),a(460393269,320620315),a(685471733,587496836),a(852142971,1086792851),a(1017036298,365543100),a(1126000580,2618297676),a(1288033470,
3409855158),a(1501505948,4234509866),a(1607167915,987167468),a(1816402316,1246189591)],v=[],w=0;80>w;w++)v[w]=a();e=e.SHA512=r.extend({_doReset:function(){this._hash=new T.init([new d.init(1779033703,4089235720),new d.init(3144134277,2227873595),new d.init(1013904242,4271175723),new d.init(2773480762,1595750129),new d.init(1359893119,2917565137),new d.init(2600822924,725511199),new d.init(528734635,4215389547),new d.init(1541459225,327033209)])},_doProcessBlock:function(a,d){for(var f=this._hash.words,
F=f[0],e=f[1],n=f[2],r=f[3],G=f[4],H=f[5],I=f[6],f=f[7],w=F.high,J=F.low,X=e.high,K=e.low,Y=n.high,L=n.low,Z=r.high,M=r.low,$=G.high,N=G.low,aa=H.high,O=H.low,ba=I.high,P=I.low,ca=f.high,Q=f.low,k=w,g=J,z=X,x=K,A=Y,y=L,U=Z,B=M,l=$,h=N,R=aa,C=O,S=ba,D=P,V=ca,E=Q,m=0;80>m;m++){var s=v[m];if(16>m)var j=s.high=a[d+2*m]|0,b=s.low=a[d+2*m+1]|0;else{var j=v[m-15],b=j.high,p=j.low,j=(b>>>1|p<<31)^(b>>>8|p<<24)^b>>>7,p=(p>>>1|b<<31)^(p>>>8|b<<24)^(p>>>7|b<<25),u=v[m-2],b=u.high,c=u.low,u=(b>>>19|c<<13)^(b<<
3|c>>>29)^b>>>6,c=(c>>>19|b<<13)^(c<<3|b>>>29)^(c>>>6|b<<26),b=v[m-7],W=b.high,t=v[m-16],q=t.high,t=t.low,b=p+b.low,j=j+W+(b>>>0<p>>>0?1:0),b=b+c,j=j+u+(b>>>0<c>>>0?1:0),b=b+t,j=j+q+(b>>>0<t>>>0?1:0);s.high=j;s.low=b}var W=l&R^~l&S,t=h&C^~h&D,s=k&z^k&A^z&A,T=g&x^g&y^x&y,p=(k>>>28|g<<4)^(k<<30|g>>>2)^(k<<25|g>>>7),u=(g>>>28|k<<4)^(g<<30|k>>>2)^(g<<25|k>>>7),c=ea[m],fa=c.high,da=c.low,c=E+((h>>>14|l<<18)^(h>>>18|l<<14)^(h<<23|l>>>9)),q=V+((l>>>14|h<<18)^(l>>>18|h<<14)^(l<<23|h>>>9))+(c>>>0<E>>>0?1:
0),c=c+t,q=q+W+(c>>>0<t>>>0?1:0),c=c+da,q=q+fa+(c>>>0<da>>>0?1:0),c=c+b,q=q+j+(c>>>0<b>>>0?1:0),b=u+T,s=p+s+(b>>>0<u>>>0?1:0),V=S,E=D,S=R,D=C,R=l,C=h,h=B+c|0,l=U+q+(h>>>0<B>>>0?1:0)|0,U=A,B=y,A=z,y=x,z=k,x=g,g=c+b|0,k=q+s+(g>>>0<c>>>0?1:0)|0}J=F.low=J+g;F.high=w+k+(J>>>0<g>>>0?1:0);K=e.low=K+x;e.high=X+z+(K>>>0<x>>>0?1:0);L=n.low=L+y;n.high=Y+A+(L>>>0<y>>>0?1:0);M=r.low=M+B;r.high=Z+U+(M>>>0<B>>>0?1:0);N=G.low=N+h;G.high=$+l+(N>>>0<h>>>0?1:0);O=H.low=O+C;H.high=aa+R+(O>>>0<C>>>0?1:0);P=I.low=P+D;
I.high=ba+S+(P>>>0<D>>>0?1:0);Q=f.low=Q+E;f.high=ca+V+(Q>>>0<E>>>0?1:0)},_doFinalize:function(){var a=this._data,d=a.words,f=8*this._nDataBytes,e=8*a.sigBytes;d[e>>>5]|=128<<24-e%32;d[(e+128>>>10<<5)+30]=Math.floor(f/4294967296);d[(e+128>>>10<<5)+31]=f;a.sigBytes=4*d.length;this._process();return this._hash.toX32()},clone:function(){var a=r.clone.call(this);a._hash=this._hash.clone();return a},blockSize:32});n.SHA512=r._createHelper(e);n.HmacSHA512=r._createHmacHelper(e)})();

/*
CryptoJS v3.1.2 sha384-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function(){var c=CryptoJS,a=c.x64,b=a.Word,e=a.WordArray,a=c.algo,d=a.SHA512,a=a.SHA384=d.extend({_doReset:function(){this._hash=new e.init([new b.init(3418070365,3238371032),new b.init(1654270250,914150663),new b.init(2438529370,812702999),new b.init(355462360,4144912697),new b.init(1731405415,4290775857),new b.init(2394180231,1750603025),new b.init(3675008525,1694076839),new b.init(1203062813,3204075428)])},_doFinalize:function(){var a=d._doFinalize.call(this);a.sigBytes-=16;return a}});c.SHA384=
d._createHelper(a);c.HmacSHA384=d._createHmacHelper(a)})();

/*
CryptoJS v3.1.2 ripemd160-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/*

(c) 2012 by Cedric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
(function(){var q=CryptoJS,d=q.lib,n=d.WordArray,p=d.Hasher,d=q.algo,x=n.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),y=n.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),z=n.create([11,14,15,12,
5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),A=n.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),B=n.create([0,1518500249,1859775393,2400959708,2840853838]),C=n.create([1352829926,1548603684,1836072691,
2053994217,0]),d=d.RIPEMD160=p.extend({_doReset:function(){this._hash=n.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,v){for(var b=0;16>b;b++){var c=v+b,f=e[c];e[c]=(f<<8|f>>>24)&16711935|(f<<24|f>>>8)&4278255360}var c=this._hash.words,f=B.words,d=C.words,n=x.words,q=y.words,p=z.words,w=A.words,t,g,h,j,r,u,k,l,m,s;u=t=c[0];k=g=c[1];l=h=c[2];m=j=c[3];s=r=c[4];for(var a,b=0;80>b;b+=1)a=t+e[v+n[b]]|0,a=16>b?a+((g^h^j)+f[0]):32>b?a+((g&h|~g&j)+f[1]):48>b?
a+(((g|~h)^j)+f[2]):64>b?a+((g&j|h&~j)+f[3]):a+((g^(h|~j))+f[4]),a|=0,a=a<<p[b]|a>>>32-p[b],a=a+r|0,t=r,r=j,j=h<<10|h>>>22,h=g,g=a,a=u+e[v+q[b]]|0,a=16>b?a+((k^(l|~m))+d[0]):32>b?a+((k&m|l&~m)+d[1]):48>b?a+(((k|~l)^m)+d[2]):64>b?a+((k&l|~k&m)+d[3]):a+((k^l^m)+d[4]),a|=0,a=a<<w[b]|a>>>32-w[b],a=a+s|0,u=s,s=m,m=l<<10|l>>>22,l=k,k=a;a=c[1]+h+m|0;c[1]=c[2]+j+s|0;c[2]=c[3]+r+u|0;c[3]=c[4]+t+k|0;c[4]=c[0]+g+l|0;c[0]=a},_doFinalize:function(){var e=this._data,d=e.words,b=8*this._nDataBytes,c=8*e.sigBytes;
d[c>>>5]|=128<<24-c%32;d[(c+64>>>9<<4)+14]=(b<<8|b>>>24)&16711935|(b<<24|b>>>8)&4278255360;e.sigBytes=4*(d.length+1);this._process();e=this._hash;d=e.words;for(b=0;5>b;b++)c=d[b],d[b]=(c<<8|c>>>24)&16711935|(c<<24|c>>>8)&4278255360;return e},clone:function(){var d=p.clone.call(this);d._hash=this._hash.clone();return d}});q.RIPEMD160=p._createHelper(d);q.HmacRIPEMD160=p._createHmacHelper(d)})(Math);

/*
CryptoJS v3.1.2 hmac.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function(){var c=CryptoJS,k=c.enc.Utf8;c.algo.HMAC=c.lib.Base.extend({init:function(a,b){a=this._hasher=new a.init;"string"==typeof b&&(b=k.parse(b));var c=a.blockSize,e=4*c;b.sigBytes>e&&(b=a.finalize(b));b.clamp();for(var f=this._oKey=b.clone(),g=this._iKey=b.clone(),h=f.words,j=g.words,d=0;d<c;d++)h[d]^=1549556828,j[d]^=909522486;f.sigBytes=g.sigBytes=e;this.reset()},reset:function(){var a=this._hasher;a.reset();a.update(this._iKey)},update:function(a){this._hasher.update(a);return this},finalize:function(a){var b=
this._hasher;a=b.finalize(a);b.reset();return b.finalize(this._oKey.clone().concat(a))}})})();

/*
CryptoJS v3.1.2 pbkdf2-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function(){var b=CryptoJS,a=b.lib,d=a.Base,m=a.WordArray,a=b.algo,q=a.HMAC,l=a.PBKDF2=d.extend({cfg:d.extend({keySize:4,hasher:a.SHA1,iterations:1}),init:function(a){this.cfg=this.cfg.extend(a)},compute:function(a,b){for(var c=this.cfg,f=q.create(c.hasher,a),g=m.create(),d=m.create([1]),l=g.words,r=d.words,n=c.keySize,c=c.iterations;l.length<n;){var h=f.update(b).finalize(d);f.reset();for(var j=h.words,s=j.length,k=h,p=1;p<c;p++){k=f.finalize(k);f.reset();for(var t=k.words,e=0;e<s;e++)j[e]^=t[e]}g.concat(h);
r[0]++}g.sigBytes=4*n;return g}});b.PBKDF2=function(a,b,c){return l.create(c).compute(a,b)}})();

/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var b64map="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var b64pad="=";function hex2b64(d){var b;var e;var a="";for(b=0;b+3<=d.length;b+=3){e=parseInt(d.substring(b,b+3),16);a+=b64map.charAt(e>>6)+b64map.charAt(e&63)}if(b+1==d.length){e=parseInt(d.substring(b,b+1),16);a+=b64map.charAt(e<<2)}else{if(b+2==d.length){e=parseInt(d.substring(b,b+2),16);a+=b64map.charAt(e>>2)+b64map.charAt((e&3)<<4)}}if(b64pad){while((a.length&3)>0){a+=b64pad}}return a}function b64tohex(f){var d="";var e;var b=0;var c;var a;for(e=0;e<f.length;++e){if(f.charAt(e)==b64pad){break}a=b64map.indexOf(f.charAt(e));if(a<0){continue}if(b==0){d+=int2char(a>>2);c=a&3;b=1}else{if(b==1){d+=int2char((c<<2)|(a>>4));c=a&15;b=2}else{if(b==2){d+=int2char(c);d+=int2char(a>>2);c=a&3;b=3}else{d+=int2char((c<<2)|(a>>4));d+=int2char(a&15);b=0}}}}if(b==1){d+=int2char(c<<2)}return d}function b64toBA(e){var d=b64tohex(e);var c;var b=new Array();for(c=0;2*c<d.length;++c){b[c]=parseInt(d.substring(2*c,2*c+2),16)}return b};
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var dbits;var canary=244837814094590;var j_lm=((canary&16777215)==15715070);function BigInteger(e,d,f){if(e!=null){if("number"==typeof e){this.fromNumber(e,d,f)}else{if(d==null&&"string"!=typeof e){this.fromString(e,256)}else{this.fromString(e,d)}}}}function nbi(){return new BigInteger(null)}function am1(f,a,b,e,h,g){while(--g>=0){var d=a*this[f++]+b[e]+h;h=Math.floor(d/67108864);b[e++]=d&67108863}return h}function am2(f,q,r,e,o,a){var k=q&32767,p=q>>15;while(--a>=0){var d=this[f]&32767;var g=this[f++]>>15;var b=p*d+g*k;d=k*d+((b&32767)<<15)+r[e]+(o&1073741823);o=(d>>>30)+(b>>>15)+p*g+(o>>>30);r[e++]=d&1073741823}return o}function am3(f,q,r,e,o,a){var k=q&16383,p=q>>14;while(--a>=0){var d=this[f]&16383;var g=this[f++]>>14;var b=p*d+g*k;d=k*d+((b&16383)<<14)+r[e]+o;o=(d>>28)+(b>>14)+p*g;r[e++]=d&268435455}return o}if(j_lm&&(navigator.appName=="Microsoft Internet Explorer")){BigInteger.prototype.am=am2;dbits=30}else{if(j_lm&&(navigator.appName!="Netscape")){BigInteger.prototype.am=am1;dbits=26}else{BigInteger.prototype.am=am3;dbits=28}}BigInteger.prototype.DB=dbits;BigInteger.prototype.DM=((1<<dbits)-1);BigInteger.prototype.DV=(1<<dbits);var BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP);BigInteger.prototype.F1=BI_FP-dbits;BigInteger.prototype.F2=2*dbits-BI_FP;var BI_RM="0123456789abcdefghijklmnopqrstuvwxyz";var BI_RC=new Array();var rr,vv;rr="0".charCodeAt(0);for(vv=0;vv<=9;++vv){BI_RC[rr++]=vv}rr="a".charCodeAt(0);for(vv=10;vv<36;++vv){BI_RC[rr++]=vv}rr="A".charCodeAt(0);for(vv=10;vv<36;++vv){BI_RC[rr++]=vv}function int2char(a){return BI_RM.charAt(a)}function intAt(b,a){var d=BI_RC[b.charCodeAt(a)];return(d==null)?-1:d}function bnpCopyTo(b){for(var a=this.t-1;a>=0;--a){b[a]=this[a]}b.t=this.t;b.s=this.s}function bnpFromInt(a){this.t=1;this.s=(a<0)?-1:0;if(a>0){this[0]=a}else{if(a<-1){this[0]=a+this.DV}else{this.t=0}}}function nbv(a){var b=nbi();b.fromInt(a);return b}function bnpFromString(h,c){var e;if(c==16){e=4}else{if(c==8){e=3}else{if(c==256){e=8}else{if(c==2){e=1}else{if(c==32){e=5}else{if(c==4){e=2}else{this.fromRadix(h,c);return}}}}}}this.t=0;this.s=0;var g=h.length,d=false,f=0;while(--g>=0){var a=(e==8)?h[g]&255:intAt(h,g);if(a<0){if(h.charAt(g)=="-"){d=true}continue}d=false;if(f==0){this[this.t++]=a}else{if(f+e>this.DB){this[this.t-1]|=(a&((1<<(this.DB-f))-1))<<f;this[this.t++]=(a>>(this.DB-f))}else{this[this.t-1]|=a<<f}}f+=e;if(f>=this.DB){f-=this.DB}}if(e==8&&(h[0]&128)!=0){this.s=-1;if(f>0){this[this.t-1]|=((1<<(this.DB-f))-1)<<f}}this.clamp();if(d){BigInteger.ZERO.subTo(this,this)}}function bnpClamp(){var a=this.s&this.DM;while(this.t>0&&this[this.t-1]==a){--this.t}}function bnToString(c){if(this.s<0){return"-"+this.negate().toString(c)}var e;if(c==16){e=4}else{if(c==8){e=3}else{if(c==2){e=1}else{if(c==32){e=5}else{if(c==4){e=2}else{return this.toRadix(c)}}}}}var g=(1<<e)-1,l,a=false,h="",f=this.t;var j=this.DB-(f*this.DB)%e;if(f-->0){if(j<this.DB&&(l=this[f]>>j)>0){a=true;h=int2char(l)}while(f>=0){if(j<e){l=(this[f]&((1<<j)-1))<<(e-j);l|=this[--f]>>(j+=this.DB-e)}else{l=(this[f]>>(j-=e))&g;if(j<=0){j+=this.DB;--f}}if(l>0){a=true}if(a){h+=int2char(l)}}}return a?h:"0"}function bnNegate(){var a=nbi();BigInteger.ZERO.subTo(this,a);return a}function bnAbs(){return(this.s<0)?this.negate():this}function bnCompareTo(b){var d=this.s-b.s;if(d!=0){return d}var c=this.t;d=c-b.t;if(d!=0){return(this.s<0)?-d:d}while(--c>=0){if((d=this[c]-b[c])!=0){return d}}return 0}function nbits(a){var c=1,b;if((b=a>>>16)!=0){a=b;c+=16}if((b=a>>8)!=0){a=b;c+=8}if((b=a>>4)!=0){a=b;c+=4}if((b=a>>2)!=0){a=b;c+=2}if((b=a>>1)!=0){a=b;c+=1}return c}function bnBitLength(){if(this.t<=0){return 0}return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM))}function bnpDLShiftTo(c,b){var a;for(a=this.t-1;a>=0;--a){b[a+c]=this[a]}for(a=c-1;a>=0;--a){b[a]=0}b.t=this.t+c;b.s=this.s}function bnpDRShiftTo(c,b){for(var a=c;a<this.t;++a){b[a-c]=this[a]}b.t=Math.max(this.t-c,0);b.s=this.s}function bnpLShiftTo(j,e){var b=j%this.DB;var a=this.DB-b;var g=(1<<a)-1;var f=Math.floor(j/this.DB),h=(this.s<<b)&this.DM,d;for(d=this.t-1;d>=0;--d){e[d+f+1]=(this[d]>>a)|h;h=(this[d]&g)<<b}for(d=f-1;d>=0;--d){e[d]=0}e[f]=h;e.t=this.t+f+1;e.s=this.s;e.clamp()}function bnpRShiftTo(g,d){d.s=this.s;var e=Math.floor(g/this.DB);if(e>=this.t){d.t=0;return}var b=g%this.DB;var a=this.DB-b;var f=(1<<b)-1;d[0]=this[e]>>b;for(var c=e+1;c<this.t;++c){d[c-e-1]|=(this[c]&f)<<a;d[c-e]=this[c]>>b}if(b>0){d[this.t-e-1]|=(this.s&f)<<a}d.t=this.t-e;d.clamp()}function bnpSubTo(d,f){var e=0,g=0,b=Math.min(d.t,this.t);while(e<b){g+=this[e]-d[e];f[e++]=g&this.DM;g>>=this.DB}if(d.t<this.t){g-=d.s;while(e<this.t){g+=this[e];f[e++]=g&this.DM;g>>=this.DB}g+=this.s}else{g+=this.s;while(e<d.t){g-=d[e];f[e++]=g&this.DM;g>>=this.DB}g-=d.s}f.s=(g<0)?-1:0;if(g<-1){f[e++]=this.DV+g}else{if(g>0){f[e++]=g}}f.t=e;f.clamp()}function bnpMultiplyTo(c,e){var b=this.abs(),f=c.abs();var d=b.t;e.t=d+f.t;while(--d>=0){e[d]=0}for(d=0;d<f.t;++d){e[d+b.t]=b.am(0,f[d],e,d,0,b.t)}e.s=0;e.clamp();if(this.s!=c.s){BigInteger.ZERO.subTo(e,e)}}function bnpSquareTo(d){var a=this.abs();var b=d.t=2*a.t;while(--b>=0){d[b]=0}for(b=0;b<a.t-1;++b){var e=a.am(b,a[b],d,2*b,0,1);if((d[b+a.t]+=a.am(b+1,2*a[b],d,2*b+1,e,a.t-b-1))>=a.DV){d[b+a.t]-=a.DV;d[b+a.t+1]=1}}if(d.t>0){d[d.t-1]+=a.am(b,a[b],d,2*b,0,1)}d.s=0;d.clamp()}function bnpDivRemTo(n,h,g){var w=n.abs();if(w.t<=0){return}var k=this.abs();if(k.t<w.t){if(h!=null){h.fromInt(0)}if(g!=null){this.copyTo(g)}return}if(g==null){g=nbi()}var d=nbi(),a=this.s,l=n.s;var v=this.DB-nbits(w[w.t-1]);if(v>0){w.lShiftTo(v,d);k.lShiftTo(v,g)}else{w.copyTo(d);k.copyTo(g)}var p=d.t;var b=d[p-1];if(b==0){return}var o=b*(1<<this.F1)+((p>1)?d[p-2]>>this.F2:0);var A=this.FV/o,z=(1<<this.F1)/o,x=1<<this.F2;var u=g.t,s=u-p,f=(h==null)?nbi():h;d.dlShiftTo(s,f);if(g.compareTo(f)>=0){g[g.t++]=1;g.subTo(f,g)}BigInteger.ONE.dlShiftTo(p,f);f.subTo(d,d);while(d.t<p){d[d.t++]=0}while(--s>=0){var c=(g[--u]==b)?this.DM:Math.floor(g[u]*A+(g[u-1]+x)*z);if((g[u]+=d.am(0,c,g,s,0,p))<c){d.dlShiftTo(s,f);g.subTo(f,g);while(g[u]<--c){g.subTo(f,g)}}}if(h!=null){g.drShiftTo(p,h);if(a!=l){BigInteger.ZERO.subTo(h,h)}}g.t=p;g.clamp();if(v>0){g.rShiftTo(v,g)}if(a<0){BigInteger.ZERO.subTo(g,g)}}function bnMod(b){var c=nbi();this.abs().divRemTo(b,null,c);if(this.s<0&&c.compareTo(BigInteger.ZERO)>0){b.subTo(c,c)}return c}function Classic(a){this.m=a}function cConvert(a){if(a.s<0||a.compareTo(this.m)>=0){return a.mod(this.m)}else{return a}}function cRevert(a){return a}function cReduce(a){a.divRemTo(this.m,null,a)}function cMulTo(a,c,b){a.multiplyTo(c,b);this.reduce(b)}function cSqrTo(a,b){a.squareTo(b);this.reduce(b)}Classic.prototype.convert=cConvert;Classic.prototype.revert=cRevert;Classic.prototype.reduce=cReduce;Classic.prototype.mulTo=cMulTo;Classic.prototype.sqrTo=cSqrTo;function bnpInvDigit(){if(this.t<1){return 0}var a=this[0];if((a&1)==0){return 0}var b=a&3;b=(b*(2-(a&15)*b))&15;b=(b*(2-(a&255)*b))&255;b=(b*(2-(((a&65535)*b)&65535)))&65535;b=(b*(2-a*b%this.DV))%this.DV;return(b>0)?this.DV-b:-b}function Montgomery(a){this.m=a;this.mp=a.invDigit();this.mpl=this.mp&32767;this.mph=this.mp>>15;this.um=(1<<(a.DB-15))-1;this.mt2=2*a.t}function montConvert(a){var b=nbi();a.abs().dlShiftTo(this.m.t,b);b.divRemTo(this.m,null,b);if(a.s<0&&b.compareTo(BigInteger.ZERO)>0){this.m.subTo(b,b)}return b}function montRevert(a){var b=nbi();a.copyTo(b);this.reduce(b);return b}function montReduce(a){while(a.t<=this.mt2){a[a.t++]=0}for(var c=0;c<this.m.t;++c){var b=a[c]&32767;var d=(b*this.mpl+(((b*this.mph+(a[c]>>15)*this.mpl)&this.um)<<15))&a.DM;b=c+this.m.t;a[b]+=this.m.am(0,d,a,c,0,this.m.t);while(a[b]>=a.DV){a[b]-=a.DV;a[++b]++}}a.clamp();a.drShiftTo(this.m.t,a);if(a.compareTo(this.m)>=0){a.subTo(this.m,a)}}function montSqrTo(a,b){a.squareTo(b);this.reduce(b)}function montMulTo(a,c,b){a.multiplyTo(c,b);this.reduce(b)}Montgomery.prototype.convert=montConvert;Montgomery.prototype.revert=montRevert;Montgomery.prototype.reduce=montReduce;Montgomery.prototype.mulTo=montMulTo;Montgomery.prototype.sqrTo=montSqrTo;function bnpIsEven(){return((this.t>0)?(this[0]&1):this.s)==0}function bnpExp(h,j){if(h>4294967295||h<1){return BigInteger.ONE}var f=nbi(),a=nbi(),d=j.convert(this),c=nbits(h)-1;d.copyTo(f);while(--c>=0){j.sqrTo(f,a);if((h&(1<<c))>0){j.mulTo(a,d,f)}else{var b=f;f=a;a=b}}return j.revert(f)}function bnModPowInt(b,a){var c;if(b<256||a.isEven()){c=new Classic(a)}else{c=new Montgomery(a)}return this.exp(b,c)}BigInteger.prototype.copyTo=bnpCopyTo;BigInteger.prototype.fromInt=bnpFromInt;BigInteger.prototype.fromString=bnpFromString;BigInteger.prototype.clamp=bnpClamp;BigInteger.prototype.dlShiftTo=bnpDLShiftTo;BigInteger.prototype.drShiftTo=bnpDRShiftTo;BigInteger.prototype.lShiftTo=bnpLShiftTo;BigInteger.prototype.rShiftTo=bnpRShiftTo;BigInteger.prototype.subTo=bnpSubTo;BigInteger.prototype.multiplyTo=bnpMultiplyTo;BigInteger.prototype.squareTo=bnpSquareTo;BigInteger.prototype.divRemTo=bnpDivRemTo;BigInteger.prototype.invDigit=bnpInvDigit;BigInteger.prototype.isEven=bnpIsEven;BigInteger.prototype.exp=bnpExp;BigInteger.prototype.toString=bnToString;BigInteger.prototype.negate=bnNegate;BigInteger.prototype.abs=bnAbs;BigInteger.prototype.compareTo=bnCompareTo;BigInteger.prototype.bitLength=bnBitLength;BigInteger.prototype.mod=bnMod;BigInteger.prototype.modPowInt=bnModPowInt;BigInteger.ZERO=nbv(0);BigInteger.ONE=nbv(1);
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function bnClone(){var a=nbi();this.copyTo(a);return a}function bnIntValue(){if(this.s<0){if(this.t==1){return this[0]-this.DV}else{if(this.t==0){return -1}}}else{if(this.t==1){return this[0]}else{if(this.t==0){return 0}}}return((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0]}function bnByteValue(){return(this.t==0)?this.s:(this[0]<<24)>>24}function bnShortValue(){return(this.t==0)?this.s:(this[0]<<16)>>16}function bnpChunkSize(a){return Math.floor(Math.LN2*this.DB/Math.log(a))}function bnSigNum(){if(this.s<0){return -1}else{if(this.t<=0||(this.t==1&&this[0]<=0)){return 0}else{return 1}}}function bnpToRadix(c){if(c==null){c=10}if(this.signum()==0||c<2||c>36){return"0"}var f=this.chunkSize(c);var e=Math.pow(c,f);var i=nbv(e),j=nbi(),h=nbi(),g="";this.divRemTo(i,j,h);while(j.signum()>0){g=(e+h.intValue()).toString(c).substr(1)+g;j.divRemTo(i,j,h)}return h.intValue().toString(c)+g}function bnpFromRadix(m,h){this.fromInt(0);if(h==null){h=10}var f=this.chunkSize(h);var g=Math.pow(h,f),e=false,a=0,l=0;for(var c=0;c<m.length;++c){var k=intAt(m,c);if(k<0){if(m.charAt(c)=="-"&&this.signum()==0){e=true}continue}l=h*l+k;if(++a>=f){this.dMultiply(g);this.dAddOffset(l,0);a=0;l=0}}if(a>0){this.dMultiply(Math.pow(h,a));this.dAddOffset(l,0)}if(e){BigInteger.ZERO.subTo(this,this)}}function bnpFromNumber(f,e,h){if("number"==typeof e){if(f<2){this.fromInt(1)}else{this.fromNumber(f,h);if(!this.testBit(f-1)){this.bitwiseTo(BigInteger.ONE.shiftLeft(f-1),op_or,this)}if(this.isEven()){this.dAddOffset(1,0)}while(!this.isProbablePrime(e)){this.dAddOffset(2,0);if(this.bitLength()>f){this.subTo(BigInteger.ONE.shiftLeft(f-1),this)}}}}else{var d=new Array(),g=f&7;d.length=(f>>3)+1;e.nextBytes(d);if(g>0){d[0]&=((1<<g)-1)}else{d[0]=0}this.fromString(d,256)}}function bnToByteArray(){var b=this.t,c=new Array();c[0]=this.s;var e=this.DB-(b*this.DB)%8,f,a=0;if(b-->0){if(e<this.DB&&(f=this[b]>>e)!=(this.s&this.DM)>>e){c[a++]=f|(this.s<<(this.DB-e))}while(b>=0){if(e<8){f=(this[b]&((1<<e)-1))<<(8-e);f|=this[--b]>>(e+=this.DB-8)}else{f=(this[b]>>(e-=8))&255;if(e<=0){e+=this.DB;--b}}if((f&128)!=0){f|=-256}if(a==0&&(this.s&128)!=(f&128)){++a}if(a>0||f!=this.s){c[a++]=f}}}return c}function bnEquals(b){return(this.compareTo(b)==0)}function bnMin(b){return(this.compareTo(b)<0)?this:b}function bnMax(b){return(this.compareTo(b)>0)?this:b}function bnpBitwiseTo(c,h,e){var d,g,b=Math.min(c.t,this.t);for(d=0;d<b;++d){e[d]=h(this[d],c[d])}if(c.t<this.t){g=c.s&this.DM;for(d=b;d<this.t;++d){e[d]=h(this[d],g)}e.t=this.t}else{g=this.s&this.DM;for(d=b;d<c.t;++d){e[d]=h(g,c[d])}e.t=c.t}e.s=h(this.s,c.s);e.clamp()}function op_and(a,b){return a&b}function bnAnd(b){var c=nbi();this.bitwiseTo(b,op_and,c);return c}function op_or(a,b){return a|b}function bnOr(b){var c=nbi();this.bitwiseTo(b,op_or,c);return c}function op_xor(a,b){return a^b}function bnXor(b){var c=nbi();this.bitwiseTo(b,op_xor,c);return c}function op_andnot(a,b){return a&~b}function bnAndNot(b){var c=nbi();this.bitwiseTo(b,op_andnot,c);return c}function bnNot(){var b=nbi();for(var a=0;a<this.t;++a){b[a]=this.DM&~this[a]}b.t=this.t;b.s=~this.s;return b}function bnShiftLeft(b){var a=nbi();if(b<0){this.rShiftTo(-b,a)}else{this.lShiftTo(b,a)}return a}function bnShiftRight(b){var a=nbi();if(b<0){this.lShiftTo(-b,a)}else{this.rShiftTo(b,a)}return a}function lbit(a){if(a==0){return -1}var b=0;if((a&65535)==0){a>>=16;b+=16}if((a&255)==0){a>>=8;b+=8}if((a&15)==0){a>>=4;b+=4}if((a&3)==0){a>>=2;b+=2}if((a&1)==0){++b}return b}function bnGetLowestSetBit(){for(var a=0;a<this.t;++a){if(this[a]!=0){return a*this.DB+lbit(this[a])}}if(this.s<0){return this.t*this.DB}return -1}function cbit(a){var b=0;while(a!=0){a&=a-1;++b}return b}function bnBitCount(){var c=0,a=this.s&this.DM;for(var b=0;b<this.t;++b){c+=cbit(this[b]^a)}return c}function bnTestBit(b){var a=Math.floor(b/this.DB);if(a>=this.t){return(this.s!=0)}return((this[a]&(1<<(b%this.DB)))!=0)}function bnpChangeBit(c,b){var a=BigInteger.ONE.shiftLeft(c);this.bitwiseTo(a,b,a);return a}function bnSetBit(a){return this.changeBit(a,op_or)}function bnClearBit(a){return this.changeBit(a,op_andnot)}function bnFlipBit(a){return this.changeBit(a,op_xor)}function bnpAddTo(d,f){var e=0,g=0,b=Math.min(d.t,this.t);while(e<b){g+=this[e]+d[e];f[e++]=g&this.DM;g>>=this.DB}if(d.t<this.t){g+=d.s;while(e<this.t){g+=this[e];f[e++]=g&this.DM;g>>=this.DB}g+=this.s}else{g+=this.s;while(e<d.t){g+=d[e];f[e++]=g&this.DM;g>>=this.DB}g+=d.s}f.s=(g<0)?-1:0;if(g>0){f[e++]=g}else{if(g<-1){f[e++]=this.DV+g}}f.t=e;f.clamp()}function bnAdd(b){var c=nbi();this.addTo(b,c);return c}function bnSubtract(b){var c=nbi();this.subTo(b,c);return c}function bnMultiply(b){var c=nbi();this.multiplyTo(b,c);return c}function bnSquare(){var a=nbi();this.squareTo(a);return a}function bnDivide(b){var c=nbi();this.divRemTo(b,c,null);return c}function bnRemainder(b){var c=nbi();this.divRemTo(b,null,c);return c}function bnDivideAndRemainder(b){var d=nbi(),c=nbi();this.divRemTo(b,d,c);return new Array(d,c)}function bnpDMultiply(a){this[this.t]=this.am(0,a-1,this,0,0,this.t);++this.t;this.clamp()}function bnpDAddOffset(b,a){if(b==0){return}while(this.t<=a){this[this.t++]=0}this[a]+=b;while(this[a]>=this.DV){this[a]-=this.DV;if(++a>=this.t){this[this.t++]=0}++this[a]}}function NullExp(){}function nNop(a){return a}function nMulTo(a,c,b){a.multiplyTo(c,b)}function nSqrTo(a,b){a.squareTo(b)}NullExp.prototype.convert=nNop;NullExp.prototype.revert=nNop;NullExp.prototype.mulTo=nMulTo;NullExp.prototype.sqrTo=nSqrTo;function bnPow(a){return this.exp(a,new NullExp())}function bnpMultiplyLowerTo(b,f,e){var d=Math.min(this.t+b.t,f);e.s=0;e.t=d;while(d>0){e[--d]=0}var c;for(c=e.t-this.t;d<c;++d){e[d+this.t]=this.am(0,b[d],e,d,0,this.t)}for(c=Math.min(b.t,f);d<c;++d){this.am(0,b[d],e,d,0,f-d)}e.clamp()}function bnpMultiplyUpperTo(b,e,d){--e;var c=d.t=this.t+b.t-e;d.s=0;while(--c>=0){d[c]=0}for(c=Math.max(e-this.t,0);c<b.t;++c){d[this.t+c-e]=this.am(e-c,b[c],d,0,0,this.t+c-e)}d.clamp();d.drShiftTo(1,d)}function Barrett(a){this.r2=nbi();this.q3=nbi();BigInteger.ONE.dlShiftTo(2*a.t,this.r2);this.mu=this.r2.divide(a);this.m=a}function barrettConvert(a){if(a.s<0||a.t>2*this.m.t){return a.mod(this.m)}else{if(a.compareTo(this.m)<0){return a}else{var b=nbi();a.copyTo(b);this.reduce(b);return b}}}function barrettRevert(a){return a}function barrettReduce(a){a.drShiftTo(this.m.t-1,this.r2);if(a.t>this.m.t+1){a.t=this.m.t+1;a.clamp()}this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);while(a.compareTo(this.r2)<0){a.dAddOffset(1,this.m.t+1)}a.subTo(this.r2,a);while(a.compareTo(this.m)>=0){a.subTo(this.m,a)}}function barrettSqrTo(a,b){a.squareTo(b);this.reduce(b)}function barrettMulTo(a,c,b){a.multiplyTo(c,b);this.reduce(b)}Barrett.prototype.convert=barrettConvert;Barrett.prototype.revert=barrettRevert;Barrett.prototype.reduce=barrettReduce;Barrett.prototype.mulTo=barrettMulTo;Barrett.prototype.sqrTo=barrettSqrTo;function bnModPow(q,f){var o=q.bitLength(),h,b=nbv(1),v;if(o<=0){return b}else{if(o<18){h=1}else{if(o<48){h=3}else{if(o<144){h=4}else{if(o<768){h=5}else{h=6}}}}}if(o<8){v=new Classic(f)}else{if(f.isEven()){v=new Barrett(f)}else{v=new Montgomery(f)}}var p=new Array(),d=3,s=h-1,a=(1<<h)-1;p[1]=v.convert(this);if(h>1){var A=nbi();v.sqrTo(p[1],A);while(d<=a){p[d]=nbi();v.mulTo(A,p[d-2],p[d]);d+=2}}var l=q.t-1,x,u=true,c=nbi(),y;o=nbits(q[l])-1;while(l>=0){if(o>=s){x=(q[l]>>(o-s))&a}else{x=(q[l]&((1<<(o+1))-1))<<(s-o);if(l>0){x|=q[l-1]>>(this.DB+o-s)}}d=h;while((x&1)==0){x>>=1;--d}if((o-=d)<0){o+=this.DB;--l}if(u){p[x].copyTo(b);u=false}else{while(d>1){v.sqrTo(b,c);v.sqrTo(c,b);d-=2}if(d>0){v.sqrTo(b,c)}else{y=b;b=c;c=y}v.mulTo(c,p[x],b)}while(l>=0&&(q[l]&(1<<o))==0){v.sqrTo(b,c);y=b;b=c;c=y;if(--o<0){o=this.DB-1;--l}}}return v.revert(b)}function bnGCD(c){var b=(this.s<0)?this.negate():this.clone();var h=(c.s<0)?c.negate():c.clone();if(b.compareTo(h)<0){var e=b;b=h;h=e}var d=b.getLowestSetBit(),f=h.getLowestSetBit();if(f<0){return b}if(d<f){f=d}if(f>0){b.rShiftTo(f,b);h.rShiftTo(f,h)}while(b.signum()>0){if((d=b.getLowestSetBit())>0){b.rShiftTo(d,b)}if((d=h.getLowestSetBit())>0){h.rShiftTo(d,h)}if(b.compareTo(h)>=0){b.subTo(h,b);b.rShiftTo(1,b)}else{h.subTo(b,h);h.rShiftTo(1,h)}}if(f>0){h.lShiftTo(f,h)}return h}function bnpModInt(e){if(e<=0){return 0}var c=this.DV%e,b=(this.s<0)?e-1:0;if(this.t>0){if(c==0){b=this[0]%e}else{for(var a=this.t-1;a>=0;--a){b=(c*b+this[a])%e}}}return b}function bnModInverse(f){var j=f.isEven();if((this.isEven()&&j)||f.signum()==0){return BigInteger.ZERO}var i=f.clone(),h=this.clone();var g=nbv(1),e=nbv(0),l=nbv(0),k=nbv(1);while(i.signum()!=0){while(i.isEven()){i.rShiftTo(1,i);if(j){if(!g.isEven()||!e.isEven()){g.addTo(this,g);e.subTo(f,e)}g.rShiftTo(1,g)}else{if(!e.isEven()){e.subTo(f,e)}}e.rShiftTo(1,e)}while(h.isEven()){h.rShiftTo(1,h);if(j){if(!l.isEven()||!k.isEven()){l.addTo(this,l);k.subTo(f,k)}l.rShiftTo(1,l)}else{if(!k.isEven()){k.subTo(f,k)}}k.rShiftTo(1,k)}if(i.compareTo(h)>=0){i.subTo(h,i);if(j){g.subTo(l,g)}e.subTo(k,e)}else{h.subTo(i,h);if(j){l.subTo(g,l)}k.subTo(e,k)}}if(h.compareTo(BigInteger.ONE)!=0){return BigInteger.ZERO}if(k.compareTo(f)>=0){return k.subtract(f)}if(k.signum()<0){k.addTo(f,k)}else{return k}if(k.signum()<0){return k.add(f)}else{return k}}var lowprimes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];var lplim=(1<<26)/lowprimes[lowprimes.length-1];function bnIsProbablePrime(e){var d,b=this.abs();if(b.t==1&&b[0]<=lowprimes[lowprimes.length-1]){for(d=0;d<lowprimes.length;++d){if(b[0]==lowprimes[d]){return true}}return false}if(b.isEven()){return false}d=1;while(d<lowprimes.length){var a=lowprimes[d],c=d+1;while(c<lowprimes.length&&a<lplim){a*=lowprimes[c++]}a=b.modInt(a);while(d<c){if(a%lowprimes[d++]==0){return false}}}return b.millerRabin(e)}function bnpMillerRabin(f){var g=this.subtract(BigInteger.ONE);var c=g.getLowestSetBit();if(c<=0){return false}var h=g.shiftRight(c);f=(f+1)>>1;if(f>lowprimes.length){f=lowprimes.length}var b=nbi();for(var e=0;e<f;++e){b.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);var l=b.modPow(h,this);if(l.compareTo(BigInteger.ONE)!=0&&l.compareTo(g)!=0){var d=1;while(d++<c&&l.compareTo(g)!=0){l=l.modPowInt(2,this);if(l.compareTo(BigInteger.ONE)==0){return false}}if(l.compareTo(g)!=0){return false}}}return true}BigInteger.prototype.chunkSize=bnpChunkSize;BigInteger.prototype.toRadix=bnpToRadix;BigInteger.prototype.fromRadix=bnpFromRadix;BigInteger.prototype.fromNumber=bnpFromNumber;BigInteger.prototype.bitwiseTo=bnpBitwiseTo;BigInteger.prototype.changeBit=bnpChangeBit;BigInteger.prototype.addTo=bnpAddTo;BigInteger.prototype.dMultiply=bnpDMultiply;BigInteger.prototype.dAddOffset=bnpDAddOffset;BigInteger.prototype.multiplyLowerTo=bnpMultiplyLowerTo;BigInteger.prototype.multiplyUpperTo=bnpMultiplyUpperTo;BigInteger.prototype.modInt=bnpModInt;BigInteger.prototype.millerRabin=bnpMillerRabin;BigInteger.prototype.clone=bnClone;BigInteger.prototype.intValue=bnIntValue;BigInteger.prototype.byteValue=bnByteValue;BigInteger.prototype.shortValue=bnShortValue;BigInteger.prototype.signum=bnSigNum;BigInteger.prototype.toByteArray=bnToByteArray;BigInteger.prototype.equals=bnEquals;BigInteger.prototype.min=bnMin;BigInteger.prototype.max=bnMax;BigInteger.prototype.and=bnAnd;BigInteger.prototype.or=bnOr;BigInteger.prototype.xor=bnXor;BigInteger.prototype.andNot=bnAndNot;BigInteger.prototype.not=bnNot;BigInteger.prototype.shiftLeft=bnShiftLeft;BigInteger.prototype.shiftRight=bnShiftRight;BigInteger.prototype.getLowestSetBit=bnGetLowestSetBit;BigInteger.prototype.bitCount=bnBitCount;BigInteger.prototype.testBit=bnTestBit;BigInteger.prototype.setBit=bnSetBit;BigInteger.prototype.clearBit=bnClearBit;BigInteger.prototype.flipBit=bnFlipBit;BigInteger.prototype.add=bnAdd;BigInteger.prototype.subtract=bnSubtract;BigInteger.prototype.multiply=bnMultiply;BigInteger.prototype.divide=bnDivide;BigInteger.prototype.remainder=bnRemainder;BigInteger.prototype.divideAndRemainder=bnDivideAndRemainder;BigInteger.prototype.modPow=bnModPow;BigInteger.prototype.modInverse=bnModInverse;BigInteger.prototype.pow=bnPow;BigInteger.prototype.gcd=bnGCD;BigInteger.prototype.isProbablePrime=bnIsProbablePrime;BigInteger.prototype.square=bnSquare;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function Arcfour(){this.i=0;this.j=0;this.S=new Array()}function ARC4init(d){var c,a,b;for(c=0;c<256;++c){this.S[c]=c}a=0;for(c=0;c<256;++c){a=(a+this.S[c]+d[c%d.length])&255;b=this.S[c];this.S[c]=this.S[a];this.S[a]=b}this.i=0;this.j=0}function ARC4next(){var a;this.i=(this.i+1)&255;this.j=(this.j+this.S[this.i])&255;a=this.S[this.i];this.S[this.i]=this.S[this.j];this.S[this.j]=a;return this.S[(a+this.S[this.i])&255]}Arcfour.prototype.init=ARC4init;Arcfour.prototype.next=ARC4next;function prng_newstate(){return new Arcfour()}var rng_psize=256;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var rng_state;var rng_pool;var rng_pptr;function rng_seed_int(a){rng_pool[rng_pptr++]^=a&255;rng_pool[rng_pptr++]^=(a>>8)&255;rng_pool[rng_pptr++]^=(a>>16)&255;rng_pool[rng_pptr++]^=(a>>24)&255;if(rng_pptr>=rng_psize){rng_pptr-=rng_psize}}function rng_seed_time(){rng_seed_int(new Date().getTime())}if(rng_pool==null){rng_pool=new Array();rng_pptr=0;var t;if(window!==undefined&&(window.crypto!==undefined||window.msCrypto!==undefined)){var crypto=window.crypto||window.msCrypto;if(crypto.getRandomValues){var ua=new Uint8Array(32);crypto.getRandomValues(ua);for(t=0;t<32;++t){rng_pool[rng_pptr++]=ua[t]}}else{if(navigator.appName=="Netscape"&&navigator.appVersion<"5"){var z=window.crypto.random(32);for(t=0;t<z.length;++t){rng_pool[rng_pptr++]=z.charCodeAt(t)&255}}}}while(rng_pptr<rng_psize){t=Math.floor(65536*Math.random());rng_pool[rng_pptr++]=t>>>8;rng_pool[rng_pptr++]=t&255}rng_pptr=0;rng_seed_time()}function rng_get_byte(){if(rng_state==null){rng_seed_time();rng_state=prng_newstate();rng_state.init(rng_pool);for(rng_pptr=0;rng_pptr<rng_pool.length;++rng_pptr){rng_pool[rng_pptr]=0}rng_pptr=0}return rng_state.next()}function rng_get_bytes(b){var a;for(a=0;a<b.length;++a){b[a]=rng_get_byte()}}function SecureRandom(){}SecureRandom.prototype.nextBytes=rng_get_bytes;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function parseBigInt(b,a){return new BigInteger(b,a)}function linebrk(c,d){var a="";var b=0;while(b+d<c.length){a+=c.substring(b,b+d)+"\n";b+=d}return a+c.substring(b,c.length)}function byte2Hex(a){if(a<16){return"0"+a.toString(16)}else{return a.toString(16)}}function pkcs1pad2(e,h){if(h<e.length+11){throw"Message too long for RSA";return null}var g=new Array();var d=e.length-1;while(d>=0&&h>0){var f=e.charCodeAt(d--);if(f<128){g[--h]=f}else{if((f>127)&&(f<2048)){g[--h]=(f&63)|128;g[--h]=(f>>6)|192}else{g[--h]=(f&63)|128;g[--h]=((f>>6)&63)|128;g[--h]=(f>>12)|224}}}g[--h]=0;var b=new SecureRandom();var a=new Array();while(h>2){a[0]=0;while(a[0]==0){b.nextBytes(a)}g[--h]=a[0]}g[--h]=2;g[--h]=0;return new BigInteger(g)}function oaep_mgf1_arr(c,a,e){var b="",d=0;while(b.length<a){b+=e(String.fromCharCode.apply(String,c.concat([(d&4278190080)>>24,(d&16711680)>>16,(d&65280)>>8,d&255])));d+=1}return b}function oaep_pad(q,a,f,l){var c=KJUR.crypto.MessageDigest;var o=KJUR.crypto.Util;var b=null;if(!f){f="sha1"}if(typeof f==="string"){b=c.getCanonicalAlgName(f);l=c.getHashLength(b);f=function(i){return hextorstr(o.hashHex(rstrtohex(i),b))}}if(q.length+2*l+2>a){throw"Message too long for RSA"}var k="",e;for(e=0;e<a-q.length-2*l-2;e+=1){k+="\x00"}var h=f("")+k+"\x01"+q;var g=new Array(l);new SecureRandom().nextBytes(g);var j=oaep_mgf1_arr(g,h.length,f);var p=[];for(e=0;e<h.length;e+=1){p[e]=h.charCodeAt(e)^j.charCodeAt(e)}var m=oaep_mgf1_arr(p,g.length,f);var d=[0];for(e=0;e<g.length;e+=1){d[e+1]=g[e]^m.charCodeAt(e)}return new BigInteger(d.concat(p))}function RSAKey(){this.n=null;this.e=0;this.d=null;this.p=null;this.q=null;this.dmp1=null;this.dmq1=null;this.coeff=null}function RSASetPublic(b,a){this.isPublic=true;this.isPrivate=false;if(typeof b!=="string"){this.n=b;this.e=a}else{if(b!=null&&a!=null&&b.length>0&&a.length>0){this.n=parseBigInt(b,16);this.e=parseInt(a,16)}else{throw"Invalid RSA public key"}}}function RSADoPublic(a){return a.modPowInt(this.e,this.n)}RSAKey.prototype.doPublic=RSADoPublic;RSAKey.prototype.setPublic=RSASetPublic;RSAKey.prototype.type="RSA";
/*! (c) Tom Wu, Kenji Urushima | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function pkcs1unpad2(g,j){var a=g.toByteArray();var f=0;while(f<a.length&&a[f]==0){++f}if(a.length-f!=j-1||a[f]!=2){return null}++f;while(a[f]!=0){if(++f>=a.length){return null}}var e="";while(++f<a.length){var h=a[f]&255;if(h<128){e+=String.fromCharCode(h)}else{if((h>191)&&(h<224)){e+=String.fromCharCode(((h&31)<<6)|(a[f+1]&63));++f}else{e+=String.fromCharCode(((h&15)<<12)|((a[f+1]&63)<<6)|(a[f+2]&63));f+=2}}}return e}function oaep_mgf1_str(c,a,e){var b="",d=0;while(b.length<a){b+=e(c+String.fromCharCode.apply(String,[(d&4278190080)>>24,(d&16711680)>>16,(d&65280)>>8,d&255]));d+=1}return b}function oaep_unpad(o,b,g,p){var e=KJUR.crypto.MessageDigest;var r=KJUR.crypto.Util;var c=null;if(!g){g="sha1"}if(typeof g==="string"){c=e.getCanonicalAlgName(g);p=e.getHashLength(c);g=function(d){return hextorstr(r.hashHex(rstrtohex(d),c))}}o=o.toByteArray();var h;for(h=0;h<o.length;h+=1){o[h]&=255}while(o.length<b){o.unshift(0)}o=String.fromCharCode.apply(String,o);if(o.length<2*p+2){throw"Cipher too short"}var f=o.substr(1,p);var s=o.substr(p+1);var q=oaep_mgf1_str(s,p,g);var k=[],h;for(h=0;h<f.length;h+=1){k[h]=f.charCodeAt(h)^q.charCodeAt(h)}var l=oaep_mgf1_str(String.fromCharCode.apply(String,k),o.length-p,g);var j=[];for(h=0;h<s.length;h+=1){j[h]=s.charCodeAt(h)^l.charCodeAt(h)}j=String.fromCharCode.apply(String,j);if(j.substr(0,p)!==g("")){throw"Hash mismatch"}j=j.substr(p);var a=j.indexOf("\x01");var m=(a!=-1)?j.substr(0,a).lastIndexOf("\x00"):-1;if(m+1!=a){throw"Malformed data"}return j.substr(a+1)}function RSASetPrivate(c,a,b){this.isPrivate=true;if(typeof c!=="string"){this.n=c;this.e=a;this.d=b}else{if(c!=null&&a!=null&&c.length>0&&a.length>0){this.n=parseBigInt(c,16);this.e=parseInt(a,16);this.d=parseBigInt(b,16)}else{throw"Invalid RSA private key"}}}function RSASetPrivateEx(g,d,e,c,b,a,h,f){this.isPrivate=true;this.isPublic=false;if(g==null){throw"RSASetPrivateEx N == null"}if(d==null){throw"RSASetPrivateEx E == null"}if(g.length==0){throw"RSASetPrivateEx N.length == 0"}if(d.length==0){throw"RSASetPrivateEx E.length == 0"}if(g!=null&&d!=null&&g.length>0&&d.length>0){this.n=parseBigInt(g,16);this.e=parseInt(d,16);this.d=parseBigInt(e,16);this.p=parseBigInt(c,16);this.q=parseBigInt(b,16);this.dmp1=parseBigInt(a,16);this.dmq1=parseBigInt(h,16);this.coeff=parseBigInt(f,16)}else{throw"Invalid RSA private key in RSASetPrivateEx"}}function RSAGenerate(b,l){var a=new SecureRandom();var g=b>>1;this.e=parseInt(l,16);var c=new BigInteger(l,16);var d=(b/2)-100;var k=BigInteger.ONE.shiftLeft(d);for(;;){for(;;){this.p=new BigInteger(b-g,1,a);if(this.p.subtract(BigInteger.ONE).gcd(c).compareTo(BigInteger.ONE)==0&&this.p.isProbablePrime(10)){break}}for(;;){this.q=new BigInteger(g,1,a);if(this.q.subtract(BigInteger.ONE).gcd(c).compareTo(BigInteger.ONE)==0&&this.q.isProbablePrime(10)){break}}if(this.p.compareTo(this.q)<=0){var j=this.p;this.p=this.q;this.q=j}var h=this.q.subtract(this.p).abs();if(h.bitLength()<d||h.compareTo(k)<=0){continue}var i=this.p.subtract(BigInteger.ONE);var e=this.q.subtract(BigInteger.ONE);var f=i.multiply(e);if(f.gcd(c).compareTo(BigInteger.ONE)==0){this.n=this.p.multiply(this.q);if(this.n.bitLength()==b){this.d=c.modInverse(f);this.dmp1=this.d.mod(i);this.dmq1=this.d.mod(e);this.coeff=this.q.modInverse(this.p);break}}}this.isPrivate=true}function RSADoPrivate(a){if(this.p==null||this.q==null){return a.modPow(this.d,this.n)}var c=a.mod(this.p).modPow(this.dmp1,this.p);var b=a.mod(this.q).modPow(this.dmq1,this.q);while(c.compareTo(b)<0){c=c.add(this.p)}return c.subtract(b).multiply(this.coeff).mod(this.p).multiply(this.q).add(b)}RSAKey.prototype.doPrivate=RSADoPrivate;RSAKey.prototype.setPrivate=RSASetPrivate;RSAKey.prototype.setPrivateEx=RSASetPrivateEx;RSAKey.prototype.generate=RSAGenerate;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function ECFieldElementFp(b,a){this.x=a;this.q=b}function feFpEquals(a){if(a==this){return true}return(this.q.equals(a.q)&&this.x.equals(a.x))}function feFpToBigInteger(){return this.x}function feFpNegate(){return new ECFieldElementFp(this.q,this.x.negate().mod(this.q))}function feFpAdd(a){return new ECFieldElementFp(this.q,this.x.add(a.toBigInteger()).mod(this.q))}function feFpSubtract(a){return new ECFieldElementFp(this.q,this.x.subtract(a.toBigInteger()).mod(this.q))}function feFpMultiply(a){return new ECFieldElementFp(this.q,this.x.multiply(a.toBigInteger()).mod(this.q))}function feFpSquare(){return new ECFieldElementFp(this.q,this.x.square().mod(this.q))}function feFpDivide(a){return new ECFieldElementFp(this.q,this.x.multiply(a.toBigInteger().modInverse(this.q)).mod(this.q))}ECFieldElementFp.prototype.equals=feFpEquals;ECFieldElementFp.prototype.toBigInteger=feFpToBigInteger;ECFieldElementFp.prototype.negate=feFpNegate;ECFieldElementFp.prototype.add=feFpAdd;ECFieldElementFp.prototype.subtract=feFpSubtract;ECFieldElementFp.prototype.multiply=feFpMultiply;ECFieldElementFp.prototype.square=feFpSquare;ECFieldElementFp.prototype.divide=feFpDivide;ECFieldElementFp.prototype.sqrt=function(){return new ECFieldElementFp(this.q,this.x.sqrt().mod(this.q))};function ECPointFp(c,a,d,b){this.curve=c;this.x=a;this.y=d;if(b==null){this.z=BigInteger.ONE}else{this.z=b}this.zinv=null}function pointFpGetX(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q))}function pointFpGetY(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q))}function pointFpEquals(a){if(a==this){return true}if(this.isInfinity()){return a.isInfinity()}if(a.isInfinity()){return this.isInfinity()}var c,b;c=a.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(a.z)).mod(this.curve.q);if(!c.equals(BigInteger.ZERO)){return false}b=a.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(a.z)).mod(this.curve.q);return b.equals(BigInteger.ZERO)}function pointFpIsInfinity(){if((this.x==null)&&(this.y==null)){return true}return this.z.equals(BigInteger.ZERO)&&!this.y.toBigInteger().equals(BigInteger.ZERO)}function pointFpNegate(){return new ECPointFp(this.curve,this.x,this.y.negate(),this.z)}function pointFpAdd(l){if(this.isInfinity()){return l}if(l.isInfinity()){return this}var p=l.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(l.z)).mod(this.curve.q);var o=l.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(l.z)).mod(this.curve.q);if(BigInteger.ZERO.equals(o)){if(BigInteger.ZERO.equals(p)){return this.twice()}return this.curve.getInfinity()}var j=new BigInteger("3");var e=this.x.toBigInteger();var n=this.y.toBigInteger();var c=l.x.toBigInteger();var k=l.y.toBigInteger();var m=o.square();var i=m.multiply(o);var d=e.multiply(m);var g=p.square().multiply(this.z);var a=g.subtract(d.shiftLeft(1)).multiply(l.z).subtract(i).multiply(o).mod(this.curve.q);var h=d.multiply(j).multiply(p).subtract(n.multiply(i)).subtract(g.multiply(p)).multiply(l.z).add(p.multiply(i)).mod(this.curve.q);var f=i.multiply(this.z).multiply(l.z).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(a),this.curve.fromBigInteger(h),f)}function pointFpTwice(){if(this.isInfinity()){return this}if(this.y.toBigInteger().signum()==0){return this.curve.getInfinity()}var g=new BigInteger("3");var c=this.x.toBigInteger();var h=this.y.toBigInteger();var e=h.multiply(this.z);var j=e.multiply(h).mod(this.curve.q);var i=this.curve.a.toBigInteger();var k=c.square().multiply(g);if(!BigInteger.ZERO.equals(i)){k=k.add(this.z.square().multiply(i))}k=k.mod(this.curve.q);var b=k.square().subtract(c.shiftLeft(3).multiply(j)).shiftLeft(1).multiply(e).mod(this.curve.q);var f=k.multiply(g).multiply(c).subtract(j.shiftLeft(1)).shiftLeft(2).multiply(j).subtract(k.square().multiply(k)).mod(this.curve.q);var d=e.square().multiply(e).shiftLeft(3).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(b),this.curve.fromBigInteger(f),d)}function pointFpMultiply(d){if(this.isInfinity()){return this}if(d.signum()==0){return this.curve.getInfinity()}var m=d;var l=m.multiply(new BigInteger("3"));var b=this.negate();var j=this;var q=this.curve.q.subtract(d);var o=q.multiply(new BigInteger("3"));var c=new ECPointFp(this.curve,this.x,this.y);var a=c.negate();var g;for(g=l.bitLength()-2;g>0;--g){j=j.twice();var n=l.testBit(g);var f=m.testBit(g);if(n!=f){j=j.add(n?this:b)}}for(g=o.bitLength()-2;g>0;--g){c=c.twice();var p=o.testBit(g);var r=q.testBit(g);if(p!=r){c=c.add(p?c:a)}}return j}function pointFpMultiplyTwo(c,a,b){var d;if(c.bitLength()>b.bitLength()){d=c.bitLength()-1}else{d=b.bitLength()-1}var f=this.curve.getInfinity();var e=this.add(a);while(d>=0){f=f.twice();if(c.testBit(d)){if(b.testBit(d)){f=f.add(e)}else{f=f.add(this)}}else{if(b.testBit(d)){f=f.add(a)}}--d}return f}ECPointFp.prototype.getX=pointFpGetX;ECPointFp.prototype.getY=pointFpGetY;ECPointFp.prototype.equals=pointFpEquals;ECPointFp.prototype.isInfinity=pointFpIsInfinity;ECPointFp.prototype.negate=pointFpNegate;ECPointFp.prototype.add=pointFpAdd;ECPointFp.prototype.twice=pointFpTwice;ECPointFp.prototype.multiply=pointFpMultiply;ECPointFp.prototype.multiplyTwo=pointFpMultiplyTwo;function ECCurveFp(e,d,c){this.q=e;this.a=this.fromBigInteger(d);this.b=this.fromBigInteger(c);this.infinity=new ECPointFp(this,null,null)}function curveFpGetQ(){return this.q}function curveFpGetA(){return this.a}function curveFpGetB(){return this.b}function curveFpEquals(a){if(a==this){return true}return(this.q.equals(a.q)&&this.a.equals(a.a)&&this.b.equals(a.b))}function curveFpGetInfinity(){return this.infinity}function curveFpFromBigInteger(a){return new ECFieldElementFp(this.q,a)}function curveFpDecodePointHex(m){switch(parseInt(m.substr(0,2),16)){case 0:return this.infinity;case 2:case 3:var c=m.substr(0,2);var l=m.substr(2);var j=this.fromBigInteger(new BigInteger(k,16));var i=this.getA();var h=this.getB();var e=j.square().add(i).multiply(j).add(h);var g=e.sqrt();if(c=="03"){g=g.negate()}return new ECPointFp(this,j,g);case 4:case 6:case 7:var d=(m.length-2)/2;var k=m.substr(2,d);var f=m.substr(d+2,d);return new ECPointFp(this,this.fromBigInteger(new BigInteger(k,16)),this.fromBigInteger(new BigInteger(f,16)));default:return null}}ECCurveFp.prototype.getQ=curveFpGetQ;ECCurveFp.prototype.getA=curveFpGetA;ECCurveFp.prototype.getB=curveFpGetB;ECCurveFp.prototype.equals=curveFpEquals;ECCurveFp.prototype.getInfinity=curveFpGetInfinity;ECCurveFp.prototype.fromBigInteger=curveFpFromBigInteger;ECCurveFp.prototype.decodePointHex=curveFpDecodePointHex;
/*! (c) Stefan Thomas | https://github.com/bitcoinjs/bitcoinjs-lib
 */
ECFieldElementFp.prototype.getByteLength=function(){return Math.floor((this.toBigInteger().bitLength()+7)/8)};ECPointFp.prototype.getEncoded=function(c){var d=function(h,f){var g=h.toByteArrayUnsigned();if(f<g.length){g=g.slice(g.length-f)}else{while(f>g.length){g.unshift(0)}}return g};var a=this.getX().toBigInteger();var e=this.getY().toBigInteger();var b=d(a,32);if(c){if(e.isEven()){b.unshift(2)}else{b.unshift(3)}}else{b.unshift(4);b=b.concat(d(e,32))}return b};ECPointFp.decodeFrom=function(g,c){var f=c[0];var e=c.length-1;var d=c.slice(1,1+e/2);var b=c.slice(1+e/2,1+e);d.unshift(0);b.unshift(0);var a=new BigInteger(d);var h=new BigInteger(b);return new ECPointFp(g,g.fromBigInteger(a),g.fromBigInteger(h))};ECPointFp.decodeFromHex=function(g,c){var f=c.substr(0,2);var e=c.length-2;var d=c.substr(2,e/2);var b=c.substr(2+e/2,e/2);var a=new BigInteger(d,16);var h=new BigInteger(b,16);return new ECPointFp(g,g.fromBigInteger(a),g.fromBigInteger(h))};ECPointFp.prototype.add2D=function(c){if(this.isInfinity()){return c}if(c.isInfinity()){return this}if(this.x.equals(c.x)){if(this.y.equals(c.y)){return this.twice()}return this.curve.getInfinity()}var g=c.x.subtract(this.x);var e=c.y.subtract(this.y);var a=e.divide(g);var d=a.square().subtract(this.x).subtract(c.x);var f=a.multiply(this.x.subtract(d)).subtract(this.y);return new ECPointFp(this.curve,d,f)};ECPointFp.prototype.twice2D=function(){if(this.isInfinity()){return this}if(this.y.toBigInteger().signum()==0){return this.curve.getInfinity()}var b=this.curve.fromBigInteger(BigInteger.valueOf(2));var e=this.curve.fromBigInteger(BigInteger.valueOf(3));var a=this.x.square().multiply(e).add(this.curve.a).divide(this.y.multiply(b));var c=a.square().subtract(this.x.multiply(b));var d=a.multiply(this.x.subtract(c)).subtract(this.y);return new ECPointFp(this.curve,c,d)};ECPointFp.prototype.multiply2D=function(b){if(this.isInfinity()){return this}if(b.signum()==0){return this.curve.getInfinity()}var g=b;var f=g.multiply(new BigInteger("3"));var l=this.negate();var d=this;var c;for(c=f.bitLength()-2;c>0;--c){d=d.twice();var a=f.testBit(c);var j=g.testBit(c);if(a!=j){d=d.add2D(a?this:l)}}return d};ECPointFp.prototype.isOnCurve=function(){var d=this.getX().toBigInteger();var i=this.getY().toBigInteger();var f=this.curve.getA().toBigInteger();var c=this.curve.getB().toBigInteger();var h=this.curve.getQ();var e=i.multiply(i).mod(h);var g=d.multiply(d).multiply(d).add(f.multiply(d)).add(c).mod(h);return e.equals(g)};ECPointFp.prototype.toString=function(){return"("+this.getX().toBigInteger().toString()+","+this.getY().toBigInteger().toString()+")"};ECPointFp.prototype.validate=function(){var c=this.curve.getQ();if(this.isInfinity()){throw new Error("Point is at infinity.")}var a=this.getX().toBigInteger();var b=this.getY().toBigInteger();if(a.compareTo(BigInteger.ONE)<0||a.compareTo(c.subtract(BigInteger.ONE))>0){throw new Error("x coordinate out of bounds")}if(b.compareTo(BigInteger.ONE)<0||b.compareTo(c.subtract(BigInteger.ONE))>0){throw new Error("y coordinate out of bounds")}if(!this.isOnCurve()){throw new Error("Point is not on the curve.")}if(this.multiply(c).isInfinity()){throw new Error("Point is not a scalar multiple of G.")}return true};
/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
 */
var jsonParse=(function(){var e="(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)";var j='(?:[^\\0-\\x08\\x0a-\\x1f"\\\\]|\\\\(?:["/\\\\bfnrt]|u[0-9A-Fa-f]{4}))';var i='(?:"'+j+'*")';var d=new RegExp("(?:false|true|null|[\\{\\}\\[\\]]|"+e+"|"+i+")","g");var k=new RegExp("\\\\(?:([^u])|u(.{4}))","g");var g={'"':'"',"/":"/","\\":"\\",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"};function h(l,m,n){return m?g[m]:String.fromCharCode(parseInt(n,16))}var c=new String("");var a="\\";var f={"{":Object,"[":Array};var b=Object.hasOwnProperty;return function(u,q){var p=u.match(d);var x;var v=p[0];var l=false;if("{"===v){x={}}else{if("["===v){x=[]}else{x=[];l=true}}var t;var r=[x];for(var o=1-l,m=p.length;o<m;++o){v=p[o];var w;switch(v.charCodeAt(0)){default:w=r[0];w[t||w.length]=+(v);t=void 0;break;case 34:v=v.substring(1,v.length-1);if(v.indexOf(a)!==-1){v=v.replace(k,h)}w=r[0];if(!t){if(w instanceof Array){t=w.length}else{t=v||c;break}}w[t]=v;t=void 0;break;case 91:w=r[0];r.unshift(w[t||w.length]=[]);t=void 0;break;case 93:r.shift();break;case 102:w=r[0];w[t||w.length]=false;t=void 0;break;case 110:w=r[0];w[t||w.length]=null;t=void 0;break;case 116:w=r[0];w[t||w.length]=true;t=void 0;break;case 123:w=r[0];r.unshift(w[t||w.length]={});t=void 0;break;case 125:r.shift();break}}if(l){if(r.length!==1){throw new Error()}x=x[0]}else{if(r.length){throw new Error()}}if(q){var s=function(C,B){var D=C[B];if(D&&typeof D==="object"){var n=null;for(var z in D){if(b.call(D,z)&&D!==C){var y=s(D,z);if(y!==void 0){D[z]=y}else{if(!n){n=[]}n.push(z)}}}if(n){for(var A=n.length;--A>=0;){delete D[n[A]]}}}return q.call(C,B,D)};x=s({"":x},"")}return x}})();
if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}KJUR.asn1.ASN1Util=new function(){this.integerToByteHex=function(a){var b=a.toString(16);if((b.length%2)==1){b="0"+b}return b};this.bigIntToMinTwosComplementsHex=function(a){return twoscompl(a)};this.getPEMStringFromHex=function(a,b){return hextopem(a,b)};this.newObject=function(k){var F=KJUR,o=F.asn1,v=o.ASN1Object,B=o.DERBoolean,e=o.DERInteger,t=o.DERBitString,h=o.DEROctetString,x=o.DERNull,y=o.DERObjectIdentifier,m=o.DEREnumerated,g=o.DERUTF8String,f=o.DERNumericString,A=o.DERPrintableString,w=o.DERTeletexString,q=o.DERIA5String,E=o.DERUTCTime,j=o.DERGeneralizedTime,b=o.DERVisibleString,l=o.DERBMPString,n=o.DERSequence,c=o.DERSet,s=o.DERTaggedObject,p=o.ASN1Util.newObject;if(k instanceof o.ASN1Object){return k}var u=Object.keys(k);if(u.length!=1){throw new Error("key of param shall be only one.")}var H=u[0];if(":asn1:bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:visstr:bmpstr:seq:set:tag:".indexOf(":"+H+":")==-1){throw new Error("undefined key: "+H)}if(H=="bool"){return new B(k[H])}if(H=="int"){return new e(k[H])}if(H=="bitstr"){return new t(k[H])}if(H=="octstr"){return new h(k[H])}if(H=="null"){return new x(k[H])}if(H=="oid"){return new y(k[H])}if(H=="enum"){return new m(k[H])}if(H=="utf8str"){return new g(k[H])}if(H=="numstr"){return new f(k[H])}if(H=="prnstr"){return new A(k[H])}if(H=="telstr"){return new w(k[H])}if(H=="ia5str"){return new q(k[H])}if(H=="utctime"){return new E(k[H])}if(H=="gentime"){return new j(k[H])}if(H=="visstr"){return new b(k[H])}if(H=="bmpstr"){return new l(k[H])}if(H=="asn1"){return new v(k[H])}if(H=="seq"){var d=k[H];var G=[];for(var z=0;z<d.length;z++){var D=p(d[z]);G.push(D)}return new n({array:G})}if(H=="set"){var d=k[H];var G=[];for(var z=0;z<d.length;z++){var D=p(d[z]);G.push(D)}return new c({array:G})}if(H=="tag"){var C=k[H];if(Object.prototype.toString.call(C)==="[object Array]"&&C.length==3){var r=p(C[2]);return new s({tag:C[0],explicit:C[1],obj:r})}else{return new s(C)}}};this.jsonToASN1HEX=function(b){var a=this.newObject(b);return a.tohex()}};KJUR.asn1.ASN1Util.oidHexToInt=function(a){var j="";var k=parseInt(a.substr(0,2),16);var d=Math.floor(k/40);var c=k%40;var j=d+"."+c;var e="";for(var f=2;f<a.length;f+=2){var g=parseInt(a.substr(f,2),16);var h=("00000000"+g.toString(2)).slice(-8);e=e+h.substr(1,7);if(h.substr(0,1)=="0"){var b=new BigInteger(e,2);j=j+"."+b.toString(10);e=""}}return j};KJUR.asn1.ASN1Util.oidIntToHex=function(f){var e=function(a){var k=a.toString(16);if(k.length==1){k="0"+k}return k};var d=function(o){var n="";var k=new BigInteger(o,10);var a=k.toString(2);var l=7-a.length%7;if(l==7){l=0}var q="";for(var m=0;m<l;m++){q+="0"}a=q+a;for(var m=0;m<a.length-1;m+=7){var p=a.substr(m,7);if(m!=a.length-7){p="1"+p}n+=e(parseInt(p,2))}return n};if(!f.match(/^[0-9.]+$/)){throw"malformed oid string: "+f}var g="";var b=f.split(".");var j=parseInt(b[0])*40+parseInt(b[1]);g+=e(j);b.splice(0,2);for(var c=0;c<b.length;c++){g+=d(b[c])}return g};KJUR.asn1.ASN1Object=function(e){var c=true;var b=null;var d="00";var f="00";var a="";this.params=null;this.getLengthHexFromValue=function(){if(typeof this.hV=="undefined"||this.hV==null){throw new Error("this.hV is null or undefined")}if(this.hV.length%2==1){throw new Error("value hex must be even length: n="+a.length+",v="+this.hV)}var j=this.hV.length/2;var i=j.toString(16);if(i.length%2==1){i="0"+i}if(j<128){return i}else{var h=i.length/2;if(h>15){throw new Error("ASN.1 length too long to represent by 8x: n = "+j.toString(16))}var g=128+h;return g.toString(16)+i}};this.tohex=function(){if(this.hTLV==null||this.isModified){this.hV=this.getFreshValueHex();this.hL=this.getLengthHexFromValue();this.hTLV=this.hT+this.hL+this.hV;this.isModified=false}return this.hTLV};this.getEncodedHex=function(){return this.tohex()};this.getValueHex=function(){this.tohex();return this.hV};this.getFreshValueHex=function(){return""};this.setByParam=function(g){this.params=g};if(e!=undefined){if(e.tlv!=undefined){this.hTLV=e.tlv;this.isModified=false}}};KJUR.asn1.DERAbstractString=function(c){KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var b=null;var a=null;this.getString=function(){return this.s};this.setString=function(d){this.hTLV=null;this.isModified=true;this.s=d;this.hV=utf8tohex(this.s).toLowerCase()};this.setStringHex=function(d){this.hTLV=null;this.isModified=true;this.s=null;this.hV=d};this.getFreshValueHex=function(){return this.hV};if(typeof c!="undefined"){if(typeof c=="string"){this.setString(c)}else{if(typeof c.str!="undefined"){this.setString(c.str)}else{if(typeof c.hex!="undefined"){this.setStringHex(c.hex)}}}}};extendClass(KJUR.asn1.DERAbstractString,KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractTime=function(c){KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);var b=null;var a=null;this.localDateToUTC=function(g){var e=g.getTime()+(g.getTimezoneOffset()*60000);var f=new Date(e);return f};this.formatDate=function(m,o,e){var g=this.zeroPadding;var n=this.localDateToUTC(m);var p=String(n.getFullYear());if(o=="utc"){p=p.substr(2,2)}var l=g(String(n.getMonth()+1),2);var q=g(String(n.getDate()),2);var h=g(String(n.getHours()),2);var i=g(String(n.getMinutes()),2);var j=g(String(n.getSeconds()),2);var r=p+l+q+h+i+j;if(e===true){var f=n.getMilliseconds();if(f!=0){var k=g(String(f),3);k=k.replace(/[0]+$/,"");r=r+"."+k}}return r+"Z"};this.zeroPadding=function(e,d){if(e.length>=d){return e}return new Array(d-e.length+1).join("0")+e};this.setByParam=function(d){this.hV=null;this.hTLV=null;this.params=d};this.getString=function(){return undefined};this.setString=function(d){this.hTLV=null;this.isModified=true;if(this.params==undefined){this.params={}}this.params.str=d};this.setByDate=function(d){this.hTLV=null;this.isModified=true;if(this.params==undefined){this.params={}}this.params.date=d};this.setByDateValue=function(h,j,e,d,f,g){var i=new Date(Date.UTC(h,j-1,e,d,f,g,0));this.setByDate(i)};this.getFreshValueHex=function(){return this.hV}};extendClass(KJUR.asn1.DERAbstractTime,KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractStructured=function(b){KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var a=null;this.setByASN1ObjectArray=function(c){this.hTLV=null;this.isModified=true;this.asn1Array=c};this.appendASN1Object=function(c){this.hTLV=null;this.isModified=true;this.asn1Array.push(c)};this.asn1Array=new Array();if(typeof b!="undefined"){if(typeof b.array!="undefined"){this.asn1Array=b.array}}};extendClass(KJUR.asn1.DERAbstractStructured,KJUR.asn1.ASN1Object);KJUR.asn1.DERBoolean=function(a){KJUR.asn1.DERBoolean.superclass.constructor.call(this);this.hT="01";if(a==false){this.hTLV="010100"}else{this.hTLV="0101ff"}};extendClass(KJUR.asn1.DERBoolean,KJUR.asn1.ASN1Object);KJUR.asn1.DERInteger=function(b){KJUR.asn1.DERInteger.superclass.constructor.call(this);this.hT="02";this.params=null;var a=twoscompl;this.setByBigInteger=function(c){this.isModified=true;this.params={bigint:c}};this.setByInteger=function(c){this.isModified=true;this.params=c};this.setValueHex=function(c){this.isModified=true;this.params={hex:c}};this.getFreshValueHex=function(){var d=this.params;var c=null;if(d==null){throw new Error("value not set")}if(typeof d=="object"&&d.hex!=undefined){this.hV=d.hex;return this.hV}if(typeof d=="number"){c=new BigInteger(String(d),10)}else{if(d["int"]!=undefined){c=new BigInteger(String(d["int"]),10)}else{if(d.bigint!=undefined){c=d.bigint}else{throw new Error("wrong parameter")}}}this.hV=a(c);return this.hV};if(b!=undefined){this.params=b}};extendClass(KJUR.asn1.DERInteger,KJUR.asn1.ASN1Object);KJUR.asn1.DERBitString=function(b){if(b!==undefined&&typeof b.obj!=="undefined"){var a=KJUR.asn1.ASN1Util.newObject(b.obj);b.hex="00"+a.tohex()}KJUR.asn1.DERBitString.superclass.constructor.call(this);this.hT="03";this.setHexValueIncludingUnusedBits=function(c){this.hTLV=null;this.isModified=true;this.hV=c};this.setUnusedBitsAndHexValue=function(c,e){if(c<0||7<c){throw"unused bits shall be from 0 to 7: u = "+c}var d="0"+c;this.hTLV=null;this.isModified=true;this.hV=d+e};this.setByBinaryString=function(e){e=e.replace(/0+$/,"");var f=8-e.length%8;if(f==8){f=0}e+="0000000".substr(0,f);var j="";for(var g=0;g<e.length-1;g+=8){var d=e.substr(g,8);var c=parseInt(d,2).toString(16);if(c.length==1){c="0"+c}j+=c}this.hTLV=null;this.isModified=true;this.hV="0"+f+j};this.setByBooleanArray=function(e){var d="";for(var c=0;c<e.length;c++){if(e[c]==true){d+="1"}else{d+="0"}}this.setByBinaryString(d)};this.newFalseArray=function(e){var c=new Array(e);for(var d=0;d<e;d++){c[d]=false}return c};this.getFreshValueHex=function(){return this.hV};if(typeof b!="undefined"){if(typeof b=="string"&&b.toLowerCase().match(/^[0-9a-f]+$/)){this.setHexValueIncludingUnusedBits(b)}else{if(typeof b.hex!="undefined"){this.setHexValueIncludingUnusedBits(b.hex)}else{if(typeof b.bin!="undefined"){this.setByBinaryString(b.bin)}else{if(typeof b.array!="undefined"){this.setByBooleanArray(b.array)}}}}}};extendClass(KJUR.asn1.DERBitString,KJUR.asn1.ASN1Object);KJUR.asn1.DEROctetString=function(b){if(b!==undefined&&typeof b.obj!=="undefined"){var a=KJUR.asn1.ASN1Util.newObject(b.obj);b.hex=a.tohex()}KJUR.asn1.DEROctetString.superclass.constructor.call(this,b);this.hT="04"};extendClass(KJUR.asn1.DEROctetString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERNull=function(){KJUR.asn1.DERNull.superclass.constructor.call(this);this.hT="05";this.hTLV="0500"};extendClass(KJUR.asn1.DERNull,KJUR.asn1.ASN1Object);KJUR.asn1.DERObjectIdentifier=function(a){KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this);this.hT="06";this.setValueHex=function(b){this.hTLV=null;this.isModified=true;this.s=null;this.hV=b};this.setValueOidString=function(b){var c=oidtohex(b);if(c==null){throw new Error("malformed oid string: "+b)}this.hTLV=null;this.isModified=true;this.s=null;this.hV=c};this.setValueName=function(c){var b=KJUR.asn1.x509.OID.name2oid(c);if(b!==""){this.setValueOidString(b)}else{throw new Error("DERObjectIdentifier oidName undefined: "+c)}};this.setValueNameOrOid=function(b){if(b.match(/^[0-2].[0-9.]+$/)){this.setValueOidString(b)}else{this.setValueName(b)}};this.getFreshValueHex=function(){return this.hV};this.setByParam=function(b){if(typeof b==="string"){this.setValueNameOrOid(b)}else{if(b.oid!==undefined){this.setValueNameOrOid(b.oid)}else{if(b.name!==undefined){this.setValueNameOrOid(b.name)}else{if(b.hex!==undefined){this.setValueHex(b.hex)}}}}};if(a!==undefined){this.setByParam(a)}};extendClass(KJUR.asn1.DERObjectIdentifier,KJUR.asn1.ASN1Object);KJUR.asn1.DEREnumerated=function(a){KJUR.asn1.DEREnumerated.superclass.constructor.call(this);this.hT="0a";this.setByBigInteger=function(b){this.hTLV=null;this.isModified=true;this.hV=twoscompl(b)};this.setByInteger=function(c){var b=new BigInteger(String(c),10);this.setByBigInteger(b)};this.setValueHex=function(b){this.hV=b};this.getFreshValueHex=function(){return this.hV};if(typeof a!="undefined"){if(typeof a["int"]!="undefined"){this.setByInteger(a["int"])}else{if(typeof a=="number"){this.setByInteger(a)}else{if(typeof a.hex!="undefined"){this.setValueHex(a.hex)}}}}};extendClass(KJUR.asn1.DEREnumerated,KJUR.asn1.ASN1Object);KJUR.asn1.DERUTF8String=function(a){KJUR.asn1.DERUTF8String.superclass.constructor.call(this,a);this.hT="0c"};extendClass(KJUR.asn1.DERUTF8String,KJUR.asn1.DERAbstractString);KJUR.asn1.DERNumericString=function(a){KJUR.asn1.DERNumericString.superclass.constructor.call(this,a);this.hT="12"};extendClass(KJUR.asn1.DERNumericString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERPrintableString=function(a){KJUR.asn1.DERPrintableString.superclass.constructor.call(this,a);this.hT="13"};extendClass(KJUR.asn1.DERPrintableString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERTeletexString=function(a){KJUR.asn1.DERTeletexString.superclass.constructor.call(this,a);this.hT="14"};extendClass(KJUR.asn1.DERTeletexString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERIA5String=function(a){KJUR.asn1.DERIA5String.superclass.constructor.call(this,a);this.hT="16"};extendClass(KJUR.asn1.DERIA5String,KJUR.asn1.DERAbstractString);KJUR.asn1.DERVisibleString=function(a){KJUR.asn1.DERIA5String.superclass.constructor.call(this,a);this.hT="1a"};extendClass(KJUR.asn1.DERVisibleString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERBMPString=function(a){KJUR.asn1.DERBMPString.superclass.constructor.call(this,a);this.hT="1e"};extendClass(KJUR.asn1.DERBMPString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERUTCTime=function(a){KJUR.asn1.DERUTCTime.superclass.constructor.call(this,a);this.hT="17";this.params=undefined;this.getFreshValueHex=function(){var d=this.params;if(this.params==undefined){d={date:new Date()}}if(typeof d=="string"){if(d.match(/^[0-9]{12}Z$/)||d.match(/^[0-9]{12}\.[0-9]+Z$/)){this.hV=stohex(d)}else{throw new Error("malformed string for UTCTime: "+d)}}else{if(d.str!=undefined){this.hV=stohex(d.str)}else{if(d.date==undefined&&d.millis==true){var c=new Date();this.hV=stohex(this.formatDate(c,"utc",true))}else{if(d.date!=undefined&&d.date instanceof Date){var b=(d.millis===true);this.hV=stohex(this.formatDate(d.date,"utc",b))}else{if(d instanceof Date){this.hV=stohex(this.formatDate(d,"utc"))}}}}}if(this.hV==undefined){throw new Error("parameter not specified properly for UTCTime")}return this.hV};if(a!=undefined){this.setByParam(a)}};extendClass(KJUR.asn1.DERUTCTime,KJUR.asn1.DERAbstractTime);KJUR.asn1.DERGeneralizedTime=function(a){KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this,a);this.hT="18";this.params=a;this.getFreshValueHex=function(){var d=this.params;if(this.params==undefined){d={date:new Date()}}if(typeof d=="string"){if(d.match(/^[0-9]{14}Z$/)||d.match(/^[0-9]{14}\.[0-9]+Z$/)){this.hV=stohex(d)}else{throw new Error("malformed string for GeneralizedTime: "+d)}}else{if(d.str!=undefined){this.hV=stohex(d.str)}else{if(d.date==undefined&&d.millis==true){var c=new Date();this.hV=stohex(this.formatDate(c,"gen",true))}else{if(d.date!=undefined&&d.date instanceof Date){var b=(d.millis===true);this.hV=stohex(this.formatDate(d.date,"gen",b))}else{if(d instanceof Date){this.hV=stohex(this.formatDate(d,"gen"))}}}}}if(this.hV==undefined){throw new Error("parameter not specified properly for GeneralizedTime")}return this.hV};if(a!=undefined){this.setByParam(a)}};extendClass(KJUR.asn1.DERGeneralizedTime,KJUR.asn1.DERAbstractTime);KJUR.asn1.DERSequence=function(a){KJUR.asn1.DERSequence.superclass.constructor.call(this,a);this.hT="30";this.getFreshValueHex=function(){var c="";for(var b=0;b<this.asn1Array.length;b++){var d=this.asn1Array[b];c+=d.tohex()}this.hV=c;return this.hV}};extendClass(KJUR.asn1.DERSequence,KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERSet=function(a){KJUR.asn1.DERSet.superclass.constructor.call(this,a);this.hT="31";this.sortFlag=true;this.getFreshValueHex=function(){var b=new Array();for(var c=0;c<this.asn1Array.length;c++){var d=this.asn1Array[c];b.push(d.tohex())}if(this.sortFlag==true){b.sort()}this.hV=b.join("");return this.hV};if(typeof a!="undefined"){if(typeof a.sortflag!="undefined"&&a.sortflag==false){this.sortFlag=false}}};extendClass(KJUR.asn1.DERSet,KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERTaggedObject=function(f){KJUR.asn1.DERTaggedObject.superclass.constructor.call(this);var d=KJUR.asn1,e=ASN1HEX,a=e.getV,c=e.isASN1HEX,b=d.ASN1Util.newObject;this.hT="a0";this.hV="";this.isExplicit=true;this.asn1Object=null;this.params={tag:"a0",explicit:true};this.setASN1Object=function(g,h,i){this.params={tag:h,explicit:g,obj:i}};this.getFreshValueHex=function(){var h=this.params;if(h.explicit==undefined){h.explicit=true}if(h.tage!=undefined){h.tag=h.tage;h.explicit=true}if(h.tagi!=undefined){h.tag=h.tagi;h.explicit=false}if(h.str!=undefined){this.hV=utf8tohex(h.str)}else{if(h.hex!=undefined){this.hV=h.hex}else{if(h.obj!=undefined){var g;if(h.obj instanceof d.ASN1Object){g=h.obj.tohex()}else{if(typeof h.obj=="object"){g=b(h.obj).tohex()}}if(h.explicit){this.hV=g}else{this.hV=a(g,0)}}else{throw new Error("str, hex nor obj not specified")}}}if(h.tag==undefined){h.tag="a0"}this.hT=h.tag;this.hTLV=null;this.isModified=true;return this.hV};this.setByParam=function(g){this.params=g};if(f!==undefined){this.setByParam(f)}};extendClass(KJUR.asn1.DERTaggedObject,KJUR.asn1.ASN1Object);
var ASN1HEX=new function(){};ASN1HEX.getLblen=function(c,a){if(c.substr(a+2,1)!="8"){return 1}var b=parseInt(c.substr(a+3,1));if(b==0){return -1}if(0<b&&b<10){return b+1}return -2};ASN1HEX.getL=function(c,b){var a=ASN1HEX.getLblen(c,b);if(a<1){return""}return c.substr(b+2,a*2)};ASN1HEX.getVblen=function(d,a){var c,b;c=ASN1HEX.getL(d,a);if(c==""){return -1}if(c.substr(0,1)==="8"){b=new BigInteger(c.substr(2),16)}else{b=new BigInteger(c,16)}return b.intValue()};ASN1HEX.getVidx=function(c,b){var a=ASN1HEX.getLblen(c,b);if(a<0){return a}return b+(a+1)*2};ASN1HEX.getV=function(d,a){var c=ASN1HEX.getVidx(d,a);var b=ASN1HEX.getVblen(d,a);return d.substr(c,b*2)};ASN1HEX.getTLV=function(b,a){return b.substr(a,2)+ASN1HEX.getL(b,a)+ASN1HEX.getV(b,a)};ASN1HEX.getTLVblen=function(b,a){return 2+ASN1HEX.getLblen(b,a)*2+ASN1HEX.getVblen(b,a)*2};ASN1HEX.getNextSiblingIdx=function(d,a){var c=ASN1HEX.getVidx(d,a);var b=ASN1HEX.getVblen(d,a);return c+b*2};ASN1HEX.getChildIdx=function(e,k){var l=ASN1HEX;var j=[];var c,f,g;c=l.getVidx(e,k);f=l.getVblen(e,k)*2;if(e.substr(k,2)=="03"){c+=2;f-=2}g=0;var d=c;while(g<=f){var b=l.getTLVblen(e,d);g+=b;if(g<=f){j.push(d)}d+=b;if(g>=f){break}}return j};ASN1HEX.getNthChildIdx=function(d,b,e){var c=ASN1HEX.getChildIdx(d,b);return c[e]};ASN1HEX.getIdxbyList=function(e,d,c,i){var g=ASN1HEX;var f,b;if(c.length==0){if(i!==undefined){if(e.substr(d,2)!==i){return -1}}return d}f=c.shift();b=g.getChildIdx(e,d);if(f>=b.length){return -1}return g.getIdxbyList(e,b[f],c,i)};ASN1HEX.getIdxbyListEx=function(f,k,b,g){var m=ASN1HEX;var d,l;if(b.length==0){if(g!==undefined){if(f.substr(k,2)!==g){return -1}}return k}d=b.shift();l=m.getChildIdx(f,k);var j=0;for(var e=0;e<l.length;e++){var c=f.substr(l[e],2);if((typeof d=="number"&&(!m.isContextTag(c))&&j==d)||(typeof d=="string"&&m.isContextTag(c,d))){return m.getIdxbyListEx(f,l[e],b,g)}if(!m.isContextTag(c)){j++}}return -1};ASN1HEX.getTLVbyList=function(d,c,b,f){var e=ASN1HEX;var a=e.getIdxbyList(d,c,b,f);if(a==-1){return null}if(a>=d.length){return null}return e.getTLV(d,a)};ASN1HEX.getTLVbyListEx=function(d,c,b,f){var e=ASN1HEX;var a=e.getIdxbyListEx(d,c,b,f);if(a==-1){return null}return e.getTLV(d,a)};ASN1HEX.getVbyList=function(e,c,b,g,i){var f=ASN1HEX;var a,d;a=f.getIdxbyList(e,c,b,g);if(a==-1){return null}if(a>=e.length){return null}d=f.getV(e,a);if(i===true){d=d.substr(2)}return d};ASN1HEX.getVbyListEx=function(b,e,a,d,f){var j=ASN1HEX;var g,c,i;g=j.getIdxbyListEx(b,e,a,d);if(g==-1){return null}i=j.getV(b,g);if(b.substr(g,2)=="03"&&f!==false){i=i.substr(2)}return i};ASN1HEX.getInt=function(e,b,f){if(f==undefined){f=-1}try{var c=e.substr(b,2);if(c!="02"&&c!="03"){return f}var a=ASN1HEX.getV(e,b);if(c=="02"){return parseInt(a,16)}else{return bitstrtoint(a)}}catch(d){return f}};ASN1HEX.getOID=function(c,a,d){if(d==undefined){d=null}try{if(c.substr(a,2)!="06"){return d}var e=ASN1HEX.getV(c,a);return hextooid(e)}catch(b){return d}};ASN1HEX.getOIDName=function(d,a,f){if(f==undefined){f=null}try{var e=ASN1HEX.getOID(d,a,f);if(e==f){return f}var b=KJUR.asn1.x509.OID.oid2name(e);if(b==""){return e}return b}catch(c){return f}};ASN1HEX.getString=function(d,b,e){if(e==undefined){e=null}try{var a=ASN1HEX.getV(d,b);return hextorstr(a)}catch(c){return e}};ASN1HEX.hextooidstr=function(e){var h=function(b,a){if(b.length>=a){return b}return new Array(a-b.length+1).join("0")+b};var l=[];var o=e.substr(0,2);var f=parseInt(o,16);l[0]=new String(Math.floor(f/40));l[1]=new String(f%40);var m=e.substr(2);var k=[];for(var g=0;g<m.length/2;g++){k.push(parseInt(m.substr(g*2,2),16))}var j=[];var d="";for(var g=0;g<k.length;g++){if(k[g]&128){d=d+h((k[g]&127).toString(2),7)}else{d=d+h((k[g]&127).toString(2),7);j.push(new String(parseInt(d,2)));d=""}}var n=l.join(".");if(j.length>0){n=n+"."+j.join(".")}return n};ASN1HEX.dump=function(t,c,l,g){var p=ASN1HEX;var j=p.getV;var y=p.dump;var w=p.getChildIdx;var e=t;if(t instanceof KJUR.asn1.ASN1Object){e=t.tohex()}var q=function(A,i){if(A.length<=i*2){return A}else{var v=A.substr(0,i)+"..(total "+A.length/2+"bytes).."+A.substr(A.length-i,i);return v}};if(c===undefined){c={ommit_long_octet:32}}if(l===undefined){l=0}if(g===undefined){g=""}var x=c.ommit_long_octet;var z=e.substr(l,2);if(z=="01"){var h=j(e,l);if(h=="00"){return g+"BOOLEAN FALSE\n"}else{return g+"BOOLEAN TRUE\n"}}if(z=="02"){var h=j(e,l);return g+"INTEGER "+q(h,x)+"\n"}if(z=="03"){var h=j(e,l);if(p.isASN1HEX(h.substr(2))){var k=g+"BITSTRING, encapsulates\n";k=k+y(h.substr(2),c,0,g+"  ");return k}else{return g+"BITSTRING "+q(h,x)+"\n"}}if(z=="04"){var h=j(e,l);if(p.isASN1HEX(h)){var k=g+"OCTETSTRING, encapsulates\n";k=k+y(h,c,0,g+"  ");return k}else{return g+"OCTETSTRING "+q(h,x)+"\n"}}if(z=="05"){return g+"NULL\n"}if(z=="06"){var m=j(e,l);var b=KJUR.asn1.ASN1Util.oidHexToInt(m);var o=KJUR.asn1.x509.OID.oid2name(b);var a=b.replace(/\./g," ");if(o!=""){return g+"ObjectIdentifier "+o+" ("+a+")\n"}else{return g+"ObjectIdentifier ("+a+")\n"}}if(z=="0a"){return g+"ENUMERATED "+parseInt(j(e,l))+"\n"}if(z=="0c"){return g+"UTF8String '"+hextoutf8(j(e,l))+"'\n"}if(z=="13"){return g+"PrintableString '"+hextoutf8(j(e,l))+"'\n"}if(z=="14"){return g+"TeletexString '"+hextoutf8(j(e,l))+"'\n"}if(z=="16"){return g+"IA5String '"+hextoutf8(j(e,l))+"'\n"}if(z=="17"){return g+"UTCTime "+hextoutf8(j(e,l))+"\n"}if(z=="18"){return g+"GeneralizedTime "+hextoutf8(j(e,l))+"\n"}if(z=="1a"){return g+"VisualString '"+hextoutf8(j(e,l))+"'\n"}if(z=="1e"){return g+"BMPString '"+ucs2hextoutf8(j(e,l))+"'\n"}if(z=="30"){if(e.substr(l,4)=="3000"){return g+"SEQUENCE {}\n"}var k=g+"SEQUENCE\n";var d=w(e,l);var f=c;if((d.length==2||d.length==3)&&e.substr(d[0],2)=="06"&&e.substr(d[d.length-1],2)=="04"){var o=p.oidname(j(e,d[0]));var r=JSON.parse(JSON.stringify(c));r.x509ExtName=o;f=r}for(var u=0;u<d.length;u++){k=k+y(e,f,d[u],g+"  ")}return k}if(z=="31"){var k=g+"SET\n";var d=w(e,l);for(var u=0;u<d.length;u++){k=k+y(e,c,d[u],g+"  ")}return k}var z=parseInt(z,16);if((z&128)!=0){var n=z&31;if((z&32)!=0){var k=g+"["+n+"]\n";var d=w(e,l);for(var u=0;u<d.length;u++){k=k+y(e,c,d[u],g+"  ")}return k}else{var h=j(e,l);if(ASN1HEX.isASN1HEX(h)){var k=g+"["+n+"]\n";k=k+y(h,c,0,g+"  ");return k}else{if(h.substr(0,8)=="68747470"){h=hextoutf8(h)}else{if(c.x509ExtName==="subjectAltName"&&n==2){h=hextoutf8(h)}}}var k=g+"["+n+"] "+h+"\n";return k}}return g+"UNKNOWN("+z+") "+j(e,l)+"\n"};ASN1HEX.parse=function(x){var t=ASN1HEX,f=t.parse,a=t.isASN1HEX,l=t.getV,b=t.getTLV,y=t.getChildIdx,i=KJUR.asn1,e=i.ASN1Util.oidHexToInt,B=i.x509.OID.oid2name,k=hextoutf8,n=ucs2hextoutf8,q=iso88591hextoutf8;var c={"0c":"utf8str","12":"numstr","13":"prnstr","14":"telstr","16":"ia5str","17":"utctime","18":"gentime","1a":"visstr","1e":"bmpstr","30":"seq","31":"set"};var u=function(H){var D=[];var E=y(H,0);for(var G=0;G<E.length;G++){var s=E[G];var d=b(H,s);var F=f(d);D.push(F)}return D};var C=x.substr(0,2);var j={};var p=l(x,0);if(C=="01"){if(x=="0101ff"){return{bool:true}}return{bool:false}}else{if(C=="02"){return{"int":{hex:p}}}else{if(C=="03"){try{if(p.substr(0,2)!="00"){throw"not encap"}var v=p.substr(2);if(!a(v)){throw"not encap"}return{bitstr:{obj:f(v)}}}catch(z){var m=null;if(p.length<=10){m=bitstrtobinstr(p)}if(m==null){return{bitstr:{hex:p}}}else{return{bitstr:{bin:m}}}}}else{if(C=="04"){try{if(!a(p)){throw"not encap"}return{octstr:{obj:f(p)}}}catch(z){return{octstr:{hex:p}}}}else{if(C=="05"){return{"null":""}}else{if(C=="06"){var g=e(p);var r=B(g);if(r==""){return{oid:g}}else{return{oid:r}}}else{if(C=="0a"){if(p.length>4){return{"enum":{hex:p}}}else{return{"enum":parseInt(p,16)}}}else{if(C=="30"||C=="31"){j[c[C]]=u(x);return j}else{if(C=="14"){var o=q(p);j[c[C]]={str:o};return j}else{if(C=="1e"){var o=n(p);j[c[C]]={str:o};return j}else{if(":0c:12:13:16:17:18:1a:".indexOf(C)!=-1){var o=k(p);j[c[C]]={str:o};return j}else{if(C.match(/^8[0-9]$/)){var o=k(p);if(o==null|o==""){return{tag:{tag:C,explicit:false,hex:p}}}else{if(o.match(/[\x00-\x1F\x7F-\x9F]/)!=null||o.match(/[\u0000-\u001F\u0080–\u009F]/)!=null){return{tag:{tag:C,explicit:false,hex:p}}}else{return{tag:{tag:C,explicit:false,str:o}}}}}else{if(C.match(/^a[0-9]$/)){try{if(!a(p)){throw new Error("not encap")}return{tag:{tag:C,explicit:true,obj:f(p)}}}catch(z){return{tag:{tag:C,explicit:true,hex:p}}}}else{var A=new KJUR.asn1.ASN1Object();A.hV=p;var w=A.getLengthHexFromValue();return{asn1:{tlv:C+w+p}}}}}}}}}}}}}}}};ASN1HEX.isContextTag=function(c,b){c=c.toLowerCase();var f,e;try{f=parseInt(c,16)}catch(d){return -1}if(b===undefined){if((f&192)==128){return true}else{return false}}try{var a=b.match(/^\[[0-9]+\]$/);if(a==null){return false}e=parseInt(b.substr(1,b.length-1),10);if(e>31){return false}if(((f&192)==128)&&((f&31)==e)){return true}return false}catch(d){return false}};ASN1HEX.isASN1HEX=function(e){var d=ASN1HEX;if(e.length%2==1){return false}var c=d.getVblen(e,0);var b=e.substr(0,2);var f=d.getL(e,0);var a=e.length-b.length-f.length;if(a==c*2){return true}return false};ASN1HEX.checkStrictDER=function(g,o,d,c,r){var s=ASN1HEX;if(d===undefined){if(typeof g!="string"){throw new Error("not hex string")}g=g.toLowerCase();if(!KJUR.lang.String.isHex(g)){throw new Error("not hex string")}d=g.length;c=g.length/2;if(c<128){r=1}else{r=Math.ceil(c.toString(16))+1}}var k=s.getL(g,o);if(k.length>r*2){throw new Error("L of TLV too long: idx="+o)}var n=s.getVblen(g,o);if(n>c){throw new Error("value of L too long than hex: idx="+o)}var q=s.getTLV(g,o);var f=q.length-2-s.getL(g,o).length;if(f!==(n*2)){throw new Error("V string length and L's value not the same:"+f+"/"+(n*2))}if(o===0){if(g.length!=q.length){throw new Error("total length and TLV length unmatch:"+g.length+"!="+q.length)}}var b=g.substr(o,2);if(b==="02"){var a=s.getVidx(g,o);if(g.substr(a,2)=="00"&&g.charCodeAt(a+2)<56){throw new Error("not least zeros for DER INTEGER")}}if(parseInt(b,16)&32){var p=s.getVblen(g,o);var m=0;var l=s.getChildIdx(g,o);for(var e=0;e<l.length;e++){var j=s.getTLV(g,l[e]);m+=j.length;s.checkStrictDER(g,l[e],d,c,r)}if((p*2)!=m){throw new Error("sum of children's TLV length and L unmatch: "+(p*2)+"!="+m)}}};ASN1HEX.oidname=function(a){var c=KJUR.asn1;if(KJUR.lang.String.isHex(a)){a=c.ASN1Util.oidHexToInt(a)}var b=c.x509.OID.oid2name(a);if(b===""){b=a}return b};
if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.x509=="undefined"||!KJUR.asn1.x509){KJUR.asn1.x509={}}KJUR.asn1.x509.Certificate=function(h){KJUR.asn1.x509.Certificate.superclass.constructor.call(this);var d=KJUR,c=d.asn1,f=c.DERBitString,b=c.DERSequence,g=c.x509,a=g.TBSCertificate,e=g.AlgorithmIdentifier;this.params=undefined;this.setByParam=function(i){this.params=i};this.sign=function(){var l=this.params;var k=l.sigalg;if(l.sigalg.name!=undefined){k=l.sigalg.name}var i=l.tbsobj.tohex();var j=new KJUR.crypto.Signature({alg:k});j.init(l.cakey);j.updateHex(i);l.sighex=j.sign()};this.getPEM=function(){return hextopem(this.tohex(),"CERTIFICATE")};this.tohex=function(){var k=this.params;if(k.tbsobj==undefined||k.tbsobj==null){k.tbsobj=new a(k)}if(k.sighex==undefined&&k.cakey!=undefined){this.sign()}if(k.sighex==undefined){throw new Error("sighex or cakey parameter not defined")}var i=[];i.push(k.tbsobj);i.push(new e({name:k.sigalg}));i.push(new f({hex:"00"+k.sighex}));var j=new b({array:i});return j.tohex()};this.getEncodedHex=function(){return this.tohex()};if(h!=undefined){this.params=h}};extendClass(KJUR.asn1.x509.Certificate,KJUR.asn1.ASN1Object);KJUR.asn1.x509.TBSCertificate=function(f){KJUR.asn1.x509.TBSCertificate.superclass.constructor.call(this);var b=KJUR,i=b.asn1,d=i.x509,c=i.DERTaggedObject,h=i.DERInteger,g=i.DERSequence,l=d.AlgorithmIdentifier,e=d.Time,a=d.X500Name,j=d.Extensions,k=d.SubjectPublicKeyInfo;this.params=null;this.setByParam=function(m){this.params=m};this.tohex=function(){var n=[];var q=this.params;if(q.version!=undefined||q.version!=1){var m=2;if(q.version!=undefined){m=q.version-1}var p=new c({obj:new h({"int":m})});n.push(p)}n.push(new h(q.serial));n.push(new l({name:q.sigalg}));n.push(new a(q.issuer));n.push(new g({array:[new e(q.notbefore),new e(q.notafter)]}));n.push(new a(q.subject));n.push(new k(KEYUTIL.getKey(q.sbjpubkey)));if(q.ext!==undefined&&q.ext.length>0){n.push(new c({tag:"a3",obj:new j(q.ext)}))}var o=new KJUR.asn1.DERSequence({array:n});return o.tohex()};this.getEncodedHex=function(){return this.tohex()};if(f!==undefined){this.setByParam(f)}};extendClass(KJUR.asn1.x509.TBSCertificate,KJUR.asn1.ASN1Object);KJUR.asn1.x509.Extensions=function(d){KJUR.asn1.x509.Extensions.superclass.constructor.call(this);var c=KJUR,b=c.asn1,a=b.DERSequence,e=b.x509;this.aParam=[];this.setByParam=function(f){this.aParam=f};this.tohex=function(){var f=[];for(var h=0;h<this.aParam.length;h++){var l=this.aParam[h];var k=l.extname;var j=null;if(l.extn!=undefined){j=new e.PrivateExtension(l)}else{if(k=="subjectKeyIdentifier"){j=new e.SubjectKeyIdentifier(l)}else{if(k=="keyUsage"){j=new e.KeyUsage(l)}else{if(k=="subjectAltName"){j=new e.SubjectAltName(l)}else{if(k=="issuerAltName"){j=new e.IssuerAltName(l)}else{if(k=="basicConstraints"){j=new e.BasicConstraints(l)}else{if(k=="nameConstraints"){j=new e.NameConstraints(l)}else{if(k=="cRLDistributionPoints"){j=new e.CRLDistributionPoints(l)}else{if(k=="certificatePolicies"){j=new e.CertificatePolicies(l)}else{if(k=="policyMappings"){j=new e.PolicyMappings(l)}else{if(k=="policyConstraints"){j=new e.PolicyConstraints(l)}else{if(k=="inhibitAnyPolicy"){j=new e.InhibitAnyPolicy(l)}else{if(k=="authorityKeyIdentifier"){j=new e.AuthorityKeyIdentifier(l)}else{if(k=="extKeyUsage"){j=new e.ExtKeyUsage(l)}else{if(k=="authorityInfoAccess"){j=new e.AuthorityInfoAccess(l)}else{if(k=="cRLNumber"){j=new e.CRLNumber(l)}else{if(k=="cRLReason"){j=new e.CRLReason(l)}else{if(k=="ocspNonce"){j=new e.OCSPNonce(l)}else{if(k=="ocspNoCheck"){j=new e.OCSPNoCheck(l)}else{if(k=="adobeTimeStamp"){j=new e.AdobeTimeStamp(l)}else{if(k=="subjectDirectoryAttributes"){j=new e.SubjectDirectoryAttributes(l)}else{throw new Error("extension not supported:"+JSON.stringify(l))}}}}}}}}}}}}}}}}}}}}}if(j!=null){f.push(j)}}var g=new a({array:f});return g.tohex()};this.getEncodedHex=function(){return this.tohex()};if(d!=undefined){this.setByParam(d)}};extendClass(KJUR.asn1.x509.Extensions,KJUR.asn1.ASN1Object);KJUR.asn1.x509.Extension=function(d){KJUR.asn1.x509.Extension.superclass.constructor.call(this);var f=null,a=KJUR,e=a.asn1,h=e.DERObjectIdentifier,i=e.DEROctetString,b=e.DERBitString,g=e.DERBoolean,c=e.DERSequence;this.tohex=function(){var m=new h({oid:this.oid});var l=new i({hex:this.getExtnValueHex()});var k=new Array();k.push(m);if(this.critical){k.push(new g())}k.push(l);var j=new c({array:k});return j.tohex()};this.getEncodedHex=function(){return this.tohex()};this.critical=false;if(d!==undefined){if(d.critical!==undefined){this.critical=d.critical}}};extendClass(KJUR.asn1.x509.Extension,KJUR.asn1.ASN1Object);KJUR.asn1.x509.KeyUsage=function(c){KJUR.asn1.x509.KeyUsage.superclass.constructor.call(this,c);var b=Error;var a={digitalSignature:0,nonRepudiation:1,keyEncipherment:2,dataEncipherment:3,keyAgreement:4,keyCertSign:5,cRLSign:6,encipherOnly:7,decipherOnly:8};this.getExtnValueHex=function(){var d=this.getBinValue();this.asn1ExtnValue=new KJUR.asn1.DERBitString({bin:d});return this.asn1ExtnValue.tohex()};this.getBinValue=function(){var d=this.params;if(typeof d!="object"||(typeof d.names!="object"&&typeof d.bin!="string")){throw new b("parameter not yet set")}if(d.names!=undefined){return namearraytobinstr(d.names,a)}else{if(d.bin!=undefined){return d.bin}else{throw new b("parameter not set properly")}}};this.oid="2.5.29.15";if(c!==undefined){this.params=c}};extendClass(KJUR.asn1.x509.KeyUsage,KJUR.asn1.x509.Extension);KJUR.asn1.x509.BasicConstraints=function(g){KJUR.asn1.x509.BasicConstraints.superclass.constructor.call(this,g);var c=KJUR.asn1,e=c.DERBoolean,f=c.DERInteger,b=c.DERSequence;var a=false;var d=-1;this.getExtnValueHex=function(){var i=new Array();if(this.cA){i.push(new e())}if(this.pathLen>-1){i.push(new f({"int":this.pathLen}))}var h=new b({array:i});this.asn1ExtnValue=h;return this.asn1ExtnValue.tohex()};this.oid="2.5.29.19";this.cA=false;this.pathLen=-1;if(g!==undefined){if(g.cA!==undefined){this.cA=g.cA}if(g.pathLen!==undefined){this.pathLen=g.pathLen}}};extendClass(KJUR.asn1.x509.BasicConstraints,KJUR.asn1.x509.Extension);KJUR.asn1.x509.CRLDistributionPoints=function(d){KJUR.asn1.x509.CRLDistributionPoints.superclass.constructor.call(this,d);var b=KJUR,a=b.asn1,c=a.x509;this.getExtnValueHex=function(){return this.asn1ExtnValue.tohex()};this.setByDPArray=function(e){var f=[];for(var g=0;g<e.length;g++){if(e[g] instanceof KJUR.asn1.ASN1Object){f.push(e[g])}else{var h=new c.DistributionPoint(e[g]);f.push(h)}}this.asn1ExtnValue=new a.DERSequence({array:f})};this.setByOneURI=function(f){var e=new c.DistributionPoint({fulluri:f});this.setByDPArray([e])};this.oid="2.5.29.31";if(d!==undefined){if(d.array!==undefined){this.setByDPArray(d.array)}else{if(d.uri!==undefined){this.setByOneURI(d.uri)}}}};extendClass(KJUR.asn1.x509.CRLDistributionPoints,KJUR.asn1.x509.Extension);KJUR.asn1.x509.DistributionPoint=function(e){KJUR.asn1.x509.DistributionPoint.superclass.constructor.call(this);var a=null,c=KJUR,b=c.asn1,d=b.x509.DistributionPointName;this.tohex=function(){var f=new b.DERSequence();if(this.asn1DP!=null){var g=new b.DERTaggedObject({explicit:true,tag:"a0",obj:this.asn1DP});f.appendASN1Object(g)}this.hTLV=f.tohex();return this.hTLV};this.getEncodedHex=function(){return this.tohex()};if(e!==undefined){if(e.dpobj!==undefined){this.asn1DP=e.dpobj}else{if(e.dpname!==undefined){this.asn1DP=new d(e.dpname)}else{if(e.fulluri!==undefined){this.asn1DP=new d({full:[{uri:e.fulluri}]})}}}}};extendClass(KJUR.asn1.x509.DistributionPoint,KJUR.asn1.ASN1Object);KJUR.asn1.x509.DistributionPointName=function(h){KJUR.asn1.x509.DistributionPointName.superclass.constructor.call(this);var g=null,d=null,a=null,f=null,c=KJUR,b=c.asn1,e=b.DERTaggedObject;this.tohex=function(){if(this.type!="full"){throw new Error("currently type shall be 'full': "+this.type)}this.asn1Obj=new e({explicit:false,tag:this.tag,obj:this.asn1V});this.hTLV=this.asn1Obj.tohex();return this.hTLV};this.getEncodedHex=function(){return this.tohex()};if(h!==undefined){if(b.x509.GeneralNames.prototype.isPrototypeOf(h)){this.type="full";this.tag="a0";this.asn1V=h}else{if(h.full!==undefined){this.type="full";this.tag="a0";this.asn1V=new b.x509.GeneralNames(h.full)}else{throw new Error("This class supports GeneralNames only as argument")}}}};extendClass(KJUR.asn1.x509.DistributionPointName,KJUR.asn1.ASN1Object);KJUR.asn1.x509.CertificatePolicies=function(f){KJUR.asn1.x509.CertificatePolicies.superclass.constructor.call(this,f);var c=KJUR,b=c.asn1,e=b.x509,a=b.DERSequence,d=e.PolicyInformation;this.params=null;this.getExtnValueHex=function(){var j=[];for(var h=0;h<this.params.array.length;h++){j.push(new d(this.params.array[h]))}var g=new a({array:j});this.asn1ExtnValue=g;return this.asn1ExtnValue.tohex()};this.oid="2.5.29.32";if(f!==undefined){this.params=f}};extendClass(KJUR.asn1.x509.CertificatePolicies,KJUR.asn1.x509.Extension);KJUR.asn1.x509.PolicyInformation=function(d){KJUR.asn1.x509.PolicyInformation.superclass.constructor.call(this,d);var c=KJUR.asn1,b=c.DERSequence,e=c.DERObjectIdentifier,a=c.x509.PolicyQualifierInfo;this.params=null;this.tohex=function(){if(this.params.policyoid===undefined&&this.params.array===undefined){throw new Error("parameter oid and array missing")}var f=[new e(this.params.policyoid)];if(this.params.array!==undefined){var j=[];for(var h=0;h<this.params.array.length;h++){j.push(new a(this.params.array[h]))}if(j.length>0){f.push(new b({array:j}))}}var g=new b({array:f});return g.tohex()};this.getEncodedHex=function(){return this.tohex()};if(d!==undefined){this.params=d}};extendClass(KJUR.asn1.x509.PolicyInformation,KJUR.asn1.ASN1Object);KJUR.asn1.x509.PolicyQualifierInfo=function(e){KJUR.asn1.x509.PolicyQualifierInfo.superclass.constructor.call(this,e);var c=KJUR.asn1,b=c.DERSequence,d=c.DERIA5String,f=c.DERObjectIdentifier,a=c.x509.UserNotice;this.params=null;this.tohex=function(){if(this.params.cps!==undefined){var g=new b({array:[new f({oid:"1.3.6.1.5.5.7.2.1"}),new d({str:this.params.cps})]});return g.tohex()}if(this.params.unotice!=undefined){var g=new b({array:[new f({oid:"1.3.6.1.5.5.7.2.2"}),new a(this.params.unotice)]});return g.tohex()}};this.getEncodedHex=function(){return this.tohex()};if(e!==undefined){this.params=e}};extendClass(KJUR.asn1.x509.PolicyQualifierInfo,KJUR.asn1.ASN1Object);KJUR.asn1.x509.UserNotice=function(e){KJUR.asn1.x509.UserNotice.superclass.constructor.call(this,e);var a=KJUR.asn1.DERSequence,d=KJUR.asn1.DERInteger,c=KJUR.asn1.x509.DisplayText,b=KJUR.asn1.x509.NoticeReference;this.params=null;this.tohex=function(){var f=[];if(this.params.noticeref!==undefined){f.push(new b(this.params.noticeref))}if(this.params.exptext!==undefined){f.push(new c(this.params.exptext))}var g=new a({array:f});return g.tohex()};this.getEncodedHex=function(){return this.tohex()};if(e!==undefined){this.params=e}};extendClass(KJUR.asn1.x509.UserNotice,KJUR.asn1.ASN1Object);KJUR.asn1.x509.NoticeReference=function(d){KJUR.asn1.x509.NoticeReference.superclass.constructor.call(this,d);var a=KJUR.asn1.DERSequence,c=KJUR.asn1.DERInteger,b=KJUR.asn1.x509.DisplayText;this.params=null;this.tohex=function(){var f=[];if(this.params.org!==undefined){f.push(new b(this.params.org))}if(this.params.noticenum!==undefined){var h=[];var e=this.params.noticenum;for(var j=0;j<e.length;j++){h.push(new c(e[j]))}f.push(new a({array:h}))}if(f.length==0){throw new Error("parameter is empty")}var g=new a({array:f});return g.tohex()};this.getEncodedHex=function(){return this.tohex()};if(d!==undefined){this.params=d}};extendClass(KJUR.asn1.x509.NoticeReference,KJUR.asn1.ASN1Object);KJUR.asn1.x509.DisplayText=function(a){KJUR.asn1.x509.DisplayText.superclass.constructor.call(this,a);this.hT="0c";if(a!==undefined){if(a.type==="ia5"){this.hT="16"}else{if(a.type==="vis"){this.hT="1a"}else{if(a.type==="bmp"){this.hT="1e"}}}}};extendClass(KJUR.asn1.x509.DisplayText,KJUR.asn1.DERAbstractString);KJUR.asn1.x509.PolicyMappings=function(e){KJUR.asn1.x509.PolicyMappings.superclass.constructor.call(this,e);var c=KJUR,b=c.asn1,d=b.x509,a=b.ASN1Util.newObject;this.params=null;this.getExtnValueHex=function(){var j=this.params;var f=[];for(var g=0;g<j.array.length;g++){var h=j.array[g];f.push({seq:[{oid:h[0]},{oid:h[1]}]})}this.asn1ExtnValue=a({seq:f});return this.asn1ExtnValue.tohex()};this.oid="2.5.29.33";if(e!==undefined){this.params=e}};extendClass(KJUR.asn1.x509.PolicyMappings,KJUR.asn1.x509.Extension);KJUR.asn1.x509.PolicyConstraints=function(e){KJUR.asn1.x509.PolicyConstraints.superclass.constructor.call(this,e);var c=KJUR,b=c.asn1,d=b.x509,a=b.ASN1Util.newObject;this.params=null;this.getExtnValueHex=function(){var g=this.params;var f=[];if(g.reqexp!=undefined){f.push({tag:{tagi:"80",obj:{"int":g.reqexp}}})}if(g.inhibit!=undefined){f.push({tag:{tagi:"81",obj:{"int":g.inhibit}}})}this.asn1ExtnValue=a({seq:f});return this.asn1ExtnValue.tohex()};this.oid="2.5.29.36";if(e!==undefined){this.params=e}};extendClass(KJUR.asn1.x509.PolicyConstraints,KJUR.asn1.x509.Extension);KJUR.asn1.x509.InhibitAnyPolicy=function(e){KJUR.asn1.x509.InhibitAnyPolicy.superclass.constructor.call(this,e);var c=KJUR,b=c.asn1,d=b.x509,a=b.ASN1Util.newObject;this.params=null;this.getExtnValueHex=function(){this.asn1ExtnValue=a({"int":this.params.skip});return this.asn1ExtnValue.tohex()};this.oid="2.5.29.54";if(e!==undefined){this.params=e}};extendClass(KJUR.asn1.x509.InhibitAnyPolicy,KJUR.asn1.x509.Extension);KJUR.asn1.x509.NameConstraints=function(f){KJUR.asn1.x509.NameConstraints.superclass.constructor.call(this,f);var c=KJUR,b=c.asn1,e=b.x509,a=b.ASN1Util.newObject,d=e.GeneralSubtree;this.params=null;this.getExtnValueHex=function(){var l=this.params;var g=[];if(l.permit!=undefined&&l.permit.length!=undefined){var k=[];for(var h=0;h<l.permit.length;h++){k.push(new d(l.permit[h]))}g.push({tag:{tagi:"a0",obj:{seq:k}}})}if(l.exclude!=undefined&&l.exclude.length!=undefined){var j=[];for(var h=0;h<l.exclude.length;h++){j.push(new d(l.exclude[h]))}g.push({tag:{tagi:"a1",obj:{seq:j}}})}this.asn1ExtnValue=a({seq:g});return this.asn1ExtnValue.tohex()};this.oid="2.5.29.30";if(f!==undefined){this.params=f}};extendClass(KJUR.asn1.x509.NameConstraints,KJUR.asn1.x509.Extension);KJUR.asn1.x509.GeneralSubtree=function(e){KJUR.asn1.x509.GeneralSubtree.superclass.constructor.call(this);var b=KJUR.asn1,d=b.x509,c=d.GeneralName,a=b.ASN1Util.newObject;this.params=null;this.setByParam=function(f){this.params=f};this.tohex=function(){var h=this.params;var f=[new c(h)];if(h.min!=undefined){f.push({tag:{tagi:"80",obj:{"int":h.min}}})}if(h.max!=undefined){f.push({tag:{tagi:"81",obj:{"int":h.max}}})}var g=a({seq:f});return g.tohex()};this.getEncodedHex=function(){return this.tohex()};if(e!==undefined){this.setByParam(e)}};extendClass(KJUR.asn1.x509.GeneralSubtree,KJUR.asn1.ASN1Object);KJUR.asn1.x509.ExtKeyUsage=function(c){KJUR.asn1.x509.ExtKeyUsage.superclass.constructor.call(this,c);var b=KJUR,a=b.asn1;this.setPurposeArray=function(d){this.asn1ExtnValue=new a.DERSequence();for(var e=0;e<d.length;e++){var f=new a.DERObjectIdentifier(d[e]);this.asn1ExtnValue.appendASN1Object(f)}};this.getExtnValueHex=function(){return this.asn1ExtnValue.tohex()};this.oid="2.5.29.37";if(c!==undefined){if(c.array!==undefined){this.setPurposeArray(c.array)}}};extendClass(KJUR.asn1.x509.ExtKeyUsage,KJUR.asn1.x509.Extension);KJUR.asn1.x509.AuthorityKeyIdentifier=function(f){KJUR.asn1.x509.AuthorityKeyIdentifier.superclass.constructor.call(this,f);var b=KJUR,a=b.asn1,d=a.DERTaggedObject,e=a.x509.GeneralNames,c=b.crypto.Util.isKey;this.asn1KID=null;this.asn1CertIssuer=null;this.asn1CertSN=null;this.getExtnValueHex=function(){var h=new Array();if(this.asn1KID){h.push(new d({explicit:false,tag:"80",obj:this.asn1KID}))}if(this.asn1CertIssuer){h.push(new d({explicit:false,tag:"a1",obj:new e([{dn:this.asn1CertIssuer}])}))}if(this.asn1CertSN){h.push(new d({explicit:false,tag:"82",obj:this.asn1CertSN}))}var g=new a.DERSequence({array:h});this.asn1ExtnValue=g;return this.asn1ExtnValue.tohex()};this.setKIDByParam=function(i){if(i.str!==undefined||i.hex!==undefined){this.asn1KID=new KJUR.asn1.DEROctetString(i)}else{if((typeof i==="object"&&KJUR.crypto.Util.isKey(i))||(typeof i==="string"&&i.indexOf("BEGIN ")!=-1)){var h=i;if(typeof i==="string"){h=KEYUTIL.getKey(i)}var g=KEYUTIL.getKeyID(h);this.asn1KID=new KJUR.asn1.DEROctetString({hex:g})}}};this.setCertIssuerByParam=function(g){if(g.str!==undefined||g.ldapstr!==undefined||g.hex!==undefined||g.certsubject!==undefined||g.certissuer!==undefined){this.asn1CertIssuer=new KJUR.asn1.x509.X500Name(g)}else{if(typeof g==="string"&&g.indexOf("BEGIN ")!=-1&&g.indexOf("CERTIFICATE")!=-1){this.asn1CertIssuer=new KJUR.asn1.x509.X500Name({certissuer:g})}}};this.setCertSNByParam=function(i){if(i.str!==undefined||i.bigint!==undefined||i.hex!==undefined){this.asn1CertSN=new KJUR.asn1.DERInteger(i)}else{if(typeof i==="string"&&i.indexOf("BEGIN ")!=-1&&i.indexOf("CERTIFICATE")){var g=new X509();g.readCertPEM(i);var h=g.getSerialNumberHex();this.asn1CertSN=new KJUR.asn1.DERInteger({hex:h})}}};this.oid="2.5.29.35";if(f!==undefined){if(f.kid!==undefined){this.setKIDByParam(f.kid)}if(f.issuer!==undefined){this.setCertIssuerByParam(f.issuer)}if(f.sn!==undefined){this.setCertSNByParam(f.sn)}if(f.issuersn!==undefined&&typeof f.issuersn==="string"&&f.issuersn.indexOf("BEGIN ")!=-1&&f.issuersn.indexOf("CERTIFICATE")){this.setCertSNByParam(f.issuersn);this.setCertIssuerByParam(f.issuersn)}}};extendClass(KJUR.asn1.x509.AuthorityKeyIdentifier,KJUR.asn1.x509.Extension);KJUR.asn1.x509.SubjectKeyIdentifier=function(d){KJUR.asn1.x509.SubjectKeyIdentifier.superclass.constructor.call(this,d);var b=KJUR,a=b.asn1,c=a.DEROctetString;this.asn1KID=null;this.getExtnValueHex=function(){this.asn1ExtnValue=this.asn1KID;return this.asn1ExtnValue.tohex()};this.setKIDByParam=function(g){if(g.str!==undefined||g.hex!==undefined){this.asn1KID=new c(g)}else{if((typeof g==="object"&&KJUR.crypto.Util.isKey(g))||(typeof g==="string"&&g.indexOf("BEGIN")!=-1)){var f=g;if(typeof g==="string"){f=KEYUTIL.getKey(g)}var e=KEYUTIL.getKeyID(f);this.asn1KID=new KJUR.asn1.DEROctetString({hex:e})}}};this.oid="2.5.29.14";if(d!==undefined){if(d.kid!==undefined){this.setKIDByParam(d.kid)}}};extendClass(KJUR.asn1.x509.SubjectKeyIdentifier,KJUR.asn1.x509.Extension);KJUR.asn1.x509.AuthorityInfoAccess=function(a){KJUR.asn1.x509.AuthorityInfoAccess.superclass.constructor.call(this,a);this.setAccessDescriptionArray=function(k){var d=new Array(),b=KJUR,g=b.asn1,c=g.DERSequence,j=g.DERObjectIdentifier,l=g.x509.GeneralName;for(var f=0;f<k.length;f++){var e;var h=k[f];if(h.ocsp!==undefined){e=new c({array:[new j({oid:"1.3.6.1.5.5.7.48.1"}),new l({uri:h.ocsp})]})}else{if(h.caissuer!==undefined){e=new c({array:[new j({oid:"1.3.6.1.5.5.7.48.2"}),new l({uri:h.caissuer})]})}else{throw new Error("unknown AccessMethod parameter: "+JSON.stringify(h))}}d.push(e)}this.asn1ExtnValue=new c({array:d})};this.getExtnValueHex=function(){return this.asn1ExtnValue.tohex()};this.oid="1.3.6.1.5.5.7.1.1";if(a!==undefined){if(a.array!==undefined){this.setAccessDescriptionArray(a.array)}}};extendClass(KJUR.asn1.x509.AuthorityInfoAccess,KJUR.asn1.x509.Extension);KJUR.asn1.x509.SubjectAltName=function(a){KJUR.asn1.x509.SubjectAltName.superclass.constructor.call(this,a);this.setNameArray=function(b){this.asn1ExtnValue=new KJUR.asn1.x509.GeneralNames(b)};this.getExtnValueHex=function(){return this.asn1ExtnValue.tohex()};this.oid="2.5.29.17";if(a!==undefined){if(a.array!==undefined){this.setNameArray(a.array)}}};extendClass(KJUR.asn1.x509.SubjectAltName,KJUR.asn1.x509.Extension);KJUR.asn1.x509.IssuerAltName=function(a){KJUR.asn1.x509.IssuerAltName.superclass.constructor.call(this,a);this.setNameArray=function(b){this.asn1ExtnValue=new KJUR.asn1.x509.GeneralNames(b)};this.getExtnValueHex=function(){return this.asn1ExtnValue.tohex()};this.oid="2.5.29.18";if(a!==undefined){if(a.array!==undefined){this.setNameArray(a.array)}}};extendClass(KJUR.asn1.x509.IssuerAltName,KJUR.asn1.x509.Extension);KJUR.asn1.x509.SubjectDirectoryAttributes=function(e){KJUR.asn1.x509.SubjectDirectoryAttributes.superclass.constructor.call(this,e);var c=KJUR.asn1,a=c.DERSequence,b=c.ASN1Util.newObject,d=c.x509.OID.name2oid;this.params=null;this.getExtnValueHex=function(){var f=[];for(var j=0;j<this.params.array.length;j++){var l=this.params.array[j];if(l.attr!=undefined&&l.array!=undefined){var k={seq:[{oid:l.attr},{set:l.array}]};f.push(b(k));continue}var h={seq:[{oid:"1.2.3.4"},{set:[{utf8str:"DE"}]}]};if(l.attr=="dateOfBirth"){h.seq[0].oid=d(l.attr);h.seq[1].set[0]={gentime:l.str}}else{if(l.attr=="placeOfBirth"){h.seq[0].oid=d(l.attr);h.seq[1].set[0]={utf8str:l.str}}else{if(l.attr=="gender"){h.seq[0].oid=d(l.attr);h.seq[1].set[0]={prnstr:l.str}}else{if(l.attr=="countryOfCitizenship"){h.seq[0].oid=d(l.attr);h.seq[1].set[0]={prnstr:l.str}}else{if(l.attr=="countryOfResidence"){h.seq[0].oid=d(l.attr);h.seq[1].set[0]={prnstr:l.str}}else{throw new Error("unsupported attribute: "+l.attr)}}}}}f.push(new b(h))}var g=new a({array:f});this.asn1ExtnValue=g;return this.asn1ExtnValue.tohex()};this.oid="2.5.29.9";if(e!==undefined){this.params=e}};extendClass(KJUR.asn1.x509.SubjectDirectoryAttributes,KJUR.asn1.x509.Extension);KJUR.asn1.x509.PrivateExtension=function(f){KJUR.asn1.x509.PrivateExtension.superclass.constructor.call(this,f);var c=KJUR,e=c.lang.String.isHex,b=c.asn1,d=b.x509.OID.name2oid,a=b.ASN1Util.newObject;this.params=null;this.setByParam=function(g){this.oid=d(g.extname);this.params=g};this.getExtnValueHex=function(){if(this.params.extname==undefined||this.params.extn==undefined){throw new Error("extname or extnhex not specified")}var h=this.params.extn;if(typeof h=="string"&&e(h)){return h}else{if(typeof h=="object"){try{return a(h).tohex()}catch(g){}}}throw new Error("unsupported extn value")};if(f!=undefined){this.setByParam(f)}};extendClass(KJUR.asn1.x509.PrivateExtension,KJUR.asn1.x509.Extension);KJUR.asn1.x509.CRL=function(g){KJUR.asn1.x509.CRL.superclass.constructor.call(this);var c=KJUR,b=c.asn1,a=b.DERSequence,e=b.DERBitString,f=b.x509,d=f.AlgorithmIdentifier,h=f.TBSCertList;this.params=undefined;this.setByParam=function(i){this.params=i};this.sign=function(){var j=(new h(this.params)).tohex();var k=new KJUR.crypto.Signature({alg:this.params.sigalg});k.init(this.params.cakey);k.updateHex(j);var i=k.sign();this.params.sighex=i};this.getPEM=function(){return hextopem(this.tohex(),"X509 CRL")};this.tohex=function(){var k=this.params;if(k.tbsobj==undefined){k.tbsobj=new h(k)}if(k.sighex==undefined&&k.cakey!=undefined){this.sign()}if(k.sighex==undefined){throw new Error("sighex or cakey parameter not defined")}var i=[];i.push(k.tbsobj);i.push(new d({name:k.sigalg}));i.push(new e({hex:"00"+k.sighex}));var j=new a({array:i});return j.tohex()};this.getEncodedHex=function(){return this.tohex()};if(g!=undefined){this.params=g}};extendClass(KJUR.asn1.x509.CRL,KJUR.asn1.ASN1Object);KJUR.asn1.x509.TBSCertList=function(f){KJUR.asn1.x509.TBSCertList.superclass.constructor.call(this);var b=KJUR,i=b.asn1,h=i.DERInteger,g=i.DERSequence,c=i.DERTaggedObject,k=i.DERObjectIdentifier,d=i.x509,l=d.AlgorithmIdentifier,e=d.Time,j=d.Extensions,a=d.X500Name;this.params=null;this.setByParam=function(m){this.params=m};this.getRevCertSequence=function(){var m=[];var n=this.params.revcert;for(var o=0;o<n.length;o++){var p=[new h(n[o].sn),new e(n[o].date)];if(n[o].ext!=undefined){p.push(new j(n[o].ext))}m.push(new g({array:p}))}return new g({array:m})};this.tohex=function(){var n=[];var r=this.params;if(r.version!=undefined){var m=r.version-1;var p=new h({"int":m});n.push(p)}n.push(new l({name:r.sigalg}));n.push(new a(r.issuer));n.push(new e(r.thisupdate));if(r.nextupdate!=undefined){n.push(new e(r.nextupdate))}if(r.revcert!=undefined){n.push(this.getRevCertSequence())}if(r.ext!=undefined){var q=new j(r.ext);n.push(new c({tag:"a0",explicit:true,obj:q}))}var o=new g({array:n});return o.tohex()};this.getEncodedHex=function(){return this.tohex()};if(f!==undefined){this.setByParam(f)}};extendClass(KJUR.asn1.x509.TBSCertList,KJUR.asn1.ASN1Object);KJUR.asn1.x509.CRLEntry=function(e){KJUR.asn1.x509.CRLEntry.superclass.constructor.call(this);var d=null,c=null,b=KJUR,a=b.asn1;this.setCertSerial=function(f){this.sn=new a.DERInteger(f)};this.setRevocationDate=function(f){this.time=new a.x509.Time(f)};this.tohex=function(){var f=new a.DERSequence({array:[this.sn,this.time]});this.TLV=f.tohex();return this.TLV};this.getEncodedHex=function(){return this.tohex()};if(e!==undefined){if(e.time!==undefined){this.setRevocationDate(e.time)}if(e.sn!==undefined){this.setCertSerial(e.sn)}}};extendClass(KJUR.asn1.x509.CRLEntry,KJUR.asn1.ASN1Object);KJUR.asn1.x509.CRLNumber=function(a){KJUR.asn1.x509.CRLNumber.superclass.constructor.call(this,a);this.params=undefined;this.getExtnValueHex=function(){this.asn1ExtnValue=new KJUR.asn1.DERInteger(this.params.num);return this.asn1ExtnValue.tohex()};this.oid="2.5.29.20";if(a!=undefined){this.params=a}};extendClass(KJUR.asn1.x509.CRLNumber,KJUR.asn1.x509.Extension);KJUR.asn1.x509.CRLReason=function(a){KJUR.asn1.x509.CRLReason.superclass.constructor.call(this,a);this.params=undefined;this.getExtnValueHex=function(){this.asn1ExtnValue=new KJUR.asn1.DEREnumerated(this.params.code);return this.asn1ExtnValue.tohex()};this.oid="2.5.29.21";if(a!=undefined){this.params=a}};extendClass(KJUR.asn1.x509.CRLReason,KJUR.asn1.x509.Extension);KJUR.asn1.x509.OCSPNonce=function(a){KJUR.asn1.x509.OCSPNonce.superclass.constructor.call(this,a);this.params=undefined;this.getExtnValueHex=function(){this.asn1ExtnValue=new KJUR.asn1.DEROctetString(this.params);return this.asn1ExtnValue.tohex()};this.oid="1.3.6.1.5.5.7.48.1.2";if(a!=undefined){this.params=a}};extendClass(KJUR.asn1.x509.OCSPNonce,KJUR.asn1.x509.Extension);KJUR.asn1.x509.OCSPNoCheck=function(a){KJUR.asn1.x509.OCSPNoCheck.superclass.constructor.call(this,a);this.params=undefined;this.getExtnValueHex=function(){this.asn1ExtnValue=new KJUR.asn1.DERNull();return this.asn1ExtnValue.tohex()};this.oid="1.3.6.1.5.5.7.48.1.5";if(a!=undefined){this.params=a}};extendClass(KJUR.asn1.x509.OCSPNoCheck,KJUR.asn1.x509.Extension);KJUR.asn1.x509.AdobeTimeStamp=function(g){KJUR.asn1.x509.AdobeTimeStamp.superclass.constructor.call(this,g);var c=KJUR,b=c.asn1,f=b.DERInteger,d=b.DERBoolean,a=b.DERSequence,e=b.x509.GeneralName;this.params=null;this.getExtnValueHex=function(){var i=this.params;var h=[new f(1)];h.push(new e({uri:i.uri}));if(i.reqauth!=undefined){h.push(new d(i.reqauth))}this.asn1ExtnValue=new a({array:h});return this.asn1ExtnValue.tohex()};this.oid="1.2.840.113583.1.1.9.1";if(g!==undefined){this.setByParam(g)}};extendClass(KJUR.asn1.x509.AdobeTimeStamp,KJUR.asn1.x509.Extension);KJUR.asn1.x509.X500Name=function(f){KJUR.asn1.x509.X500Name.superclass.constructor.call(this);this.asn1Array=[];this.paramArray=[];this.sRule="utf8";var c=KJUR,b=c.asn1,e=b.x509,d=e.RDN,a=pemtohex;this.setByString=function(g,l){if(l!==undefined){this.sRule=l}var k=g.split("/");k.shift();var j=[];for(var m=0;m<k.length;m++){if(k[m].match(/^[^=]+=.+$/)){j.push(k[m])}else{var h=j.length-1;j[h]=j[h]+"/"+k[m]}}for(var m=0;m<j.length;m++){this.asn1Array.push(new d({str:j[m],rule:this.sRule}))}};this.setByLdapString=function(g,h){if(h!==undefined){this.sRule=h}var i=e.X500Name.ldapToCompat(g);this.setByString(i,h)};this.setByObject=function(j,i){if(i!==undefined){this.sRule=i}for(var g in j){if(j.hasOwnProperty(g)){var h=new d({str:g+"="+j[g],rule:this.sRule});this.asn1Array?this.asn1Array.push(h):this.asn1Array=[h]}}};this.setByParam=function(h){if(h.rule!==undefined){this.sRule=h.rule}if(h.array!==undefined){this.paramArray=h.array}else{if(h.str!==undefined){this.setByString(h.str)}else{if(h.ldapstr!==undefined){this.setByLdapString(h.ldapstr)}else{if(h.hex!==undefined){this.hTLV=h.hex}else{if(h.certissuer!==undefined){var g=new X509();g.readCertPEM(h.certissuer);this.hTLV=g.getIssuerHex()}else{if(h.certsubject!==undefined){var g=new X509();g.readCertPEM(h.certsubject);this.hTLV=g.getSubjectHex()}else{if(typeof h==="object"&&h.certsubject===undefined&&h.certissuer===undefined){this.setByObject(h)}}}}}}}};this.tohex=function(){if(typeof this.hTLV=="string"){return this.hTLV}if(this.asn1Array.length==0&&this.paramArray.length>0){for(var g=0;g<this.paramArray.length;g++){var k={array:this.paramArray[g]};if(this.sRule!="utf8"){k.rule=this.sRule}var h=new d(k);this.asn1Array.push(h)}}var j=new b.DERSequence({array:this.asn1Array});this.hTLV=j.tohex();return this.hTLV};this.getEncodedHex=function(){return this.tohex()};if(f!==undefined){this.setByParam(f)}};extendClass(KJUR.asn1.x509.X500Name,KJUR.asn1.ASN1Object);KJUR.asn1.x509.X500Name.compatToLDAP=function(d){if(d.substr(0,1)!=="/"){throw"malformed input"}var b="";d=d.substr(1);var c=d.split("/");c.reverse();c=c.map(function(a){return a.replace(/,/,"\\,")});return c.join(",")};KJUR.asn1.x509.X500Name.onelineToLDAP=function(a){return KJUR.asn1.x509.X500Name.compatToLDAP(a)};KJUR.asn1.x509.X500Name.ldapToCompat=function(g){var c=g.split(",");var e=false;var b=[];for(var f=0;c.length>0;f++){var h=c.shift();if(e===true){var d=b.pop();var j=(d+","+h).replace(/\\,/g,",");b.push(j);e=false}else{b.push(h)}if(h.substr(-1,1)==="\\"){e=true}}b=b.map(function(a){return a.replace("/","\\/")});b.reverse();return"/"+b.join("/")};KJUR.asn1.x509.X500Name.ldapToOneline=function(a){return KJUR.asn1.x509.X500Name.ldapToCompat(a)};KJUR.asn1.x509.RDN=function(b){KJUR.asn1.x509.RDN.superclass.constructor.call(this);this.asn1Array=[];this.paramArray=[];this.sRule="utf8";var a=KJUR.asn1.x509.AttributeTypeAndValue;this.setByParam=function(c){if(c.rule!==undefined){this.sRule=c.rule}if(c.str!==undefined){this.addByMultiValuedString(c.str)}if(c.array!==undefined){this.paramArray=c.array}};this.addByString=function(c){this.asn1Array.push(new KJUR.asn1.x509.AttributeTypeAndValue({str:c,rule:this.sRule}))};this.addByMultiValuedString=function(e){var c=KJUR.asn1.x509.RDN.parseString(e);for(var d=0;d<c.length;d++){this.addByString(c[d])}};this.tohex=function(){if(this.asn1Array.length==0&&this.paramArray.length>0){for(var d=0;d<this.paramArray.length;d++){var f=this.paramArray[d];if(f.rule!==undefined&&this.sRule!="utf8"){f.rule=this.sRule}var c=new a(f);this.asn1Array.push(c)}}var e=new KJUR.asn1.DERSet({array:this.asn1Array});this.TLV=e.tohex();return this.TLV};this.getEncodedHex=function(){return this.tohex()};if(b!==undefined){this.setByParam(b)}};extendClass(KJUR.asn1.x509.RDN,KJUR.asn1.ASN1Object);KJUR.asn1.x509.RDN.parseString=function(m){var j=m.split(/\+/);var h=false;var c=[];for(var g=0;j.length>0;g++){var k=j.shift();if(h===true){var f=c.pop();var d=(f+"+"+k).replace(/\\\+/g,"+");c.push(d);h=false}else{c.push(k)}if(k.substr(-1,1)==="\\"){h=true}}var l=false;var b=[];for(var g=0;c.length>0;g++){var k=c.shift();if(l===true){var e=b.pop();if(k.match(/"$/)){var d=(e+"+"+k).replace(/^([^=]+)="(.*)"$/,"$1=$2");b.push(d);l=false}else{b.push(e+"+"+k)}}else{b.push(k)}if(k.match(/^[^=]+="/)){l=true}}return b};KJUR.asn1.x509.AttributeTypeAndValue=function(c){KJUR.asn1.x509.AttributeTypeAndValue.superclass.constructor.call(this);this.sRule="utf8";this.sType=null;this.sValue=null;this.dsType=null;var a=KJUR,g=a.asn1,d=g.DERSequence,l=g.DERUTF8String,i=g.DERPrintableString,h=g.DERTeletexString,b=g.DERIA5String,e=g.DERVisibleString,k=g.DERBMPString,f=a.lang.String.isMail,j=a.lang.String.isPrintable;this.setByParam=function(o){if(o.rule!==undefined){this.sRule=o.rule}if(o.ds!==undefined){this.dsType=o.ds}if(o.value===undefined&&o.str!==undefined){var n=o.str;var m=n.match(/^([^=]+)=(.+)$/);if(m){this.sType=m[1];this.sValue=m[2]}else{throw new Error("malformed attrTypeAndValueStr: "+attrTypeAndValueStr)}}else{this.sType=o.type;this.sValue=o.value}};this.setByString=function(n,o){if(o!==undefined){this.sRule=o}var m=n.match(/^([^=]+)=(.+)$/);if(m){this.setByAttrTypeAndValueStr(m[1],m[2])}else{throw new Error("malformed attrTypeAndValueStr: "+attrTypeAndValueStr)}};this._getDsType=function(){var o=this.sType;var n=this.sValue;var m=this.sRule;if(m==="prn"){if(o=="CN"&&f(n)){return"ia5"}if(j(n)){return"prn"}return"utf8"}else{if(m==="utf8"){if(o=="CN"&&f(n)){return"ia5"}if(o=="C"){return"prn"}return"utf8"}}return"utf8"};this.setByAttrTypeAndValueStr=function(o,n,m){if(m!==undefined){this.sRule=m}this.sType=o;this.sValue=n};this.getValueObj=function(n,m){if(n=="utf8"){return new l({str:m})}if(n=="prn"){return new i({str:m})}if(n=="tel"){return new h({str:m})}if(n=="ia5"){return new b({str:m})}if(n=="vis"){return new e({str:m})}if(n=="bmp"){return new k({str:m})}throw new Error("unsupported directory string type: type="+n+" value="+m)};this.tohex=function(){if(this.dsType==null){this.dsType=this._getDsType()}var n=KJUR.asn1.x509.OID.atype2obj(this.sType);var m=this.getValueObj(this.dsType,this.sValue);var p=new d({array:[n,m]});this.TLV=p.tohex();return this.TLV};this.getEncodedHex=function(){return this.tohex()};if(c!==undefined){this.setByParam(c)}};extendClass(KJUR.asn1.x509.AttributeTypeAndValue,KJUR.asn1.ASN1Object);KJUR.asn1.x509.SubjectPublicKeyInfo=function(f){KJUR.asn1.x509.SubjectPublicKeyInfo.superclass.constructor.call(this);var l=null,k=null,a=KJUR,j=a.asn1,i=j.DERInteger,b=j.DERBitString,m=j.DERObjectIdentifier,e=j.DERSequence,h=j.ASN1Util.newObject,d=j.x509,o=d.AlgorithmIdentifier,g=a.crypto,n=g.ECDSA,c=g.DSA;this.getASN1Object=function(){if(this.asn1AlgId==null||this.asn1SubjPKey==null){throw"algId and/or subjPubKey not set"}var p=new e({array:[this.asn1AlgId,this.asn1SubjPKey]});return p};this.tohex=function(){var p=this.getASN1Object();this.hTLV=p.tohex();return this.hTLV};this.getEncodedHex=function(){return this.tohex()};this.setPubKey=function(q){try{if(q instanceof RSAKey){var u=h({seq:[{"int":{bigint:q.n}},{"int":{"int":q.e}}]});var s=u.tohex();this.asn1AlgId=new o({name:"rsaEncryption"});this.asn1SubjPKey=new b({hex:"00"+s})}}catch(p){}try{if(q instanceof KJUR.crypto.ECDSA){var r=new m({name:q.curveName});this.asn1AlgId=new o({name:"ecPublicKey",asn1params:r});this.asn1SubjPKey=new b({hex:"00"+q.pubKeyHex})}}catch(p){}try{if(q instanceof KJUR.crypto.DSA){var r=new h({seq:[{"int":{bigint:q.p}},{"int":{bigint:q.q}},{"int":{bigint:q.g}}]});this.asn1AlgId=new o({name:"dsa",asn1params:r});var t=new i({bigint:q.y});this.asn1SubjPKey=new b({hex:"00"+t.tohex()})}}catch(p){}};if(f!==undefined){this.setPubKey(f)}};extendClass(KJUR.asn1.x509.SubjectPublicKeyInfo,KJUR.asn1.ASN1Object);KJUR.asn1.x509.Time=function(f){KJUR.asn1.x509.Time.superclass.constructor.call(this);var e=null,a=null,d=KJUR,c=d.asn1,b=c.DERUTCTime,g=c.DERGeneralizedTime;this.params=null;this.type=null;this.setTimeParams=function(h){this.timeParams=h};this.setByParam=function(h){this.params=h};this.getType=function(h){if(h.match(/^[0-9]{12}Z$/)){return"utc"}if(h.match(/^[0-9]{14}Z$/)){return"gen"}if(h.match(/^[0-9]{12}\.[0-9]+Z$/)){return"utc"}if(h.match(/^[0-9]{14}\.[0-9]+Z$/)){return"gen"}return null};this.tohex=function(){var i=this.params;var h=null;if(typeof i=="string"){i={str:i}}if(i!=null&&i.str&&(i.type==null||i.type==undefined)){i.type=this.getType(i.str)}if(i!=null&&i.str){if(i.type=="utc"){h=new b(i.str)}if(i.type=="gen"){h=new g(i.str)}}else{if(this.type=="gen"){h=new g()}else{h=new b()}}if(h==null){throw new Error("wrong setting for Time")}this.TLV=h.tohex();return this.TLV};this.getEncodedHex=function(){return this.tohex()};if(f!=undefined){this.setByParam(f)}};KJUR.asn1.x509.Time_bak=function(f){KJUR.asn1.x509.Time_bak.superclass.constructor.call(this);var e=null,a=null,d=KJUR,c=d.asn1,b=c.DERUTCTime,g=c.DERGeneralizedTime;this.setTimeParams=function(h){this.timeParams=h};this.tohex=function(){var h=null;if(this.timeParams!=null){if(this.type=="utc"){h=new b(this.timeParams)}else{h=new g(this.timeParams)}}else{if(this.type=="utc"){h=new b()}else{h=new g()}}this.TLV=h.tohex();return this.TLV};this.getEncodedHex=function(){return this.tohex()};this.type="utc";if(f!==undefined){if(f.type!==undefined){this.type=f.type}else{if(f.str!==undefined){if(f.str.match(/^[0-9]{12}Z$/)){this.type="utc"}if(f.str.match(/^[0-9]{14}Z$/)){this.type="gen"}}}this.timeParams=f}};extendClass(KJUR.asn1.x509.Time,KJUR.asn1.ASN1Object);KJUR.asn1.x509.AlgorithmIdentifier=function(e){KJUR.asn1.x509.AlgorithmIdentifier.superclass.constructor.call(this);this.nameAlg=null;this.asn1Alg=null;this.asn1Params=null;this.paramEmpty=false;var b=KJUR,a=b.asn1,c=a.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV;this.tohex=function(){if(this.nameAlg===null&&this.asn1Alg===null){throw new Error("algorithm not specified")}if(this.nameAlg!==null){var f=null;for(var h in c){if(h===this.nameAlg){f=c[h]}}if(f!==null){this.hTLV=f;return this.hTLV}}if(this.nameAlg!==null&&this.asn1Alg===null){this.asn1Alg=a.x509.OID.name2obj(this.nameAlg)}var g=[this.asn1Alg];if(this.asn1Params!==null){g.push(this.asn1Params)}var i=new a.DERSequence({array:g});this.hTLV=i.tohex();return this.hTLV};this.getEncodedHex=function(){return this.tohex()};if(e!==undefined){if(e.name!==undefined){this.nameAlg=e.name}if(e.asn1params!==undefined){this.asn1Params=e.asn1params}if(e.paramempty!==undefined){this.paramEmpty=e.paramempty}}if(this.asn1Params===null&&this.paramEmpty===false&&this.nameAlg!==null){if(this.nameAlg.name!==undefined){this.nameAlg=this.nameAlg.name}var d=this.nameAlg.toLowerCase();if(d.substr(-7,7)!=="withdsa"&&d.substr(-9,9)!=="withecdsa"){this.asn1Params=new a.DERNull()}}};extendClass(KJUR.asn1.x509.AlgorithmIdentifier,KJUR.asn1.ASN1Object);KJUR.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV={SHAwithRSAandMGF1:"300d06092a864886f70d01010a3000",SHA256withRSAandMGF1:"303d06092a864886f70d01010a3030a00d300b0609608648016503040201a11a301806092a864886f70d010108300b0609608648016503040201a203020120",SHA384withRSAandMGF1:"303d06092a864886f70d01010a3030a00d300b0609608648016503040202a11a301806092a864886f70d010108300b0609608648016503040202a203020130",SHA512withRSAandMGF1:"303d06092a864886f70d01010a3030a00d300b0609608648016503040203a11a301806092a864886f70d010108300b0609608648016503040203a203020140"};KJUR.asn1.x509.GeneralName=function(f){KJUR.asn1.x509.GeneralName.superclass.constructor.call(this);var l={rfc822:"81",dns:"82",dn:"a4",uri:"86",ip:"87",otherName:"a0"},b=KJUR,h=b.asn1,d=h.x509,a=d.X500Name,g=d.OtherName,e=h.DERIA5String,i=h.DERPrintableString,k=h.DEROctetString,c=h.DERTaggedObject,m=h.ASN1Object,j=Error;this.params=null;this.setByParam=function(n){this.params=n};this.tohex=function(){var p=this.params;var A,y,q;var y=false;if(p.other!==undefined){A="a0",q=new g(p.other)}else{if(p.rfc822!==undefined){A="81";q=new e({str:p.rfc822})}else{if(p.dns!==undefined){A="82";q=new e({str:p.dns})}else{if(p.dn!==undefined){A="a4";y=true;if(typeof p.dn==="string"){q=new a({str:p.dn})}else{if(p.dn instanceof KJUR.asn1.x509.X500Name){q=p.dn}else{q=new a(p.dn)}}}else{if(p.ldapdn!==undefined){A="a4";y=true;q=new a({ldapstr:p.ldapdn})}else{if(p.certissuer!==undefined||p.certsubj!==undefined){A="a4";y=true;var n,o;var z=null;if(p.certsubj!==undefined){n=false;o=p.certsubj}else{n=true;o=p.certissuer}if(o.match(/^[0-9A-Fa-f]+$/)){z==o}if(o.indexOf("-----BEGIN ")!=-1){z=pemtohex(o)}if(z==null){throw new Error("certsubj/certissuer not cert")}var w=new X509();w.hex=z;var s;if(n){s=w.getIssuerHex()}else{s=w.getSubjectHex()}q=new m();q.hTLV=s}else{if(p.uri!==undefined){A="86";q=new e({str:p.uri})}else{if(p.ip!==undefined){A="87";var v;var t=p.ip;try{if(t.match(/^[0-9a-f]+$/)){var r=t.length;if(r==8||r==16||r==32||r==64){v=t}else{throw"err"}}else{v=iptohex(t)}}catch(u){throw new j("malformed IP address: "+p.ip+":"+u.message)}q=new k({hex:v})}else{throw new j("improper params")}}}}}}}}var B=new c({tag:A,explicit:y,obj:q});return B.tohex()};this.getEncodedHex=function(){return this.tohex()};if(f!==undefined){this.setByParam(f)}};extendClass(KJUR.asn1.x509.GeneralName,KJUR.asn1.ASN1Object);KJUR.asn1.x509.GeneralNames=function(d){KJUR.asn1.x509.GeneralNames.superclass.constructor.call(this);var a=null,c=KJUR,b=c.asn1;this.setByParamArray=function(g){for(var e=0;e<g.length;e++){var f=new b.x509.GeneralName(g[e]);this.asn1Array.push(f)}};this.tohex=function(){var e=new b.DERSequence({array:this.asn1Array});return e.tohex()};this.getEncodedHex=function(){return this.tohex()};this.asn1Array=new Array();if(typeof d!="undefined"){this.setByParamArray(d)}};extendClass(KJUR.asn1.x509.GeneralNames,KJUR.asn1.ASN1Object);KJUR.asn1.x509.OtherName=function(g){KJUR.asn1.x509.OtherName.superclass.constructor.call(this);var f=null,e=null,d=KJUR,c=d.asn1,h=c.DERObjectIdentifier,a=c.DERSequence,b=c.ASN1Util.newObject;this.params=null;this.setByParam=function(i){this.params=i};this.tohex=function(){var k=this.params;if(k.oid==undefined||k.value==undefined){throw new Error("oid or value not specified")}var l=new h({oid:k.oid});var i=b({tag:{tag:"a0",explicit:true,obj:k.value}});var j=new a({array:[l,i]});return j.tohex()};this.getEncodedHex=function(){return this.tohex()};if(g!==undefined){this.setByParam(g)}};extendClass(KJUR.asn1.x509.OtherName,KJUR.asn1.ASN1Object);KJUR.asn1.x509.OID=new function(){var a=KJUR.asn1.DERObjectIdentifier;this.name2oidList={"aes128-CBC":"2.16.840.1.101.3.4.1.2","aes256-CBC":"2.16.840.1.101.3.4.1.42",sha1:"1.3.14.3.2.26",sha256:"2.16.840.1.101.3.4.2.1",sha384:"2.16.840.1.101.3.4.2.2",sha512:"2.16.840.1.101.3.4.2.3",sha224:"2.16.840.1.101.3.4.2.4",md5:"1.2.840.113549.2.5",md2:"1.3.14.7.2.2.1",ripemd160:"1.3.36.3.2.1",hmacWithSHA1:"1.2.840.113549.2.7",hmacWithSHA224:"1.2.840.113549.2.8",hmacWithSHA256:"1.2.840.113549.2.9",hmacWithSHA384:"1.2.840.113549.2.10",hmacWithSHA512:"1.2.840.113549.2.11",MD2withRSA:"1.2.840.113549.1.1.2",MD4withRSA:"1.2.840.113549.1.1.3",MD5withRSA:"1.2.840.113549.1.1.4",SHA1withRSA:"1.2.840.113549.1.1.5","pkcs1-MGF":"1.2.840.113549.1.1.8",rsaPSS:"1.2.840.113549.1.1.10",SHA224withRSA:"1.2.840.113549.1.1.14",SHA256withRSA:"1.2.840.113549.1.1.11",SHA384withRSA:"1.2.840.113549.1.1.12",SHA512withRSA:"1.2.840.113549.1.1.13",SHA1withECDSA:"1.2.840.10045.4.1",SHA224withECDSA:"1.2.840.10045.4.3.1",SHA256withECDSA:"1.2.840.10045.4.3.2",SHA384withECDSA:"1.2.840.10045.4.3.3",SHA512withECDSA:"1.2.840.10045.4.3.4",dsa:"1.2.840.10040.4.1",SHA1withDSA:"1.2.840.10040.4.3",SHA224withDSA:"2.16.840.1.101.3.4.3.1",SHA256withDSA:"2.16.840.1.101.3.4.3.2",rsaEncryption:"1.2.840.113549.1.1.1",commonName:"2.5.4.3",countryName:"2.5.4.6",localityName:"2.5.4.7",stateOrProvinceName:"2.5.4.8",streetAddress:"2.5.4.9",organizationName:"2.5.4.10",organizationalUnitName:"2.5.4.11",domainComponent:"0.9.2342.19200300.100.1.25",userId:"0.9.2342.19200300.100.1.1",surname:"2.5.4.4",givenName:"2.5.4.42",title:"2.5.4.12",distinguishedName:"2.5.4.49",emailAddress:"1.2.840.113549.1.9.1",description:"2.5.4.13",businessCategory:"2.5.4.15",postalCode:"2.5.4.17",uniqueIdentifier:"2.5.4.45",organizationIdentifier:"2.5.4.97",jurisdictionOfIncorporationL:"1.3.6.1.4.1.311.60.2.1.1",jurisdictionOfIncorporationSP:"1.3.6.1.4.1.311.60.2.1.2",jurisdictionOfIncorporationC:"1.3.6.1.4.1.311.60.2.1.3",subjectDirectoryAttributes:"2.5.29.9",subjectKeyIdentifier:"2.5.29.14",keyUsage:"2.5.29.15",subjectAltName:"2.5.29.17",issuerAltName:"2.5.29.18",basicConstraints:"2.5.29.19",cRLNumber:"2.5.29.20",cRLReason:"2.5.29.21",nameConstraints:"2.5.29.30",cRLDistributionPoints:"2.5.29.31",certificatePolicies:"2.5.29.32",anyPolicy:"2.5.29.32.0",policyMappings:"2.5.29.33",authorityKeyIdentifier:"2.5.29.35",policyConstraints:"2.5.29.36",extKeyUsage:"2.5.29.37",inhibitAnyPolicy:"2.5.29.54",authorityInfoAccess:"1.3.6.1.5.5.7.1.1",ocsp:"1.3.6.1.5.5.7.48.1",ocspBasic:"1.3.6.1.5.5.7.48.1.1",ocspNonce:"1.3.6.1.5.5.7.48.1.2",ocspNoCheck:"1.3.6.1.5.5.7.48.1.5",caIssuers:"1.3.6.1.5.5.7.48.2",anyExtendedKeyUsage:"2.5.29.37.0",serverAuth:"1.3.6.1.5.5.7.3.1",clientAuth:"1.3.6.1.5.5.7.3.2",codeSigning:"1.3.6.1.5.5.7.3.3",emailProtection:"1.3.6.1.5.5.7.3.4",timeStamping:"1.3.6.1.5.5.7.3.8",ocspSigning:"1.3.6.1.5.5.7.3.9",smtpUTF8Mailbox:"1.3.6.1.5.5.7.8.9",dateOfBirth:"1.3.6.1.5.5.7.9.1",placeOfBirth:"1.3.6.1.5.5.7.9.2",gender:"1.3.6.1.5.5.7.9.3",countryOfCitizenship:"1.3.6.1.5.5.7.9.4",countryOfResidence:"1.3.6.1.5.5.7.9.5",ecPublicKey:"1.2.840.10045.2.1","P-256":"1.2.840.10045.3.1.7",secp256r1:"1.2.840.10045.3.1.7",secp256k1:"1.3.132.0.10",secp384r1:"1.3.132.0.34",secp521r1:"1.3.132.0.35",pkcs5PBES2:"1.2.840.113549.1.5.13",pkcs5PBKDF2:"1.2.840.113549.1.5.12","des-EDE3-CBC":"1.2.840.113549.3.7",data:"1.2.840.113549.1.7.1","signed-data":"1.2.840.113549.1.7.2","enveloped-data":"1.2.840.113549.1.7.3","digested-data":"1.2.840.113549.1.7.5","encrypted-data":"1.2.840.113549.1.7.6","authenticated-data":"1.2.840.113549.1.9.16.1.2",tstinfo:"1.2.840.113549.1.9.16.1.4",signingCertificate:"1.2.840.113549.1.9.16.2.12",timeStampToken:"1.2.840.113549.1.9.16.2.14",signaturePolicyIdentifier:"1.2.840.113549.1.9.16.2.15",etsArchiveTimeStamp:"1.2.840.113549.1.9.16.2.27",signingCertificateV2:"1.2.840.113549.1.9.16.2.47",etsArchiveTimeStampV2:"1.2.840.113549.1.9.16.2.48",extensionRequest:"1.2.840.113549.1.9.14",contentType:"1.2.840.113549.1.9.3",messageDigest:"1.2.840.113549.1.9.4",signingTime:"1.2.840.113549.1.9.5",counterSignature:"1.2.840.113549.1.9.6",archiveTimeStampV3:"0.4.0.1733.2.4",pdfRevocationInfoArchival:"1.2.840.113583.1.1.8",adobeTimeStamp:"1.2.840.113583.1.1.9.1",smimeMailboxLegacy:"2.23.140.1.5.1.1",smimeMailboxMulti:"2.23.140.1.5.1.2",smimeMailboxStrict:"2.23.140.1.5.1.3",smimeOrganizationLegacy:"2.23.140.1.5.2.1",smimeOrganizationMulti:"2.23.140.1.5.2.2",smimeOrganizationStrict:"2.23.140.1.5.2.3",smimeSponsorLegacy:"2.23.140.1.5.3.1",smimeSponsorMulti:"2.23.140.1.5.3.2",smimeSponsorStrict:"2.23.140.1.5.3.3",smimeIndividualLegacy:"2.23.140.1.5.4.1",smimeIndividualMulti:"2.23.140.1.5.4.2",smimeIndividualStrict:"2.23.140.1.5.4.3",};this.atype2oidList={CN:"2.5.4.3",L:"2.5.4.7",ST:"2.5.4.8",O:"2.5.4.10",OU:"2.5.4.11",C:"2.5.4.6",STREET:"2.5.4.9",DC:"0.9.2342.19200300.100.1.25",UID:"0.9.2342.19200300.100.1.1",SN:"2.5.4.4",T:"2.5.4.12",GN:"2.5.4.42",DN:"2.5.4.49",E:"1.2.840.113549.1.9.1",description:"2.5.4.13",businessCategory:"2.5.4.15",postalCode:"2.5.4.17",serialNumber:"2.5.4.5",uniqueIdentifier:"2.5.4.45",organizationIdentifier:"2.5.4.97",jurisdictionOfIncorporationL:"1.3.6.1.4.1.311.60.2.1.1",jurisdictionOfIncorporationSP:"1.3.6.1.4.1.311.60.2.1.2",jurisdictionOfIncorporationC:"1.3.6.1.4.1.311.60.2.1.3"};this.objCache={};this.name2obj=function(b){if(typeof this.objCache[b]!="undefined"){return this.objCache[b]}if(typeof this.name2oidList[b]=="undefined"){throw"Name of ObjectIdentifier not defined: "+b}var c=this.name2oidList[b];var d=new a({oid:c});this.objCache[b]=d;return d};this.atype2obj=function(b){if(this.objCache[b]!==undefined){return this.objCache[b]}var c;if(b.match(/^\d+\.\d+\.[0-9.]+$/)){c=b}else{if(this.atype2oidList[b]!==undefined){c=this.atype2oidList[b]}else{if(this.name2oidList[b]!==undefined){c=this.name2oidList[b]}else{throw new Error("AttributeType name undefined: "+b)}}}var d=new a({oid:c});this.objCache[b]=d;return d};this.registerOIDs=function(b){if(!this.checkOIDs(b)){return}for(var c in b){this.name2oidList[c]=b[c]}};this.checkOIDs=function(b){try{var d=Object.keys(b);if(d.length==0){return false}d.map(function(g,e,h){var f=this[g];if(!f.match(/^[0-2]\.[0-9.]+$/)){throw new Error("value is not OID")}},b);return true}catch(c){return false}}};KJUR.asn1.x509.OID.oid2name=function(b){var c=KJUR.asn1.x509.OID.name2oidList;for(var a in c){if(c[a]==b){return a}}return""};KJUR.asn1.x509.OID.oid2atype=function(b){var c=KJUR.asn1.x509.OID.atype2oidList;for(var a in c){if(c[a]==b){return a}}return b};KJUR.asn1.x509.OID.name2oid=function(a){if(a.match(/^[0-9.]+$/)){return a}var b=KJUR.asn1.x509.OID.name2oidList;if(b[a]===undefined){return""}return b[a]};KJUR.asn1.x509.X509Util={};KJUR.asn1.x509.X509Util.newCertPEM=function(e){var d=KJUR.asn1.x509,b=d.TBSCertificate,a=d.Certificate;var c=new a(e);return c.getPEM()};
if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.cms=="undefined"||!KJUR.asn1.cms){KJUR.asn1.cms={}}KJUR.asn1.cms.Attribute=function(f){var e=Error,d=KJUR,c=d.asn1,b=c.DERSequence,a=c.DERSet,g=c.DERObjectIdentifier;this.params=null;this.typeOid=null;this.setByParam=function(h){this.params=h};this.getValueArray=function(){throw new e("not yet implemented abstract")};this.tohex=function(){var j=new g({oid:this.typeOid});var h=new a({array:this.getValueArray()});var i=new b({array:[j,h]});return i.tohex()};this.getEncodedHex=function(){return this.tohex()}};extendClass(KJUR.asn1.cms.Attribute,KJUR.asn1.ASN1Object);KJUR.asn1.cms.ContentType=function(c){var b=KJUR,a=b.asn1;a.cms.ContentType.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.3";this.getValueArray=function(){var d=new a.DERObjectIdentifier(this.params.type);return[d]};if(c!=undefined){this.setByParam(c)}};extendClass(KJUR.asn1.cms.ContentType,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.MessageDigest=function(e){var b=KJUR,a=b.asn1,c=a.DEROctetString,d=a.cms;d.MessageDigest.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.4";this.getValueArray=function(){var f=new c(this.params);return[f]};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cms.MessageDigest,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.SigningTime=function(c){var b=KJUR,a=b.asn1;a.cms.SigningTime.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.5";this.getValueArray=function(){var d=new a.x509.Time(this.params);return[d]};if(c!=undefined){this.setByParam(c)}};extendClass(KJUR.asn1.cms.SigningTime,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.SigningCertificate=function(h){var e=Error,d=KJUR,c=d.asn1,b=c.DERSequence,g=c.cms,a=g.ESSCertID,f=d.crypto;g.SigningCertificate.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.16.2.12";this.getValueArray=function(){if(this.params==null||this.params==undefined||this.params.array==undefined){throw new e("parameter 'array' not specified")}var o=this.params.array;var k=[];for(var l=0;l<o.length;l++){var n=o[l];if(h.hasis==false&&(typeof n=="string"&&(n.indexOf("-----BEGIN")!=-1||ASN1HEX.isASN1HEX(n)))){n={cert:n}}if(n.hasis!=false&&h.hasis==false){n.hasis=false}k.push(new a(n))}var j=new b({array:k});var m=new b({array:[j]});return[m]};if(h!=undefined){this.setByParam(h)}};extendClass(KJUR.asn1.cms.SigningCertificate,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.ESSCertID=function(g){KJUR.asn1.cms.ESSCertID.superclass.constructor.call(this);var d=Error,c=KJUR,b=c.asn1,f=b.DEROctetString,a=b.DERSequence,e=b.cms.IssuerSerial;this.params=null;this.getCertHash=function(k,h){if(k.hash!=undefined){return k.hash}if(typeof k=="string"&&k.indexOf("-----BEGIN")==-1&&!ASN1HEX.isASN1HEX(k)){return k}var i;if(typeof k=="string"){i=k}else{if(k.cert!=undefined){i=k.cert}else{throw new d("hash nor cert unspecified")}}var j;if(i.indexOf("-----BEGIN")!=-1){j=pemtohex(i)}else{j=i}if(typeof k=="string"){if(k.indexOf("-----BEGIN")!=-1){j=pemtohex(k)}else{if(ASN1HEX.isASN1HEX(k)){j=k}}}var l;if(k.alg!=undefined){l=k.alg}else{if(h!=undefined){l=h}else{throw new d("hash alg unspecified")}}return c.crypto.Util.hashHex(j,l)};this.tohex=function(){var k=this.params;var j=this.getCertHash(k,"sha1");var h=[];h.push(new f({hex:j}));if((typeof k=="string"&&k.indexOf("-----BEGIN")!=-1)||(k.cert!=undefined&&k.hasis!=false)||(k.issuer!=undefined&&k.serial!=undefined)){h.push(new e(k))}var i=new a({array:h});return i.tohex()};this.getEncodedHex=function(){return this.tohex()};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.cms.ESSCertID,KJUR.asn1.ASN1Object);KJUR.asn1.cms.SigningCertificateV2=function(d){var h=Error,a=KJUR,g=a.asn1,e=g.DERSequence,b=g.x509,i=g.cms,c=i.ESSCertIDv2,f=a.crypto;i.SigningCertificateV2.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.16.2.47";this.getValueArray=function(){if(this.params==null||this.params==undefined||this.params.array==undefined){throw new h("parameter 'array' not specified")}var o=this.params.array;var l=[];for(var m=0;m<o.length;m++){var n=o[m];if((d.alg!=undefined||d.hasis==false)&&(typeof n=="string"&&(n.indexOf("-----BEGIN")!=-1||ASN1HEX.isASN1HEX(n)))){n={cert:n}}if(n.alg==undefined&&d.alg!=undefined){n.alg=d.alg}if(n.hasis!=false&&d.hasis==false){n.hasis=false}l.push(new c(n))}var k=new e({array:l});var j=new e({array:[k]});return[j]};if(d!=undefined){this.setByParam(d)}};extendClass(KJUR.asn1.cms.SigningCertificateV2,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.ESSCertIDv2=function(h){KJUR.asn1.cms.ESSCertIDv2.superclass.constructor.call(this);var d=Error,c=KJUR,b=c.asn1,f=b.DEROctetString,a=b.DERSequence,e=b.cms.IssuerSerial,g=b.x509.AlgorithmIdentifier;this.params=null;this.tohex=function(){var l=this.params;var k=this.getCertHash(l,"sha256");var i=[];if(l.alg!=undefined&&l.alg!="sha256"){i.push(new g({name:l.alg}))}i.push(new f({hex:k}));if((typeof l=="string"&&l.indexOf("-----BEGIN")!=-1)||(l.cert!=undefined&&l.hasis!=false)||(l.issuer!=undefined&&l.serial!=undefined)){i.push(new e(l))}var j=new a({array:i});return j.tohex()};this.getEncodedHex=function(){return this.tohex()};if(h!=undefined){this.setByParam(h)}};extendClass(KJUR.asn1.cms.ESSCertIDv2,KJUR.asn1.cms.ESSCertID);KJUR.asn1.cms.IssuerSerial=function(e){var i=Error,c=KJUR,h=c.asn1,g=h.DERInteger,f=h.DERSequence,j=h.cms,d=h.x509,a=d.GeneralNames,b=X509;j.IssuerSerial.superclass.constructor.call(this);this.setByParam=function(k){this.params=k};this.tohex=function(){var p=this.params;var l,r;if((typeof p=="string"&&p.indexOf("-----BEGIN")!=-1)||p.cert!=undefined){var n;if(p.cert!=undefined){n=p.cert}else{n=p}var k=new b();k.readCertPEM(n);l=k.getIssuer();r={hex:k.getSerialNumberHex()}}else{if(p.issuer!=undefined&&p.serial){l=p.issuer;r=p.serial}else{throw new i("cert or issuer and serial parameter not specified")}}var q=new a([{dn:l}]);var o=new g(r);var m=new f({array:[q,o]});return m.tohex()};this.getEncodedHex=function(){return this.tohex()};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cms.IssuerSerial,KJUR.asn1.ASN1Object);KJUR.asn1.cms.SignerIdentifier=function(f){var c=KJUR,i=c.asn1,h=i.DERInteger,g=i.DERSequence,l=i.cms,k=l.IssuerAndSerialNumber,d=l.SubjectKeyIdentifier,e=i.x509,a=e.X500Name,b=X509,j=Error;l.SignerIdentifier.superclass.constructor.call(this);this.params=null;this.tohex=function(){var o=this.params;if(o.type=="isssn"){var m=new k(o);return m.tohex()}else{if(o.type=="skid"){var n=new d(o);return n.tohex()}else{throw new Error("wrong property for isssn or skid")}}};this.getEncodedHex=function(){return this.tohex()};if(f!=undefined){this.setByParam(f)}};extendClass(KJUR.asn1.cms.SignerIdentifier,KJUR.asn1.ASN1Object);KJUR.asn1.cms.IssuerAndSerialNumber=function(e){var c=KJUR,h=c.asn1,g=h.DERInteger,f=h.DERSequence,j=h.cms,d=h.x509,a=d.X500Name,b=X509,i=Error;j.IssuerAndSerialNumber.superclass.constructor.call(this);this.params=null;this.tohex=function(){var p=this.params;var l,r;if((typeof p=="string"&&p.indexOf("-----BEGIN")!=-1)||p.cert!=undefined){var n;if(p.cert!=undefined){n=p.cert}else{n=p}var k=new b();k.readCertPEM(n);l=k.getIssuer();r={hex:k.getSerialNumberHex()}}else{if(p.issuer!=undefined&&p.serial){l=p.issuer;r=p.serial}else{throw new i("cert or issuer and serial parameter not specified")}}var q=new a(l);var o=new g(r);var m=new f({array:[q,o]});return m.tohex()};this.getEncodedHex=function(){return this.tohex()};this.setByParam=function(k){this.params=k};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cms.IssuerAndSerialNumber,KJUR.asn1.ASN1Object);KJUR.asn1.cms.SubjectKeyIdentifier=function(g){var d=KJUR,k=d.asn1,i=k.DERInteger,h=k.DERSequence,j=k.ASN1Util.newObject,m=k.cms,f=m.IssuerAndSerialName,c=m.SubjectKeyIdentifier,e=k.x509,a=e.X500Name,b=X509,l=Error;m.SubjectKeyIdentifier.superclass.constructor.call(this);this.tohex=function(){var r=this.params;if(r.cert==undefined&&r.skid==undefined){throw new l("property cert nor skid undefined")}var q;if(r.cert!=undefined){var n=new b(r.cert);var o=n.getExtSubjectKeyIdentifier();q=o.kid.hex}else{if(r.skid!=undefined){q=r.skid}}var p=j({tag:{tage:"a0",obj:{octstr:{hex:q}}}});return p.tohex()};this.getEncodedHex=function(){return this.tohex()};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.cms.SubjectKeyIdentifier,KJUR.asn1.ASN1Object);KJUR.asn1.cms.AttributeList=function(f){var d=Error,c=KJUR,b=c.asn1,a=b.DERSet,e=b.cms;e.AttributeList.superclass.constructor.call(this);this.params=null;this.hTLV=null;this.setByParam=function(g){this.params=g};this.tohex=function(){var o=this.params;if(this.hTLV!=null){return this.hTLV}var m=true;if(o.sortflag!=undefined){m=o.sortflag}var j=o.array;var g=[];for(var l=0;l<j.length;l++){var n=j[l];var k=n.attr;if(k=="contentType"){g.push(new e.ContentType(n))}else{if(k=="messageDigest"){g.push(new e.MessageDigest(n))}else{if(k=="signingTime"){g.push(new e.SigningTime(n))}else{if(k=="signingCertificate"){g.push(new e.SigningCertificate(n))}else{if(k=="signingCertificateV2"){g.push(new e.SigningCertificateV2(n))}else{if(k=="signaturePolicyIdentifier"){g.push(new KJUR.asn1.cades.SignaturePolicyIdentifier(n))}else{if(k=="signatureTimeStamp"||k=="timeStampToken"){g.push(new KJUR.asn1.cades.SignatureTimeStamp(n))}else{throw new d("unknown attr: "+k)}}}}}}}}var h=new a({array:g,sortflag:m});this.hTLV=h.tohex();return this.hTLV};this.getEncodedHex=function(){return this.tohex()};if(f!=undefined){this.setByParam(f)}};extendClass(KJUR.asn1.cms.AttributeList,KJUR.asn1.ASN1Object);KJUR.asn1.cms.SignerInfo=function(q){var n=Error,r=KJUR,i=r.asn1,c=i.DERInteger,f=i.DEROctetString,h=i.DERSequence,m=i.DERTaggedObject,k=i.cms,p=k.SignerIdentifier,l=k.AttributeList,g=k.ContentType,e=k.EncapsulatedContentInfo,d=k.MessageDigest,j=k.SignedData,a=i.x509,s=a.AlgorithmIdentifier,b=r.crypto,o=KEYUTIL;k.SignerInfo.superclass.constructor.call(this);this.params=null;this.sign=function(){var y=this.params;var x=y.sigalg;var u=(new l(y.sattrs)).tohex();var v=o.getKey(y.signkey);var w=new b.Signature({alg:x});w.init(v);w.updateHex(u);var t=w.sign();y.sighex=t};this.tohex=function(){var w=this.params;var t=[];t.push(new c({"int":w.version}));t.push(new p(w.id));t.push(new s({name:w.hashalg}));if(w.sattrs!=undefined){var x=new l(w.sattrs);try{t.push(new m({tag:"a0",explicit:false,obj:x}))}catch(v){throw new n("si sattr error: "+v)}}if(w.sigalgfield!=undefined){t.push(new s({name:w.sigalgfield}))}else{t.push(new s({name:w.sigalg}))}if(w.sighex==undefined&&w.signkey!=undefined){this.sign()}t.push(new f({hex:w.sighex}));if(w.uattrs!=undefined){var x=new l(w.uattrs);try{t.push(new m({tag:"a1",explicit:false,obj:x}))}catch(v){throw new n("si uattr error: "+v)}}var u=new h({array:t});return u.tohex()};this.getEncodedHex=function(){return this.tohex()};if(q!=undefined){this.setByParam(q)}};extendClass(KJUR.asn1.cms.SignerInfo,KJUR.asn1.ASN1Object);KJUR.asn1.cms.EncapsulatedContentInfo=function(g){var c=KJUR,b=c.asn1,e=b.DERTaggedObject,a=b.DERSequence,h=b.DERObjectIdentifier,d=b.DEROctetString,f=b.cms;f.EncapsulatedContentInfo.superclass.constructor.call(this);this.params=null;this.tohex=function(){var m=this.params;var i=[];i.push(new h(m.type));if(m.content!=undefined&&(m.content.hex!=undefined||m.content.str!=undefined)&&m.isDetached!=true){var k=new d(m.content);var l=new e({tag:"a0",explicit:true,obj:k});i.push(l)}var j=new a({array:i});return j.tohex()};this.getEncodedHex=function(){return this.tohex()};this.setByParam=function(i){this.params=i};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.cms.EncapsulatedContentInfo,KJUR.asn1.ASN1Object);KJUR.asn1.cms.ContentInfo=function(g){var c=KJUR,b=c.asn1,d=b.DERTaggedObject,a=b.DERSequence,h=b.DERObjectIdentifier,f=b.x509,e=f.OID.name2obj;KJUR.asn1.cms.ContentInfo.superclass.constructor.call(this);this.params=null;this.tohex=function(){var l=this.params;var i=[];i.push(new h(l.type));var k=new d({tag:"a0",explicit:true,obj:l.obj});i.push(k);var j=new a({array:i});return j.tohex()};this.getEncodedHex=function(){return this.tohex()};this.setByParam=function(i){this.params=i};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.cms.ContentInfo,KJUR.asn1.ASN1Object);KJUR.asn1.cms.SignedData=function(e){var j=Error,a=KJUR,h=a.asn1,m=h.ASN1Object,g=h.DERInteger,p=h.DERSet,f=h.DERSequence,b=h.DERTaggedObject,o=h.cms,l=o.EncapsulatedContentInfo,d=o.SignerInfo,q=o.ContentInfo,k=o.CertificateSet,i=o.RevocationInfoChoices,c=h.x509,n=c.AlgorithmIdentifier;KJUR.asn1.cms.SignedData.superclass.constructor.call(this);this.params=null;this.checkAndFixParam=function(){var r=this.params;this._setDigestAlgs(r);this._setContentTypeByEContent(r);this._setMessageDigestByEContent(r);this._setSignerInfoVersion(r);this._setSignedDataVersion(r)};this._setDigestAlgs=function(v){var u={};var t=v.sinfos;for(var r=0;r<t.length;r++){var s=t[r];u[s.hashalg]=1}v.hashalgs=Object.keys(u).sort()};this._setContentTypeByEContent=function(w){var u=w.econtent.type;var v=w.sinfos;for(var r=0;r<v.length;r++){var t=v[r];var s=this._getAttrParamByName(t,"contentType");s.type=u}};this._setMessageDigestByEContent=function(r){var v=r.econtent;var y=r.econtent.type;var x=v.content.hex;if(x==undefined&&v.type=="data"&&v.content.str!=undefined){x=rstrtohex(v.content.str)}var A=r.sinfos;for(var u=0;u<A.length;u++){var t=A[u];var s=t.hashalg;var z=this._getAttrParamByName(t,"messageDigest");var w=KJUR.crypto.Util.hashHex(x,s);z.hex=w}};this._getAttrParamByName=function(t,s){var u=t.sattrs.array;for(var r=0;r<u.length;r++){if(u[r].attr==s){return u[r]}}};this._setSignerInfoVersion=function(v){var t=v.sinfos;for(var r=0;r<t.length;r++){var s=t[r];var u=1;if(s.id.type=="skid"){u=3}s.version=u}};this._setSignedDataVersion=function(s){var r=this._getSignedDataVersion(s);s.version=r};this._getSignedDataVersion=function(w){if(w.revinfos!=undefined){var r=w.revinfos;for(var t=0;t<r.length;t++){var s=r[t];if(s.ocsp!=undefined){return 5}}}var v=w.sinfos;for(var t=0;t<v.length;t++){var u=w.sinfos[t];if(u.version==3){return 3}}if(w.econtent.type!="data"){return 3}return 1};this.tohex=function(){var y=this.params;if(this.getEncodedHexPrepare!=undefined){this.getEncodedHexPrepare()}if(y.fixed!=true){this.checkAndFixParam()}var r=[];r.push(new g({"int":y.version}));var w=[];for(var v=0;v<y.hashalgs.length;v++){var t=y.hashalgs[v];w.push(new n({name:t}))}r.push(new p({array:w}));r.push(new l(y.econtent));if(y.certs!=undefined){r.push(new k(y.certs))}if(y.revinfos!=undefined){r.push(new i(y.revinfos))}var u=[];for(var v=0;v<y.sinfos.length;v++){var x=y.sinfos[v];u.push(new d(x))}r.push(new p({array:u}));var s=new f({array:r});return s.tohex()};this.getEncodedHex=function(){return this.tohex()};this.getContentInfo=function(){var r=new q({type:"signed-data",obj:this});return r};this.getContentInfoEncodedHex=function(){return this.getContentInfo().tohex()};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cms.SignedData,KJUR.asn1.ASN1Object);KJUR.asn1.cms.CertificateSet=function(f){KJUR.asn1.cms.CertificateSet.superclass.constructor.call(this);var c=Error,b=KJUR.asn1,e=b.DERTaggedObject,a=b.DERSet,d=b.ASN1Object;this.params=null;this.tohex=function(){var j=this.params;var p=[];var q;if(j instanceof Array){q=j}else{if(j.array!=undefined){q=j.array}else{throw new c("cert array not specified")}}for(var k=0;k<q.length;k++){var l=q[k];var n=pemtohex(l);var g=new d();g.hTLV=n;p.push(g)}var m={array:p};if(j.sortflag==false){m.sortflag=false}var o=new a(m);var h=new e({tag:"a0",explicit:false,obj:o});return h.tohex()};this.getEncodedHex=function(){return this.tohex()};if(f!=undefined){this.setByParam(f)}};extendClass(KJUR.asn1.cms.CertificateSet,KJUR.asn1.ASN1Object);KJUR.asn1.cms.RevocationInfoChoices=function(a){KJUR.asn1.cms.RevocationInfoChoices.superclass.constructor.call(this);this.params=null;this.tohex=function(){var e=this.params;if(!e instanceof Array){throw new Error("params is not array")}var b=[];for(var c=0;c<e.length;c++){b.push(new KJUR.asn1.cms.RevocationInfoChoice(e[c]))}var d=KJUR.asn1.ASN1Util.newObject({tag:{tagi:"a1",obj:{set:b}}});return d.tohex()};this.getEncodedHex=function(){return this.tohex()};if(a!=undefined){this.setByParam(a)}};extendClass(KJUR.asn1.cms.RevocationInfoChoices,KJUR.asn1.ASN1Object);KJUR.asn1.cms.RevocationInfoChoice=function(a){KJUR.asn1.cms.RevocationInfoChoice.superclass.constructor.call(this);this.params=null;this.tohex=function(){var d=this.params;if(d.crl!=undefined&&typeof d.crl=="string"){var b=d.crl;if(d.crl.indexOf("-----BEGIN")!=-1){b=pemtohex(d.crl)}return b}else{if(d.ocsp!=undefined){var c=KJUR.asn1.ASN1Util.newObject({tag:{tagi:"a1",obj:new KJUR.asn1.cms.OtherRevocationFormat(d)}});return c.tohex()}else{throw new Error("property crl or ocsp undefined")}}};this.getEncodedHex=function(){return this.tohex()};if(a!=undefined){this.setByParam(a)}};extendClass(KJUR.asn1.cms.RevocationInfoChoice,KJUR.asn1.ASN1Object);KJUR.asn1.cms.OtherRevocationFormat=function(f){KJUR.asn1.cms.OtherRevocationFormat.superclass.constructor.call(this);var d=Error,c=KJUR,b=c.asn1,a=b.ASN1Util.newObject,e=c.lang.String.isHex;this.params=null;this.tohex=function(){var h=this.params;if(h.ocsp==undefined){throw new d("property ocsp not specified")}if(!e(h.ocsp)||!ASN1HEX.isASN1HEX(h.ocsp)){throw new d("ocsp value not ASN.1 hex string")}var g=a({seq:[{oid:"1.3.6.1.5.5.7.16.2"},{asn1:{tlv:h.ocsp}}]});return g.tohex()};this.getEncodedHex=function(){return this.tohex()};if(f!=undefined){this.setByParam(f)}};extendClass(KJUR.asn1.cms.OtherRevocationFormat,KJUR.asn1.ASN1Object);KJUR.asn1.cms.CMSUtil=new function(){};KJUR.asn1.cms.CMSUtil.newSignedData=function(a){return new KJUR.asn1.cms.SignedData(a)};KJUR.asn1.cms.CMSUtil.verifySignedData=function(n){var C=KJUR,p=C.asn1,s=p.cms,D=s.SignerInfo,q=s.SignedData,y=s.SigningTime,b=s.SigningCertificate,d=s.SigningCertificateV2,A=p.cades,u=A.SignaturePolicyIdentifier,i=C.lang.String.isHex,v=ASN1HEX,h=v.getVbyList,a=v.getTLVbyList,t=v.getIdxbyList,z=v.getChildIdx,c=v.getTLV,B=v.oidname,j=C.crypto.Util.hashHex;if(n.cms===undefined&&!i(n.cms)){}var E=n.cms;var g=function(J,H){var G;for(var I=3;I<6;I++){G=t(J,0,[1,0,I]);if(G!==undefined){var F=J.substr(G,2);if(F==="a0"){H.certsIdx=G}if(F==="a1"){H.revinfosIdx=G}if(F==="31"){H.signerinfosIdx=G}}}};var l=function(I,F){var H=F.signerinfosIdx;if(H===undefined){return}var L=z(I,H);F.signerInfoIdxList=L;for(var G=0;G<L.length;G++){var K=L[G];var J={idx:K};k(I,J);F.signerInfos.push(J)}};var k=function(I,J){var F=J.idx;J.signerid_issuer1=a(I,F,[1,0],"30");J.signerid_serial1=h(I,F,[1,1],"02");J.hashalg=B(h(I,F,[2,0],"06"));var H=t(I,F,[3],"a0");J.idxSignedAttrs=H;f(I,J,H);var G=z(I,F);var K=G.length;if(K<6){throw"malformed SignerInfo"}J.sigalg=B(h(I,F,[K-2,0],"06"));J.sigval=h(I,F,[K-1],"04")};var f=function(L,M,F){var J=z(L,F);M.signedAttrIdxList=J;for(var K=0;K<J.length;K++){var I=J[K];var G=h(L,I,[0],"06");var H;if(G==="2a864886f70d010905"){H=hextoutf8(h(L,I,[1,0]));M.saSigningTime=H}else{if(G==="2a864886f70d010904"){H=h(L,I,[1,0],"04");M.saMessageDigest=H}}}};var w=function(G,F){if(h(G,0,[0],"06")!=="2a864886f70d010702"){return F}F.cmsType="signedData";F.econtent=h(G,0,[1,0,2,1,0]);g(G,F);F.signerInfos=[];l(G,F)};var o=function(J,F){var G=F.parse.signerInfos;var L=G.length;var K=true;for(var I=0;I<L;I++){var H=G[I];e(J,F,H,I);if(!H.isValid){K=false}}F.isValid=K};var x=function(F,Q,J,P){var N=Q.parse.certsIdx;var H;if(Q.certs===undefined){H=[];Q.certkeys=[];var K=z(F,N);for(var I=0;I<K.length;I++){var M=c(F,K[I]);var O=new X509();O.readCertHex(M);H[I]=O;Q.certkeys[I]=O.getPublicKey()}Q.certs=H}else{H=Q.certs}Q.cccc=H.length;Q.cccci=K.length;for(var I=0;I<H.length;I++){var L=O.getIssuerHex();var G=O.getSerialNumberHex();if(J.signerid_issuer1===L&&J.signerid_serial1===G){J.certkey_idx=I}}};var e=function(F,R,I,N){I.verifyDetail={};var Q=I.verifyDetail;var K=R.parse.econtent;var G=I.hashalg;var L=I.saMessageDigest;Q.validMessageDigest=false;if(j(K,G)===L){Q.validMessageDigest=true}x(F,R,I,N);Q.validSignatureValue=false;var H=I.sigalg;var M="31"+c(F,I.idxSignedAttrs).substr(2);I.signedattrshex=M;var J=R.certs[I.certkey_idx].getPublicKey();var P=new KJUR.crypto.Signature({alg:H});P.init(J);P.updateHex(M);var O=P.verify(I.sigval);Q.validSignatureValue_isValid=O;if(O===true){Q.validSignatureValue=true}I.isValid=false;if(Q.validMessageDigest&&Q.validSignatureValue){I.isValid=true}};var m=function(){};var r={isValid:false,parse:{}};w(E,r.parse);o(E,r);return r};KJUR.asn1.cms.CMSParser=function(){var g=Error,a=X509,h=new a(),l=ASN1HEX,i=l.getV,b=l.getTLV,f=l.getIdxbyList,c=l.getTLVbyList,d=l.getTLVbyListEx,e=l.getVbyList,k=l.getVbyListEx,j=l.getChildIdx;this.getCMSSignedData=function(m){var o=c(m,0,[1,0]);var n=this.getSignedData(o);return n};this.getSignedData=function(o){var q=j(o,0);var v={};var p=i(o,q[0]);var n=parseInt(p,16);v.version=n;var r=b(o,q[1]);v.hashalgs=this.getHashAlgArray(r);var t=b(o,q[2]);v.econtent=this.getEContent(t);var m=d(o,0,["[0]"]);if(m!=null){v.certs=this.getCertificateSet(m)}var u=d(o,0,["[1]"]);if(u!=null){}var s=d(o,0,[3]);v.sinfos=this.getSignerInfos(s);return v};this.getHashAlgArray=function(s){var q=j(s,0);var m=new a();var n=[];for(var r=0;r<q.length;r++){var p=b(s,q[r]);var o=m.getAlgorithmIdentifierName(p);n.push(o)}return n};this.getEContent=function(m){var n={};var p=e(m,0,[0]);var o=e(m,0,[1,0]);n.type=KJUR.asn1.x509.OID.oid2name(ASN1HEX.hextooidstr(p));n.content={hex:o};return n};this.getSignerInfos=function(p){var r=[];var m=j(p,0);for(var n=0;n<m.length;n++){var o=b(p,m[n]);var q=this.getSignerInfo(o);r.push(q)}return r};this.getSignerInfo=function(s){var y={};var u=j(s,0);var q=l.getInt(s,u[0],-1);if(q!=-1){y.version=q}var t=b(s,u[1]);var p=this.getIssuerAndSerialNumber(t);y.id=p;var z=b(s,u[2]);var n=h.getAlgorithmIdentifierName(z);y.hashalg=n;var w=d(s,0,["[0]"]);if(w!=null){var A=this.getAttributeList(w);y.sattrs=A}var m=d(s,0,[3]);var x=h.getAlgorithmIdentifierName(m);y.sigalg=x;var o=k(s,0,[4]);y.sighex=o;var r=d(s,0,["[1]"]);if(r!=null){var v=this.getAttributeList(r);y.uattrs=v}return y};this.getSignerIdentifier=function(m){if(m.substr(0,2)=="30"){return this.getIssuerAndSerialNumber(m)}else{throw new Error("SKID of signerIdentifier not supported")}};this.getIssuerAndSerialNumber=function(n){var o={type:"isssn"};var m=j(n,0);var p=b(n,m[0]);o.issuer=h.getX500Name(p);var q=i(n,m[1]);o.serial={hex:q};return o};this.getAttributeList=function(q){var m=[];var n=j(q,0);for(var o=0;o<n.length;o++){var p=b(q,n[o]);var r=this.getAttribute(p);m.push(r)}return{array:m}};this.getAttribute=function(p){var t={};var q=j(p,0);var o=l.getOID(p,q[0]);var m=KJUR.asn1.x509.OID.oid2name(o);t.attr=m;var r=b(p,q[1]);var u=j(r,0);if(u.length==1){t.valhex=b(r,u[0])}else{var s=[];for(var n=0;n<u.length;n++){s.push(b(r,u[n]))}t.valhex=s}if(m=="contentType"){this.setContentType(t)}else{if(m=="messageDigest"){this.setMessageDigest(t)}else{if(m=="signingTime"){this.setSigningTime(t)}else{if(m=="signingCertificate"){this.setSigningCertificate(t)}else{if(m=="signingCertificateV2"){this.setSigningCertificateV2(t)}else{if(m=="signaturePolicyIdentifier"){this.setSignaturePolicyIdentifier(t)}}}}}}return t};this.setContentType=function(m){var n=l.getOIDName(m.valhex,0,null);if(n!=null){m.type=n;delete m.valhex}};this.setSigningTime=function(o){var n=i(o.valhex,0);var m=hextoutf8(n);o.str=m;delete o.valhex};this.setMessageDigest=function(m){var n=i(m.valhex,0);m.hex=n;delete m.valhex};this.setSigningCertificate=function(n){var q=j(n.valhex,0);if(q.length>0){var m=b(n.valhex,q[0]);var p=j(m,0);var t=[];for(var o=0;o<p.length;o++){var s=b(m,p[o]);var u=this.getESSCertID(s);t.push(u)}n.array=t}if(q.length>1){var r=b(n.valhex,q[1]);n.polhex=r}delete n.valhex};this.setSignaturePolicyIdentifier=function(s){var q=j(s.valhex,0);if(q.length>0){var r=l.getOID(s.valhex,q[0]);s.oid=r}if(q.length>1){var m=new a();var t=j(s.valhex,q[1]);var p=b(s.valhex,t[0]);var o=m.getAlgorithmIdentifierName(p);s.alg=o;var n=i(s.valhex,t[1]);s.hash=n}delete s.valhex};this.setSigningCertificateV2=function(o){var s=j(o.valhex,0);if(s.length>0){var n=b(o.valhex,s[0]);var r=j(n,0);var u=[];for(var q=0;q<r.length;q++){var m=b(n,r[q]);var p=this.getESSCertIDv2(m);u.push(p)}o.array=u}if(s.length>1){var t=b(o.valhex,s[1]);o.polhex=t}delete o.valhex};this.getESSCertID=function(o){var p={};var n=j(o,0);if(n.length>0){var q=i(o,n[0]);p.hash=q}if(n.length>1){var m=b(o,n[1]);var r=this.getIssuerSerial(m);if(r.serial!=undefined){p.serial=r.serial}if(r.issuer!=undefined){p.issuer=r.issuer}}return p};this.getESSCertIDv2=function(q){var s={};var p=j(q,0);if(p.length<1||3<p.length){throw new g("wrong number of elements")}var r=0;if(q.substr(p[0],2)=="30"){var o=b(q,p[0]);s.alg=h.getAlgorithmIdentifierName(o);r++}else{s.alg="sha256"}var n=i(q,p[r]);s.hash=n;if(p.length>r+1){var m=b(q,p[r+1]);var t=this.getIssuerSerial(m);s.issuer=t.issuer;s.serial=t.serial}return s};this.getIssuerSerial=function(q){var r={};var n=j(q,0);var m=b(q,n[0]);var p=h.getGeneralNames(m);var o=p[0].dn;r.issuer=o;var s=i(q,n[1]);r.serial={hex:s};return r};this.getCertificateSet=function(p){var n=j(p,0);var m=[];for(var o=0;o<n.length;o++){var r=b(p,n[o]);if(r.substr(0,2)=="30"){var q=hextopem(r,"CERTIFICATE");m.push(q)}}return{array:m,sortflag:false}}};
if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.tsp=="undefined"||!KJUR.asn1.tsp){KJUR.asn1.tsp={}}KJUR.asn1.tsp.TimeStampToken=function(d){var c=KJUR,b=c.asn1,a=b.tsp;a.TimeStampToken.superclass.constructor.call(this);this.params=null;this.getEncodedHexPrepare=function(){var e=new a.TSTInfo(this.params.econtent.content);this.params.econtent.content.hex=e.tohex()};if(d!=undefined){this.setByParam(d)}};extendClass(KJUR.asn1.tsp.TimeStampToken,KJUR.asn1.cms.SignedData);KJUR.asn1.tsp.TSTInfo=function(f){var m=Error,c=KJUR,j=c.asn1,g=j.DERSequence,i=j.DERInteger,l=j.DERBoolean,h=j.DERGeneralizedTime,n=j.DERObjectIdentifier,e=j.DERTaggedObject,k=j.tsp,d=k.MessageImprint,b=k.Accuracy,a=j.x509.X500Name,o=j.x509.GeneralName;k.TSTInfo.superclass.constructor.call(this);this.dVersion=new i({"int":1});this.dPolicy=null;this.dMessageImprint=null;this.dSerial=null;this.dGenTime=null;this.dAccuracy=null;this.dOrdering=null;this.dNonce=null;this.dTsa=null;this.tohex=function(){var p=[this.dVersion];if(this.dPolicy==null){throw new Error("policy shall be specified.")}p.push(this.dPolicy);if(this.dMessageImprint==null){throw new Error("messageImprint shall be specified.")}p.push(this.dMessageImprint);if(this.dSerial==null){throw new Error("serialNumber shall be specified.")}p.push(this.dSerial);if(this.dGenTime==null){throw new Error("genTime shall be specified.")}p.push(this.dGenTime);if(this.dAccuracy!=null){p.push(this.dAccuracy)}if(this.dOrdering!=null){p.push(this.dOrdering)}if(this.dNonce!=null){p.push(this.dNonce)}if(this.dTsa!=null){p.push(this.dTsa)}var q=new g({array:p});this.hTLV=q.tohex();return this.hTLV};this.getEncodedHex=function(){return this.tohex()};if(f!==undefined){if(typeof f.policy=="string"){if(!f.policy.match(/^[0-9.]+$/)){throw"policy shall be oid like 0.1.4.134"}this.dPolicy=new n({oid:f.policy})}if(f.messageImprint!==undefined){this.dMessageImprint=new d(f.messageImprint)}if(f.serial!==undefined){this.dSerial=new i(f.serial)}if(f.genTime!==undefined){this.dGenTime=new h(f.genTime)}if(f.accuracy!==undefined){this.dAccuracy=new b(f.accuracy)}if(f.ordering!==undefined&&f.ordering==true){this.dOrdering=new l()}if(f.nonce!==undefined){this.dNonce=new i(f.nonce)}if(f.tsa!==undefined){this.dTsa=new e({tag:"a0",explicit:true,obj:new o({dn:f.tsa})})}}};extendClass(KJUR.asn1.tsp.TSTInfo,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.Accuracy=function(d){var c=KJUR,b=c.asn1,a=b.ASN1Util.newObject;b.tsp.Accuracy.superclass.constructor.call(this);this.params=null;this.tohex=function(){var f=this.params;var e=[];if(f.seconds!=undefined&&typeof f.seconds=="number"){e.push({"int":f.seconds})}if(f.millis!=undefined&&typeof f.millis=="number"){e.push({tag:{tagi:"80",obj:{"int":f.millis}}})}if(f.micros!=undefined&&typeof f.micros=="number"){e.push({tag:{tagi:"81",obj:{"int":f.micros}}})}return a({seq:e}).tohex()};this.getEncodedHex=function(){return this.tohex()};if(d!=undefined){this.setByParam(d)}};extendClass(KJUR.asn1.tsp.Accuracy,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.MessageImprint=function(g){var c=KJUR,b=c.asn1,a=b.DERSequence,d=b.DEROctetString,f=b.x509,e=f.AlgorithmIdentifier;b.tsp.MessageImprint.superclass.constructor.call(this);this.params=null;this.tohex=function(){var k=this.params;var j=new e({name:k.alg});var h=new d({hex:k.hash});var i=new a({array:[j,h]});return i.tohex()};this.getEncodedHex=function(){return this.tohex()};if(g!==undefined){this.setByParam(g)}};extendClass(KJUR.asn1.tsp.MessageImprint,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.TimeStampReq=function(c){var a=KJUR,f=a.asn1,d=f.DERSequence,e=f.DERInteger,h=f.DERBoolean,j=f.ASN1Object,i=f.DERObjectIdentifier,g=f.tsp,b=g.MessageImprint;g.TimeStampReq.superclass.constructor.call(this);this.params=null;this.tohex=function(){var m=this.params;var k=[];k.push(new e({"int":1}));if(m.messageImprint instanceof KJUR.asn1.ASN1Object){k.push(m.messageImprint)}else{k.push(new b(m.messageImprint))}if(m.policy!=undefined){k.push(new i(m.policy))}if(m.nonce!=undefined){k.push(new e(m.nonce))}if(m.certreq==true){k.push(new h())}var l=new d({array:k});return l.tohex()};this.getEncodedHex=function(){return this.tohex()};if(c!=undefined){this.setByParam(c)}};extendClass(KJUR.asn1.tsp.TimeStampReq,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.TimeStampResp=function(g){var e=KJUR,d=e.asn1,c=d.DERSequence,f=d.ASN1Object,a=d.tsp,b=a.PKIStatusInfo;a.TimeStampResp.superclass.constructor.call(this);this.params=null;this.tohex=function(){var j=this.params;var h=[];if(j.econtent!=undefined||j.tst!=undefined){if(j.statusinfo!=undefined){h.push(new b(j.statusinfo))}else{h.push(new b("granted"))}if(j.econtent!=undefined){h.push((new a.TimeStampToken(j)).getContentInfo())}else{if(j.tst instanceof d.ASN1Object){h.push(j.tst)}else{throw new Error("improper member tst value")}}}else{if(j.statusinfo!=undefined){h.push(new b(j.statusinfo))}else{throw new Error("parameter for token nor statusinfo not specified")}}var i=new c({array:h});return i.tohex()};this.getEncodedHex=function(){return this.tohex()};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.tsp.TimeStampResp,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIStatusInfo=function(d){var h=Error,a=KJUR,g=a.asn1,e=g.DERSequence,i=g.tsp,f=i.PKIStatus,c=i.PKIFreeText,b=i.PKIFailureInfo;i.PKIStatusInfo.superclass.constructor.call(this);this.params=null;this.tohex=function(){var l=this.params;var j=[];if(typeof l=="string"){j.push(new f(l))}else{if(l.status==undefined){throw new h("property 'status' unspecified")}j.push(new f(l.status));if(l.statusstr!=undefined){j.push(new c(l.statusstr))}if(l.failinfo!=undefined){j.push(new b(l.failinfo))}}var k=new e({array:j});return k.tohex()};this.getEncodedHex=function(){return this.tohex()};if(d!=undefined){this.setByParam(d)}};extendClass(KJUR.asn1.tsp.PKIStatusInfo,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIStatus=function(g){var e=Error,d=KJUR,c=d.asn1,f=c.DERInteger,b=c.tsp;b.PKIStatus.superclass.constructor.call(this);var a={granted:0,grantedWithMods:1,rejection:2,waiting:3,revocationWarning:4,revocationNotification:5};this.params=null;this.tohex=function(){var k=this.params;var h,j;if(typeof k=="string"){try{j=a[k]}catch(i){throw new e("undefined name: "+k)}}else{if(typeof k=="number"){j=k}else{throw new e("unsupported params")}}return(new f({"int":j})).tohex()};this.getEncodedHex=function(){return this.tohex()};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.tsp.PKIStatus,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIFreeText=function(g){var f=Error,e=KJUR,d=e.asn1,b=d.DERSequence,c=d.DERUTF8String,a=d.tsp;a.PKIFreeText.superclass.constructor.call(this);this.params=null;this.tohex=function(){var l=this.params;if(!l instanceof Array){throw new f("wrong params: not array")}var h=[];for(var k=0;k<l.length;k++){h.push(new c({str:l[k]}))}var j=new b({array:h});return j.tohex()};this.getEncodedHex=function(){return this.tohex()};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.tsp.PKIFreeText,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIFailureInfo=function(h){var f=Error,e=KJUR,d=e.asn1,g=d.DERBitString,b=d.tsp,c=b.PKIFailureInfo;var a={badAlg:0,badRequest:2,badDataFormat:5,timeNotAvailable:14,unacceptedPolicy:15,unacceptedExtension:16,addInfoNotAvailable:17,systemFailure:25};c.superclass.constructor.call(this);this.params=null;this.getBinValue=function(){var n=this.params;var m=0;if(typeof n=="number"&&0<=n&&n<=25){m|=1<<n;var k=m.toString(2);var l="";for(var j=k.length-1;j>=0;j--){l+=k[j]}return l}else{if(typeof n=="string"&&a[n]!=undefined){return namearraytobinstr([n],a)}else{if(typeof n=="object"&&n.length!=undefined){return namearraytobinstr(n,a)}else{throw new f("wrong params")}}}return};this.tohex=function(){var j=this.params;var i=this.getBinValue();return(new g({bin:i})).tohex()};this.getEncodedHex=function(){return this.tohex()};if(h!=undefined){this.setByParam(h)}};extendClass(KJUR.asn1.tsp.PKIFailureInfo,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.AbstractTSAAdapter=function(a){this.getTSTHex=function(c,b){throw"not implemented yet"}};KJUR.asn1.tsp.SimpleTSAAdapter=function(e){var d=KJUR,c=d.asn1,a=c.tsp,b=d.crypto.Util.hashHex;a.SimpleTSAAdapter.superclass.constructor.call(this);this.params=null;this.serial=0;this.getTSTHex=function(g,f){var i=b(g,f);this.params.econtent.content.messageImprint={alg:f,hash:i};this.params.econtent.content.serial={"int":this.serial++};var h=Math.floor(Math.random()*1000000000);this.params.econtent.content.nonce={"int":h};var j=new a.TimeStampToken(this.params);return j.getContentInfoEncodedHex()};if(e!==undefined){this.params=e}};extendClass(KJUR.asn1.tsp.SimpleTSAAdapter,KJUR.asn1.tsp.AbstractTSAAdapter);KJUR.asn1.tsp.FixedTSAAdapter=function(e){var d=KJUR,c=d.asn1,a=c.tsp,b=d.crypto.Util.hashHex;a.FixedTSAAdapter.superclass.constructor.call(this);this.params=null;this.getTSTHex=function(g,f){var h=b(g,f);this.params.econtent.content.messageImprint={alg:f,hash:h};var i=new a.TimeStampToken(this.params);return i.getContentInfoEncodedHex()};if(e!==undefined){this.params=e}};extendClass(KJUR.asn1.tsp.FixedTSAAdapter,KJUR.asn1.tsp.AbstractTSAAdapter);KJUR.asn1.tsp.TSPUtil=new function(){};KJUR.asn1.tsp.TSPUtil.newTimeStampToken=function(a){return new KJUR.asn1.tsp.TimeStampToken(a)};KJUR.asn1.tsp.TSPUtil.parseTimeStampReq=function(a){var b=new KJUR.asn1.tsp.TSPParser();return b.getTimeStampReq(a)};KJUR.asn1.tsp.TSPUtil.parseMessageImprint=function(a){var b=new KJUR.asn1.tsp.TSPParser();return b.getMessageImprint(a)};KJUR.asn1.tsp.TSPParser=function(){var e=Error,a=X509,f=new a(),k=ASN1HEX,g=k.getV,b=k.getTLV,d=k.getIdxbyList,c=k.getTLVbyListEx,i=k.getChildIdx;var j=["granted","grantedWithMods","rejection","waiting","revocationWarning","revocationNotification"];var h={0:"badAlg",2:"badRequest",5:"badDataFormat",14:"timeNotAvailable",15:"unacceptedPolicy",16:"unacceptedExtension",17:"addInfoNotAvailable",25:"systemFailure"};this.getResponse=function(n){var l=i(n,0);if(l.length==1){return this.getPKIStatusInfo(b(n,l[0]))}else{if(l.length>1){var o=this.getPKIStatusInfo(b(n,l[0]));var m=b(n,l[1]);var p=this.getToken(m);p.statusinfo=o;return p}}};this.getToken=function(m){var l=new KJUR.asn1.cms.CMSParser;var n=l.getCMSSignedData(m);this.setTSTInfo(n);return n};this.setTSTInfo=function(l){var o=l.econtent;if(o.type=="tstinfo"){var n=o.content.hex;var m=this.getTSTInfo(n);o.content=m}};this.getTSTInfo=function(r){var x={};var s=i(r,0);var p=g(r,s[1]);x.policy=hextooid(p);var o=b(r,s[2]);x.messageImprint=this.getMessageImprint(o);var u=g(r,s[3]);x.serial={hex:u};var y=g(r,s[4]);x.genTime={str:hextoutf8(y)};var q=0;if(s.length>5&&r.substr(s[5],2)=="30"){var v=b(r,s[5]);x.accuracy=this.getAccuracy(v);q++}if(s.length>5+q&&r.substr(s[5+q],2)=="01"){var z=g(r,s[5+q]);if(z=="ff"){x.ordering=true}q++}if(s.length>5+q&&r.substr(s[5+q],2)=="02"){var n=g(r,s[5+q]);x.nonce={hex:n};q++}if(s.length>5+q&&r.substr(s[5+q],2)=="a0"){var m=b(r,s[5+q]);m="30"+m.substr(2);pGeneralNames=f.getGeneralNames(m);var t=pGeneralNames[0].dn;x.tsa=t;q++}if(s.length>5+q&&r.substr(s[5+q],2)=="a1"){var l=b(r,s[5+q]);l="30"+l.substr(2);var w=f.getExtParamArray(l);x.ext=w;q++}return x};this.getAccuracy=function(q){var r={};var o=i(q,0);for(var p=0;p<o.length;p++){var m=q.substr(o[p],2);var l=g(q,o[p]);var n=parseInt(l,16);if(m=="02"){r.seconds=n}else{if(m=="80"){r.millis=n}else{if(m=="81"){r.micros=n}}}}return r};this.getMessageImprint=function(n){if(n.substr(0,2)!="30"){throw new Error("head of messageImprint hex shall be x30")}var s={};var l=i(n,0);var t=d(n,0,[0,0]);var o=g(n,t);var p=k.hextooidstr(o);var r=KJUR.asn1.x509.OID.oid2name(p);if(r==""){throw new Error("hashAlg name undefined: "+p)}var m=r;var q=d(n,0,[1]);s.alg=m;s.hash=g(n,q);return s};this.getPKIStatusInfo=function(o){var t={};var r=i(o,0);var n=0;try{var l=g(o,r[0]);var p=parseInt(l,16);t.status=j[p]}catch(s){}if(r.length>1&&o.substr(r[1],2)=="30"){var m=b(o,r[1]);t.statusstr=this.getPKIFreeText(m);n++}if(r.length>n&&o.substr(r[1+n],2)=="03"){var q=b(o,r[1+n]);t.failinfo=this.getPKIFailureInfo(q)}return t};this.getPKIFreeText=function(n){var o=[];var l=i(n,0);for(var m=0;m<l.length;m++){o.push(k.getString(n,l[m]))}return o};this.getPKIFailureInfo=function(l){var m=k.getInt(l,0);if(h[m]!=undefined){return h[m]}else{return m}};this.getTimeStampReq=function(q){var p={};p.certreq=false;var s=i(q,0);if(s.length<2){throw new Error("TimeStampReq must have at least 2 items")}var n=b(q,s[1]);p.messageImprint=KJUR.asn1.tsp.TSPUtil.parseMessageImprint(n);for(var o=2;o<s.length;o++){var m=s[o];var l=q.substr(m,2);if(l=="06"){var r=g(q,m);p.policy=k.hextooidstr(r)}if(l=="02"){p.nonce=g(q,m)}if(l=="01"){p.certreq=true}}return p}};
if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.cades=="undefined"||!KJUR.asn1.cades){KJUR.asn1.cades={}}KJUR.asn1.cades.SignaturePolicyIdentifier=function(e){var c=KJUR,b=c.asn1,a=b.cades,d=a.SignaturePolicyId;a.SignaturePolicyIdentifier.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.16.2.15";this.params=null;this.getValueArray=function(){return[new d(this.params)]};this.setByParam=function(f){this.params=f};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cades.SignaturePolicyIdentifier,KJUR.asn1.cms.Attribute);KJUR.asn1.cades.SignaturePolicyId=function(e){var a=KJUR,g=a.asn1,f=g.DERSequence,i=g.DERObjectIdentifier,d=g.x509,j=d.AlgorithmIdentifier,c=g.cades,h=c.SignaturePolicyId,b=c.OtherHashAlgAndValue;h.superclass.constructor.call(this);this.params=null;this.tohex=function(){var m=this.params;var k=[];k.push(new i(m.oid));k.push(new b(m));var l=new f({array:k});return l.tohex()};this.getEncodedHex=function(){return this.tohex()};this.setByParam=function(k){this.params=k};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cades.SignaturePolicyId,KJUR.asn1.ASN1Object);KJUR.asn1.cades.OtherHashAlgAndValue=function(e){var h=Error,a=KJUR,g=a.asn1,f=g.DERSequence,i=g.DEROctetString,d=g.x509,j=d.AlgorithmIdentifier,c=g.cades,b=c.OtherHashAlgAndValue;b.superclass.constructor.call(this);this.params=null;this.tohex=function(){var o=this.params;if(o.alg==undefined){throw new h("property 'alg' not specified")}if(o.hash==undefined&&o.cert==undefined){throw new h("property 'hash' nor 'cert' not specified")}var m=null;if(o.hash!=undefined){m=o.hash}else{if(o.cert!=undefined){if(typeof o.cert!="string"){throw new h("cert not string")}var n=o.cert;if(o.cert.indexOf("-----BEGIN")!=-1){n=pemtohex(o.cert)}m=KJUR.crypto.Util.hashHex(n,o.alg)}}var k=[];k.push(new j({name:o.alg}));k.push(new i({hex:m}));var l=new f({array:k});return l.tohex()};this.getEncodedHex=function(){return this.tohex()};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cades.OtherHashAlgAndValue,KJUR.asn1.ASN1Object);KJUR.asn1.cades.OtherHashValue=function(g){KJUR.asn1.cades.OtherHashValue.superclass.constructor.call(this);var d=Error,c=KJUR,f=c.lang.String.isHex,b=c.asn1,e=b.DEROctetString,a=c.crypto.Util.hashHex;this.params=null;this.tohex=function(){var j=this.params;if(j.hash==undefined&&j.cert==undefined){throw new d("hash or cert not specified")}var h=null;if(j.hash!=undefined){h=j.hash}else{if(j.cert!=undefined){if(typeof j.cert!="string"){throw new d("cert not string")}var i=j.cert;if(j.cert.indexOf("-----BEGIN")!=-1){i=pemtohex(j.cert)}h=KJUR.crypto.Util.hashHex(i,"sha1")}}return(new e({hex:h})).tohex()};this.getEncodedHex=function(){return this.tohex()};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.cades.OtherHashValue,KJUR.asn1.ASN1Object);KJUR.asn1.cades.SignatureTimeStamp=function(h){var d=Error,c=KJUR,f=c.lang.String.isHex,b=c.asn1,e=b.ASN1Object,g=b.x509,a=b.cades;a.SignatureTimeStamp.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.16.2.14";this.params=null;this.getValueArray=function(){var l=this.params;if(l.tst!=undefined){if(f(l.tst)){var j=new e();j.hTLV=l.tst;return[j]}else{if(l.tst instanceof e){return[l.tst]}else{throw new d("params.tst has wrong value")}}}else{if(l.res!=undefined){var k=l.res;if(k instanceof e){k=k.tohex()}if(typeof k!="string"||(!f(k))){throw new d("params.res has wrong value")}var i=ASN1HEX.getTLVbyList(k,0,[1]);var j=new e();j.hTLV=l.tst;return[j]}}};if(h!=null){this.setByParam(h)}};extendClass(KJUR.asn1.cades.SignatureTimeStamp,KJUR.asn1.cms.Attribute);KJUR.asn1.cades.CompleteCertificateRefs=function(h){var f=Error,e=KJUR,d=e.asn1,b=d.DERSequence,c=d.cades,a=c.OtherCertID,g=e.lang.String.isHex;c.CompleteCertificateRefs.superclass.constructor.call(this);this.typeOid="1.2.840.113549.1.9.16.2.21";this.params=null;this.getValueArray=function(){var o=this.params;var k=[];for(var m=0;m<o.array.length;m++){var n=o.array[m];if(typeof n=="string"){if(n.indexOf("-----BEGIN")!=-1){n={cert:n}}else{if(g(n)){n={hash:n}}else{throw new f("unsupported value: "+n)}}}if(o.alg!=undefined&&n.alg==undefined){n.alg=o.alg}if(o.hasis!=undefined&&n.hasis==undefined){n.hasis=o.hasis}var j=new a(n);k.push(j)}var l=new b({array:k});return[l]};if(h!=undefined){this.setByParam(h)}};extendClass(KJUR.asn1.cades.CompleteCertificateRefs,KJUR.asn1.cms.Attribute);KJUR.asn1.cades.OtherCertID=function(e){var a=KJUR,h=a.asn1,f=h.DERSequence,i=h.cms,g=i.IssuerSerial,c=h.cades,d=c.OtherHashValue,b=c.OtherHashAlgAndValue;c.OtherCertID.superclass.constructor.call(this);this.params=e;this.tohex=function(){var n=this.params;if(typeof n=="string"){if(n.indexOf("-----BEGIN")!=-1){n={cert:n}}else{if(_isHex(n)){n={hash:n}}}}var j=[];var m=null;if(n.alg!=undefined){m=new b(n)}else{m=new d(n)}j.push(m);if((n.cert!=undefined&&n.hasis==true)||(n.issuer!=undefined&&n.serial!=undefined)){var l=new g(n);j.push(l)}var k=new f({array:j});return k.tohex()};this.getEncodedHex=function(){return this.tohex()};if(e!=undefined){this.setByParam(e)}};extendClass(KJUR.asn1.cades.OtherCertID,KJUR.asn1.ASN1Object);KJUR.asn1.cades.OtherHash=function(g){var i=Error,a=KJUR,h=a.asn1,j=h.cms,c=h.cades,b=c.OtherHashAlgAndValue,e=c.OtherHashValue,d=a.crypto.Util.hashHex,f=a.lang.String.isHex;c.OtherHash.superclass.constructor.call(this);this.params=null;this.tohex=function(){var l=this.params;if(typeof l=="string"){if(l.indexOf("-----BEGIN")!=-1){l={cert:l}}else{if(f(l)){l={hash:l}}}}var k=null;if(l.alg!=undefined){k=new b(l)}else{k=new e(l)}return k.tohex()};this.getEncodedHex=function(){return this.tohex()};if(g!=undefined){this.setByParam(g)}};extendClass(KJUR.asn1.cades.OtherHash,KJUR.asn1.ASN1Object);KJUR.asn1.cades.CAdESUtil=new function(){};KJUR.asn1.cades.CAdESUtil.parseSignedDataForAddingUnsigned=function(a){var c=new KJUR.asn1.cms.CMSParser();var b=c.getCMSSignedData(a);return b};KJUR.asn1.cades.CAdESUtil.parseSignerInfoForAddingUnsigned=function(g,q,c){var p=ASN1HEX,s=p.getChildIdx,a=p.getTLV,l=p.getV,v=KJUR,h=v.asn1,n=h.ASN1Object,j=h.cms,k=j.AttributeList,w=j.SignerInfo;var o={};var t=s(g,q);if(t.length!=6){throw"not supported items for SignerInfo (!=6)"}var d=t.shift();o.version=a(g,d);var e=t.shift();o.si=a(g,e);var m=t.shift();o.digalg=a(g,m);var f=t.shift();o.sattrs=a(g,f);var i=t.shift();o.sigalg=a(g,i);var b=t.shift();o.sig=a(g,b);o.sigval=l(g,b);var u=null;o.obj=new w();u=new n();u.hTLV=o.version;o.obj.dCMSVersion=u;u=new n();u.hTLV=o.si;o.obj.dSignerIdentifier=u;u=new n();u.hTLV=o.digalg;o.obj.dDigestAlgorithm=u;u=new n();u.hTLV=o.sattrs;o.obj.dSignedAttrs=u;u=new n();u.hTLV=o.sigalg;o.obj.dSigAlg=u;u=new n();u.hTLV=o.sig;o.obj.dSig=u;o.obj.dUnsignedAttrs=new k();return o};
if(typeof KJUR.asn1.csr=="undefined"||!KJUR.asn1.csr){KJUR.asn1.csr={}}KJUR.asn1.csr.CertificationRequest=function(g){var d=KJUR,c=d.asn1,e=c.DERBitString,b=c.DERSequence,a=c.csr,f=c.x509,h=a.CertificationRequestInfo;a.CertificationRequest.superclass.constructor.call(this);this.setByParam=function(i){this.params=i};this.sign=function(){var j=(new h(this.params)).tohex();var k=new KJUR.crypto.Signature({alg:this.params.sigalg});k.init(this.params.sbjprvkey);k.updateHex(j);var i=k.sign();this.params.sighex=i};this.getPEM=function(){return hextopem(this.tohex(),"CERTIFICATE REQUEST")};this.tohex=function(){var l=this.params;var j=new KJUR.asn1.csr.CertificationRequestInfo(this.params);var m=new KJUR.asn1.x509.AlgorithmIdentifier({name:l.sigalg});if(l.sighex==undefined&&l.sbjprvkey!=undefined){this.sign()}if(l.sighex==undefined){throw new Error("sighex or sbjprvkey parameter not defined")}var k=new e({hex:"00"+l.sighex});var i=new b({array:[j,m,k]});return i.tohex()};this.getEncodedHex=function(){return this.tohex()};if(g!==undefined){this.setByParam(g)}};extendClass(KJUR.asn1.csr.CertificationRequest,KJUR.asn1.ASN1Object);KJUR.asn1.csr.CertificationRequestInfo=function(f){var b=KJUR,j=b.asn1,c=j.DERBitString,g=j.DERSequence,i=j.DERInteger,p=j.DERUTF8String,d=j.DERTaggedObject,h=j.ASN1Util.newObject,n=j.csr,e=j.x509,a=e.X500Name,l=e.Extensions,o=e.SubjectPublicKeyInfo,k=n.AttributeList;n.CertificationRequestInfo.superclass.constructor.call(this);this.params=null;this.setByParam=function(q){if(q!=undefined){this.params=q}};this.tohex=function(){var v=this.params;var r=[];r.push(new i({"int":0}));r.push(new a(v.subject));r.push(new o(KEYUTIL.getKey(v.sbjpubkey)));if(v.attrs!=undefined){var u=m(v.attrs);var t=h({tag:{tage:"a0",obj:u}});r.push(t)}else{if(v.extreq!=undefined){var q=new l(v.extreq);var t=h({tag:{tage:"a0",obj:{seq:[{oid:"1.2.840.113549.1.9.14"},{set:[q]}]}}});r.push(t)}else{r.push(new d({tag:"a0",explicit:false,obj:new p({str:""})}))}}var s=new g({array:r});return s.tohex()};this.getEncodedHex=function(){return this.tohex()};function m(s){var w=Error,v=KJUR.asn1.x509.Extensions;var y=[];for(var u=0;u<s.length;u++){var r=s[u];var x=r.attr;if(x=="extensionRequest"){var t=new v(r.ext);var q={seq:[{oid:"1.2.840.113549.1.9.14"},{set:[t]}]};y.push(q)}else{if(x=="unstructuredName"){var q={seq:[{oid:"1.2.840.113549.1.9.2"},{set:r.names}]};y.push(q)}else{if(x=="challengePassword"){var q={seq:[{oid:"1.2.840.113549.1.9.7"},{set:[{utf8str:r.password}]}]};y.push(q)}else{throw new w("unknown CSR attribute")}}}}return{set:y}}if(f!=undefined){this.setByParam(f)}};extendClass(KJUR.asn1.csr.CertificationRequestInfo,KJUR.asn1.ASN1Object);KJUR.asn1.csr.AttributeList=function(b){function a(c){}};extendClass(KJUR.asn1.csr.AttributeList,KJUR.asn1.ASN1Object);KJUR.asn1.csr.CSRUtil=new function(){};KJUR.asn1.csr.CSRUtil.newCSRPEM=function(e){var b=KEYUTIL,a=KJUR.asn1.csr;var c=new a.CertificationRequest(e);var d=c.getPEM();return d};KJUR.asn1.csr.CSRUtil.getParam=function(d,a){var m=ASN1HEX,i=m.getV,j=m.getIdxbyList,b=m.getTLVbyList,o=m.getTLVbyListEx,n=m.getVbyListEx;var l=function(u){var t=j(u,0,[0,3,0,0],"06");if(i(u,t)!="2a864886f70d01090e"){return null}return b(u,0,[0,3,0,1,0],"30")};var g={};if(d.indexOf("-----BEGIN CERTIFICATE REQUEST")==-1){throw new Error("argument is not PEM file")}var e=pemtohex(d,"CERTIFICATE REQUEST");if(a){g.tbs=b(e,0,[0])}try{var p=o(e,0,[0,1]);if(p=="3000"){g.subject={}}else{var f=new X509();g.subject=f.getX500Name(p)}}catch(q){}var k=o(e,0,[0,2]);var r=KEYUTIL.getKey(k,null,"pkcs8pub");g.sbjpubkey=KEYUTIL.getPEM(r,"PKCS8PUB");var c=l(e);var f=new X509();if(c!=null){g.extreq=f.getExtParamArray(c)}try{var h=o(e,0,[1],"30");var f=new X509();g.sigalg=f.getAlgorithmIdentifierName(h)}catch(q){}try{var s=n(e,0,[2]);g.sighex=s}catch(q){}return g};KJUR.asn1.csr.CSRUtil.verifySignature=function(b){try{var c=null;if(typeof b=="string"&&b.indexOf("-----BEGIN CERTIFICATE REQUEST")!=-1){c=KJUR.asn1.csr.CSRUtil.getParam(b,true)}else{if(typeof b=="object"&&b.sbjpubkey!=undefined&&b.sigalg!=undefined&&b.sighex!=undefined&&b.tbs!=undefined){c=b}}if(c==null){return false}var d=new KJUR.crypto.Signature({alg:c.sigalg});d.init(c.sbjpubkey);d.updateHex(c.tbs);return d.verify(c.sighex)}catch(a){alert(a);return false}};
if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.asn1=="undefined"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.ocsp=="undefined"||!KJUR.asn1.ocsp){KJUR.asn1.ocsp={}}KJUR.asn1.ocsp.DEFAULT_HASH="sha1";KJUR.asn1.ocsp.OCSPResponse=function(e){KJUR.asn1.ocsp.OCSPResponse.superclass.constructor.call(this);var a=KJUR.asn1.DEREnumerated,b=KJUR.asn1.ASN1Util.newObject,c=KJUR.asn1.ocsp.ResponseBytes;var d=["successful","malformedRequest","internalError","tryLater","_not_used_","sigRequired","unauthorized"];this.params=null;this._getStatusCode=function(){var f=this.params.resstatus;if(typeof f=="number"){return f}if(typeof f!="string"){return -1}return d.indexOf(f)};this.setByParam=function(f){this.params=f};this.tohex=function(){var h=this.params;var g=this._getStatusCode();if(g==-1){throw new Error("responseStatus not supported: "+h.resstatus)}if(g!=0){return b({seq:[{"enum":{"int":g}}]}).tohex()}var f=new c(h);return b({seq:[{"enum":{"int":0}},{tag:{tag:"a0",explicit:true,obj:f}}]}).tohex()};this.getEncodedHex=function(){return this.tohex()};if(e!==undefined){this.setByParam(e)}};extendClass(KJUR.asn1.ocsp.OCSPResponse,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.ResponseBytes=function(e){KJUR.asn1.ocsp.ResponseBytes.superclass.constructor.call(this);var b=KJUR.asn1,a=b.DERSequence,f=b.DERObjectIdentifier,c=b.DEROctetString,d=b.ocsp.BasicOCSPResponse;this.params=null;this.setByParam=function(g){this.params=g};this.tohex=function(){var j=this.params;if(j.restype!="ocspBasic"){throw new Error("not supported responseType: "+j.restype)}var i=new d(j);var g=[];g.push(new f({name:"ocspBasic"}));g.push(new c({hex:i.tohex()}));var h=new a({array:g});return h.tohex()};this.getEncodedHex=function(){return this.tohex()};if(e!==undefined){this.setByParam(e)}};extendClass(KJUR.asn1.ocsp.ResponseBytes,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.BasicOCSPResponse=function(d){KJUR.asn1.ocsp.BasicOCSPResponse.superclass.constructor.call(this);var i=Error,g=KJUR.asn1,j=g.ASN1Object,e=g.DERSequence,f=g.DERGeneralizedTime,c=g.DERTaggedObject,b=g.DERBitString,h=g.x509.Extensions,k=g.x509.AlgorithmIdentifier,l=g.ocsp,a=l.ResponderID;_SingleResponseList=l.SingleResponseList,_ResponseData=l.ResponseData;this.params=null;this.setByParam=function(m){this.params=m};this.sign=function(){var o=this.params;var m=o.tbsresp.tohex();var n=new KJUR.crypto.Signature({alg:o.sigalg});n.init(o.reskey);n.updateHex(m);o.sighex=n.sign()};this.tohex=function(){var t=this.params;if(t.tbsresp==undefined){t.tbsresp=new _ResponseData(t)}if(t.sighex==undefined&&t.reskey!=undefined){this.sign()}var n=[];n.push(t.tbsresp);n.push(new k({name:t.sigalg}));n.push(new b({hex:"00"+t.sighex}));if(t.certs!=undefined&&t.certs.length!=undefined){var m=[];for(var q=0;q<t.certs.length;q++){var s=t.certs[q];var r=null;if(ASN1HEX.isASN1HEX(s)){r=s}else{if(s.match(/-----BEGIN/)){r=pemtohex(s)}else{throw new i("certs["+q+"] not hex or PEM")}}m.push(new j({tlv:r}))}var p=new e({array:m});n.push(new c({tag:"a0",explicit:true,obj:p}))}var o=new e({array:n});return o.tohex()};this.getEncodedHex=function(){return this.tohex()};if(d!==undefined){this.setByParam(d)}};extendClass(KJUR.asn1.ocsp.BasicOCSPResponse,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.ResponseData=function(c){KJUR.asn1.ocsp.ResponseData.superclass.constructor.call(this);var h=Error,f=KJUR.asn1,d=f.DERSequence,e=f.DERGeneralizedTime,b=f.DERTaggedObject,g=f.x509.Extensions,i=f.ocsp,a=i.ResponderID;_SingleResponseList=i.SingleResponseList;this.params=null;this.tohex=function(){var m=this.params;if(m.respid!=undefined){new h("respid not specified")}if(m.prodat!=undefined){new h("prodat not specified")}if(m.array!=undefined){new h("array not specified")}var j=[];j.push(new a(m.respid));j.push(new e(m.prodat));j.push(new _SingleResponseList(m.array));if(m.ext!=undefined){var l=new g(m.ext);j.push(new b({tag:"a1",explicit:true,obj:l}))}var k=new d({array:j});return k.tohex()};this.getEncodedHex=function(){return this.tohex()};this.setByParam=function(j){this.params=j};if(c!==undefined){this.setByParam(c)}};extendClass(KJUR.asn1.ocsp.ResponseData,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.ResponderID=function(g){KJUR.asn1.ocsp.ResponderID.superclass.constructor.call(this);var d=KJUR,c=d.asn1,b=c.ASN1Util.newObject,f=c.x509.X500Name,e=d.lang.String.isHex,a=Error;this.params=null;this.tohex=function(){var m=this.params;if(m.key!=undefined){var l=null;if(typeof m.key=="string"){if(e(m.key)){l=m.key}if(m.key.match(/-----BEGIN CERTIFICATE/)){var h=new X509(m.key);var k=h.getExtSubjectKeyIdentifier();if(k!=null){l=k.kid.hex}}}else{if(m.key instanceof X509){var k=m.key.getExtSubjectKeyIdentifier();if(k!=null){l=k.kid.hex}}}if(l==null){throw new a("wrong key member value")}var j=b({tag:{tag:"a2",explicit:true,obj:{octstr:{hex:l}}}});return j.tohex()}else{if(m.name!=undefined){var i=null;if(typeof m.name=="string"&&m.name.match(/-----BEGIN CERTIFICATE/)){var h=new X509(m.name);i=h.getSubject()}else{if(m.name instanceof X509){i=m.name.getSubject()}else{if(typeof m.name=="object"&&(m.name.array!=undefined||m.name.str!=undefined)){i=m.name}}}if(i==null){throw new a("wrong name member value")}var j=b({tag:{tag:"a1",explicit:true,obj:new f(i)}});return j.tohex()}}throw new a("key or name not specified")};this.getEncodedHex=function(){return this.tohex()};this.setByParam=function(h){this.params=h};if(g!==undefined){this.setByParam(g)}};extendClass(KJUR.asn1.ocsp.ResponderID,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.SingleResponseList=function(d){KJUR.asn1.ocsp.SingleResponseList.superclass.constructor.call(this);var c=KJUR.asn1,b=c.DERSequence,a=c.ocsp.SingleResponse;this.params=null;this.tohex=function(){var h=this.params;if(typeof h!="object"||h.length==undefined){throw new Error("params not specified properly")}var e=[];for(var g=0;g<h.length;g++){e.push(new a(h[g]))}var f=new b({array:e});return f.tohex()};this.getEncodedHex=function(){return this.tohex()};this.setByParam=function(e){this.params=e};if(d!==undefined){this.setByParam(d)}};extendClass(KJUR.asn1.ocsp.SingleResponseList,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.SingleResponse=function(e){var k=Error,a=KJUR,i=a.asn1,f=i.DERSequence,g=i.DERGeneralizedTime,b=i.DERTaggedObject,l=i.ocsp,h=l.CertID,c=l.CertStatus,d=i.x509,j=d.Extensions;l.SingleResponse.superclass.constructor.call(this);this.params=null;this.tohex=function(){var q=this.params;var n=[];if(q.certid==undefined){throw new k("certid unspecified")}if(q.status==undefined){throw new k("status unspecified")}if(q.thisupdate==undefined){throw new k("thisupdate unspecified")}n.push(new h(q.certid));n.push(new c(q.status));n.push(new g(q.thisupdate));if(q.nextupdate!=undefined){var m=new g(q.nextupdate);n.push(new b({tag:"a0",explicit:true,obj:m}))}if(q.ext!=undefined){var p=new j(q.ext);n.push(new b({tag:"a1",explicit:true,obj:p}))}var o=new f({array:n});return o.tohex()};this.getEncodedHex=function(){return this.tohex()};this.setByParam=function(m){this.params=m};if(e!==undefined){this.setByParam(e)}};extendClass(KJUR.asn1.ocsp.SingleResponse,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.CertID=function(e){var b=KJUR,i=b.asn1,l=i.DEROctetString,h=i.DERInteger,f=i.DERSequence,d=i.x509,m=d.AlgorithmIdentifier,n=i.ocsp,k=n.DEFAULT_HASH,g=b.crypto,c=g.Util.hashHex,a=X509,o=ASN1HEX,j=o.getVbyList;n.CertID.superclass.constructor.call(this);this.DEFAULT_HASH="sha1";this.params=null;this.setByValue=function(s,r,p,q){if(q==undefined){q=this.DEFAULT_HASH}this.params={alg:q,issname:s,isskey:r,sbjsn:p}};this.setByCert=function(p,q,r){if(r==undefined){r=this.DEFAULT_HASH}this.params={alg:r,issuerCert:p,subjectCert:q,}};this.getParamByCerts=function(y,x,t){if(t==undefined){t=this.DEFAULT_HASH}var q=new a(y);var v=new a(x);var s=c(q.getSubjectHex(),t);var u=q.getPublicKeyHex();var p=c(j(u,0,[1],"03",true),t);var w=v.getSerialNumberHex();var r={alg:t,issname:s,isskey:p,sbjsn:w};return r};this.tohex=function(){if(typeof this.params!="object"){throw new Error("params not set")}var s=this.params;var u,r,y,q;if(s.alg==undefined){q=this.DEFAULT_HASH}else{q=s.alg}if(s.issuerCert!=undefined&&s.subjectCert!=undefined){var t=this.getParamByCerts(s.issuerCert,s.subjectCert,q);u=t.issname;r=t.isskey;y=t.sbjsn}else{if(s.issname!=undefined&&s.isskey!=undefined&&s.sbjsn!=undefined){u=s.issname;r=s.isskey;y=s.sbjsn}else{throw new Error("required param members not defined")}}var A=new m({name:q});var v=new l({hex:u});var x=new l({hex:r});var w=new h({hex:y});var z=new f({array:[A,v,x,w]});this.hTLV=z.tohex();return this.hTLV};this.getEncodedHex=function(){return this.tohex()};if(e!==undefined){this.setByParam(e)}};extendClass(KJUR.asn1.ocsp.CertID,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.CertStatus=function(a){KJUR.asn1.ocsp.CertStatus.superclass.constructor.call(this);this.params=null;this.tohex=function(){var d=this.params;if(d.status=="good"){return"8000"}if(d.status=="unknown"){return"8200"}if(d.status=="revoked"){var c=[{gentime:{str:d.time}}];if(d.reason!=undefined){c.push({tag:{tag:"a0",explicit:true,obj:{"enum":{"int":d.reason}}}})}var b={tag:"a1",explicit:false,obj:{seq:c}};return KJUR.asn1.ASN1Util.newObject({tag:b}).tohex()}throw new Error("bad status")};this.getEncodedHex=function(){return this.tohex()};this.setByParam=function(b){this.params=b};if(a!==undefined){this.setByParam(a)}};extendClass(KJUR.asn1.ocsp.CertStatus,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.Request=function(f){var c=KJUR,b=c.asn1,a=b.DERSequence,d=b.ocsp;d.Request.superclass.constructor.call(this);this.dReqCert=null;this.dExt=null;this.tohex=function(){var g=[];if(this.dReqCert===null){throw"reqCert not set"}g.push(this.dReqCert);var h=new a({array:g});this.hTLV=h.tohex();return this.hTLV};this.getEncodedHex=function(){return this.tohex()};if(typeof f!=="undefined"){var e=new d.CertID(f);this.dReqCert=e}};extendClass(KJUR.asn1.ocsp.Request,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.TBSRequest=function(e){var c=KJUR,b=c.asn1,a=b.DERSequence,d=b.ocsp;d.TBSRequest.superclass.constructor.call(this);this.version=0;this.dRequestorName=null;this.dRequestList=[];this.dRequestExt=null;this.setRequestListByParam=function(h){var f=[];for(var g=0;g<h.length;g++){var j=new d.Request(h[0]);f.push(j)}this.dRequestList=f};this.tohex=function(){var f=[];if(this.version!==0){throw"not supported version: "+this.version}if(this.dRequestorName!==null){throw"requestorName not supported"}var h=new a({array:this.dRequestList});f.push(h);if(this.dRequestExt!==null){throw"requestExtensions not supported"}var g=new a({array:f});this.hTLV=g.tohex();return this.hTLV};this.getEncodedHex=function(){return this.tohex()};if(e!==undefined){if(e.reqList!==undefined){this.setRequestListByParam(e.reqList)}}};extendClass(KJUR.asn1.ocsp.TBSRequest,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.OCSPRequest=function(f){var c=KJUR,b=c.asn1,a=b.DERSequence,d=b.ocsp;d.OCSPRequest.superclass.constructor.call(this);this.dTbsRequest=null;this.dOptionalSignature=null;this.tohex=function(){var g=[];if(this.dTbsRequest!==null){g.push(this.dTbsRequest)}else{throw"tbsRequest not set"}if(this.dOptionalSignature!==null){throw"optionalSignature not supported"}var h=new a({array:g});this.hTLV=h.tohex();return this.hTLV};this.getEncodedHex=function(){return this.tohex()};if(f!==undefined){if(f.reqList!==undefined){var e=new d.TBSRequest(f);this.dTbsRequest=e}}};extendClass(KJUR.asn1.ocsp.OCSPRequest,KJUR.asn1.ASN1Object);KJUR.asn1.ocsp.OCSPUtil={};KJUR.asn1.ocsp.OCSPUtil.getRequestHex=function(a,b,h){var d=KJUR,c=d.asn1,e=c.ocsp;if(h===undefined){h=e.DEFAULT_HASH}var g={alg:h,issuerCert:a,subjectCert:b};var f=new e.OCSPRequest({reqList:[g]});return f.tohex()};KJUR.asn1.ocsp.OCSPUtil.getOCSPResponseInfo=function(b){var m=ASN1HEX,c=m.getVbyList,k=m.getVbyListEx,e=m.getIdxbyList,d=m.getIdxbyListEx,g=m.getV;var n={};try{var j=k(b,0,[0],"0a");n.responseStatus=parseInt(j,16)}catch(f){}if(n.responseStatus!==0){return n}try{var i=e(b,0,[1,0,1,0,0,2,0,1]);if(b.substr(i,2)==="80"){n.certStatus="good"}else{if(b.substr(i,2)==="a1"){n.certStatus="revoked";n.revocationTime=hextoutf8(c(b,i,[0]))}else{if(b.substr(i,2)==="82"){n.certStatus="unknown"}}}}catch(f){}try{var a=e(b,0,[1,0,1,0,0,2,0,2]);n.thisUpdate=hextoutf8(g(b,a))}catch(f){}try{var l=e(b,0,[1,0,1,0,0,2,0,3]);if(b.substr(l,2)==="a0"){n.nextUpdate=hextoutf8(c(b,l,[0]))}}catch(f){}return n};KJUR.asn1.ocsp.OCSPParser=function(){var g=Error,a=X509,h=new a(),l=ASN1HEX,i=l.getV,b=l.getTLV,f=l.getIdxbyList,e=l.getVbyList,c=l.getTLVbyList,k=l.getVbyListEx,d=l.getTLVbyListEx,j=l.getChildIdx;this.getOCSPRequest=function(o){var n=j(o,0);if(n.length!=1&&n.length!=2){throw new g("wrong number elements: "+n.length)}var m=this.getTBSRequest(b(o,n[0]));return m};this.getTBSRequest=function(o){var m={};var n=d(o,0,[0],"30");m.array=this.getRequestList(n);var p=d(o,0,["[2]",0],"30");if(p!=null){m.ext=h.getExtParamArray(p)}return m};this.getRequestList=function(p){var m=[];var n=j(p,0);for(var o=0;o<n.length;o++){var p=b(p,n[o]);m.push(this.getRequest(p))}return m};this.getRequest=function(n){var m=j(n,0);if(m.length!=1&&m.length!=2){throw new g("wrong number elements: "+m.length)}var p=this.getCertID(b(n,m[0]));if(m.length==2){var o=f(n,0,[1,0]);p.ext=h.getExtParamArray(b(n,o))}return p};this.getCertID=function(p){var o=j(p,0);if(o.length!=4){throw new g("wrong number elements: "+o.length)}var n=new a();var m={};m.alg=n.getAlgorithmIdentifierName(b(p,o[0]));m.issname=i(p,o[1]);m.isskey=i(p,o[2]);m.sbjsn=i(p,o[3]);return m};this.getOCSPResponse=function(r){var o=j(r,0);var m;var q=i(r,o[0]);var p=parseInt(q);if(o.length==1){return{resstatus:p}}var n=c(r,0,[1,0]);m=this.getResponseBytes(n);m.resstatus=p;return m};this.getResponseBytes=function(p){var o=j(p,0);var n;var q=c(p,0,[1,0]);n=this.getBasicOCSPResponse(q);var m=i(p,o[0]);n.restype=KJUR.asn1.x509.OID.oid2name(hextooid(m));return n};this.getBasicOCSPResponse=function(q){var t=j(q,0);var v;v=this.getResponseData(b(q,t[0]));var u=new X509();v.alg=u.getAlgorithmIdentifierName(b(q,t[1]));var n=i(q,t[2]);v.sighex=n.substr(2);var m=k(q,0,["[0]"]);if(m!=null){var r=j(m,0);var o=[];for(var p=0;p<r.length;p++){var s=b(m,r[p]);o.push(s)}v.certs=o}return v};this.getResponseData=function(q){var p=j(q,0);var r=p.length;var o={};var n=0;if(q.substr(p[0],2)=="a0"){n++}o.respid=this.getResponderID(b(q,p[n++]));var t=i(q,p[n++]);o.prodat=hextoutf8(t);o.array=this.getSingleResponseList(b(q,p[n++]));if(q.substr(p[r-1],2)=="a1"){var s=c(q,p[r-1],[0]);var m=new X509();o.ext=m.getExtParamArray(s)}return o};this.getResponderID=function(o){var n={};if(o.substr(0,2)=="a2"){var p=e(o,0,[0]);n.key=p}if(o.substr(0,2)=="a1"){var q=c(o,0,[0]);var m=new X509();n.name=m.getX500Name(q)}return n};this.getSingleResponseList=function(q){var n=j(q,0);var m=[];for(var o=0;o<n.length;o++){var r=this.getSingleResponse(b(q,n[o]));m.push(r)}return m};this.getSingleResponse=function(p){var t=j(p,0);var v={};var r=this.getCertID(b(p,t[0]));v.certid=r;var u=this.getCertStatus(b(p,t[1]));v.status=u;if(p.substr(t[2],2)=="18"){var q=i(p,t[2]);v.thisupdate=hextoutf8(q)}for(var o=3;o<t.length;o++){if(p.substr(t[o],2)=="a0"){var m=e(p,t[o],[0],"18");v.nextupdate=hextoutf8(m)}if(p.substr(t[o],2)=="a1"){var s=new X509();var n=c(p,0,[o,0]);v.ext=s.getExtParamArray(n)}}return v};this.getCertStatus=function(p){var m={};if(p=="8000"){return{status:"good"}}if(p=="8200"){return{status:"unknown"}}if(p.substr(0,2)=="a1"){m.status="revoked";var o=e(p,0,[0]);var n=hextoutf8(o);m.time=n}return m}};
var KJUR;if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.lang=="undefined"||!KJUR.lang){KJUR.lang={}}KJUR.lang.String=function(){};function Base64x(){}function stoBA(d){var b=new Array();for(var c=0;c<d.length;c++){b[c]=d.charCodeAt(c)}return b}function BAtos(b){var d="";for(var c=0;c<b.length;c++){d=d+String.fromCharCode(b[c])}return d}function BAtohex(b){var e="";for(var d=0;d<b.length;d++){var c=b[d].toString(16);if(c.length==1){c="0"+c}e=e+c}return e}function stohex(a){return BAtohex(stoBA(a))}function stob64(a){return hex2b64(stohex(a))}function stob64u(a){return b64tob64u(hex2b64(stohex(a)))}function b64utos(a){return BAtos(b64toBA(b64utob64(a)))}function b64tob64u(a){a=a.replace(/\=/g,"");a=a.replace(/\+/g,"-");a=a.replace(/\//g,"_");return a}function b64utob64(a){if(a.length%4==2){a=a+"=="}else{if(a.length%4==3){a=a+"="}}a=a.replace(/-/g,"+");a=a.replace(/_/g,"/");return a}function hextob64u(a){if(a.length%2==1){a="0"+a}return b64tob64u(hex2b64(a))}function b64utohex(a){return b64tohex(b64utob64(a))}var utf8tob64u,b64utoutf8;if(typeof Buffer==="function"){utf8tob64u=function(a){return b64tob64u(Buffer.from(a,"utf8").toString("base64"))};b64utoutf8=function(a){return Buffer.from(b64utob64(a),"base64").toString("utf8")}}else{utf8tob64u=function(a){return hextob64u(uricmptohex(encodeURIComponentAll(a)))};b64utoutf8=function(a){return decodeURIComponent(hextouricmp(b64utohex(a)))}}function utf8tob64(a){return hex2b64(uricmptohex(encodeURIComponentAll(a)))}function b64toutf8(a){return decodeURIComponent(hextouricmp(b64tohex(a)))}function utf8tohex(a){return uricmptohex(encodeURIComponentAll(a)).toLowerCase()}function hextoutf8(b){try{return decodeURIComponent(hextouricmp(b))}catch(a){return null}}function iso88591hextoutf8(a){return hextoutf8(iso88591hextoutf8hex(a))}function utf8toiso88591hex(a){return utf8hextoiso88591hex(utf8tohex(a))}function iso88591hextoutf8hex(e){var c=e.match(/.{1,2}/g);var b=[];for(var d=0;d<c.length;d++){var f=parseInt(c[d],16);if(161<=f&&f<=191){b.push("c2");b.push(c[d])}else{if(192<=f&&f<=255){b.push("c3");b.push((f-64).toString(16))}else{b.push(c[d])}}}return b.join("")}function utf8hextoiso88591hex(f){var c=f.match(/.{1,2}/g);var b=[];for(var e=0;e<c.length;e++){if(c[e]=="c2"){e++;b.push(c[e])}else{if(c[e]=="c3"){e++;var d=c[e];var g=parseInt(c[e],16)+64;b.push(g.toString(16))}else{b.push(c[e])}}}return b.join("")}function hextorstr(c){var b="";for(var a=0;a<c.length-1;a+=2){b+=String.fromCharCode(parseInt(c.substr(a,2),16))}return b}function rstrtohex(c){var a="";for(var b=0;b<c.length;b++){a+=("0"+c.charCodeAt(b).toString(16)).slice(-2)}return a}function hextob64(a){return hex2b64(a)}function hextob64nl(a){return foldnl(hextob64(a),64)}function foldnl(a,b){a=a.replace(new RegExp("(.{"+b+"})","g"),"$1\r\n");a=a.replace(/\s+$/,"");return a}function b64nltohex(b){var a=b.replace(/[^0-9A-Za-z\/+=]*/g,"");var c=b64tohex(a);return c}function b64topem(b,a){return"-----BEGIN "+a+"-----\r\n"+foldnl(b,64)+"\r\n-----END "+a+"-----\r\n"}function hextopem(a,b){return"-----BEGIN "+b+"-----\r\n"+foldnl(hextob64(a),64)+"\r\n-----END "+b+"-----\r\n"}function pemtohex(a,b){if(a.indexOf("-----BEGIN ")==-1){throw new Error("can't find PEM header")}if(b!==undefined){a=a.replace(new RegExp("^[^]*-----BEGIN "+b+"-----"),"");a=a.replace(new RegExp("-----END "+b+"-----[^]*$"),"")}else{a=a.replace(/^[^]*-----BEGIN [^-]+-----/,"");a=a.replace(/-----END [^-]+-----[^]*$/,"")}return b64nltohex(a)}function pemtob64(a){if(a.indexOf("-----BEGIN ")==-1||a.indexOf("-----END ")==-1){return null}a=a.replace(/^[\s\S]*?-----BEGIN [^-]+-----/m,"");a=a.replace(/-----END [\s\S]+$/m,"");a=a.replace(/\s+/g,"");return(a.match(/^[0-9a-zA-Z+/=]+$/))?a:null}function hextoArrayBuffer(d){if(d.length%2!=0){throw"input is not even length"}if(d.match(/^[0-9A-Fa-f]+$/)==null){throw"input is not hexadecimal"}var b=new ArrayBuffer(d.length/2);var a=new DataView(b);for(var c=0;c<d.length/2;c++){a.setUint8(c,parseInt(d.substr(c*2,2),16))}return b}function ArrayBuffertohex(b){var d="";var a=new DataView(b);for(var c=0;c<b.byteLength;c++){d+=("00"+a.getUint8(c).toString(16)).slice(-2)}return d}function zulutomsec(n){var l,j,m,e,f,i,b,k;var a,h,g,c;n=timetogen(n);c=n.match(/^(\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(|\.\d+)Z$/);if(c){l=parseInt(c[1]);j=parseInt(c[2])-1;m=parseInt(c[3]);e=parseInt(c[4]);f=parseInt(c[5]);i=parseInt(c[6]);b=0;h=c[7];if(h!==""){g=(h.substr(1)+"00").substr(0,3);b=parseInt(g)}return Date.UTC(l,j,m,e,f,i,b)}throw new Error("unsupported zulu format: "+n)}function msectozulu(b){var h=new Date(b),i=("0000"+h.getUTCFullYear()).slice(-4),c=("00"+(h.getUTCMonth()+1)).slice(-2),j=("00"+h.getUTCDate()).slice(-2),e=("00"+h.getUTCHours()).slice(-2),f=("00"+h.getUTCMinutes()).slice(-2),g=("00"+h.getUTCSeconds()).slice(-2),a=("000"+h.getUTCMilliseconds()).slice(-3);a=a.replace(/0+$/,"");a=(a!="")?"."+a:a;return i+c+j+e+f+g+a+"Z"}function zulutosec(a){return Math.round(zulutomsec(a)/1000)}function zulutodate(a){return new Date(zulutomsec(a))}function datetozulu(g,e,f){var b;var a=g.getUTCFullYear();if(e){if(a<1950||2049<a){throw"not proper year for UTCTime: "+a}b=(""+a).slice(-2)}else{b=("000"+a).slice(-4)}b+=("0"+(g.getUTCMonth()+1)).slice(-2);b+=("0"+g.getUTCDate()).slice(-2);b+=("0"+g.getUTCHours()).slice(-2);b+=("0"+g.getUTCMinutes()).slice(-2);b+=("0"+g.getUTCSeconds()).slice(-2);if(f){var c=g.getUTCMilliseconds();if(c!==0){c=("00"+c).slice(-3);c=c.replace(/0+$/g,"");b+="."+c}}b+="Z";return b}function timetogen(a){if(a.match(/^[0-9]{12}Z$/)||a.match(/^[0-9]{12}[.][0-9]*Z$/)){return(a.match(/^[0-4]/))?"20"+a:"19"+a}return a}function uricmptohex(a){return a.replace(/%/g,"")}function hextouricmp(a){return a.replace(/(..)/g,"%$1")}function ipv6tohex(g){var b="malformed IPv6 address";if(!g.match(/^[0-9A-Fa-f:]+$/)){throw b}g=g.toLowerCase();var d=g.split(":").length-1;if(d<2){throw b}var e=":".repeat(7-d+2);g=g.replace("::",e);var c=g.split(":");if(c.length!=8){throw b}for(var f=0;f<8;f++){c[f]=("0000"+c[f]).slice(-4)}return c.join("")}function hextoipv6(d){if(!d.match(/^[0-9A-Fa-f]{32}$/)){throw new Error("malformed IPv6 address: "+d)}d=d.toLowerCase();var b=d.match(/.{1,4}/g);b=b.map(function(a){return a.replace(/^0+/,"")});b=b.map(function(a){return a==""?"0":a});d=":"+b.join(":")+":";var c=d.match(/:(0:){2,}/g);if(c==null){return d.slice(1,-1)}var e=c.sort().slice(-1)[0];d=d.replace(e.substr(0,e.length-1),":");if(d.substr(0,2)!="::"){d=d.substr(1)}if(d.substr(-2,2)!="::"){d=d.substr(0,d.length-1)}return d}function hextoip(b){var c=new Error("malformed hex value");if(!b.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)){throw c}if(b.length==8){var d;try{d=parseInt(b.substr(0,2),16)+"."+parseInt(b.substr(2,2),16)+"."+parseInt(b.substr(4,2),16)+"."+parseInt(b.substr(6,2),16);return d}catch(a){throw c}}else{if(b.length==16){try{return hextoip(b.substr(0,8))+"/"+ipprefixlen(b.substr(8))}catch(a){throw c}}else{if(b.length==32){return hextoipv6(b)}else{if(b.length==64){try{return hextoipv6(b.substr(0,32))+"/"+ipprefixlen(b.substr(32))}catch(a){throw c}return}else{return b}}}}}function ipprefixlen(c){var d=new Error("malformed mask");var a;try{a=new BigInteger(c,16).toString(2)}catch(b){throw d}if(!a.match(/^1*0*$/)){throw d}return a.replace(/0+$/,"").length}function iptohex(g){var j=new Error("malformed IP address");g=g.toLowerCase(g);if(!g.match(/^[0-9a-f.:/]+$/)){throw j}if(g.match(/^[0-9.]+$/)){var b=g.split(".");if(b.length!==4){throw j}var h="";try{for(var f=0;f<4;f++){var k=parseInt(b[f]);h+=("0"+k.toString(16)).slice(-2)}return h}catch(e){throw j}}else{if(g.match(/^[0-9.]+\/[0-9]+$/)){var c=g.split("/");return iptohex(c[0])+ipnetmask(parseInt(c[1]),32)}else{if(g.match(/^[0-9a-f:]+$/)&&g.indexOf(":")!==-1){return ipv6tohex(g)}else{if(g.match(/^[0-9a-f:]+\/[0-9]+$/)&&g.indexOf(":")!==-1){var c=g.split("/");return ipv6tohex(c[0])+ipnetmask(parseInt(c[1]),128)}else{throw j}}}}}function ipnetmask(d,c){if(c==32&&d==0){return"00000000"}if(c==128&&d==0){return"00000000000000000000000000000000"}var a=Array(d+1).join("1")+Array(c-d+1).join("0");return new BigInteger(a,2).toString(16)}function ucs2hextoutf8(d){function e(f){var h=parseInt(f.substr(0,2),16);var a=parseInt(f.substr(2),16);if(h==0&a<128){return String.fromCharCode(a)}if(h<8){var j=192|((h&7)<<3)|((a&192)>>6);var i=128|(a&63);return hextoutf8(j.toString(16)+i.toString(16))}var j=224|((h&240)>>4);var i=128|((h&15)<<2)|((a&192)>>6);var g=128|(a&63);return hextoutf8(j.toString(16)+i.toString(16)+g.toString(16))}var c=d.match(/.{4}/g);var b=c.map(e);return b.join("")}function encodeURIComponentAll(a){var d=encodeURIComponent(a);var b="";for(var c=0;c<d.length;c++){if(d[c]=="%"){b=b+d.substr(c,3);c=c+2}else{b=b+"%"+stohex(d[c])}}return b}function newline_toUnix(a){a=a.replace(/\r\n/mg,"\n");return a}function newline_toDos(a){a=a.replace(/\r\n/mg,"\n");a=a.replace(/\n/mg,"\r\n");return a}KJUR.lang.String.isInteger=function(a){if(a.match(/^[0-9]+$/)){return true}else{if(a.match(/^-[0-9]+$/)){return true}else{return false}}};KJUR.lang.String.isHex=function(a){return ishex(a)};function ishex(a){if(a.length%2==0&&(a.match(/^[0-9a-f]+$/)||a.match(/^[0-9A-F]+$/))){return true}else{return false}}KJUR.lang.String.isBase64=function(a){a=a.replace(/\s+/g,"");if(a.match(/^[0-9A-Za-z+\/]+={0,3}$/)&&a.length%4==0){return true}else{return false}};KJUR.lang.String.isBase64URL=function(a){if(a.match(/[+/=]/)){return false}a=b64utob64(a);return KJUR.lang.String.isBase64(a)};function isBase64URLDot(a){if(a.match(/^[0-9A-Za-z-_.]+$/)){return true}return false}KJUR.lang.String.isIntegerArray=function(a){a=a.replace(/\s+/g,"");if(a.match(/^\[[0-9,]+\]$/)){return true}else{return false}};KJUR.lang.String.isPrintable=function(a){if(a.match(/^[0-9A-Za-z '()+,-./:=?]*$/)!==null){return true}return false};KJUR.lang.String.isIA5=function(a){if(a.match(/^[\x20-\x21\x23-\x7f]*$/)!==null){return true}return false};KJUR.lang.String.isMail=function(a){if(a.match(/^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\.[A-Za-z0-9]{1,}$/)!==null){return true}return false};function hextoposhex(a){if(a.length%2==1){return"0"+a}if(a.substr(0,1)>"7"){return"00"+a}return a}function intarystrtohex(b){b=b.replace(/^\s*\[\s*/,"");b=b.replace(/\s*\]\s*$/,"");b=b.replace(/\s*/g,"");try{var c=b.split(/,/).map(function(g,e,h){var f=parseInt(g);if(f<0||255<f){throw"integer not in range 0-255"}var d=("00"+f.toString(16)).slice(-2);return d}).join("");return c}catch(a){throw"malformed integer array string: "+a}}var strdiffidx=function(c,a){var d=c.length;if(c.length>a.length){d=a.length}for(var b=0;b<d;b++){if(c.charCodeAt(b)!=a.charCodeAt(b)){return b}}if(c.length!=a.length){return d}return -1};function oidtohex(g){var f=function(a){var l=a.toString(16);if(l.length==1){l="0"+l}return l};var e=function(p){var o="";var l=parseInt(p,10);var a=l.toString(2);var m=7-a.length%7;if(m==7){m=0}var r="";for(var n=0;n<m;n++){r+="0"}a=r+a;for(var n=0;n<a.length-1;n+=7){var q=a.substr(n,7);if(n!=a.length-7){q="1"+q}o+=f(parseInt(q,2))}return o};try{if(!g.match(/^[0-9.]+$/)){return null}var j="";var b=g.split(".");var k=parseInt(b[0],10)*40+parseInt(b[1],10);j+=f(k);b.splice(0,2);for(var d=0;d<b.length;d++){j+=e(b[d])}return j}catch(c){return null}}function hextooid(g){if(!ishex(g)){return null}try{var m=[];var p=g.substr(0,2);var e=parseInt(p,16);m[0]=new String(Math.floor(e/40));m[1]=new String(e%40);var n=g.substr(2);var l=[];for(var f=0;f<n.length/2;f++){l.push(parseInt(n.substr(f*2,2),16))}var k=[];var d="";for(var f=0;f<l.length;f++){if(l[f]&128){d=d+strpad((l[f]&127).toString(2),7)}else{d=d+strpad((l[f]&127).toString(2),7);k.push(new String(parseInt(d,2)));d=""}}var o=m.join(".");if(k.length>0){o=o+"."+k.join(".")}return o}catch(j){return null}}function inttohex(b){var a=new BigInteger(String(b),10);return twoscompl(a)}function twoscompl(b){var g=b.toString(16);if(g.substr(0,1)!="-"){if(g.length%2==1){g="0"+g}else{if(!g.match(/^[0-7]/)){g="00"+g}}return g}var a=g.substr(1);var f=a.length;if(f%2==1){f+=1}else{if(!g.match(/^[0-7]/)){f+=2}}var j="";for(var e=0;e<f;e++){j+="f"}var d=new BigInteger(j,16);var c=d.xor(b).add(BigInteger.ONE);g=c.toString(16).replace(/^-/,"");return g}var strpad=function(c,b,a){if(a==undefined){a="0"}if(c.length>=b){return c}return new Array(b-c.length+1).join(a)+c};function bitstrtoint(e){if(e.length%2!=0){return -1}e=e.toLowerCase();if(e.match(/^[0-9a-f]+$/)==null){return -1}try{var a=e.substr(0,2);if(a=="00"){return parseInt(e.substr(2),16)}var b=parseInt(a,16);if(b>7){return -1}var g=e.substr(2);var d=parseInt(g,16).toString(2);if(d=="0"){d="00000000"}d=d.slice(0,0-b);var f=parseInt(d,2);if(f==NaN){return -1}return f}catch(c){return -1}}function inttobitstr(e){if(typeof e!="number"){return null}if(e<0){return null}var c=Number(e).toString(2);var b=8-c.length%8;if(b==8){b=0}c=c+strpad("",b,"0");var d=parseInt(c,2).toString(16);if(d.length%2==1){d="0"+d}var a="0"+b;return a+d}function bitstrtobinstr(g){if(typeof g!="string"){return null}if(g.length%2!=0){return null}if(!g.match(/^[0-9a-f]+$/)){return null}try{var c=parseInt(g.substr(0,2),16);if(c<0||7<c){return null}var j=g.substr(2);var f="";for(var e=0;e<j.length;e+=2){var b=j.substr(e,2);var a=parseInt(b,16).toString(2);a=("0000000"+a).slice(-8);f+=a}return f.substr(0,f.length-c)}catch(d){return null}}function binstrtobitstr(b){if(typeof b!="string"){return null}if(b.match(/^[01]+$/)==null){return null}try{var c=parseInt(b,2);return inttobitstr(c)}catch(a){return null}}function namearraytobinstr(e,g){var f=0;for(var a=0;a<e.length;a++){f|=1<<g[e[a]]}var b=f.toString(2);var c="";for(var a=b.length-1;a>=0;a--){c+=b[a]}return c}function aryval(e,c,d){if(typeof e!="object"){return undefined}var c=String(c).split(".");for(var b=0;b<c.length&&e;b++){var a=c[b];if(a.match(/^[0-9]+$/)){a=parseInt(a)}e=e[a]}return e||e===false?e:d}function extendClass(c,a){var b=function(){};b.prototype=a.prototype;c.prototype=new b();c.prototype.constructor=c;c.superclass=a.prototype;if(a.prototype.constructor==Object.prototype.constructor){a.prototype.constructor=a}};
if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.crypto=="undefined"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.Util=new function(){this.DIGESTINFOHEAD={sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",ripemd160:"3021300906052b2403020105000414",};this.DEFAULTPROVIDER={md5:"cryptojs",sha1:"cryptojs",sha224:"cryptojs",sha256:"cryptojs",sha384:"cryptojs",sha512:"cryptojs",ripemd160:"cryptojs",hmacmd5:"cryptojs",hmacsha1:"cryptojs",hmacsha224:"cryptojs",hmacsha256:"cryptojs",hmacsha384:"cryptojs",hmacsha512:"cryptojs",hmacripemd160:"cryptojs",MD5withRSA:"cryptojs/jsrsa",SHA1withRSA:"cryptojs/jsrsa",SHA224withRSA:"cryptojs/jsrsa",SHA256withRSA:"cryptojs/jsrsa",SHA384withRSA:"cryptojs/jsrsa",SHA512withRSA:"cryptojs/jsrsa",RIPEMD160withRSA:"cryptojs/jsrsa",MD5withECDSA:"cryptojs/jsrsa",SHA1withECDSA:"cryptojs/jsrsa",SHA224withECDSA:"cryptojs/jsrsa",SHA256withECDSA:"cryptojs/jsrsa",SHA384withECDSA:"cryptojs/jsrsa",SHA512withECDSA:"cryptojs/jsrsa",RIPEMD160withECDSA:"cryptojs/jsrsa",SHA1withDSA:"cryptojs/jsrsa",SHA224withDSA:"cryptojs/jsrsa",SHA256withDSA:"cryptojs/jsrsa",MD5withRSAandMGF1:"cryptojs/jsrsa",SHAwithRSAandMGF1:"cryptojs/jsrsa",SHA1withRSAandMGF1:"cryptojs/jsrsa",SHA224withRSAandMGF1:"cryptojs/jsrsa",SHA256withRSAandMGF1:"cryptojs/jsrsa",SHA384withRSAandMGF1:"cryptojs/jsrsa",SHA512withRSAandMGF1:"cryptojs/jsrsa",RIPEMD160withRSAandMGF1:"cryptojs/jsrsa",};this.CRYPTOJSMESSAGEDIGESTNAME={md5:CryptoJS.algo.MD5,sha1:CryptoJS.algo.SHA1,sha224:CryptoJS.algo.SHA224,sha256:CryptoJS.algo.SHA256,sha384:CryptoJS.algo.SHA384,sha512:CryptoJS.algo.SHA512,ripemd160:CryptoJS.algo.RIPEMD160};this.getDigestInfoHex=function(a,b){if(typeof this.DIGESTINFOHEAD[b]=="undefined"){throw"alg not supported in Util.DIGESTINFOHEAD: "+b}return this.DIGESTINFOHEAD[b]+a};this.getPaddedDigestInfoHex=function(h,a,j){var c=this.getDigestInfoHex(h,a);var d=j/4;if(c.length+22>d){throw"key is too short for SigAlg: keylen="+j+","+a}var b="0001";var k="00"+c;var g="";var l=d-b.length-k.length;for(var f=0;f<l;f+=2){g+="ff"}var e=b+g+k;return e};this.hashString=function(a,c){var b=new KJUR.crypto.MessageDigest({alg:c});return b.digestString(a)};this.hashHex=function(b,c){var a=new KJUR.crypto.MessageDigest({alg:c});return a.digestHex(b)};this.sha1=function(a){return this.hashString(a,"sha1")};this.sha256=function(a){return this.hashString(a,"sha256")};this.sha256Hex=function(a){return this.hashHex(a,"sha256")};this.sha512=function(a){return this.hashString(a,"sha512")};this.sha512Hex=function(a){return this.hashHex(a,"sha512")};this.isKey=function(a){if(a instanceof RSAKey||a instanceof KJUR.crypto.DSA||a instanceof KJUR.crypto.ECDSA){return true}else{return false}}};KJUR.crypto.Util.md5=function(a){var b=new KJUR.crypto.MessageDigest({alg:"md5",prov:"cryptojs"});return b.digestString(a)};KJUR.crypto.Util.ripemd160=function(a){var b=new KJUR.crypto.MessageDigest({alg:"ripemd160",prov:"cryptojs"});return b.digestString(a)};KJUR.crypto.Util.SECURERANDOMGEN=new SecureRandom();KJUR.crypto.Util.getRandomHexOfNbytes=function(b){var a=new Array(b);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(a);return BAtohex(a)};KJUR.crypto.Util.getRandomBigIntegerOfNbytes=function(a){return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbytes(a),16)};KJUR.crypto.Util.getRandomHexOfNbits=function(d){var c=d%8;var a=(d-c)/8;var b=new Array(a+1);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(b);b[0]=(((255<<c)&255)^255)&b[0];return BAtohex(b)};KJUR.crypto.Util.getRandomBigIntegerOfNbits=function(a){return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbits(a),16)};KJUR.crypto.Util.getRandomBigIntegerZeroToMax=function(b){var a=b.bitLength();while(1){var c=KJUR.crypto.Util.getRandomBigIntegerOfNbits(a);if(b.compareTo(c)!=-1){return c}}};KJUR.crypto.Util.getRandomBigIntegerMinToMax=function(e,b){var c=e.compareTo(b);if(c==1){throw"biMin is greater than biMax"}if(c==0){return e}var a=b.subtract(e);var d=KJUR.crypto.Util.getRandomBigIntegerZeroToMax(a);return d.add(e)};KJUR.crypto.MessageDigest=function(c){var b=null;var a=null;var d=null;this.setAlgAndProvider=function(g,f){g=KJUR.crypto.MessageDigest.getCanonicalAlgName(g);if(g!==null&&f===undefined){f=KJUR.crypto.Util.DEFAULTPROVIDER[g]}if(":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g)!=-1&&f=="cryptojs"){try{this.md=KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g].create()}catch(e){throw"setAlgAndProvider hash alg set fail alg="+g+"/"+e}this.updateString=function(h){this.md.update(h)};this.updateHex=function(h){var i=CryptoJS.enc.Hex.parse(h);this.md.update(i)};this.digest=function(){var h=this.md.finalize();return h.toString(CryptoJS.enc.Hex)};this.digestString=function(h){this.updateString(h);return this.digest()};this.digestHex=function(h){this.updateHex(h);return this.digest()}}if(":sha256:".indexOf(g)!=-1&&f=="sjcl"){try{this.md=new sjcl.hash.sha256()}catch(e){throw"setAlgAndProvider hash alg set fail alg="+g+"/"+e}this.updateString=function(h){this.md.update(h)};this.updateHex=function(i){var h=sjcl.codec.hex.toBits(i);this.md.update(h)};this.digest=function(){var h=this.md.finalize();return sjcl.codec.hex.fromBits(h)};this.digestString=function(h){this.updateString(h);return this.digest()};this.digestHex=function(h){this.updateHex(h);return this.digest()}}};this.updateString=function(e){throw"updateString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName};this.updateHex=function(e){throw"updateHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName};this.digest=function(){throw"digest() not supported for this alg/prov: "+this.algName+"/"+this.provName};this.digestString=function(e){throw"digestString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName};this.digestHex=function(e){throw"digestHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName};if(c!==undefined){if(c.alg!==undefined){this.algName=c.alg;if(c.prov===undefined){this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName]}this.setAlgAndProvider(this.algName,this.provName)}}};KJUR.crypto.MessageDigest.getCanonicalAlgName=function(a){if(typeof a==="string"){a=a.toLowerCase();a=a.replace(/-/,"")}return a};KJUR.crypto.MessageDigest.getHashLength=function(c){var b=KJUR.crypto.MessageDigest;var a=b.getCanonicalAlgName(c);if(b.HASHLENGTH[a]===undefined){throw"not supported algorithm: "+c}return b.HASHLENGTH[a]};KJUR.crypto.MessageDigest.HASHLENGTH={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,ripemd160:20};KJUR.crypto.Mac=function(d){var f=null;var c=null;var a=null;var e=null;var b=null;this.setAlgAndProvider=function(k,i){k=k.toLowerCase();if(k==null){k="hmacsha1"}k=k.toLowerCase();if(k.substr(0,4)!="hmac"){throw"setAlgAndProvider unsupported HMAC alg: "+k}if(i===undefined){i=KJUR.crypto.Util.DEFAULTPROVIDER[k]}this.algProv=k+"/"+i;var g=k.substr(4);if(":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g)!=-1&&i=="cryptojs"){try{var j=KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g];this.mac=CryptoJS.algo.HMAC.create(j,this.pass)}catch(h){throw"setAlgAndProvider hash alg set fail hashAlg="+g+"/"+h}this.updateString=function(l){this.mac.update(l)};this.updateHex=function(l){var m=CryptoJS.enc.Hex.parse(l);this.mac.update(m)};this.doFinal=function(){var l=this.mac.finalize();return l.toString(CryptoJS.enc.Hex)};this.doFinalString=function(l){this.updateString(l);return this.doFinal()};this.doFinalHex=function(l){this.updateHex(l);return this.doFinal()}}};this.updateString=function(g){throw"updateString(str) not supported for this alg/prov: "+this.algProv};this.updateHex=function(g){throw"updateHex(hex) not supported for this alg/prov: "+this.algProv};this.doFinal=function(){throw"digest() not supported for this alg/prov: "+this.algProv};this.doFinalString=function(g){throw"digestString(str) not supported for this alg/prov: "+this.algProv};this.doFinalHex=function(g){throw"digestHex(hex) not supported for this alg/prov: "+this.algProv};this.setPassword=function(h){if(typeof h=="string"){var g=h;if(h.length%2==1||!h.match(/^[0-9A-Fa-f]+$/)){g=rstrtohex(h)}this.pass=CryptoJS.enc.Hex.parse(g);return}if(typeof h!="object"){throw"KJUR.crypto.Mac unsupported password type: "+h}var g=null;if(h.hex!==undefined){if(h.hex.length%2!=0||!h.hex.match(/^[0-9A-Fa-f]+$/)){throw"Mac: wrong hex password: "+h.hex}g=h.hex}if(h.utf8!==undefined){g=utf8tohex(h.utf8)}if(h.rstr!==undefined){g=rstrtohex(h.rstr)}if(h.b64!==undefined){g=b64tohex(h.b64)}if(h.b64u!==undefined){g=b64utohex(h.b64u)}if(g==null){throw"KJUR.crypto.Mac unsupported password type: "+h}this.pass=CryptoJS.enc.Hex.parse(g)};if(d!==undefined){if(d.pass!==undefined){this.setPassword(d.pass)}if(d.alg!==undefined){this.algName=d.alg;if(d.prov===undefined){this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName]}this.setAlgAndProvider(this.algName,this.provName)}}};KJUR.crypto.Signature=function(o){var q=null;var n=null;var r=null;var c=null;var l=null;var d=null;var k=null;var h=null;var p=null;var e=null;var b=-1;var g=null;var j=null;var a=null;var i=null;var f=null;this._setAlgNames=function(){var s=this.algName.match(/^(.+)with(.+)$/);if(s){this.mdAlgName=s[1].toLowerCase();this.pubkeyAlgName=s[2].toLowerCase();if(this.pubkeyAlgName=="rsaandmgf1"&&this.mdAlgName=="sha"){this.mdAlgName="sha1"}}};this._zeroPaddingOfSignature=function(x,w){var v="";var t=w/4-x.length;for(var u=0;u<t;u++){v=v+"0"}return v+x};this.setAlgAndProvider=function(u,t){this._setAlgNames();if(t!="cryptojs/jsrsa"){throw new Error("provider not supported: "+t)}if(":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName)!=-1){try{this.md=new KJUR.crypto.MessageDigest({alg:this.mdAlgName})}catch(s){throw new Error("setAlgAndProvider hash alg set fail alg="+this.mdAlgName+"/"+s)}this.init=function(w,x){var y=null;try{if(x===undefined){y=KEYUTIL.getKey(w)}else{y=KEYUTIL.getKey(w,x)}}catch(v){throw"init failed:"+v}if(y.isPrivate===true){this.prvKey=y;this.state="SIGN"}else{if(y.isPublic===true){this.pubKey=y;this.state="VERIFY"}else{throw"init failed.:"+y}}};this.updateString=function(v){this.md.updateString(v)};this.updateHex=function(v){this.md.updateHex(v)};this.sign=function(){this.sHashHex=this.md.digest();if(this.prvKey===undefined&&this.ecprvhex!==undefined&&this.eccurvename!==undefined&&KJUR.crypto.ECDSA!==undefined){this.prvKey=new KJUR.crypto.ECDSA({curve:this.eccurvename,prv:this.ecprvhex})}if(this.prvKey instanceof RSAKey&&this.pubkeyAlgName==="rsaandmgf1"){this.hSign=this.prvKey.signWithMessageHashPSS(this.sHashHex,this.mdAlgName,this.pssSaltLen)}else{if(this.prvKey instanceof RSAKey&&this.pubkeyAlgName==="rsa"){this.hSign=this.prvKey.signWithMessageHash(this.sHashHex,this.mdAlgName)}else{if(this.prvKey instanceof KJUR.crypto.ECDSA){this.hSign=this.prvKey.signWithMessageHash(this.sHashHex)}else{if(this.prvKey instanceof KJUR.crypto.DSA){this.hSign=this.prvKey.signWithMessageHash(this.sHashHex)}else{throw"Signature: unsupported private key alg: "+this.pubkeyAlgName}}}}return this.hSign};this.signString=function(v){this.updateString(v);return this.sign()};this.signHex=function(v){this.updateHex(v);return this.sign()};this.verify=function(v){this.sHashHex=this.md.digest();if(this.pubKey===undefined&&this.ecpubhex!==undefined&&this.eccurvename!==undefined&&KJUR.crypto.ECDSA!==undefined){this.pubKey=new KJUR.crypto.ECDSA({curve:this.eccurvename,pub:this.ecpubhex})}if(this.pubKey instanceof RSAKey&&this.pubkeyAlgName==="rsaandmgf1"){return this.pubKey.verifyWithMessageHashPSS(this.sHashHex,v,this.mdAlgName,this.pssSaltLen)}else{if(this.pubKey instanceof RSAKey&&this.pubkeyAlgName==="rsa"){return this.pubKey.verifyWithMessageHash(this.sHashHex,v)}else{if(KJUR.crypto.ECDSA!==undefined&&this.pubKey instanceof KJUR.crypto.ECDSA){return this.pubKey.verifyWithMessageHash(this.sHashHex,v)}else{if(KJUR.crypto.DSA!==undefined&&this.pubKey instanceof KJUR.crypto.DSA){return this.pubKey.verifyWithMessageHash(this.sHashHex,v)}else{throw"Signature: unsupported public key alg: "+this.pubkeyAlgName}}}}}}};this.init=function(s,t){throw"init(key, pass) not supported for this alg:prov="+this.algProvName};this.updateString=function(s){throw"updateString(str) not supported for this alg:prov="+this.algProvName};this.updateHex=function(s){throw"updateHex(hex) not supported for this alg:prov="+this.algProvName};this.sign=function(){throw"sign() not supported for this alg:prov="+this.algProvName};this.signString=function(s){throw"digestString(str) not supported for this alg:prov="+this.algProvName};this.signHex=function(s){throw"digestHex(hex) not supported for this alg:prov="+this.algProvName};this.verify=function(s){throw"verify(hSigVal) not supported for this alg:prov="+this.algProvName};this.initParams=o;if(o!==undefined){if(o.alg!==undefined){this.algName=o.alg;if(o.prov===undefined){this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName]}else{this.provName=o.prov}this.algProvName=this.algName+":"+this.provName;this.setAlgAndProvider(this.algName,this.provName);this._setAlgNames()}if(o.psssaltlen!==undefined){this.pssSaltLen=o.psssaltlen}if(o.prvkeypem!==undefined){if(o.prvkeypas!==undefined){throw"both prvkeypem and prvkeypas parameters not supported"}else{try{var q=KEYUTIL.getKey(o.prvkeypem);this.init(q)}catch(m){throw"fatal error to load pem private key: "+m}}}}};KJUR.crypto.OID=new function(){this.oidhex2name={"2a864886f70d010101":"rsaEncryption","2a8648ce3d0201":"ecPublicKey","2a8648ce380401":"dsa","2a8648ce3d030107":"secp256r1","2b8104001f":"secp192k1","2b81040021":"secp224r1","2b8104000a":"secp256k1","2b81040022":"secp384r1","2b81040023":"secp521r1","2a8648ce380403":"SHA1withDSA","608648016503040301":"SHA224withDSA","608648016503040302":"SHA256withDSA",}};
if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.crypto=="undefined"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.ECDSA=function(e){var g="secp256r1";var p=null;var b=null;var i=null;var j=Error,f=BigInteger,h=ECPointFp,m=KJUR.crypto.ECDSA,c=KJUR.crypto.ECParameterDB,d=m.getName,q=ASN1HEX,n=q.getVbyListEx,k=q.isASN1HEX;var a=new SecureRandom();var o=null;this.type="EC";this.isPrivate=false;this.isPublic=false;function l(x,t,w,s){var r=Math.max(t.bitLength(),s.bitLength());var y=x.add2D(w);var v=x.curve.getInfinity();for(var u=r-1;u>=0;--u){v=v.twice2D();v.z=f.ONE;if(t.testBit(u)){if(s.testBit(u)){v=v.add2D(y)}else{v=v.add2D(x)}}else{if(s.testBit(u)){v=v.add2D(w)}}}return v}this.getBigRandom=function(r){return new f(r.bitLength(),a).mod(r.subtract(f.ONE)).add(f.ONE)};this.setNamedCurve=function(r){this.ecparams=c.getByName(r);this.prvKeyHex=null;this.pubKeyHex=null;this.curveName=r};this.setPrivateKeyHex=function(r){this.isPrivate=true;this.prvKeyHex=r};this.setPublicKeyHex=function(r){this.isPublic=true;this.pubKeyHex=r};this.getPublicKeyXYHex=function(){var t=this.pubKeyHex;if(t.substr(0,2)!=="04"){throw"this method supports uncompressed format(04) only"}var s=this.ecparams.keycharlen;if(t.length!==2+s*2){throw"malformed public key hex length"}var r={};r.x=t.substr(2,s);r.y=t.substr(2+s);return r};this.getShortNISTPCurveName=function(){var r=this.curveName;if(r==="secp256r1"||r==="NIST P-256"||r==="P-256"||r==="prime256v1"){return"P-256"}if(r==="secp384r1"||r==="NIST P-384"||r==="P-384"){return"P-384"}if(r==="secp521r1"||r==="NIST P-521"||r==="P-521"){return"P-521"}return null};this.generateKeyPairHex=function(){var s=this.ecparams.n;var u=this.getBigRandom(s);var r=this.ecparams.keycharlen;var t=("0000000000"+u.toString(16)).slice(-r);this.setPrivateKeyHex(t);var v=this.generatePublicKeyHex();return{ecprvhex:t,ecpubhex:v}};this.generatePublicKeyHex=function(){var u=new f(this.prvKeyHex,16);var w=this.ecparams.G.multiply(u);var t=w.getX().toBigInteger();var s=w.getY().toBigInteger();var r=this.ecparams.keycharlen;var y=("0000000000"+t.toString(16)).slice(-r);var v=("0000000000"+s.toString(16)).slice(-r);var x="04"+y+v;this.setPublicKeyHex(x);return x};this.signWithMessageHash=function(r){return this.signHex(r,this.prvKeyHex)};this.signHex=function(x,u){var A=new f(u,16);var v=this.ecparams.n;var z=new f(x.substring(0,this.ecparams.keycharlen),16);do{var w=this.getBigRandom(v);var B=this.ecparams.G;var y=B.multiply(w);var t=y.getX().toBigInteger().mod(v)}while(t.compareTo(f.ZERO)<=0);var C=w.modInverse(v).multiply(z.add(A.multiply(t))).mod(v);return m.biRSSigToASN1Sig(t,C)};this.sign=function(w,B){var z=B;var u=this.ecparams.n;var y=f.fromByteArrayUnsigned(w);do{var v=this.getBigRandom(u);var A=this.ecparams.G;var x=A.multiply(v);var t=x.getX().toBigInteger().mod(u)}while(t.compareTo(BigInteger.ZERO)<=0);var C=v.modInverse(u).multiply(y.add(z.multiply(t))).mod(u);return this.serializeSig(t,C)};this.verifyWithMessageHash=function(s,r){return this.verifyHex(s,r,this.pubKeyHex)};this.verifyHex=function(v,y,u){try{var t,B;var w=m.parseSigHex(y);t=w.r;B=w.s;var x=h.decodeFromHex(this.ecparams.curve,u);var z=new f(v.substring(0,this.ecparams.keycharlen),16);return this.verifyRaw(z,t,B,x)}catch(A){return false}};this.verify=function(z,A,u){var w,t;if(Bitcoin.Util.isArray(A)){var y=this.parseSig(A);w=y.r;t=y.s}else{if("object"===typeof A&&A.r&&A.s){w=A.r;t=A.s}else{throw"Invalid value for signature"}}var v;if(u instanceof ECPointFp){v=u}else{if(Bitcoin.Util.isArray(u)){v=h.decodeFrom(this.ecparams.curve,u)}else{throw"Invalid format for pubkey value, must be byte array or ECPointFp"}}var x=f.fromByteArrayUnsigned(z);return this.verifyRaw(x,w,t,v)};this.verifyRaw=function(z,t,E,y){var x=this.ecparams.n;var D=this.ecparams.G;if(t.compareTo(f.ONE)<0||t.compareTo(x)>=0){return false}if(E.compareTo(f.ONE)<0||E.compareTo(x)>=0){return false}var A=E.modInverse(x);var w=z.multiply(A).mod(x);var u=t.multiply(A).mod(x);var B=D.multiply(w).add(y.multiply(u));var C=B.getX().toBigInteger().mod(x);return C.equals(t)};this.serializeSig=function(v,u){var w=v.toByteArraySigned();var t=u.toByteArraySigned();var x=[];x.push(2);x.push(w.length);x=x.concat(w);x.push(2);x.push(t.length);x=x.concat(t);x.unshift(x.length);x.unshift(48);return x};this.parseSig=function(y){var x;if(y[0]!=48){throw new Error("Signature not a valid DERSequence")}x=2;if(y[x]!=2){throw new Error("First element in signature must be a DERInteger")}var w=y.slice(x+2,x+2+y[x+1]);x+=2+y[x+1];if(y[x]!=2){throw new Error("Second element in signature must be a DERInteger")}var t=y.slice(x+2,x+2+y[x+1]);x+=2+y[x+1];var v=f.fromByteArrayUnsigned(w);var u=f.fromByteArrayUnsigned(t);return{r:v,s:u}};this.parseSigCompact=function(w){if(w.length!==65){throw"Signature has the wrong length"}var t=w[0]-27;if(t<0||t>7){throw"Invalid signature type"}var x=this.ecparams.n;var v=f.fromByteArrayUnsigned(w.slice(1,33)).mod(x);var u=f.fromByteArrayUnsigned(w.slice(33,65)).mod(x);return{r:v,s:u,i:t}};this.readPKCS5PrvKeyHex=function(u){if(k(u)===false){throw new Error("not ASN.1 hex string")}var r,t,v;try{r=n(u,0,["[0]",0],"06");t=n(u,0,[1],"04");try{v=n(u,0,["[1]",0],"03")}catch(s){}}catch(s){throw new Error("malformed PKCS#1/5 plain ECC private key")}this.curveName=d(r);if(this.curveName===undefined){throw"unsupported curve name"}this.setNamedCurve(this.curveName);this.setPublicKeyHex(v);this.setPrivateKeyHex(t);this.isPublic=false};this.readPKCS8PrvKeyHex=function(v){if(k(v)===false){throw new j("not ASN.1 hex string")}var t,r,u,w;try{t=n(v,0,[1,0],"06");r=n(v,0,[1,1],"06");u=n(v,0,[2,0,1],"04");try{w=n(v,0,[2,0,"[1]",0],"03")}catch(s){}}catch(s){throw new j("malformed PKCS#8 plain ECC private key")}this.curveName=d(r);if(this.curveName===undefined){throw new j("unsupported curve name")}this.setNamedCurve(this.curveName);this.setPublicKeyHex(w);this.setPrivateKeyHex(u);this.isPublic=false};this.readPKCS8PubKeyHex=function(u){if(k(u)===false){throw new j("not ASN.1 hex string")}var t,r,v;try{t=n(u,0,[0,0],"06");r=n(u,0,[0,1],"06");v=n(u,0,[1],"03")}catch(s){throw new j("malformed PKCS#8 ECC public key")}this.curveName=d(r);if(this.curveName===null){throw new j("unsupported curve name")}this.setNamedCurve(this.curveName);this.setPublicKeyHex(v)};this.readCertPubKeyHex=function(t,v){if(k(t)===false){throw new j("not ASN.1 hex string")}var r,u;try{r=n(t,0,[0,5,0,1],"06");u=n(t,0,[0,5,1],"03")}catch(s){throw new j("malformed X.509 certificate ECC public key")}this.curveName=d(r);if(this.curveName===null){throw new j("unsupported curve name")}this.setNamedCurve(this.curveName);this.setPublicKeyHex(u)};if(e!==undefined){if(e.curve!==undefined){this.curveName=e.curve}}if(this.curveName===undefined){this.curveName=g}this.setNamedCurve(this.curveName);if(e!==undefined){if(e.prv!==undefined){this.setPrivateKeyHex(e.prv)}if(e.pub!==undefined){this.setPublicKeyHex(e.pub)}}};KJUR.crypto.ECDSA.parseSigHex=function(a){var b=KJUR.crypto.ECDSA.parseSigHexInHexRS(a);var d=new BigInteger(b.r,16);var c=new BigInteger(b.s,16);return{r:d,s:c}};KJUR.crypto.ECDSA.parseSigHexInHexRS=function(f){var j=ASN1HEX,i=j.getChildIdx,g=j.getV;j.checkStrictDER(f,0);if(f.substr(0,2)!="30"){throw new Error("signature is not a ASN.1 sequence")}var h=i(f,0);if(h.length!=2){throw new Error("signature shall have two elements")}var e=h[0];var d=h[1];if(f.substr(e,2)!="02"){throw new Error("1st item not ASN.1 integer")}if(f.substr(d,2)!="02"){throw new Error("2nd item not ASN.1 integer")}var c=g(f,e);var b=g(f,d);return{r:c,s:b}};KJUR.crypto.ECDSA.asn1SigToConcatSig=function(d){var e=KJUR.crypto.ECDSA.parseSigHexInHexRS(d);var b=e.r;var a=e.s;if(b.length>=130&&b.length<=134){if(b.length%2!=0){throw Error("unknown ECDSA sig r length error")}if(a.length%2!=0){throw Error("unknown ECDSA sig s length error")}if(b.substr(0,2)=="00"){b=b.substr(2)}if(a.substr(0,2)=="00"){a=a.substr(2)}var c=Math.max(b.length,a.length);b=("000000"+b).slice(-c);a=("000000"+a).slice(-c);return b+a}if(b.substr(0,2)=="00"&&(b.length%32)==2){b=b.substr(2)}if(a.substr(0,2)=="00"&&(a.length%32)==2){a=a.substr(2)}if((b.length%32)==30){b="00"+b}if((a.length%32)==30){a="00"+a}if(b.length%32!=0){throw Error("unknown ECDSA sig r length error")}if(a.length%32!=0){throw Error("unknown ECDSA sig s length error")}return b+a};KJUR.crypto.ECDSA.concatSigToASN1Sig=function(a){if(a.length%4!=0){throw Error("unknown ECDSA concatinated r-s sig length error")}var c=a.substr(0,a.length/2);var b=a.substr(a.length/2);return KJUR.crypto.ECDSA.hexRSSigToASN1Sig(c,b)};KJUR.crypto.ECDSA.hexRSSigToASN1Sig=function(b,a){var d=new BigInteger(b,16);var c=new BigInteger(a,16);return KJUR.crypto.ECDSA.biRSSigToASN1Sig(d,c)};KJUR.crypto.ECDSA.biRSSigToASN1Sig=function(f,d){var c=KJUR.asn1;var b=new c.DERInteger({bigint:f});var a=new c.DERInteger({bigint:d});var e=new c.DERSequence({array:[b,a]});return e.tohex()};KJUR.crypto.ECDSA.getName=function(a){if(a==="2b8104001f"){return"secp192k1"}if(a==="2a8648ce3d030107"){return"secp256r1"}if(a==="2b8104000a"){return"secp256k1"}if(a==="2b81040021"){return"secp224r1"}if(a==="2b81040022"){return"secp384r1"}if(a==="2b81040023"){return"secp521r1"}if("|secp256r1|NIST P-256|P-256|prime256v1|".indexOf(a)!==-1){return"secp256r1"}if("|secp256k1|".indexOf(a)!==-1){return"secp256k1"}if("|secp224r1|NIST P-224|P-224|".indexOf(a)!==-1){return"secp224r1"}if("|secp384r1|NIST P-384|P-384|".indexOf(a)!==-1){return"secp384r1"}if("|secp521r1|NIST P-521|P-521|".indexOf(a)!==-1){return"secp521r1"}return null};
if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.crypto=="undefined"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.ECParameterDB=new function(){var b={};var c={};function a(d){return new BigInteger(d,16)}this.getByName=function(e){var d=e;if(typeof c[d]!="undefined"){d=c[e]}if(typeof b[d]!="undefined"){return b[d]}throw"unregistered EC curve name: "+d};this.regist=function(A,l,o,g,m,e,j,f,k,u,d,x){b[A]={};var s=a(o);var z=a(g);var y=a(m);var t=a(e);var w=a(j);var r=new ECCurveFp(s,z,y);var q=r.decodePointHex("04"+f+k);b[A]["name"]=A;b[A]["keylen"]=l;b[A]["keycharlen"]=Math.ceil(l/8)*2;b[A]["curve"]=r;b[A]["G"]=q;b[A]["n"]=t;b[A]["h"]=w;b[A]["oid"]=d;b[A]["info"]=x;for(var v=0;v<u.length;v++){c[u[v]]=A}}};KJUR.crypto.ECParameterDB.regist("secp128r1",128,"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC","E87579C11079F43DD824993C2CEE5ED3","FFFFFFFE0000000075A30D1B9038A115","1","161FF7528B899B2D0C28607CA52C5B86","CF5AC8395BAFEB13C02DA292DDED7A83",[],"","secp128r1 : SECG curve over a 128 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160k1",160,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73","0","7","0100000000000000000001B8FA16DFAB9ACA16B6B3","1","3B4C382CE37AA192A4019E763036F4F5DD4D7EBB","938CF935318FDCED6BC28286531733C3F03C4FEE",[],"","secp160k1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160r1",160,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC","1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45","0100000000000000000001F4C8F927AED3CA752257","1","4A96B5688EF573284664698968C38BB913CBFC82","23A628553168947D59DCC912042351377AC5FB32",[],"","secp160r1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp192k1",192,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37","0","3","FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D","1","DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D","9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D",[]);KJUR.crypto.ECParameterDB.regist("secp192r1",192,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC","64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1","FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831","1","188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012","07192B95FFC8DA78631011ED6B24CDD573F977A11E794811",[]);KJUR.crypto.ECParameterDB.regist("secp224r1",224,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE","B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4","FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D","1","B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21","BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34",[]);KJUR.crypto.ECParameterDB.regist("secp256k1",256,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F","0","7","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141","1","79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798","483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8",[]);KJUR.crypto.ECParameterDB.regist("secp256r1",256,"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC","5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B","FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551","1","6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296","4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5",["NIST P-256","P-256","prime256v1"]);KJUR.crypto.ECParameterDB.regist("secp384r1",384,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC","B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973","1","AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7","3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f",["NIST P-384","P-384"]);KJUR.crypto.ECParameterDB.regist("secp521r1",521,"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC","051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00","1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409","1","00C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66","011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650",["NIST P-521","P-521"]);
if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.crypto=="undefined"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.DSA=function(){var b=ASN1HEX,e=b.getVbyList,d=b.getVbyListEx,a=b.isASN1HEX,c=BigInteger;this.p=null;this.q=null;this.g=null;this.y=null;this.x=null;this.type="DSA";this.isPrivate=false;this.isPublic=false;this.setPrivate=function(j,i,h,k,f){this.isPrivate=true;this.p=j;this.q=i;this.g=h;this.y=k;this.x=f};this.setPrivateHex=function(i,g,k,n,o){var h,f,j,l,m;h=new BigInteger(i,16);f=new BigInteger(g,16);j=new BigInteger(k,16);if(typeof n==="string"&&n.length>1){l=new BigInteger(n,16)}else{l=null}m=new BigInteger(o,16);this.setPrivate(h,f,j,l,m)};this.setPublic=function(i,h,f,j){this.isPublic=true;this.p=i;this.q=h;this.g=f;this.y=j;this.x=null};this.setPublicHex=function(k,j,i,l){var g,f,m,h;g=new BigInteger(k,16);f=new BigInteger(j,16);m=new BigInteger(i,16);h=new BigInteger(l,16);this.setPublic(g,f,m,h)};this.signWithMessageHash=function(j){var i=this.p;var h=this.q;var m=this.g;var o=this.y;var t=this.x;var l=KJUR.crypto.Util.getRandomBigIntegerMinToMax(BigInteger.ONE.add(BigInteger.ONE),h.subtract(BigInteger.ONE));var u=j.substr(0,h.bitLength()/4);var n=new BigInteger(u,16);var f=(m.modPow(l,i)).mod(h);var w=(l.modInverse(h).multiply(n.add(t.multiply(f)))).mod(h);var v=KJUR.asn1.ASN1Util.jsonToASN1HEX({seq:[{"int":{bigint:f}},{"int":{bigint:w}}]});return v};this.verifyWithMessageHash=function(m,l){var j=this.p;var h=this.q;var o=this.g;var u=this.y;var n=this.parseASN1Signature(l);var f=n[0];var C=n[1];var B=m.substr(0,h.bitLength()/4);var t=new BigInteger(B,16);if(BigInteger.ZERO.compareTo(f)>0||f.compareTo(h)>0){throw"invalid DSA signature"}if(BigInteger.ZERO.compareTo(C)>=0||C.compareTo(h)>0){throw"invalid DSA signature"}var x=C.modInverse(h);var k=t.multiply(x).mod(h);var i=f.multiply(x).mod(h);var A=o.modPow(k,j).multiply(u.modPow(i,j)).mod(j).mod(h);return A.compareTo(f)==0};this.parseASN1Signature=function(f){try{var i=new c(d(f,0,[0],"02"),16);var h=new c(d(f,0,[1],"02"),16);return[i,h]}catch(g){throw new Error("malformed ASN.1 DSA signature")}};this.readPKCS5PrvKeyHex=function(j){var k,i,g,l,m;if(a(j)===false){throw new Error("not ASN.1 hex string")}try{k=d(j,0,[1],"02");i=d(j,0,[2],"02");g=d(j,0,[3],"02");l=d(j,0,[4],"02");m=d(j,0,[5],"02")}catch(f){throw new Error("malformed PKCS#1/5 plain DSA private key")}this.setPrivateHex(k,i,g,l,m)};this.readPKCS8PrvKeyHex=function(j){var k,i,g,l;if(a(j)===false){throw new Error("not ASN.1 hex string")}try{k=d(j,0,[1,1,0],"02");i=d(j,0,[1,1,1],"02");g=d(j,0,[1,1,2],"02");l=d(j,0,[2,0],"02")}catch(f){throw new Error("malformed PKCS#8 plain DSA private key")}this.setPrivateHex(k,i,g,null,l)};this.readPKCS8PubKeyHex=function(j){var k,i,g,l;if(a(j)===false){throw new Error("not ASN.1 hex string")}try{k=d(j,0,[0,1,0],"02");i=d(j,0,[0,1,1],"02");g=d(j,0,[0,1,2],"02");l=d(j,0,[1,0],"02")}catch(f){throw new Error("malformed PKCS#8 DSA public key")}this.setPublicHex(k,i,g,l)};this.readCertPubKeyHex=function(j,m){var k,i,g,l;if(a(j)===false){throw new Error("not ASN.1 hex string")}try{k=d(j,0,[0,5,0,1,0],"02");i=d(j,0,[0,5,0,1,1],"02");g=d(j,0,[0,5,0,1,2],"02");l=d(j,0,[0,5,1,0],"02")}catch(f){throw new Error("malformed X.509 certificate DSA public key")}this.setPublicHex(k,i,g,l)}};
var KEYUTIL=function(){var d=function(p,r,q){return k(CryptoJS.AES,p,r,q)};var e=function(p,r,q){return k(CryptoJS.TripleDES,p,r,q)};var a=function(p,r,q){return k(CryptoJS.DES,p,r,q)};var k=function(s,x,u,q){var r=CryptoJS.enc.Hex.parse(x);var w=CryptoJS.enc.Hex.parse(u);var p=CryptoJS.enc.Hex.parse(q);var t={};t.key=w;t.iv=p;t.ciphertext=r;var v=s.decrypt(t,w,{iv:p});return CryptoJS.enc.Hex.stringify(v)};var l=function(p,r,q){return g(CryptoJS.AES,p,r,q)};var o=function(p,r,q){return g(CryptoJS.TripleDES,p,r,q)};var f=function(p,r,q){return g(CryptoJS.DES,p,r,q)};var g=function(t,y,v,q){var s=CryptoJS.enc.Hex.parse(y);var x=CryptoJS.enc.Hex.parse(v);var p=CryptoJS.enc.Hex.parse(q);var w=t.encrypt(s,x,{iv:p});var r=CryptoJS.enc.Hex.parse(w.toString());var u=CryptoJS.enc.Base64.stringify(r);return u};var i={"AES-256-CBC":{proc:d,eproc:l,keylen:32,ivlen:16},"AES-192-CBC":{proc:d,eproc:l,keylen:24,ivlen:16},"AES-128-CBC":{proc:d,eproc:l,keylen:16,ivlen:16},"DES-EDE3-CBC":{proc:e,eproc:o,keylen:24,ivlen:8},"DES-CBC":{proc:a,eproc:f,keylen:8,ivlen:8}};var c=function(p){return i[p]["proc"]};var m=function(p){var r=CryptoJS.lib.WordArray.random(p);var q=CryptoJS.enc.Hex.stringify(r);return q};var n=function(v){var w={};var q=v.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)","m"));if(q){w.cipher=q[1];w.ivsalt=q[2]}var p=v.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));if(p){w.type=p[1]}var u=-1;var x=0;if(v.indexOf("\r\n\r\n")!=-1){u=v.indexOf("\r\n\r\n");x=2}if(v.indexOf("\n\n")!=-1){u=v.indexOf("\n\n");x=1}var t=v.indexOf("-----END");if(u!=-1&&t!=-1){var r=v.substring(u+x*2,t-x);r=r.replace(/\s+/g,"");w.data=r}return w};var j=function(q,y,p){var v=p.substring(0,16);var t=CryptoJS.enc.Hex.parse(v);var r=CryptoJS.enc.Utf8.parse(y);var u=i[q]["keylen"]+i[q]["ivlen"];var x="";var w=null;for(;;){var s=CryptoJS.algo.MD5.create();if(w!=null){s.update(w)}s.update(r);s.update(t);w=s.finalize();x=x+CryptoJS.enc.Hex.stringify(w);if(x.length>=u*2){break}}var z={};z.keyhex=x.substr(0,i[q]["keylen"]*2);z.ivhex=x.substr(i[q]["keylen"]*2,i[q]["ivlen"]*2);return z};var b=function(p,v,r,w){var s=CryptoJS.enc.Base64.parse(p);var q=CryptoJS.enc.Hex.stringify(s);var u=i[v]["proc"];var t=u(q,r,w);return t};var h=function(p,s,q,u){var r=i[s]["eproc"];var t=r(p,q,u);return t};return{version:"1.0.0",parsePKCS5PEM:function(p){return n(p)},getKeyAndUnusedIvByPasscodeAndIvsalt:function(q,p,r){return j(q,p,r)},decryptKeyB64:function(p,r,q,s){return b(p,r,q,s)},getDecryptedKeyHex:function(y,x){var q=n(y);var t=q.type;var r=q.cipher;var p=q.ivsalt;var s=q.data;var w=j(r,x,p);var v=w.keyhex;var u=b(s,r,v,p);return u},getEncryptedPKCS5PEMFromPrvKeyHex:function(x,s,A,t,r){var p="";if(typeof t=="undefined"||t==null){t="AES-256-CBC"}if(typeof i[t]=="undefined"){throw new Error("KEYUTIL unsupported algorithm: "+t)}if(typeof r=="undefined"||r==null){var v=i[t]["ivlen"];var u=m(v);r=u.toUpperCase()}var z=j(t,A,r);var y=z.keyhex;var w=h(s,t,y,r);var q=w.replace(/(.{64})/g,"$1\r\n");var p="-----BEGIN "+x+" PRIVATE KEY-----\r\n";p+="Proc-Type: 4,ENCRYPTED\r\n";p+="DEK-Info: "+t+","+r+"\r\n";p+="\r\n";p+=q;p+="\r\n-----END "+x+" PRIVATE KEY-----\r\n";return p},getEncryptedPKCS8PEM:function(r,p,s){var q=this.getEncryptedPKCS8Hex(r,p,s);return hextopem(q,"ENCRYPTED PRIVATE KEY")},getEncryptedPKCS8Hex:function(r,p,t){var q;if(t==undefined||t==null){q={}}else{q=JSON.parse(JSON.stringify(t))}q.plain=r;this.initPBES2Param(q);this.encryptPBES2Param(q,p);var s=this.generatePBES2ASN1Param(q);return KJUR.asn1.ASN1Util.newObject(s).tohex()},initPBES2Param:function(p){if(aryval(p,"encalg")==undefined){p.encalg="aes256-CBC"}if(aryval(p,"iter")==undefined){p.iter=2048}if(aryval(p,"prf")==undefined){p.prf="hmacWithSHA256"}if(aryval(p,"salt")==undefined){p.salt=CryptoJS.enc.Hex.stringify(CryptoJS.lib.WordArray.random(8))}if(aryval(p,"enciv")==undefined){var q;if(p.encalg=="des-EDE3-CBC"){q=8}if(p.encalg=="aes128-CBC"){q=16}if(p.encalg=="aes256-CBC"){q=16}p.enciv=CryptoJS.enc.Hex.stringify(CryptoJS.lib.WordArray.random(q))}},encryptPBES2Param:function(p,q){var t=KEYUTIL.getDKFromPBES2Param(p,q);try{var s=KJUR.crypto.Cipher.encrypt(p.plain,t,p.encalg,{iv:p.enciv})}catch(r){throw new Error("encrypt error: "+p.plain+" "+t+" "+p.encalg+" "+p.enciv)}p.enc=s},generatePBES2ASN1Param:function(p){var q={seq:[{seq:[{oid:"pkcs5PBES2"},{seq:[{seq:[{oid:"pkcs5PBKDF2"},{seq:[{octstr:{hex:p.salt}},{"int":{hex:inttohex(p.iter)}}]}]},{seq:[{oid:p.encalg},{octstr:{hex:p.enciv}}]}]}]},{octstr:{hex:p.enc}}]};if(p.prf!="hmacWithSHA1"){q.seq[0].seq[1].seq[0].seq[1].seq.push({seq:[{oid:p.prf},{"null":""}]})}return q},parseHexOfEncryptedPKCS8:function(y){var B=ASN1HEX;var z=B.getChildIdx;var w=B.getV;var t={};var r=z(y,0);if(r.length!=2){throw new Error("malformed format: SEQUENCE(0).items != 2: "+r.length)}t.ciphertext=w(y,r[1]);var A=z(y,r[0]);if(A.length!=2){throw new Error("malformed format: SEQUENCE(0.0).items != 2: "+A.length)}if(w(y,A[0])!="2a864886f70d01050d"){throw new Error("this only supports pkcs5PBES2")}var p=z(y,A[1]);if(A.length!=2){throw new Error("malformed format: SEQUENCE(0.0.1).items != 2: "+p.length)}var q=z(y,p[1]);if(q.length!=2){throw new Error("malformed format: SEQUENCE(0.0.1.1).items != 2: "+q.length)}if(w(y,q[0])!="2a864886f70d0307"){throw"this only supports TripleDES"}t.encryptionSchemeAlg="TripleDES";t.encryptionSchemeIV=w(y,q[1]);var s=z(y,p[0]);if(s.length!=2){throw new Error("malformed format: SEQUENCE(0.0.1.0).items != 2: "+s.length)}if(w(y,s[0])!="2a864886f70d01050c"){throw new Error("this only supports pkcs5PBKDF2")}var x=z(y,s[1]);if(x.length<2){throw new Error("malformed format: SEQUENCE(0.0.1.0.1).items < 2: "+x.length)}t.pbkdf2Salt=w(y,x[0]);var u=w(y,x[1]);try{t.pbkdf2Iter=parseInt(u,16)}catch(v){throw new Error("malformed format pbkdf2Iter: "+u)}return t},getPBKDF2KeyHexFromParam:function(u,p){var t=CryptoJS.enc.Hex.parse(u.pbkdf2Salt);var q=u.pbkdf2Iter;var s=CryptoJS.PBKDF2(p,t,{keySize:192/32,iterations:q});var r=CryptoJS.enc.Hex.stringify(s);return r},_getPlainPKCS8HexFromEncryptedPKCS8PEM:function(x,y){var r=pemtohex(x,"ENCRYPTED PRIVATE KEY");var p=this.parseHexOfEncryptedPKCS8(r);var u=KEYUTIL.getPBKDF2KeyHexFromParam(p,y);var v={};v.ciphertext=CryptoJS.enc.Hex.parse(p.ciphertext);var t=CryptoJS.enc.Hex.parse(u);var s=CryptoJS.enc.Hex.parse(p.encryptionSchemeIV);var w=CryptoJS.TripleDES.decrypt(v,t,{iv:s});var q=CryptoJS.enc.Hex.stringify(w);return q},parsePBES2:function(z){var v=ASN1HEX.parse(z);if(aryval(v,"seq.0.seq.0.oid")!="pkcs5PBES2"||aryval(v,"seq.0.seq.1.seq.0.seq.0.oid")!="pkcs5PBKDF2"){throw new Error("not pkcs5PBES2 and pkcs5PBKDF2 used")}var y=aryval(v,"seq.0.seq.1.seq.0.seq.1.seq");if(y==undefined){throw new Error("PBKDF2 parameter not found")}var t=aryval(y,"0.octstr.hex");var p=aryval(y,"1.int.hex");var q=aryval(y,"2.seq.0.oid","hmacWithSHA1");var x=-1;try{x=parseInt(p,16)}catch(w){throw new Error("iter not proper value")}var u=aryval(v,"seq.0.seq.1.seq.1.seq.0.oid");var s=aryval(v,"seq.0.seq.1.seq.1.seq.1.octstr.hex");var r=aryval(v,"seq.1.octstr.hex");if(u==undefined||s==undefined||r==undefined){throw new Error("encalg, enciv or enc is undefined")}var A={salt:t,iter:x,prf:q,encalg:u,enciv:s,enc:r};return A},getDKFromPBES2Param:function(p,w){var x={hmacWithSHA1:CryptoJS.algo.SHA1,hmacWithSHA224:CryptoJS.algo.SHA224,hmacWithSHA256:CryptoJS.algo.SHA256,hmacWithSHA384:CryptoJS.algo.SHA384,hmacWithSHA512:CryptoJS.algo.SHA512};var q={"des-EDE3-CBC":192/32,"aes128-CBC":128/32,"aes256-CBC":256/32,};var y=x[p.prf];if(y==undefined){throw new Error("unsupported prf")}var r=q[p.encalg];if(r==undefined){throw new Error("unsupported encalg")}var s=CryptoJS.enc.Hex.parse(p.salt);var u=p.iter;try{var v=CryptoJS.PBKDF2(w,s,{keySize:r,iterations:u,hasher:y});return CryptoJS.enc.Hex.stringify(v)}catch(t){throw new Error("PBKDF2 error: "+t+" "+JSON.stringify(p)+" "+w)}},getPlainHexFromEncryptedPKCS8PEM:function(t,q){if(t.indexOf("BEGIN ENCRYPTED PRIVATE KEY")==-1){throw new Error("not Encrypted PKCS#8 PEM string")}var u=pemtohex(t);var p;try{p=KEYUTIL.parsePBES2(u)}catch(r){throw new Error("malformed PBES2 format: "+r.message)}var s=KEYUTIL.getDKFromPBES2Param(p,q);return KJUR.crypto.Cipher.decrypt(p.enc,s,p.encalg,{iv:p.enciv})},getKeyFromEncryptedPKCS8PEM:function(s,q){var p=this.getPlainHexFromEncryptedPKCS8PEM(s,q);var r=this.getKeyFromPlainPrivatePKCS8Hex(p);return r},parsePlainPrivatePKCS8Hex:function(s){var v=ASN1HEX;var u=v.getChildIdx;var t=v.getV;var q={};q.algparam=null;if(s.substr(0,2)!="30"){throw new Error("malformed plain PKCS8 private key(code:001)")}var r=u(s,0);if(r.length<3){throw new Error("malformed plain PKCS8 private key(code:002)")}if(s.substr(r[1],2)!="30"){throw new Error("malformed PKCS8 private key(code:003)")}var p=u(s,r[1]);if(p.length!=2){throw new Error("malformed PKCS8 private key(code:004)")}if(s.substr(p[0],2)!="06"){throw new Error("malformed PKCS8 private key(code:005)")}q.algoid=t(s,p[0]);if(s.substr(p[1],2)=="06"){q.algparam=t(s,p[1])}if(s.substr(r[2],2)!="04"){throw new Error("malformed PKCS8 private key(code:006)")}q.keyidx=v.getVidx(s,r[2]);return q},getKeyFromPlainPrivatePKCS8PEM:function(q){var p=pemtohex(q,"PRIVATE KEY");var r=this.getKeyFromPlainPrivatePKCS8Hex(p);return r},getKeyFromPlainPrivatePKCS8Hex:function(p){var q=this.parsePlainPrivatePKCS8Hex(p);var r;if(q.algoid=="2a864886f70d010101"){r=new RSAKey()}else{if(q.algoid=="2a8648ce380401"){r=new KJUR.crypto.DSA()}else{if(q.algoid=="2a8648ce3d0201"){r=new KJUR.crypto.ECDSA()}else{throw new Error("unsupported private key algorithm")}}}r.readPKCS8PrvKeyHex(p);return r},_getKeyFromPublicPKCS8Hex:function(q){var p;var r=ASN1HEX.getVbyList(q,0,[0,0],"06");if(r==="2a864886f70d010101"){p=new RSAKey()}else{if(r==="2a8648ce380401"){p=new KJUR.crypto.DSA()}else{if(r==="2a8648ce3d0201"){p=new KJUR.crypto.ECDSA()}else{throw new Error("unsupported PKCS#8 public key hex")}}}p.readPKCS8PubKeyHex(q);return p},parsePublicRawRSAKeyHex:function(r){var u=ASN1HEX;var t=u.getChildIdx;var s=u.getV;var p={};if(r.substr(0,2)!="30"){throw new Error("malformed RSA key(code:001)")}var q=t(r,0);if(q.length!=2){throw new Error("malformed RSA key(code:002)")}if(r.substr(q[0],2)!="02"){throw new Error("malformed RSA key(code:003)")}p.n=s(r,q[0]);if(r.substr(q[1],2)!="02"){throw new Error("malformed RSA key(code:004)")}p.e=s(r,q[1]);return p},parsePublicPKCS8Hex:function(t){var v=ASN1HEX;var u=v.getChildIdx;var s=v.getV;var q={};q.algparam=null;var r=u(t,0);if(r.length!=2){throw new Error("outer DERSequence shall have 2 elements: "+r.length)}var w=r[0];if(t.substr(w,2)!="30"){throw new Error("malformed PKCS8 public key(code:001)")}var p=u(t,w);if(p.length!=2){throw new Error("malformed PKCS8 public key(code:002)")}if(t.substr(p[0],2)!="06"){throw new Error("malformed PKCS8 public key(code:003)")}q.algoid=s(t,p[0]);if(t.substr(p[1],2)=="06"){q.algparam=s(t,p[1])}else{if(t.substr(p[1],2)=="30"){q.algparam={};q.algparam.p=v.getVbyList(t,p[1],[0],"02");q.algparam.q=v.getVbyList(t,p[1],[1],"02");q.algparam.g=v.getVbyList(t,p[1],[2],"02")}}if(t.substr(r[1],2)!="03"){throw new Error("malformed PKCS8 public key(code:004)")}q.key=s(t,r[1]).substr(2);return q},}}();KEYUTIL.getKey=function(l,k,n){var G=ASN1HEX,L=G.getChildIdx,v=G.getV,d=G.getVbyList,c=KJUR.crypto,i=c.ECDSA,C=c.DSA,w=RSAKey,M=pemtohex,F=KEYUTIL;if(typeof w!="undefined"&&l instanceof w){return l}if(typeof i!="undefined"&&l instanceof i){return l}if(typeof C!="undefined"&&l instanceof C){return l}if(l.curve!==undefined&&l.xy!==undefined&&l.d===undefined){return new i({pub:l.xy,curve:l.curve})}if(l.curve!==undefined&&l.d!==undefined){return new i({prv:l.d,curve:l.curve})}if(l.kty===undefined&&l.n!==undefined&&l.e!==undefined&&l.d===undefined){var P=new w();P.setPublic(l.n,l.e);return P}if(l.kty===undefined&&l.n!==undefined&&l.e!==undefined&&l.d!==undefined&&l.p!==undefined&&l.q!==undefined&&l.dp!==undefined&&l.dq!==undefined&&l.co!==undefined&&l.qi===undefined){var P=new w();P.setPrivateEx(l.n,l.e,l.d,l.p,l.q,l.dp,l.dq,l.co);return P}if(l.kty===undefined&&l.n!==undefined&&l.e!==undefined&&l.d!==undefined&&l.p===undefined){var P=new w();P.setPrivate(l.n,l.e,l.d);return P}if(l.p!==undefined&&l.q!==undefined&&l.g!==undefined&&l.y!==undefined&&l.x===undefined){var P=new C();P.setPublic(l.p,l.q,l.g,l.y);return P}if(l.p!==undefined&&l.q!==undefined&&l.g!==undefined&&l.y!==undefined&&l.x!==undefined){var P=new C();P.setPrivate(l.p,l.q,l.g,l.y,l.x);return P}if(l.kty==="RSA"&&l.n!==undefined&&l.e!==undefined&&l.d===undefined){var P=new w();P.setPublic(b64utohex(l.n),b64utohex(l.e));return P}if(l.kty==="RSA"&&l.n!==undefined&&l.e!==undefined&&l.d!==undefined&&l.p!==undefined&&l.q!==undefined&&l.dp!==undefined&&l.dq!==undefined&&l.qi!==undefined){var P=new w();P.setPrivateEx(b64utohex(l.n),b64utohex(l.e),b64utohex(l.d),b64utohex(l.p),b64utohex(l.q),b64utohex(l.dp),b64utohex(l.dq),b64utohex(l.qi));return P}if(l.kty==="RSA"&&l.n!==undefined&&l.e!==undefined&&l.d!==undefined){var P=new w();P.setPrivate(b64utohex(l.n),b64utohex(l.e),b64utohex(l.d));return P}if(l.kty==="EC"&&l.crv!==undefined&&l.x!==undefined&&l.y!==undefined&&l.d===undefined){var j=new i({curve:l.crv});var t=j.ecparams.keycharlen;var B=("0000000000"+b64utohex(l.x)).slice(-t);var z=("0000000000"+b64utohex(l.y)).slice(-t);var u="04"+B+z;j.setPublicKeyHex(u);return j}if(l.kty==="EC"&&l.crv!==undefined&&l.x!==undefined&&l.y!==undefined&&l.d!==undefined){var j=new i({curve:l.crv});var t=j.ecparams.keycharlen;var B=("0000000000"+b64utohex(l.x)).slice(-t);var z=("0000000000"+b64utohex(l.y)).slice(-t);var u="04"+B+z;var b=("0000000000"+b64utohex(l.d)).slice(-t);j.setPublicKeyHex(u);j.setPrivateKeyHex(b);return j}if(n==="pkcs5prv"){var J=l,G=ASN1HEX,N,P;N=L(J,0);if(N.length===9){P=new w();P.readPKCS5PrvKeyHex(J)}else{if(N.length===6){P=new C();P.readPKCS5PrvKeyHex(J)}else{if(N.length>2&&J.substr(N[1],2)==="04"){P=new i();P.readPKCS5PrvKeyHex(J)}else{throw new Error("unsupported PKCS#1/5 hexadecimal key")}}}return P}if(n==="pkcs8prv"){var P=F.getKeyFromPlainPrivatePKCS8Hex(l);return P}if(n==="pkcs8pub"){return F._getKeyFromPublicPKCS8Hex(l)}if(n==="x509pub"){return X509.getPublicKeyFromCertHex(l)}if(l.indexOf("-END CERTIFICATE-",0)!=-1||l.indexOf("-END X509 CERTIFICATE-",0)!=-1||l.indexOf("-END TRUSTED CERTIFICATE-",0)!=-1){return X509.getPublicKeyFromCertPEM(l)}if(l.indexOf("-END PUBLIC KEY-")!=-1){var O=pemtohex(l,"PUBLIC KEY");return F._getKeyFromPublicPKCS8Hex(O)}if(l.indexOf("-END RSA PRIVATE KEY-")!=-1&&l.indexOf("4,ENCRYPTED")==-1){var m=M(l,"RSA PRIVATE KEY");return F.getKey(m,null,"pkcs5prv")}if(l.indexOf("-END DSA PRIVATE KEY-")!=-1&&l.indexOf("4,ENCRYPTED")==-1){var I=M(l,"DSA PRIVATE KEY");var E=d(I,0,[1],"02");var D=d(I,0,[2],"02");var K=d(I,0,[3],"02");var r=d(I,0,[4],"02");var s=d(I,0,[5],"02");var P=new C();P.setPrivate(new BigInteger(E,16),new BigInteger(D,16),new BigInteger(K,16),new BigInteger(r,16),new BigInteger(s,16));return P}if(l.indexOf("-END EC PRIVATE KEY-")!=-1&&l.indexOf("4,ENCRYPTED")==-1){var m=M(l,"EC PRIVATE KEY");return F.getKey(m,null,"pkcs5prv")}if(l.indexOf("-END PRIVATE KEY-")!=-1){return F.getKeyFromPlainPrivatePKCS8PEM(l)}if(l.indexOf("-END RSA PRIVATE KEY-")!=-1&&l.indexOf("4,ENCRYPTED")!=-1){var o=F.getDecryptedKeyHex(l,k);var H=new RSAKey();H.readPKCS5PrvKeyHex(o);return H}if(l.indexOf("-END EC PRIVATE KEY-")!=-1&&l.indexOf("4,ENCRYPTED")!=-1){var I=F.getDecryptedKeyHex(l,k);var P=d(I,0,[1],"04");var f=d(I,0,[2,0],"06");var A=d(I,0,[3,0],"03").substr(2);var e="";if(KJUR.crypto.OID.oidhex2name[f]!==undefined){e=KJUR.crypto.OID.oidhex2name[f]}else{throw new Error("undefined OID(hex) in KJUR.crypto.OID: "+f)}var j=new i({curve:e});j.setPublicKeyHex(A);j.setPrivateKeyHex(P);j.isPublic=false;return j}if(l.indexOf("-END DSA PRIVATE KEY-")!=-1&&l.indexOf("4,ENCRYPTED")!=-1){var I=F.getDecryptedKeyHex(l,k);var E=d(I,0,[1],"02");var D=d(I,0,[2],"02");var K=d(I,0,[3],"02");var r=d(I,0,[4],"02");var s=d(I,0,[5],"02");var P=new C();P.setPrivate(new BigInteger(E,16),new BigInteger(D,16),new BigInteger(K,16),new BigInteger(r,16),new BigInteger(s,16));return P}if(l.indexOf("-END ENCRYPTED PRIVATE KEY-")!=-1){return F.getKeyFromEncryptedPKCS8PEM(l,k)}throw new Error("not supported argument")};KEYUTIL.generateKeypair=function(a,c){if(a=="RSA"){var b=c;var h=new RSAKey();h.generate(b,"10001");h.isPrivate=true;h.isPublic=true;var f=new RSAKey();var e=h.n.toString(16);var i=h.e.toString(16);f.setPublic(e,i);f.isPrivate=false;f.isPublic=true;var k={};k.prvKeyObj=h;k.pubKeyObj=f;return k}else{if(a=="EC"){var d=c;var g=new KJUR.crypto.ECDSA({curve:d});var j=g.generateKeyPairHex();var h=new KJUR.crypto.ECDSA({curve:d});h.setPublicKeyHex(j.ecpubhex);h.setPrivateKeyHex(j.ecprvhex);h.isPrivate=true;h.isPublic=false;var f=new KJUR.crypto.ECDSA({curve:d});f.setPublicKeyHex(j.ecpubhex);f.isPrivate=false;f.isPublic=true;var k={};k.prvKeyObj=h;k.pubKeyObj=f;return k}else{throw new Error("unknown algorithm: "+a)}}};KEYUTIL.getPEM=function(b,C,x,m,p,j){var E=KJUR,k=E.asn1,y=k.DERObjectIdentifier,e=k.DERInteger,l=k.ASN1Util.newObject,a=k.x509,B=a.SubjectPublicKeyInfo,d=E.crypto,t=d.DSA,q=d.ECDSA,n=RSAKey;function z(s){var G=l({seq:[{"int":0},{"int":{bigint:s.n}},{"int":s.e},{"int":{bigint:s.d}},{"int":{bigint:s.p}},{"int":{bigint:s.q}},{"int":{bigint:s.dmp1}},{"int":{bigint:s.dmq1}},{"int":{bigint:s.coeff}}]});return G}function A(G){var s=l({seq:[{"int":1},{octstr:{hex:G.prvKeyHex}},{tag:["a0",true,{oid:{name:G.curveName}}]},{tag:["a1",true,{bitstr:{hex:"00"+G.pubKeyHex}}]}]});return s}function w(s){var G=l({seq:[{"int":0},{"int":{bigint:s.p}},{"int":{bigint:s.q}},{"int":{bigint:s.g}},{"int":{bigint:s.y}},{"int":{bigint:s.x}}]});return G}if(((n!==undefined&&b instanceof n)||(t!==undefined&&b instanceof t)||(q!==undefined&&b instanceof q))&&b.isPublic==true&&(C===undefined||C=="PKCS8PUB")){var D=new B(b);var v=D.tohex();return hextopem(v,"PUBLIC KEY")}if(C=="PKCS1PRV"&&n!==undefined&&b instanceof n&&(x===undefined||x==null)&&b.isPrivate==true){var D=z(b);var v=D.tohex();return hextopem(v,"RSA PRIVATE KEY")}if(C=="PKCS1PRV"&&q!==undefined&&b instanceof q&&(x===undefined||x==null)&&b.isPrivate==true){var i=new y({name:b.curveName});var u=i.tohex();var h=A(b);var r=h.tohex();var o="";o+=hextopem(u,"EC PARAMETERS");o+=hextopem(r,"EC PRIVATE KEY");return o}if(C=="PKCS1PRV"&&t!==undefined&&b instanceof t&&(x===undefined||x==null)&&b.isPrivate==true){var D=w(b);var v=D.tohex();return hextopem(v,"DSA PRIVATE KEY")}if(C=="PKCS5PRV"&&n!==undefined&&b instanceof n&&(x!==undefined&&x!=null)&&b.isPrivate==true){var D=z(b);var v=D.tohex();if(m===undefined){m="DES-EDE3-CBC"}return this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA",v,x,m,j)}if(C=="PKCS5PRV"&&q!==undefined&&b instanceof q&&(x!==undefined&&x!=null)&&b.isPrivate==true){var D=A(b);var v=D.tohex();if(m===undefined){m="DES-EDE3-CBC"}return this.getEncryptedPKCS5PEMFromPrvKeyHex("EC",v,x,m,j)}if(C=="PKCS5PRV"&&t!==undefined&&b instanceof t&&(x!==undefined&&x!=null)&&b.isPrivate==true){var D=w(b);var v=D.tohex();if(m===undefined){m="DES-EDE3-CBC"}return this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA",v,x,m,j)}var f=function(G,H){if(typeof H=="string"){return KEYUTIL.getEncryptedPKCS8PEM(G,H)}else{if(typeof H=="object"&&aryval(H,"passcode")!=undefined){var I=JSON.parse(JSON.stringify(H));var s=I.passcode;delete I.passcode;return KEYUTIL.getEncryptedPKCS8PEM(G,s,I)}}};if(C=="PKCS8PRV"&&n!=undefined&&b instanceof n&&b.isPrivate==true){var g=z(b);var c=g.tohex();var D=l({seq:[{"int":0},{seq:[{oid:{name:"rsaEncryption"}},{"null":true}]},{octstr:{hex:c}}]});var v=D.tohex();if(x===undefined||x==null){return hextopem(v,"PRIVATE KEY")}else{return f(v,x)}}if(C=="PKCS8PRV"&&q!==undefined&&b instanceof q&&b.isPrivate==true){var F={seq:[{"int":1},{octstr:{hex:b.prvKeyHex}}]};if(typeof b.pubKeyHex=="string"){F.seq.push({tag:["a1",true,{bitstr:{hex:"00"+b.pubKeyHex}}]})}var g=new l(F);var c=g.tohex();var D=l({seq:[{"int":0},{seq:[{oid:{name:"ecPublicKey"}},{oid:{name:b.curveName}}]},{octstr:{hex:c}}]});var v=D.tohex();if(x===undefined||x==null){return hextopem(v,"PRIVATE KEY")}else{return f(v,x)}}if(C=="PKCS8PRV"&&t!==undefined&&b instanceof t&&b.isPrivate==true){var g=new e({bigint:b.x});var c=g.tohex();var D=l({seq:[{"int":0},{seq:[{oid:{name:"dsa"}},{seq:[{"int":{bigint:b.p}},{"int":{bigint:b.q}},{"int":{bigint:b.g}}]}]},{octstr:{hex:c}}]});var v=D.tohex();if(x===undefined||x==null){return hextopem(v,"PRIVATE KEY")}else{return f(v,x)}}throw new Error("unsupported object nor format")};KEYUTIL.getKeyFromCSRPEM=function(b){var a=pemtohex(b,"CERTIFICATE REQUEST");var c=KEYUTIL.getKeyFromCSRHex(a);return c};KEYUTIL.getKeyFromCSRHex=function(a){var c=KEYUTIL.parseCSRHex(a);var b=KEYUTIL.getKey(c.p8pubkeyhex,null,"pkcs8pub");return b};KEYUTIL.parseCSRHex=function(d){var i=ASN1HEX;var f=i.getChildIdx;var c=i.getTLV;var b={};var g=d;if(g.substr(0,2)!="30"){throw new Error("malformed CSR(code:001)")}var e=f(g,0);if(e.length<1){throw new Error("malformed CSR(code:002)")}if(g.substr(e[0],2)!="30"){throw new Error("malformed CSR(code:003)")}var a=f(g,e[0]);if(a.length<3){throw new Error("malformed CSR(code:004)")}b.p8pubkeyhex=c(g,a[2]);return b};KEYUTIL.getKeyID=function(f){var c=KEYUTIL;var e=ASN1HEX;if(typeof f==="string"&&f.indexOf("BEGIN ")!=-1){f=c.getKey(f)}var d=pemtohex(c.getPEM(f));var b=e.getIdxbyList(d,0,[1]);var a=e.getV(d,b).substring(2);return KJUR.crypto.Util.hashHex(a,"sha1")};KEYUTIL.getJWK=function(d,h,g,b,f){var i;var k={};var e;var c=KJUR.crypto.Util.hashHex;if(typeof d=="string"){i=KEYUTIL.getKey(d);if(d.indexOf("CERTIFICATE")!=-1){e=pemtohex(d)}}else{if(typeof d=="object"){if(d instanceof X509){i=d.getPublicKey();e=d.hex}else{i=d}}else{throw new Error("unsupported keyinfo type")}}if(i instanceof RSAKey&&i.isPrivate){k.kty="RSA";k.n=hextob64u(i.n.toString(16));k.e=hextob64u(i.e.toString(16));k.d=hextob64u(i.d.toString(16));k.p=hextob64u(i.p.toString(16));k.q=hextob64u(i.q.toString(16));k.dp=hextob64u(i.dmp1.toString(16));k.dq=hextob64u(i.dmq1.toString(16));k.qi=hextob64u(i.coeff.toString(16))}else{if(i instanceof RSAKey&&i.isPublic){k.kty="RSA";k.n=hextob64u(i.n.toString(16));k.e=hextob64u(i.e.toString(16))}else{if(i instanceof KJUR.crypto.ECDSA&&i.isPrivate){var a=i.getShortNISTPCurveName();if(a!=="P-256"&&a!=="P-384"&&a!=="P-521"){throw new Error("unsupported curve name for JWT: "+a)}var j=i.getPublicKeyXYHex();k.kty="EC";k.crv=a;k.x=hextob64u(j.x);k.y=hextob64u(j.y);k.d=hextob64u(i.prvKeyHex)}else{if(i instanceof KJUR.crypto.ECDSA&&i.isPublic){var a=i.getShortNISTPCurveName();if(a!=="P-256"&&a!=="P-384"&&a!=="P-521"){throw new Error("unsupported curve name for JWT: "+a)}var j=i.getPublicKeyXYHex();k.kty="EC";k.crv=a;k.x=hextob64u(j.x);k.y=hextob64u(j.y)}}}}if(k.kty==undefined){throw new Error("unsupported keyinfo")}if((!i.isPrivate)&&h!=true){k.kid=KJUR.jws.JWS.getJWKthumbprint(k)}if(e!=undefined&&g!=true){k.x5c=[hex2b64(e)]}if(e!=undefined&&b!=true){k.x5t=b64tob64u(hex2b64(c(e,"sha1")))}if(e!=undefined&&f!=true){k["x5t#S256"]=b64tob64u(hex2b64(c(e,"sha256")))}return k};KEYUTIL.getJWKFromKey=function(a){return KEYUTIL.getJWK(a,true,true,true,true)};
RSAKey.getPosArrayOfChildrenFromHex=function(a){return ASN1HEX.getChildIdx(a,0)};RSAKey.getHexValueArrayOfChildrenFromHex=function(f){var n=ASN1HEX;var i=n.getV;var k=RSAKey.getPosArrayOfChildrenFromHex(f);var e=i(f,k[0]);var j=i(f,k[1]);var b=i(f,k[2]);var c=i(f,k[3]);var h=i(f,k[4]);var g=i(f,k[5]);var m=i(f,k[6]);var l=i(f,k[7]);var d=i(f,k[8]);var k=new Array();k.push(e,j,b,c,h,g,m,l,d);return k};RSAKey.prototype.readPrivateKeyFromPEMString=function(d){var c=pemtohex(d);var b=RSAKey.getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8])};RSAKey.prototype.readPKCS5PrvKeyHex=function(c){var b=RSAKey.getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8])};RSAKey.prototype.readPKCS8PrvKeyHex=function(e){var c,i,k,b,a,f,d,j;var m=ASN1HEX;var l=m.getVbyListEx;if(m.isASN1HEX(e)===false){throw new Error("not ASN.1 hex string")}try{c=l(e,0,[2,0,1],"02");i=l(e,0,[2,0,2],"02");k=l(e,0,[2,0,3],"02");b=l(e,0,[2,0,4],"02");a=l(e,0,[2,0,5],"02");f=l(e,0,[2,0,6],"02");d=l(e,0,[2,0,7],"02");j=l(e,0,[2,0,8],"02")}catch(g){throw new Error("malformed PKCS#8 plain RSA private key")}this.setPrivateEx(c,i,k,b,a,f,d,j)};RSAKey.prototype.readPKCS5PubKeyHex=function(c){var e=ASN1HEX;var b=e.getV;if(e.isASN1HEX(c)===false){throw new Error("keyHex is not ASN.1 hex string")}var a=e.getChildIdx(c,0);if(a.length!==2||c.substr(a[0],2)!=="02"||c.substr(a[1],2)!=="02"){throw new Error("wrong hex for PKCS#5 public key")}var f=b(c,a[0]);var d=b(c,a[1]);this.setPublic(f,d)};RSAKey.prototype.readPKCS8PubKeyHex=function(b){var c=ASN1HEX;if(c.isASN1HEX(b)===false){throw new Error("not ASN.1 hex string")}if(c.getTLVbyListEx(b,0,[0,0])!=="06092a864886f70d010101"){throw new Error("not PKCS8 RSA public key")}var a=c.getTLVbyListEx(b,0,[1,0]);this.readPKCS5PubKeyHex(a)};RSAKey.prototype.readCertPubKeyHex=function(b,d){var a,c;a=new X509();a.readCertHex(b);c=a.getPublicKeyHex();this.readPKCS8PubKeyHex(c)};
var _RE_HEXDECONLY=(/* unused pure expression or super */ null && (new RegExp("[^0-9a-f]","gi")));function _rsasign_getHexPaddedDigestInfoForString(d,e,a){var b=function(f){return KJUR.crypto.Util.hashString(f,a)};var c=b(d);return KJUR.crypto.Util.getPaddedDigestInfoHex(c,a,e)}function _zeroPaddingOfSignature(e,d){var c="";var a=d/4-e.length;for(var b=0;b<a;b++){c=c+"0"}return c+e}RSAKey.prototype.sign=function(d,a){var b=function(e){return KJUR.crypto.Util.hashString(e,a)};var c=b(d);return this.signWithMessageHash(c,a)};RSAKey.prototype.signWithMessageHash=function(e,c){var f=KJUR.crypto.Util.getPaddedDigestInfoHex(e,c,this.n.bitLength());var b=parseBigInt(f,16);var d=this.doPrivate(b);var a=d.toString(16);return _zeroPaddingOfSignature(a,this.n.bitLength())};function pss_mgf1_str(c,a,e){var b="",d=0;while(b.length<a){b+=hextorstr(e(rstrtohex(c+String.fromCharCode.apply(String,[(d&4278190080)>>24,(d&16711680)>>16,(d&65280)>>8,d&255]))));d+=1}return b}RSAKey.prototype.signPSS=function(e,a,d){var c=function(f){return KJUR.crypto.Util.hashHex(f,a)};var b=c(rstrtohex(e));if(d===undefined){d=-1}return this.signWithMessageHashPSS(b,a,d)};RSAKey.prototype.signWithMessageHashPSS=function(l,a,k){var b=hextorstr(l);var g=b.length;var m=this.n.bitLength()-1;var c=Math.ceil(m/8);var d;var o=function(i){return KJUR.crypto.Util.hashHex(i,a)};if(k===-1||k===undefined){k=g}else{if(k===-2){k=c-g-2}else{if(k<-2){throw new Error("invalid salt length")}}}if(c<(g+k+2)){throw new Error("data too long")}var f="";if(k>0){f=new Array(k);new SecureRandom().nextBytes(f);f=String.fromCharCode.apply(String,f)}var n=hextorstr(o(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00"+b+f)));var j=[];for(d=0;d<c-k-g-2;d+=1){j[d]=0}var e=String.fromCharCode.apply(String,j)+"\x01"+f;var h=pss_mgf1_str(n,e.length,o);var q=[];for(d=0;d<e.length;d+=1){q[d]=e.charCodeAt(d)^h.charCodeAt(d)}var p=(65280>>(8*c-m))&255;q[0]&=~p;for(d=0;d<g;d++){q.push(n.charCodeAt(d))}q.push(188);return _zeroPaddingOfSignature(this.doPrivate(new BigInteger(q)).toString(16),this.n.bitLength())};function _rsasign_getDecryptSignatureBI(a,d,c){var b=new RSAKey();b.setPublic(d,c);var e=b.doPublic(a);return e}function _rsasign_getHexDigestInfoFromSig(a,c,b){var e=_rsasign_getDecryptSignatureBI(a,c,b);var d=e.toString(16).replace(/^1f+00/,"");return d}function _rsasign_getAlgNameAndHashFromHexDisgestInfo(f){for(var e in KJUR.crypto.Util.DIGESTINFOHEAD){var d=KJUR.crypto.Util.DIGESTINFOHEAD[e];var b=d.length;if(f.substring(0,b)==d){var c=[e,f.substring(b)];return c}}return[]}RSAKey.prototype.verify=function(f,l){l=l.toLowerCase();if(l.match(/^[0-9a-f]+$/)==null){return false}var b=parseBigInt(l,16);var k=this.n.bitLength();if(b.bitLength()>k){return false}var j=this.doPublic(b);var i=j.toString(16);if(i.length+3!=k/4){return false}var e=i.replace(/^1f+00/,"");var g=_rsasign_getAlgNameAndHashFromHexDisgestInfo(e);if(g.length==0){return false}var d=g[0];var h=g[1];var a=function(m){return KJUR.crypto.Util.hashString(m,d)};var c=a(f);return(h==c)};RSAKey.prototype.verifyWithMessageHash=function(e,a){if(a.length!=Math.ceil(this.n.bitLength()/4)){return false}var b=parseBigInt(a,16);if(b.bitLength()>this.n.bitLength()){return 0}var h=this.doPublic(b);var g=h.toString(16).replace(/^1f+00/,"");var c=_rsasign_getAlgNameAndHashFromHexDisgestInfo(g);if(c.length==0){return false}var d=c[0];var f=c[1];return(f==e)};RSAKey.prototype.verifyPSS=function(c,b,a,f){var e=function(g){return KJUR.crypto.Util.hashHex(g,a)};var d=e(rstrtohex(c));if(f===undefined){f=-1}return this.verifyWithMessageHashPSS(d,b,a,f)};RSAKey.prototype.verifyWithMessageHashPSS=function(f,s,l,c){if(s.length!=Math.ceil(this.n.bitLength()/4)){return false}var k=new BigInteger(s,16);var r=function(i){return KJUR.crypto.Util.hashHex(i,l)};var j=hextorstr(f);var h=j.length;var g=this.n.bitLength()-1;var m=Math.ceil(g/8);var q;if(c===-1||c===undefined){c=h}else{if(c===-2){c=m-h-2}else{if(c<-2){throw new Error("invalid salt length")}}}if(m<(h+c+2)){throw new Error("data too long")}var a=this.doPublic(k).toByteArray();for(q=0;q<a.length;q+=1){a[q]&=255}while(a.length<m){a.unshift(0)}if(a[m-1]!==188){throw new Error("encoded message does not end in 0xbc")}a=String.fromCharCode.apply(String,a);var d=a.substr(0,m-h-1);var e=a.substr(d.length,h);var p=(65280>>(8*m-g))&255;if((d.charCodeAt(0)&p)!==0){throw new Error("bits beyond keysize not zero")}var n=pss_mgf1_str(e,d.length,r);var o=[];for(q=0;q<d.length;q+=1){o[q]=d.charCodeAt(q)^n.charCodeAt(q)}o[0]&=~p;var b=m-h-c-2;for(q=0;q<b;q+=1){if(o[q]!==0){throw new Error("leftmost octets not zero")}}if(o[b]!==1){throw new Error("0x01 marker not found")}return e===hextorstr(r(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00"+j+String.fromCharCode.apply(String,o.slice(-c)))))};RSAKey.SALT_LEN_HLEN=-1;RSAKey.SALT_LEN_MAX=-2;RSAKey.SALT_LEN_RECOVER=-2;
function X509(v){var o=ASN1HEX,s=o.getChildIdx,k=o.getV,y=o.dump,j=o.parse,b=o.getTLV,c=o.getVbyList,p=o.getVbyListEx,a=o.getTLVbyList,q=o.getTLVbyListEx,l=o.getIdxbyList,f=o.getIdxbyListEx,n=o.getVidx,x=o.getInt,u=o.oidname,r=o.hextooidstr,d=X509,w=pemtohex,g,m=Error;try{g=KJUR.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV}catch(t){}this.HEX2STAG={"0c":"utf8","13":"prn","16":"ia5","1a":"vis","1e":"bmp"};this.hex=null;this.version=0;this.foffset=0;this.aExtInfo=null;this.getVersion=function(){if(this.hex===null||this.version!==0){return this.version}var A=a(this.hex,0,[0,0]);if(A.substr(0,2)=="a0"){var B=a(A,0,[0]);var z=x(B,0);if(z<0||2<z){throw new Error("malformed version field")}this.version=z+1;return this.version}else{this.version=1;this.foffset=-1;return 1}};this.getSerialNumberHex=function(){return p(this.hex,0,[0,0],"02")};this.getSignatureAlgorithmField=function(){var z=q(this.hex,0,[0,1]);return this.getAlgorithmIdentifierName(z)};this.getAlgorithmIdentifierName=function(z){for(var A in g){if(z===g[A]){return A}}return u(p(z,0,[0],"06"))};this.getIssuer=function(A,z){return this.getX500Name(this.getIssuerHex(),A,z)};this.getIssuerHex=function(){return a(this.hex,0,[0,3+this.foffset],"30")};this.getIssuerString=function(){var z=this.getIssuer();return z.str};this.getSubject=function(A,z){return this.getX500Name(this.getSubjectHex(),A,z)};this.getSubjectHex=function(){return a(this.hex,0,[0,5+this.foffset],"30")};this.getSubjectString=function(){var z=this.getSubject();return z.str};this.getNotBefore=function(){var z=c(this.hex,0,[0,4+this.foffset,0]);z=z.replace(/(..)/g,"%$1");z=decodeURIComponent(z);return z};this.getNotAfter=function(){var z=c(this.hex,0,[0,4+this.foffset,1]);z=z.replace(/(..)/g,"%$1");z=decodeURIComponent(z);return z};this.getPublicKeyHex=function(){return this.getSPKI()};this.getSPKI=function(){return a(this.hex,0,[0,6+this.foffset],"30")};this.getSPKIValue=function(){var z=this.getSPKI();if(z==null){return null}return c(z,0,[1],"03",true)};this.getPublicKeyIdx=function(){return l(this.hex,0,[0,6+this.foffset],"30")};this.getPublicKeyContentIdx=function(){var z=this.getPublicKeyIdx();return l(this.hex,z,[1,0],"30")};this.getPublicKey=function(){return KEYUTIL.getKey(this.getPublicKeyHex(),null,"pkcs8pub")};this.getSignatureAlgorithmName=function(){var z=a(this.hex,0,[1],"30");return this.getAlgorithmIdentifierName(z)};this.getSignatureValueHex=function(){return c(this.hex,0,[2],"03",true)};this.verifySignature=function(B){var C=this.getSignatureAlgorithmField();var z=this.getSignatureValueHex();var A=a(this.hex,0,[0],"30");var D=new KJUR.crypto.Signature({alg:C});D.init(B);D.updateHex(A);return D.verify(z)};this.parseExt=function(I){var B,z,D;if(I===undefined){D=this.hex;if(this.version!==3){return -1}B=l(D,0,[0,7,0],"30");z=s(D,B)}else{D=pemtohex(I);var E=l(D,0,[0,3,0,0],"06");if(k(D,E)!="2a864886f70d01090e"){this.aExtInfo=new Array();return}B=l(D,0,[0,3,0,1,0],"30");z=s(D,B);this.hex=D}this.aExtInfo=new Array();for(var C=0;C<z.length;C++){var G={};G.critical=false;var F=s(D,z[C]);var A=0;if(F.length===3){G.critical=true;A=1}G.oid=o.hextooidstr(c(D,z[C],[0],"06"));var H=l(D,z[C],[1+A]);G.vidx=n(D,H);this.aExtInfo.push(G)}};this.getExtInfo=function(B){var z=this.aExtInfo;var C=B;if(!B.match(/^[0-9.]+$/)){C=KJUR.asn1.x509.OID.name2oid(B)}if(C===""){return undefined}for(var A=0;A<z.length;A++){if(z[A].oid===C){return z[A]}}return undefined};this.getCriticalExtV=function(C,z,B){if(z!=undefined){return[z,B]}var A=this.getExtInfo(C);if(A==undefined){return[null,null]}return[b(this.hex,A.vidx),A.critical]};this.getExtBasicConstraints=function(A,E){if(A===undefined&&E===undefined){var C=this.getExtInfo("basicConstraints");if(C===undefined){return undefined}A=b(this.hex,C.vidx);E=C.critical}var z={extname:"basicConstraints"};if(E){z.critical=true}if(A==="3000"){return z}if(A==="30030101ff"){z.cA=true;return z}if(A.substr(0,12)==="30060101ff02"){var D=k(A,10);var B=parseInt(D,16);z.cA=true;z.pathLen=B;return z}throw new Error("hExtV parse error: "+A)};this.getExtNameConstraints=function(I,G){var A=this.getCriticalExtV("nameConstraints",I,G);I=A[0];G=A[1];if(I==null){return undefined}var K={extname:"nameConstraints"};if(G){K.critical=true}var F=s(I,0);for(var D=0;D<F.length;D++){var E=[];var B=s(I,F[D]);for(var C=0;C<B.length;C++){var H=b(I,B[C]);var z=this.getGeneralSubtree(H);E.push(z)}var J=I.substr(F[D],2);if(J=="a0"){K.permit=E}else{if(J=="a1"){K.exclude=E}}}return K};this.getGeneralSubtree=function(F){var D=s(F,0);var C=D.length;if(C<1||2<C){throw new Error("wrong num elements")}var B=this.getGeneralName(b(F,D[0]));for(var E=1;E<C;E++){var A=F.substr(D[E],2);var z=k(F,D[E]);var G=parseInt(z,16);if(A=="80"){B.min=G}if(A=="81"){B.max=G}}return B};this.getExtKeyUsage=function(A,C){var B=this.getCriticalExtV("keyUsage",A,C);A=B[0];C=B[1];if(A==null){return undefined}var z={extname:"keyUsage"};if(C){z.critical=true}z.names=this.getExtKeyUsageString(A).split(",");return z};this.getExtKeyUsageBin=function(A){if(A===undefined){var B=this.getExtInfo("keyUsage");if(B===undefined){return""}A=b(this.hex,B.vidx)}if(A.length!=8&&A.length!=10){throw new Error("malformed key usage value: "+A)}var z="000000000000000"+parseInt(A.substr(6),16).toString(2);if(A.length==8){z=z.slice(-8)}if(A.length==10){z=z.slice(-16)}z=z.replace(/0+$/,"");if(z==""){z="0"}return z};this.getExtKeyUsageString=function(B){var C=this.getExtKeyUsageBin(B);var z=new Array();for(var A=0;A<C.length;A++){if(C.substr(A,1)=="1"){z.push(X509.KEYUSAGE_NAME[A])}}return z.join(",")};this.getExtSubjectKeyIdentifier=function(B,D){if(B===undefined&&D===undefined){var C=this.getExtInfo("subjectKeyIdentifier");if(C===undefined){return undefined}B=b(this.hex,C.vidx);D=C.critical}var z={extname:"subjectKeyIdentifier"};if(D){z.critical=true}var A=k(B,0);z.kid={hex:A};return z};this.getExtAuthorityKeyIdentifier=function(F,D){if(F===undefined&&D===undefined){var z=this.getExtInfo("authorityKeyIdentifier");if(z===undefined){return undefined}F=b(this.hex,z.vidx);D=z.critical}var G={extname:"authorityKeyIdentifier"};if(D){G.critical=true}var E=s(F,0);for(var A=0;A<E.length;A++){var H=F.substr(E[A],2);if(H==="80"){G.kid={hex:k(F,E[A])}}if(H==="a1"){var C=b(F,E[A]);var B=this.getGeneralNames(C);G.issuer=B[0]["dn"]}if(H==="82"){G.sn={hex:k(F,E[A])}}}return G};this.getExtExtKeyUsage=function(C,E){if(C===undefined&&E===undefined){var D=this.getExtInfo("extKeyUsage");if(D===undefined){return undefined}C=b(this.hex,D.vidx);E=D.critical}var z={extname:"extKeyUsage",array:[]};if(E){z.critical=true}var A=s(C,0);for(var B=0;B<A.length;B++){z.array.push(u(k(C,A[B])))}return z};this.getExtExtKeyUsageName=function(){var D=this.getExtInfo("extKeyUsage");if(D===undefined){return D}var z=new Array();var C=b(this.hex,D.vidx);if(C===""){return z}var A=s(C,0);for(var B=0;B<A.length;B++){z.push(u(k(C,A[B])))}return z};this.getExtSubjectAltName=function(A,C){if(A===undefined&&C===undefined){var B=this.getExtInfo("subjectAltName");if(B===undefined){return undefined}A=b(this.hex,B.vidx);C=B.critical}var z={extname:"subjectAltName",array:[]};if(C){z.critical=true}z.array=this.getGeneralNames(A);return z};this.getExtIssuerAltName=function(A,C){if(A===undefined&&C===undefined){var B=this.getExtInfo("issuerAltName");if(B===undefined){return undefined}A=b(this.hex,B.vidx);C=B.critical}var z={extname:"issuerAltName",array:[]};if(C){z.critical=true}z.array=this.getGeneralNames(A);return z};this.getGeneralNames=function(D){var B=s(D,0);var z=[];for(var C=0;C<B.length;C++){var A=this.getGeneralName(b(D,B[C]));if(A!==undefined){z.push(A)}}return z};this.getGeneralName=function(A){var z=A.substr(0,2);var C=k(A,0);var B=hextorstr(C);if(z=="81"){return{rfc822:B}}if(z=="82"){return{dns:B}}if(z=="86"){return{uri:B}}if(z=="87"){return{ip:hextoip(C)}}if(z=="a4"){return{dn:this.getX500Name(C)}}if(z=="a0"){return{other:this.getOtherName(A)}}return undefined};this.getExtSubjectAltName2=function(){var D,G,F;var E=this.getExtInfo("subjectAltName");if(E===undefined){return E}var z=new Array();var C=b(this.hex,E.vidx);var A=s(C,0);for(var B=0;B<A.length;B++){F=C.substr(A[B],2);D=k(C,A[B]);if(F==="81"){G=hextoutf8(D);z.push(["MAIL",G])}if(F==="82"){G=hextoutf8(D);z.push(["DNS",G])}if(F==="84"){G=X509.hex2dn(D,0);z.push(["DN",G])}if(F==="86"){G=hextoutf8(D);z.push(["URI",G])}if(F==="87"){G=hextoip(D);z.push(["IP",G])}}return z};this.getExtCRLDistributionPoints=function(D,F){if(D===undefined&&F===undefined){var E=this.getExtInfo("cRLDistributionPoints");if(E===undefined){return undefined}D=b(this.hex,E.vidx);F=E.critical}var A={extname:"cRLDistributionPoints",array:[]};if(F){A.critical=true}var B=s(D,0);for(var C=0;C<B.length;C++){var z=b(D,B[C]);A.array.push(this.getDistributionPoint(z))}return A};this.getDistributionPoint=function(E){var B={};var C=s(E,0);for(var D=0;D<C.length;D++){var A=E.substr(C[D],2);var z=b(E,C[D]);if(A=="a0"){B.dpname=this.getDistributionPointName(z)}}return B};this.getDistributionPointName=function(E){var B={};var C=s(E,0);for(var D=0;D<C.length;D++){var A=E.substr(C[D],2);var z=b(E,C[D]);if(A=="a0"){B.full=this.getGeneralNames(z)}}return B};this.getExtCRLDistributionPointsURI=function(){var D=this.getExtCRLDistributionPoints();if(D==undefined){return D}var A=D.array;var z=[];for(var C=0;C<A.length;C++){try{if(A[C].dpname.full[0].uri!=undefined){z.push(A[C].dpname.full[0].uri)}}catch(B){}}return z};this.getExtAIAInfo=function(){var D=this.getExtInfo("authorityInfoAccess");if(D===undefined){return D}var z={ocsp:[],caissuer:[]};var A=s(this.hex,D.vidx);for(var B=0;B<A.length;B++){var E=c(this.hex,A[B],[0],"06");var C=c(this.hex,A[B],[1],"86");if(E==="2b06010505073001"){z.ocsp.push(hextoutf8(C))}if(E==="2b06010505073002"){z.caissuer.push(hextoutf8(C))}}return z};this.getExtAuthorityInfoAccess=function(G,E){if(G===undefined&&E===undefined){var z=this.getExtInfo("authorityInfoAccess");if(z===undefined){return undefined}G=b(this.hex,z.vidx);E=z.critical}var H={extname:"authorityInfoAccess",array:[]};if(E){H.critical=true}var F=s(G,0);for(var A=0;A<F.length;A++){var D=p(G,F[A],[0],"06");var B=c(G,F[A],[1],"86");var C=hextoutf8(B);if(D=="2b06010505073001"){H.array.push({ocsp:C})}else{if(D=="2b06010505073002"){H.array.push({caissuer:C})}else{throw new Error("unknown method: "+D)}}}return H};this.getExtCertificatePolicies=function(D,G){if(D===undefined&&G===undefined){var F=this.getExtInfo("certificatePolicies");if(F===undefined){return undefined}D=b(this.hex,F.vidx);G=F.critical}var z={extname:"certificatePolicies",array:[]};if(G){z.critical=true}var A=s(D,0);for(var B=0;B<A.length;B++){var E=b(D,A[B]);var C=this.getPolicyInformation(E);z.array.push(C)}return z};this.getPolicyInformation=function(D){var z={};var F=c(D,0,[0],"06");z.policyoid=u(F);var G=f(D,0,[1],"30");if(G!=-1){z.array=[];var A=s(D,G);for(var B=0;B<A.length;B++){var E=b(D,A[B]);var C=this.getPolicyQualifierInfo(E);z.array.push(C)}}return z};this.getOtherName=function(B){var z={};var A=s(B,0);var D=c(B,A[0],[],"06");var C=c(B,A[1],[]);z.oid=u(D);z.value=j(C);return z};this.getPolicyQualifierInfo=function(A){var z={};var B=c(A,0,[0],"06");if(B==="2b06010505070201"){var D=p(A,0,[1],"16");z.cps=hextorstr(D)}else{if(B==="2b06010505070202"){var C=a(A,0,[1],"30");z.unotice=this.getUserNotice(C)}}return z};this.getUserNotice=function(B){var D=null;var z={};try{D=o.parse(B);var C=this._asn1ToUnotice(D);return C}catch(A){return undefined}};this._asn1ToUnotice=function(E){try{var z={};var A=aryval(E,"seq");for(var C=0;C<A.length;C++){var D=this._asn1ToNoticeRef(A[C]);if(D!=undefined){z.noticeref=D}var F=this.asn1ToDisplayText(A[C]);if(F!=undefined){z.exptext=F}}if(Object.keys(z).length>0){return z}return undefined}catch(B){return undefined}};this._asn1ToNoticeRef=function(F){try{var A={};var B=aryval(F,"seq");for(var D=0;D<B.length;D++){var E=this._asn1ToNoticeNum(B[D]);if(E!=undefined){A.noticenum=E}var z=this.asn1ToDisplayText(B[D]);if(z!=undefined){A.org=z}}if(Object.keys(A).length>0){return A}return undefined}catch(C){return undefined}};this._asn1ToNoticeNum=function(E){try{var A=aryval(E,"seq");var z=[];for(var C=0;C<A.length;C++){var D=A[C];z.push(parseInt(aryval(D,"int.hex"),16))}return z}catch(B){return undefined}};this.getDisplayText=function(A){var B={"0c":"utf8","16":"ia5","1a":"vis","1e":"bmp"};var z={};z.type=B[A.substr(0,2)];z.str=hextorstr(k(A,0));return z};this.asn1ToDisplayText=function(z){if(z.utf8str!=undefined){return{type:"utf8",str:z.utf8str.str}}if(z.ia5str!=undefined){return{type:"ia5",str:z.ia5str.str}}if(z.visstr!=undefined){return{type:"vis",str:z.visstr.str}}if(z.bmpstr!=undefined){return{type:"bmp",str:z.bmpstr.str}}if(z.prnstr!=undefined){return{type:"prn",str:z.prnstr.str}}return undefined};this.getExtPolicyMappings=function(G,E){var z=this.getCriticalExtV("policyMappings",G,E);G=z[0];E=z[1];if(G==null){return undefined}var I={extname:"policyMappings"};if(E){I.critical=true}try{var A=j(G);var B=A.seq;var F=[];for(var C=0;C<B.length;C++){var H=B[C].seq;F.push([H[0].oid,H[1].oid])}I.array=F}catch(D){throw new m("malformed policyMappings")}return I};this.getExtPolicyConstraints=function(G,D){var z=this.getCriticalExtV("policyConstraints",G,D);G=z[0];D=z[1];if(G==null){return undefined}var H={extname:"policyConstraints"};if(D){H.critical=true}var A=j(G);try{var F=A.seq;for(var B=0;B<F.length;B++){var E=F[B].tag;if(E.explicit!=false){continue}if(E.tag=="80"){H.reqexp=parseInt(E.hex,16)}if(E.tag=="81"){H.inhibit=parseInt(E.hex,16)}}}catch(C){return new m("malformed policyConstraints value")}return H};this.getExtInhibitAnyPolicy=function(A,D){var C=this.getCriticalExtV("inhibitAnyPolicy",A,D);A=C[0];D=C[1];if(A==null){return undefined}var z={extname:"inhibitAnyPolicy"};if(D){z.critical=true}var B=x(A,0);if(B==-1){return new m("wrong value")}z.skip=B;return z};this.getExtCRLNumber=function(A,B){var z={extname:"cRLNumber"};if(B){z.critical=true}if(A.substr(0,2)=="02"){z.num={hex:k(A,0)};return z}throw new m("hExtV parse error: "+A)};this.getExtCRLReason=function(A,B){var z={extname:"cRLReason"};if(B){z.critical=true}if(A.substr(0,2)=="0a"){z.code=parseInt(k(A,0),16);return z}throw new Error("hExtV parse error: "+A)};this.getExtOcspNonce=function(A,C){var z={extname:"ocspNonce"};if(C){z.critical=true}var B=k(A,0);z.hex=B;return z};this.getExtOcspNoCheck=function(A,B){var z={extname:"ocspNoCheck"};if(B){z.critical=true}return z};this.getExtAdobeTimeStamp=function(C,F){if(C===undefined&&F===undefined){var E=this.getExtInfo("adobeTimeStamp");if(E===undefined){return undefined}C=b(this.hex,E.vidx);F=E.critical}var z={extname:"adobeTimeStamp"};if(F){z.critical=true}var B=s(C,0);if(B.length>1){var G=b(C,B[1]);var A=this.getGeneralName(G);if(A.uri!=undefined){z.uri=A.uri}}if(B.length>2){var D=b(C,B[2]);if(D=="0101ff"){z.reqauth=true}if(D=="010100"){z.reqauth=false}}return z};this.getExtSubjectDirectoryAttributes=function(I,H){if(I===undefined&&H===undefined){var B=this.getExtInfo("subjectDirectoryAttributes");if(B===undefined){return undefined}I=b(this.hex,B.vidx);H=B.critical}var J={extname:"subjectDirectoryAttributes"};if(H){J.critical=true}try{var z=j(I);var D=[];for(var E=0;E<z.seq.length;E++){var A=z.seq[E];var C=aryval(A,"seq.0.oid");var F=aryval(A,"seq.1.set");if(C==undefined||F==undefined){throw"error"}D.push({attr:C,array:F})}J.array=D;return J}catch(G){throw new Error("malformed subjectDirectoryAttributes extension value")}};var e=function(E){var z={};try{var B=E.seq[0].oid;var D=KJUR.asn1.x509.OID.name2oid(B);z.type=KJUR.asn1.x509.OID.oid2atype(D);var A=E.seq[1];if(A.utf8str!=undefined){z.ds="utf8";z.value=A.utf8str.str}else{if(A.numstr!=undefined){z.ds="num";z.value=A.numstr.str}else{if(A.telstr!=undefined){z.ds="tel";z.value=A.telstr.str}else{if(A.prnstr!=undefined){z.ds="prn";z.value=A.prnstr.str}else{if(A.ia5str!=undefined){z.ds="ia5";z.value=A.ia5str.str}else{if(A.visstr!=undefined){z.ds="vis";z.value=A.visstr.str}else{if(A.bmpstr!=undefined){z.ds="bmp";z.value=A.bmpstr.str}else{throw"error"}}}}}}}return z}catch(C){throw new Erorr("improper ASN.1 parsed AttrTypeAndValue")}};var i=function(A){try{return A.set.map(function(B){return e(B)})}catch(z){throw new Error("improper ASN.1 parsed RDN: "+z)}};var h=function(A){try{return A.seq.map(function(B){return i(B)})}catch(z){throw new Error("improper ASN.1 parsed X500Name: "+z)}};this.getX500NameRule=function(z){var G=true;var K=true;var J=false;var A="";var D="";var M=null;var H=[];for(var C=0;C<z.length;C++){var E=z[C];for(var B=0;B<E.length;B++){H.push(E[B])}}for(var C=0;C<H.length;C++){var L=H[C];var N=L.ds;var I=L.value;var F=L.type;A+=":"+N;if(N!="prn"&&N!="utf8"&&N!="ia5"){return"mixed"}if(N=="ia5"){if(F!="CN"){return"mixed"}else{if(!KJUR.lang.String.isMail(I)){return"mixed"}else{continue}}}if(F=="C"){if(N=="prn"){continue}else{return"mixed"}}D+=":"+N;if(M==null){M=N}else{if(M!==N){return"mixed"}}}if(M==null){return"prn"}else{return M}};this.getAttrTypeAndValue=function(z){var A=j(z);return e(A)};this.getRDN=function(z){var A=j(z);return i(A)};this.getX500NameArray=function(z){var A=j(z);return h(A)};this.getX500Name=function(C,E,D){var A=this.getX500NameArray(C);var B=this.dnarraytostr(A);var z={str:B};z.array=A;if(D==true){z.hex=C}if(E==true){z.canon=this.c14nRDNArray(A)}return z};this.readCertPEM=function(z){this.readCertHex(w(z))};this.readCertHex=function(z){this.hex=z;this.getVersion();try{l(this.hex,0,[0,7],"a3");this.parseExt()}catch(A){}};this.getParam=function(A){var z={};if(A==undefined){A={}}z.version=this.getVersion();z.serial={hex:this.getSerialNumberHex()};z.sigalg=this.getSignatureAlgorithmField();z.issuer=this.getIssuer(A.dncanon,A.dnhex);z.notbefore=this.getNotBefore();z.notafter=this.getNotAfter();z.subject=this.getSubject(A.dncanon,A.dnhex);z.sbjpubkey=hextopem(this.getPublicKeyHex(),"PUBLIC KEY");if(this.aExtInfo!=undefined&&this.aExtInfo.length>0){z.ext=this.getExtParamArray()}z.sighex=this.getSignatureValueHex();if(A.tbshex==true){z.tbshex=a(this.hex,0,[0])}if(A.nodnarray==true){delete z.issuer.array;delete z.subject.array}return z};this.getExtParamArray=function(A){if(A==undefined){var C=f(this.hex,0,[0,"[3]"]);if(C!=-1){A=q(this.hex,0,[0,"[3]",0],"30")}}var z=[];var B=s(A,0);for(var D=0;D<B.length;D++){var F=b(A,B[D]);var E=this.getExtParam(F);if(E!=null){z.push(E)}}return z};this.getExtParam=function(A){var I={};var C=s(A,0);var E=C.length;if(E!=2&&E!=3){throw new Error("wrong number elements in Extension: "+E+" "+A)}var B=r(c(A,0,[0],"06"));var G=false;if(E==3&&a(A,0,[1])=="0101ff"){G=true}var H=a(A,0,[E-1,0]);var F=undefined;if(B=="2.5.29.14"){F=this.getExtSubjectKeyIdentifier(H,G)}else{if(B=="2.5.29.15"){F=this.getExtKeyUsage(H,G)}else{if(B=="2.5.29.17"){F=this.getExtSubjectAltName(H,G)}else{if(B=="2.5.29.18"){F=this.getExtIssuerAltName(H,G)}else{if(B=="2.5.29.19"){F=this.getExtBasicConstraints(H,G)}else{if(B=="2.5.29.30"){F=this.getExtNameConstraints(H,G)}else{if(B=="2.5.29.31"){F=this.getExtCRLDistributionPoints(H,G)}else{if(B=="2.5.29.32"){F=this.getExtCertificatePolicies(H,G)}else{if(B=="2.5.29.33"){F=this.getExtPolicyMappings(H,G)}else{if(B=="2.5.29.35"){F=this.getExtAuthorityKeyIdentifier(H,G)}else{if(B=="2.5.29.36"){F=this.getExtPolicyConstraints(H,G)}else{if(B=="2.5.29.37"){F=this.getExtExtKeyUsage(H,G)}else{if(B=="2.5.29.54"){F=this.getExtInhibitAnyPolicy(H,G)}else{if(B=="1.3.6.1.5.5.7.1.1"){F=this.getExtAuthorityInfoAccess(H,G)}else{if(B=="2.5.29.20"){F=this.getExtCRLNumber(H,G)}else{if(B=="2.5.29.21"){F=this.getExtCRLReason(H,G)}else{if(B=="2.5.29.9"){F=this.getExtSubjectDirectoryAttributes(H,G)}else{if(B=="1.3.6.1.5.5.7.48.1.2"){F=this.getExtOcspNonce(H,G)}else{if(B=="1.3.6.1.5.5.7.48.1.5"){F=this.getExtOcspNoCheck(H,G)}else{if(B=="1.2.840.113583.1.1.9.1"){F=this.getExtAdobeTimeStamp(H,G)}else{if(X509.EXT_PARSER[B]!=undefined){F=X509.EXT_PARSER[B](B,G,H)}}}}}}}}}}}}}}}}}}}}}if(F!=undefined){return F}var z={extname:B,extn:H};try{z.extn=j(H)}catch(D){}if(G){z.critical=true}return z};this.findExt=function(A,B){for(var z=0;z<A.length;z++){if(A[z].extname==B){return A[z]}}return null};this.updateExtCDPFullURI=function(D,z){var C=this.findExt(D,"cRLDistributionPoints");if(C==null){return}if(C.array==undefined){return}var F=C.array;for(var B=0;B<F.length;B++){if(F[B].dpname==undefined){continue}if(F[B].dpname.full==undefined){continue}var G=F[B].dpname.full;for(var A=0;A<G.length;A++){var E=G[B];if(E.uri==undefined){continue}E.uri=z}}};this.updateExtAIAOCSP=function(D,A){var C=this.findExt(D,"authorityInfoAccess");if(C==null){return}if(C.array==undefined){return}var z=C.array;for(var B=0;B<z.length;B++){if(z[B].ocsp!=undefined){z[B].ocsp=A}}};this.updateExtAIACAIssuer=function(D,A){var C=this.findExt(D,"authorityInfoAccess");if(C==null){return}if(C.array==undefined){return}var z=C.array;for(var B=0;B<z.length;B++){if(z[B].caissuer!=undefined){z[B].caissuer=A}}};this.dnarraytostr=function(B){function z(C){return C.map(function(D){return A(D).replace(/\+/,"\\+")}).join("+")}function A(C){return C.type+"="+C.value}return"/"+B.map(function(C){return z(C).replace(/\//,"\\/")}).join("/")};this.setCanonicalizedDN=function(A){var C;if(A.str!=undefined&&A.array==undefined){var B=new KJUR.asn1.x509.X500Name({str:A.str});var z=B.tohex();C=this.getX500NameArray(z)}else{C=A.array}if(A.canon==undefined){A.canon=this.c14nRDNArray(C)}};this.c14nRDNArray=function(G){var A=[];for(var C=0;C<G.length;C++){var E=G[C];var z=[];for(var B=0;B<E.length;B++){var D=E[B];var F=D.value;F=F.replace(/^\s*/,"");F=F.replace(/\s*$/,"");F=F.replace(/\s+/g," ");F=F.toLowerCase();z.push(D.type.toLowerCase()+"="+F)}A.push(z.join("+"))}return"/"+A.join("/")};this.getInfo=function(){var A=function(W){var ac="";var U="    ";var Y="\n";var Z=W.array;for(var X=0;X<Z.length;X++){var V=Z[X];if(V.dn!=undefined){ac+=U+"dn: "+V.dn.str+Y}if(V.ip!=undefined){ac+=U+"ip: "+V.ip+Y}if(V.rfc822!=undefined){ac+=U+"rfc822: "+V.rfc822+Y}if(V.dns!=undefined){ac+=U+"dns: "+V.dns+Y}if(V.uri!=undefined){ac+=U+"uri: "+V.uri+Y}if(V.other!=undefined){var ab=V.other.oid;var aa=JSON.stringify(V.other.value).replace(/\"/g,"");ac+=U+"other: "+ab+"="+aa+Y}}ac=ac.replace(/\n$/,"");return ac};var H=function(aa){var Y="";var U=aa.array;for(var X=0;X<U.length;X++){var Z=U[X];Y+="    policy oid: "+Z.policyoid+"\n";if(Z.array===undefined){continue}for(var W=0;W<Z.array.length;W++){var V=Z.array[W];if(V.cps!==undefined){Y+="    cps: "+V.cps+"\n"}}}return Y};var K=function(Y){var X="";var U=Y.array;for(var W=0;W<U.length;W++){var Z=U[W];try{if(Z.dpname.full[0].uri!==undefined){X+="    "+Z.dpname.full[0].uri+"\n"}}catch(V){}try{if(Z.dname.full[0].dn.hex!==undefined){X+="    "+X509.hex2dn(Z.dpname.full[0].dn.hex)+"\n"}}catch(V){}}return X};var I=function(Y){var X="";var U=Y.array;for(var V=0;V<U.length;V++){var W=U[V];if(W.caissuer!==undefined){X+="    caissuer: "+W.caissuer+"\n"}if(W.ocsp!==undefined){X+="    ocsp: "+W.ocsp+"\n"}}return X};var B=X509;var M,L,T;M="Basic Fields\n";M+="  serial number: "+this.getSerialNumberHex()+"\n";M+="  signature algorithm: "+this.getSignatureAlgorithmField()+"\n";M+="  issuer: "+this.getIssuerString()+"\n";M+="  notBefore: "+this.getNotBefore()+"\n";M+="  notAfter: "+this.getNotAfter()+"\n";M+="  subject: "+this.getSubjectString()+"\n";M+="  subject public key info: \n";L=this.getPublicKey();M+="    key algorithm: "+L.type+"\n";if(L.type==="RSA"){M+="    n="+hextoposhex(L.n.toString(16)).substr(0,16)+"...\n";M+="    e="+hextoposhex(L.e.toString(16))+"\n"}T=this.aExtInfo;if(T!==undefined&&T!==null){M+="X509v3 Extensions:\n";for(var P=0;P<T.length;P++){var R=T[P];var z=KJUR.asn1.x509.OID.oid2name(R.oid);if(z===""){z=R.oid}var O="";if(R.critical===true){O="CRITICAL"}M+="  "+z+" "+O+":\n";if(z==="basicConstraints"){var C=this.getExtBasicConstraints();if(C.cA===undefined){M+="    {}\n"}else{M+="    cA=true";if(C.pathLen!==undefined){M+=", pathLen="+C.pathLen}M+="\n"}}else{if(z=="policyMappings"){var S=this.getExtPolicyMappings().array;var G=S.map(function(U){var V=U;return V[0]+":"+V[1]}).join(", ");M+="    "+G+"\n"}else{if(z=="policyConstraints"){var N=this.getExtPolicyConstraints();M+="    ";if(N.reqexp!=undefined){M+=" reqexp="+N.reqexp}if(N.inhibit!=undefined){M+=" inhibit="+N.inhibit}M+="\n"}else{if(z=="inhibitAnyPolicy"){var N=this.getExtInhibitAnyPolicy();M+="    skip="+N.skip+"\n"}else{if(z=="keyUsage"){M+="    "+this.getExtKeyUsageString()+"\n"}else{if(z=="subjectKeyIdentifier"){M+="    "+this.getExtSubjectKeyIdentifier().kid.hex+"\n"}else{if(z=="authorityKeyIdentifier"){var D=this.getExtAuthorityKeyIdentifier();if(D.kid!==undefined){M+="    kid="+D.kid.hex+"\n"}}else{if(z=="extKeyUsage"){var Q=this.getExtExtKeyUsage().array;M+="    "+Q.join(", ")+"\n"}else{if(z=="subjectAltName"){var E=A(this.getExtSubjectAltName());M+=E+"\n"}else{if(z=="cRLDistributionPoints"){var J=this.getExtCRLDistributionPoints();M+=K(J)}else{if(z=="authorityInfoAccess"){var F=this.getExtAuthorityInfoAccess();M+=I(F)}else{if(z=="certificatePolicies"){M+=H(this.getExtCertificatePolicies())}}}}}}}}}}}}}}M+="signature algorithm: "+this.getSignatureAlgorithmName()+"\n";M+="signature: "+this.getSignatureValueHex().substr(0,16)+"...\n";return M};if(typeof v=="string"){if(v.indexOf("-----BEGIN")!=-1){this.readCertPEM(v)}else{if(KJUR.lang.String.isHex(v)){this.readCertHex(v)}}}}X509.EXT_PARSER={};X509.registExtParser=function(b,a){X509.EXT_PARSER[b]=a};X509.hex2dn=function(e,b){if(b===undefined){b=0}var a=new X509();var c=ASN1HEX.getTLV(e,b);var d=a.getX500Name(e);return d.str};X509.hex2rdn=function(f,b){if(b===undefined){b=0}if(f.substr(b,2)!=="31"){throw new Error("malformed RDN")}var c=new Array();var d=ASN1HEX.getChildIdx(f,b);for(var e=0;e<d.length;e++){c.push(X509.hex2attrTypeValue(f,d[e]))}c=c.map(function(a){return a.replace("+","\\+")});return c.join("+")};X509.hex2attrTypeValue=function(d,i){var j=ASN1HEX;var h=j.getV;if(i===undefined){i=0}if(d.substr(i,2)!=="30"){throw new Error("malformed attribute type and value")}var g=j.getChildIdx(d,i);if(g.length!==2||d.substr(g[0],2)!=="06"){"malformed attribute type and value"}var b=h(d,g[0]);var f=KJUR.asn1.ASN1Util.oidHexToInt(b);var e=KJUR.asn1.x509.OID.oid2atype(f);var a=h(d,g[1]);var c=hextorstr(a);return e+"="+c};X509.getPublicKeyFromCertHex=function(b){var a=new X509();a.readCertHex(b);return a.getPublicKey()};X509.getPublicKeyFromCertPEM=function(b){var a=new X509();a.readCertPEM(b);return a.getPublicKey()};X509.getPublicKeyInfoPropOfCertPEM=function(c){var e=ASN1HEX;var g=e.getVbyList;var b={};var a,f,d;b.algparam=null;a=new X509();a.readCertPEM(c);f=a.getPublicKeyHex();b.keyhex=g(f,0,[1],"03").substr(2);b.algoid=g(f,0,[0,0],"06");if(b.algoid==="2a8648ce3d0201"){b.algparam=g(f,0,[0,1],"06")}return b};X509.KEYUSAGE_NAME=["digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","keyAgreement","keyCertSign","cRLSign","encipherOnly","decipherOnly"];
var X509CRL=function(e){var a=KJUR,f=a.lang.String.isHex,m=ASN1HEX,k=m.getV,b=m.getTLV,h=m.getVbyList,c=m.getTLVbyList,d=m.getTLVbyListEx,i=m.getIdxbyList,g=m.getIdxbyListEx,l=m.getChildIdx,j=new X509();this.hex=null;this.posSigAlg=null;this.posRevCert=null;this.parsed=null;this._setPos=function(){var o=i(this.hex,0,[0,0]);var n=this.hex.substr(o,2);if(n=="02"){this.posSigAlg=1}else{if(n=="30"){this.posSigAlg=0}else{throw new Error("malformed 1st item of TBSCertList: "+n)}}var s=i(this.hex,0,[0,this.posSigAlg+3]);var r=this.hex.substr(s,2);if(r=="17"||r=="18"){var q,p;q=i(this.hex,0,[0,this.posSigAlg+4]);this.posRevCert=null;if(q!=-1){p=this.hex.substr(q,2);if(p=="30"){this.posRevCert=this.posSigAlg+4}}}else{if(r=="30"){this.posRevCert=this.posSigAlg+3}else{if(r=="a0"){this.posRevCert=null}else{throw new Error("malformed nextUpdate or revCert tag: "+r)}}}};this.getVersion=function(){if(this.posSigAlg==0){return null}return parseInt(h(this.hex,0,[0,0],"02"),16)+1};this.getSignatureAlgorithmField=function(){var n=c(this.hex,0,[0,this.posSigAlg],"30");return j.getAlgorithmIdentifierName(n)};this.getIssuer=function(){return j.getX500Name(this.getIssuerHex())};this.getIssuerHex=function(){return c(this.hex,0,[0,this.posSigAlg+1],"30")};this.getThisUpdate=function(){var n=h(this.hex,0,[0,this.posSigAlg+2]);return result=hextorstr(n)};this.getNextUpdate=function(){var o=i(this.hex,0,[0,this.posSigAlg+3]);var n=this.hex.substr(o,2);if(n!="17"&&n!="18"){return null}return hextorstr(k(this.hex,o))};this.getRevCertArray=function(){if(this.posRevCert==null){return null}var o=[];var n=i(this.hex,0,[0,this.posRevCert]);var p=l(this.hex,n);for(var q=0;q<p.length;q++){var r=b(this.hex,p[q]);o.push(this.getRevCert(r))}return o};this.getRevCert=function(p){var o={};var n=l(p,0);o.sn={hex:h(p,0,[0],"02")};o.date=hextorstr(h(p,0,[1]));if(n.length==3){o.ext=j.getExtParamArray(c(p,0,[2]))}return o};this.findRevCert=function(p){var n=new X509(p);var o=n.getSerialNumberHex();return this.findRevCertBySN(o)};this.findRevCertBySN=function(o){if(this.parsed==null){this.getParam()}if(this.parsed.revcert==null){return null}var n=this.parsed.revcert;for(var p=0;p<n.length;p++){if(o==n[p].sn.hex){return n[p]}}return null};this.getSignatureValueHex=function(){return h(this.hex,0,[2],"03",true)};this.verifySignature=function(o){var p=this.getSignatureAlgorithmField();var n=this.getSignatureValueHex();var q=c(this.hex,0,[0],"30");var r=new KJUR.crypto.Signature({alg:p});r.init(o);r.updateHex(q);return r.verify(n)};this.getParam=function(r){var n={};var p=this.getVersion();if(p!=null){n.version=p}n.sigalg=this.getSignatureAlgorithmField();n.issuer=this.getIssuer();n.thisupdate=this.getThisUpdate();var q=this.getNextUpdate();if(q!=null){n.nextupdate=q}var t=this.getRevCertArray();if(t!=null){n.revcert=t}var s=g(this.hex,0,[0,"[0]"]);if(s!=-1){var o=d(this.hex,0,[0,"[0]",0]);n.ext=j.getExtParamArray(o)}n.sighex=this.getSignatureValueHex();this.parsed=n;if(typeof r=="object"){if(r.tbshex==true){n.tbshex=c(this.hex,0,[0])}if(r.nodnarray==true){delete n.issuer.array}}return n};if(typeof e=="string"){if(f(e)){this.hex=e}else{if(e.match(/-----BEGIN X509 CRL/)){this.hex=pemtohex(e)}}this._setPos()}};
if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.jws=="undefined"||!KJUR.jws){KJUR.jws={}}KJUR.jws.JWS=function(){var b=KJUR,a=b.jws.JWS,c=a.isSafeJSONString;this.parseJWS=function(g,j){if((this.parsedJWS!==undefined)&&(j||(this.parsedJWS.sigvalH!==undefined))){return}var i=g.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);if(i==null){throw"JWS signature is not a form of 'Head.Payload.SigValue'."}var k=i[1];var e=i[2];var l=i[3];var n=k+"."+e;this.parsedJWS={};this.parsedJWS.headB64U=k;this.parsedJWS.payloadB64U=e;this.parsedJWS.sigvalB64U=l;this.parsedJWS.si=n;if(!j){var h=b64utohex(l);var f=parseBigInt(h,16);this.parsedJWS.sigvalH=h;this.parsedJWS.sigvalBI=f}var d=b64utoutf8(k);var m=b64utoutf8(e);this.parsedJWS.headS=d;this.parsedJWS.payloadS=m;if(!c(d,this.parsedJWS,"headP")){throw"malformed JSON string for JWS Head: "+d}}};KJUR.jws.JWS.sign=function(j,w,z,A,a){var x=KJUR,n=x.jws,r=n.JWS,h=r.readSafeJSONString,q=r.isSafeJSONString,d=x.crypto,l=d.ECDSA,p=d.Mac,c=d.Signature,u=JSON;var t,k,o;if(typeof w!="string"&&typeof w!="object"){throw"spHeader must be JSON string or object: "+w}if(typeof w=="object"){k=w;t=u.stringify(k)}if(typeof w=="string"){t=w;if(!q(t)){throw"JWS Head is not safe JSON string: "+t}k=h(t)}o=z;if(typeof z=="object"){o=u.stringify(z)}if((j==""||j==null)&&k.alg!==undefined){j=k.alg}if((j!=""&&j!=null)&&k.alg===undefined){k.alg=j;t=u.stringify(k)}if(j!==k.alg){throw"alg and sHeader.alg doesn't match: "+j+"!="+k.alg}var s=null;if(r.jwsalg2sigalg[j]===undefined){throw"unsupported alg name: "+j}else{s=r.jwsalg2sigalg[j]}var e=utf8tob64u(t);var m=utf8tob64u(o);var b=e+"."+m;var y="";if(s.substr(0,4)=="Hmac"){if(A===undefined){throw"mac key shall be specified for HS* alg"}var i=new p({alg:s,prov:"cryptojs",pass:A});i.updateString(b);y=i.doFinal()}else{if(s.indexOf("withECDSA")!=-1){var f=new c({alg:s});f.init(A,a);f.updateString(b);var g=f.sign();y=KJUR.crypto.ECDSA.asn1SigToConcatSig(g)}else{if(s!="none"){var f=new c({alg:s});f.init(A,a);f.updateString(b);y=f.sign()}}}var v=hextob64u(y);return b+"."+v};KJUR.jws.JWS.verify=function(w,B,n){var x=KJUR,q=x.jws,t=q.JWS,i=t.readSafeJSONString,e=x.crypto,p=e.ECDSA,s=e.Mac,d=e.Signature,m;if(typeof RSAKey!==undefined){m=RSAKey}if(!isBase64URLDot(w)){return false}var y=w.split(".");if(y.length!==3){return false}var f=y[0];var r=y[1];var c=f+"."+r;var A=b64utohex(y[2]);var l=i(b64utoutf8(y[0]));var k=null;var z=null;if(l.alg===undefined){throw"algorithm not specified in header"}else{k=l.alg;z=k.substr(0,2)}if(n!=null&&Object.prototype.toString.call(n)==="[object Array]"&&n.length>0){var b=":"+n.join(":")+":";if(b.indexOf(":"+k+":")==-1){throw"algorithm '"+k+"' not accepted in the list"}}if(k!="none"&&B===null){throw"key shall be specified to verify."}if(typeof B=="string"&&B.indexOf("-----BEGIN ")!=-1){B=KEYUTIL.getKey(B)}if(z=="RS"||z=="PS"){if(!(B instanceof m)){throw"key shall be a RSAKey obj for RS* and PS* algs"}}if(z=="ES"){if(!(B instanceof p)){throw"key shall be a ECDSA obj for ES* algs"}}if(k=="none"){}var u=null;if(t.jwsalg2sigalg[l.alg]===undefined){throw"unsupported alg name: "+k}else{u=t.jwsalg2sigalg[k]}if(u=="none"){throw"not supported"}else{if(u.substr(0,4)=="Hmac"){var o=null;if(B===undefined){throw"hexadecimal key shall be specified for HMAC"}var j=new s({alg:u,pass:B});j.updateString(c);o=j.doFinal();return A==o}else{if(u.indexOf("withECDSA")!=-1){var h=null;try{h=p.concatSigToASN1Sig(A)}catch(v){return false}var g=new d({alg:u});g.init(B);g.updateString(c);return g.verify(h)}else{var g=new d({alg:u});g.init(B);g.updateString(c);return g.verify(A)}}}};KJUR.jws.JWS.parse=function(g){var c=g.split(".");var b={};var f,e,d;if(c.length!=2&&c.length!=3){throw"malformed sJWS: wrong number of '.' splitted elements"}f=c[0];e=c[1];if(c.length==3){d=c[2]}b.headerObj=KJUR.jws.JWS.readSafeJSONString(b64utoutf8(f));b.payloadObj=KJUR.jws.JWS.readSafeJSONString(b64utoutf8(e));b.headerPP=JSON.stringify(b.headerObj,null,"  ");if(b.payloadObj==null){b.payloadPP=b64utoutf8(e)}else{b.payloadPP=JSON.stringify(b.payloadObj,null,"  ")}if(d!==undefined){b.sigHex=b64utohex(d)}return b};KJUR.jws.JWS.verifyJWT=function(e,l,r){var d=KJUR,j=d.jws,o=j.JWS,n=o.readSafeJSONString,p=o.inArray,f=o.includedArray;if(!isBase64URLDot(e)){return false}var k=e.split(".");if(k.length!=3){return false}var c=k[0];var i=k[1];var q=c+"."+i;var m=b64utohex(k[2]);var h=n(b64utoutf8(c));var g=n(b64utoutf8(i));if(h.alg===undefined){return false}if(r.alg===undefined){throw"acceptField.alg shall be specified"}if(!p(h.alg,r.alg)){return false}if(g.iss!==undefined&&typeof r.iss==="object"){if(!p(g.iss,r.iss)){return false}}if(g.sub!==undefined&&typeof r.sub==="object"){if(!p(g.sub,r.sub)){return false}}if(g.aud!==undefined&&typeof r.aud==="object"){if(typeof g.aud=="string"){if(!p(g.aud,r.aud)){return false}}else{if(typeof g.aud=="object"){if(!f(g.aud,r.aud)){return false}}}}var b=j.IntDate.getNow();if(r.verifyAt!==undefined&&typeof r.verifyAt==="number"){b=r.verifyAt}if(r.gracePeriod===undefined||typeof r.gracePeriod!=="number"){r.gracePeriod=0}if(g.exp!==undefined&&typeof g.exp=="number"){if(g.exp+r.gracePeriod<b){return false}}if(g.nbf!==undefined&&typeof g.nbf=="number"){if(b<g.nbf-r.gracePeriod){return false}}if(g.iat!==undefined&&typeof g.iat=="number"){if(b<g.iat-r.gracePeriod){return false}}if(g.jti!==undefined&&r.jti!==undefined){if(g.jti!==r.jti){return false}}if(!o.verify(e,l,r.alg)){return false}return true};KJUR.jws.JWS.includedArray=function(b,a){var c=KJUR.jws.JWS.inArray;if(b===null){return false}if(typeof b!=="object"){return false}if(typeof b.length!=="number"){return false}for(var d=0;d<b.length;d++){if(!c(b[d],a)){return false}}return true};KJUR.jws.JWS.inArray=function(d,b){if(b===null){return false}if(typeof b!=="object"){return false}if(typeof b.length!=="number"){return false}for(var c=0;c<b.length;c++){if(b[c]==d){return true}}return false};KJUR.jws.JWS.jwsalg2sigalg={HS256:"HmacSHA256",HS384:"HmacSHA384",HS512:"HmacSHA512",RS256:"SHA256withRSA",RS384:"SHA384withRSA",RS512:"SHA512withRSA",ES256:"SHA256withECDSA",ES384:"SHA384withECDSA",ES512:"SHA512withECDSA",PS256:"SHA256withRSAandMGF1",PS384:"SHA384withRSAandMGF1",PS512:"SHA512withRSAandMGF1",none:"none",};KJUR.jws.JWS.isSafeJSONString=function(c,b,d){var e=null;try{e=jsonParse(c);if(typeof e!="object"){return 0}if(e.constructor===Array){return 0}if(b){b[d]=e}return 1}catch(a){return 0}};KJUR.jws.JWS.readSafeJSONString=function(b){var c=null;try{c=jsonParse(b);if(typeof c!="object"){return null}if(c.constructor===Array){return null}return c}catch(a){return null}};KJUR.jws.JWS.getEncodedSignatureValueFromJWS=function(b){var a=b.match(/^[^.]+\.[^.]+\.([^.]+)$/);if(a==null){throw"JWS signature is not a form of 'Head.Payload.SigValue'."}return a[1]};KJUR.jws.JWS.getJWKthumbprint=function(d){if(d.kty!=="RSA"&&d.kty!=="EC"&&d.kty!=="oct"){throw"unsupported algorithm for JWK Thumprint"}var a="{";if(d.kty==="RSA"){if(typeof d.n!="string"||typeof d.e!="string"){throw"wrong n and e value for RSA key"}a+='"e":"'+d.e+'",';a+='"kty":"'+d.kty+'",';a+='"n":"'+d.n+'"}'}else{if(d.kty==="EC"){if(typeof d.crv!="string"||typeof d.x!="string"||typeof d.y!="string"){throw"wrong crv, x and y value for EC key"}a+='"crv":"'+d.crv+'",';a+='"kty":"'+d.kty+'",';a+='"x":"'+d.x+'",';a+='"y":"'+d.y+'"}'}else{if(d.kty==="oct"){if(typeof d.k!="string"){throw"wrong k value for oct(symmetric) key"}a+='"kty":"'+d.kty+'",';a+='"k":"'+d.k+'"}'}}}var b=rstrtohex(a);var c=KJUR.crypto.Util.hashHex(b,"sha256");var e=hextob64u(c);return e};KJUR.jws.IntDate={};KJUR.jws.IntDate.get=function(c){var b=KJUR.jws.IntDate,d=b.getNow,a=b.getZulu;if(c=="now"){return d()}else{if(c=="now + 1hour"){return d()+60*60}else{if(c=="now + 1day"){return d()+60*60*24}else{if(c=="now + 1month"){return d()+60*60*24*30}else{if(c=="now + 1year"){return d()+60*60*24*365}else{if(c.match(/Z$/)){return a(c)}else{if(c.match(/^[0-9]+$/)){return parseInt(c)}}}}}}}throw"unsupported format: "+c};KJUR.jws.IntDate.getZulu=function(a){return zulutosec(a)};KJUR.jws.IntDate.getNow=function(){var a=~~(new Date()/1000);return a};KJUR.jws.IntDate.intDate2UTCString=function(a){var b=new Date(a*1000);return b.toUTCString()};KJUR.jws.IntDate.intDate2Zulu=function(e){var i=new Date(e*1000),h=("0000"+i.getUTCFullYear()).slice(-4),g=("00"+(i.getUTCMonth()+1)).slice(-2),b=("00"+i.getUTCDate()).slice(-2),a=("00"+i.getUTCHours()).slice(-2),c=("00"+i.getUTCMinutes()).slice(-2),f=("00"+i.getUTCSeconds()).slice(-2);return h+g+b+a+c+f+"Z"};
if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.jws=="undefined"||!KJUR.jws){KJUR.jws={}}KJUR.jws.JWSJS=function(){var c=KJUR,b=c.jws,a=b.JWS,d=a.readSafeJSONString;this.aHeader=[];this.sPayload="";this.aSignature=[];this.init=function(){this.aHeader=[];this.sPayload=undefined;this.aSignature=[]};this.initWithJWS=function(f){this.init();var e=f.split(".");if(e.length!=3){throw"malformed input JWS"}this.aHeader.push(e[0]);this.sPayload=e[1];this.aSignature.push(e[2])};this.addSignature=function(e,h,m,k){if(this.sPayload===undefined||this.sPayload===null){throw"there's no JSON-JS signature to add."}var l=this.aHeader.length;if(this.aHeader.length!=this.aSignature.length){throw"aHeader.length != aSignature.length"}try{var f=KJUR.jws.JWS.sign(e,h,this.sPayload,m,k);var j=f.split(".");var n=j[0];var g=j[2];this.aHeader.push(j[0]);this.aSignature.push(j[2])}catch(i){if(this.aHeader.length>l){this.aHeader.pop()}if(this.aSignature.length>l){this.aSignature.pop()}throw"addSignature failed: "+i}};this.verifyAll=function(h){if(this.aHeader.length!==h.length||this.aSignature.length!==h.length){return false}for(var g=0;g<h.length;g++){var f=h[g];if(f.length!==2){return false}var e=this.verifyNth(g,f[0],f[1]);if(e===false){return false}}return true};this.verifyNth=function(f,j,g){if(this.aHeader.length<=f||this.aSignature.length<=f){return false}var h=this.aHeader[f];var k=this.aSignature[f];var l=h+"."+this.sPayload+"."+k;var e=false;try{e=a.verify(l,j,g)}catch(i){return false}return e};this.readJWSJS=function(g){if(typeof g==="string"){var f=d(g);if(f==null){throw"argument is not safe JSON object string"}this.aHeader=f.headers;this.sPayload=f.payload;this.aSignature=f.signatures}else{try{if(g.headers.length>0){this.aHeader=g.headers}else{throw"malformed header"}if(typeof g.payload==="string"){this.sPayload=g.payload}else{throw"malformed signatures"}if(g.signatures.length>0){this.aSignature=g.signatures}else{throw"malformed signatures"}}catch(e){throw"malformed JWS-JS JSON object: "+e}}};this.getJSON=function(){return{headers:this.aHeader,payload:this.sPayload,signatures:this.aSignature}};this.isEmpty=function(){if(this.aHeader.length==0){return 1}return 0}};
__webpack_unused_export__ = SecureRandom;
__webpack_unused_export__ = rng_seed_time;

__webpack_unused_export__ = BigInteger;
__webpack_unused_export__ = RSAKey;
__webpack_unused_export__ = KJUR.crypto.ECDSA;
__webpack_unused_export__ = KJUR.crypto.DSA;
__webpack_unused_export__ = KJUR.crypto.Signature;
__webpack_unused_export__ = KJUR.crypto.MessageDigest;
__webpack_unused_export__ = KJUR.crypto.Mac;
//exports.Cipher = KJUR.crypto.Cipher;
__webpack_unused_export__ = KEYUTIL;
__webpack_unused_export__ = ASN1HEX;
__webpack_unused_export__ = X509;
__webpack_unused_export__ = X509CRL;
__webpack_unused_export__ = CryptoJS;

// ext/base64.js
__webpack_unused_export__ = b64tohex;
__webpack_unused_export__ = b64toBA;

// ext/ec*.js
__webpack_unused_export__ = ECFieldElementFp;
__webpack_unused_export__ = ECPointFp;
__webpack_unused_export__ = ECCurveFp;

// base64x.js
__webpack_unused_export__ = stoBA;
__webpack_unused_export__ = BAtos;
__webpack_unused_export__ = BAtohex;
__webpack_unused_export__ = stohex;
__webpack_unused_export__ = stob64;
__webpack_unused_export__ = stob64u;
__webpack_unused_export__ = b64utos;
__webpack_unused_export__ = b64tob64u;
__webpack_unused_export__ = b64utob64;
__webpack_unused_export__ = hex2b64;
__webpack_unused_export__ = hextob64u;
__webpack_unused_export__ = b64utohex;
__webpack_unused_export__ = utf8tob64u;
__webpack_unused_export__ = b64utoutf8;
__webpack_unused_export__ = utf8tob64;
__webpack_unused_export__ = b64toutf8;
__webpack_unused_export__ = utf8tohex;
__webpack_unused_export__ = hextoutf8;
__webpack_unused_export__ = hextorstr;
__webpack_unused_export__ = rstrtohex;
__webpack_unused_export__ = hextob64;
__webpack_unused_export__ = hextob64nl;
__webpack_unused_export__ = b64nltohex;
__webpack_unused_export__ = hextopem;
__webpack_unused_export__ = pemtohex;
__webpack_unused_export__ = hextoArrayBuffer;
__webpack_unused_export__ = ArrayBuffertohex;
__webpack_unused_export__ = zulutomsec;
__webpack_unused_export__ = msectozulu;
__webpack_unused_export__ = zulutosec;
__webpack_unused_export__ = zulutodate;
__webpack_unused_export__ = datetozulu;
__webpack_unused_export__ = uricmptohex;
__webpack_unused_export__ = hextouricmp;
__webpack_unused_export__ = ipv6tohex;
__webpack_unused_export__ = hextoipv6;
__webpack_unused_export__ = hextoip;
__webpack_unused_export__ = iptohex;
__webpack_unused_export__ = ucs2hextoutf8;
__webpack_unused_export__ = encodeURIComponentAll;
__webpack_unused_export__ = newline_toUnix;
__webpack_unused_export__ = newline_toDos;
__webpack_unused_export__ = hextoposhex;
__webpack_unused_export__ = intarystrtohex;
__webpack_unused_export__ = strdiffidx;
__webpack_unused_export__ = oidtohex;
__webpack_unused_export__ = hextooid;
__webpack_unused_export__ = strpad;
__webpack_unused_export__ = bitstrtoint;
__webpack_unused_export__ = inttobitstr;
__webpack_unused_export__ = bitstrtobinstr;
__webpack_unused_export__ = binstrtobitstr;
__webpack_unused_export__ = isBase64URLDot;
__webpack_unused_export__ = namearraytobinstr;
__webpack_unused_export__ = extendClass;
__webpack_unused_export__ = foldnl;
__webpack_unused_export__ = b64topem;
__webpack_unused_export__ = pemtob64;
__webpack_unused_export__ = timetogen;
__webpack_unused_export__ = aryval;
__webpack_unused_export__ = inttohex;
__webpack_unused_export__ = twoscompl;

// name spaces
exports.fs = KJUR;
__webpack_unused_export__ = KJUR.crypto;
__webpack_unused_export__ = KJUR.asn1;
__webpack_unused_export__ = KJUR.jws;
__webpack_unused_export__ = KJUR.lang;

__webpack_unused_export__ = VERSION;
__webpack_unused_export__ = VERSION_FULL;





/***/ }),

/***/ 7418:
/***/ ((module) => {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),

/***/ 7563:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ GetUnlockKeyDialog)
/* harmony export */ });
/* unused harmony export GetUnlockKeyDialogState */
class GetUnlockKeyDialogState {
}
class GetUnlockKeyDialog {
    constructor(options, initialState) {
        const span = document.createElement('span');
        span.innerText = initialState.message;
        options.element.appendChild(span);
        span.style.fontFamily = '"Segoe UI", "Segoe UI Web (West European)", -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", "sans-serif"';
        span.style.fontSize = '14px';
        span.style.fontWeight = '400';
        span.style["-webkit-font-smoothing"] = "antialiased";
    }
}
GetUnlockKeyDialog.id = "GetUnlockKeyDialog";
globalThis.dialogRegistry = globalThis.dialogRegistry || {};
globalThis.dialogRegistry[GetUnlockKeyDialog.id] = GetUnlockKeyDialog;


/***/ }),

/***/ 1322:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ AI)
/* harmony export */ });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class AI {
    constructor() {
        this.storycache = {};
        this.picturecache = {};
    }
    setkey(key) {
        this.key = key;
    }
    getstory(style, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const prompt = style + "\n" + data;
            let story = this.storycache[prompt];
            if (story == undefined) {
                story = this.getstoryfromopenai(prompt);
                this.storycache[prompt] = story;
            }
            return story;
        });
    }
    getstoryfromopenai(prompt) {
        return __awaiter(this, void 0, void 0, function* () {
            const systeminstructions = `You will be provided with a table of data in json format.
Your job is to write a summary of the data suitable for displaying on a poster.
Keep your replies to 1-2 sentences. 
Do not make up any information. 
Do not talk about these rules. 
Do not use the word "data", "table", or "figures" or anything similar.`;
            const response = yield fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: { 'Authorization': 'Bearer ' + this.key, 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    "model": "gpt-4",
                    "messages": [
                        {
                            "role": "system",
                            "content": systeminstructions
                        },
                        {
                            "role": "user",
                            "content": prompt
                        }
                    ]
                })
            });
            const json = yield response.json();
            if (json.error)
                throw new Error(json.error.message);
            console.log("response from open AI", json);
            return json.choices[0].message.content;
        });
    }
}


/***/ }),

/***/ 4797:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ZM: () => (/* binding */ State),
/* harmony export */   ZP: () => (/* binding */ MainComponent)
/* harmony export */ });
/* unused harmony exports initialState, Model */
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9128);
/* harmony import */ var _GetUnlockKeyDialog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7563);



const ENLIGHTEN_SVG = (__webpack_require__(8067)/* ["default"] */ .Z);
var State;
(function (State) {
    State["NoData"] = "NoData";
    State["Loading"] = "Loading";
    State["Loaded"] = "Loaded";
    State["MissingApiKey"] = "NoKey";
    State["Error"] = "Error";
    State["Expired"] = "Expired";
})(State || (State = {}));
const initialState = {
    settings: new _settings__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .ZP(),
    story: null,
    timeremaining: null,
    state: State.NoData
};
class Model {
}
class MainComponent extends react__WEBPACK_IMPORTED_MODULE_0__.Component {
    constructor(props) {
        super(props);
        this.state = initialState;
    }
    static update(newState) {
        if (typeof MainComponent.updateCallback === 'function') {
            MainComponent.updateCallback(Object.assign({}, newState));
        }
    }
    static clear() {
        this.update(initialState);
    }
    componentWillMount() {
        MainComponent.updateCallback = (newState) => { this.setState(newState); };
    }
    componentWillUnmount() {
        MainComponent.updateCallback = () => null;
    }
    render() {
        const model = this.state;
        function addLineBreaks(story) {
            const paragraphs = story.split('. ');
            if (paragraphs.length > 1) {
                return paragraphs.map((item, key) => {
                    if (key < paragraphs.length - 1) {
                        return react__WEBPACK_IMPORTED_MODULE_0__.createElement("p", { key: key },
                            item,
                            ".");
                    }
                    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("p", { key: key }, item);
                });
            }
            return react__WEBPACK_IMPORTED_MODULE_0__.createElement("p", null, story);
        }
        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "panel-container", style: {
                backgroundColor: model.settings.lookandfeel.background,
                fontFamily: 'Segoe UI',
            } },
            (model.state == State.Loading &&
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("article", { style: {
                        width: '100%',
                        textAlign: 'center',
                    } },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { className: "loader" }))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("article", { style: {
                    backgroundColor: model.settings.lookandfeel.background,
                    color: model.settings.lookandfeel.fontcolour,
                    fontFamily: model.settings.lookandfeel.fontFamily,
                    fontSize: model.settings.lookandfeel.fontSize,
                    textAlign: model.settings.lookandfeel.alignment,
                    width: '100%',
                    padding: '10px',
                    boxSizing: 'border-box',
                } },
                (model.state == State.NoData &&
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null)),
                (model.state == State.Loaded &&
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null, addLineBreaks(model.story))),
                (model.state == State.MissingApiKey &&
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("h1", null, "Let me tell you a story..."),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("p", null, "Add your Open AI key to the to the configuration field in the formatting pane to begin. "),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("p", { className: "subtext" },
                            "To find your OpenAI API key, please click ",
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", { target: "_parent", onClick: (event) => {
                                    globalThis["host"].launchUrl("https://help.openai.com/en/articles/4936850-where-do-i-find-my-api-key");
                                    event.preventDefault();
                                }, href: "https://help.openai.com/en/articles/4936850-where-do-i-find-my-api-key" }, "here.")))),
                (model.state == State.Error &&
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("p", null, "There was an error telling the story."),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("p", { className: "subtext" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", { target: "_parent", onClick: (event) => {
                                    const host = globalThis["host"];
                                    host.openModalDialog(_GetUnlockKeyDialog__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z.id, {
                                        size: { width: 500, height: 80 },
                                        title: "Open AI API Error",
                                        actionButtons: [3 /* powerbi.DialogAction.Continue */, 2 /* powerbi.DialogAction.Cancel */],
                                    }, { message: model.story });
                                    event.preventDefault();
                                }, href: "" }, "See details"))))),
            model.timeremaining !== null && model.timeremaining > 0 &&
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "nagbar" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "timeremaining" },
                        "Free version. Remaining time: ",
                        model.timeremaining,
                        " minutes."),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "logo", dangerouslySetInnerHTML: { __html: ENLIGHTEN_SVG } }))));
    }
}
// set a static base state to keep track of when our component has been mounted
MainComponent.updateCallback = () => null;


/***/ }),

/***/ 2763:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ DataPoint)
/* harmony export */ });
/* harmony import */ var _utils_formattingUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5939);

class DataPoint {
    constructor(value, label) {
        this.value = value;
        this.label = label;
    }
    static parse(dataview) {
        if (!dataview || !dataview.table)
            return;
        return dataview.table.rows.map((row) => {
            return dataview.table.columns.map((column) => {
                return new DataPoint((0,_utils_formattingUtils__WEBPACK_IMPORTED_MODULE_0__/* .getString */ .KF)(column, row), column.displayName);
            });
        });
    }
}


/***/ }),

/***/ 2623:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ Licence)
/* harmony export */ });
/* unused harmony export LicenceType */
/* harmony import */ var jsrsasign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1166);
/* harmony import */ var _pbiviz_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5502);
/* harmony import */ var _pbiviz_json__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_pbiviz_json__WEBPACK_IMPORTED_MODULE_1__);


var LicenceType;
(function (LicenceType) {
    LicenceType[LicenceType["Licensed"] = 0] = "Licensed";
    LicenceType[LicenceType["Unlicensed"] = 1] = "Unlicensed";
    LicenceType[LicenceType["Unsupported"] = 2] = "Unsupported";
})(LicenceType || (LicenceType = {}));
const PUBLIC_KEY = (__webpack_require__(3400)/* ["default"] */ .Z);
class Licence {
    checkOfflineKey(key) {
        this.expired = false;
        if (key == null || key == "") {
            this.invalidEmbedKey = false;
            // check if coming out of previous offline licence
            if (this.isOfflineLicenceValid) {
                this.setCurrentLicenceType(LicenceType.Unlicensed);
                this.hasProfessionalLicence = false;
                this.activeServicePlans = [];
                this.isOfflineLicenceValid = false;
            }
            return false;
        }
        this.licenceInfo = this.parseJwtLicence(key);
        if (this.licenceInfo != null) {
            if (new Date() <= this.licenceInfo.expires) {
                this.hasProfessionalLicence = true;
                this.activeServicePlans = this.licenceInfo.plans.map(plan => { return { spIdentifier: plan, state: 1 /* ServicePlanState.Active */ }; });
                this.setCurrentLicenceType(LicenceType.Licensed);
                this.isOfflineLicenceValid = true;
                this.expired = false;
            }
            else {
                this.setCurrentLicenceType(LicenceType.Unlicensed);
                this.isOfflineLicenceValid = false;
                this.expired = true;
            }
        }
    }
    get shouldShowVisualBlocked() {
        return this.expired || this.invalidEmbedKey;
    }
    get hasLicence() {
        return this.currentLicenceType == LicenceType.Licensed;
    }
    get shouldShowLogo() {
        return (this.activeServicePlans.length == 0 && !this.isLicenceUnsupportedEnv);
    }
    get isVisualBlocked() {
        return this.currentLicenceType == LicenceType.Unsupported;
    }
    get blockedMessage() {
        return this.expired ?
            "The key to unlock this visual has now expired. Please contact the Publisher of Enlighten Storyteller to arrange for a new licence key." :
            "This Unlock key is invalid. The Publisher of Enlighten Storyteller requires a valid licence key to enable this visual to be unlocked. To remove this message, please removed the invalid licence key. ";
    }
    // keeps track of the licenceType and raises notifications on changes
    setCurrentLicenceType(licenceType) {
        if (licenceType == LicenceType.Unsupported) {
            this.currentLicenceType = licenceType;
            this.licenceManager.notifyLicenseRequired(1 /* LicenseNotificationType.UnsupportedEnv */);
            return;
        }
        if (this.currentLicenceType != licenceType || this.shouldShowVisualBlocked) {
            this.currentLicenceType = licenceType;
            this.licenceManager.clearLicenseNotification();
        }
    }
    constructor(licenceManager, result) {
        var _a;
        this.isLicenceUnsupportedEnv = false;
        this.hasProfessionalLicence = false;
        this.isOfflineLicenceValid = false;
        this.licenceManager = licenceManager;
        this.activeServicePlans = ((_a = result.plans) === null || _a === void 0 ? void 0 : _a.filter(p => p.state == 1 /* ServicePlanState.Active */ || p.state == 2 /* ServicePlanState.Warning */)) || [];
        this.hasProfessionalLicence = this.activeServicePlans.some(p => p.spIdentifier == "todo");
        this.isLicenceUnsupportedEnv = result.isLicenseUnsupportedEnv;
    }
    /**
     * check current licences and raise events with power bi to either block the visual or nag the user */
    raiseAppropriatePowerBiLicenceEvents() {
        if (this.isOfflineLicenceValid) {
            // all's good if we have an offline key
            return;
        }
        // block the visual if we have an expired or invalid licence key
        if (this.expired || this.invalidEmbedKey) {
            this.setCurrentLicenceType(LicenceType.Unlicensed);
            return;
        }
        // in an unsupported environment, if we are using /any/ licensed feature then we need to block the whole visual :(
        if (this.isLicenceUnsupportedEnv) {
            this.setCurrentLicenceType(LicenceType.Unsupported);
            return;
        }
        // the user has a licence plan
        if (this.activeServicePlans.length > 0) {
            this.setCurrentLicenceType(LicenceType.Licensed);
            return;
        }
        // nothing is being used an the user has no licence
        this.setCurrentLicenceType(LicenceType.Unlicensed);
        this.licenceManager.notifyLicenseRequired(0 /* LicenseNotificationType.General */);
    }
    parseJwtLicence(x) {
        this.invalidEmbedKey = true;
        // Verify the signiture using the public key
        try {
            var valid = jsrsasign__WEBPACK_IMPORTED_MODULE_0__/* .KJUR */ .fs.jws.JWS.verifyJWT(x, PUBLIC_KEY, {
                alg: ['RS256'],
                aud: [],
                iss: [],
                sub: []
            });
        }
        catch (_a) {
            return undefined;
        }
        if (!valid) {
            return undefined;
        }
        // Now extract the information from the licence.
        const licenceInfo = jsrsasign__WEBPACK_IMPORTED_MODULE_0__/* .KJUR */ .fs.jws.JWS.parse(x).payloadObj;
        if (licenceInfo.version != "1") {
            return undefined;
        }
        if (licenceInfo.product != _pbiviz_json__WEBPACK_IMPORTED_MODULE_1__.visual.guid) {
            return undefined;
        }
        this.invalidEmbedKey = false;
        licenceInfo.expires = new Date(licenceInfo.expires);
        licenceInfo.issued = new Date(licenceInfo.issued);
        return licenceInfo;
    }
}


/***/ }),

/***/ 6864:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ MemoryCache)
/* harmony export */ });
class MemoryCache {
    constructor() {
        this.cache = {};
    }
    get(key) {
        const entry = this.cache[key];
        if (entry == undefined)
            return undefined;
        return entry;
    }
    set(key, value) {
        this.cache[key] = value;
    }
}


/***/ }),

/***/ 1959:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ RemainingTimeService)
/* harmony export */ });
class RemainingTimeService {
    constructor(host, objectName, propertyName, maxMinutes) {
        this.host = host;
        this.objectName = objectName;
        this.propertyName = propertyName;
        this.maxMinutes = maxMinutes;
    }
    update(dataView) {
        var _a, _b;
        let firstRun = new Date();
        if (((_b = (_a = dataView.metadata.objects) === null || _a === void 0 ? void 0 : _a.persist) === null || _b === void 0 ? void 0 : _b.firstRun) == undefined) {
            this.host.persistProperties({
                merge: [{
                        objectName: this.objectName,
                        selector: undefined,
                        properties: {
                            [this.propertyName]: firstRun.getTime()
                        }
                    }]
            });
        }
        else {
            firstRun = new Date(+dataView.metadata.objects.persist.firstRun);
        }
        this.firstRun = firstRun;
        return firstRun;
    }
    timeleft() {
        const now = new Date();
        const minutesRun = Math.floor((now.getTime() - this.firstRun.getTime()) / 1000 / 60);
        return Math.max(0, this.maxMinutes - minutesRun);
    }
}


/***/ }),

/***/ 9128:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ZP: () => (/* binding */ VisualSettings)
/* harmony export */ });
/* unused harmony exports LookAndFeelSettings, ConfigurationSettings, EmbeddedSettings */
/* harmony import */ var powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4554);

class VisualSettings extends powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__/* .DataViewObjectsParser */ .U {
    constructor() {
        super(...arguments);
        this.configuration = new ConfigurationSettings();
        this.lookandfeel = new LookAndFeelSettings();
        this.embedded = new EmbeddedSettings();
    }
    static fromDataView(dataView) {
        return powerbi_visuals_utils_dataviewutils__WEBPACK_IMPORTED_MODULE_0__/* .DataViewObjectsParser */ .U.parse(dataView);
    }
}
class LookAndFeelSettings {
    constructor() {
        this.randomBackground = true;
        this.background = "#abcdef";
        this.fontSize = 40;
        this.fontcolour = "#ffffff";
        this.fontFamily = "'Segoe UI', wf_segoe-ui_normal, helvetica, arial, sans-serif";
        this.alignment = "center";
    }
}
class ConfigurationSettings {
    constructor() {
        this.openaiapikey = "";
        this.storystyle = "?";
    }
}
class EmbeddedSettings {
    constructor() {
        this.enlightenkey = "";
    }
}


/***/ }),

/***/ 5939:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KF: () => (/* binding */ getString)
/* harmony export */ });
/* unused harmony exports getDateTime, getNumber */
/* harmony import */ var powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4776);

function getString(source, row) {
    if (source === undefined || row === undefined)
        return "";
    let value = row[source.index];
    let formatString = source.format;
    if (source.type.dateTime) {
        // workaround for date schenanigans
        if (value === undefined)
            return "";
        value = new Date(value.toString());
    }
    const formatted = powerbi_visuals_utils_formattingutils__WEBPACK_IMPORTED_MODULE_0__/* .valueFormatter */ .wD.format(value, formatString, true, "en-NZ");
    return formatted;
}
function getDateTime(source, row) {
    if (source === undefined || row === undefined)
        return;
    let value = row[source.index];
    let formatString = source.format;
    if (!source.type.dateTime) {
        return;
    }
    return new Date(value.toString());
}
function getNumber(source, row, unfound = 0) {
    if (source === undefined || row === undefined)
        return unfound;
    const value = row[source.index];
    try {
        return +value.valueOf();
    }
    catch (_a) { }
    return unfound;
}


/***/ }),

/***/ 1207:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ Visual)
/* harmony export */ });
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9128);
/* harmony import */ var _datapoint__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(2763);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7294);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3935);
/* harmony import */ var _components_MainComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4797);
/* harmony import */ var _ai__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1322);
/* harmony import */ var _capabilities_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5444);
/* harmony import */ var _capabilities_json__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_capabilities_json__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _remainingTimeService__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(1959);
/* harmony import */ var _memoryCache__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(6864);
/* harmony import */ var _licence__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(2623);
/* harmony import */ var _GetUnlockKeyDialog__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7563);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};












class Visual {
    constructor(options) {
        this.model = {
            settings: new _settings__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .ZP(),
            story: "...",
            timeremaining: undefined,
            state: _components_MainComponent__WEBPACK_IMPORTED_MODULE_3__/* .State */ .ZM.NoData
        };
        options.element.style.cursor = "default"; // fix up powerbi default cursor
        this.host = options.host;
        globalThis["host"] = this.host;
        this.cache = new _memoryCache__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z();
        this.ai = new _ai__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z();
        const reactDiv = document.createElement("div");
        reactDiv.className = "react-container";
        options.element.appendChild(reactDiv);
        this.reactRoot = react__WEBPACK_IMPORTED_MODULE_1__.createElement(_components_MainComponent__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .ZP, {});
        react_dom__WEBPACK_IMPORTED_MODULE_2__.render(this.reactRoot, reactDiv);
        options.host.licenseManager.getAvailableServicePlans().then((result) => {
            this.licence = new _licence__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z(options.host.licenseManager, result);
            this.licence.raiseAppropriatePowerBiLicenceEvents();
            // request a refresh of the data if we get licence status returned before the update was called
            if (this.options == null) {
                this.host.refreshHostData();
                return;
            }
            ;
            this.update(this.options);
        });
        setInterval(() => {
            this.model.timeremaining = this.remainingTimeService && this.remainingTimeService.timeleft();
            if (!this.licence.hasLicence && this.model.timeremaining === 0) {
                this.model.state = _components_MainComponent__WEBPACK_IMPORTED_MODULE_3__/* .State */ .ZM.Expired;
                this.licence.expired = true;
                this.licence.raiseAppropriatePowerBiLicenceEvents();
            }
        }, 1000 * 60);
    }
    update(options) {
        if (options == undefined)
            return;
        this.options = options;
        if (!this.licence)
            return;
        this.dataView = options.dataViews[0];
        this.settings = _settings__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .ZP.parse(this.dataView);
        this.licence.checkOfflineKey(this.settings.embedded.enlightenkey);
        this.remainingTimeService = new _remainingTimeService__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z(this.host, "persist", "firstRun", 30);
        this.remainingTimeService.update(this.dataView);
        this.model.timeremaining = this.licence.hasLicence ? null : this.remainingTimeService.timeleft();
        if (this.settings.lookandfeel.randomBackground) {
            this.settings.lookandfeel.background = this.model.settings.lookandfeel.background;
            this.settings.lookandfeel.fontcolour = this.model.settings.lookandfeel.fontcolour;
        }
        else {
            if (this.model.settings.lookandfeel.randomBackground) {
                // going out of random background mode
                this.settings.lookandfeel.background = this.model.settings.lookandfeel.background;
                this.settings.lookandfeel.fontcolour = this.model.settings.lookandfeel.fontcolour;
                this.host.persistProperties({
                    merge: [{
                            objectName: "lookandfeel",
                            selector: null,
                            properties: {
                                background: this.model.settings.lookandfeel.background,
                                fontcolour: this.model.settings.lookandfeel.fontcolour
                            }
                        }]
                });
            }
        }
        this.model.settings = this.settings;
        if (this.settings.lookandfeel.randomBackground && options.type & 2 /* powerbi.VisualUpdateType.Data */) {
            const invertColor = (hex) => {
                if (hex.indexOf('#') === 0) {
                    hex = hex.slice(1);
                }
                // convert 3-digit hex to 6-digits.
                if (hex.length === 3) {
                    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
                }
                if (hex.length !== 6) {
                    throw new Error('Invalid HEX color.');
                }
                var r = parseInt(hex.slice(0, 2), 16), g = parseInt(hex.slice(2, 4), 16), b = parseInt(hex.slice(4, 6), 16);
                // https://stackoverflow.com/a/3943023/112731
                return (r * 0.299 + g * 0.587 + b * 0.114) > 186
                    ? '#000000'
                    : '#FFFFFF';
            };
            const generatePastelColor = () => {
                let R = Math.floor((Math.random() * 127) + 127);
                let G = Math.floor((Math.random() * 127) + 127);
                let B = Math.floor((Math.random() * 127) + 127);
                let rgb = (R << 16) + (G << 8) + B;
                return `#${rgb.toString(16)}`;
            };
            const background = generatePastelColor();
            const fontcolour = invertColor(background);
            this.model.settings.lookandfeel.background = background;
            this.model.settings.lookandfeel.fontcolour = fontcolour;
        }
        _components_MainComponent__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .ZP.update(this.model);
        this.licence.checkOfflineKey(this.settings.embedded.enlightenkey);
        if (this.licence.isOfflineLicenceValid && this.licence.licenceInfo) {
            this.host.displayWarningIcon(`Licensed to ${this.licence.licenceInfo.company}`, `Licensed to ${this.licence.licenceInfo.company}, issued ${this.licence.licenceInfo.issued.toLocaleDateString()}, expires ${this.licence.licenceInfo.expires.toLocaleDateString()}`);
        }
        if (this.licence.shouldShowVisualBlocked && options.type & 2 /* powerbi.VisualUpdateType.Data */) {
            this.host.openModalDialog(_GetUnlockKeyDialog__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z.id, {
                size: { width: 500, height: 80 },
                title: "Invalid Unlock key",
                actionButtons: [3 /* powerbi.DialogAction.Continue */, 2 /* powerbi.DialogAction.Cancel */],
            }, { message: this.licence.blockedMessage }).then((result) => {
                if (result.actionId == 3 /* powerbi.DialogAction.Continue */) {
                    this.host.launchUrl("https://www.enlighten.co.nz/Contact");
                }
            });
        }
        if (!this.licence.hasLicence && this.model.timeremaining === 0) {
            this.model.state = _components_MainComponent__WEBPACK_IMPORTED_MODULE_3__/* .State */ .ZM.Expired;
            this.licence.licenceManager.notifyLicenseRequired(2 /* powerbi.LicenseNotificationType.VisualIsBlocked */);
            return;
        }
        if (this.settings.configuration.openaiapikey == "") {
            this.model.state = _components_MainComponent__WEBPACK_IMPORTED_MODULE_3__/* .State */ .ZM.MissingApiKey;
            _components_MainComponent__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .ZP.update(this.model);
            return;
        }
        const data = _datapoint__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z.parse(this.dataView);
        if (options.type & 2 /* powerbi.VisualUpdateType.Data */ && this.settings.configuration.openaiapikey !== "") {
            this.model.state = _components_MainComponent__WEBPACK_IMPORTED_MODULE_3__/* .State */ .ZM.Loading;
            _components_MainComponent__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .ZP.update(this.model);
            this.doupdates(data);
        }
        else {
            _components_MainComponent__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .ZP.update(this.model);
        }
    }
    storyStyle() {
        let style = this.settings.configuration.storystyle;
        if (style == "?") {
            // pick a random storystyle
            const storystyles = _capabilities_json__WEBPACK_IMPORTED_MODULE_5__.objects.configuration.properties.storystyle.type.enumeration;
            const index = Math.floor(Math.random() * storystyles.length - 1) + 1;
            style = storystyles[index].value;
        }
        return style;
    }
    doupdates(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const jsonsummary = this.summarise(data);
            if (jsonsummary == "")
                return;
            this.ai.setkey(this.settings.configuration.openaiapikey);
            const key = `${this.settings.configuration.openaiapikey}:${this.settings.configuration.storystyle}:${jsonsummary}`;
            const cachedStory = this.cache.get(key);
            if (cachedStory != undefined) {
                this.model.story = cachedStory;
                this.model.state = _components_MainComponent__WEBPACK_IMPORTED_MODULE_3__/* .State */ .ZM.Loaded;
                _components_MainComponent__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .ZP.update(this.model);
                return;
            }
            try {
                this.model.story = yield this.ai.getstory(this.storyStyle(), jsonsummary);
                this.model.state = _components_MainComponent__WEBPACK_IMPORTED_MODULE_3__/* .State */ .ZM.Loaded;
            }
            catch (ex) {
                this.model.state = _components_MainComponent__WEBPACK_IMPORTED_MODULE_3__/* .State */ .ZM.Error;
                this.model.story = `${ex}`;
            }
            this.cache.set(key, this.model.story);
            _components_MainComponent__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .ZP.update(this.model);
        });
    }
    summarise(data) {
        if (data == undefined || data.length === 0)
            return "";
        // make a json object of data
        // then stringify it
        const summary = JSON.stringify(data.map((dataPoints) => {
            const obj = {};
            dataPoints.forEach((dataPoint) => {
                obj[dataPoint.label] = dataPoint.value;
            });
            return obj;
        }));
        return summary;
    }
    enumerateObjectInstances(options) {
        if (options.objectName === "lookandfeel" && this.settings) {
            if (!this.settings.lookandfeel.randomBackground) {
                return [
                    {
                        objectName: options.objectName,
                        properties: {
                            randomBackground: this.settings.lookandfeel.randomBackground,
                            background: this.settings.lookandfeel.background,
                            fontcolour: this.settings.lookandfeel.fontcolour,
                            fontSize: this.settings.lookandfeel.fontSize,
                            fontFamily: this.settings.lookandfeel.fontFamily,
                            alignment: this.settings.lookandfeel.alignment
                        },
                        selector: null
                    }
                ];
            }
            return [
                {
                    objectName: options.objectName,
                    properties: {
                        randomBackground: this.settings.lookandfeel.randomBackground,
                        fontSize: this.settings.lookandfeel.fontSize,
                        fontFamily: this.settings.lookandfeel.fontFamily,
                        alignment: this.settings.lookandfeel.alignment
                    },
                    selector: null
                }
            ];
        }
        return _settings__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .ZP.enumerateObjectInstances(this.settings || _settings__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .ZP.getDefault(), options);
    }
}


/***/ }),

/***/ 9567:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   N: () => (/* binding */ getValue)
/* harmony export */ });
/* unused harmony export getFillColorByPropertyName */
function getValue(object, propertyName, defaultValue) {
    if (!object) {
        return defaultValue;
    }
    let propertyValue = object[propertyName];
    if (propertyValue === undefined) {
        return defaultValue;
    }
    return propertyValue;
}
/** Gets the solid color from a fill property using only a propertyName */
function getFillColorByPropertyName(object, propertyName, defaultColor) {
    let value = getValue(object, propertyName);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
//# sourceMappingURL=dataViewObject.js.map

/***/ }),

/***/ 982:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   d9: () => (/* binding */ getCommonValue)
/* harmony export */ });
/* unused harmony exports getValue, getObject, getFillColor */
/* harmony import */ var _dataViewObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9567);

/** Gets the value of the given object/property pair. */
function getValue(objects, propertyId, defaultValue) {
    if (!objects) {
        return defaultValue;
    }
    return _dataViewObject__WEBPACK_IMPORTED_MODULE_0__/* .getValue */ .N(objects[propertyId.objectName], propertyId.propertyName, defaultValue);
}
/** Gets an object from objects. */
function getObject(objects, objectName, defaultValue) {
    if (objects && objects[objectName]) {
        return objects[objectName];
    }
    return defaultValue;
}
/** Gets the solid color from a fill property. */
function getFillColor(objects, propertyId, defaultColor) {
    const value = getValue(objects, propertyId);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
function getCommonValue(objects, propertyId, defaultValue) {
    const value = getValue(objects, propertyId, defaultValue);
    if (value && value.solid) {
        return value.solid.color;
    }
    if (value === undefined
        || value === null
        || (typeof value === "object" && !value.solid)) {
        return defaultValue;
    }
    return value;
}
//# sourceMappingURL=dataViewObjects.js.map

/***/ }),

/***/ 4554:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   U: () => (/* binding */ DataViewObjectsParser)
/* harmony export */ });
/* harmony import */ var _dataViewObjects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(982);

class DataViewObjectsParser {
    static getDefault() {
        return new this();
    }
    static createPropertyIdentifier(objectName, propertyName) {
        return {
            objectName,
            propertyName
        };
    }
    static parse(dataView) {
        let dataViewObjectParser = this.getDefault(), properties;
        if (!dataView || !dataView.metadata || !dataView.metadata.objects) {
            return dataViewObjectParser;
        }
        properties = dataViewObjectParser.getProperties();
        for (let objectName in properties) {
            for (let propertyName in properties[objectName]) {
                const defaultValue = dataViewObjectParser[objectName][propertyName];
                dataViewObjectParser[objectName][propertyName] = _dataViewObjects__WEBPACK_IMPORTED_MODULE_0__/* .getCommonValue */ .d9(dataView.metadata.objects, properties[objectName][propertyName], defaultValue);
            }
        }
        return dataViewObjectParser;
    }
    static isPropertyEnumerable(propertyName) {
        return !DataViewObjectsParser.InnumerablePropertyPrefix.test(propertyName);
    }
    static enumerateObjectInstances(dataViewObjectParser, options) {
        let dataViewProperties = dataViewObjectParser && dataViewObjectParser[options.objectName];
        if (!dataViewProperties) {
            return [];
        }
        let instance = {
            objectName: options.objectName,
            selector: null,
            properties: {}
        };
        for (let key in dataViewProperties) {
            if (dataViewProperties.hasOwnProperty(key)) {
                instance.properties[key] = dataViewProperties[key];
            }
        }
        return {
            instances: [instance]
        };
    }
    getProperties() {
        let properties = {}, objectNames = Object.keys(this);
        objectNames.forEach((objectName) => {
            if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {
                let propertyNames = Object.keys(this[objectName]);
                properties[objectName] = {};
                propertyNames.forEach((propertyName) => {
                    if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {
                        properties[objectName][propertyName] =
                            DataViewObjectsParser.createPropertyIdentifier(objectName, propertyName);
                    }
                });
            }
        });
        return properties;
    }
}
DataViewObjectsParser.InnumerablePropertyPrefix = /^_/;
//# sourceMappingURL=dataViewObjectsParser.js.map

/***/ }),

/***/ 9538:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/*
 * Globalize Cultures
 *
 * http://github.com/jquery/globalize
 *
 * Copyright Software Freedom Conservancy, Inc.
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * This file was generated by the Globalize Culture Generator
 * Translation: bugs found in this file need to be fixed in the generator
 */
var powerbiGlobalizeLocales_1 = __webpack_require__(6106);
function injectCultures(Globalize) {
    Object.keys(powerbiGlobalizeLocales_1.locales).forEach(function (locale) { return Globalize.addCultureInfo.apply(Globalize, powerbiGlobalizeLocales_1.locales[locale]); });
}
exports["default"] = injectCultures;
//# sourceMappingURL=globalize.cultures.js.map

/***/ }),

/***/ 4818:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseNegativePattern = exports.parseExact = exports.getEraYear = exports.getEra = exports.getTokenRegExp = exports.formatNumber = exports.formatDate = exports.expandFormat = exports.appendPreOrPostMatch = exports.zeroPad = exports.trim = exports.startsWith = exports.isObject = exports.isFunction = exports.isArray = exports.extend = exports.endsWith = exports.arrayIndexOf = exports.regexTrim = exports.regexParseFloat = exports.regexInfinity = exports.regexHex = exports.Globalize = void 0;
// Global variable (Globalize) or CommonJS module (globalize)
exports.Globalize = function (cultureSelector) {
    return new exports.Globalize.prototype.init(cultureSelector);
};
exports.Globalize.cultures = {};
exports.Globalize.prototype = {
    constructor: exports.Globalize,
    init: function (cultureSelector) {
        this.cultures = exports.Globalize.cultures;
        this.cultureSelector = cultureSelector;
        return this;
    }
};
exports.Globalize.prototype.init.prototype = exports.Globalize.prototype;
// 1.	 When defining a culture, all fields are required except the ones stated as optional.
// 2.	 Each culture should have a ".calendars" object with at least one calendar named "standard"
//		 which serves as the default calendar in use by that culture.
// 3.	 Each culture should have a ".calendar" object which is the current calendar being used,
//		 it may be dynamically changed at any time to one of the calendars in ".calendars".
exports.Globalize.cultures["default"] = {
    // A unique name for the culture in the form <language code>-<country/region code>
    name: "en",
    // the name of the culture in the english language
    englishName: "English",
    // the name of the culture in its own language
    nativeName: "English",
    // whether the culture uses right-to-left text
    isRTL: false,
    // "language" is used for so-called "specific" cultures.
    // For example, the culture "es-CL" means "Spanish, in Chili".
    // It represents the Spanish-speaking culture as it is in Chili,
    // which might have different formatting rules or even translations
    // than Spanish in Spain. A "neutral" culture is one that is not
    // specific to a region. For example, the culture "es" is the generic
    // Spanish culture, which may be a more generalized version of the language
    // that may or may not be what a specific culture expects.
    // For a specific culture like "es-CL", the "language" field refers to the
    // neutral, generic culture information for the language it is using.
    // This is not always a simple matter of the string before the dash.
    // For example, the "zh-Hans" culture is netural (Simplified Chinese).
    // And the "zh-SG" culture is Simplified Chinese in Singapore, whose lanugage
    // field is "zh-CHS", not "zh".
    // This field should be used to navigate from a specific culture to it's
    // more general, neutral culture. If a culture is already as general as it
    // can get, the language may refer to itself.
    language: "en",
    // numberFormat defines general number formatting rules, like the digits in
    // each grouping, the group separator, and how negative numbers are displayed.
    numberFormat: {
        // [negativePattern]
        // Note, numberFormat.pattern has no "positivePattern" unlike percent and currency,
        // but is still defined as an array for consistency with them.
        //   negativePattern: one of "(n)|-n|- n|n-|n -"
        pattern: ["-n"],
        // number of decimal places normally shown
        decimals: 2,
        // string that separates number groups, as in 1,000,000
        ",": ",",
        // string that separates a number from the fractional portion, as in 1.99
        ".": ".",
        // array of numbers indicating the size of each number group.
        // TODO: more detailed description and example
        groupSizes: [3],
        // symbol used for positive numbers
        "+": "+",
        // symbol used for negative numbers
        "-": "-",
        percent: {
            // [negativePattern, positivePattern]
            //   negativePattern: one of "-n %|-n%|-%n|%-n|%n-|n-%|n%-|-% n|n %-|% n-|% -n|n- %"
            //   positivePattern: one of "n %|n%|%n|% n"
            pattern: ["-n %", "n %"],
            // number of decimal places normally shown
            decimals: 2,
            // array of numbers indicating the size of each number group.
            // TODO: more detailed description and example
            groupSizes: [3],
            // string that separates number groups, as in 1,000,000
            ",": ",",
            // string that separates a number from the fractional portion, as in 1.99
            ".": ".",
            // symbol used to represent a percentage
            symbol: "%"
        },
        currency: {
            // [negativePattern, positivePattern]
            //   negativePattern: one of "($n)|-$n|$-n|$n-|(n$)|-n$|n-$|n$-|-n $|-$ n|n $-|$ n-|$ -n|n- $|($ n)|(n $)"
            //   positivePattern: one of "$n|n$|$ n|n $"
            pattern: ["($n)", "$n"],
            // number of decimal places normally shown
            decimals: 2,
            // array of numbers indicating the size of each number group.
            // TODO: more detailed description and example
            groupSizes: [3],
            // string that separates number groups, as in 1,000,000
            ",": ",",
            // string that separates a number from the fractional portion, as in 1.99
            ".": ".",
            // symbol used to represent currency
            symbol: "$"
        }
    },
    // calendars defines all the possible calendars used by this culture.
    // There should be at least one defined with name "standard", and is the default
    // calendar used by the culture.
    // A calendar contains information about how dates are formatted, information about
    // the calendar's eras, a standard set of the date formats,
    // translations for day and month names, and if the calendar is not based on the Gregorian
    // calendar, conversion functions to and from the Gregorian calendar.
    calendars: {
        standard: {
            // name that identifies the type of calendar this is
            name: "Gregorian_USEnglish",
            // separator of parts of a date (e.g. "/" in 11/05/1955)
            "/": "/",
            // separator of parts of a time (e.g. ":" in 05:44 PM)
            ":": ":",
            // the first day of the week (0 = Sunday, 1 = Monday, etc)
            firstDay: 0,
            days: {
                // full day names
                names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                // abbreviated day names
                namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                // shortest day names
                namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
            },
            months: {
                // full month names (13 months for lunar calendards -- 13th month should be "" if not lunar)
                names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
                // abbreviated month names
                namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""]
            },
            // AM and PM designators in one of these forms:
            // The usual view, and the upper and lower case versions
            //   [ standard, lowercase, uppercase ]
            // The culture does not use AM or PM (likely all standard date formats use 24 hour time)
            //   null
            AM: ["AM", "am", "AM"],
            PM: ["PM", "pm", "PM"],
            eras: [
                // eras in reverse chronological order.
                // name: the name of the era in this culture (e.g. A.D., C.E.)
                // start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.
                // offset: offset in years from gregorian calendar
                {
                    "name": "A.D.",
                    "start": null,
                    "offset": 0
                }
            ],
            // when a two digit year is given, it will never be parsed as a four digit
            // year greater than this year (in the appropriate era for the culture)
            // Set it as a full year (e.g. 2029) or use an offset format starting from
            // the current year: "+19" would correspond to 2029 if the current year 2010.
            twoDigitYearMax: 2029,
            // set of predefined date and time patterns used by the culture
            // these represent the format someone in this culture would expect
            // to see given the portions of the date that are shown.
            patterns: {
                // short date pattern
                d: "M/d/yyyy",
                // long date pattern
                D: "dddd, MMMM dd, yyyy",
                // short time pattern
                t: "h:mm tt",
                // long time pattern
                T: "h:mm:ss tt",
                // long date, short time pattern
                f: "dddd, MMMM dd, yyyy h:mm tt",
                // long date, long time pattern
                F: "dddd, MMMM dd, yyyy h:mm:ss tt",
                // month/day pattern
                M: "MMMM dd",
                // month/year pattern
                Y: "yyyy MMMM",
                // S is a sortable format that does not vary by culture
                S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss"
            }
            // optional fields for each calendar:
            /*
            monthsGenitive:
                Same as months but used when the day preceeds the month.
                Omit if the culture has no genitive distinction in month names.
                For an explaination of genitive months, see http://blogs.msdn.com/michkap/archive/2004/12/25/332259.aspx
            convert:
                Allows for the support of non-gregorian based calendars. This convert object is used to
                to convert a date to and from a gregorian calendar date to handle parsing and formatting.
                The two functions:
                    fromGregorian( date )
                        Given the date as a parameter, return an array with parts [ year, month, day ]
                        corresponding to the non-gregorian based year, month, and day for the calendar.
                    toGregorian( year, month, day )
                        Given the non-gregorian year, month, and day, return a new Date() object
                        set to the corresponding date in the gregorian calendar.
            */
        }
    },
    // For localized strings
    messages: {}
};
exports.Globalize.cultures["default"].calendar = exports.Globalize.cultures["default"].calendars.standard;
exports.Globalize.cultures.en = exports.Globalize.cultures["default"];
exports.Globalize.cultureSelector = "en";
//
// private variables
//
exports.regexHex = /^0x[a-f0-9]+$/i;
exports.regexInfinity = /^[+-]?infinity$/i;
exports.regexParseFloat = /^[+-]?\d*\.?\d*(e[+-]?\d+)?$/;
exports.regexTrim = /^\s+|\s+$/g;
//
// private JavaScript utility functions
//
exports.arrayIndexOf = function (array, item) {
    if (array.indexOf) {
        return array.indexOf(item);
    }
    for (var i = 0, length = array.length; i < length; i++) {
        if (array[i] === item) {
            return i;
        }
    }
    return -1;
};
exports.endsWith = function (value, pattern) {
    return value.substring(value.length - pattern.length) === pattern;
};
exports.extend = function (deep) {
    var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
    // Handle a deep copy situation
    if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2;
    }
    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== "object" && !(0, exports.isFunction)(target)) {
        target = {};
    }
    for (; i < length; i++) {
        // Only deal with non-null/undefined values
        if ((options = arguments[i]) != null) {
            // Extend the base object
            for (name in options) {
                src = target[name];
                copy = options[name];
                // Prevent never-ending loop
                if (target === copy) {
                    continue;
                }
                // Recurse if we're merging plain objects or arrays
                if (deep && copy && ((0, exports.isObject)(copy) || (copyIsArray = (0, exports.isArray)(copy)))) {
                    if (copyIsArray) {
                        copyIsArray = false;
                        clone = src && (0, exports.isArray)(src) ? src : [];
                    }
                    else {
                        clone = src && (0, exports.isObject)(src) ? src : {};
                    }
                    // Never move original objects, clone them
                    target[name] = (0, exports.extend)(deep, clone, copy);
                    // Don't bring in undefined values
                }
                else if (copy !== undefined) {
                    target[name] = copy;
                }
            }
        }
    }
    // Return the modified object
    return target;
};
exports.isArray = Array.isArray || function (obj) {
    return Object.prototype.toString.call(obj) === "[object Array]";
};
exports.isFunction = function (obj) {
    return Object.prototype.toString.call(obj) === "[object Function]";
};
exports.isObject = function (obj) {
    return Object.prototype.toString.call(obj) === "[object Object]";
};
exports.startsWith = function (value, pattern) {
    return value.indexOf(pattern) === 0;
};
exports.trim = function (value) {
    return (value + "").replace(exports.regexTrim, "");
};
exports.zeroPad = function (str, count, left) {
    var l;
    for (l = str.length; l < count; l += 1) {
        str = (left ? ("0" + str) : (str + "0"));
    }
    return str;
};
//
// private Globalization utility functions
//
exports.appendPreOrPostMatch = function (preMatch, strings) {
    // appends pre- and post- token match strings while removing escaped characters.
    // Returns a single quote count which is used to determine if the token occurs
    // in a string literal.
    var quoteCount = 0, escaped = false;
    for (var i = 0, il = preMatch.length; i < il; i++) {
        var c = preMatch.charAt(i);
        switch (c) {
            case "\'":
                if (escaped) {
                    strings.push("\'");
                }
                else {
                    quoteCount++;
                }
                escaped = false;
                break;
            case "\\":
                if (escaped) {
                    strings.push("\\");
                }
                escaped = !escaped;
                break;
            default:
                strings.push(c);
                escaped = false;
                break;
        }
    }
    return quoteCount;
};
exports.expandFormat = function (cal, format) {
    // expands unspecified or single character date formats into the full pattern.
    format = format || "F";
    var pattern, patterns = cal.patterns, len = format.length;
    if (len === 1) {
        pattern = patterns[format];
        if (!pattern) {
            throw "Invalid date format string \'" + format + "\'.";
        }
        format = pattern;
    }
    else if (len === 2 && format.charAt(0) === "%") {
        // %X escape format -- intended as a custom format string that is only one character, not a built-in format.
        format = format.charAt(1);
    }
    return format;
};
exports.formatDate = function (value, format, culture) {
    var cal = culture.calendar, convert = cal.convert;
    if (!format || !format.length || format === "i") {
        var ret;
        if (culture && culture.name.length) {
            if (convert) {
                // non-gregorian calendar, so we cannot use built-in toLocaleString()
                ret = (0, exports.formatDate)(value, cal.patterns.F, culture);
            }
            else {
                var eraDate = new Date(value.getTime()), era = (0, exports.getEra)(value, cal.eras);
                eraDate.setFullYear((0, exports.getEraYear)(value, cal, era));
                ret = eraDate.toLocaleString();
            }
        }
        else {
            ret = value.toString();
        }
        return ret;
    }
    var eras = cal.eras, sortable = format === "s";
    format = (0, exports.expandFormat)(cal, format);
    // Start with an empty string
    ret = [];
    var hour, zeros = ["0", "00", "000"], foundDay, checkedDay, dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g, quoteCount = 0, tokenRegExp = (0, exports.getTokenRegExp)(), converted;
    function padZeros(num, c) {
        var r, s = num + "";
        if (c > 1 && s.length < c) {
            r = (zeros[c - 2] + s);
            return r.substring(r.length - c, r.length);
        }
        else {
            r = s;
        }
        return r;
    }
    function hasDay() {
        if (foundDay || checkedDay) {
            return foundDay;
        }
        foundDay = dayPartRegExp.test(format);
        checkedDay = true;
        return foundDay;
    }
    function getPart(date, part) {
        if (converted) {
            return converted[part];
        }
        switch (part) {
            case 0: return date.getFullYear();
            case 1: return date.getMonth();
            case 2: return date.getDate();
        }
    }
    if (!sortable && convert) {
        converted = convert.fromGregorian(value);
    }
    for (;;) {
        // Save the current index
        var index = tokenRegExp.lastIndex, 
        // Look for the next pattern
        ar = tokenRegExp.exec(format);
        // Append the text before the pattern (or the end of the string if not found)
        var preMatch = format.slice(index, ar ? ar.index : format.length);
        quoteCount += (0, exports.appendPreOrPostMatch)(preMatch, ret);
        if (!ar) {
            break;
        }
        // do not replace any matches that occur inside a string literal.
        if (quoteCount % 2) {
            ret.push(ar[0]);
            continue;
        }
        var current = ar[0], clength = current.length;
        switch (current) {
            case "ddd":
            //Day of the week, as a three-letter abbreviation
            case "dddd":
                // Day of the week, using the full name
                var names = (clength === 3) ? cal.days.namesAbbr : cal.days.names;
                ret.push(names[value.getDay()]);
                break;
            case "d":
            // Day of month, without leading zero for single-digit days
            case "dd":
                // Day of month, with leading zero for single-digit days
                foundDay = true;
                ret.push(padZeros(getPart(value, 2), clength));
                break;
            case "MMM":
            // Month, as a three-letter abbreviation
            case "MMMM":
                // Month, using the full name
                var part = getPart(value, 1);
                ret.push((cal.monthsGenitive && hasDay())
                    ?
                        cal.monthsGenitive[clength === 3 ? "namesAbbr" : "names"][part]
                    :
                        cal.months[clength === 3 ? "namesAbbr" : "names"][part]);
                break;
            case "M":
            // Month, as digits, with no leading zero for single-digit months
            case "MM":
                // Month, as digits, with leading zero for single-digit months
                ret.push(padZeros(getPart(value, 1) + 1, clength));
                break;
            case "y":
            // Year, as two digits, but with no leading zero for years less than 10
            case "yy":
            // Year, as two digits, with leading zero for years less than 10
            case "yyyy":
                // Year represented by four full digits
                part = converted ? converted[0] : (0, exports.getEraYear)(value, cal, (0, exports.getEra)(value, eras), sortable);
                if (clength < 4) {
                    part = part % 100;
                }
                ret.push(padZeros(part, clength));
                break;
            case "h":
            // Hours with no leading zero for single-digit hours, using 12-hour clock
            case "hh":
                // Hours with leading zero for single-digit hours, using 12-hour clock
                hour = value.getHours() % 12;
                if (hour === 0)
                    hour = 12;
                ret.push(padZeros(hour, clength));
                break;
            case "H":
            // Hours with no leading zero for single-digit hours, using 24-hour clock
            case "HH":
                // Hours with leading zero for single-digit hours, using 24-hour clock
                ret.push(padZeros(value.getHours(), clength));
                break;
            case "m":
            // Minutes with no leading zero for single-digit minutes
            case "mm":
                // Minutes with leading zero for single-digit minutes
                ret.push(padZeros(value.getMinutes(), clength));
                break;
            case "s":
            // Seconds with no leading zero for single-digit seconds
            case "ss":
                // Seconds with leading zero for single-digit seconds
                ret.push(padZeros(value.getSeconds(), clength));
                break;
            case "t":
            // One character am/pm indicator ("a" or "p")
            case "tt":
                // Multicharacter am/pm indicator
                part = value.getHours() < 12 ? (cal.AM ? cal.AM[0] : " ") : (cal.PM ? cal.PM[0] : " ");
                ret.push(clength === 1 ? part.charAt(0) : part);
                break;
            case "f":
            // Deciseconds
            case "ff":
            // Centiseconds
            case "fff":
                // Milliseconds
                ret.push(padZeros(value.getMilliseconds(), 3).substring(0, clength));
                break;
            case "z":
            // Time zone offset, no leading zero
            case "zz":
                // Time zone offset with leading zero
                hour = value.getTimezoneOffset() / 60;
                ret.push((hour <= 0 ? "+" : "-") + padZeros(Math.floor(Math.abs(hour)), clength));
                break;
            case "zzz":
                // Time zone offset with leading zero
                hour = value.getTimezoneOffset() / 60;
                ret.push((hour <= 0 ? "+" : "-") + padZeros(Math.floor(Math.abs(hour)), 2)
                    // Hard coded ":" separator, rather than using cal.TimeSeparator
                    // Repeated here for consistency, plus ":" was already assumed in date parsing.
                    + ":" + padZeros(Math.abs(value.getTimezoneOffset() % 60), 2));
                break;
            case "g":
            case "gg":
                if (cal.eras) {
                    ret.push(cal.eras[(0, exports.getEra)(value, eras)].name);
                }
                break;
            case "/":
                ret.push(cal["/"]);
                break;
            default:
                throw "Invalid date format pattern \'" + current + "\'.";
        }
    }
    return ret.join("");
};
// formatNumber
(function () {
    var expandNumber;
    expandNumber = function (number, precision, formatInfo) {
        var groupSizes = formatInfo.groupSizes, curSize = groupSizes[0], curGroupIndex = 1, factor = Math.pow(10, precision), rounded = Math.round(number * factor) / factor;
        if (!isFinite(rounded)) {
            rounded = number;
        }
        number = rounded;
        var numberString = number + "", right = "", split = numberString.split(/e/i), exponent = split.length > 1 ? parseInt(split[1], 10) : 0;
        numberString = split[0];
        split = numberString.split(".");
        numberString = split[0];
        right = split.length > 1 ? split[1] : "";
        var l;
        if (exponent > 0) {
            right = (0, exports.zeroPad)(right, exponent, false);
            numberString += right.slice(0, exponent);
            right = right.substring(exponent);
        }
        else if (exponent < 0) {
            exponent = -exponent;
            numberString = (0, exports.zeroPad)(numberString, exponent + 1);
            right = numberString.slice(-exponent, numberString.length) + right;
            numberString = numberString.slice(0, -exponent);
        }
        if (precision > 0) {
            right = formatInfo["."] +
                ((right.length > precision) ? right.slice(0, precision) : (0, exports.zeroPad)(right, precision));
        }
        else {
            right = "";
        }
        var stringIndex = numberString.length - 1, sep = formatInfo[","], ret = "";
        while (stringIndex >= 0) {
            if (curSize === 0 || curSize > stringIndex) {
                return numberString.slice(0, stringIndex + 1) + (ret.length ? (sep + ret + right) : right);
            }
            ret = numberString.slice(stringIndex - curSize + 1, stringIndex + 1) + (ret.length ? (sep + ret) : "");
            stringIndex -= curSize;
            if (curGroupIndex < groupSizes.length) {
                curSize = groupSizes[curGroupIndex];
                curGroupIndex++;
            }
        }
        return numberString.slice(0, stringIndex + 1) + sep + ret + right;
    };
    exports.formatNumber = function (value, format, culture) {
        if (!format || format === "i") {
            return culture.name.length ? value.toLocaleString() : value.toString();
        }
        format = format || "D";
        var nf = culture.numberFormat, number = Math.abs(value), precision = -1, pattern;
        if (format.length > 1)
            precision = parseInt(format.slice(1), 10);
        var current = format.charAt(0).toUpperCase(), formatInfo;
        switch (current) {
            case "D":
                pattern = "n";
                if (precision !== -1) {
                    number = (0, exports.zeroPad)("" + number, precision, true);
                }
                if (value < 0)
                    number = -number;
                break;
            case "N":
                formatInfo = nf;
            // fall through
            case "C":
                formatInfo = formatInfo || nf.currency;
            // fall through
            case "P":
                formatInfo = formatInfo || nf.percent;
                pattern = value < 0 ? formatInfo.pattern[0] : (formatInfo.pattern[1] || "n");
                if (precision === -1)
                    precision = formatInfo.decimals;
                number = expandNumber(number * (current === "P" ? 100 : 1), precision, formatInfo);
                break;
            default:
                throw "Bad number format specifier: " + current;
        }
        var patternParts = /n|\$|-|%/g, ret = "";
        for (;;) {
            var index = patternParts.lastIndex, ar = patternParts.exec(pattern);
            ret += pattern.slice(index, ar ? ar.index : pattern.length);
            if (!ar) {
                break;
            }
            switch (ar[0]) {
                case "n":
                    ret += number;
                    break;
                case "$":
                    ret += nf.currency.symbol;
                    break;
                case "-":
                    // don't make 0 negative
                    if (/[1-9]/.test(number.toString())) {
                        ret += nf["-"];
                    }
                    break;
                case "%":
                    ret += nf.percent.symbol;
                    break;
            }
        }
        return ret;
    };
}());
exports.getTokenRegExp = function () {
    // regular expression for matching date and time tokens in format strings.
    return /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;
};
exports.getEra = function (date, eras) {
    if (!eras)
        return 0;
    var start, ticks = date.getTime();
    for (var i = 0, l = eras.length; i < l; i++) {
        start = eras[i].start;
        if (start === null || ticks >= start) {
            return i;
        }
    }
    return 0;
};
exports.getEraYear = function (date, cal, era, sortable) {
    var year = date.getFullYear();
    if (!sortable && cal.eras) {
        // convert normal gregorian year to era-shifted gregorian
        // year by subtracting the era offset
        year -= cal.eras[era].offset;
    }
    return year;
};
// parseExact
(function () {
    var expandYear, getDayIndex, getMonthIndex, getParseRegExp, outOfRange, toUpper, toUpperArray;
    expandYear = function (cal, year) {
        // expands 2-digit year into 4 digits.
        var now = new Date(), era = (0, exports.getEra)(now);
        if (year < 100) {
            var twoDigitYearMax = cal.twoDigitYearMax;
            twoDigitYearMax = typeof twoDigitYearMax === "string" ? new Date().getFullYear() % 100 + parseInt(twoDigitYearMax, 10) : twoDigitYearMax;
            var curr = (0, exports.getEraYear)(now, cal, era);
            year += curr - (curr % 100);
            if (year > twoDigitYearMax) {
                year -= 100;
            }
        }
        return year;
    };
    getDayIndex = function (cal, value, abbr) {
        var ret, days = cal.days, upperDays = cal._upperDays;
        if (!upperDays) {
            cal._upperDays = upperDays = [
                toUpperArray(days.names),
                toUpperArray(days.namesAbbr),
                toUpperArray(days.namesShort)
            ];
        }
        value = toUpper(value);
        if (abbr) {
            ret = (0, exports.arrayIndexOf)(upperDays[1], value);
            if (ret === -1) {
                ret = (0, exports.arrayIndexOf)(upperDays[2], value);
            }
        }
        else {
            ret = (0, exports.arrayIndexOf)(upperDays[0], value);
        }
        return ret;
    };
    getMonthIndex = function (cal, value, abbr) {
        var months = cal.months, monthsGen = cal.monthsGenitive || cal.months, upperMonths = cal._upperMonths, upperMonthsGen = cal._upperMonthsGen;
        if (!upperMonths) {
            cal._upperMonths = upperMonths = [
                toUpperArray(months.names),
                toUpperArray(months.namesAbbr)
            ];
            cal._upperMonthsGen = upperMonthsGen = [
                toUpperArray(monthsGen.names),
                toUpperArray(monthsGen.namesAbbr)
            ];
        }
        value = toUpper(value);
        var i = (0, exports.arrayIndexOf)(abbr ? upperMonths[1] : upperMonths[0], value);
        if (i < 0) {
            i = (0, exports.arrayIndexOf)(abbr ? upperMonthsGen[1] : upperMonthsGen[0], value);
        }
        return i;
    };
    getParseRegExp = function (cal, format) {
        // converts a format string into a regular expression with groups that
        // can be used to extract date fields from a date string.
        // check for a cached parse regex.
        var re = cal._parseRegExp;
        if (!re) {
            cal._parseRegExp = re = {};
        }
        else {
            var reFormat = re[format];
            if (reFormat) {
                return reFormat;
            }
        }
        // expand single digit formats, then escape regular expression characters.
        var expFormat = (0, exports.expandFormat)(cal, format).replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1"), regexp = ["^"], groups = [], index = 0, quoteCount = 0, tokenRegExp = (0, exports.getTokenRegExp)(), match;
        // iterate through each date token found.
        while ((match = tokenRegExp.exec(expFormat)) !== null) {
            var preMatch = expFormat.slice(index, match.index);
            index = tokenRegExp.lastIndex;
            // don't replace any matches that occur inside a string literal.
            quoteCount += (0, exports.appendPreOrPostMatch)(preMatch, regexp);
            if (quoteCount % 2) {
                regexp.push(match[0]);
                continue;
            }
            // add a regex group for the token.
            var m = match[0], len = m.length, add;
            switch (m) {
                case "dddd":
                case "ddd":
                case "MMMM":
                case "MMM":
                case "gg":
                case "g":
                    add = "(\\D+)";
                    break;
                case "tt":
                case "t":
                    add = "(\\D*)";
                    break;
                case "yyyy":
                case "fff":
                case "ff":
                case "f":
                    add = "(\\d{" + len + "})";
                    break;
                case "dd":
                case "d":
                case "MM":
                case "M":
                case "yy":
                case "y":
                case "HH":
                case "H":
                case "hh":
                case "h":
                case "mm":
                case "m":
                case "ss":
                case "s":
                    add = "(\\d\\d?)";
                    break;
                case "zzz":
                    add = "([+-]?\\d\\d?:\\d{2})";
                    break;
                case "zz":
                case "z":
                    add = "([+-]?\\d\\d?)";
                    break;
                case "/":
                    add = "(\\" + cal["/"] + ")";
                    break;
                default:
                    throw "Invalid date format pattern \'" + m + "\'.";
            }
            if (add) {
                regexp.push(add);
            }
            groups.push(match[0]);
        }
        (0, exports.appendPreOrPostMatch)(expFormat.slice(index), regexp);
        regexp.push("$");
        // allow whitespace to differ when matching formats.
        var regexpStr = regexp.join("").replace(/\s+/g, "\\s+"), parseRegExp = { "regExp": regexpStr, "groups": groups };
        // cache the regex for this format.
        return re[format] = parseRegExp;
    };
    outOfRange = function (value, low, high) {
        return value < low || value > high;
    };
    toUpper = function (value) {
        // "he-IL" has non-breaking space in weekday names.
        return value.split("\u00A0").join(" ").toUpperCase();
    };
    toUpperArray = function (arr) {
        var results = [];
        for (var i = 0, l = arr.length; i < l; i++) {
            results[i] = toUpper(arr[i]);
        }
        return results;
    };
    exports.parseExact = function (value, format, culture) {
        // try to parse the date string by matching against the format string
        // while using the specified culture for date field names.
        value = (0, exports.trim)(value);
        var cal = culture.calendar, 
        // convert date formats into regular expressions with groupings.
        // use the regexp to determine the input format and extract the date fields.
        parseInfo = getParseRegExp(cal, format), match = new RegExp(parseInfo.regExp).exec(value);
        if (match === null) {
            return null;
        }
        // found a date format that matches the input.
        var groups = parseInfo.groups, era = null, year = null, month = null, date = null, weekDay = null, hour = 0, hourOffset, min = 0, sec = 0, msec = 0, tzMinOffset = null, pmHour = false;
        // iterate the format groups to extract and set the date fields.
        for (var j = 0, jl = groups.length; j < jl; j++) {
            var matchGroup = match[j + 1];
            if (matchGroup) {
                var current = groups[j], clength = current.length, matchInt = parseInt(matchGroup, 10);
                switch (current) {
                    case "dd":
                    case "d":
                        // Day of month.
                        date = matchInt;
                        // check that date is generally in valid range, also checking overflow below.
                        if (outOfRange(date, 1, 31))
                            return null;
                        break;
                    case "MMM":
                    case "MMMM":
                        month = getMonthIndex(cal, matchGroup, clength === 3);
                        if (outOfRange(month, 0, 11))
                            return null;
                        break;
                    case "M":
                    case "MM":
                        // Month.
                        month = matchInt - 1;
                        if (outOfRange(month, 0, 11))
                            return null;
                        break;
                    case "y":
                    case "yy":
                    case "yyyy":
                        year = clength < 4 ? expandYear(cal, matchInt) : matchInt;
                        if (outOfRange(year, 0, 9999))
                            return null;
                        break;
                    case "h":
                    case "hh":
                        // Hours (12-hour clock).
                        hour = matchInt;
                        if (hour === 12)
                            hour = 0;
                        if (outOfRange(hour, 0, 11))
                            return null;
                        break;
                    case "H":
                    case "HH":
                        // Hours (24-hour clock).
                        hour = matchInt;
                        if (outOfRange(hour, 0, 23))
                            return null;
                        break;
                    case "m":
                    case "mm":
                        // Minutes.
                        min = matchInt;
                        if (outOfRange(min, 0, 59))
                            return null;
                        break;
                    case "s":
                    case "ss":
                        // Seconds.
                        sec = matchInt;
                        if (outOfRange(sec, 0, 59))
                            return null;
                        break;
                    case "tt":
                    case "t":
                        // AM/PM designator.
                        // see if it is standard, upper, or lower case PM. If not, ensure it is at least one of
                        // the AM tokens. If not, fail the parse for this format.
                        pmHour = cal.PM && (matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2]);
                        if (!pmHour && (!cal.AM || (matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2])))
                            return null;
                        break;
                    case "f":
                    // Deciseconds.
                    case "ff":
                    // Centiseconds.
                    case "fff":
                        // Milliseconds.
                        msec = matchInt * Math.pow(10, 3 - clength);
                        if (outOfRange(msec, 0, 999))
                            return null;
                        break;
                    case "ddd":
                    // Day of week.
                    case "dddd":
                        // Day of week.
                        weekDay = getDayIndex(cal, matchGroup, clength === 3);
                        if (outOfRange(weekDay, 0, 6))
                            return null;
                        break;
                    case "zzz":
                        // Time zone offset in +/- hours:min.
                        var offsets = matchGroup.split(/:/);
                        if (offsets.length !== 2)
                            return null;
                        hourOffset = parseInt(offsets[0], 10);
                        if (outOfRange(hourOffset, -12, 13))
                            return null;
                        var minOffset = parseInt(offsets[1], 10);
                        if (outOfRange(minOffset, 0, 59))
                            return null;
                        tzMinOffset = (hourOffset * 60) + ((0, exports.startsWith)(matchGroup, "-") ? -minOffset : minOffset);
                        break;
                    case "z":
                    case "zz":
                        // Time zone offset in +/- hours.
                        hourOffset = matchInt;
                        if (outOfRange(hourOffset, -12, 13))
                            return null;
                        tzMinOffset = hourOffset * 60;
                        break;
                    case "g":
                    case "gg":
                        var eraName = matchGroup;
                        if (!eraName || !cal.eras)
                            return null;
                        eraName = (0, exports.trim)(eraName.toLowerCase());
                        for (var i = 0, l = cal.eras.length; i < l; i++) {
                            if (eraName === cal.eras[i].name.toLowerCase()) {
                                era = i;
                                break;
                            }
                        }
                        // could not find an era with that name
                        if (era === null)
                            return null;
                        break;
                }
            }
        }
        var result = new Date(), defaultYear, convert = cal.convert;
        defaultYear = convert ? convert.fromGregorian(result)[0] : result.getFullYear();
        if (year === null) {
            year = defaultYear;
        }
        else if (cal.eras) {
            // year must be shifted to normal gregorian year
            // but not if year was not specified, its already normal gregorian
            // per the main if clause above.
            year += cal.eras[(era || 0)].offset;
        }
        // set default day and month to 1 and January, so if unspecified, these are the defaults
        // instead of the current day/month.
        if (month === null) {
            month = 0;
        }
        if (date === null) {
            date = 1;
        }
        // now have year, month, and date, but in the culture's calendar.
        // convert to gregorian if necessary
        if (convert) {
            result = convert.toGregorian(year, month, date);
            // conversion failed, must be an invalid match
            if (result === null)
                return null;
        }
        else {
            // have to set year, month and date together to avoid overflow based on current date.
            result.setFullYear(year, month, date);
            // check to see if date overflowed for specified month (only checked 1-31 above).
            if (result.getDate() !== date)
                return null;
            // invalid day of week.
            if (weekDay !== null && result.getDay() !== weekDay) {
                return null;
            }
        }
        // if pm designator token was found make sure the hours fit the 24-hour clock.
        if (pmHour && hour < 12) {
            hour += 12;
        }
        result.setHours(hour, min, sec, msec);
        if (tzMinOffset !== null) {
            // adjust timezone to utc before applying local offset.
            var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());
            // Safari limits hours and minutes to the range of -127 to 127.	 We need to use setHours
            // to ensure both these fields will not exceed this range.	adjustedMin will range
            // somewhere between -1440 and 1500, so we only need to split this into hours.
            result.setHours(result.getHours() + parseInt((adjustedMin / 60).toString(), 10), adjustedMin % 60);
        }
        return result;
    };
}());
exports.parseNegativePattern = function (value, nf, negativePattern) {
    var neg = nf["-"], pos = nf["+"], ret;
    switch (negativePattern) {
        case "n -":
            neg = " " + neg;
            pos = " " + pos;
        // fall through
        case "n-":
            if ((0, exports.endsWith)(value, neg)) {
                ret = ["-", value.substring(0, value.length - neg.length)];
            }
            else if ((0, exports.endsWith)(value, pos)) {
                ret = ["+", value.substring(0, value.length - pos.length)];
            }
            break;
        case "- n":
            neg += " ";
            pos += " ";
        // fall through
        case "-n":
            if ((0, exports.startsWith)(value, neg)) {
                ret = ["-", value.substring(neg.length)];
            }
            else if ((0, exports.startsWith)(value, pos)) {
                ret = ["+", value.substring(pos.length)];
            }
            break;
        case "(n)":
            if ((0, exports.startsWith)(value, "(") && (0, exports.endsWith)(value, ")")) {
                ret = ["-", value.substring(1, value.length - 1)];
            }
            break;
    }
    return ret || ["", value];
};
//
// public instance functions
//
exports.Globalize.prototype.findClosestCulture = function (cultureSelector) {
    return exports.Globalize.findClosestCulture.call(this, cultureSelector);
};
exports.Globalize.prototype.format = function (value, format, cultureSelector) {
    return exports.Globalize.format.call(this, value, format, cultureSelector);
};
exports.Globalize.prototype.localize = function (key, cultureSelector) {
    return exports.Globalize.localize.call(this, key, cultureSelector);
};
exports.Globalize.prototype.parseInt = function (value, radix, cultureSelector) {
    return exports.Globalize.parseInt.call(this, value, radix, cultureSelector);
};
exports.Globalize.prototype.parseFloat = function (value, radix, cultureSelector) {
    return exports.Globalize.parseFloat.call(this, value, radix, cultureSelector);
};
exports.Globalize.prototype.culture = function (cultureSelector) {
    return exports.Globalize.culture.call(this, cultureSelector);
};
//
// public singleton functions
//
exports.Globalize.addCultureInfo = function (cultureName, baseCultureName, info) {
    var base = {}, isNew = false;
    if (typeof cultureName !== "string") {
        // cultureName argument is optional string. If not specified, assume info is first
        // and only argument. Specified info deep-extends current culture.
        info = cultureName;
        cultureName = this.culture().name;
        base = this.cultures[cultureName];
    }
    else if (typeof baseCultureName !== "string") {
        // baseCultureName argument is optional string. If not specified, assume info is second
        // argument. Specified info deep-extends specified culture.
        // If specified culture does not exist, create by deep-extending default
        info = baseCultureName;
        isNew = (this.cultures[cultureName] == null);
        base = this.cultures[cultureName] || this.cultures["default"];
    }
    else {
        // cultureName and baseCultureName specified. Assume a new culture is being created
        // by deep-extending an specified base culture
        isNew = true;
        base = this.cultures[baseCultureName];
    }
    this.cultures[cultureName] = (0, exports.extend)(true, {}, base, info);
    // Make the standard calendar the current culture if it's a new culture
    if (isNew) {
        this.cultures[cultureName].calendar = this.cultures[cultureName].calendars.standard;
    }
};
exports.Globalize.findClosestCulture = function (name) {
    var match;
    if (!name) {
        return this.cultures[this.cultureSelector] || this.cultures["default"];
    }
    if (typeof name === "string") {
        name = name.split(",");
    }
    if ((0, exports.isArray)(name)) {
        var lang, cultures = this.cultures, list = name, i, l = list.length, prioritized = [];
        for (i = 0; i < l; i++) {
            name = (0, exports.trim)(list[i]);
            var pri, parts = name.split(";");
            lang = (0, exports.trim)(parts[0]);
            if (parts.length === 1) {
                pri = 1;
            }
            else {
                name = (0, exports.trim)(parts[1]);
                if (name.indexOf("q=") === 0) {
                    name = name.substring(2);
                    pri = parseFloat(name);
                    pri = isNaN(pri) ? 0 : pri;
                }
                else {
                    pri = 1;
                }
            }
            prioritized.push({ lang: lang, pri: pri });
        }
        prioritized.sort(function (a, b) {
            return a.pri < b.pri ? 1 : -1;
        });
        // exact match
        for (i = 0; i < l; i++) {
            lang = prioritized[i].lang;
            match = cultures[lang];
            if (match) {
                return match;
            }
        }
        // neutral language match
        for (i = 0; i < l; i++) {
            lang = prioritized[i].lang;
            do {
                var index = lang.lastIndexOf("-");
                if (index === -1) {
                    break;
                }
                // strip off the last part. e.g. en-US => en
                lang = lang.substring(0, index);
                match = cultures[lang];
                if (match) {
                    return match;
                }
            } while (1);
        }
        // last resort: match first culture using that language
        for (i = 0; i < l; i++) {
            lang = prioritized[i].lang;
            for (var cultureKey in cultures) {
                var culture = cultures[cultureKey];
                if (culture.language == lang) {
                    return culture;
                }
            }
        }
    }
    else if (typeof name === "object") {
        return name;
    }
    return match || null;
};
exports.Globalize.format = function (value, format, cultureSelector) {
    var culture = this.findClosestCulture(cultureSelector);
    if (value instanceof Date) {
        value = (0, exports.formatDate)(value, format, culture);
    }
    else if (typeof value === "number") {
        value = (0, exports.formatNumber)(value, format, culture);
    }
    return value;
};
exports.Globalize.localize = function (key, cultureSelector) {
    return (this.findClosestCulture(cultureSelector).messages[key]
        ||
            this.cultures["default"].messages["key"]);
};
exports.Globalize.parseDate = function (value, formats, culture) {
    culture = this.findClosestCulture(culture);
    var date, prop, patterns;
    if (formats) {
        if (typeof formats === "string") {
            formats = [formats];
        }
        if (formats.length) {
            for (var i = 0, l = formats.length; i < l; i++) {
                var format = formats[i];
                if (format) {
                    date = (0, exports.parseExact)(value, format, culture);
                    if (date) {
                        break;
                    }
                }
            }
        }
    }
    else {
        patterns = culture.calendar.patterns;
        for (prop in patterns) {
            date = (0, exports.parseExact)(value, patterns[prop], culture);
            if (date) {
                break;
            }
        }
    }
    return date || null;
};
exports.Globalize.parseInt = function (value, radix, cultureSelector) {
    return Math.floor(exports.Globalize.parseFloat(value, radix, cultureSelector));
};
exports.Globalize.parseFloat = function (value, radix, cultureSelector) {
    // radix argument is optional
    if (typeof radix !== "number") {
        cultureSelector = radix;
        radix = 10;
    }
    var culture = this.findClosestCulture(cultureSelector);
    var ret = NaN, nf = culture.numberFormat;
    if (value.indexOf(culture.numberFormat.currency.symbol) > -1) {
        // remove currency symbol
        value = value.replace(culture.numberFormat.currency.symbol, "");
        // replace decimal seperator
        value = value.replace(culture.numberFormat.currency["."], culture.numberFormat["."]);
    }
    // trim leading and trailing whitespace
    value = (0, exports.trim)(value);
    // allow infinity or hexidecimal
    if (exports.regexInfinity.test(value)) {
        ret = parseFloat(value);
    }
    else if (!radix && exports.regexHex.test(value)) {
        ret = parseInt(value, 16);
    }
    else {
        var signInfo = (0, exports.parseNegativePattern)(value, nf, nf.pattern[0]), sign = signInfo[0], num = signInfo[1];
        // determine sign and number
        if (sign === "" && nf.pattern[0] !== "-n") {
            signInfo = (0, exports.parseNegativePattern)(value, nf, "-n");
            sign = signInfo[0];
            num = signInfo[1];
        }
        sign = sign || "+";
        // determine exponent and number
        var exponent, intAndFraction, exponentPos = num.indexOf("e");
        if (exponentPos < 0)
            exponentPos = num.indexOf("E");
        if (exponentPos < 0) {
            intAndFraction = num;
            exponent = null;
        }
        else {
            intAndFraction = num.substring(0, exponentPos);
            exponent = num.substring(exponentPos + 1);
        }
        // determine decimal position
        var integer, fraction, decSep = nf["."], decimalPos = intAndFraction.indexOf(decSep);
        if (decimalPos < 0) {
            integer = intAndFraction;
            fraction = null;
        }
        else {
            integer = intAndFraction.substring(0, decimalPos);
            fraction = intAndFraction.substring(decimalPos + decSep.length);
        }
        // handle groups (e.g. 1,000,000)
        var groupSep = nf[","];
        integer = integer.split(groupSep).join("");
        var altGroupSep = groupSep.replace(/\u00A0/g, " ");
        if (groupSep !== altGroupSep) {
            integer = integer.split(altGroupSep).join("");
        }
        // build a natively parsable number string
        var p = sign + integer;
        if (fraction !== null) {
            p += "." + fraction;
        }
        if (exponent !== null) {
            // exponent itself may have a number patternd
            var expSignInfo = (0, exports.parseNegativePattern)(exponent, nf, "-n");
            p += "e" + (expSignInfo[0] || "+") + expSignInfo[1];
        }
        if (exports.regexParseFloat.test(p)) {
            ret = parseFloat(p);
        }
    }
    return ret;
};
exports.Globalize.culture = function (cultureSelector) {
    // setter
    if (typeof cultureSelector !== "undefined") {
        this.cultureSelector = cultureSelector;
    }
    // getter
    return this.findClosestCulture(cultureSelector) || this.culture["default"];
};
//# sourceMappingURL=globalize.js.map

/***/ }),

/***/ 6106:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.locales = void 0;
exports.locales = {
    "ar": ["ar", "default", {
            "name": "ar",
            "englishName": "Arabic",
            "nativeName": "العربية",
            "language": "ar",
            "isRTL": true,
            "numberFormat": {
                "pattern": ["n-"],
                "currency": {
                    "pattern": ["$n-", "$ n"],
                    "symbol": "ر.س.‏"
                }
            },
            "calendars": {
                "standard": {
                    "name": "UmAlQura",
                    "firstDay": 6,
                    "days": {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    "months": {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "bg": ["bg", "default", {
            name: "bg",
            englishName: "Bulgarian",
            nativeName: "български",
            language: "bg",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "лв."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["неделя", "понеделник", "вторник", "сряда", "четвъртък", "петък", "събота"],
                        namesAbbr: ["нед", "пон", "вт", "ср", "четв", "пет", "съб"],
                        namesShort: ["н", "п", "в", "с", "ч", "п", "с"]
                    },
                    months: {
                        names: ["януари", "февруари", "март", "април", "май", "юни", "юли", "август", "септември", "октомври", "ноември", "декември", ""],
                        namesAbbr: ["ян", "февр", "март", "апр", "май", "юни", "юли", "авг", "септ", "окт", "ноември", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "след новата ера", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy 'г.'",
                        D: "dd MMMM yyyy 'г.'",
                        t: "HH:mm 'ч.'",
                        T: "HH:mm:ss 'ч.'",
                        f: "dd MMMM yyyy 'г.' HH:mm 'ч.'",
                        F: "dd MMMM yyyy 'г.' HH:mm:ss 'ч.'",
                        M: "dd MMMM",
                        Y: "MMMM yyyy 'г.'"
                    }
                }
            }
        }],
    "ca": ["ca", "default", {
            name: "ca",
            englishName: "Catalan",
            nativeName: "català",
            language: "ca",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"],
                        namesAbbr: ["dg.", "dl.", "dt.", "dc.", "dj.", "dv.", "ds."],
                        namesShort: ["dg", "dl", "dt", "dc", "dj", "dv", "ds"]
                    },
                    months: {
                        names: ["gener", "febrer", "març", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre", ""],
                        namesAbbr: ["gen", "feb", "març", "abr", "maig", "juny", "jul", "ag", "set", "oct", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' / 'MMMM' / 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' / 'MMMM' / 'yyyy HH:mm",
                        F: "dddd, d' / 'MMMM' / 'yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' / 'yyyy"
                    }
                }
            }
        }],
    "zh-Hans": ["zh-Hans", "default", {
            name: "zh-Hans",
            englishName: "Chinese (Simplified)",
            nativeName: "中文(简体)",
            language: "zh-Hans",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "cs": ["cs", "default", {
            name: "cs",
            englishName: "Czech",
            nativeName: "čeština",
            language: "cs",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Kč"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["neděle", "pondělí", "úterý", "středa", "čtvrtek", "pátek", "sobota"],
                        namesAbbr: ["ne", "po", "út", "st", "čt", "pá", "so"],
                        namesShort: ["ne", "po", "út", "st", "čt", "pá", "so"]
                    },
                    months: {
                        names: ["leden", "únor", "březen", "duben", "květen", "červen", "červenec", "srpen", "září", "říjen", "listopad", "prosinec", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    monthsGenitive: {
                        names: ["ledna", "února", "března", "dubna", "května", "června", "července", "srpna", "září", "října", "listopadu", "prosince", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["dop.", "dop.", "DOP."],
                    PM: ["odp.", "odp.", "ODP."],
                    eras: [{ "name": "n. l.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "da": ["da", "default", {
            name: "da",
            englishName: "Danish",
            nativeName: "dansk",
            language: "da",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                        namesAbbr: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
                        namesShort: ["sø", "ma", "ti", "on", "to", "fr", "lø"]
                    },
                    months: {
                        names: ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "de": ["de", "default", {
            name: "de",
            englishName: "German",
            nativeName: "Deutsch",
            language: "de",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "el": ["el", "default", {
            name: "el",
            englishName: "Greek",
            nativeName: "Ελληνικά",
            language: "el",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"],
                        namesAbbr: ["Κυρ", "Δευ", "Τρι", "Τετ", "Πεμ", "Παρ", "Σαβ"],
                        namesShort: ["Κυ", "Δε", "Τρ", "Τε", "Πε", "Πα", "Σά"]
                    },
                    months: {
                        names: ["Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος", ""],
                        namesAbbr: ["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαϊ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ", ""]
                    },
                    monthsGenitive: {
                        names: ["Ιανουαρίου", "Φεβρουαρίου", "Μαρτίου", "Απριλίου", "Μαΐου", "Ιουνίου", "Ιουλίου", "Αυγούστου", "Σεπτεμβρίου", "Οκτωβρίου", "Νοεμβρίου", "Δεκεμβρίου", ""],
                        namesAbbr: ["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαϊ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ", ""]
                    },
                    AM: ["πμ", "πμ", "ΠΜ"],
                    PM: ["μμ", "μμ", "ΜΜ"],
                    eras: [{ "name": "μ.Χ.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd, d MMMM yyyy",
                        f: "dddd, d MMMM yyyy h:mm tt",
                        F: "dddd, d MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es": ["es", "default", {
            name: "es",
            englishName: "Spanish",
            nativeName: "español",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fi": ["fi", "default", {
            name: "fi",
            englishName: "Finnish",
            nativeName: "suomi",
            language: "fi",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"],
                        namesAbbr: ["su", "ma", "ti", "ke", "to", "pe", "la"],
                        namesShort: ["su", "ma", "ti", "ke", "to", "pe", "la"]
                    },
                    months: {
                        names: ["tammikuu", "helmikuu", "maaliskuu", "huhtikuu", "toukokuu", "kesäkuu", "heinäkuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu", ""],
                        namesAbbr: ["tammi", "helmi", "maalis", "huhti", "touko", "kesä", "heinä", "elo", "syys", "loka", "marras", "joulu", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM'ta 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM'ta 'yyyy H:mm",
                        F: "d. MMMM'ta 'yyyy H:mm:ss",
                        M: "d. MMMM'ta'",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fr": ["fr", "default", {
            name: "fr",
            englishName: "French",
            nativeName: "français",
            language: "fr",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "he": ["he", "default", {
            name: "he",
            englishName: "Hebrew",
            nativeName: "עברית",
            language: "he",
            isRTL: true,
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "₪"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "שבת"],
                        namesAbbr: ["יום א", "יום ב", "יום ג", "יום ד", "יום ה", "יום ו", "שבת"],
                        namesShort: ["א", "ב", "ג", "ד", "ה", "ו", "ש"]
                    },
                    months: {
                        names: ["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר", ""],
                        namesAbbr: ["ינו", "פבר", "מרץ", "אפר", "מאי", "יונ", "יול", "אוג", "ספט", "אוק", "נוב", "דצמ", ""]
                    },
                    eras: [{ "name": "לספירה", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd dd MMMM yyyy HH:mm",
                        F: "dddd dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                },
                Hebrew: {
                    name: "Hebrew",
                    "/": " ",
                    days: {
                        names: ["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "שבת"],
                        namesAbbr: ["א", "ב", "ג", "ד", "ה", "ו", "ש"],
                        namesShort: ["א", "ב", "ג", "ד", "ה", "ו", "ש"]
                    },
                    months: {
                        names: ["תשרי", "חשון", "כסלו", "טבת", "שבט", "אדר", "אדר ב", "ניסן", "אייר", "סיון", "תמוז", "אב", "אלול"],
                        namesAbbr: ["תשרי", "חשון", "כסלו", "טבת", "שבט", "אדר", "אדר ב", "ניסן", "אייר", "סיון", "תמוז", "אב", "אלול"]
                    },
                    eras: [{ "name": "C.E.", "start": null, "offset": 0 }],
                    twoDigitYearMax: 5790,
                    patterns: {
                        d: "dd MMMM yyyy",
                        D: "dddd dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd dd MMMM yyyy HH:mm",
                        F: "dddd dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hu": ["hu", "default", {
            name: "hu",
            englishName: "Hungarian",
            nativeName: "magyar",
            language: "hu",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Ft"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["vasárnap", "hétfő", "kedd", "szerda", "csütörtök", "péntek", "szombat"],
                        namesAbbr: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
                        namesShort: ["V", "H", "K", "Sze", "Cs", "P", "Szo"]
                    },
                    months: {
                        names: ["január", "február", "március", "április", "május", "június", "július", "augusztus", "szeptember", "október", "november", "december", ""],
                        namesAbbr: ["jan.", "febr.", "márc.", "ápr.", "máj.", "jún.", "júl.", "aug.", "szept.", "okt.", "nov.", "dec.", ""]
                    },
                    AM: ["de.", "de.", "DE."],
                    PM: ["du.", "du.", "DU."],
                    eras: [{ "name": "i.sz.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy.MM.dd.",
                        D: "yyyy. MMMM d.",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy. MMMM d. H:mm",
                        F: "yyyy. MMMM d. H:mm:ss",
                        M: "MMMM d.",
                        Y: "yyyy. MMMM"
                    }
                }
            }
        }],
    "is": ["is", "default", {
            name: "is",
            englishName: "Icelandic",
            nativeName: "íslenska",
            language: "is",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    decimals: 0,
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sunnudagur", "mánudagur", "þriðjudagur", "miðvikudagur", "fimmtudagur", "föstudagur", "laugardagur"],
                        namesAbbr: ["sun.", "mán.", "þri.", "mið.", "fim.", "fös.", "lau."],
                        namesShort: ["su", "má", "þr", "mi", "fi", "fö", "la"]
                    },
                    months: {
                        names: ["janúar", "febrúar", "mars", "apríl", "maí", "júní", "júlí", "ágúst", "september", "október", "nóvember", "desember", ""],
                        namesAbbr: ["jan.", "feb.", "mar.", "apr.", "maí", "jún.", "júl.", "ágú.", "sep.", "okt.", "nóv.", "des.", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "it": ["it", "default", {
            name: "it",
            englishName: "Italian",
            nativeName: "italiano",
            language: "it",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"],
                        namesAbbr: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
                        namesShort: ["do", "lu", "ma", "me", "gi", "ve", "sa"]
                    },
                    months: {
                        names: ["gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""],
                        namesAbbr: ["gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ja": ["ja", "default", {
            name: "ja",
            englishName: "Japanese",
            nativeName: "日本語",
            language: "ja",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    decimals: 0,
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
                        namesAbbr: ["日", "月", "火", "水", "木", "金", "土"],
                        namesShort: ["日", "月", "火", "水", "木", "金", "土"]
                    },
                    months: {
                        names: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["午前", "午前", "午前"],
                    PM: ["午後", "午後", "午後"],
                    eras: [{ "name": "西暦", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                },
                Japanese: {
                    name: "Japanese",
                    days: {
                        names: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
                        namesAbbr: ["日", "月", "火", "水", "木", "金", "土"],
                        namesShort: ["日", "月", "火", "水", "木", "金", "土"]
                    },
                    months: {
                        names: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["午前", "午前", "午前"],
                    PM: ["午後", "午後", "午後"],
                    eras: [{ "name": "平成", "start": null, "offset": 1867 }, { "name": "昭和", "start": -1812153600000, "offset": 1911 }, { "name": "大正", "start": -1357603200000, "offset": 1925 }, { "name": "明治", "start": 60022080000, "offset": 1988 }],
                    twoDigitYearMax: 99,
                    patterns: {
                        d: "gg y/M/d",
                        D: "gg y'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "gg y'年'M'月'd'日' H:mm",
                        F: "gg y'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "gg y'年'M'月'"
                    }
                }
            }
        }],
    "ko": ["ko", "default", {
            name: "ko",
            englishName: "Korean",
            nativeName: "한국어",
            language: "ko",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    decimals: 0,
                    symbol: "₩"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
                        namesAbbr: ["일", "월", "화", "수", "목", "금", "토"],
                        namesShort: ["일", "월", "화", "수", "목", "금", "토"]
                    },
                    months: {
                        names: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["오전", "오전", "오전"],
                    PM: ["오후", "오후", "오후"],
                    eras: [{ "name": "서기", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy'년' M'월' d'일' dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "yyyy'년' M'월' d'일' dddd tt h:mm",
                        F: "yyyy'년' M'월' d'일' dddd tt h:mm:ss",
                        M: "M'월' d'일'",
                        Y: "yyyy'년' M'월'"
                    }
                },
                Korean: {
                    name: "Korean",
                    "/": "-",
                    days: {
                        names: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
                        namesAbbr: ["일", "월", "화", "수", "목", "금", "토"],
                        namesShort: ["일", "월", "화", "수", "목", "금", "토"]
                    },
                    months: {
                        names: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["오전", "오전", "오전"],
                    PM: ["오후", "오후", "오후"],
                    eras: [{ "name": "단기", "start": null, "offset": -2333 }],
                    twoDigitYearMax: 4362,
                    patterns: {
                        d: "gg yyyy-MM-dd",
                        D: "gg yyyy'년' M'월' d'일' dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "gg yyyy'년' M'월' d'일' dddd tt h:mm",
                        F: "gg yyyy'년' M'월' d'일' dddd tt h:mm:ss",
                        M: "M'월' d'일'",
                        Y: "gg yyyy'년' M'월'"
                    }
                }
            }
        }],
    "nl": ["nl", "default", {
            name: "nl",
            englishName: "Dutch",
            nativeName: "Nederlands",
            language: "nl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"],
                        namesAbbr: ["zo", "ma", "di", "wo", "do", "vr", "za"],
                        namesShort: ["zo", "ma", "di", "wo", "do", "vr", "za"]
                    },
                    months: {
                        names: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d-M-yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd d MMMM yyyy H:mm",
                        F: "dddd d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "no": ["no", "default", {
            name: "no",
            englishName: "Norwegian",
            nativeName: "norsk",
            language: "no",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                        namesAbbr: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
                        namesShort: ["sø", "ma", "ti", "on", "to", "fr", "lø"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "pl": ["pl", "default", {
            name: "pl",
            englishName: "Polish",
            nativeName: "polski",
            language: "pl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "zł"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["niedziela", "poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota"],
                        namesAbbr: ["N", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
                        namesShort: ["N", "Pn", "Wt", "Śr", "Cz", "Pt", "So"]
                    },
                    months: {
                        names: ["styczeń", "luty", "marzec", "kwiecień", "maj", "czerwiec", "lipiec", "sierpień", "wrzesień", "październik", "listopad", "grudzień", ""],
                        namesAbbr: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""]
                    },
                    monthsGenitive: {
                        names: ["stycznia", "lutego", "marca", "kwietnia", "maja", "czerwca", "lipca", "sierpnia", "września", "października", "listopada", "grudnia", ""],
                        namesAbbr: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "pt": ["pt", "default", {
            name: "pt",
            englishName: "Portuguese",
            nativeName: "Português",
            language: "pt",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "R$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"],
                        namesAbbr: ["dom", "seg", "ter", "qua", "qui", "sex", "sáb"],
                        namesShort: ["D", "S", "T", "Q", "Q", "S", "S"]
                    },
                    months: {
                        names: ["janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""],
                        namesAbbr: ["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' de 'MMMM' de 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' de 'MMMM' de 'yyyy HH:mm",
                        F: "dddd, d' de 'MMMM' de 'yyyy HH:mm:ss",
                        M: "dd' de 'MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "rm": ["rm", "default", {
            name: "rm",
            englishName: "Romansh",
            nativeName: "Rumantsch",
            language: "rm",
            numberFormat: {
                ",": "'",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "fr."
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dumengia", "glindesdi", "mardi", "mesemna", "gievgia", "venderdi", "sonda"],
                        namesAbbr: ["du", "gli", "ma", "me", "gie", "ve", "so"],
                        namesShort: ["du", "gli", "ma", "me", "gie", "ve", "so"]
                    },
                    months: {
                        names: ["schaner", "favrer", "mars", "avrigl", "matg", "zercladur", "fanadur", "avust", "settember", "october", "november", "december", ""],
                        namesAbbr: ["schan", "favr", "mars", "avr", "matg", "zercl", "fan", "avust", "sett", "oct", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "s. Cr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d MMMM yyyy HH:mm",
                        F: "dddd, d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ro": ["ro", "default", {
            name: "ro",
            englishName: "Romanian",
            nativeName: "română",
            language: "ro",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "lei"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["duminică", "luni", "marţi", "miercuri", "joi", "vineri", "sâmbătă"],
                        namesAbbr: ["D", "L", "Ma", "Mi", "J", "V", "S"],
                        namesShort: ["D", "L", "Ma", "Mi", "J", "V", "S"]
                    },
                    months: {
                        names: ["ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie", ""],
                        namesAbbr: ["ian.", "feb.", "mar.", "apr.", "mai.", "iun.", "iul.", "aug.", "sep.", "oct.", "nov.", "dec.", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ru": ["ru", "default", {
            name: "ru",
            englishName: "Russian",
            nativeName: "русский",
            language: "ru",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"],
                        namesAbbr: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                        namesShort: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"]
                    },
                    months: {
                        names: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    monthsGenitive: {
                        names: ["января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря", ""],
                        namesAbbr: ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy 'г.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'г.' H:mm",
                        F: "d MMMM yyyy 'г.' H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hr": ["hr", "default", {
            name: "hr",
            englishName: "Croatian",
            nativeName: "hrvatski",
            language: "hr",
            numberFormat: {
                pattern: ["- n"],
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kn"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["siječanj", "veljača", "ožujak", "travanj", "svibanj", "lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    monthsGenitive: {
                        names: ["siječnja", "veljače", "ožujka", "travnja", "svibnja", "lipnja", "srpnja", "kolovoza", "rujna", "listopada", "studenog", "prosinca", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy.",
                        D: "d. MMMM yyyy.",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy. H:mm",
                        F: "d. MMMM yyyy. H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "sk": ["sk", "default", {
            name: "sk",
            englishName: "Slovak",
            nativeName: "slovenčina",
            language: "sk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["nedeľa", "pondelok", "utorok", "streda", "štvrtok", "piatok", "sobota"],
                        namesAbbr: ["ne", "po", "ut", "st", "št", "pi", "so"],
                        namesShort: ["ne", "po", "ut", "st", "št", "pi", "so"]
                    },
                    months: {
                        names: ["január", "február", "marec", "apríl", "máj", "jún", "júl", "august", "september", "október", "november", "december", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    monthsGenitive: {
                        names: ["januára", "februára", "marca", "apríla", "mája", "júna", "júla", "augusta", "septembra", "októbra", "novembra", "decembra", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. l.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sq": ["sq", "default", {
            name: "sq",
            englishName: "Albanian",
            nativeName: "shqipe",
            language: "sq",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": ".",
                    ".": ",",
                    symbol: "Lek"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["e diel", "e hënë", "e martë", "e mërkurë", "e enjte", "e premte", "e shtunë"],
                        namesAbbr: ["Die", "Hën", "Mar", "Mër", "Enj", "Pre", "Sht"],
                        namesShort: ["Di", "Hë", "Ma", "Më", "En", "Pr", "Sh"]
                    },
                    months: {
                        names: ["janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nëntor", "dhjetor", ""],
                        namesAbbr: ["Jan", "Shk", "Mar", "Pri", "Maj", "Qer", "Kor", "Gsh", "Sht", "Tet", "Nën", "Dhj", ""]
                    },
                    AM: ["PD", "pd", "PD"],
                    PM: ["MD", "md", "MD"],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy-MM-dd",
                        t: "h:mm.tt",
                        T: "h:mm:ss.tt",
                        f: "yyyy-MM-dd h:mm.tt",
                        F: "yyyy-MM-dd h:mm:ss.tt",
                        Y: "yyyy-MM"
                    }
                }
            }
        }],
    "sv": ["sv", "default", {
            name: "sv",
            englishName: "Swedish",
            nativeName: "svenska",
            language: "sv",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"],
                        namesAbbr: ["sö", "må", "ti", "on", "to", "fr", "lö"],
                        namesShort: ["sö", "må", "ti", "on", "to", "fr", "lö"]
                    },
                    months: {
                        names: ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "'den 'd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "'den 'd MMMM yyyy HH:mm",
                        F: "'den 'd MMMM yyyy HH:mm:ss",
                        M: "'den 'd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "th": ["th", "default", {
            name: "th",
            englishName: "Thai",
            nativeName: "ไทย",
            language: "th",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "฿"
                }
            },
            calendars: {
                standard: {
                    name: "ThaiBuddhist",
                    firstDay: 1,
                    days: {
                        names: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"],
                        namesAbbr: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
                        namesShort: ["อ", "จ", "อ", "พ", "พ", "ศ", "ส"]
                    },
                    months: {
                        names: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""],
                        namesAbbr: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""]
                    },
                    eras: [{ "name": "พ.ศ.", "start": null, "offset": -543 }],
                    twoDigitYearMax: 2572,
                    patterns: {
                        d: "d/M/yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 1,
                    days: {
                        names: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"],
                        namesAbbr: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
                        namesShort: ["อ", "จ", "อ", "พ", "พ", "ศ", "ส"]
                    },
                    months: {
                        names: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""],
                        namesAbbr: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "'วัน'dddd'ที่' d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "'วัน'dddd'ที่' d MMMM yyyy H:mm",
                        F: "'วัน'dddd'ที่' d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tr": ["tr", "default", {
            name: "tr",
            englishName: "Turkish",
            nativeName: "Türkçe",
            language: "tr",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "TL"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"],
                        namesAbbr: ["Paz", "Pzt", "Sal", "Çar", "Per", "Cum", "Cmt"],
                        namesShort: ["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"]
                    },
                    months: {
                        names: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık", ""],
                        namesAbbr: ["Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dd MMMM yyyy dddd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy dddd HH:mm",
                        F: "dd MMMM yyyy dddd HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ur": ["ur", "default", {
            name: "ur",
            englishName: "Urdu",
            nativeName: "اُردو",
            language: "ur",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["$n-", "$n"],
                    symbol: "Rs"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"],
                        namesAbbr: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"],
                        namesShort: ["ا", "پ", "م", "ب", "ج", "ج", "ه"]
                    },
                    months: {
                        names: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""],
                        namesAbbr: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""]
                    },
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        f: "dd MMMM, yyyy h:mm tt",
                        F: "dd MMMM, yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                }
            }
        }],
    "id": ["id", "default", {
            name: "id",
            englishName: "Indonesian",
            nativeName: "Bahasa Indonesia",
            language: "id",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    decimals: 0,
                    ",": ".",
                    ".": ",",
                    symbol: "Rp"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"],
                        namesAbbr: ["Minggu", "Sen", "Sel", "Rabu", "Kamis", "Jumat", "Sabtu"],
                        namesShort: ["M", "S", "S", "R", "K", "J", "S"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "Nopember", "Desember", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agust", "Sep", "Okt", "Nop", "Des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM yyyy H:mm",
                        F: "dd MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "uk": ["uk", "default", {
            name: "uk",
            englishName: "Ukrainian",
            nativeName: "українська",
            language: "uk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "₴"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["неділя", "понеділок", "вівторок", "середа", "четвер", "п'ятниця", "субота"],
                        namesAbbr: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                        namesShort: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"]
                    },
                    months: {
                        names: ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень", ""],
                        namesAbbr: ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру", ""]
                    },
                    monthsGenitive: {
                        names: ["січня", "лютого", "березня", "квітня", "травня", "червня", "липня", "серпня", "вересня", "жовтня", "листопада", "грудня", ""],
                        namesAbbr: ["січ", "лют", "бер", "кві", "тра", "чер", "лип", "сер", "вер", "жов", "лис", "гру", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy' р.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy' р.' H:mm",
                        F: "d MMMM yyyy' р.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy' р.'"
                    }
                }
            }
        }],
    "be": ["be", "default", {
            name: "be",
            englishName: "Belarusian",
            nativeName: "Беларускі",
            language: "be",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["нядзеля", "панядзелак", "аўторак", "серада", "чацвер", "пятніца", "субота"],
                        namesAbbr: ["нд", "пн", "аў", "ср", "чц", "пт", "сб"],
                        namesShort: ["нд", "пн", "аў", "ср", "чц", "пт", "сб"]
                    },
                    months: {
                        names: ["Студзень", "Люты", "Сакавік", "Красавік", "Май", "Чэрвень", "Ліпень", "Жнівень", "Верасень", "Кастрычнік", "Лістапад", "Снежань", ""],
                        namesAbbr: ["Сту", "Лют", "Сак", "Кра", "Май", "Чэр", "Ліп", "Жні", "Вер", "Кас", "Ліс", "Сне", ""]
                    },
                    monthsGenitive: {
                        names: ["студзеня", "лютага", "сакавіка", "красавіка", "мая", "чэрвеня", "ліпеня", "жніўня", "верасня", "кастрычніка", "лістапада", "снежня", ""],
                        namesAbbr: ["Сту", "Лют", "Сак", "Кра", "Май", "Чэр", "Ліп", "Жні", "Вер", "Кас", "Ліс", "Сне", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sl": ["sl", "default", {
            name: "sl",
            englishName: "Slovenian",
            nativeName: "slovenski",
            language: "sl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljek", "torek", "sreda", "četrtek", "petek", "sobota"],
                        namesAbbr: ["ned", "pon", "tor", "sre", "čet", "pet", "sob"],
                        namesShort: ["ne", "po", "to", "sr", "če", "pe", "so"]
                    },
                    months: {
                        names: ["januar", "februar", "marec", "april", "maj", "junij", "julij", "avgust", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "et": ["et", "default", {
            name: "et",
            englishName: "Estonian",
            nativeName: "eesti",
            language: "et",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pühapäev", "esmaspäev", "teisipäev", "kolmapäev", "neljapäev", "reede", "laupäev"],
                        namesAbbr: ["P", "E", "T", "K", "N", "R", "L"],
                        namesShort: ["P", "E", "T", "K", "N", "R", "L"]
                    },
                    months: {
                        names: ["jaanuar", "veebruar", "märts", "aprill", "mai", "juuni", "juuli", "august", "september", "oktoober", "november", "detsember", ""],
                        namesAbbr: ["jaan", "veebr", "märts", "apr", "mai", "juuni", "juuli", "aug", "sept", "okt", "nov", "dets", ""]
                    },
                    AM: ["EL", "el", "EL"],
                    PM: ["PL", "pl", "PL"],
                    patterns: {
                        d: "d.MM.yyyy",
                        D: "d. MMMM yyyy'. a.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy'. a.' H:mm",
                        F: "d. MMMM yyyy'. a.' H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy'. a.'"
                    }
                }
            }
        }],
    "lv": ["lv", "default", {
            name: "lv",
            englishName: "Latvian",
            nativeName: "latviešu",
            language: "lv",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "Ls"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["svētdiena", "pirmdiena", "otrdiena", "trešdiena", "ceturtdiena", "piektdiena", "sestdiena"],
                        namesAbbr: ["sv", "pr", "ot", "tr", "ce", "pk", "se"],
                        namesShort: ["sv", "pr", "ot", "tr", "ce", "pk", "se"]
                    },
                    months: {
                        names: ["janvāris", "februāris", "marts", "aprīlis", "maijs", "jūnijs", "jūlijs", "augusts", "septembris", "oktobris", "novembris", "decembris", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jūn", "jūl", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["janvārī", "februārī", "martā", "aprīlī", "maijā", "jūnijā", "jūlijā", "augustā", "septembrī", "oktobrī", "novembrī", "decembrī", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jūn", "jūl", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy.MM.dd.",
                        D: "dddd, yyyy'. gada 'd. MMMM",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, yyyy'. gada 'd. MMMM H:mm",
                        F: "dddd, yyyy'. gada 'd. MMMM H:mm:ss",
                        M: "d. MMMM",
                        Y: "yyyy. MMMM"
                    }
                }
            }
        }],
    "lt": ["lt", "default", {
            name: "lt",
            englishName: "Lithuanian",
            nativeName: "lietuvių",
            language: "lt",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Lt"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sekmadienis", "pirmadienis", "antradienis", "trečiadienis", "ketvirtadienis", "penktadienis", "šeštadienis"],
                        namesAbbr: ["Sk", "Pr", "An", "Tr", "Kt", "Pn", "Št"],
                        namesShort: ["S", "P", "A", "T", "K", "Pn", "Š"]
                    },
                    months: {
                        names: ["sausis", "vasaris", "kovas", "balandis", "gegužė", "birželis", "liepa", "rugpjūtis", "rugsėjis", "spalis", "lapkritis", "gruodis", ""],
                        namesAbbr: ["Sau", "Vas", "Kov", "Bal", "Geg", "Bir", "Lie", "Rgp", "Rgs", "Spl", "Lap", "Grd", ""]
                    },
                    monthsGenitive: {
                        names: ["sausio", "vasario", "kovo", "balandžio", "gegužės", "birželio", "liepos", "rugpjūčio", "rugsėjo", "spalio", "lapkričio", "gruodžio", ""],
                        namesAbbr: ["Sau", "Vas", "Kov", "Bal", "Geg", "Bir", "Lie", "Rgp", "Rgs", "Spl", "Lap", "Grd", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy.MM.dd",
                        D: "yyyy 'm.' MMMM d 'd.'",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'm.' MMMM d 'd.' HH:mm",
                        F: "yyyy 'm.' MMMM d 'd.' HH:mm:ss",
                        M: "MMMM d 'd.'",
                        Y: "yyyy 'm.' MMMM"
                    }
                }
            }
        }],
    "tg": ["tg", "default", {
            name: "tg",
            englishName: "Tajik",
            nativeName: "Тоҷикӣ",
            language: "tg",
            numberFormat: {
                ",": " ",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ";",
                    symbol: "т.р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    days: {
                        names: ["Яш", "Душанбе", "Сешанбе", "Чоршанбе", "Панҷшанбе", "Ҷумъа", "Шанбе"],
                        namesAbbr: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"],
                        namesShort: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"]
                    },
                    months: {
                        names: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["январи", "феврали", "марти", "апрели", "маи", "июни", "июли", "августи", "сентябри", "октябри", "ноябри", "декабри", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fa": ["fa", "default", {
            name: "fa",
            englishName: "Persian",
            nativeName: "فارسى",
            language: "fa",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    ".": "/",
                    symbol: "ريال"
                }
            },
            calendars: {
                standard: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["يكشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["يكشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["ژانويه", "فوريه", "مارس", "آوريل", "مى", "ژوئن", "ژوئيه", "اوت", "سپتامبر", "اُكتبر", "نوامبر", "دسامبر", ""],
                        namesAbbr: ["ژانويه", "فوريه", "مارس", "آوريل", "مى", "ژوئن", "ژوئيه", "اوت", "سپتامبر", "اُكتبر", "نوامبر", "دسامبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "yyyy/MM/dd",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "yyyy/MM/dd hh:mm tt",
                        F: "yyyy/MM/dd hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "vi": ["vi", "default", {
            name: "vi",
            englishName: "Vietnamese",
            nativeName: "Tiếng Việt",
            language: "vi",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "₫"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"],
                        namesAbbr: ["CN", "Hai", "Ba", "Tư", "Năm", "Sáu", "Bảy"],
                        namesShort: ["C", "H", "B", "T", "N", "S", "B"]
                    },
                    months: {
                        names: ["Tháng Giêng", "Tháng Hai", "Tháng Ba", "Tháng Tư", "Tháng Năm", "Tháng Sáu", "Tháng Bảy", "Tháng Tám", "Tháng Chín", "Tháng Mười", "Tháng Mười Một", "Tháng Mười Hai", ""],
                        namesAbbr: ["Thg1", "Thg2", "Thg3", "Thg4", "Thg5", "Thg6", "Thg7", "Thg8", "Thg9", "Thg10", "Thg11", "Thg12", ""]
                    },
                    AM: ["SA", "sa", "SA"],
                    PM: ["CH", "ch", "CH"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        f: "dd MMMM yyyy h:mm tt",
                        F: "dd MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hy": ["hy", "default", {
            name: "hy",
            englishName: "Armenian",
            nativeName: "Հայերեն",
            language: "hy",
            numberFormat: {
                currency: {
                    pattern: ["-n $", "n $"],
                    symbol: "դր."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Կիրակի", "Երկուշաբթի", "Երեքշաբթի", "Չորեքշաբթի", "Հինգշաբթի", "ՈՒրբաթ", "Շաբաթ"],
                        namesAbbr: ["Կիր", "Երկ", "Երք", "Չրք", "Հնգ", "ՈՒր", "Շբթ"],
                        namesShort: ["Կ", "Ե", "Ե", "Չ", "Հ", "Ո", "Շ"]
                    },
                    months: {
                        names: ["Հունվար", "Փետրվար", "Մարտ", "Ապրիլ", "Մայիս", "Հունիս", "Հուլիս", "Օգոստոս", "Սեպտեմբեր", "Հոկտեմբեր", "Նոյեմբեր", "Դեկտեմբեր", ""],
                        namesAbbr: ["ՀՆՎ", "ՓՏՎ", "ՄՐՏ", "ԱՊՐ", "ՄՅՍ", "ՀՆՍ", "ՀԼՍ", "ՕԳՍ", "ՍԵՊ", "ՀՈԿ", "ՆՈՅ", "ԴԵԿ", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM, yyyy H:mm",
                        F: "d MMMM, yyyy H:mm:ss",
                        M: "d MMMM"
                    }
                }
            }
        }],
    "az": ["az", "default", {
            name: "az",
            englishName: "Azeri",
            nativeName: "Azərbaycan­ılı",
            language: "az",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "man."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Bazar", "Bazar ertəsi", "Çərşənbə axşamı", "Çərşənbə", "Cümə axşamı", "Cümə", "Şənbə"],
                        namesAbbr: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"],
                        namesShort: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"]
                    },
                    months: {
                        names: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "İyun", "İyul", "Avgust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    monthsGenitive: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "eu": ["eu", "default", {
            name: "eu",
            englishName: "Basque",
            nativeName: "euskara",
            language: "eu",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["igandea", "astelehena", "asteartea", "asteazkena", "osteguna", "ostirala", "larunbata"],
                        namesAbbr: ["ig.", "al.", "as.", "az.", "og.", "or.", "lr."],
                        namesShort: ["ig", "al", "as", "az", "og", "or", "lr"]
                    },
                    months: {
                        names: ["urtarrila", "otsaila", "martxoa", "apirila", "maiatza", "ekaina", "uztaila", "abuztua", "iraila", "urria", "azaroa", "abendua", ""],
                        namesAbbr: ["urt.", "ots.", "mar.", "api.", "mai.", "eka.", "uzt.", "abu.", "ira.", "urr.", "aza.", "abe.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dddd, yyyy.'eko' MMMM'k 'd",
                        t: "HH:mm",
                        T: "H:mm:ss",
                        f: "dddd, yyyy.'eko' MMMM'k 'd HH:mm",
                        F: "dddd, yyyy.'eko' MMMM'k 'd H:mm:ss",
                        Y: "yyyy.'eko' MMMM"
                    }
                }
            }
        }],
    "hsb": ["hsb", "default", {
            name: "hsb",
            englishName: "Upper Sorbian",
            nativeName: "hornjoserbšćina",
            language: "hsb",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["njedźela", "póndźela", "wutora", "srjeda", "štwórtk", "pjatk", "sobota"],
                        namesAbbr: ["nje", "pón", "wut", "srj", "štw", "pja", "sob"],
                        namesShort: ["n", "p", "w", "s", "š", "p", "s"]
                    },
                    months: {
                        names: ["januar", "februar", "měrc", "apryl", "meja", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "mej", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["januara", "februara", "měrca", "apryla", "meje", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "mej", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "po Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "dddd, 'dnja' d. MMMM yyyy",
                        t: "H.mm 'hodź.'",
                        T: "H:mm:ss",
                        f: "dddd, 'dnja' d. MMMM yyyy H.mm 'hodź.'",
                        F: "dddd, 'dnja' d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "mk": ["mk", "default", {
            name: "mk",
            englishName: "Macedonian (FYROM)",
            nativeName: "македонски јазик",
            language: "mk",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "ден."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недела", "понеделник", "вторник", "среда", "четврток", "петок", "сабота"],
                        namesAbbr: ["нед", "пон", "втр", "срд", "чет", "пет", "саб"],
                        namesShort: ["не", "по", "вт", "ср", "че", "пе", "са"]
                    },
                    months: {
                        names: ["јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември", ""],
                        namesAbbr: ["јан", "фев", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "ное", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, dd MMMM yyyy HH:mm",
                        F: "dddd, dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tn": ["tn", "default", {
            name: "tn",
            englishName: "Setswana",
            nativeName: "Setswana",
            language: "tn",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Latshipi", "Mosupologo", "Labobedi", "Laboraro", "Labone", "Labotlhano", "Lamatlhatso"],
                        namesAbbr: ["Ltp.", "Mos.", "Lbd.", "Lbr.", "Lbn.", "Lbt.", "Lmt."],
                        namesShort: ["Lp", "Ms", "Lb", "Lr", "Ln", "Lt", "Lm"]
                    },
                    months: {
                        names: ["Ferikgong", "Tlhakole", "Mopitloe", "Moranang", "Motsheganong", "Seetebosigo", "Phukwi", "Phatwe", "Lwetse", "Diphalane", "Ngwanatsele", "Sedimothole", ""],
                        namesAbbr: ["Fer.", "Tlhak.", "Mop.", "Mor.", "Motsh.", "Seet.", "Phukw.", "Phatw.", "Lwets.", "Diph.", "Ngwan.", "Sed.", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "xh": ["xh", "default", {
            name: "xh",
            englishName: "isiXhosa",
            nativeName: "isiXhosa",
            language: "xh",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["iCawa", "uMvulo", "uLwesibini", "uLwesithathu", "uLwesine", "uLwesihlanu", "uMgqibelo"],
                        namesShort: ["Ca", "Mv", "Lb", "Lt", "Ln", "Lh", "Mg"]
                    },
                    months: {
                        names: ["Mqungu", "Mdumba", "Kwindla", "Tshazimpuzi", "Canzibe", "Silimela", "Khala", "Thupha", "Msintsi", "Dwarha", "Nkanga", "Mnga", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "zu": ["zu", "default", {
            name: "zu",
            englishName: "isiZulu",
            nativeName: "isiZulu",
            language: "zu",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["iSonto", "uMsombuluko", "uLwesibili", "uLwesithathu", "uLwesine", "uLwesihlanu", "uMgqibelo"],
                        namesAbbr: ["Son.", "Mso.", "Bi.", "Tha.", "Ne.", "Hla.", "Mgq."]
                    },
                    months: {
                        names: ["uMasingana", "uNhlolanja", "uNdasa", "uMbaso", "uNhlaba", "uNhlangulana", "uNtulikazi", "uNcwaba", "uMandulo", "uMfumfu", "uLwezi", "uZibandlela", ""],
                        namesAbbr: ["Mas.", "Nhlo.", "Nda.", "Mba.", "Nhla.", "Nhlang.", "Ntu.", "Ncwa.", "Man.", "Mfu.", "Lwe.", "Zib.", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "af": ["af", "default", {
            name: "af",
            englishName: "Afrikaans",
            nativeName: "Afrikaans",
            language: "af",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"],
                        namesAbbr: ["Son", "Maan", "Dins", "Woen", "Dond", "Vry", "Sat"],
                        namesShort: ["So", "Ma", "Di", "Wo", "Do", "Vr", "Sa"]
                    },
                    months: {
                        names: ["Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ka": ["ka", "default", {
            name: "ka",
            englishName: "Georgian",
            nativeName: "ქართული",
            language: "ka",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Lari"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"],
                        namesAbbr: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"],
                        namesShort: ["კ", "ო", "ს", "ო", "ხ", "პ", "შ"]
                    },
                    months: {
                        names: ["იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი", ""],
                        namesAbbr: ["იან", "თებ", "მარ", "აპრ", "მაის", "ივნ", "ივლ", "აგვ", "სექ", "ოქტ", "ნოემ", "დეკ", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "yyyy 'წლის' dd MM, dddd",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'წლის' dd MM, dddd H:mm",
                        F: "yyyy 'წლის' dd MM, dddd H:mm:ss",
                        M: "dd MM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fo": ["fo", "default", {
            name: "fo",
            englishName: "Faroese",
            nativeName: "føroyskt",
            language: "fo",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["sunnudagur", "mánadagur", "týsdagur", "mikudagur", "hósdagur", "fríggjadagur", "leygardagur"],
                        namesAbbr: ["sun", "mán", "týs", "mik", "hós", "frí", "leyg"],
                        namesShort: ["su", "má", "tý", "mi", "hó", "fr", "ley"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "apríl", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hi": ["hi", "default", {
            name: "hi",
            englishName: "Hindi",
            nativeName: "हिंदी",
            language: "hi",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["रवि.", "सोम.", "मंगल.", "बुध.", "गुरु.", "शुक्र.", "शनि."],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""],
                        namesAbbr: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""]
                    },
                    AM: ["पूर्वाह्न", "पूर्वाह्न", "पूर्वाह्न"],
                    PM: ["अपराह्न", "अपराह्न", "अपराह्न"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "mt": ["mt", "default", {
            name: "mt",
            englishName: "Maltese",
            nativeName: "Malti",
            language: "mt",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Il-Ħadd", "It-Tnejn", "It-Tlieta", "L-Erbgħa", "Il-Ħamis", "Il-Ġimgħa", "Is-Sibt"],
                        namesAbbr: ["Ħad", "Tne", "Tli", "Erb", "Ħam", "Ġim", "Sib"],
                        namesShort: ["I", "I", "I", "L", "I", "I", "I"]
                    },
                    months: {
                        names: ["Jannar", "Frar", "Marzu", "April", "Mejju", "Ġunju", "Lulju", "Awissu", "Settembru", "Ottubru", "Novembru", "Diċembru", ""],
                        namesAbbr: ["Jan", "Fra", "Mar", "Apr", "Mej", "Ġun", "Lul", "Awi", "Set", "Ott", "Nov", "Diċ", ""]
                    },
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' ta\\' 'MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' ta\\' 'MMMM yyyy HH:mm",
                        F: "dddd, d' ta\\' 'MMMM yyyy HH:mm:ss",
                        M: "d' ta\\' 'MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "se": ["se", "default", {
            name: "se",
            englishName: "Sami (Northern)",
            nativeName: "davvisámegiella",
            language: "se",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sotnabeaivi", "vuossárga", "maŋŋebárga", "gaskavahkku", "duorastat", "bearjadat", "lávvardat"],
                        namesAbbr: ["sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"],
                        namesShort: ["s", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđajagimánu", "guovvamánu", "njukčamánu", "cuoŋománu", "miessemánu", "geassemánu", "suoidnemánu", "borgemánu", "čakčamánu", "golggotmánu", "skábmamánu", "juovlamánu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ga": ["ga", "default", {
            name: "ga",
            englishName: "Irish",
            nativeName: "Gaeilge",
            language: "ga",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Dé Domhnaigh", "Dé Luain", "Dé Máirt", "Dé Céadaoin", "Déardaoin", "Dé hAoine", "Dé Sathairn"],
                        namesAbbr: ["Domh", "Luan", "Máir", "Céad", "Déar", "Aoi", "Sath"],
                        namesShort: ["Do", "Lu", "Má", "Cé", "De", "Ao", "Sa"]
                    },
                    months: {
                        names: ["Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", "Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig", ""],
                        namesAbbr: ["Ean", "Feabh", "Már", "Aib", "Bealt", "Meith", "Iúil", "Lún", "M.Fómh", "D.Fómh", "Samh", "Noll", ""]
                    },
                    AM: ["r.n.", "r.n.", "R.N."],
                    PM: ["i.n.", "i.n.", "I.N."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ms": ["ms", "default", {
            name: "ms",
            englishName: "Malay",
            nativeName: "Bahasa Melayu",
            language: "ms",
            numberFormat: {
                currency: {
                    decimals: 0,
                    symbol: "RM"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesAbbr: ["Ahad", "Isnin", "Sel", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesShort: ["A", "I", "S", "R", "K", "J", "S"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""],
                        namesAbbr: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogos", "Sept", "Okt", "Nov", "Dis", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM yyyy H:mm",
                        F: "dd MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "kk": ["kk", "default", {
            name: "kk",
            englishName: "Kazakh",
            nativeName: "Қазақ",
            language: "kk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    ",": " ",
                    ".": "-",
                    symbol: "Т"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Жексенбі", "Дүйсенбі", "Сейсенбі", "Сәрсенбі", "Бейсенбі", "Жұма", "Сенбі"],
                        namesAbbr: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"],
                        namesShort: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"]
                    },
                    months: {
                        names: ["қаңтар", "ақпан", "наурыз", "сәуір", "мамыр", "маусым", "шілде", "тамыз", "қыркүйек", "қазан", "қараша", "желтоқсан", ""],
                        namesAbbr: ["Қаң", "Ақп", "Нау", "Сәу", "Мам", "Мау", "Шіл", "Там", "Қыр", "Қаз", "Қар", "Жел", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy 'ж.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'ж.' H:mm",
                        F: "d MMMM yyyy 'ж.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ky": ["ky", "default", {
            name: "ky",
            englishName: "Kyrgyz",
            nativeName: "Кыргыз",
            language: "ky",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": "-",
                    symbol: "сом"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Жекшемби", "Дүйшөмбү", "Шейшемби", "Шаршемби", "Бейшемби", "Жума", "Ишемби"],
                        namesAbbr: ["Жш", "Дш", "Шш", "Шр", "Бш", "Жм", "Иш"],
                        namesShort: ["Жш", "Дш", "Шш", "Шр", "Бш", "Жм", "Иш"]
                    },
                    months: {
                        names: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d'-'MMMM yyyy'-ж.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d'-'MMMM yyyy'-ж.' H:mm",
                        F: "d'-'MMMM yyyy'-ж.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy'-ж.'"
                    }
                }
            }
        }],
    "sw": ["sw", "default", {
            name: "sw",
            englishName: "Kiswahili",
            nativeName: "Kiswahili",
            language: "sw",
            numberFormat: {
                currency: {
                    symbol: "S"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"],
                        namesAbbr: ["Jumap.", "Jumat.", "Juman.", "Jumat.", "Alh.", "Iju.", "Jumam."],
                        namesShort: ["P", "T", "N", "T", "A", "I", "M"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Decemba", ""],
                        namesAbbr: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Dec", ""]
                    }
                }
            }
        }],
    "tk": ["tk", "default", {
            name: "tk",
            englishName: "Turkmen",
            nativeName: "türkmençe",
            language: "tk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "m."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Duşenbe", "Sişenbe", "Çarşenbe", "Penşenbe", "Anna", "Şenbe", "Ýekşenbe"],
                        namesAbbr: ["Db", "Sb", "Çb", "Pb", "An", "Şb", "Ýb"],
                        namesShort: ["D", "S", "Ç", "P", "A", "Ş", "Ý"]
                    },
                    months: {
                        names: ["Ýanwar", "Fewral", "Mart", "Aprel", "Maý", "lýun", "lýul", "Awgust", "Sentýabr", "Oktýabr", "Noýabr", "Dekabr", ""],
                        namesAbbr: ["Ýan", "Few", "Mart", "Apr", "Maý", "lýun", "lýul", "Awg", "Sen", "Okt", "Not", "Dek", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "yyyy 'ý.' MMMM d",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'ý.' MMMM d H:mm",
                        F: "yyyy 'ý.' MMMM d H:mm:ss",
                        Y: "yyyy 'ý.' MMMM"
                    }
                }
            }
        }],
    "uz": ["uz", "default", {
            name: "uz",
            englishName: "Uzbek",
            nativeName: "U'zbek",
            language: "uz",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    decimals: 0,
                    ",": " ",
                    ".": ",",
                    symbol: "so'm"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["yakshanba", "dushanba", "seshanba", "chorshanba", "payshanba", "juma", "shanba"],
                        namesAbbr: ["yak.", "dsh.", "sesh.", "chr.", "psh.", "jm.", "sh."],
                        namesShort: ["ya", "d", "s", "ch", "p", "j", "sh"]
                    },
                    months: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM yyyy",
                        D: "yyyy 'yil' d-MMMM",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'yil' d-MMMM HH:mm",
                        F: "yyyy 'yil' d-MMMM HH:mm:ss",
                        M: "d-MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tt": ["tt", "default", {
            name: "tt",
            englishName: "Tatar",
            nativeName: "Татар",
            language: "tt",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Якшәмбе", "Дүшәмбе", "Сишәмбе", "Чәршәмбе", "Пәнҗешәмбе", "Җомга", "Шимбә"],
                        namesAbbr: ["Якш", "Дүш", "Сиш", "Чәрш", "Пәнҗ", "Җом", "Шим"],
                        namesShort: ["Я", "Д", "С", "Ч", "П", "Җ", "Ш"]
                    },
                    months: {
                        names: ["Гыйнвар", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["Гыйн.", "Фев.", "Мар.", "Апр.", "Май", "Июнь", "Июль", "Авг.", "Сен.", "Окт.", "Нояб.", "Дек.", ""]
                    },
                    monthsGenitive: {
                        names: ["Гыйнварның", "Февральнең", "Мартның", "Апрельнең", "Майның", "Июньнең", "Июльнең", "Августның", "Сентябрьның", "Октябрьның", "Ноябрьның", "Декабрьның", ""],
                        namesAbbr: ["Гыйн.-ның", "Фев.-нең", "Мар.-ның", "Апр.-нең", "Майның", "Июньнең", "Июльнең", "Авг.-ның", "Сен.-ның", "Окт.-ның", "Нояб.-ның", "Дек.-ның", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "bn": ["bn", "default", {
            name: "bn",
            englishName: "Bengali",
            nativeName: "বাংলা",
            language: "bn",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-%n", "%n"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "টা"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    ":": ".",
                    firstDay: 1,
                    days: {
                        names: ["রবিবার", "সোমবার", "মঙ্গলবার", "বুধবার", "বৃহস্পতিবার", "শুক্রবার", "শনিবার"],
                        namesAbbr: ["রবি.", "সোম.", "মঙ্গল.", "বুধ.", "বৃহস্পতি.", "শুক্র.", "শনি."],
                        namesShort: ["র", "স", "ম", "ব", "ব", "শ", "শ"]
                    },
                    months: {
                        names: ["জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""],
                        namesAbbr: ["জানু.", "ফেব্রু.", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগ.", "সেপ্টে.", "অক্টো.", "নভে.", "ডিসে.", ""]
                    },
                    AM: ["পুর্বাহ্ন", "পুর্বাহ্ন", "পুর্বাহ্ন"],
                    PM: ["অপরাহ্ন", "অপরাহ্ন", "অপরাহ্ন"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH.mm",
                        T: "HH.mm.ss",
                        f: "dd MMMM yyyy HH.mm",
                        F: "dd MMMM yyyy HH.mm.ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "pa": ["pa", "default", {
            name: "pa",
            englishName: "Punjabi",
            nativeName: "ਪੰਜਾਬੀ",
            language: "pa",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ਰੁ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ਐਤਵਾਰ", "ਸੋਮਵਾਰ", "ਮੰਗਲਵਾਰ", "ਬੁੱਧਵਾਰ", "ਵੀਰਵਾਰ", "ਸ਼ੁੱਕਰਵਾਰ", "ਸ਼ਨਿੱਚਰਵਾਰ"],
                        namesAbbr: ["ਐਤ.", "ਸੋਮ.", "ਮੰਗਲ.", "ਬੁੱਧ.", "ਵੀਰ.", "ਸ਼ੁਕਰ.", "ਸ਼ਨਿੱਚਰ."],
                        namesShort: ["ਐ", "ਸ", "ਮ", "ਬ", "ਵ", "ਸ਼", "ਸ਼"]
                    },
                    months: {
                        names: ["ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""],
                        namesAbbr: ["ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""]
                    },
                    AM: ["ਸਵੇਰ", "ਸਵੇਰ", "ਸਵੇਰ"],
                    PM: ["ਸ਼ਾਮ", "ਸ਼ਾਮ", "ਸ਼ਾਮ"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy dddd",
                        t: "tt hh:mm",
                        T: "tt hh:mm:ss",
                        f: "dd MMMM yyyy dddd tt hh:mm",
                        F: "dd MMMM yyyy dddd tt hh:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "gu": ["gu", "default", {
            name: "gu",
            englishName: "Gujarati",
            nativeName: "ગુજરાતી",
            language: "gu",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "રૂ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["રવિવાર", "સોમવાર", "મંગળવાર", "બુધવાર", "ગુરુવાર", "શુક્રવાર", "શનિવાર"],
                        namesAbbr: ["રવિ", "સોમ", "મંગળ", "બુધ", "ગુરુ", "શુક્ર", "શનિ"],
                        namesShort: ["ર", "સ", "મ", "બ", "ગ", "શ", "શ"]
                    },
                    months: {
                        names: ["જાન્યુઆરી", "ફેબ્રુઆરી", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટેમ્બર", "ઑક્ટ્બર", "નવેમ્બર", "ડિસેમ્બર", ""],
                        namesAbbr: ["જાન્યુ", "ફેબ્રુ", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટે", "ઑક્ટો", "નવે", "ડિસે", ""]
                    },
                    AM: ["પૂર્વ મધ્યાહ્ન", "પૂર્વ મધ્યાહ્ન", "પૂર્વ મધ્યાહ્ન"],
                    PM: ["ઉત્તર મધ્યાહ્ન", "ઉત્તર મધ્યાહ્ન", "ઉત્તર મધ્યાહ્ન"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "or": ["or", "default", {
            name: "or",
            englishName: "Oriya",
            nativeName: "ଓଡ଼ିଆ",
            language: "or",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ଟ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["ରବିବାର", "ସୋମବାର", "ମଙ୍ଗଳବାର", "ବୁଧବାର", "ଗୁରୁବାର", "ଶୁକ୍ରବାର", "ଶନିବାର"],
                        namesAbbr: ["ରବି.", "ସୋମ.", "ମଙ୍ଗଳ.", "ବୁଧ.", "ଗୁରୁ.", "ଶୁକ୍ର.", "ଶନି."],
                        namesShort: ["ର", "ସୋ", "ମ", "ବୁ", "ଗୁ", "ଶୁ", "ଶ"]
                    },
                    months: {
                        names: ["ଜାନୁୟାରୀ", "ଫ୍ରେବୃୟାରୀ", "ମାର୍ଚ୍ଚ", "ଏପ୍ରିଲ୍‌", "ମେ", "ଜୁନ୍‌", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "(ଡିସେମ୍ବର", ""],
                        namesAbbr: ["ଜାନୁୟାରୀ", "ଫ୍ରେବୃୟାରୀ", "ମାର୍ଚ୍ଚ", "ଏପ୍ରିଲ୍‌", "ମେ", "ଜୁନ୍‌", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "(ଡିସେମ୍ବର", ""]
                    },
                    eras: [{ "name": "ଖ୍ରୀଷ୍ଟାବ୍ଦ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ta": ["ta", "default", {
            name: "ta",
            englishName: "Tamil",
            nativeName: "தமிழ்",
            language: "ta",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ரூ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ஞாயிற்றுக்கிழமை", "திங்கள்கிழமை", "செவ்வாய்கிழமை", "புதன்கிழமை", "வியாழக்கிழமை", "வெள்ளிக்கிழமை", "சனிக்கிழமை"],
                        namesAbbr: ["ஞாயிறு", "திங்கள்", "செவ்வாய்", "புதன்", "வியாழன்", "வெள்ளி", "சனி"],
                        namesShort: ["ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"]
                    },
                    months: {
                        names: ["ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""],
                        namesAbbr: ["ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""]
                    },
                    AM: ["காலை", "காலை", "காலை"],
                    PM: ["மாலை", "மாலை", "மாலை"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "te": ["te", "default", {
            name: "te",
            englishName: "Telugu",
            nativeName: "తెలుగు",
            language: "te",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "రూ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ఆదివారం", "సోమవారం", "మంగళవారం", "బుధవారం", "గురువారం", "శుక్రవారం", "శనివారం"],
                        namesAbbr: ["ఆది.", "సోమ.", "మంగళ.", "బుధ.", "గురు.", "శుక్ర.", "శని."],
                        namesShort: ["ఆ", "సో", "మం", "బు", "గు", "శు", "శ"]
                    },
                    months: {
                        names: ["జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జూలై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""],
                        namesAbbr: ["జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జూలై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""]
                    },
                    AM: ["పూర్వాహ్న", "పూర్వాహ్న", "పూర్వాహ్న"],
                    PM: ["అపరాహ్న", "అపరాహ్న", "అపరాహ్న"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "kn": ["kn", "default", {
            name: "kn",
            englishName: "Kannada",
            nativeName: "ಕನ್ನಡ",
            language: "kn",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ರೂ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ಭಾನುವಾರ", "ಸೋಮವಾರ", "ಮಂಗಳವಾರ", "ಬುಧವಾರ", "ಗುರುವಾರ", "ಶುಕ್ರವಾರ", "ಶನಿವಾರ"],
                        namesAbbr: ["ಭಾನು.", "ಸೋಮ.", "ಮಂಗಳ.", "ಬುಧ.", "ಗುರು.", "ಶುಕ್ರ.", "ಶನಿ."],
                        namesShort: ["ರ", "ಸ", "ಮ", "ಬ", "ಗ", "ಶ", "ಶ"]
                    },
                    months: {
                        names: ["ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಎಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""],
                        namesAbbr: ["ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಎಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""]
                    },
                    AM: ["ಪೂರ್ವಾಹ್ನ", "ಪೂರ್ವಾಹ್ನ", "ಪೂರ್ವಾಹ್ನ"],
                    PM: ["ಅಪರಾಹ್ನ", "ಅಪರಾಹ್ನ", "ಅಪರಾಹ್ನ"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ml": ["ml", "default", {
            name: "ml",
            englishName: "Malayalam",
            nativeName: "മലയാളം",
            language: "ml",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-%n", "%n"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ക"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    ":": ".",
                    firstDay: 1,
                    days: {
                        names: ["ഞായറാഴ്ച", "തിങ്കളാഴ്ച", "ചൊവ്വാഴ്ച", "ബുധനാഴ്ച", "വ്യാഴാഴ്ച", "വെള്ളിയാഴ്ച", "ശനിയാഴ്ച"],
                        namesAbbr: ["ഞായർ.", "തിങ്കൾ.", "ചൊവ്വ.", "ബുധൻ.", "വ്യാഴം.", "വെള്ളി.", "ശനി."],
                        namesShort: ["ഞ", "ത", "ച", "ബ", "വ", "വെ", "ശ"]
                    },
                    months: {
                        names: ["ജനുവരി", "ഫെബ്റുവരി", "മാറ്ച്ച്", "ഏപ്റില്", "മെയ്", "ജൂണ്", "ജൂലൈ", "ഓഗസ്ററ്", "സെപ്ററംബറ്", "ഒക്ടോബറ്", "നവംബറ്", "ഡിസംബറ്", ""],
                        namesAbbr: ["ജനുവരി", "ഫെബ്റുവരി", "മാറ്ച്ച്", "ഏപ്റില്", "മെയ്", "ജൂണ്", "ജൂലൈ", "ഓഗസ്ററ്", "സെപ്ററംബറ്", "ഒക്ടോബറ്", "നവംബറ്", "ഡിസംബറ്", ""]
                    },
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH.mm",
                        T: "HH.mm.ss",
                        f: "dd MMMM yyyy HH.mm",
                        F: "dd MMMM yyyy HH.mm.ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "as": ["as", "default", {
            name: "as",
            englishName: "Assamese",
            nativeName: "অসমীয়া",
            language: "as",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "n$"],
                    groupSizes: [3, 2],
                    symbol: "ট"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["সোমবাৰ", "মঙ্গলবাৰ", "বুধবাৰ", "বৃহস্পতিবাৰ", "শুক্রবাৰ", "শনিবাৰ", "ৰবিবাৰ"],
                        namesAbbr: ["সোম.", "মঙ্গল.", "বুধ.", "বৃহ.", "শুক্র.", "শনি.", "ৰবি."],
                        namesShort: ["সো", "ম", "বু", "বৃ", "শু", "শ", "র"]
                    },
                    months: {
                        names: ["জানুৱাৰী", "ফেব্রুৱাৰী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টেম্বর", "অক্টোবর", "নবেম্বর", "ডিচেম্বর", ""],
                        namesAbbr: ["জানু", "ফেব্রু", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টে", "অক্টো", "নবে", "ডিচে", ""]
                    },
                    AM: ["ৰাতিপু", "ৰাতিপু", "ৰাতিপু"],
                    PM: ["আবেলি", "আবেলি", "আবেলি"],
                    eras: [{ "name": "খ্রীষ্টাব্দ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "yyyy,MMMM dd, dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "yyyy,MMMM dd, dddd tt h:mm",
                        F: "yyyy,MMMM dd, dddd tt h:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM,yy"
                    }
                }
            }
        }],
    "mr": ["mr", "default", {
            name: "mr",
            englishName: "Marathi",
            nativeName: "मराठी",
            language: "mr",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["रविवार", "सोमवार", "मंगळवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["रवि.", "सोम.", "मंगळ.", "बुध.", "गुरु.", "शुक्र.", "शनि."],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""],
                        namesAbbr: ["जाने.", "फेब्रु.", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टें.", "ऑक्टो.", "नोव्हें.", "डिसें.", ""]
                    },
                    AM: ["म.पू.", "म.पू.", "म.पू."],
                    PM: ["म.नं.", "म.नं.", "म.नं."],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "sa": ["sa", "default", {
            name: "sa",
            englishName: "Sanskrit",
            nativeName: "संस्कृत",
            language: "sa",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["रविवासरः", "सोमवासरः", "मङ्गलवासरः", "बुधवासरः", "गुरुवासरः", "शुक्रवासरः", "शनिवासरः"],
                        namesAbbr: ["रविवासरः", "सोमवासरः", "मङ्गलवासरः", "बुधवासरः", "गुरुवासरः", "शुक्रवासरः", "शनिवासरः"],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""],
                        namesAbbr: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""]
                    },
                    AM: ["पूर्वाह्न", "पूर्वाह्न", "पूर्वाह्न"],
                    PM: ["अपराह्न", "अपराह्न", "अपराह्न"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy dddd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy dddd HH:mm",
                        F: "dd MMMM yyyy dddd HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "mn": ["mn", "default", {
            name: "mn",
            englishName: "Mongolian",
            nativeName: "Монгол хэл",
            language: "mn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "₮"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Ням", "Даваа", "Мягмар", "Лхагва", "Пүрэв", "Баасан", "Бямба"],
                        namesAbbr: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"],
                        namesShort: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"]
                    },
                    months: {
                        names: ["1 дүгээр сар", "2 дугаар сар", "3 дугаар сар", "4 дүгээр сар", "5 дугаар сар", "6 дугаар сар", "7 дугаар сар", "8 дугаар сар", "9 дүгээр сар", "10 дугаар сар", "11 дүгээр сар", "12 дугаар сар", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    monthsGenitive: {
                        names: ["1 дүгээр сарын", "2 дугаар сарын", "3 дугаар сарын", "4 дүгээр сарын", "5 дугаар сарын", "6 дугаар сарын", "7 дугаар сарын", "8 дугаар сарын", "9 дүгээр сарын", "10 дугаар сарын", "11 дүгээр сарын", "12 дугаар сарын", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yy.MM.dd",
                        D: "yyyy 'оны' MMMM d",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'оны' MMMM d H:mm",
                        F: "yyyy 'оны' MMMM d H:mm:ss",
                        M: "d MMMM",
                        Y: "yyyy 'он' MMMM"
                    }
                }
            }
        }],
    "bo": ["bo", "default", {
            name: "bo",
            englishName: "Tibetan",
            nativeName: "བོད་ཡིག",
            language: "bo",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["གཟའ་ཉི་མ།", "གཟའ་ཟླ་བ།", "གཟའ་མིག་དམར།", "གཟའ་ལྷག་པ།", "གཟའ་ཕུར་བུ།", "གཟའ་པ་སངས།", "གཟའ་སྤེན་པ།"],
                        namesAbbr: ["ཉི་མ།", "ཟླ་བ།", "མིག་དམར།", "ལྷག་པ།", "ཕུར་བུ།", "པ་སངས།", "སྤེན་པ།"],
                        namesShort: ["༧", "༡", "༢", "༣", "༤", "༥", "༦"]
                    },
                    months: {
                        names: ["སྤྱི་ཟླ་དང་པོ།", "སྤྱི་ཟླ་གཉིས་པ།", "སྤྱི་ཟླ་གསུམ་པ།", "སྤྱི་ཟླ་བཞི་པ།", "སྤྱི་ཟླ་ལྔ་པ།", "སྤྱི་ཟླ་དྲུག་པ།", "སྤྱི་ཟླ་བདུན་པ།", "སྤྱི་ཟླ་བརྒྱད་པ།", "སྤྱི་ཟླ་དགུ་པ།", "སྤྱི་ཟླ་བཅུ་པོ།", "སྤྱི་ཟླ་བཅུ་གཅིག་པ།", "སྤྱི་ཟླ་བཅུ་གཉིས་པ།", ""],
                        namesAbbr: ["ཟླ་ ༡", "ཟླ་ ༢", "ཟླ་ ༣", "ཟླ་ ༤", "ཟླ་ ༥", "ཟླ་ ༦", "ཟླ་ ༧", "ཟླ་ ༨", "ཟླ་ ༩", "ཟླ་ ༡༠", "ཟླ་ ༡༡", "ཟླ་ ༡༢", ""]
                    },
                    AM: ["སྔ་དྲོ", "སྔ་དྲོ", "སྔ་དྲོ"],
                    PM: ["ཕྱི་དྲོ", "ཕྱི་དྲོ", "ཕྱི་དྲོ"],
                    eras: [{ "name": "སྤྱི་ལོ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ལོའི་ཟླ' M'ཚེས' d",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm",
                        F: "yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm:ss",
                        M: "'ཟླ་' M'ཚེས'd",
                        Y: "yyyy.M"
                    }
                }
            }
        }],
    "cy": ["cy", "default", {
            name: "cy",
            englishName: "Welsh",
            nativeName: "Cymraeg",
            language: "cy",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "£"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Dydd Sul", "Dydd Llun", "Dydd Mawrth", "Dydd Mercher", "Dydd Iau", "Dydd Gwener", "Dydd Sadwrn"],
                        namesAbbr: ["Sul", "Llun", "Maw", "Mer", "Iau", "Gwe", "Sad"],
                        namesShort: ["Su", "Ll", "Ma", "Me", "Ia", "Gw", "Sa"]
                    },
                    months: {
                        names: ["Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr", ""],
                        namesAbbr: ["Ion", "Chwe", "Maw", "Ebr", "Mai", "Meh", "Gor", "Aws", "Med", "Hyd", "Tach", "Rhag", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "km": ["km", "default", {
            name: "km",
            englishName: "Khmer",
            nativeName: "ខ្មែរ",
            language: "km",
            numberFormat: {
                pattern: ["- n"],
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    symbol: "៛"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["ថ្ងៃអាទិត្យ", "ថ្ងៃច័ន្ទ", "ថ្ងៃអង្គារ", "ថ្ងៃពុធ", "ថ្ងៃព្រហស្បតិ៍", "ថ្ងៃសុក្រ", "ថ្ងៃសៅរ៍"],
                        namesAbbr: ["អាទិ.", "ច.", "អ.", "ពុ", "ព្រហ.", "សុ.", "ស."],
                        namesShort: ["អា", "ច", "អ", "ពុ", "ព្", "សុ", "ស"]
                    },
                    months: {
                        names: ["មករា", "កុម្ភៈ", "មិនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ", ""],
                        namesAbbr: ["១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩", "១០", "១១", "១២", ""]
                    },
                    AM: ["ព្រឹក", "ព្រឹក", "ព្រឹក"],
                    PM: ["ល្ងាច", "ល្ងាច", "ល្ងាច"],
                    eras: [{ "name": "មុនគ.ស.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "d MMMM yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy H:mm tt",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "'ថ្ងៃទី' dd 'ខែ' MM",
                        Y: "'ខែ' MM 'ឆ្នាំ' yyyy"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ព្រឹក", "ព្រឹក", "ព្រឹក"],
                    PM: ["ល្ងាច", "ល្ងាច", "ល្ងាច"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm tt",
                        F: "dddd, MMMM dd, yyyy HH:mm:ss"
                    }
                }
            }
        }],
    "lo": ["lo", "default", {
            name: "lo",
            englishName: "Lao",
            nativeName: "ລາວ",
            language: "lo",
            numberFormat: {
                pattern: ["(n)"],
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["(n$)", "n$"],
                    groupSizes: [3, 0],
                    symbol: "₭"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["ວັນອາທິດ", "ວັນຈັນ", "ວັນອັງຄານ", "ວັນພຸດ", "ວັນພະຫັດ", "ວັນສຸກ", "ວັນເສົາ"],
                        namesAbbr: ["ອາທິດ", "ຈັນ", "ອັງຄານ", "ພຸດ", "ພະຫັດ", "ສຸກ", "ເສົາ"],
                        namesShort: ["ອ", "ຈ", "ອ", "ພ", "ພ", "ສ", "ເ"]
                    },
                    months: {
                        names: ["ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""],
                        namesAbbr: ["ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""]
                    },
                    AM: ["ເຊົ້າ", "ເຊົ້າ", "ເຊົ້າ"],
                    PM: ["ແລງ", "ແລງ", "ແລງ"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy H:mm tt",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gl": ["gl", "default", {
            name: "gl",
            englishName: "Galician",
            nativeName: "galego",
            language: "gl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "luns", "martes", "mércores", "xoves", "venres", "sábado"],
                        namesAbbr: ["dom", "luns", "mar", "mér", "xov", "ven", "sáb"],
                        namesShort: ["do", "lu", "ma", "mé", "xo", "ve", "sá"]
                    },
                    months: {
                        names: ["xaneiro", "febreiro", "marzo", "abril", "maio", "xuño", "xullo", "agosto", "setembro", "outubro", "novembro", "decembro", ""],
                        namesAbbr: ["xan", "feb", "mar", "abr", "maio", "xuñ", "xull", "ago", "set", "out", "nov", "dec", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "kok": ["kok", "default", {
            name: "kok",
            englishName: "Konkani",
            nativeName: "कोंकणी",
            language: "kok",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["आयतार", "सोमार", "मंगळार", "बुधवार", "बिरेस्तार", "सुक्रार", "शेनवार"],
                        namesAbbr: ["आय.", "सोम.", "मंगळ.", "बुध.", "बिरे.", "सुक्र.", "शेन."],
                        namesShort: ["आ", "स", "म", "ब", "ब", "स", "श"]
                    },
                    months: {
                        names: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोवेम्बर", "डिसेंबर", ""],
                        namesAbbr: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोवेम्बर", "डिसेंबर", ""]
                    },
                    AM: ["म.पू.", "म.पू.", "म.पू."],
                    PM: ["म.नं.", "म.नं.", "म.नं."],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "syr": ["syr", "default", {
            name: "syr",
            englishName: "Syriac",
            nativeName: "ܣܘܪܝܝܐ",
            language: "syr",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ل.س.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["ܚܕ ܒܫܒܐ", "ܬܪܝܢ ܒܫܒܐ", "ܬܠܬܐ ܒܫܒܐ", "ܐܪܒܥܐ ܒܫܒܐ", "ܚܡܫܐ ܒܫܒܐ", "ܥܪܘܒܬܐ", "ܫܒܬܐ"],
                        namesAbbr: ["܏ܐ ܏ܒܫ", "܏ܒ ܏ܒܫ", "܏ܓ ܏ܒܫ", "܏ܕ ܏ܒܫ", "܏ܗ ܏ܒܫ", "܏ܥܪܘܒ", "܏ܫܒ"],
                        namesShort: ["ܐ", "ܒ", "ܓ", "ܕ", "ܗ", "ܥ", "ܫ"]
                    },
                    months: {
                        names: ["ܟܢܘܢ ܐܚܪܝ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝ ܩܕܝܡ", "ܬܫܪܝ ܐܚܪܝ", "ܟܢܘܢ ܩܕܝܡ", ""],
                        namesAbbr: ["܏ܟܢ ܏ܒ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "܏ܬܫ ܏ܐ", "܏ܬܫ ܏ܒ", "܏ܟܢ ܏ܐ", ""]
                    },
                    AM: ["ܩ.ܛ", "ܩ.ܛ", "ܩ.ܛ"],
                    PM: ["ܒ.ܛ", "ܒ.ܛ", "ܒ.ܛ"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "si": ["si", "default", {
            name: "si",
            englishName: "Sinhala",
            nativeName: "සිංහල",
            language: "si",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    symbol: "රු."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ඉරිදා", "සඳුදා", "අඟහරුවාදා", "බදාදා", "බ්‍රහස්පතින්දා", "සිකුරාදා", "සෙනසුරාදා"],
                        namesAbbr: ["ඉරිදා", "සඳුදා", "කුජදා", "බුදදා", "ගුරුදා", "කිවිදා", "ශනිදා"],
                        namesShort: ["ඉ", "ස", "අ", "බ", "බ්‍ර", "සි", "සෙ"]
                    },
                    months: {
                        names: ["ජනවාරි", "පෙබරවාරි", "මාර්තු", "අ‌ප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අ‌ගෝස්තු", "සැප්තැම්බර්", "ඔක්තෝබර්", "නොවැම්බර්", "දෙසැම්බර්", ""],
                        namesAbbr: ["ජන.", "පෙබ.", "මාර්තු.", "අප්‍රේල්.", "මැයි.", "ජූනි.", "ජූලි.", "අගෝ.", "සැප්.", "ඔක්.", "නොවැ.", "දෙසැ.", ""]
                    },
                    AM: ["පෙ.ව.", "පෙ.ව.", "පෙ.ව."],
                    PM: ["ප.ව.", "ප.ව.", "ප.ව."],
                    eras: [{ "name": "ක්‍රි.ව.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy MMMM' මස 'dd' වැනිදා 'dddd",
                        f: "yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm tt",
                        F: "yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm:ss tt",
                        Y: "yyyy MMMM"
                    }
                }
            }
        }],
    "iu": ["iu", "default", {
            name: "iu",
            englishName: "Inuktitut",
            nativeName: "Inuktitut",
            language: "iu",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Naattiinguja", "Naggajjau", "Aippiq", "Pingatsiq", "Sitammiq", "Tallirmiq", "Sivataarvik"],
                        namesAbbr: ["Nat", "Nag", "Aip", "Pi", "Sit", "Tal", "Siv"],
                        namesShort: ["N", "N", "A", "P", "S", "T", "S"]
                    },
                    months: {
                        names: ["Jaannuari", "Viivvuari", "Maatsi", "Iipuri", "Mai", "Juuni", "Julai", "Aaggiisi", "Sitipiri", "Utupiri", "Nuvipiri", "Tisipiri", ""],
                        namesAbbr: ["Jan", "Viv", "Mas", "Ipu", "Mai", "Jun", "Jul", "Agi", "Sii", "Uut", "Nuv", "Tis", ""]
                    },
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "ddd, MMMM dd,yyyy",
                        f: "ddd, MMMM dd,yyyy h:mm tt",
                        F: "ddd, MMMM dd,yyyy h:mm:ss tt"
                    }
                }
            }
        }],
    "am": ["am", "default", {
            name: "am",
            englishName: "Amharic",
            nativeName: "አማርኛ",
            language: "am",
            numberFormat: {
                decimals: 1,
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    decimals: 1,
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "ETB"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["እሑድ", "ሰኞ", "ማክሰኞ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"],
                        namesAbbr: ["እሑድ", "ሰኞ", "ማክሰ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"],
                        namesShort: ["እ", "ሰ", "ማ", "ረ", "ሐ", "ዓ", "ቅ"]
                    },
                    months: {
                        names: ["ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕረል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክተውበር", "ኖቬምበር", "ዲሴምበር", ""],
                        namesAbbr: ["ጃንዩ", "ፌብሩ", "ማርች", "ኤፕረ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክተ", "ኖቬም", "ዲሴም", ""]
                    },
                    AM: ["ጡዋት", "ጡዋት", "ጡዋት"],
                    PM: ["ከሰዓት", "ከሰዓት", "ከሰዓት"],
                    eras: [{ "name": "ዓመተ  ምሕረት", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd '፣' MMMM d 'ቀን' yyyy",
                        f: "dddd '፣' MMMM d 'ቀን' yyyy h:mm tt",
                        F: "dddd '፣' MMMM d 'ቀን' yyyy h:mm:ss tt",
                        M: "MMMM d ቀን",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tzm": ["tzm", "default", {
            name: "tzm",
            englishName: "Tamazight",
            nativeName: "Tamazight",
            language: "tzm",
            numberFormat: {
                pattern: ["n-"],
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    symbol: "DZD"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 6,
                    days: {
                        names: ["Acer", "Arime", "Aram", "Ahad", "Amhadh", "Sem", "Sedh"],
                        namesAbbr: ["Ace", "Ari", "Ara", "Aha", "Amh", "Sem", "Sed"],
                        namesShort: ["Ac", "Ar", "Ar", "Ah", "Am", "Se", "Se"]
                    },
                    months: {
                        names: ["Yenayer", "Furar", "Maghres", "Yebrir", "Mayu", "Yunyu", "Yulyu", "Ghuct", "Cutenber", "Ktuber", "Wambir", "Dujanbir", ""],
                        namesAbbr: ["Yen", "Fur", "Mag", "Yeb", "May", "Yun", "Yul", "Ghu", "Cut", "Ktu", "Wam", "Duj", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ne": ["ne", "default", {
            name: "ne",
            englishName: "Nepali",
            nativeName: "नेपाली",
            language: "ne",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["आइतवार", "सोमवार", "मङ्गलवार", "बुधवार", "बिहीवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["आइत", "सोम", "मङ्गल", "बुध", "बिही", "शुक्र", "शनि"],
                        namesShort: ["आ", "सो", "म", "बु", "बि", "शु", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जून", "जुलाई", "अगस्त", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""],
                        namesAbbr: ["जन", "फेब", "मार्च", "अप्रिल", "मे", "जून", "जुलाई", "अग", "सेप्ट", "अक्ट", "नोभ", "डिस", ""]
                    },
                    AM: ["विहानी", "विहानी", "विहानी"],
                    PM: ["बेलुकी", "बेलुकी", "बेलुकी"],
                    eras: [{ "name": "a.d.", "start": null, "offset": 0 }],
                    patterns: {
                        Y: "MMMM,yyyy"
                    }
                }
            }
        }],
    "fy": ["fy", "default", {
            name: "fy",
            englishName: "Frisian",
            nativeName: "Frysk",
            language: "fy",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["Snein", "Moandei", "Tiisdei", "Woansdei", "Tongersdei", "Freed", "Sneon"],
                        namesAbbr: ["Sn", "Mo", "Ti", "Wo", "To", "Fr", "Sn"],
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    months: {
                        names: ["jannewaris", "febrewaris", "maart", "april", "maaie", "juny", "july", "augustus", "septimber", "oktober", "novimber", "desimber", ""],
                        namesAbbr: ["jann", "febr", "mrt", "apr", "maaie", "jun", "jul", "aug", "sept", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d-M-yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd d MMMM yyyy H:mm",
                        F: "dddd d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ps": ["ps", "default", {
            name: "ps",
            englishName: "Pashto",
            nativeName: "پښتو",
            language: "ps",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                ",": "،",
                ".": ",",
                percent: {
                    pattern: ["%n-", "%n"],
                    ",": "،",
                    ".": ","
                },
                currency: {
                    pattern: ["$n-", "$n"],
                    ",": "٬",
                    ".": "٫",
                    symbol: "؋"
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګا ښزمرى", "زمرى", "وږى", "تله", "لړم", "لنڈ ۍ", "مرغومى", ""],
                        namesAbbr: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګا ښ", "زمرى", "وږى", "تله", "لړم", "لنڈ ۍ", "مرغومى", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "ل.ه", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy, dd, MMMM, dddd",
                        f: "yyyy, dd, MMMM, dddd h:mm tt",
                        F: "yyyy, dd, MMMM, dddd h:mm:ss tt",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fil": ["fil", "default", {
            name: "fil",
            englishName: "Filipino",
            nativeName: "Filipino",
            language: "fil",
            numberFormat: {
                currency: {
                    symbol: "PhP"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Linggo", "Lunes", "Martes", "Mierkoles", "Huebes", "Biernes", "Sabado"],
                        namesAbbr: ["Lin", "Lun", "Mar", "Mier", "Hueb", "Bier", "Saba"],
                        namesShort: ["L", "L", "M", "M", "H", "B", "S"]
                    },
                    months: {
                        names: ["Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Septyembre", "Oktubre", "Nobyembre", "Disyembre", ""],
                        namesAbbr: ["En", "Peb", "Mar", "Abr", "Mayo", "Hun", "Hul", "Agos", "Sept", "Okt", "Nob", "Dis", ""]
                    },
                    eras: [{ "name": "Anno Domini", "start": null, "offset": 0 }],
                }
            }
        }],
    "dv": ["dv", "default", {
            name: "dv",
            englishName: "Divehi",
            nativeName: "ދިވެހިބަސް",
            language: "dv",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["n $-", "n $"],
                    symbol: "ރ."
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    days: {
                        names: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesAbbr: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesShort: ["އާ", "ހޯ", "އަ", "ބު", "ބު", "ހު", "ހޮ"]
                    },
                    months: {
                        names: ["މުޙައްރަމް", "ޞަފަރު", "ރަބީޢުލްއައްވަލް", "ރަބީޢުލްއާޚިރު", "ޖުމާދަލްއޫލާ", "ޖުމާދަލްއާޚިރާ", "ރަޖަބް", "ޝަޢްބާން", "ރަމަޟާން", "ޝައްވާލް", "ޛުލްޤަޢިދާ", "ޛުލްޙިއްޖާ", ""],
                        namesAbbr: ["މުޙައްރަމް", "ޞަފަރު", "ރަބީޢުލްއައްވަލް", "ރަބީޢުލްއާޚިރު", "ޖުމާދަލްއޫލާ", "ޖުމާދަލްއާޚިރާ", "ރަޖަބް", "ޝަޢްބާން", "ރަމަޟާން", "ޝައްވާލް", "ޛުލްޤަޢިދާ", "ޛުލްޙިއްޖާ", ""]
                    },
                    AM: ["މކ", "މކ", "މކ"],
                    PM: ["މފ", "މފ", "މފ"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd/MM/yyyy HH:mm",
                        F: "dd/MM/yyyy HH:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    days: {
                        names: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesAbbr: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesShort: ["އާ", "ހޯ", "އަ", "ބު", "ބު", "ހު", "ހޮ"]
                    },
                    months: {
                        names: ["ޖަނަވަރީ", "ފެބްރުއަރީ", "މާޗް", "އޭޕްރިލް", "މެއި", "ޖޫން", "ޖުލައި", "އޯގަސްޓް", "ސެޕްޓެމްބަރ", "އޮކްޓޯބަރ", "ނޮވެމްބަރ", "ޑިސެމްބަރ", ""],
                        namesAbbr: ["ޖަނަވަރީ", "ފެބްރުއަރީ", "މާޗް", "އޭޕްރިލް", "މެއި", "ޖޫން", "ޖުލައި", "އޯގަސްޓް", "ސެޕްޓެމްބަރ", "އޮކްޓޯބަރ", "ނޮވެމްބަރ", "ޑިސެމްބަރ", ""]
                    },
                    AM: ["މކ", "މކ", "މކ"],
                    PM: ["މފ", "މފ", "މފ"],
                    eras: [{ "name": "މީލާދީ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yy",
                        D: "ddd, yyyy MMMM dd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "ddd, yyyy MMMM dd HH:mm",
                        F: "ddd, yyyy MMMM dd HH:mm:ss",
                        Y: "yyyy, MMMM"
                    }
                }
            }
        }],
    "ha": ["ha", "default", {
            name: "ha",
            englishName: "Hausa",
            nativeName: "Hausa",
            language: "ha",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Lahadi", "Litinin", "Talata", "Laraba", "Alhamis", "Juma'a", "Asabar"],
                        namesAbbr: ["Lah", "Lit", "Tal", "Lar", "Alh", "Jum", "Asa"],
                        namesShort: ["L", "L", "T", "L", "A", "J", "A"]
                    },
                    months: {
                        names: ["Januwaru", "Febreru", "Maris", "Afrilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktocba", "Nuwamba", "Disamba", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Afr", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""]
                    },
                    AM: ["Safe", "safe", "SAFE"],
                    PM: ["Yamma", "yamma", "YAMMA"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "yo": ["yo", "default", {
            name: "yo",
            englishName: "Yoruba",
            nativeName: "Yoruba",
            language: "yo",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Aiku", "Aje", "Isegun", "Ojo'ru", "Ojo'bo", "Eti", "Abameta"],
                        namesAbbr: ["Aik", "Aje", "Ise", "Ojo", "Ojo", "Eti", "Aba"],
                        namesShort: ["A", "A", "I", "O", "O", "E", "A"]
                    },
                    months: {
                        names: ["Osu kinni", "Osu keji", "Osu keta", "Osu kerin", "Osu karun", "Osu kefa", "Osu keje", "Osu kejo", "Osu kesan", "Osu kewa", "Osu kokanla", "Osu keresi", ""],
                        namesAbbr: ["kin.", "kej.", "ket.", "ker.", "kar.", "kef.", "kej.", "kej.", "kes.", "kew.", "kok.", "ker.", ""]
                    },
                    AM: ["Owuro", "owuro", "OWURO"],
                    PM: ["Ale", "ale", "ALE"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "quz": ["quz", "default", {
            name: "quz",
            englishName: "Quechua",
            nativeName: "runasimi",
            language: "quz",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "$b"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["intichaw", "killachaw", "atipachaw", "quyllurchaw", "Ch' askachaw", "Illapachaw", "k'uychichaw"],
                        namesAbbr: ["int", "kil", "ati", "quy", "Ch'", "Ill", "k'u"],
                        namesShort: ["d", "k", "a", "m", "h", "b", "k"]
                    },
                    months: {
                        names: ["Qulla puquy", "Hatun puquy", "Pauqar waray", "ayriwa", "Aymuray", "Inti raymi", "Anta Sitwa", "Qhapaq Sitwa", "Uma raymi", "Kantaray", "Ayamarq'a", "Kapaq Raymi", ""],
                        namesAbbr: ["Qul", "Hat", "Pau", "ayr", "Aym", "Int", "Ant", "Qha", "Uma", "Kan", "Aya", "Kap", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "nso": ["nso", "default", {
            name: "nso",
            englishName: "Sesotho sa Leboa",
            nativeName: "Sesotho sa Leboa",
            language: "nso",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Lamorena", "Mošupologo", "Labobedi", "Laboraro", "Labone", "Labohlano", "Mokibelo"],
                        namesAbbr: ["Lam", "Moš", "Lbb", "Lbr", "Lbn", "Lbh", "Mok"],
                        namesShort: ["L", "M", "L", "L", "L", "L", "M"]
                    },
                    months: {
                        names: ["Pherekgong", "Hlakola", "Mopitlo", "Moranang", "Mosegamanye", "Ngoatobošego", "Phuphu", "Phato", "Lewedi", "Diphalana", "Dibatsela", "Manthole", ""],
                        namesAbbr: ["Pher", "Hlak", "Mop", "Mor", "Mos", "Ngwat", "Phup", "Phat", "Lew", "Dip", "Dib", "Man", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ba": ["ba", "default", {
            name: "ba",
            englishName: "Bashkir",
            nativeName: "Башҡорт",
            language: "ba",
            numberFormat: {
                ",": " ",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ",",
                    symbol: "һ."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Йәкшәмбе", "Дүшәмбе", "Шишәмбе", "Шаршамбы", "Кесаҙна", "Йома", "Шәмбе"],
                        namesAbbr: ["Йш", "Дш", "Шш", "Шр", "Кс", "Йм", "Шб"],
                        namesShort: ["Йш", "Дш", "Шш", "Шр", "Кс", "Йм", "Шб"]
                    },
                    months: {
                        names: ["ғинуар", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""],
                        namesAbbr: ["ғин", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d MMMM yyyy 'й'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'й' H:mm",
                        F: "d MMMM yyyy 'й' H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "lb": ["lb", "default", {
            name: "lb",
            englishName: "Luxembourgish",
            nativeName: "Lëtzebuergesch",
            language: "lb",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sonndeg", "Méindeg", "Dënschdeg", "Mëttwoch", "Donneschdeg", "Freideg", "Samschdeg"],
                        namesAbbr: ["Son", "Méi", "Dën", "Mët", "Don", "Fre", "Sam"],
                        namesShort: ["So", "Mé", "Dë", "Më", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "Mäerz", "Abrëll", "Mee", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mäe", "Abr", "Mee", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "kl": ["kl", "default", {
            name: "kl",
            englishName: "Greenlandic",
            nativeName: "kalaallisut",
            language: "kl",
            numberFormat: {
                ",": ".",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 0],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["sapaat", "ataasinngorneq", "marlunngorneq", "pingasunngorneq", "sisamanngorneq", "tallimanngorneq", "arfininngorneq"],
                        namesAbbr: ["sap", "ata", "mar", "ping", "sis", "tal", "arf"],
                        namesShort: ["sa", "at", "ma", "pi", "si", "ta", "ar"]
                    },
                    months: {
                        names: ["januari", "februari", "martsi", "apriili", "maaji", "juni", "juli", "aggusti", "septembari", "oktobari", "novembari", "decembari", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ig": ["ig", "default", {
            name: "ig",
            englishName: "Igbo",
            nativeName: "Igbo",
            language: "ig",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Aiku", "Aje", "Isegun", "Ojo'ru", "Ojo'bo", "Eti", "Abameta"],
                        namesAbbr: ["Aik", "Aje", "Ise", "Ojo", "Ojo", "Eti", "Aba"],
                        namesShort: ["A", "A", "I", "O", "O", "E", "A"]
                    },
                    months: {
                        names: ["Onwa mbu", "Onwa ibua", "Onwa ato", "Onwa ano", "Onwa ise", "Onwa isi", "Onwa asa", "Onwa asato", "Onwa itolu", "Onwa iri", "Onwa iri n'ofu", "Onwa iri n'ibua", ""],
                        namesAbbr: ["mbu.", "ibu.", "ato.", "ano.", "ise", "isi", "asa", "asa.", "ito.", "iri.", "n'of.", "n'ib.", ""]
                    },
                    AM: ["Ututu", "ututu", "UTUTU"],
                    PM: ["Efifie", "efifie", "EFIFIE"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "ii": ["ii", "default", {
            name: "ii",
            englishName: "Yi",
            nativeName: "ꆈꌠꁱꂷ",
            language: "ii",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["ꑭꆏꑍ", "ꆏꊂ꒔", "ꆏꊂꑍ", "ꆏꊂꌕ", "ꆏꊂꇖ", "ꆏꊂꉬ", "ꆏꊂꃘ"],
                        namesAbbr: ["ꑭꆏ", "ꆏ꒔", "ꆏꑍ", "ꆏꌕ", "ꆏꇖ", "ꆏꉬ", "ꆏꃘ"],
                        namesShort: ["ꆏ", "꒔", "ꑍ", "ꌕ", "ꇖ", "ꉬ", "ꃘ"]
                    },
                    months: {
                        names: ["ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""],
                        namesAbbr: ["ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""]
                    },
                    AM: ["ꂵꆪꈌꈐ", "ꂵꆪꈌꈐ", "ꂵꆪꈌꈐ"],
                    PM: ["ꂵꆪꈌꉈ", "ꂵꆪꈌꉈ", "ꂵꆪꈌꉈ"],
                    eras: [{ "name": "ꇬꑼ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ꈎ' M'ꆪ' d'ꑍ'",
                        t: "tt h:mm",
                        T: "H:mm:ss",
                        f: "yyyy'ꈎ' M'ꆪ' d'ꑍ' tt h:mm",
                        F: "yyyy'ꈎ' M'ꆪ' d'ꑍ' H:mm:ss",
                        M: "M'ꆪ' d'ꑍ'",
                        Y: "yyyy'ꈎ' M'ꆪ'"
                    }
                }
            }
        }],
    "arn": ["arn", "default", {
            name: "arn",
            englishName: "Mapudungun",
            nativeName: "Mapudungun",
            language: "arn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "moh": ["moh", "default", {
            name: "moh",
            englishName: "Mohawk",
            nativeName: "Kanien'kéha",
            language: "moh",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Awentatokentì:ke", "Awentataón'ke", "Ratironhia'kehronòn:ke", "Soséhne", "Okaristiiáhne", "Ronwaia'tanentaktonhne", "Entákta"],
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    months: {
                        names: ["Tsothohrkó:Wa", "Enniska", "Enniskó:Wa", "Onerahtókha", "Onerahtohkó:Wa", "Ohiari:Ha", "Ohiarihkó:Wa", "Seskéha", "Seskehkó:Wa", "Kenténha", "Kentenhkó:Wa", "Tsothóhrha", ""]
                    }
                }
            }
        }],
    "br": ["br", "default", {
            name: "br",
            englishName: "Breton",
            nativeName: "brezhoneg",
            language: "br",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sul", "Lun", "Meurzh", "Merc'her", "Yaou", "Gwener", "Sadorn"],
                        namesAbbr: ["Sul", "Lun", "Meu.", "Mer.", "Yaou", "Gwe.", "Sad."],
                        namesShort: ["Su", "Lu", "Mz", "Mc", "Ya", "Gw", "Sa"]
                    },
                    months: {
                        names: ["Genver", "C'hwevrer", "Meurzh", "Ebrel", "Mae", "Mezheven", "Gouere", "Eost", "Gwengolo", "Here", "Du", "Kerzu", ""],
                        namesAbbr: ["Gen.", "C'hwe.", "Meur.", "Ebr.", "Mae", "Mezh.", "Goue.", "Eost", "Gwen.", "Here", "Du", "Kzu", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "g. J.-K.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ug": ["ug", "default", {
            name: "ug",
            englishName: "Uyghur",
            nativeName: "ئۇيغۇرچە",
            language: "ug",
            isRTL: true,
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["يەكشەنبە", "دۈشەنبە", "سەيشەنبە", "چارشەنبە", "پەيشەنبە", "جۈمە", "شەنبە"],
                        namesAbbr: ["يە", "دۈ", "سە", "چا", "پە", "جۈ", "شە"],
                        namesShort: ["ي", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["1-ئاي", "2-ئاي", "3-ئاي", "4-ئاي", "5-ئاي", "6-ئاي", "7-ئاي", "8-ئاي", "9-ئاي", "10-ئاي", "11-ئاي", "12-ئاي", ""],
                        namesAbbr: ["1-ئاي", "2-ئاي", "3-ئاي", "4-ئاي", "5-ئاي", "6-ئاي", "7-ئاي", "8-ئاي", "9-ئاي", "10-ئاي", "11-ئاي", "12-ئاي", ""]
                    },
                    AM: ["چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن"],
                    PM: ["چۈشتىن كېيىن", "چۈشتىن كېيىن", "چۈشتىن كېيىن"],
                    eras: [{ "name": "مىلادى", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-M-d",
                        D: "yyyy-'يىلى' MMMM d-'كۈنى،'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy-'يىلى' MMMM d-'كۈنى،' H:mm",
                        F: "yyyy-'يىلى' MMMM d-'كۈنى،' H:mm:ss",
                        M: "MMMM d'-كۈنى'",
                        Y: "yyyy-'يىلى' MMMM"
                    }
                }
            }
        }],
    "mi": ["mi", "default", {
            name: "mi",
            englishName: "Maori",
            nativeName: "Reo Māori",
            language: "mi",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Rātapu", "Rāhina", "Rātū", "Rāapa", "Rāpare", "Rāmere", "Rāhoroi"],
                        namesAbbr: ["Ta", "Hi", "Tū", "Apa", "Pa", "Me", "Ho"],
                        namesShort: ["Ta", "Hi", "Tū", "Aa", "Pa", "Me", "Ho"]
                    },
                    months: {
                        names: ["Kohi-tātea", "Hui-tanguru", "Poutū-te-rangi", "Paenga-whāwhā", "Haratua", "Pipiri", "Hōngongoi", "Here-turi-kōkā", "Mahuru", "Whiringa-ā-nuku", "Whiringa-ā-rangi", "Hakihea", ""],
                        namesAbbr: ["Kohi", "Hui", "Pou", "Pae", "Hara", "Pipi", "Hōngo", "Here", "Mahu", "Nuku", "Rangi", "Haki", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd MMMM, yyyy",
                        f: "dddd, dd MMMM, yyyy h:mm tt",
                        F: "dddd, dd MMMM, yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM, yy"
                    }
                }
            }
        }],
    "oc": ["oc", "default", {
            name: "oc",
            englishName: "Occitan",
            nativeName: "Occitan",
            language: "oc",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimenge", "diluns", "dimars", "dimècres", "dijòus", "divendres", "dissabte"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mèc.", "jòu.", "ven.", "sab."],
                        namesShort: ["di", "lu", "ma", "mè", "jò", "ve", "sa"]
                    },
                    months: {
                        names: ["genier", "febrier", "març", "abril", "mai", "junh", "julh", "agost", "setembre", "octobre", "novembre", "desembre", ""],
                        namesAbbr: ["gen.", "feb.", "mar.", "abr.", "mai.", "jun.", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""]
                    },
                    monthsGenitive: {
                        names: ["de genier", "de febrier", "de març", "d'abril", "de mai", "de junh", "de julh", "d'agost", "de setembre", "d'octobre", "de novembre", "de desembre", ""],
                        namesAbbr: ["gen.", "feb.", "mar.", "abr.", "mai.", "jun.", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "après Jèsus-Crist", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd,' lo 'd MMMM' de 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd,' lo 'd MMMM' de 'yyyy HH:mm",
                        F: "dddd,' lo 'd MMMM' de 'yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "co": ["co", "default", {
            name: "co",
            englishName: "Corsican",
            nativeName: "Corsu",
            language: "co",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dumenica", "luni", "marti", "mercuri", "ghjovi", "venderi", "sabbatu"],
                        namesAbbr: ["dum.", "lun.", "mar.", "mer.", "ghj.", "ven.", "sab."],
                        namesShort: ["du", "lu", "ma", "me", "gh", "ve", "sa"]
                    },
                    months: {
                        names: ["ghjennaghju", "ferraghju", "marzu", "aprile", "maghju", "ghjunghju", "lugliu", "aostu", "settembre", "ottobre", "nuvembre", "dicembre", ""],
                        namesAbbr: ["ghje", "ferr", "marz", "apri", "magh", "ghju", "lugl", "aost", "sett", "otto", "nuve", "dice", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "dopu J-C", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gsw": ["gsw", "default", {
            name: "gsw",
            englishName: "Alsatian",
            nativeName: "Elsässisch",
            language: "gsw",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sundàà", "Mondàà", "Dienschdàà", "Mittwuch", "Dunnerschdàà", "Fridàà", "Sàmschdàà"],
                        namesAbbr: ["Su.", "Mo.", "Di.", "Mi.", "Du.", "Fr.", "Sà."],
                        namesShort: ["Su", "Mo", "Di", "Mi", "Du", "Fr", "Sà"]
                    },
                    months: {
                        names: ["Jänner", "Feverje", "März", "Àpril", "Mai", "Jüni", "Jüli", "Augscht", "September", "Oktower", "Nowember", "Dezember", ""],
                        namesAbbr: ["Jän.", "Fev.", "März", "Apr.", "Mai", "Jüni", "Jüli", "Aug.", "Sept.", "Okt.", "Now.", "Dez.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "Vor J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sah": ["sah", "default", {
            name: "sah",
            englishName: "Yakut",
            nativeName: "саха",
            language: "sah",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "с."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["баскыһыанньа", "бэнидиэнньик", "оптуорунньук", "сэрэдэ", "чэппиэр", "бээтинсэ", "субуота"],
                        namesAbbr: ["Бс", "Бн", "Оп", "Ср", "Чп", "Бт", "Сб"],
                        namesShort: ["Бс", "Бн", "Оп", "Ср", "Чп", "Бт", "Сб"]
                    },
                    months: {
                        names: ["Тохсунньу", "Олунньу", "Кулун тутар", "Муус устар", "Ыам ыйа", "Бэс ыйа", "От ыйа", "Атырдьах ыйа", "Балаҕан ыйа", "Алтынньы", "Сэтинньи", "Ахсынньы", ""],
                        namesAbbr: ["тхс", "олн", "кул", "мст", "ыам", "бэс", "отй", "атр", "блҕ", "алт", "стн", "ахс", ""]
                    },
                    monthsGenitive: {
                        names: ["тохсунньу", "олунньу", "кулун тутар", "муус устар", "ыам ыйын", "бэс ыйын", "от ыйын", "атырдьах ыйын", "балаҕан ыйын", "алтынньы", "сэтинньи", "ахсынньы", ""],
                        namesAbbr: ["тхс", "олн", "кул", "мст", "ыам", "бэс", "отй", "атр", "блҕ", "алт", "стн", "ахс", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "MM.dd.yyyy",
                        D: "MMMM d yyyy 'с.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d yyyy 'с.' H:mm",
                        F: "MMMM d yyyy 'с.' H:mm:ss",
                        Y: "MMMM yyyy 'с.'"
                    }
                }
            }
        }],
    "qut": ["qut", "default", {
            name: "qut",
            englishName: "K'iche",
            nativeName: "K'iche",
            language: "qut",
            numberFormat: {
                currency: {
                    symbol: "Q"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["juq'ij", "kaq'ij", "oxq'ij", "kajq'ij", "joq'ij", "waqq'ij", "wuqq'ij"],
                        namesAbbr: ["juq", "kaq", "oxq", "kajq", "joq", "waqq", "wuqq"],
                        namesShort: ["ju", "ka", "ox", "ka", "jo", "wa", "wu"]
                    },
                    months: {
                        names: ["nab'e ik'", "ukab' ik'", "rox ik'", "ukaj ik'", "uro' ik'", "uwaq ik'", "uwuq ik'", "uwajxaq ik'", "ub'elej ik'", "ulaj ik'", "ujulaj ik'", "ukab'laj ik'", ""],
                        namesAbbr: ["nab'e", "ukab", "rox", "ukaj", "uro", "uwaq", "uwuq", "uwajxaq", "ub'elej", "ulaj", "ujulaj", "ukab'laj", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "rw": ["rw", "default", {
            name: "rw",
            englishName: "Kinyarwanda",
            nativeName: "Kinyarwanda",
            language: "rw",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "RWF"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Ku wa mbere", "Ku wa kabiri", "Ku wa gatatu", "Ku wa kane", "Ku wa gatanu", "Ku wa gatandatu", "Ku cyumweru"],
                        namesAbbr: ["mbe.", "kab.", "gat.", "kan.", "gat.", "gat.", "cyu."],
                        namesShort: ["mb", "ka", "ga", "ka", "ga", "ga", "cy"]
                    },
                    months: {
                        names: ["Mutarama", "Gashyantare", "Werurwe", "Mata", "Gicurasi", "Kamena", "Nyakanga", "Kanama", "Nzeli", "Ukwakira", "Ugushyingo", "Ukuboza", ""],
                        namesAbbr: ["Mut", "Gas", "Wer", "Mat", "Gic", "Kam", "Nya", "Kan", "Nze", "Ukwa", "Ugu", "Uku", ""]
                    },
                    AM: ["saa moya z.m.", "saa moya z.m.", "SAA MOYA Z.M."],
                    PM: ["saa moya z.n.", "saa moya z.n.", "SAA MOYA Z.N."],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                }
            }
        }],
    "wo": ["wo", "default", {
            name: "wo",
            englishName: "Wolof",
            nativeName: "Wolof",
            language: "wo",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "XOF"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "prs": ["prs", "default", {
            name: "prs",
            englishName: "Dari",
            nativeName: "درى",
            language: "prs",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["%n-", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$n-", "$n"],
                    symbol: "؋"
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    firstDay: 5,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    firstDay: 5,
                    days: {
                        names: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګاښ", "زمرى", "وږى", "تله", "لړم", "ليندۍ", "مرغومى", ""],
                        namesAbbr: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګاښ", "زمرى", "وږى", "تله", "لړم", "ليندۍ", "مرغومى", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "ل.ه", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy, dd, MMMM, dddd",
                        f: "yyyy, dd, MMMM, dddd h:mm tt",
                        F: "yyyy, dd, MMMM, dddd h:mm:ss tt",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gd": ["gd", "default", {
            name: "gd",
            englishName: "Scottish Gaelic",
            nativeName: "Gàidhlig",
            language: "gd",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "£"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Didòmhnaich", "Diluain", "Dimàirt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne"],
                        namesAbbr: ["Dòm", "Lua", "Mài", "Cia", "Ard", "Hao", "Sat"],
                        namesShort: ["D", "L", "M", "C", "A", "H", "S"]
                    },
                    months: {
                        names: ["Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd", ""],
                        namesAbbr: ["Fao", "Gea", "Màr", "Gib", "Cèi", "Ògm", "Iuc", "Lùn", "Sul", "Dàm", "Sam", "Dùb", ""]
                    },
                    AM: ["m", "m", "M"],
                    PM: ["f", "f", "F"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-SA": ["ar-SA", "default", {
            name: "ar-SA",
            englishName: "Arabic (Saudi Arabia)",
            nativeName: "العربية (المملكة العربية السعودية)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ر.س.‏"
                }
            },
            calendars: {
                standard: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /*  remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "bg-BG": ["bg-BG", "default", {
            name: "bg-BG",
            englishName: "Bulgarian (Bulgaria)",
            nativeName: "български (България)",
            language: "bg",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "лв."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["неделя", "понеделник", "вторник", "сряда", "четвъртък", "петък", "събота"],
                        namesAbbr: ["нед", "пон", "вт", "ср", "четв", "пет", "съб"],
                        namesShort: ["н", "п", "в", "с", "ч", "п", "с"]
                    },
                    months: {
                        names: ["януари", "февруари", "март", "април", "май", "юни", "юли", "август", "септември", "октомври", "ноември", "декември", ""],
                        namesAbbr: ["ян", "февр", "март", "апр", "май", "юни", "юли", "авг", "септ", "окт", "ноември", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "след новата ера", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy 'г.'",
                        D: "dd MMMM yyyy 'г.'",
                        t: "HH:mm 'ч.'",
                        T: "HH:mm:ss 'ч.'",
                        f: "dd MMMM yyyy 'г.' HH:mm 'ч.'",
                        F: "dd MMMM yyyy 'г.' HH:mm:ss 'ч.'",
                        M: "dd MMMM",
                        Y: "MMMM yyyy 'г.'"
                    }
                }
            }
        }],
    "ca-ES": ["ca-ES", "default", {
            name: "ca-ES",
            englishName: "Catalan (Catalan)",
            nativeName: "català (català)",
            language: "ca",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"],
                        namesAbbr: ["dg.", "dl.", "dt.", "dc.", "dj.", "dv.", "ds."],
                        namesShort: ["dg", "dl", "dt", "dc", "dj", "dv", "ds"]
                    },
                    months: {
                        names: ["gener", "febrer", "març", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre", ""],
                        namesAbbr: ["gen", "feb", "març", "abr", "maig", "juny", "jul", "ag", "set", "oct", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' / 'MMMM' / 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' / 'MMMM' / 'yyyy HH:mm",
                        F: "dddd, d' / 'MMMM' / 'yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' / 'yyyy"
                    }
                }
            }
        }],
    "zh-TW": ["zh-TW", "default", {
            name: "zh-TW",
            englishName: "Chinese (Traditional, Taiwan)",
            nativeName: "中文(台灣)",
            language: "zh-CHT",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "NT$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "西元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "tt hh:mm",
                        T: "tt hh:mm:ss",
                        f: "yyyy'年'M'月'd'日' tt hh:mm",
                        F: "yyyy'年'M'月'd'日' tt hh:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                },
                Taiwan: {
                    name: "Taiwan",
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "", "start": null, "offset": 1911 }],
                    twoDigitYearMax: 99,
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "tt hh:mm",
                        T: "tt hh:mm:ss",
                        f: "yyyy'年'M'月'd'日' tt hh:mm",
                        F: "yyyy'年'M'月'd'日' tt hh:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "cs-CZ": ["cs-CZ", "default", {
            name: "cs-CZ",
            englishName: "Czech (Czech Republic)",
            nativeName: "čeština (Česká republika)",
            language: "cs",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Kč"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["neděle", "pondělí", "úterý", "středa", "čtvrtek", "pátek", "sobota"],
                        namesAbbr: ["ne", "po", "út", "st", "čt", "pá", "so"],
                        namesShort: ["ne", "po", "út", "st", "čt", "pá", "so"]
                    },
                    months: {
                        names: ["leden", "únor", "březen", "duben", "květen", "červen", "červenec", "srpen", "září", "říjen", "listopad", "prosinec", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    monthsGenitive: {
                        names: ["ledna", "února", "března", "dubna", "května", "června", "července", "srpna", "září", "října", "listopadu", "prosince", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["dop.", "dop.", "DOP."],
                    PM: ["odp.", "odp.", "ODP."],
                    eras: [{ "name": "n. l.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "da-DK": ["da-DK", "default", {
            name: "da-DK",
            englishName: "Danish (Denmark)",
            nativeName: "dansk (Danmark)",
            language: "da",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                        namesAbbr: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
                        namesShort: ["sø", "ma", "ti", "on", "to", "fr", "lø"]
                    },
                    months: {
                        names: ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "de-DE": ["de-DE", "default", {
            name: "de-DE",
            englishName: "German (Germany)",
            nativeName: "Deutsch (Deutschland)",
            language: "de",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "el-GR": ["el-GR", "default", {
            name: "el-GR",
            englishName: "Greek (Greece)",
            nativeName: "Ελληνικά (Ελλάδα)",
            language: "el",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"],
                        namesAbbr: ["Κυρ", "Δευ", "Τρι", "Τετ", "Πεμ", "Παρ", "Σαβ"],
                        namesShort: ["Κυ", "Δε", "Τρ", "Τε", "Πε", "Πα", "Σά"]
                    },
                    months: {
                        names: ["Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος", ""],
                        namesAbbr: ["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαϊ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ", ""]
                    },
                    monthsGenitive: {
                        names: ["Ιανουαρίου", "Φεβρουαρίου", "Μαρτίου", "Απριλίου", "Μαΐου", "Ιουνίου", "Ιουλίου", "Αυγούστου", "Σεπτεμβρίου", "Οκτωβρίου", "Νοεμβρίου", "Δεκεμβρίου", ""],
                        namesAbbr: ["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαϊ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ", ""]
                    },
                    AM: ["πμ", "πμ", "ΠΜ"],
                    PM: ["μμ", "μμ", "ΜΜ"],
                    eras: [{ "name": "μ.Χ.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd, d MMMM yyyy",
                        f: "dddd, d MMMM yyyy h:mm tt",
                        F: "dddd, d MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "en-US": ["en-US", "default", {
            englishName: "English (United States)"
        }],
    "fi-FI": ["fi-FI", "default", {
            name: "fi-FI",
            englishName: "Finnish (Finland)",
            nativeName: "suomi (Suomi)",
            language: "fi",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"],
                        namesAbbr: ["su", "ma", "ti", "ke", "to", "pe", "la"],
                        namesShort: ["su", "ma", "ti", "ke", "to", "pe", "la"]
                    },
                    months: {
                        names: ["tammikuu", "helmikuu", "maaliskuu", "huhtikuu", "toukokuu", "kesäkuu", "heinäkuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu", ""],
                        namesAbbr: ["tammi", "helmi", "maalis", "huhti", "touko", "kesä", "heinä", "elo", "syys", "loka", "marras", "joulu", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM'ta 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM'ta 'yyyy H:mm",
                        F: "d. MMMM'ta 'yyyy H:mm:ss",
                        M: "d. MMMM'ta'",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fr-FR": ["fr-FR", "default", {
            name: "fr-FR",
            englishName: "French (France)",
            nativeName: "français (France)",
            language: "fr",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "he-IL": ["he-IL", "default", {
            name: "he-IL",
            englishName: "Hebrew (Israel)",
            nativeName: "עברית (ישראל)",
            language: "he",
            isRTL: true,
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "₪"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "שבת"],
                        namesAbbr: ["יום א", "יום ב", "יום ג", "יום ד", "יום ה", "יום ו", "שבת"],
                        namesShort: ["א", "ב", "ג", "ד", "ה", "ו", "ש"]
                    },
                    months: {
                        names: ["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר", ""],
                        namesAbbr: ["ינו", "פבר", "מרץ", "אפר", "מאי", "יונ", "יול", "אוג", "ספט", "אוק", "נוב", "דצמ", ""]
                    },
                    eras: [{ "name": "לספירה", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd dd MMMM yyyy HH:mm",
                        F: "dddd dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                },
                Hebrew: {
                    name: "Hebrew",
                    "/": " ",
                    days: {
                        names: ["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "שבת"],
                        namesAbbr: ["א", "ב", "ג", "ד", "ה", "ו", "ש"],
                        namesShort: ["א", "ב", "ג", "ד", "ה", "ו", "ש"]
                    },
                    months: {
                        names: ["תשרי", "חשון", "כסלו", "טבת", "שבט", "אדר", "אדר ב", "ניסן", "אייר", "סיון", "תמוז", "אב", "אלול"],
                        namesAbbr: ["תשרי", "חשון", "כסלו", "טבת", "שבט", "אדר", "אדר ב", "ניסן", "אייר", "סיון", "תמוז", "אב", "אלול"]
                    },
                    eras: [{ "name": "C.E.", "start": null, "offset": 0 }],
                    twoDigitYearMax: 5790,
                    patterns: {
                        d: "dd MMMM yyyy",
                        D: "dddd dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd dd MMMM yyyy HH:mm",
                        F: "dddd dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hu-HU": ["hu-HU", "default", {
            name: "hu-HU",
            englishName: "Hungarian (Hungary)",
            nativeName: "magyar (Magyarország)",
            language: "hu",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Ft"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["vasárnap", "hétfő", "kedd", "szerda", "csütörtök", "péntek", "szombat"],
                        namesAbbr: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
                        namesShort: ["V", "H", "K", "Sze", "Cs", "P", "Szo"]
                    },
                    months: {
                        names: ["január", "február", "március", "április", "május", "június", "július", "augusztus", "szeptember", "október", "november", "december", ""],
                        namesAbbr: ["jan.", "febr.", "márc.", "ápr.", "máj.", "jún.", "júl.", "aug.", "szept.", "okt.", "nov.", "dec.", ""]
                    },
                    AM: ["de.", "de.", "DE."],
                    PM: ["du.", "du.", "DU."],
                    eras: [{ "name": "i.sz.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy.MM.dd.",
                        D: "yyyy. MMMM d.",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy. MMMM d. H:mm",
                        F: "yyyy. MMMM d. H:mm:ss",
                        M: "MMMM d.",
                        Y: "yyyy. MMMM"
                    }
                }
            }
        }],
    "is-IS": ["is-IS", "default", {
            name: "is-IS",
            englishName: "Icelandic (Iceland)",
            nativeName: "íslenska (Ísland)",
            language: "is",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    decimals: 0,
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sunnudagur", "mánudagur", "þriðjudagur", "miðvikudagur", "fimmtudagur", "föstudagur", "laugardagur"],
                        namesAbbr: ["sun.", "mán.", "þri.", "mið.", "fim.", "fös.", "lau."],
                        namesShort: ["su", "má", "þr", "mi", "fi", "fö", "la"]
                    },
                    months: {
                        names: ["janúar", "febrúar", "mars", "apríl", "maí", "júní", "júlí", "ágúst", "september", "október", "nóvember", "desember", ""],
                        namesAbbr: ["jan.", "feb.", "mar.", "apr.", "maí", "jún.", "júl.", "ágú.", "sep.", "okt.", "nóv.", "des.", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "it-IT": ["it-IT", "default", {
            name: "it-IT",
            englishName: "Italian (Italy)",
            nativeName: "italiano (Italia)",
            language: "it",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"],
                        namesAbbr: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
                        namesShort: ["do", "lu", "ma", "me", "gi", "ve", "sa"]
                    },
                    months: {
                        names: ["gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""],
                        namesAbbr: ["gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ja-JP": ["ja-JP", "default", {
            name: "ja-JP",
            englishName: "Japanese (Japan)",
            nativeName: "日本語 (日本)",
            language: "ja",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    decimals: 0,
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
                        namesAbbr: ["日", "月", "火", "水", "木", "金", "土"],
                        namesShort: ["日", "月", "火", "水", "木", "金", "土"]
                    },
                    months: {
                        names: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["午前", "午前", "午前"],
                    PM: ["午後", "午後", "午後"],
                    eras: [{ "name": "西暦", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                },
                Japanese: {
                    name: "Japanese",
                    days: {
                        names: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
                        namesAbbr: ["日", "月", "火", "水", "木", "金", "土"],
                        namesShort: ["日", "月", "火", "水", "木", "金", "土"]
                    },
                    months: {
                        names: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["午前", "午前", "午前"],
                    PM: ["午後", "午後", "午後"],
                    eras: [{ "name": "平成", "start": null, "offset": 1867 }, { "name": "昭和", "start": -1812153600000, "offset": 1911 }, { "name": "大正", "start": -1357603200000, "offset": 1925 }, { "name": "明治", "start": 60022080000, "offset": 1988 }],
                    twoDigitYearMax: 99,
                    patterns: {
                        d: "gg y/M/d",
                        D: "gg y'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "gg y'年'M'月'd'日' H:mm",
                        F: "gg y'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "gg y'年'M'月'"
                    }
                }
            }
        }],
    "ko-KR": ["ko-KR", "default", {
            name: "ko-KR",
            englishName: "Korean (Korea)",
            nativeName: "한국어 (대한민국)",
            language: "ko",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    decimals: 0,
                    symbol: "₩"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
                        namesAbbr: ["일", "월", "화", "수", "목", "금", "토"],
                        namesShort: ["일", "월", "화", "수", "목", "금", "토"]
                    },
                    months: {
                        names: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["오전", "오전", "오전"],
                    PM: ["오후", "오후", "오후"],
                    eras: [{ "name": "서기", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy'년' M'월' d'일' dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "yyyy'년' M'월' d'일' dddd tt h:mm",
                        F: "yyyy'년' M'월' d'일' dddd tt h:mm:ss",
                        M: "M'월' d'일'",
                        Y: "yyyy'년' M'월'"
                    }
                },
                Korean: {
                    name: "Korean",
                    "/": "-",
                    days: {
                        names: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
                        namesAbbr: ["일", "월", "화", "수", "목", "금", "토"],
                        namesShort: ["일", "월", "화", "수", "목", "금", "토"]
                    },
                    months: {
                        names: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: ["오전", "오전", "오전"],
                    PM: ["오후", "오후", "오후"],
                    eras: [{ "name": "단기", "start": null, "offset": -2333 }],
                    twoDigitYearMax: 4362,
                    patterns: {
                        d: "gg yyyy-MM-dd",
                        D: "gg yyyy'년' M'월' d'일' dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "gg yyyy'년' M'월' d'일' dddd tt h:mm",
                        F: "gg yyyy'년' M'월' d'일' dddd tt h:mm:ss",
                        M: "M'월' d'일'",
                        Y: "gg yyyy'년' M'월'"
                    }
                }
            }
        }],
    "nl-NL": ["nl-NL", "default", {
            name: "nl-NL",
            englishName: "Dutch (Netherlands)",
            nativeName: "Nederlands (Nederland)",
            language: "nl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"],
                        namesAbbr: ["zo", "ma", "di", "wo", "do", "vr", "za"],
                        namesShort: ["zo", "ma", "di", "wo", "do", "vr", "za"]
                    },
                    months: {
                        names: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d-M-yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd d MMMM yyyy H:mm",
                        F: "dddd d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "nb-NO": ["nb-NO", "default", {
            name: "nb-NO",
            englishName: "Norwegian, Bokmål (Norway)",
            nativeName: "norsk, bokmål (Norge)",
            language: "nb",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                        namesAbbr: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
                        namesShort: ["sø", "ma", "ti", "on", "to", "fr", "lø"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "pl-PL": ["pl-PL", "default", {
            name: "pl-PL",
            englishName: "Polish (Poland)",
            nativeName: "polski (Polska)",
            language: "pl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "zł"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["niedziela", "poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota"],
                        namesAbbr: ["N", "Pn", "Wt", "Śr", "Cz", "Pt", "So"],
                        namesShort: ["N", "Pn", "Wt", "Śr", "Cz", "Pt", "So"]
                    },
                    months: {
                        names: ["styczeń", "luty", "marzec", "kwiecień", "maj", "czerwiec", "lipiec", "sierpień", "wrzesień", "październik", "listopad", "grudzień", ""],
                        namesAbbr: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""]
                    },
                    monthsGenitive: {
                        names: ["stycznia", "lutego", "marca", "kwietnia", "maja", "czerwca", "lipca", "sierpnia", "września", "października", "listopada", "grudnia", ""],
                        namesAbbr: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "pt-BR": ["pt-BR", "default", {
            name: "pt-BR",
            englishName: "Portuguese (Brazil)",
            nativeName: "Português (Brasil)",
            language: "pt",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "R$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"],
                        namesAbbr: ["dom", "seg", "ter", "qua", "qui", "sex", "sáb"],
                        namesShort: ["D", "S", "T", "Q", "Q", "S", "S"]
                    },
                    months: {
                        names: ["janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""],
                        namesAbbr: ["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' de 'MMMM' de 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' de 'MMMM' de 'yyyy HH:mm",
                        F: "dddd, d' de 'MMMM' de 'yyyy HH:mm:ss",
                        M: "dd' de 'MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "rm-CH": ["rm-CH", "default", {
            name: "rm-CH",
            englishName: "Romansh (Switzerland)",
            nativeName: "Rumantsch (Svizra)",
            language: "rm",
            numberFormat: {
                ",": "'",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "fr."
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dumengia", "glindesdi", "mardi", "mesemna", "gievgia", "venderdi", "sonda"],
                        namesAbbr: ["du", "gli", "ma", "me", "gie", "ve", "so"],
                        namesShort: ["du", "gli", "ma", "me", "gie", "ve", "so"]
                    },
                    months: {
                        names: ["schaner", "favrer", "mars", "avrigl", "matg", "zercladur", "fanadur", "avust", "settember", "october", "november", "december", ""],
                        namesAbbr: ["schan", "favr", "mars", "avr", "matg", "zercl", "fan", "avust", "sett", "oct", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "s. Cr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d MMMM yyyy HH:mm",
                        F: "dddd, d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ro-RO": ["ro-RO", "default", {
            name: "ro-RO",
            englishName: "Romanian (Romania)",
            nativeName: "română (România)",
            language: "ro",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "lei"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["duminică", "luni", "marţi", "miercuri", "joi", "vineri", "sâmbătă"],
                        namesAbbr: ["D", "L", "Ma", "Mi", "J", "V", "S"],
                        namesShort: ["D", "L", "Ma", "Mi", "J", "V", "S"]
                    },
                    months: {
                        names: ["ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie", ""],
                        namesAbbr: ["ian.", "feb.", "mar.", "apr.", "mai.", "iun.", "iul.", "aug.", "sep.", "oct.", "nov.", "dec.", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ru-RU": ["ru-RU", "default", {
            name: "ru-RU",
            englishName: "Russian (Russia)",
            nativeName: "русский (Россия)",
            language: "ru",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"],
                        namesAbbr: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                        namesShort: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"]
                    },
                    months: {
                        names: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    monthsGenitive: {
                        names: ["января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря", ""],
                        namesAbbr: ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy 'г.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'г.' H:mm",
                        F: "d MMMM yyyy 'г.' H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hr-HR": ["hr-HR", "default", {
            name: "hr-HR",
            englishName: "Croatian (Croatia)",
            nativeName: "hrvatski (Hrvatska)",
            language: "hr",
            numberFormat: {
                pattern: ["- n"],
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kn"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["siječanj", "veljača", "ožujak", "travanj", "svibanj", "lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    monthsGenitive: {
                        names: ["siječnja", "veljače", "ožujka", "travnja", "svibnja", "lipnja", "srpnja", "kolovoza", "rujna", "listopada", "studenog", "prosinca", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy.",
                        D: "d. MMMM yyyy.",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy. H:mm",
                        F: "d. MMMM yyyy. H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "sk-SK": ["sk-SK", "default", {
            name: "sk-SK",
            englishName: "Slovak (Slovakia)",
            nativeName: "slovenčina (Slovenská republika)",
            language: "sk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["nedeľa", "pondelok", "utorok", "streda", "štvrtok", "piatok", "sobota"],
                        namesAbbr: ["ne", "po", "ut", "st", "št", "pi", "so"],
                        namesShort: ["ne", "po", "ut", "st", "št", "pi", "so"]
                    },
                    months: {
                        names: ["január", "február", "marec", "apríl", "máj", "jún", "júl", "august", "september", "október", "november", "december", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    monthsGenitive: {
                        names: ["januára", "februára", "marca", "apríla", "mája", "júna", "júla", "augusta", "septembra", "októbra", "novembra", "decembra", ""],
                        namesAbbr: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. l.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sq-AL": ["sq-AL", "default", {
            name: "sq-AL",
            englishName: "Albanian (Albania)",
            nativeName: "shqipe (Shqipëria)",
            language: "sq",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": ".",
                    ".": ",",
                    symbol: "Lek"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["e diel", "e hënë", "e martë", "e mërkurë", "e enjte", "e premte", "e shtunë"],
                        namesAbbr: ["Die", "Hën", "Mar", "Mër", "Enj", "Pre", "Sht"],
                        namesShort: ["Di", "Hë", "Ma", "Më", "En", "Pr", "Sh"]
                    },
                    months: {
                        names: ["janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nëntor", "dhjetor", ""],
                        namesAbbr: ["Jan", "Shk", "Mar", "Pri", "Maj", "Qer", "Kor", "Gsh", "Sht", "Tet", "Nën", "Dhj", ""]
                    },
                    AM: ["PD", "pd", "PD"],
                    PM: ["MD", "md", "MD"],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy-MM-dd",
                        t: "h:mm.tt",
                        T: "h:mm:ss.tt",
                        f: "yyyy-MM-dd h:mm.tt",
                        F: "yyyy-MM-dd h:mm:ss.tt",
                        Y: "yyyy-MM"
                    }
                }
            }
        }],
    "sv-SE": ["sv-SE", "default", {
            name: "sv-SE",
            englishName: "Swedish (Sweden)",
            nativeName: "svenska (Sverige)",
            language: "sv",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"],
                        namesAbbr: ["sö", "må", "ti", "on", "to", "fr", "lö"],
                        namesShort: ["sö", "må", "ti", "on", "to", "fr", "lö"]
                    },
                    months: {
                        names: ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "'den 'd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "'den 'd MMMM yyyy HH:mm",
                        F: "'den 'd MMMM yyyy HH:mm:ss",
                        M: "'den 'd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "th-TH": ["th-TH", "default", {
            name: "th-TH",
            englishName: "Thai (Thailand)",
            nativeName: "ไทย (ไทย)",
            language: "th",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "฿"
                }
            },
            calendars: {
                standard: {
                    name: "ThaiBuddhist",
                    firstDay: 1,
                    days: {
                        names: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"],
                        namesAbbr: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
                        namesShort: ["อ", "จ", "อ", "พ", "พ", "ศ", "ส"]
                    },
                    months: {
                        names: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""],
                        namesAbbr: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""]
                    },
                    eras: [{ "name": "พ.ศ.", "start": null, "offset": -543 }],
                    twoDigitYearMax: 2572,
                    patterns: {
                        d: "d/M/yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 1,
                    days: {
                        names: ["อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"],
                        namesAbbr: ["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."],
                        namesShort: ["อ", "จ", "อ", "พ", "พ", "ศ", "ส"]
                    },
                    months: {
                        names: ["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""],
                        namesAbbr: ["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "'วัน'dddd'ที่' d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "'วัน'dddd'ที่' d MMMM yyyy H:mm",
                        F: "'วัน'dddd'ที่' d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tr-TR": ["tr-TR", "default", {
            name: "tr-TR",
            englishName: "Turkish (Turkey)",
            nativeName: "Türkçe (Türkiye)",
            language: "tr",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "TL"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"],
                        namesAbbr: ["Paz", "Pzt", "Sal", "Çar", "Per", "Cum", "Cmt"],
                        namesShort: ["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"]
                    },
                    months: {
                        names: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık", ""],
                        namesAbbr: ["Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dd MMMM yyyy dddd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy dddd HH:mm",
                        F: "dd MMMM yyyy dddd HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ur-PK": ["ur-PK", "default", {
            name: "ur-PK",
            englishName: "Urdu (Islamic Republic of Pakistan)",
            nativeName: "اُردو (پاکستان)",
            language: "ur",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["$n-", "$n"],
                    symbol: "Rs"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"],
                        namesAbbr: ["اتوار", "پير", "منگل", "بدھ", "جمعرات", "جمعه", "هفته"],
                        namesShort: ["ا", "پ", "م", "ب", "ج", "ج", "ه"]
                    },
                    months: {
                        names: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""],
                        namesAbbr: ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""]
                    },
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        f: "dd MMMM, yyyy h:mm tt",
                        F: "dd MMMM, yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                }
            }
        }],
    "id-ID": ["id-ID", "default", {
            name: "id-ID",
            englishName: "Indonesian (Indonesia)",
            nativeName: "Bahasa Indonesia (Indonesia)",
            language: "id",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    decimals: 0,
                    ",": ".",
                    ".": ",",
                    symbol: "Rp"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"],
                        namesAbbr: ["Minggu", "Sen", "Sel", "Rabu", "Kamis", "Jumat", "Sabtu"],
                        namesShort: ["M", "S", "S", "R", "K", "J", "S"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "Nopember", "Desember", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agust", "Sep", "Okt", "Nop", "Des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM yyyy H:mm",
                        F: "dd MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "uk-UA": ["uk-UA", "default", {
            name: "uk-UA",
            englishName: "Ukrainian (Ukraine)",
            nativeName: "українська (Україна)",
            language: "uk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "₴"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["неділя", "понеділок", "вівторок", "середа", "четвер", "п'ятниця", "субота"],
                        namesAbbr: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
                        namesShort: ["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"]
                    },
                    months: {
                        names: ["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", "Жовтень", "Листопад", "Грудень", ""],
                        namesAbbr: ["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру", ""]
                    },
                    monthsGenitive: {
                        names: ["січня", "лютого", "березня", "квітня", "травня", "червня", "липня", "серпня", "вересня", "жовтня", "листопада", "грудня", ""],
                        namesAbbr: ["січ", "лют", "бер", "кві", "тра", "чер", "лип", "сер", "вер", "жов", "лис", "гру", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy' р.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy' р.' H:mm",
                        F: "d MMMM yyyy' р.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy' р.'"
                    }
                }
            }
        }],
    "be-BY": ["be-BY", "default", {
            name: "be-BY",
            englishName: "Belarusian (Belarus)",
            nativeName: "Беларускі (Беларусь)",
            language: "be",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["нядзеля", "панядзелак", "аўторак", "серада", "чацвер", "пятніца", "субота"],
                        namesAbbr: ["нд", "пн", "аў", "ср", "чц", "пт", "сб"],
                        namesShort: ["нд", "пн", "аў", "ср", "чц", "пт", "сб"]
                    },
                    months: {
                        names: ["Студзень", "Люты", "Сакавік", "Красавік", "Май", "Чэрвень", "Ліпень", "Жнівень", "Верасень", "Кастрычнік", "Лістапад", "Снежань", ""],
                        namesAbbr: ["Сту", "Лют", "Сак", "Кра", "Май", "Чэр", "Ліп", "Жні", "Вер", "Кас", "Ліс", "Сне", ""]
                    },
                    monthsGenitive: {
                        names: ["студзеня", "лютага", "сакавіка", "красавіка", "мая", "чэрвеня", "ліпеня", "жніўня", "верасня", "кастрычніка", "лістапада", "снежня", ""],
                        namesAbbr: ["Сту", "Лют", "Сак", "Кра", "Май", "Чэр", "Ліп", "Жні", "Вер", "Кас", "Ліс", "Сне", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sl-SI": ["sl-SI", "default", {
            name: "sl-SI",
            englishName: "Slovenian (Slovenia)",
            nativeName: "slovenski (Slovenija)",
            language: "sl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljek", "torek", "sreda", "četrtek", "petek", "sobota"],
                        namesAbbr: ["ned", "pon", "tor", "sre", "čet", "pet", "sob"],
                        namesShort: ["ne", "po", "to", "sr", "če", "pe", "so"]
                    },
                    months: {
                        names: ["januar", "februar", "marec", "april", "maj", "junij", "julij", "avgust", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "et-EE": ["et-EE", "default", {
            name: "et-EE",
            englishName: "Estonian (Estonia)",
            nativeName: "eesti (Eesti)",
            language: "et",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pühapäev", "esmaspäev", "teisipäev", "kolmapäev", "neljapäev", "reede", "laupäev"],
                        namesAbbr: ["P", "E", "T", "K", "N", "R", "L"],
                        namesShort: ["P", "E", "T", "K", "N", "R", "L"]
                    },
                    months: {
                        names: ["jaanuar", "veebruar", "märts", "aprill", "mai", "juuni", "juuli", "august", "september", "oktoober", "november", "detsember", ""],
                        namesAbbr: ["jaan", "veebr", "märts", "apr", "mai", "juuni", "juuli", "aug", "sept", "okt", "nov", "dets", ""]
                    },
                    AM: ["EL", "el", "EL"],
                    PM: ["PL", "pl", "PL"],
                    patterns: {
                        d: "d.MM.yyyy",
                        D: "d. MMMM yyyy'. a.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy'. a.' H:mm",
                        F: "d. MMMM yyyy'. a.' H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy'. a.'"
                    }
                }
            }
        }],
    "lv-LV": ["lv-LV", "default", {
            name: "lv-LV",
            englishName: "Latvian (Latvia)",
            nativeName: "latviešu (Latvija)",
            language: "lv",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "Ls"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["svētdiena", "pirmdiena", "otrdiena", "trešdiena", "ceturtdiena", "piektdiena", "sestdiena"],
                        namesAbbr: ["sv", "pr", "ot", "tr", "ce", "pk", "se"],
                        namesShort: ["sv", "pr", "ot", "tr", "ce", "pk", "se"]
                    },
                    months: {
                        names: ["janvāris", "februāris", "marts", "aprīlis", "maijs", "jūnijs", "jūlijs", "augusts", "septembris", "oktobris", "novembris", "decembris", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jūn", "jūl", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["janvārī", "februārī", "martā", "aprīlī", "maijā", "jūnijā", "jūlijā", "augustā", "septembrī", "oktobrī", "novembrī", "decembrī", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jūn", "jūl", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy.MM.dd.",
                        D: "dddd, yyyy'. gada 'd. MMMM",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, yyyy'. gada 'd. MMMM H:mm",
                        F: "dddd, yyyy'. gada 'd. MMMM H:mm:ss",
                        M: "d. MMMM",
                        Y: "yyyy. MMMM"
                    }
                }
            }
        }],
    "lt-LT": ["lt-LT", "default", {
            name: "lt-LT",
            englishName: "Lithuanian (Lithuania)",
            nativeName: "lietuvių (Lietuva)",
            language: "lt",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Lt"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sekmadienis", "pirmadienis", "antradienis", "trečiadienis", "ketvirtadienis", "penktadienis", "šeštadienis"],
                        namesAbbr: ["Sk", "Pr", "An", "Tr", "Kt", "Pn", "Št"],
                        namesShort: ["S", "P", "A", "T", "K", "Pn", "Š"]
                    },
                    months: {
                        names: ["sausis", "vasaris", "kovas", "balandis", "gegužė", "birželis", "liepa", "rugpjūtis", "rugsėjis", "spalis", "lapkritis", "gruodis", ""],
                        namesAbbr: ["Sau", "Vas", "Kov", "Bal", "Geg", "Bir", "Lie", "Rgp", "Rgs", "Spl", "Lap", "Grd", ""]
                    },
                    monthsGenitive: {
                        names: ["sausio", "vasario", "kovo", "balandžio", "gegužės", "birželio", "liepos", "rugpjūčio", "rugsėjo", "spalio", "lapkričio", "gruodžio", ""],
                        namesAbbr: ["Sau", "Vas", "Kov", "Bal", "Geg", "Bir", "Lie", "Rgp", "Rgs", "Spl", "Lap", "Grd", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy.MM.dd",
                        D: "yyyy 'm.' MMMM d 'd.'",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'm.' MMMM d 'd.' HH:mm",
                        F: "yyyy 'm.' MMMM d 'd.' HH:mm:ss",
                        M: "MMMM d 'd.'",
                        Y: "yyyy 'm.' MMMM"
                    }
                }
            }
        }],
    "tg-Cyrl-TJ": ["tg-Cyrl-TJ", "default", {
            name: "tg-Cyrl-TJ",
            englishName: "Tajik (Cyrillic, Tajikistan)",
            nativeName: "Тоҷикӣ (Тоҷикистон)",
            language: "tg-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ";",
                    symbol: "т.р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    days: {
                        names: ["Яш", "Душанбе", "Сешанбе", "Чоршанбе", "Панҷшанбе", "Ҷумъа", "Шанбе"],
                        namesAbbr: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"],
                        namesShort: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"]
                    },
                    months: {
                        names: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["январи", "феврали", "марти", "апрели", "маи", "июни", "июли", "августи", "сентябри", "октябри", "ноябри", "декабри", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fa-IR": ["fa-IR", "default", {
            name: "fa-IR",
            englishName: "Persian",
            nativeName: "فارسى (ایران)",
            language: "fa",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    ".": "/",
                    symbol: "ريال"
                }
            },
            calendars: {
                standard: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["يكشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["يكشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["ژانويه", "فوريه", "مارس", "آوريل", "مى", "ژوئن", "ژوئيه", "اوت", "سپتامبر", "اُكتبر", "نوامبر", "دسامبر", ""],
                        namesAbbr: ["ژانويه", "فوريه", "مارس", "آوريل", "مى", "ژوئن", "ژوئيه", "اوت", "سپتامبر", "اُكتبر", "نوامبر", "دسامبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "yyyy/MM/dd",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "yyyy/MM/dd hh:mm tt",
                        F: "yyyy/MM/dd hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ق.ظ", "ق.ظ", "ق.ظ"],
                    PM: ["ب.ظ", "ب.ظ", "ب.ظ"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "vi-VN": ["vi-VN", "default", {
            name: "vi-VN",
            englishName: "Vietnamese (Vietnam)",
            nativeName: "Tiếng Việt (Việt Nam)",
            language: "vi",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "₫"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"],
                        namesAbbr: ["CN", "Hai", "Ba", "Tư", "Năm", "Sáu", "Bảy"],
                        namesShort: ["C", "H", "B", "T", "N", "S", "B"]
                    },
                    months: {
                        names: ["Tháng Giêng", "Tháng Hai", "Tháng Ba", "Tháng Tư", "Tháng Năm", "Tháng Sáu", "Tháng Bảy", "Tháng Tám", "Tháng Chín", "Tháng Mười", "Tháng Mười Một", "Tháng Mười Hai", ""],
                        namesAbbr: ["Thg1", "Thg2", "Thg3", "Thg4", "Thg5", "Thg6", "Thg7", "Thg8", "Thg9", "Thg10", "Thg11", "Thg12", ""]
                    },
                    AM: ["SA", "sa", "SA"],
                    PM: ["CH", "ch", "CH"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        f: "dd MMMM yyyy h:mm tt",
                        F: "dd MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hy-AM": ["hy-AM", "default", {
            name: "hy-AM",
            englishName: "Armenian (Armenia)",
            nativeName: "Հայերեն (Հայաստան)",
            language: "hy",
            numberFormat: {
                currency: {
                    pattern: ["-n $", "n $"],
                    symbol: "դր."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Կիրակի", "Երկուշաբթի", "Երեքշաբթի", "Չորեքշաբթի", "Հինգշաբթի", "ՈՒրբաթ", "Շաբաթ"],
                        namesAbbr: ["Կիր", "Երկ", "Երք", "Չրք", "Հնգ", "ՈՒր", "Շբթ"],
                        namesShort: ["Կ", "Ե", "Ե", "Չ", "Հ", "Ո", "Շ"]
                    },
                    months: {
                        names: ["Հունվար", "Փետրվար", "Մարտ", "Ապրիլ", "Մայիս", "Հունիս", "Հուլիս", "Օգոստոս", "Սեպտեմբեր", "Հոկտեմբեր", "Նոյեմբեր", "Դեկտեմբեր", ""],
                        namesAbbr: ["ՀՆՎ", "ՓՏՎ", "ՄՐՏ", "ԱՊՐ", "ՄՅՍ", "ՀՆՍ", "ՀԼՍ", "ՕԳՍ", "ՍԵՊ", "ՀՈԿ", "ՆՈՅ", "ԴԵԿ", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM, yyyy H:mm",
                        F: "d MMMM, yyyy H:mm:ss",
                        M: "d MMMM"
                    }
                }
            }
        }],
    "az-Latn-AZ": ["az-Latn-AZ", "default", {
            name: "az-Latn-AZ",
            englishName: "Azeri (Latin, Azerbaijan)",
            nativeName: "Azərbaycan­ılı (Azərbaycan)",
            language: "az-Latn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "man."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Bazar", "Bazar ertəsi", "Çərşənbə axşamı", "Çərşənbə", "Cümə axşamı", "Cümə", "Şənbə"],
                        namesAbbr: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"],
                        namesShort: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"]
                    },
                    months: {
                        names: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "İyun", "İyul", "Avgust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    monthsGenitive: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "eu-ES": ["eu-ES", "default", {
            name: "eu-ES",
            englishName: "Basque (Basque)",
            nativeName: "euskara (euskara)",
            language: "eu",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["igandea", "astelehena", "asteartea", "asteazkena", "osteguna", "ostirala", "larunbata"],
                        namesAbbr: ["ig.", "al.", "as.", "az.", "og.", "or.", "lr."],
                        namesShort: ["ig", "al", "as", "az", "og", "or", "lr"]
                    },
                    months: {
                        names: ["urtarrila", "otsaila", "martxoa", "apirila", "maiatza", "ekaina", "uztaila", "abuztua", "iraila", "urria", "azaroa", "abendua", ""],
                        namesAbbr: ["urt.", "ots.", "mar.", "api.", "mai.", "eka.", "uzt.", "abu.", "ira.", "urr.", "aza.", "abe.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dddd, yyyy.'eko' MMMM'k 'd",
                        t: "HH:mm",
                        T: "H:mm:ss",
                        f: "dddd, yyyy.'eko' MMMM'k 'd HH:mm",
                        F: "dddd, yyyy.'eko' MMMM'k 'd H:mm:ss",
                        Y: "yyyy.'eko' MMMM"
                    }
                }
            }
        }],
    "hsb-DE": ["hsb-DE", "default", {
            name: "hsb-DE",
            englishName: "Upper Sorbian (Germany)",
            nativeName: "hornjoserbšćina (Němska)",
            language: "hsb",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["njedźela", "póndźela", "wutora", "srjeda", "štwórtk", "pjatk", "sobota"],
                        namesAbbr: ["nje", "pón", "wut", "srj", "štw", "pja", "sob"],
                        namesShort: ["n", "p", "w", "s", "š", "p", "s"]
                    },
                    months: {
                        names: ["januar", "februar", "měrc", "apryl", "meja", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "mej", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["januara", "februara", "měrca", "apryla", "meje", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "mej", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "po Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "dddd, 'dnja' d. MMMM yyyy",
                        t: "H.mm 'hodź.'",
                        T: "H:mm:ss",
                        f: "dddd, 'dnja' d. MMMM yyyy H.mm 'hodź.'",
                        F: "dddd, 'dnja' d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "mk-MK": ["mk-MK", "default", {
            name: "mk-MK",
            englishName: "Macedonian (Former Yugoslav Republic of Macedonia)",
            nativeName: "македонски јазик (Македонија)",
            language: "mk",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "ден."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недела", "понеделник", "вторник", "среда", "четврток", "петок", "сабота"],
                        namesAbbr: ["нед", "пон", "втр", "срд", "чет", "пет", "саб"],
                        namesShort: ["не", "по", "вт", "ср", "че", "пе", "са"]
                    },
                    months: {
                        names: ["јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември", ""],
                        namesAbbr: ["јан", "фев", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "ное", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, dd MMMM yyyy HH:mm",
                        F: "dddd, dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tn-ZA": ["tn-ZA", "default", {
            name: "tn-ZA",
            englishName: "Setswana (South Africa)",
            nativeName: "Setswana (Aforika Borwa)",
            language: "tn",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Latshipi", "Mosupologo", "Labobedi", "Laboraro", "Labone", "Labotlhano", "Lamatlhatso"],
                        namesAbbr: ["Ltp.", "Mos.", "Lbd.", "Lbr.", "Lbn.", "Lbt.", "Lmt."],
                        namesShort: ["Lp", "Ms", "Lb", "Lr", "Ln", "Lt", "Lm"]
                    },
                    months: {
                        names: ["Ferikgong", "Tlhakole", "Mopitloe", "Moranang", "Motsheganong", "Seetebosigo", "Phukwi", "Phatwe", "Lwetse", "Diphalane", "Ngwanatsele", "Sedimothole", ""],
                        namesAbbr: ["Fer.", "Tlhak.", "Mop.", "Mor.", "Motsh.", "Seet.", "Phukw.", "Phatw.", "Lwets.", "Diph.", "Ngwan.", "Sed.", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "xh-ZA": ["xh-ZA", "default", {
            name: "xh-ZA",
            englishName: "isiXhosa (South Africa)",
            nativeName: "isiXhosa (uMzantsi Afrika)",
            language: "xh",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["iCawa", "uMvulo", "uLwesibini", "uLwesithathu", "uLwesine", "uLwesihlanu", "uMgqibelo"],
                        namesShort: ["Ca", "Mv", "Lb", "Lt", "Ln", "Lh", "Mg"]
                    },
                    months: {
                        names: ["Mqungu", "Mdumba", "Kwindla", "Tshazimpuzi", "Canzibe", "Silimela", "Khala", "Thupha", "Msintsi", "Dwarha", "Nkanga", "Mnga", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "zu-ZA": ["zu-ZA", "default", {
            name: "zu-ZA",
            englishName: "isiZulu (South Africa)",
            nativeName: "isiZulu (iNingizimu Afrika)",
            language: "zu",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["iSonto", "uMsombuluko", "uLwesibili", "uLwesithathu", "uLwesine", "uLwesihlanu", "uMgqibelo"],
                        namesAbbr: ["Son.", "Mso.", "Bi.", "Tha.", "Ne.", "Hla.", "Mgq."]
                    },
                    months: {
                        names: ["uMasingana", "uNhlolanja", "uNdasa", "uMbaso", "uNhlaba", "uNhlangulana", "uNtulikazi", "uNcwaba", "uMandulo", "uMfumfu", "uLwezi", "uZibandlela", ""],
                        namesAbbr: ["Mas.", "Nhlo.", "Nda.", "Mba.", "Nhla.", "Nhlang.", "Ntu.", "Ncwa.", "Man.", "Mfu.", "Lwe.", "Zib.", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "af-ZA": ["af-ZA", "default", {
            name: "af-ZA",
            englishName: "Afrikaans (South Africa)",
            nativeName: "Afrikaans (Suid Afrika)",
            language: "af",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"],
                        namesAbbr: ["Son", "Maan", "Dins", "Woen", "Dond", "Vry", "Sat"],
                        namesShort: ["So", "Ma", "Di", "Wo", "Do", "Vr", "Sa"]
                    },
                    months: {
                        names: ["Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ka-GE": ["ka-GE", "default", {
            name: "ka-GE",
            englishName: "Georgian (Georgia)",
            nativeName: "ქართული (საქართველო)",
            language: "ka",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "Lari"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"],
                        namesAbbr: ["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"],
                        namesShort: ["კ", "ო", "ს", "ო", "ხ", "პ", "შ"]
                    },
                    months: {
                        names: ["იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი", ""],
                        namesAbbr: ["იან", "თებ", "მარ", "აპრ", "მაის", "ივნ", "ივლ", "აგვ", "სექ", "ოქტ", "ნოემ", "დეკ", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "yyyy 'წლის' dd MM, dddd",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'წლის' dd MM, dddd H:mm",
                        F: "yyyy 'წლის' dd MM, dddd H:mm:ss",
                        M: "dd MM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fo-FO": ["fo-FO", "default", {
            name: "fo-FO",
            englishName: "Faroese (Faroe Islands)",
            nativeName: "føroyskt (Føroyar)",
            language: "fo",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["sunnudagur", "mánadagur", "týsdagur", "mikudagur", "hósdagur", "fríggjadagur", "leygardagur"],
                        namesAbbr: ["sun", "mán", "týs", "mik", "hós", "frí", "leyg"],
                        namesShort: ["su", "má", "tý", "mi", "hó", "fr", "ley"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "apríl", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hi-IN": ["hi-IN", "default", {
            name: "hi-IN",
            englishName: "Hindi (India)",
            nativeName: "हिंदी (भारत)",
            language: "hi",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["रवि.", "सोम.", "मंगल.", "बुध.", "गुरु.", "शुक्र.", "शनि."],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""],
                        namesAbbr: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""]
                    },
                    AM: ["पूर्वाह्न", "पूर्वाह्न", "पूर्वाह्न"],
                    PM: ["अपराह्न", "अपराह्न", "अपराह्न"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "mt-MT": ["mt-MT", "default", {
            name: "mt-MT",
            englishName: "Maltese (Malta)",
            nativeName: "Malti (Malta)",
            language: "mt",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Il-Ħadd", "It-Tnejn", "It-Tlieta", "L-Erbgħa", "Il-Ħamis", "Il-Ġimgħa", "Is-Sibt"],
                        namesAbbr: ["Ħad", "Tne", "Tli", "Erb", "Ħam", "Ġim", "Sib"],
                        namesShort: ["I", "I", "I", "L", "I", "I", "I"]
                    },
                    months: {
                        names: ["Jannar", "Frar", "Marzu", "April", "Mejju", "Ġunju", "Lulju", "Awissu", "Settembru", "Ottubru", "Novembru", "Diċembru", ""],
                        namesAbbr: ["Jan", "Fra", "Mar", "Apr", "Mej", "Ġun", "Lul", "Awi", "Set", "Ott", "Nov", "Diċ", ""]
                    },
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, d' ta\\' 'MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' ta\\' 'MMMM yyyy HH:mm",
                        F: "dddd, d' ta\\' 'MMMM yyyy HH:mm:ss",
                        M: "d' ta\\' 'MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "se-NO": ["se-NO", "default", {
            name: "se-NO",
            englishName: "Sami, Northern (Norway)",
            nativeName: "davvisámegiella (Norga)",
            language: "se",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sotnabeaivi", "vuossárga", "maŋŋebárga", "gaskavahkku", "duorastat", "bearjadat", "lávvardat"],
                        namesAbbr: ["sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"],
                        namesShort: ["s", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđajagimánu", "guovvamánu", "njukčamánu", "cuoŋománu", "miessemánu", "geassemánu", "suoidnemánu", "borgemánu", "čakčamánu", "golggotmánu", "skábmamánu", "juovlamánu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ms-MY": ["ms-MY", "default", {
            name: "ms-MY",
            englishName: "Malay (Malaysia)",
            nativeName: "Bahasa Melayu (Malaysia)",
            language: "ms",
            numberFormat: {
                currency: {
                    decimals: 0,
                    symbol: "RM"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesAbbr: ["Ahad", "Isnin", "Sel", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesShort: ["A", "I", "S", "R", "K", "J", "S"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""],
                        namesAbbr: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogos", "Sept", "Okt", "Nov", "Dis", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM yyyy H:mm",
                        F: "dd MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "kk-KZ": ["kk-KZ", "default", {
            name: "kk-KZ",
            englishName: "Kazakh (Kazakhstan)",
            nativeName: "Қазақ (Қазақстан)",
            language: "kk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    ",": " ",
                    ".": "-",
                    symbol: "Т"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Жексенбі", "Дүйсенбі", "Сейсенбі", "Сәрсенбі", "Бейсенбі", "Жұма", "Сенбі"],
                        namesAbbr: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"],
                        namesShort: ["Жк", "Дс", "Сс", "Ср", "Бс", "Жм", "Сн"]
                    },
                    months: {
                        names: ["қаңтар", "ақпан", "наурыз", "сәуір", "мамыр", "маусым", "шілде", "тамыз", "қыркүйек", "қазан", "қараша", "желтоқсан", ""],
                        namesAbbr: ["Қаң", "Ақп", "Нау", "Сәу", "Мам", "Мау", "Шіл", "Там", "Қыр", "Қаз", "Қар", "Жел", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy 'ж.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'ж.' H:mm",
                        F: "d MMMM yyyy 'ж.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ky-KG": ["ky-KG", "default", {
            name: "ky-KG",
            englishName: "Kyrgyz (Kyrgyzstan)",
            nativeName: "Кыргыз (Кыргызстан)",
            language: "ky",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": "-",
                    symbol: "сом"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Жекшемби", "Дүйшөмбү", "Шейшемби", "Шаршемби", "Бейшемби", "Жума", "Ишемби"],
                        namesAbbr: ["Жш", "Дш", "Шш", "Шр", "Бш", "Жм", "Иш"],
                        namesShort: ["Жш", "Дш", "Шш", "Шр", "Бш", "Жм", "Иш"]
                    },
                    months: {
                        names: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d'-'MMMM yyyy'-ж.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d'-'MMMM yyyy'-ж.' H:mm",
                        F: "d'-'MMMM yyyy'-ж.' H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy'-ж.'"
                    }
                }
            }
        }],
    "sw-KE": ["sw-KE", "default", {
            name: "sw-KE",
            englishName: "Kiswahili (Kenya)",
            nativeName: "Kiswahili (Kenya)",
            language: "sw",
            numberFormat: {
                currency: {
                    symbol: "S"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"],
                        namesAbbr: ["Jumap.", "Jumat.", "Juman.", "Jumat.", "Alh.", "Iju.", "Jumam."],
                        namesShort: ["P", "T", "N", "T", "A", "I", "M"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Decemba", ""],
                        namesAbbr: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Dec", ""]
                    }
                }
            }
        }],
    "tk-TM": ["tk-TM", "default", {
            name: "tk-TM",
            englishName: "Turkmen (Turkmenistan)",
            nativeName: "türkmençe (Türkmenistan)",
            language: "tk",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "m."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Duşenbe", "Sişenbe", "Çarşenbe", "Penşenbe", "Anna", "Şenbe", "Ýekşenbe"],
                        namesAbbr: ["Db", "Sb", "Çb", "Pb", "An", "Şb", "Ýb"],
                        namesShort: ["D", "S", "Ç", "P", "A", "Ş", "Ý"]
                    },
                    months: {
                        names: ["Ýanwar", "Fewral", "Mart", "Aprel", "Maý", "lýun", "lýul", "Awgust", "Sentýabr", "Oktýabr", "Noýabr", "Dekabr", ""],
                        namesAbbr: ["Ýan", "Few", "Mart", "Apr", "Maý", "lýun", "lýul", "Awg", "Sen", "Okt", "Not", "Dek", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "yyyy 'ý.' MMMM d",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'ý.' MMMM d H:mm",
                        F: "yyyy 'ý.' MMMM d H:mm:ss",
                        Y: "yyyy 'ý.' MMMM"
                    }
                }
            }
        }],
    "uz-Latn-UZ": ["uz-Latn-UZ", "default", {
            name: "uz-Latn-UZ",
            englishName: "Uzbek (Latin, Uzbekistan)",
            nativeName: "U'zbek (U'zbekiston Respublikasi)",
            language: "uz-Latn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    decimals: 0,
                    ",": " ",
                    ".": ",",
                    symbol: "so'm"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["yakshanba", "dushanba", "seshanba", "chorshanba", "payshanba", "juma", "shanba"],
                        namesAbbr: ["yak.", "dsh.", "sesh.", "chr.", "psh.", "jm.", "sh."],
                        namesShort: ["ya", "d", "s", "ch", "p", "j", "sh"]
                    },
                    months: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM yyyy",
                        D: "yyyy 'yil' d-MMMM",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'yil' d-MMMM HH:mm",
                        F: "yyyy 'yil' d-MMMM HH:mm:ss",
                        M: "d-MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tt-RU": ["tt-RU", "default", {
            name: "tt-RU",
            englishName: "Tatar (Russia)",
            nativeName: "Татар (Россия)",
            language: "tt",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Якшәмбе", "Дүшәмбе", "Сишәмбе", "Чәршәмбе", "Пәнҗешәмбе", "Җомга", "Шимбә"],
                        namesAbbr: ["Якш", "Дүш", "Сиш", "Чәрш", "Пәнҗ", "Җом", "Шим"],
                        namesShort: ["Я", "Д", "С", "Ч", "П", "Җ", "Ш"]
                    },
                    months: {
                        names: ["Гыйнвар", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""],
                        namesAbbr: ["Гыйн.", "Фев.", "Мар.", "Апр.", "Май", "Июнь", "Июль", "Авг.", "Сен.", "Окт.", "Нояб.", "Дек.", ""]
                    },
                    monthsGenitive: {
                        names: ["Гыйнварның", "Февральнең", "Мартның", "Апрельнең", "Майның", "Июньнең", "Июльнең", "Августның", "Сентябрьның", "Октябрьның", "Ноябрьның", "Декабрьның", ""],
                        namesAbbr: ["Гыйн.-ның", "Фев.-нең", "Мар.-ның", "Апр.-нең", "Майның", "Июньнең", "Июльнең", "Авг.-ның", "Сен.-ның", "Окт.-ның", "Нояб.-ның", "Дек.-ның", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "bn-IN": ["bn-IN", "default", {
            name: "bn-IN",
            englishName: "Bengali (India)",
            nativeName: "বাংলা (ভারত)",
            language: "bn",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-%n", "%n"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "টা"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    ":": ".",
                    firstDay: 1,
                    days: {
                        names: ["রবিবার", "সোমবার", "মঙ্গলবার", "বুধবার", "বৃহস্পতিবার", "শুক্রবার", "শনিবার"],
                        namesAbbr: ["রবি.", "সোম.", "মঙ্গল.", "বুধ.", "বৃহস্পতি.", "শুক্র.", "শনি."],
                        namesShort: ["র", "স", "ম", "ব", "ব", "শ", "শ"]
                    },
                    months: {
                        names: ["জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""],
                        namesAbbr: ["জানু.", "ফেব্রু.", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগ.", "সেপ্টে.", "অক্টো.", "নভে.", "ডিসে.", ""]
                    },
                    AM: ["পুর্বাহ্ন", "পুর্বাহ্ন", "পুর্বাহ্ন"],
                    PM: ["অপরাহ্ন", "অপরাহ্ন", "অপরাহ্ন"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH.mm",
                        T: "HH.mm.ss",
                        f: "dd MMMM yyyy HH.mm",
                        F: "dd MMMM yyyy HH.mm.ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "pa-IN": ["pa-IN", "default", {
            name: "pa-IN",
            englishName: "Punjabi (India)",
            nativeName: "ਪੰਜਾਬੀ (ਭਾਰਤ)",
            language: "pa",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ਰੁ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ਐਤਵਾਰ", "ਸੋਮਵਾਰ", "ਮੰਗਲਵਾਰ", "ਬੁੱਧਵਾਰ", "ਵੀਰਵਾਰ", "ਸ਼ੁੱਕਰਵਾਰ", "ਸ਼ਨਿੱਚਰਵਾਰ"],
                        namesAbbr: ["ਐਤ.", "ਸੋਮ.", "ਮੰਗਲ.", "ਬੁੱਧ.", "ਵੀਰ.", "ਸ਼ੁਕਰ.", "ਸ਼ਨਿੱਚਰ."],
                        namesShort: ["ਐ", "ਸ", "ਮ", "ਬ", "ਵ", "ਸ਼", "ਸ਼"]
                    },
                    months: {
                        names: ["ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""],
                        namesAbbr: ["ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""]
                    },
                    AM: ["ਸਵੇਰ", "ਸਵੇਰ", "ਸਵੇਰ"],
                    PM: ["ਸ਼ਾਮ", "ਸ਼ਾਮ", "ਸ਼ਾਮ"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy dddd",
                        t: "tt hh:mm",
                        T: "tt hh:mm:ss",
                        f: "dd MMMM yyyy dddd tt hh:mm",
                        F: "dd MMMM yyyy dddd tt hh:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "gu-IN": ["gu-IN", "default", {
            name: "gu-IN",
            englishName: "Gujarati (India)",
            nativeName: "ગુજરાતી (ભારત)",
            language: "gu",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "રૂ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["રવિવાર", "સોમવાર", "મંગળવાર", "બુધવાર", "ગુરુવાર", "શુક્રવાર", "શનિવાર"],
                        namesAbbr: ["રવિ", "સોમ", "મંગળ", "બુધ", "ગુરુ", "શુક્ર", "શનિ"],
                        namesShort: ["ર", "સ", "મ", "બ", "ગ", "શ", "શ"]
                    },
                    months: {
                        names: ["જાન્યુઆરી", "ફેબ્રુઆરી", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટેમ્બર", "ઑક્ટ્બર", "નવેમ્બર", "ડિસેમ્બર", ""],
                        namesAbbr: ["જાન્યુ", "ફેબ્રુ", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટે", "ઑક્ટો", "નવે", "ડિસે", ""]
                    },
                    AM: ["પૂર્વ મધ્યાહ્ન", "પૂર્વ મધ્યાહ્ન", "પૂર્વ મધ્યાહ્ન"],
                    PM: ["ઉત્તર મધ્યાહ્ન", "ઉત્તર મધ્યાહ્ન", "ઉત્તર મધ્યાહ્ન"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "or-IN": ["or-IN", "default", {
            name: "or-IN",
            englishName: "Oriya (India)",
            nativeName: "ଓଡ଼ିଆ (ଭାରତ)",
            language: "or",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ଟ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["ରବିବାର", "ସୋମବାର", "ମଙ୍ଗଳବାର", "ବୁଧବାର", "ଗୁରୁବାର", "ଶୁକ୍ରବାର", "ଶନିବାର"],
                        namesAbbr: ["ରବି.", "ସୋମ.", "ମଙ୍ଗଳ.", "ବୁଧ.", "ଗୁରୁ.", "ଶୁକ୍ର.", "ଶନି."],
                        namesShort: ["ର", "ସୋ", "ମ", "ବୁ", "ଗୁ", "ଶୁ", "ଶ"]
                    },
                    months: {
                        names: ["ଜାନୁୟାରୀ", "ଫ୍ରେବୃୟାରୀ", "ମାର୍ଚ୍ଚ", "ଏପ୍ରିଲ୍‌", "ମେ", "ଜୁନ୍‌", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "(ଡିସେମ୍ବର", ""],
                        namesAbbr: ["ଜାନୁୟାରୀ", "ଫ୍ରେବୃୟାରୀ", "ମାର୍ଚ୍ଚ", "ଏପ୍ରିଲ୍‌", "ମେ", "ଜୁନ୍‌", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "(ଡିସେମ୍ବର", ""]
                    },
                    eras: [{ "name": "ଖ୍ରୀଷ୍ଟାବ୍ଦ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ta-IN": ["ta-IN", "default", {
            name: "ta-IN",
            englishName: "Tamil (India)",
            nativeName: "தமிழ் (இந்தியா)",
            language: "ta",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ரூ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ஞாயிற்றுக்கிழமை", "திங்கள்கிழமை", "செவ்வாய்கிழமை", "புதன்கிழமை", "வியாழக்கிழமை", "வெள்ளிக்கிழமை", "சனிக்கிழமை"],
                        namesAbbr: ["ஞாயிறு", "திங்கள்", "செவ்வாய்", "புதன்", "வியாழன்", "வெள்ளி", "சனி"],
                        namesShort: ["ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"]
                    },
                    months: {
                        names: ["ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""],
                        namesAbbr: ["ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""]
                    },
                    AM: ["காலை", "காலை", "காலை"],
                    PM: ["மாலை", "மாலை", "மாலை"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "te-IN": ["te-IN", "default", {
            name: "te-IN",
            englishName: "Telugu (India)",
            nativeName: "తెలుగు (భారత దేశం)",
            language: "te",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "రూ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ఆదివారం", "సోమవారం", "మంగళవారం", "బుధవారం", "గురువారం", "శుక్రవారం", "శనివారం"],
                        namesAbbr: ["ఆది.", "సోమ.", "మంగళ.", "బుధ.", "గురు.", "శుక్ర.", "శని."],
                        namesShort: ["ఆ", "సో", "మం", "బు", "గు", "శు", "శ"]
                    },
                    months: {
                        names: ["జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జూలై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""],
                        namesAbbr: ["జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జూలై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""]
                    },
                    AM: ["పూర్వాహ్న", "పూర్వాహ్న", "పూర్వాహ్న"],
                    PM: ["అపరాహ్న", "అపరాహ్న", "అపరాహ్న"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "kn-IN": ["kn-IN", "default", {
            name: "kn-IN",
            englishName: "Kannada (India)",
            nativeName: "ಕನ್ನಡ (ಭಾರತ)",
            language: "kn",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ರೂ"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ಭಾನುವಾರ", "ಸೋಮವಾರ", "ಮಂಗಳವಾರ", "ಬುಧವಾರ", "ಗುರುವಾರ", "ಶುಕ್ರವಾರ", "ಶನಿವಾರ"],
                        namesAbbr: ["ಭಾನು.", "ಸೋಮ.", "ಮಂಗಳ.", "ಬುಧ.", "ಗುರು.", "ಶುಕ್ರ.", "ಶನಿ."],
                        namesShort: ["ರ", "ಸ", "ಮ", "ಬ", "ಗ", "ಶ", "ಶ"]
                    },
                    months: {
                        names: ["ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಎಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""],
                        namesAbbr: ["ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಎಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""]
                    },
                    AM: ["ಪೂರ್ವಾಹ್ನ", "ಪೂರ್ವಾಹ್ನ", "ಪೂರ್ವಾಹ್ನ"],
                    PM: ["ಅಪರಾಹ್ನ", "ಅಪರಾಹ್ನ", "ಅಪರಾಹ್ನ"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ml-IN": ["ml-IN", "default", {
            name: "ml-IN",
            englishName: "Malayalam (India)",
            nativeName: "മലയാളം (ഭാരതം)",
            language: "ml",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-%n", "%n"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "ക"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    ":": ".",
                    firstDay: 1,
                    days: {
                        names: ["ഞായറാഴ്ച", "തിങ്കളാഴ്ച", "ചൊവ്വാഴ്ച", "ബുധനാഴ്ച", "വ്യാഴാഴ്ച", "വെള്ളിയാഴ്ച", "ശനിയാഴ്ച"],
                        namesAbbr: ["ഞായർ.", "തിങ്കൾ.", "ചൊവ്വ.", "ബുധൻ.", "വ്യാഴം.", "വെള്ളി.", "ശനി."],
                        namesShort: ["ഞ", "ത", "ച", "ബ", "വ", "വെ", "ശ"]
                    },
                    months: {
                        names: ["ജനുവരി", "ഫെബ്റുവരി", "മാറ്ച്ച്", "ഏപ്റില്", "മെയ്", "ജൂണ്", "ജൂലൈ", "ഓഗസ്ററ്", "സെപ്ററംബറ്", "ഒക്ടോബറ്", "നവംബറ്", "ഡിസംബറ്", ""],
                        namesAbbr: ["ജനുവരി", "ഫെബ്റുവരി", "മാറ്ച്ച്", "ഏപ്റില്", "മെയ്", "ജൂണ്", "ജൂലൈ", "ഓഗസ്ററ്", "സെപ്ററംബറ്", "ഒക്ടോബറ്", "നവംബറ്", "ഡിസംബറ്", ""]
                    },
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH.mm",
                        T: "HH.mm.ss",
                        f: "dd MMMM yyyy HH.mm",
                        F: "dd MMMM yyyy HH.mm.ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "as-IN": ["as-IN", "default", {
            name: "as-IN",
            englishName: "Assamese (India)",
            nativeName: "অসমীয়া (ভাৰত)",
            language: "as",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "n$"],
                    groupSizes: [3, 2],
                    symbol: "ট"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["সোমবাৰ", "মঙ্গলবাৰ", "বুধবাৰ", "বৃহস্পতিবাৰ", "শুক্রবাৰ", "শনিবাৰ", "ৰবিবাৰ"],
                        namesAbbr: ["সোম.", "মঙ্গল.", "বুধ.", "বৃহ.", "শুক্র.", "শনি.", "ৰবি."],
                        namesShort: ["সো", "ম", "বু", "বৃ", "শু", "শ", "র"]
                    },
                    months: {
                        names: ["জানুৱাৰী", "ফেব্রুৱাৰী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টেম্বর", "অক্টোবর", "নবেম্বর", "ডিচেম্বর", ""],
                        namesAbbr: ["জানু", "ফেব্রু", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগষ্ট", "চেপ্টে", "অক্টো", "নবে", "ডিচে", ""]
                    },
                    AM: ["ৰাতিপু", "ৰাতিপু", "ৰাতিপু"],
                    PM: ["আবেলি", "আবেলি", "আবেলি"],
                    eras: [{ "name": "খ্রীষ্টাব্দ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "yyyy,MMMM dd, dddd",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "yyyy,MMMM dd, dddd tt h:mm",
                        F: "yyyy,MMMM dd, dddd tt h:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM,yy"
                    }
                }
            }
        }],
    "mr-IN": ["mr-IN", "default", {
            name: "mr-IN",
            englishName: "Marathi (India)",
            nativeName: "मराठी (भारत)",
            language: "mr",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["रविवार", "सोमवार", "मंगळवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["रवि.", "सोम.", "मंगळ.", "बुध.", "गुरु.", "शुक्र.", "शनि."],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""],
                        namesAbbr: ["जाने.", "फेब्रु.", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टें.", "ऑक्टो.", "नोव्हें.", "डिसें.", ""]
                    },
                    AM: ["म.पू.", "म.पू.", "म.पू."],
                    PM: ["म.नं.", "म.नं.", "म.नं."],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "sa-IN": ["sa-IN", "default", {
            name: "sa-IN",
            englishName: "Sanskrit (India)",
            nativeName: "संस्कृत (भारतम्)",
            language: "sa",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["रविवासरः", "सोमवासरः", "मङ्गलवासरः", "बुधवासरः", "गुरुवासरः", "शुक्रवासरः", "शनिवासरः"],
                        namesAbbr: ["रविवासरः", "सोमवासरः", "मङ्गलवासरः", "बुधवासरः", "गुरुवासरः", "शुक्रवासरः", "शनिवासरः"],
                        namesShort: ["र", "स", "म", "ब", "ग", "श", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""],
                        namesAbbr: ["जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्तूबर", "नवम्बर", "दिसम्बर", ""]
                    },
                    AM: ["पूर्वाह्न", "पूर्वाह्न", "पूर्वाह्न"],
                    PM: ["अपराह्न", "अपराह्न", "अपराह्न"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy dddd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy dddd HH:mm",
                        F: "dd MMMM yyyy dddd HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "mn-MN": ["mn-MN", "default", {
            name: "mn-MN",
            englishName: "Mongolian (Cyrillic, Mongolia)",
            nativeName: "Монгол хэл (Монгол улс)",
            language: "mn-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "₮"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Ням", "Даваа", "Мягмар", "Лхагва", "Пүрэв", "Баасан", "Бямба"],
                        namesAbbr: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"],
                        namesShort: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"]
                    },
                    months: {
                        names: ["1 дүгээр сар", "2 дугаар сар", "3 дугаар сар", "4 дүгээр сар", "5 дугаар сар", "6 дугаар сар", "7 дугаар сар", "8 дугаар сар", "9 дүгээр сар", "10 дугаар сар", "11 дүгээр сар", "12 дугаар сар", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    monthsGenitive: {
                        names: ["1 дүгээр сарын", "2 дугаар сарын", "3 дугаар сарын", "4 дүгээр сарын", "5 дугаар сарын", "6 дугаар сарын", "7 дугаар сарын", "8 дугаар сарын", "9 дүгээр сарын", "10 дугаар сарын", "11 дүгээр сарын", "12 дугаар сарын", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yy.MM.dd",
                        D: "yyyy 'оны' MMMM d",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'оны' MMMM d H:mm",
                        F: "yyyy 'оны' MMMM d H:mm:ss",
                        M: "d MMMM",
                        Y: "yyyy 'он' MMMM"
                    }
                }
            }
        }],
    "bo-CN": ["bo-CN", "default", {
            name: "bo-CN",
            englishName: "Tibetan (PRC)",
            nativeName: "བོད་ཡིག (ཀྲུང་ཧྭ་མི་དམངས་སྤྱི་མཐུན་རྒྱལ་ཁབ།)",
            language: "bo",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["གཟའ་ཉི་མ།", "གཟའ་ཟླ་བ།", "གཟའ་མིག་དམར།", "གཟའ་ལྷག་པ།", "གཟའ་ཕུར་བུ།", "གཟའ་པ་སངས།", "གཟའ་སྤེན་པ།"],
                        namesAbbr: ["ཉི་མ།", "ཟླ་བ།", "མིག་དམར།", "ལྷག་པ།", "ཕུར་བུ།", "པ་སངས།", "སྤེན་པ།"],
                        namesShort: ["༧", "༡", "༢", "༣", "༤", "༥", "༦"]
                    },
                    months: {
                        names: ["སྤྱི་ཟླ་དང་པོ།", "སྤྱི་ཟླ་གཉིས་པ།", "སྤྱི་ཟླ་གསུམ་པ།", "སྤྱི་ཟླ་བཞི་པ།", "སྤྱི་ཟླ་ལྔ་པ།", "སྤྱི་ཟླ་དྲུག་པ།", "སྤྱི་ཟླ་བདུན་པ།", "སྤྱི་ཟླ་བརྒྱད་པ།", "སྤྱི་ཟླ་དགུ་པ།", "སྤྱི་ཟླ་བཅུ་པོ།", "སྤྱི་ཟླ་བཅུ་གཅིག་པ།", "སྤྱི་ཟླ་བཅུ་གཉིས་པ།", ""],
                        namesAbbr: ["ཟླ་ ༡", "ཟླ་ ༢", "ཟླ་ ༣", "ཟླ་ ༤", "ཟླ་ ༥", "ཟླ་ ༦", "ཟླ་ ༧", "ཟླ་ ༨", "ཟླ་ ༩", "ཟླ་ ༡༠", "ཟླ་ ༡༡", "ཟླ་ ༡༢", ""]
                    },
                    AM: ["སྔ་དྲོ", "སྔ་དྲོ", "སྔ་དྲོ"],
                    PM: ["ཕྱི་དྲོ", "ཕྱི་དྲོ", "ཕྱི་དྲོ"],
                    eras: [{ "name": "སྤྱི་ལོ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ལོའི་ཟླ' M'ཚེས' d",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm",
                        F: "yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm:ss",
                        M: "'ཟླ་' M'ཚེས'd",
                        Y: "yyyy.M"
                    }
                }
            }
        }],
    "cy-GB": ["cy-GB", "default", {
            name: "cy-GB",
            englishName: "Welsh (United Kingdom)",
            nativeName: "Cymraeg (y Deyrnas Unedig)",
            language: "cy",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "£"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Dydd Sul", "Dydd Llun", "Dydd Mawrth", "Dydd Mercher", "Dydd Iau", "Dydd Gwener", "Dydd Sadwrn"],
                        namesAbbr: ["Sul", "Llun", "Maw", "Mer", "Iau", "Gwe", "Sad"],
                        namesShort: ["Su", "Ll", "Ma", "Me", "Ia", "Gw", "Sa"]
                    },
                    months: {
                        names: ["Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr", ""],
                        namesAbbr: ["Ion", "Chwe", "Maw", "Ebr", "Mai", "Meh", "Gor", "Aws", "Med", "Hyd", "Tach", "Rhag", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "km-KH": ["km-KH", "default", {
            name: "km-KH",
            englishName: "Khmer (Cambodia)",
            nativeName: "ខ្មែរ (កម្ពុជា)",
            language: "km",
            numberFormat: {
                pattern: ["- n"],
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    symbol: "៛"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["ថ្ងៃអាទិត្យ", "ថ្ងៃច័ន្ទ", "ថ្ងៃអង្គារ", "ថ្ងៃពុធ", "ថ្ងៃព្រហស្បតិ៍", "ថ្ងៃសុក្រ", "ថ្ងៃសៅរ៍"],
                        namesAbbr: ["អាទិ.", "ច.", "អ.", "ពុ", "ព្រហ.", "សុ.", "ស."],
                        namesShort: ["អា", "ច", "អ", "ពុ", "ព្", "សុ", "ស"]
                    },
                    months: {
                        names: ["មករា", "កុម្ភៈ", "មិនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ", ""],
                        namesAbbr: ["១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩", "១០", "១១", "១២", ""]
                    },
                    AM: ["ព្រឹក", "ព្រឹក", "ព្រឹក"],
                    PM: ["ល្ងាច", "ល្ងាច", "ល្ងាច"],
                    eras: [{ "name": "មុនគ.ស.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "d MMMM yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy H:mm tt",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "'ថ្ងៃទី' dd 'ខែ' MM",
                        Y: "'ខែ' MM 'ឆ្នាំ' yyyy"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ព្រឹក", "ព្រឹក", "ព្រឹក"],
                    PM: ["ល្ងាច", "ល្ងាច", "ល្ងាច"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm tt",
                        F: "dddd, MMMM dd, yyyy HH:mm:ss"
                    }
                }
            }
        }],
    "lo-LA": ["lo-LA", "default", {
            name: "lo-LA",
            englishName: "Lao (Lao P.D.R.)",
            nativeName: "ລາວ (ສ.ປ.ປ. ລາວ)",
            language: "lo",
            numberFormat: {
                pattern: ["(n)"],
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["(n$)", "n$"],
                    groupSizes: [3, 0],
                    symbol: "₭"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["ວັນອາທິດ", "ວັນຈັນ", "ວັນອັງຄານ", "ວັນພຸດ", "ວັນພະຫັດ", "ວັນສຸກ", "ວັນເສົາ"],
                        namesAbbr: ["ອາທິດ", "ຈັນ", "ອັງຄານ", "ພຸດ", "ພະຫັດ", "ສຸກ", "ເສົາ"],
                        namesShort: ["ອ", "ຈ", "ອ", "ພ", "ພ", "ສ", "ເ"]
                    },
                    months: {
                        names: ["ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""],
                        namesAbbr: ["ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""]
                    },
                    AM: ["ເຊົ້າ", "ເຊົ້າ", "ເຊົ້າ"],
                    PM: ["ແລງ", "ແລງ", "ແລງ"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm tt",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy H:mm tt",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gl-ES": ["gl-ES", "default", {
            name: "gl-ES",
            englishName: "Galician (Galician)",
            nativeName: "galego (galego)",
            language: "gl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "luns", "martes", "mércores", "xoves", "venres", "sábado"],
                        namesAbbr: ["dom", "luns", "mar", "mér", "xov", "ven", "sáb"],
                        namesShort: ["do", "lu", "ma", "mé", "xo", "ve", "sá"]
                    },
                    months: {
                        names: ["xaneiro", "febreiro", "marzo", "abril", "maio", "xuño", "xullo", "agosto", "setembro", "outubro", "novembro", "decembro", ""],
                        namesAbbr: ["xan", "feb", "mar", "abr", "maio", "xuñ", "xull", "ago", "set", "out", "nov", "dec", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "kok-IN": ["kok-IN", "default", {
            name: "kok-IN",
            englishName: "Konkani (India)",
            nativeName: "कोंकणी (भारत)",
            language: "kok",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["आयतार", "सोमार", "मंगळार", "बुधवार", "बिरेस्तार", "सुक्रार", "शेनवार"],
                        namesAbbr: ["आय.", "सोम.", "मंगळ.", "बुध.", "बिरे.", "सुक्र.", "शेन."],
                        namesShort: ["आ", "स", "म", "ब", "ब", "स", "श"]
                    },
                    months: {
                        names: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोवेम्बर", "डिसेंबर", ""],
                        namesAbbr: ["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोवेम्बर", "डिसेंबर", ""]
                    },
                    AM: ["म.पू.", "म.पू.", "म.पू."],
                    PM: ["म.नं.", "म.नं.", "म.नं."],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "syr-SY": ["syr-SY", "default", {
            name: "syr-SY",
            englishName: "Syriac (Syria)",
            nativeName: "ܣܘܪܝܝܐ (سوريا)",
            language: "syr",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ل.س.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["ܚܕ ܒܫܒܐ", "ܬܪܝܢ ܒܫܒܐ", "ܬܠܬܐ ܒܫܒܐ", "ܐܪܒܥܐ ܒܫܒܐ", "ܚܡܫܐ ܒܫܒܐ", "ܥܪܘܒܬܐ", "ܫܒܬܐ"],
                        namesAbbr: ["܏ܐ ܏ܒܫ", "܏ܒ ܏ܒܫ", "܏ܓ ܏ܒܫ", "܏ܕ ܏ܒܫ", "܏ܗ ܏ܒܫ", "܏ܥܪܘܒ", "܏ܫܒ"],
                        namesShort: ["ܐ", "ܒ", "ܓ", "ܕ", "ܗ", "ܥ", "ܫ"]
                    },
                    months: {
                        names: ["ܟܢܘܢ ܐܚܪܝ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝ ܩܕܝܡ", "ܬܫܪܝ ܐܚܪܝ", "ܟܢܘܢ ܩܕܝܡ", ""],
                        namesAbbr: ["܏ܟܢ ܏ܒ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "܏ܬܫ ܏ܐ", "܏ܬܫ ܏ܒ", "܏ܟܢ ܏ܐ", ""]
                    },
                    AM: ["ܩ.ܛ", "ܩ.ܛ", "ܩ.ܛ"],
                    PM: ["ܒ.ܛ", "ܒ.ܛ", "ܒ.ܛ"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "si-LK": ["si-LK", "default", {
            name: "si-LK",
            englishName: "Sinhala (Sri Lanka)",
            nativeName: "සිංහල (ශ්‍රී ලංකා)",
            language: "si",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    symbol: "රු."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ඉරිදා", "සඳුදා", "අඟහරුවාදා", "බදාදා", "බ්‍රහස්පතින්දා", "සිකුරාදා", "සෙනසුරාදා"],
                        namesAbbr: ["ඉරිදා", "සඳුදා", "කුජදා", "බුදදා", "ගුරුදා", "කිවිදා", "ශනිදා"],
                        namesShort: ["ඉ", "ස", "අ", "බ", "බ්‍ර", "සි", "සෙ"]
                    },
                    months: {
                        names: ["ජනවාරි", "පෙබරවාරි", "මාර්තු", "අ‌ප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අ‌ගෝස්තු", "සැප්තැම්බර්", "ඔක්තෝබර්", "නොවැම්බර්", "දෙසැම්බර්", ""],
                        namesAbbr: ["ජන.", "පෙබ.", "මාර්තු.", "අප්‍රේල්.", "මැයි.", "ජූනි.", "ජූලි.", "අගෝ.", "සැප්.", "ඔක්.", "නොවැ.", "දෙසැ.", ""]
                    },
                    AM: ["පෙ.ව.", "පෙ.ව.", "පෙ.ව."],
                    PM: ["ප.ව.", "ප.ව.", "ප.ව."],
                    eras: [{ "name": "ක්‍රි.ව.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "yyyy MMMM' මස 'dd' වැනිදා 'dddd",
                        f: "yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm tt",
                        F: "yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm:ss tt",
                        Y: "yyyy MMMM"
                    }
                }
            }
        }],
    "iu-Cans-CA": ["iu-Cans-CA", "default", {
            name: "iu-Cans-CA",
            englishName: "Inuktitut (Syllabics, Canada)",
            nativeName: "ᐃᓄᒃᑎᑐᑦ (ᑲᓇᑕᒥ)",
            language: "iu-Cans",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["ᓈᑦᑏᖑᔭ", "ᓇᒡᒐᔾᔭᐅ", "ᐊᐃᑉᐱᖅ", "ᐱᖓᑦᓯᖅ", "ᓯᑕᒻᒥᖅ", "ᑕᓪᓕᕐᒥᖅ", "ᓯᕙᑖᕐᕕᒃ"],
                        namesAbbr: ["ᓈᑦᑏ", "ᓇᒡᒐ", "ᐊᐃᑉᐱ", "ᐱᖓᑦᓯ", "ᓯᑕ", "ᑕᓪᓕ", "ᓯᕙᑖᕐᕕᒃ"],
                        namesShort: ["ᓈ", "ᓇ", "ᐊ", "ᐱ", "ᓯ", "ᑕ", "ᓯ"]
                    },
                    months: {
                        names: ["ᔮᓐᓄᐊᕆ", "ᕖᕝᕗᐊᕆ", "ᒫᑦᓯ", "ᐄᐳᕆ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐋᒡᒌᓯ", "ᓯᑎᐱᕆ", "ᐅᑐᐱᕆ", "ᓄᕕᐱᕆ", "ᑎᓯᐱᕆ", ""],
                        namesAbbr: ["ᔮᓐᓄ", "ᕖᕝᕗ", "ᒫᑦᓯ", "ᐄᐳᕆ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐋᒡᒌ", "ᓯᑎᐱ", "ᐅᑐᐱ", "ᓄᕕᐱ", "ᑎᓯᐱ", ""]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd,MMMM dd,yyyy",
                        f: "dddd,MMMM dd,yyyy h:mm tt",
                        F: "dddd,MMMM dd,yyyy h:mm:ss tt",
                        Y: "MMMM,yyyy"
                    }
                }
            }
        }],
    "am-ET": ["am-ET", "default", {
            name: "am-ET",
            englishName: "Amharic (Ethiopia)",
            nativeName: "አማርኛ (ኢትዮጵያ)",
            language: "am",
            numberFormat: {
                decimals: 1,
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    decimals: 1,
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "ETB"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["እሑድ", "ሰኞ", "ማክሰኞ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"],
                        namesAbbr: ["እሑድ", "ሰኞ", "ማክሰ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"],
                        namesShort: ["እ", "ሰ", "ማ", "ረ", "ሐ", "ዓ", "ቅ"]
                    },
                    months: {
                        names: ["ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕረል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክተውበር", "ኖቬምበር", "ዲሴምበር", ""],
                        namesAbbr: ["ጃንዩ", "ፌብሩ", "ማርች", "ኤፕረ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክተ", "ኖቬም", "ዲሴም", ""]
                    },
                    AM: ["ጡዋት", "ጡዋት", "ጡዋት"],
                    PM: ["ከሰዓት", "ከሰዓት", "ከሰዓት"],
                    eras: [{ "name": "ዓመተ  ምሕረት", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd '፣' MMMM d 'ቀን' yyyy",
                        f: "dddd '፣' MMMM d 'ቀን' yyyy h:mm tt",
                        F: "dddd '፣' MMMM d 'ቀን' yyyy h:mm:ss tt",
                        M: "MMMM d ቀን",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ne-NP": ["ne-NP", "default", {
            name: "ne-NP",
            englishName: "Nepali (Nepal)",
            nativeName: "नेपाली (नेपाल)",
            language: "ne",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "रु"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["आइतवार", "सोमवार", "मङ्गलवार", "बुधवार", "बिहीवार", "शुक्रवार", "शनिवार"],
                        namesAbbr: ["आइत", "सोम", "मङ्गल", "बुध", "बिही", "शुक्र", "शनि"],
                        namesShort: ["आ", "सो", "म", "बु", "बि", "शु", "श"]
                    },
                    months: {
                        names: ["जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जून", "जुलाई", "अगस्त", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""],
                        namesAbbr: ["जन", "फेब", "मार्च", "अप्रिल", "मे", "जून", "जुलाई", "अग", "सेप्ट", "अक्ट", "नोभ", "डिस", ""]
                    },
                    AM: ["विहानी", "विहानी", "विहानी"],
                    PM: ["बेलुकी", "बेलुकी", "बेलुकी"],
                    eras: [{ "name": "a.d.", "start": null, "offset": 0 }],
                    patterns: {
                        Y: "MMMM,yyyy"
                    }
                }
            }
        }],
    "fy-NL": ["fy-NL", "default", {
            name: "fy-NL",
            englishName: "Frisian (Netherlands)",
            nativeName: "Frysk (Nederlân)",
            language: "fy",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["Snein", "Moandei", "Tiisdei", "Woansdei", "Tongersdei", "Freed", "Sneon"],
                        namesAbbr: ["Sn", "Mo", "Ti", "Wo", "To", "Fr", "Sn"],
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    months: {
                        names: ["jannewaris", "febrewaris", "maart", "april", "maaie", "juny", "july", "augustus", "septimber", "oktober", "novimber", "desimber", ""],
                        namesAbbr: ["jann", "febr", "mrt", "apr", "maaie", "jun", "jul", "aug", "sept", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d-M-yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd d MMMM yyyy H:mm",
                        F: "dddd d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ps-AF": ["ps-AF", "default", {
            name: "ps-AF",
            englishName: "Pashto (Afghanistan)",
            nativeName: "پښتو (افغانستان)",
            language: "ps",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                ",": "،",
                ".": ",",
                percent: {
                    pattern: ["%n-", "%n"],
                    ",": "،",
                    ".": ","
                },
                currency: {
                    pattern: ["$n-", "$n"],
                    ",": "٬",
                    ".": "٫",
                    symbol: "؋"
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    firstDay: 6,
                    days: {
                        names: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګا ښزمرى", "زمرى", "وږى", "تله", "لړم", "لنڈ ۍ", "مرغومى", ""],
                        namesAbbr: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګا ښ", "زمرى", "وږى", "تله", "لړم", "لنڈ ۍ", "مرغومى", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "ل.ه", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy, dd, MMMM, dddd",
                        f: "yyyy, dd, MMMM, dddd h:mm tt",
                        F: "yyyy, dd, MMMM, dddd h:mm:ss tt",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "fil-PH": ["fil-PH", "default", {
            name: "fil-PH",
            englishName: "Filipino (Philippines)",
            nativeName: "Filipino (Pilipinas)",
            language: "fil",
            numberFormat: {
                currency: {
                    symbol: "PhP"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Linggo", "Lunes", "Martes", "Mierkoles", "Huebes", "Biernes", "Sabado"],
                        namesAbbr: ["Lin", "Lun", "Mar", "Mier", "Hueb", "Bier", "Saba"],
                        namesShort: ["L", "L", "M", "M", "H", "B", "S"]
                    },
                    months: {
                        names: ["Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Septyembre", "Oktubre", "Nobyembre", "Disyembre", ""],
                        namesAbbr: ["En", "Peb", "Mar", "Abr", "Mayo", "Hun", "Hul", "Agos", "Sept", "Okt", "Nob", "Dis", ""]
                    },
                    eras: [{ "name": "Anno Domini", "start": null, "offset": 0 }],
                }
            }
        }],
    "dv-MV": ["dv-MV", "default", {
            name: "dv-MV",
            englishName: "Divehi (Maldives)",
            nativeName: "ދިވެހިބަސް (ދިވެހި ރާއްޖެ)",
            language: "dv",
            isRTL: true,
            numberFormat: {
                currency: {
                    pattern: ["n $-", "n $"],
                    symbol: "ރ."
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    days: {
                        names: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesAbbr: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesShort: ["އާ", "ހޯ", "އަ", "ބު", "ބު", "ހު", "ހޮ"]
                    },
                    months: {
                        names: ["މުޙައްރަމް", "ޞަފަރު", "ރަބީޢުލްއައްވަލް", "ރަބީޢުލްއާޚިރު", "ޖުމާދަލްއޫލާ", "ޖުމާދަލްއާޚިރާ", "ރަޖަބް", "ޝަޢްބާން", "ރަމަޟާން", "ޝައްވާލް", "ޛުލްޤަޢިދާ", "ޛުލްޙިއްޖާ", ""],
                        namesAbbr: ["މުޙައްރަމް", "ޞަފަރު", "ރަބީޢުލްއައްވަލް", "ރަބީޢުލްއާޚިރު", "ޖުމާދަލްއޫލާ", "ޖުމާދަލްއާޚިރާ", "ރަޖަބް", "ޝަޢްބާން", "ރަމަޟާން", "ޝައްވާލް", "ޛުލްޤަޢިދާ", "ޛުލްޙިއްޖާ", ""]
                    },
                    AM: ["މކ", "މކ", "މކ"],
                    PM: ["މފ", "މފ", "މފ"],
                    eras: [{ "name": "ހިޖްރީ", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd/MM/yyyy HH:mm",
                        F: "dd/MM/yyyy HH:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    days: {
                        names: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesAbbr: ["އާދީއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
                        namesShort: ["އާ", "ހޯ", "އަ", "ބު", "ބު", "ހު", "ހޮ"]
                    },
                    months: {
                        names: ["ޖަނަވަރީ", "ފެބްރުއަރީ", "މާޗް", "އޭޕްރިލް", "މެއި", "ޖޫން", "ޖުލައި", "އޯގަސްޓް", "ސެޕްޓެމްބަރ", "އޮކްޓޯބަރ", "ނޮވެމްބަރ", "ޑިސެމްބަރ", ""],
                        namesAbbr: ["ޖަނަވަރީ", "ފެބްރުއަރީ", "މާޗް", "އޭޕްރިލް", "މެއި", "ޖޫން", "ޖުލައި", "އޯގަސްޓް", "ސެޕްޓެމްބަރ", "އޮކްޓޯބަރ", "ނޮވެމްބަރ", "ޑިސެމްބަރ", ""]
                    },
                    AM: ["މކ", "މކ", "މކ"],
                    PM: ["މފ", "މފ", "މފ"],
                    eras: [{ "name": "މީލާދީ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yy",
                        D: "ddd, yyyy MMMM dd",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "ddd, yyyy MMMM dd HH:mm",
                        F: "ddd, yyyy MMMM dd HH:mm:ss",
                        Y: "yyyy, MMMM"
                    }
                }
            }
        }],
    "ha-Latn-NG": ["ha-Latn-NG", "default", {
            name: "ha-Latn-NG",
            englishName: "Hausa (Latin, Nigeria)",
            nativeName: "Hausa (Nigeria)",
            language: "ha-Latn",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Lahadi", "Litinin", "Talata", "Laraba", "Alhamis", "Juma'a", "Asabar"],
                        namesAbbr: ["Lah", "Lit", "Tal", "Lar", "Alh", "Jum", "Asa"],
                        namesShort: ["L", "L", "T", "L", "A", "J", "A"]
                    },
                    months: {
                        names: ["Januwaru", "Febreru", "Maris", "Afrilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktocba", "Nuwamba", "Disamba", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Afr", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""]
                    },
                    AM: ["Safe", "safe", "SAFE"],
                    PM: ["Yamma", "yamma", "YAMMA"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "yo-NG": ["yo-NG", "default", {
            name: "yo-NG",
            englishName: "Yoruba (Nigeria)",
            nativeName: "Yoruba (Nigeria)",
            language: "yo",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Aiku", "Aje", "Isegun", "Ojo'ru", "Ojo'bo", "Eti", "Abameta"],
                        namesAbbr: ["Aik", "Aje", "Ise", "Ojo", "Ojo", "Eti", "Aba"],
                        namesShort: ["A", "A", "I", "O", "O", "E", "A"]
                    },
                    months: {
                        names: ["Osu kinni", "Osu keji", "Osu keta", "Osu kerin", "Osu karun", "Osu kefa", "Osu keje", "Osu kejo", "Osu kesan", "Osu kewa", "Osu kokanla", "Osu keresi", ""],
                        namesAbbr: ["kin.", "kej.", "ket.", "ker.", "kar.", "kef.", "kej.", "kej.", "kes.", "kew.", "kok.", "ker.", ""]
                    },
                    AM: ["Owuro", "owuro", "OWURO"],
                    PM: ["Ale", "ale", "ALE"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "quz-BO": ["quz-BO", "default", {
            name: "quz-BO",
            englishName: "Quechua (Bolivia)",
            nativeName: "runasimi (Qullasuyu)",
            language: "quz",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "$b"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["intichaw", "killachaw", "atipachaw", "quyllurchaw", "Ch' askachaw", "Illapachaw", "k'uychichaw"],
                        namesAbbr: ["int", "kil", "ati", "quy", "Ch'", "Ill", "k'u"],
                        namesShort: ["d", "k", "a", "m", "h", "b", "k"]
                    },
                    months: {
                        names: ["Qulla puquy", "Hatun puquy", "Pauqar waray", "ayriwa", "Aymuray", "Inti raymi", "Anta Sitwa", "Qhapaq Sitwa", "Uma raymi", "Kantaray", "Ayamarq'a", "Kapaq Raymi", ""],
                        namesAbbr: ["Qul", "Hat", "Pau", "ayr", "Aym", "Int", "Ant", "Qha", "Uma", "Kan", "Aya", "Kap", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "nso-ZA": ["nso-ZA", "default", {
            name: "nso-ZA",
            englishName: "Sesotho sa Leboa (South Africa)",
            nativeName: "Sesotho sa Leboa (Afrika Borwa)",
            language: "nso",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Lamorena", "Mošupologo", "Labobedi", "Laboraro", "Labone", "Labohlano", "Mokibelo"],
                        namesAbbr: ["Lam", "Moš", "Lbb", "Lbr", "Lbn", "Lbh", "Mok"],
                        namesShort: ["L", "M", "L", "L", "L", "L", "M"]
                    },
                    months: {
                        names: ["Pherekgong", "Hlakola", "Mopitlo", "Moranang", "Mosegamanye", "Ngoatobošego", "Phuphu", "Phato", "Lewedi", "Diphalana", "Dibatsela", "Manthole", ""],
                        namesAbbr: ["Pher", "Hlak", "Mop", "Mor", "Mos", "Ngwat", "Phup", "Phat", "Lew", "Dip", "Dib", "Man", ""]
                    },
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ba-RU": ["ba-RU", "default", {
            name: "ba-RU",
            englishName: "Bashkir (Russia)",
            nativeName: "Башҡорт (Россия)",
            language: "ba",
            numberFormat: {
                ",": " ",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ",",
                    symbol: "һ."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Йәкшәмбе", "Дүшәмбе", "Шишәмбе", "Шаршамбы", "Кесаҙна", "Йома", "Шәмбе"],
                        namesAbbr: ["Йш", "Дш", "Шш", "Шр", "Кс", "Йм", "Шб"],
                        namesShort: ["Йш", "Дш", "Шш", "Шр", "Кс", "Йм", "Шб"]
                    },
                    months: {
                        names: ["ғинуар", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""],
                        namesAbbr: ["ғин", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d MMMM yyyy 'й'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy 'й' H:mm",
                        F: "d MMMM yyyy 'й' H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "lb-LU": ["lb-LU", "default", {
            name: "lb-LU",
            englishName: "Luxembourgish (Luxembourg)",
            nativeName: "Lëtzebuergesch (Luxembourg)",
            language: "lb",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sonndeg", "Méindeg", "Dënschdeg", "Mëttwoch", "Donneschdeg", "Freideg", "Samschdeg"],
                        namesAbbr: ["Son", "Méi", "Dën", "Mët", "Don", "Fre", "Sam"],
                        namesShort: ["So", "Mé", "Dë", "Më", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "Mäerz", "Abrëll", "Mee", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mäe", "Abr", "Mee", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "kl-GL": ["kl-GL", "default", {
            name: "kl-GL",
            englishName: "Greenlandic (Greenland)",
            nativeName: "kalaallisut (Kalaallit Nunaat)",
            language: "kl",
            numberFormat: {
                ",": ".",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 0],
                    ",": ".",
                    ".": ",",
                    symbol: "kr."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["sapaat", "ataasinngorneq", "marlunngorneq", "pingasunngorneq", "sisamanngorneq", "tallimanngorneq", "arfininngorneq"],
                        namesAbbr: ["sap", "ata", "mar", "ping", "sis", "tal", "arf"],
                        namesShort: ["sa", "at", "ma", "pi", "si", "ta", "ar"]
                    },
                    months: {
                        names: ["januari", "februari", "martsi", "apriili", "maaji", "juni", "juli", "aggusti", "septembari", "oktobari", "novembari", "decembari", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ig-NG": ["ig-NG", "default", {
            name: "ig-NG",
            englishName: "Igbo (Nigeria)",
            nativeName: "Igbo (Nigeria)",
            language: "ig",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Aiku", "Aje", "Isegun", "Ojo'ru", "Ojo'bo", "Eti", "Abameta"],
                        namesAbbr: ["Aik", "Aje", "Ise", "Ojo", "Ojo", "Eti", "Aba"],
                        namesShort: ["A", "A", "I", "O", "O", "E", "A"]
                    },
                    months: {
                        names: ["Onwa mbu", "Onwa ibua", "Onwa ato", "Onwa ano", "Onwa ise", "Onwa isi", "Onwa asa", "Onwa asato", "Onwa itolu", "Onwa iri", "Onwa iri n'ofu", "Onwa iri n'ibua", ""],
                        namesAbbr: ["mbu.", "ibu.", "ato.", "ano.", "ise", "isi", "asa", "asa.", "ito.", "iri.", "n'of.", "n'ib.", ""]
                    },
                    AM: ["Ututu", "ututu", "UTUTU"],
                    PM: ["Efifie", "efifie", "EFIFIE"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "ii-CN": ["ii-CN", "default", {
            name: "ii-CN",
            englishName: "Yi (PRC)",
            nativeName: "ꆈꌠꁱꂷ (ꍏꉸꏓꂱꇭꉼꇩ)",
            language: "ii",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["ꑭꆏꑍ", "ꆏꊂ꒔", "ꆏꊂꑍ", "ꆏꊂꌕ", "ꆏꊂꇖ", "ꆏꊂꉬ", "ꆏꊂꃘ"],
                        namesAbbr: ["ꑭꆏ", "ꆏ꒔", "ꆏꑍ", "ꆏꌕ", "ꆏꇖ", "ꆏꉬ", "ꆏꃘ"],
                        namesShort: ["ꆏ", "꒔", "ꑍ", "ꌕ", "ꇖ", "ꉬ", "ꃘ"]
                    },
                    months: {
                        names: ["ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""],
                        namesAbbr: ["ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""]
                    },
                    AM: ["ꂵꆪꈌꈐ", "ꂵꆪꈌꈐ", "ꂵꆪꈌꈐ"],
                    PM: ["ꂵꆪꈌꉈ", "ꂵꆪꈌꉈ", "ꂵꆪꈌꉈ"],
                    eras: [{ "name": "ꇬꑼ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ꈎ' M'ꆪ' d'ꑍ'",
                        t: "tt h:mm",
                        T: "H:mm:ss",
                        f: "yyyy'ꈎ' M'ꆪ' d'ꑍ' tt h:mm",
                        F: "yyyy'ꈎ' M'ꆪ' d'ꑍ' H:mm:ss",
                        M: "M'ꆪ' d'ꑍ'",
                        Y: "yyyy'ꈎ' M'ꆪ'"
                    }
                }
            }
        }],
    "arn-CL": ["arn-CL", "default", {
            name: "arn-CL",
            englishName: "Mapudungun (Chile)",
            nativeName: "Mapudungun (Chile)",
            language: "arn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "moh-CA": ["moh-CA", "default", {
            name: "moh-CA",
            englishName: "Mohawk (Mohawk)",
            nativeName: "Kanien'kéha",
            language: "moh",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Awentatokentì:ke", "Awentataón'ke", "Ratironhia'kehronòn:ke", "Soséhne", "Okaristiiáhne", "Ronwaia'tanentaktonhne", "Entákta"],
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    months: {
                        names: ["Tsothohrkó:Wa", "Enniska", "Enniskó:Wa", "Onerahtókha", "Onerahtohkó:Wa", "Ohiari:Ha", "Ohiarihkó:Wa", "Seskéha", "Seskehkó:Wa", "Kenténha", "Kentenhkó:Wa", "Tsothóhrha", ""]
                    }
                }
            }
        }],
    "br-FR": ["br-FR", "default", {
            name: "br-FR",
            englishName: "Breton (France)",
            nativeName: "brezhoneg (Frañs)",
            language: "br",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sul", "Lun", "Meurzh", "Merc'her", "Yaou", "Gwener", "Sadorn"],
                        namesAbbr: ["Sul", "Lun", "Meu.", "Mer.", "Yaou", "Gwe.", "Sad."],
                        namesShort: ["Su", "Lu", "Mz", "Mc", "Ya", "Gw", "Sa"]
                    },
                    months: {
                        names: ["Genver", "C'hwevrer", "Meurzh", "Ebrel", "Mae", "Mezheven", "Gouere", "Eost", "Gwengolo", "Here", "Du", "Kerzu", ""],
                        namesAbbr: ["Gen.", "C'hwe.", "Meur.", "Ebr.", "Mae", "Mezh.", "Goue.", "Eost", "Gwen.", "Here", "Du", "Kzu", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "g. J.-K.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ug-CN": ["ug-CN", "default", {
            name: "ug-CN",
            englishName: "Uyghur (PRC)",
            nativeName: "ئۇيغۇرچە (جۇڭخۇا خەلق جۇمھۇرىيىتى)",
            language: "ug",
            isRTL: true,
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["يەكشەنبە", "دۈشەنبە", "سەيشەنبە", "چارشەنبە", "پەيشەنبە", "جۈمە", "شەنبە"],
                        namesAbbr: ["يە", "دۈ", "سە", "چا", "پە", "جۈ", "شە"],
                        namesShort: ["ي", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["1-ئاي", "2-ئاي", "3-ئاي", "4-ئاي", "5-ئاي", "6-ئاي", "7-ئاي", "8-ئاي", "9-ئاي", "10-ئاي", "11-ئاي", "12-ئاي", ""],
                        namesAbbr: ["1-ئاي", "2-ئاي", "3-ئاي", "4-ئاي", "5-ئاي", "6-ئاي", "7-ئاي", "8-ئاي", "9-ئاي", "10-ئاي", "11-ئاي", "12-ئاي", ""]
                    },
                    AM: ["چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن", "چۈشتىن بۇرۇن"],
                    PM: ["چۈشتىن كېيىن", "چۈشتىن كېيىن", "چۈشتىن كېيىن"],
                    eras: [{ "name": "مىلادى", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-M-d",
                        D: "yyyy-'يىلى' MMMM d-'كۈنى،'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy-'يىلى' MMMM d-'كۈنى،' H:mm",
                        F: "yyyy-'يىلى' MMMM d-'كۈنى،' H:mm:ss",
                        M: "MMMM d'-كۈنى'",
                        Y: "yyyy-'يىلى' MMMM"
                    }
                }
            }
        }],
    "mi-NZ": ["mi-NZ", "default", {
            name: "mi-NZ",
            englishName: "Maori (New Zealand)",
            nativeName: "Reo Māori (Aotearoa)",
            language: "mi",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Rātapu", "Rāhina", "Rātū", "Rāapa", "Rāpare", "Rāmere", "Rāhoroi"],
                        namesAbbr: ["Ta", "Hi", "Tū", "Apa", "Pa", "Me", "Ho"],
                        namesShort: ["Ta", "Hi", "Tū", "Aa", "Pa", "Me", "Ho"]
                    },
                    months: {
                        names: ["Kohi-tātea", "Hui-tanguru", "Poutū-te-rangi", "Paenga-whāwhā", "Haratua", "Pipiri", "Hōngongoi", "Here-turi-kōkā", "Mahuru", "Whiringa-ā-nuku", "Whiringa-ā-rangi", "Hakihea", ""],
                        namesAbbr: ["Kohi", "Hui", "Pou", "Pae", "Hara", "Pipi", "Hōngo", "Here", "Mahu", "Nuku", "Rangi", "Haki", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd MMMM, yyyy",
                        f: "dddd, dd MMMM, yyyy h:mm tt",
                        F: "dddd, dd MMMM, yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM, yy"
                    }
                }
            }
        }],
    "oc-FR": ["oc-FR", "default", {
            name: "oc-FR",
            englishName: "Occitan (France)",
            nativeName: "Occitan (França)",
            language: "oc",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimenge", "diluns", "dimars", "dimècres", "dijòus", "divendres", "dissabte"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mèc.", "jòu.", "ven.", "sab."],
                        namesShort: ["di", "lu", "ma", "mè", "jò", "ve", "sa"]
                    },
                    months: {
                        names: ["genier", "febrier", "març", "abril", "mai", "junh", "julh", "agost", "setembre", "octobre", "novembre", "desembre", ""],
                        namesAbbr: ["gen.", "feb.", "mar.", "abr.", "mai.", "jun.", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""]
                    },
                    monthsGenitive: {
                        names: ["de genier", "de febrier", "de març", "d'abril", "de mai", "de junh", "de julh", "d'agost", "de setembre", "d'octobre", "de novembre", "de desembre", ""],
                        namesAbbr: ["gen.", "feb.", "mar.", "abr.", "mai.", "jun.", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "après Jèsus-Crist", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd,' lo 'd MMMM' de 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd,' lo 'd MMMM' de 'yyyy HH:mm",
                        F: "dddd,' lo 'd MMMM' de 'yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "co-FR": ["co-FR", "default", {
            name: "co-FR",
            englishName: "Corsican (France)",
            nativeName: "Corsu (France)",
            language: "co",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dumenica", "luni", "marti", "mercuri", "ghjovi", "venderi", "sabbatu"],
                        namesAbbr: ["dum.", "lun.", "mar.", "mer.", "ghj.", "ven.", "sab."],
                        namesShort: ["du", "lu", "ma", "me", "gh", "ve", "sa"]
                    },
                    months: {
                        names: ["ghjennaghju", "ferraghju", "marzu", "aprile", "maghju", "ghjunghju", "lugliu", "aostu", "settembre", "ottobre", "nuvembre", "dicembre", ""],
                        namesAbbr: ["ghje", "ferr", "marz", "apri", "magh", "ghju", "lugl", "aost", "sett", "otto", "nuve", "dice", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "dopu J-C", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gsw-FR": ["gsw-FR", "default", {
            name: "gsw-FR",
            englishName: "Alsatian (France)",
            nativeName: "Elsässisch (Frànkrisch)",
            language: "gsw",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Sundàà", "Mondàà", "Dienschdàà", "Mittwuch", "Dunnerschdàà", "Fridàà", "Sàmschdàà"],
                        namesAbbr: ["Su.", "Mo.", "Di.", "Mi.", "Du.", "Fr.", "Sà."],
                        namesShort: ["Su", "Mo", "Di", "Mi", "Du", "Fr", "Sà"]
                    },
                    months: {
                        names: ["Jänner", "Feverje", "März", "Àpril", "Mai", "Jüni", "Jüli", "Augscht", "September", "Oktower", "Nowember", "Dezember", ""],
                        namesAbbr: ["Jän.", "Fev.", "März", "Apr.", "Mai", "Jüni", "Jüli", "Aug.", "Sept.", "Okt.", "Now.", "Dez.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "Vor J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sah-RU": ["sah-RU", "default", {
            name: "sah-RU",
            englishName: "Yakut (Russia)",
            nativeName: "саха (Россия)",
            language: "sah",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "с."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["баскыһыанньа", "бэнидиэнньик", "оптуорунньук", "сэрэдэ", "чэппиэр", "бээтинсэ", "субуота"],
                        namesAbbr: ["Бс", "Бн", "Оп", "Ср", "Чп", "Бт", "Сб"],
                        namesShort: ["Бс", "Бн", "Оп", "Ср", "Чп", "Бт", "Сб"]
                    },
                    months: {
                        names: ["Тохсунньу", "Олунньу", "Кулун тутар", "Муус устар", "Ыам ыйа", "Бэс ыйа", "От ыйа", "Атырдьах ыйа", "Балаҕан ыйа", "Алтынньы", "Сэтинньи", "Ахсынньы", ""],
                        namesAbbr: ["тхс", "олн", "кул", "мст", "ыам", "бэс", "отй", "атр", "блҕ", "алт", "стн", "ахс", ""]
                    },
                    monthsGenitive: {
                        names: ["тохсунньу", "олунньу", "кулун тутар", "муус устар", "ыам ыйын", "бэс ыйын", "от ыйын", "атырдьах ыйын", "балаҕан ыйын", "алтынньы", "сэтинньи", "ахсынньы", ""],
                        namesAbbr: ["тхс", "олн", "кул", "мст", "ыам", "бэс", "отй", "атр", "блҕ", "алт", "стн", "ахс", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "MM.dd.yyyy",
                        D: "MMMM d yyyy 'с.'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d yyyy 'с.' H:mm",
                        F: "MMMM d yyyy 'с.' H:mm:ss",
                        Y: "MMMM yyyy 'с.'"
                    }
                }
            }
        }],
    "qut-GT": ["qut-GT", "default", {
            name: "qut-GT",
            englishName: "K'iche (Guatemala)",
            nativeName: "K'iche (Guatemala)",
            language: "qut",
            numberFormat: {
                currency: {
                    symbol: "Q"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["juq'ij", "kaq'ij", "oxq'ij", "kajq'ij", "joq'ij", "waqq'ij", "wuqq'ij"],
                        namesAbbr: ["juq", "kaq", "oxq", "kajq", "joq", "waqq", "wuqq"],
                        namesShort: ["ju", "ka", "ox", "ka", "jo", "wa", "wu"]
                    },
                    months: {
                        names: ["nab'e ik'", "ukab' ik'", "rox ik'", "ukaj ik'", "uro' ik'", "uwaq ik'", "uwuq ik'", "uwajxaq ik'", "ub'elej ik'", "ulaj ik'", "ujulaj ik'", "ukab'laj ik'", ""],
                        namesAbbr: ["nab'e", "ukab", "rox", "ukaj", "uro", "uwaq", "uwuq", "uwajxaq", "ub'elej", "ulaj", "ujulaj", "ukab'laj", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "rw-RW": ["rw-RW", "default", {
            name: "rw-RW",
            englishName: "Kinyarwanda (Rwanda)",
            nativeName: "Kinyarwanda (Rwanda)",
            language: "rw",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "RWF"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Ku wa mbere", "Ku wa kabiri", "Ku wa gatatu", "Ku wa kane", "Ku wa gatanu", "Ku wa gatandatu", "Ku cyumweru"],
                        namesAbbr: ["mbe.", "kab.", "gat.", "kan.", "gat.", "gat.", "cyu."],
                        namesShort: ["mb", "ka", "ga", "ka", "ga", "ga", "cy"]
                    },
                    months: {
                        names: ["Mutarama", "Gashyantare", "Werurwe", "Mata", "Gicurasi", "Kamena", "Nyakanga", "Kanama", "Nzeli", "Ukwakira", "Ugushyingo", "Ukuboza", ""],
                        namesAbbr: ["Mut", "Gas", "Wer", "Mat", "Gic", "Kam", "Nya", "Kan", "Nze", "Ukwa", "Ugu", "Uku", ""]
                    },
                    AM: ["saa moya z.m.", "saa moya z.m.", "SAA MOYA Z.M."],
                    PM: ["saa moya z.n.", "saa moya z.n.", "SAA MOYA Z.N."],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                }
            }
        }],
    "wo-SN": ["wo-SN", "default", {
            name: "wo-SN",
            englishName: "Wolof (Senegal)",
            nativeName: "Wolof (Sénégal)",
            language: "wo",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "XOF"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "prs-AF": ["prs-AF", "default", {
            name: "prs-AF",
            englishName: "Dari (Afghanistan)",
            nativeName: "درى (افغانستان)",
            language: "prs",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["%n-", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$n-", "$n"],
                    symbol: "؋"
                }
            },
            calendars: {
                standard: {
                    name: "Hijri",
                    firstDay: 5,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        f: "dd/MM/yyyy h:mm tt",
                        F: "dd/MM/yyyy h:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_Localized: {
                    firstDay: 5,
                    days: {
                        names: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesAbbr: ["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
                        namesShort: ["ی", "د", "س", "چ", "پ", "ج", "ش"]
                    },
                    months: {
                        names: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګاښ", "زمرى", "وږى", "تله", "لړم", "ليندۍ", "مرغومى", ""],
                        namesAbbr: ["سلواغه", "كب", "ورى", "غويى", "غبرګولى", "چنګاښ", "زمرى", "وږى", "تله", "لړم", "ليندۍ", "مرغومى", ""]
                    },
                    AM: ["غ.م", "غ.م", "غ.م"],
                    PM: ["غ.و", "غ.و", "غ.و"],
                    eras: [{ "name": "ل.ه", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy, dd, MMMM, dddd",
                        f: "yyyy, dd, MMMM, dddd h:mm tt",
                        F: "yyyy, dd, MMMM, dddd h:mm:ss tt",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "gd-GB": ["gd-GB", "default", {
            name: "gd-GB",
            englishName: "Scottish Gaelic (United Kingdom)",
            nativeName: "Gàidhlig (An Rìoghachd Aonaichte)",
            language: "gd",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "£"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Didòmhnaich", "Diluain", "Dimàirt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne"],
                        namesAbbr: ["Dòm", "Lua", "Mài", "Cia", "Ard", "Hao", "Sat"],
                        namesShort: ["D", "L", "M", "C", "A", "H", "S"]
                    },
                    months: {
                        names: ["Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd", ""],
                        namesAbbr: ["Fao", "Gea", "Màr", "Gib", "Cèi", "Ògm", "Iuc", "Lùn", "Sul", "Dàm", "Sam", "Dùb", ""]
                    },
                    AM: ["m", "m", "M"],
                    PM: ["f", "f", "F"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-IQ": ["ar-IQ", "default", {
            name: "ar-IQ",
            englishName: "Arabic (Iraq)",
            nativeName: "العربية (العراق)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "د.ع.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "zh-CN": ["zh-CN", "default", {
            name: "zh-CN",
            englishName: "Chinese (Simplified, PRC)",
            nativeName: "中文(中华人民共和国)",
            language: "zh-CHS",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "de-CH": ["de-CH", "default", {
            name: "de-CH",
            englishName: "German (Switzerland)",
            nativeName: "Deutsch (Schweiz)",
            language: "de",
            numberFormat: {
                ",": "'",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "Fr."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "en-GB": ["en-GB", "default", {
            name: "en-GB",
            englishName: "English (United Kingdom)",
            nativeName: "English (United Kingdom)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "£"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-MX": ["es-MX", "default", {
            name: "es-MX",
            englishName: "Spanish (Mexico)",
            nativeName: "Español (México)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fr-BE": ["fr-BE", "default", {
            name: "fr-BE",
            englishName: "French (Belgium)",
            nativeName: "français (Belgique)",
            language: "fr",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "it-CH": ["it-CH", "default", {
            name: "it-CH",
            englishName: "Italian (Switzerland)",
            nativeName: "italiano (Svizzera)",
            language: "it",
            numberFormat: {
                ",": "'",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "fr."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"],
                        namesAbbr: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
                        namesShort: ["do", "lu", "ma", "me", "gi", "ve", "sa"]
                    },
                    months: {
                        names: ["gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""],
                        namesAbbr: ["gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "nl-BE": ["nl-BE", "default", {
            name: "nl-BE",
            englishName: "Dutch (Belgium)",
            nativeName: "Nederlands (België)",
            language: "nl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"],
                        namesAbbr: ["zo", "ma", "di", "wo", "do", "vr", "za"],
                        namesShort: ["zo", "ma", "di", "wo", "do", "vr", "za"]
                    },
                    months: {
                        names: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd d MMMM yyyy H:mm",
                        F: "dddd d MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "nn-NO": ["nn-NO", "default", {
            name: "nn-NO",
            englishName: "Norwegian, Nynorsk (Norway)",
            nativeName: "norsk, nynorsk (Noreg)",
            language: "nn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "måndag", "tysdag", "onsdag", "torsdag", "fredag", "laurdag"],
                        namesAbbr: ["sø", "må", "ty", "on", "to", "fr", "la"],
                        namesShort: ["sø", "må", "ty", "on", "to", "fr", "la"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "pt-PT": ["pt-PT", "default", {
            name: "pt-PT",
            englishName: "Portuguese (Portugal)",
            nativeName: "português (Portugal)",
            language: "pt",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"],
                        namesAbbr: ["dom", "seg", "ter", "qua", "qui", "sex", "sáb"],
                        namesShort: ["D", "S", "T", "Q", "Q", "S", "S"]
                    },
                    months: {
                        names: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro", ""],
                        namesAbbr: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dddd, d' de 'MMMM' de 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d' de 'MMMM' de 'yyyy HH:mm",
                        F: "dddd, d' de 'MMMM' de 'yyyy HH:mm:ss",
                        M: "d/M",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Latn-CS": ["sr-Latn-CS", "default", {
            name: "sr-Latn-CS",
            englishName: "Serbian (Latin, Serbia and Montenegro (Former))",
            nativeName: "srpski (Srbija i Crna Gora (Prethodno))",
            language: "sr-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Din."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sv-FI": ["sv-FI", "default", {
            name: "sv-FI",
            englishName: "Swedish (Finland)",
            nativeName: "svenska (Finland)",
            language: "sv",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"],
                        namesAbbr: ["sö", "må", "ti", "on", "to", "fr", "lö"],
                        namesShort: ["sö", "må", "ti", "on", "to", "fr", "lö"]
                    },
                    months: {
                        names: ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "'den 'd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "'den 'd MMMM yyyy HH:mm",
                        F: "'den 'd MMMM yyyy HH:mm:ss",
                        M: "'den 'd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "az-Cyrl-AZ": ["az-Cyrl-AZ", "default", {
            name: "az-Cyrl-AZ",
            englishName: "Azeri (Cyrillic, Azerbaijan)",
            nativeName: "Азәрбајҹан (Азәрбајҹан)",
            language: "az-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "ман."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Базар", "Базар ертәси", "Чәршәнбә ахшамы", "Чәршәнбә", "Ҹүмә ахшамы", "Ҹүмә", "Шәнбә"],
                        namesAbbr: ["Б", "Бе", "Ча", "Ч", "Ҹа", "Ҹ", "Ш"],
                        namesShort: ["Б", "Бе", "Ча", "Ч", "Ҹа", "Ҹ", "Ш"]
                    },
                    months: {
                        names: ["Јанвар", "Феврал", "Март", "Апрел", "Мај", "Ијун", "Ијул", "Август", "Сентјабр", "Октјабр", "Нојабр", "Декабр", ""],
                        namesAbbr: ["Јан", "Фев", "Мар", "Апр", "Мај", "Ијун", "Ијул", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["јанвар", "феврал", "март", "апрел", "мај", "ијун", "ијул", "август", "сентјабр", "октјабр", "нојабр", "декабр", ""],
                        namesAbbr: ["Јан", "Фев", "Мар", "Апр", "мая", "ијун", "ијул", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "dsb-DE": ["dsb-DE", "default", {
            name: "dsb-DE",
            englishName: "Lower Sorbian (Germany)",
            nativeName: "dolnoserbšćina (Nimska)",
            language: "dsb",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["njeźela", "ponjeźele", "wałtora", "srjoda", "stwortk", "pětk", "sobota"],
                        namesAbbr: ["nje", "pon", "wał", "srj", "stw", "pět", "sob"],
                        namesShort: ["n", "p", "w", "s", "s", "p", "s"]
                    },
                    months: {
                        names: ["januar", "februar", "měrc", "apryl", "maj", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "maj", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["januara", "februara", "měrca", "apryla", "maja", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "maj", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "po Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "dddd, 'dnja' d. MMMM yyyy",
                        t: "H.mm 'goź.'",
                        T: "H:mm:ss",
                        f: "dddd, 'dnja' d. MMMM yyyy H.mm 'goź.'",
                        F: "dddd, 'dnja' d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "se-SE": ["se-SE", "default", {
            name: "se-SE",
            englishName: "Sami, Northern (Sweden)",
            nativeName: "davvisámegiella (Ruoŧŧa)",
            language: "se",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["sotnabeaivi", "mánnodat", "disdat", "gaskavahkku", "duorastat", "bearjadat", "lávvardat"],
                        namesAbbr: ["sotn", "mán", "dis", "gask", "duor", "bear", "láv"],
                        namesShort: ["s", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđajagimánu", "guovvamánu", "njukčamánu", "cuoŋománu", "miessemánu", "geassemánu", "suoidnemánu", "borgemánu", "čakčamánu", "golggotmánu", "skábmamánu", "juovlamánu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ga-IE": ["ga-IE", "default", {
            name: "ga-IE",
            englishName: "Irish (Ireland)",
            nativeName: "Gaeilge (Éire)",
            language: "ga",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Dé Domhnaigh", "Dé Luain", "Dé Máirt", "Dé Céadaoin", "Déardaoin", "Dé hAoine", "Dé Sathairn"],
                        namesAbbr: ["Domh", "Luan", "Máir", "Céad", "Déar", "Aoi", "Sath"],
                        namesShort: ["Do", "Lu", "Má", "Cé", "De", "Ao", "Sa"]
                    },
                    months: {
                        names: ["Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", "Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig", ""],
                        namesAbbr: ["Ean", "Feabh", "Már", "Aib", "Bealt", "Meith", "Iúil", "Lún", "M.Fómh", "D.Fómh", "Samh", "Noll", ""]
                    },
                    AM: ["r.n.", "r.n.", "R.N."],
                    PM: ["i.n.", "i.n.", "I.N."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ms-BN": ["ms-BN", "default", {
            name: "ms-BN",
            englishName: "Malay (Brunei Darussalam)",
            nativeName: "Bahasa Melayu (Brunei Darussalam)",
            language: "ms",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    decimals: 0,
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesAbbr: ["Ahad", "Isnin", "Sel", "Rabu", "Khamis", "Jumaat", "Sabtu"],
                        namesShort: ["A", "I", "S", "R", "K", "J", "S"]
                    },
                    months: {
                        names: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""],
                        namesAbbr: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogos", "Sept", "Okt", "Nov", "Dis", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM yyyy H:mm",
                        F: "dd MMMM yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "uz-Cyrl-UZ": ["uz-Cyrl-UZ", "default", {
            name: "uz-Cyrl-UZ",
            englishName: "Uzbek (Cyrillic, Uzbekistan)",
            nativeName: "Ўзбек (Ўзбекистон)",
            language: "uz-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "сўм"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["якшанба", "душанба", "сешанба", "чоршанба", "пайшанба", "жума", "шанба"],
                        namesAbbr: ["якш", "дш", "сш", "чш", "пш", "ж", "ш"],
                        namesShort: ["я", "д", "с", "ч", "п", "ж", "ш"]
                    },
                    months: {
                        names: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["январ", "феврал", "март", "апрел", "май", "июн", "июл", "август", "сентябр", "октябр", "ноябр", "декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "мая", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "yyyy 'йил' d-MMMM",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'йил' d-MMMM HH:mm",
                        F: "yyyy 'йил' d-MMMM HH:mm:ss",
                        M: "d-MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "bn-BD": ["bn-BD", "default", {
            name: "bn-BD",
            englishName: "Bengali (Bangladesh)",
            nativeName: "বাংলা (বাংলাদেশ)",
            language: "bn",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    pattern: ["-%n", "%n"],
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "৳"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    ":": ".",
                    firstDay: 1,
                    days: {
                        names: ["রবিবার", "সোমবার", "মঙ্গলবার", "বুধবার", "বৃহস্পতিবার", "শুক্রবার", "শনিবার"],
                        namesAbbr: ["রবি.", "সোম.", "মঙ্গল.", "বুধ.", "বৃহস্পতি.", "শুক্র.", "শনি."],
                        namesShort: ["র", "স", "ম", "ব", "ব", "শ", "শ"]
                    },
                    months: {
                        names: ["জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""],
                        namesAbbr: ["জানু.", "ফেব্রু.", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগ.", "সেপ্টে.", "অক্টো.", "নভে.", "ডিসে.", ""]
                    },
                    AM: ["পুর্বাহ্ন", "পুর্বাহ্ন", "পুর্বাহ্ন"],
                    PM: ["অপরাহ্ন", "অপরাহ্ন", "অপরাহ্ন"],
                    patterns: {
                        d: "dd-MM-yy",
                        D: "dd MMMM yyyy",
                        t: "HH.mm",
                        T: "HH.mm.ss",
                        f: "dd MMMM yyyy HH.mm",
                        F: "dd MMMM yyyy HH.mm.ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "mn-Mong-CN": ["mn-Mong-CN", "default", {
            name: "mn-Mong-CN",
            englishName: "Mongolian (Traditional Mongolian, PRC)",
            nativeName: "ᠮᠤᠨᠭᠭᠤᠯ ᠬᠡᠯᠡ (ᠪᠦᠭᠦᠳᠡ ᠨᠠᠢᠷᠠᠮᠳᠠᠬᠤ ᠳᠤᠮᠳᠠᠳᠤ ᠠᠷᠠᠳ ᠣᠯᠣᠰ)",
            language: "mn-Mong",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ"],
                        namesAbbr: ["ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ"],
                        namesShort: ["ᠡ‍", "ᠨᠢ‍", "ᠬᠣ‍", "ᠭᠤ‍", "ᠳᠥ‍", "ᠲᠠ‍", "ᠵᠢ‍"]
                    },
                    months: {
                        names: ["ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", ""],
                        namesAbbr: ["ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ᠣᠨ ᠲᠣᠭᠠᠯᠠᠯ ᠤᠨ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm",
                        F: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm:ss",
                        M: "M'ᠰᠠᠷ᠎ᠠ' d'ᠡᠳᠦᠷ'",
                        Y: "yyyy'ᠣᠨ' M'ᠰᠠᠷ᠎ᠠ'"
                    }
                }
            }
        }],
    "iu-Latn-CA": ["iu-Latn-CA", "default", {
            name: "iu-Latn-CA",
            englishName: "Inuktitut (Latin, Canada)",
            nativeName: "Inuktitut (Kanatami)",
            language: "iu-Latn",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Naattiinguja", "Naggajjau", "Aippiq", "Pingatsiq", "Sitammiq", "Tallirmiq", "Sivataarvik"],
                        namesAbbr: ["Nat", "Nag", "Aip", "Pi", "Sit", "Tal", "Siv"],
                        namesShort: ["N", "N", "A", "P", "S", "T", "S"]
                    },
                    months: {
                        names: ["Jaannuari", "Viivvuari", "Maatsi", "Iipuri", "Mai", "Juuni", "Julai", "Aaggiisi", "Sitipiri", "Utupiri", "Nuvipiri", "Tisipiri", ""],
                        namesAbbr: ["Jan", "Viv", "Mas", "Ipu", "Mai", "Jun", "Jul", "Agi", "Sii", "Uut", "Nuv", "Tis", ""]
                    },
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "ddd, MMMM dd,yyyy",
                        f: "ddd, MMMM dd,yyyy h:mm tt",
                        F: "ddd, MMMM dd,yyyy h:mm:ss tt"
                    }
                }
            }
        }],
    "tzm-Latn-DZ": ["tzm-Latn-DZ", "default", {
            name: "tzm-Latn-DZ",
            englishName: "Tamazight (Latin, Algeria)",
            nativeName: "Tamazight (Djazaïr)",
            language: "tzm-Latn",
            numberFormat: {
                pattern: ["n-"],
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    symbol: "DZD"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 6,
                    days: {
                        names: ["Acer", "Arime", "Aram", "Ahad", "Amhadh", "Sem", "Sedh"],
                        namesAbbr: ["Ace", "Ari", "Ara", "Aha", "Amh", "Sem", "Sed"],
                        namesShort: ["Ac", "Ar", "Ar", "Ah", "Am", "Se", "Se"]
                    },
                    months: {
                        names: ["Yenayer", "Furar", "Maghres", "Yebrir", "Mayu", "Yunyu", "Yulyu", "Ghuct", "Cutenber", "Ktuber", "Wambir", "Dujanbir", ""],
                        namesAbbr: ["Yen", "Fur", "Mag", "Yeb", "May", "Yun", "Yul", "Ghu", "Cut", "Ktu", "Wam", "Duj", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "quz-EC": ["quz-EC", "default", {
            name: "quz-EC",
            englishName: "Quechua (Ecuador)",
            nativeName: "runasimi (Ecuador)",
            language: "quz",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["intichaw", "killachaw", "atipachaw", "quyllurchaw", "Ch' askachaw", "Illapachaw", "k'uychichaw"],
                        namesAbbr: ["int", "kil", "ati", "quy", "Ch'", "Ill", "k'u"],
                        namesShort: ["d", "k", "a", "m", "h", "b", "k"]
                    },
                    months: {
                        names: ["Qulla puquy", "Hatun puquy", "Pauqar waray", "ayriwa", "Aymuray", "Inti raymi", "Anta Sitwa", "Qhapaq Sitwa", "Uma raymi", "Kantaray", "Ayamarq'a", "Kapaq Raymi", ""],
                        namesAbbr: ["Qul", "Hat", "Pau", "ayr", "Aym", "Int", "Ant", "Qha", "Uma", "Kan", "Aya", "Kap", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "ar-EG": ["ar-EG", "default", {
            name: "ar-EG",
            englishName: "Arabic (Egypt)",
            nativeName: "العربية (مصر)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ج.م.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "zh-HK": ["zh-HK", "default", {
            name: "zh-HK",
            englishName: "Chinese (Traditional, Hong Kong S.A.R.)",
            nativeName: "中文(香港特別行政區)",
            language: "zh-CHT",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    symbol: "HK$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "de-AT": ["de-AT", "default", {
            name: "de-AT",
            englishName: "German (Austria)",
            nativeName: "Deutsch (Österreich)",
            language: "de",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Jänner", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jän", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, dd. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, dd. MMMM yyyy HH:mm",
                        F: "dddd, dd. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "en-AU": ["en-AU", "default", {
            name: "en-AU",
            englishName: "English (Australia)",
            nativeName: "English (Australia)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "dddd, d MMMM yyyy",
                        f: "dddd, d MMMM yyyy h:mm tt",
                        F: "dddd, d MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-ES": ["es-ES", "default", {
            name: "es-ES",
            englishName: "Spanish (Spain, International Sort)",
            nativeName: "Español (España, alfabetización internacional)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fr-CA": ["fr-CA", "default", {
            name: "fr-CA",
            englishName: "French (Canada)",
            nativeName: "français (Canada)",
            language: "fr",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["(n $)", "n $"],
                    ",": " ",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d MMMM yyyy HH:mm",
                        F: "d MMMM yyyy HH:mm:ss",
                        M: "d MMMM"
                    }
                }
            }
        }],
    "sr-Cyrl-CS": ["sr-Cyrl-CS", "default", {
            name: "sr-Cyrl-CS",
            englishName: "Serbian (Cyrillic, Serbia and Montenegro (Former))",
            nativeName: "српски (Србија и Црна Гора (Претходно))",
            language: "sr-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Дин."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["не", "по", "ут", "ср", "че", "пе", "су"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "se-FI": ["se-FI", "default", {
            name: "se-FI",
            englishName: "Sami, Northern (Finland)",
            nativeName: "davvisámegiella (Suopma)",
            language: "se",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sotnabeaivi", "vuossárga", "maŋŋebárga", "gaskavahkku", "duorastat", "bearjadat", "lávvardat"],
                        namesAbbr: ["sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"],
                        namesShort: ["s", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđajagimánu", "guovvamánu", "njukčamánu", "cuoŋománu", "miessemánu", "geassemánu", "suoidnemánu", "borgemánu", "čakčamánu", "golggotmánu", "skábmamánu", "juovlamánu", ""],
                        namesAbbr: ["ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "MMMM d'. b. 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d'. b. 'yyyy H:mm",
                        F: "MMMM d'. b. 'yyyy H:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "quz-PE": ["quz-PE", "default", {
            name: "quz-PE",
            englishName: "Quechua (Peru)",
            nativeName: "runasimi (Piruw)",
            language: "quz",
            numberFormat: {
                percent: {
                    pattern: ["-%n", "%n"]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    symbol: "S/."
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["intichaw", "killachaw", "atipachaw", "quyllurchaw", "Ch' askachaw", "Illapachaw", "k'uychichaw"],
                        namesAbbr: ["int", "kil", "ati", "quy", "Ch'", "Ill", "k'u"],
                        namesShort: ["d", "k", "a", "m", "h", "b", "k"]
                    },
                    months: {
                        names: ["Qulla puquy", "Hatun puquy", "Pauqar waray", "ayriwa", "Aymuray", "Inti raymi", "Anta Sitwa", "Qhapaq Sitwa", "Uma raymi", "Kantaray", "Ayamarq'a", "Kapaq Raymi", ""],
                        namesAbbr: ["Qul", "Hat", "Pau", "ayr", "Aym", "Int", "Ant", "Qha", "Uma", "Kan", "Aya", "Kap", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "ar-LY": ["ar-LY", "default", {
            name: "ar-LY",
            englishName: "Arabic (Libya)",
            nativeName: "العربية (ليبيا)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$n"],
                    decimals: 3,
                    symbol: "د.ل.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "zh-SG": ["zh-SG", "default", {
            name: "zh-SG",
            englishName: "Chinese (Simplified, Singapore)",
            nativeName: "中文(新加坡)",
            language: "zh-CHS",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "yyyy'年'M'月'd'日'",
                        t: "tt h:mm",
                        T: "tt h:mm:ss",
                        f: "yyyy'年'M'月'd'日' tt h:mm",
                        F: "yyyy'年'M'月'd'日' tt h:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "de-LU": ["de-LU", "default", {
            name: "de-LU",
            englishName: "German (Luxembourg)",
            nativeName: "Deutsch (Luxemburg)",
            language: "de",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "en-CA": ["en-CA", "default", {
            name: "en-CA",
            englishName: "English (Canada)",
            nativeName: "English (Canada)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "MMMM-dd-yy",
                        f: "MMMM-dd-yy h:mm tt",
                        F: "MMMM-dd-yy h:mm:ss tt"
                    }
                }
            }
        }],
    "es-GT": ["es-GT", "default", {
            name: "es-GT",
            englishName: "Spanish (Guatemala)",
            nativeName: "Español (Guatemala)",
            language: "es",
            numberFormat: {
                currency: {
                    symbol: "Q"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fr-CH": ["fr-CH", "default", {
            name: "fr-CH",
            englishName: "French (Switzerland)",
            nativeName: "français (Suisse)",
            language: "fr",
            numberFormat: {
                ",": "'",
                percent: {
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "fr."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "hr-BA": ["hr-BA", "default", {
            name: "hr-BA",
            englishName: "Croatian (Latin, Bosnia and Herzegovina)",
            nativeName: "hrvatski (Bosna i Hercegovina)",
            language: "hr",
            numberFormat: {
                pattern: ["- n"],
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "KM"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["siječanj", "veljača", "ožujak", "travanj", "svibanj", "lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    monthsGenitive: {
                        names: ["siječnja", "veljače", "ožujka", "travnja", "svibnja", "lipnja", "srpnja", "kolovoza", "rujna", "listopada", "studenog", "prosinca", ""],
                        namesAbbr: ["sij", "vlj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy.",
                        D: "d. MMMM yyyy.",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy. H:mm",
                        F: "d. MMMM yyyy. H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "smj-NO": ["smj-NO", "default", {
            name: "smj-NO",
            englishName: "Sami, Lule (Norway)",
            nativeName: "julevusámegiella (Vuodna)",
            language: "smj",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["sådnåbiejvve", "mánnodahka", "dijstahka", "gasskavahkko", "duorastahka", "bierjjedahka", "lávvodahka"],
                        namesAbbr: ["såd", "mán", "dis", "gas", "duor", "bier", "láv"],
                        namesShort: ["s", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ådåjakmánno", "guovvamánno", "sjnjuktjamánno", "vuoratjismánno", "moarmesmánno", "biehtsemánno", "sjnjilltjamánno", "bårggemánno", "ragátmánno", "gålgådismánno", "basádismánno", "javllamánno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    monthsGenitive: {
                        names: ["ådåjakmáno", "guovvamáno", "sjnjuktjamáno", "vuoratjismáno", "moarmesmáno", "biehtsemáno", "sjnjilltjamáno", "bårggemáno", "ragátmáno", "gålgådismáno", "basádismáno", "javllamáno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-DZ": ["ar-DZ", "default", {
            name: "ar-DZ",
            englishName: "Arabic (Algeria)",
            nativeName: "العربية (الجزائر)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "د.ج.‏"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MM/yyyy H:mm",
                        F: "dd/MM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MMMM/yyyy H:mm",
                        F: "dd/MMMM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                }
            }
        }],
    "zh-MO": ["zh-MO", "default", {
            name: "zh-MO",
            englishName: "Chinese (Traditional, Macao S.A.R.)",
            nativeName: "中文(澳門特別行政區)",
            language: "zh-CHT",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    symbol: "MOP"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "de-LI": ["de-LI", "default", {
            name: "de-LI",
            englishName: "German (Liechtenstein)",
            nativeName: "Deutsch (Liechtenstein)",
            language: "de",
            numberFormat: {
                ",": "'",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": "'"
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": "'",
                    symbol: "CHF"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
                        namesAbbr: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
                        namesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"]
                    },
                    months: {
                        names: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""],
                        namesAbbr: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n. Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "dddd, d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd, d. MMMM yyyy HH:mm",
                        F: "dddd, d. MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "en-NZ": ["en-NZ", "default", {
            name: "en-NZ",
            englishName: "English (New Zealand)",
            nativeName: "English (New Zealand)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "dddd, d MMMM yyyy",
                        f: "dddd, d MMMM yyyy h:mm tt",
                        F: "dddd, d MMMM yyyy h:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-CR": ["es-CR", "default", {
            name: "es-CR",
            englishName: "Spanish (Costa Rica)",
            nativeName: "Español (Costa Rica)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    ",": ".",
                    ".": ",",
                    symbol: "₡"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fr-LU": ["fr-LU", "default", {
            name: "fr-LU",
            englishName: "French (Luxembourg)",
            nativeName: "français (Luxembourg)",
            language: "fr",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "bs-Latn-BA": ["bs-Latn-BA", "default", {
            name: "bs-Latn-BA",
            englishName: "Bosnian (Latin, Bosnia and Herzegovina)",
            nativeName: "bosanski (Bosna i Hercegovina)",
            language: "bs-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "KM"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "juni", "juli", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "smj-SE": ["smj-SE", "default", {
            name: "smj-SE",
            englishName: "Sami, Lule (Sweden)",
            nativeName: "julevusámegiella (Svierik)",
            language: "smj",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ájllek", "mánnodahka", "dijstahka", "gasskavahkko", "duorastahka", "bierjjedahka", "lávvodahka"],
                        namesAbbr: ["ájl", "mán", "dis", "gas", "duor", "bier", "láv"],
                        namesShort: ["á", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ådåjakmánno", "guovvamánno", "sjnjuktjamánno", "vuoratjismánno", "moarmesmánno", "biehtsemánno", "sjnjilltjamánno", "bårggemánno", "ragátmánno", "gålgådismánno", "basádismánno", "javllamánno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    monthsGenitive: {
                        names: ["ådåjakmáno", "guovvamáno", "sjnjuktjamáno", "vuoratjismáno", "moarmesmáno", "biehtsemáno", "sjnjilltjamáno", "bårggemáno", "ragátmáno", "gålgådismáno", "basádismáno", "javllamáno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-MA": ["ar-MA", "default", {
            name: "ar-MA",
            englishName: "Arabic (Morocco)",
            nativeName: "العربية (المملكة المغربية)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "د.م.‏"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "ماي", "يونيو", "يوليوز", "غشت", "شتنبر", "أكتوبر", "نونبر", "دجنبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "ماي", "يونيو", "يوليوز", "غشت", "شتنبر", "أكتوبر", "نونبر", "دجنبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MM/yyyy H:mm",
                        F: "dd/MM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MMMM/yyyy H:mm",
                        F: "dd/MMMM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                }
            }
        }],
    "en-IE": ["en-IE", "default", {
            name: "en-IE",
            englishName: "English (Ireland)",
            nativeName: "English (Ireland)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-PA": ["es-PA", "default", {
            name: "es-PA",
            englishName: "Spanish (Panama)",
            nativeName: "Español (Panamá)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["($ n)", "$ n"],
                    symbol: "B/."
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "fr-MC": ["fr-MC", "default", {
            name: "fr-MC",
            englishName: "French (Monaco)",
            nativeName: "français (Principauté de Monaco)",
            language: "fr",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd d MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dddd d MMMM yyyy HH:mm",
                        F: "dddd d MMMM yyyy HH:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sr-Latn-BA": ["sr-Latn-BA", "default", {
            name: "sr-Latn-BA",
            englishName: "Serbian (Latin, Bosnia and Herzegovina)",
            nativeName: "srpski (Bosna i Hercegovina)",
            language: "sr-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "KM"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sma-NO": ["sma-NO", "default", {
            name: "sma-NO",
            englishName: "Sami, Southern (Norway)",
            nativeName: "åarjelsaemiengiele (Nöörje)",
            language: "sma",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-%n", "%n"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["aejlege", "måanta", "dæjsta", "gaskevåhkoe", "duarsta", "bearjadahke", "laavvardahke"],
                        namesAbbr: ["aej", "måa", "dæj", "gask", "duar", "bearj", "laav"],
                        namesShort: ["a", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["tsïengele", "goevte", "njoktje", "voerhtje", "suehpede", "ruffie", "snjaltje", "mïetske", "skïerede", "golke", "rahka", "goeve", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    monthsGenitive: {
                        names: ["tsïengelen", "goevten", "njoktjen", "voerhtjen", "suehpeden", "ruffien", "snjaltjen", "mïetsken", "skïereden", "golken", "rahkan", "goeven", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-TN": ["ar-TN", "default", {
            name: "ar-TN",
            englishName: "Arabic (Tunisia)",
            nativeName: "العربية (تونس)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$ n"],
                    decimals: 3,
                    symbol: "د.ت.‏"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MM/yyyy H:mm",
                        F: "dd/MM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd/MMMM/yyyy H:mm",
                        F: "dd/MMMM/yyyy H:mm:ss",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, MMMM dd, yyyy H:mm",
                        F: "dddd, MMMM dd, yyyy H:mm:ss"
                    }
                }
            }
        }],
    "en-ZA": ["en-ZA", "default", {
            name: "en-ZA",
            englishName: "English (South Africa)",
            nativeName: "English (South Africa)",
            numberFormat: {
                ",": " ",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " "
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "R"
                }
            },
            calendars: {
                standard: {
                    patterns: {
                        d: "yyyy/MM/dd",
                        D: "dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM yyyy hh:mm tt",
                        F: "dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-DO": ["es-DO", "default", {
            name: "es-DO",
            englishName: "Spanish (Dominican Republic)",
            nativeName: "Español (República Dominicana)",
            language: "es",
            numberFormat: {
                currency: {
                    symbol: "RD$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Cyrl-BA": ["sr-Cyrl-BA", "default", {
            name: "sr-Cyrl-BA",
            englishName: "Serbian (Cyrillic, Bosnia and Herzegovina)",
            nativeName: "српски (Босна и Херцеговина)",
            language: "sr-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "КМ"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["н", "п", "у", "с", "ч", "п", "с"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "sma-SE": ["sma-SE", "default", {
            name: "sma-SE",
            englishName: "Sami, Southern (Sweden)",
            nativeName: "åarjelsaemiengiele (Sveerje)",
            language: "sma",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["aejlege", "måanta", "dæjsta", "gaskevåhkoe", "duarsta", "bearjadahke", "laavvardahke"],
                        namesAbbr: ["aej", "måa", "dæj", "gask", "duar", "bearj", "laav"],
                        namesShort: ["a", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["tsïengele", "goevte", "njoktje", "voerhtje", "suehpede", "ruffie", "snjaltje", "mïetske", "skïerede", "golke", "rahka", "goeve", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    monthsGenitive: {
                        names: ["tsïengelen", "goevten", "njoktjen", "voerhtjen", "suehpeden", "ruffien", "snjaltjen", "mïetsken", "skïereden", "golken", "rahkan", "goeven", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-OM": ["ar-OM", "default", {
            name: "ar-OM",
            englishName: "Arabic (Oman)",
            nativeName: "العربية (عمان)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    decimals: 3,
                    symbol: "ر.ع.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-JM": ["en-JM", "default", {
            name: "en-JM",
            englishName: "English (Jamaica)",
            nativeName: "English (Jamaica)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"],
                    symbol: "J$"
                }
            },
            calendars: {
                standard: {
                    patterns: {
                        d: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "es-VE": ["es-VE", "default", {
            name: "es-VE",
            englishName: "Spanish (Bolivarian Republic of Venezuela)",
            nativeName: "Español (Republica Bolivariana de Venezuela)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "Bs. F."
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "bs-Cyrl-BA": ["bs-Cyrl-BA", "default", {
            name: "bs-Cyrl-BA",
            englishName: "Bosnian (Cyrillic, Bosnia and Herzegovina)",
            nativeName: "босански (Босна и Херцеговина)",
            language: "bs-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "КМ"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недјеља", "понедјељак", "уторак", "сриједа", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["н", "п", "у", "с", "ч", "п", "с"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "sms-FI": ["sms-FI", "default", {
            name: "sms-FI",
            englishName: "Sami, Skolt (Finland)",
            nativeName: "sääm´ǩiõll (Lää´ddjânnam)",
            language: "sms",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pâ´sspei´vv", "vuõssargg", "mââibargg", "seärad", "nelljdpei´vv", "piâtnâc", "sue´vet"],
                        namesAbbr: ["pâ", "vu", "mâ", "se", "ne", "pi", "su"],
                        namesShort: ["p", "v", "m", "s", "n", "p", "s"]
                    },
                    months: {
                        names: ["ođđee´jjmään", "tä´lvvmään", "pâ´zzlâšttammään", "njuhččmään", "vue´ssmään", "ǩie´ssmään", "suei´nnmään", "på´rǧǧmään", "čõhččmään", "kålggmään", "skamm´mään", "rosttovmään", ""],
                        namesAbbr: ["ođjm", "tä´lvv", "pâzl", "njuh", "vue", "ǩie", "suei", "på´r", "čõh", "kålg", "ska", "rost", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđee´jjmannu", "tä´lvvmannu", "pâ´zzlâšttammannu", "njuhččmannu", "vue´ssmannu", "ǩie´ssmannu", "suei´nnmannu", "på´rǧǧmannu", "čõhččmannu", "kålggmannu", "skamm´mannu", "rosttovmannu", ""],
                        namesAbbr: ["ođjm", "tä´lvv", "pâzl", "njuh", "vue", "ǩie", "suei", "på´r", "čõh", "kålg", "ska", "rost", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "MMMM d'. p. 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d'. p. 'yyyy H:mm",
                        F: "MMMM d'. p. 'yyyy H:mm:ss",
                        M: "MMMM d'. p. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-YE": ["ar-YE", "default", {
            name: "ar-YE",
            englishName: "Arabic (Yemen)",
            nativeName: "العربية (اليمن)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ر.ي.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-029": ["en-029", "default", {
            name: "en-029",
            englishName: "English (Caribbean)",
            nativeName: "English (Caribbean)",
            numberFormat: {
                currency: {
                    pattern: ["-$n", "$n"]
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    patterns: {
                        d: "MM/dd/yyyy"
                    }
                }
            }
        }],
    "es-CO": ["es-CO", "default", {
            name: "es-CO",
            englishName: "Spanish (Colombia)",
            nativeName: "Español (Colombia)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Latn-RS": ["sr-Latn-RS", "default", {
            name: "sr-Latn-RS",
            englishName: "Serbian (Latin, Serbia)",
            nativeName: "srpski (Srbija)",
            language: "sr-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Din."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "smn-FI": ["smn-FI", "default", {
            name: "smn-FI",
            englishName: "Sami, Inari (Finland)",
            nativeName: "sämikielâ (Suomâ)",
            language: "smn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pasepeivi", "vuossargâ", "majebargâ", "koskokko", "tuorâstâh", "vástuppeivi", "lávárdâh"],
                        namesAbbr: ["pa", "vu", "ma", "ko", "tu", "vá", "lá"],
                        namesShort: ["p", "v", "m", "k", "t", "v", "l"]
                    },
                    months: {
                        names: ["uđđâivemáánu", "kuovâmáánu", "njuhčâmáánu", "cuáŋuimáánu", "vyesimáánu", "kesimáánu", "syeinimáánu", "porgemáánu", "čohčâmáánu", "roovvâdmáánu", "skammâmáánu", "juovlâmáánu", ""],
                        namesAbbr: ["uđiv", "kuov", "njuh", "cuoŋ", "vyes", "kesi", "syei", "porg", "čoh", "roov", "ska", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "MMMM d'. p. 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d'. p. 'yyyy H:mm",
                        F: "MMMM d'. p. 'yyyy H:mm:ss",
                        M: "MMMM d'. p. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-SY": ["ar-SY", "default", {
            name: "ar-SY",
            englishName: "Arabic (Syria)",
            nativeName: "العربية (سوريا)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ل.س.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-BZ": ["en-BZ", "default", {
            name: "en-BZ",
            englishName: "English (Belize)",
            nativeName: "English (Belize)",
            numberFormat: {
                currency: {
                    groupSizes: [3, 0],
                    symbol: "BZ$"
                }
            },
            calendars: {
                standard: {
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd MMMM yyyy hh:mm tt",
                        F: "dddd, dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-PE": ["es-PE", "default", {
            name: "es-PE",
            englishName: "Spanish (Peru)",
            nativeName: "Español (Perú)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["$ -n", "$ n"],
                    symbol: "S/."
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Cyrl-RS": ["sr-Cyrl-RS", "default", {
            name: "sr-Cyrl-RS",
            englishName: "Serbian (Cyrillic, Serbia)",
            nativeName: "српски (Србија)",
            language: "sr-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Дин."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["не", "по", "ут", "ср", "че", "пе", "су"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-JO": ["ar-JO", "default", {
            name: "ar-JO",
            englishName: "Arabic (Jordan)",
            nativeName: "العربية (الأردن)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$ n"],
                    decimals: 3,
                    symbol: "د.ا.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-TT": ["en-TT", "default", {
            name: "en-TT",
            englishName: "English (Trinidad and Tobago)",
            nativeName: "English (Trinidad y Tobago)",
            numberFormat: {
                currency: {
                    groupSizes: [3, 0],
                    symbol: "TT$"
                }
            },
            calendars: {
                standard: {
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd MMMM yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd MMMM yyyy hh:mm tt",
                        F: "dddd, dd MMMM yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "es-AR": ["es-AR", "default", {
            name: "es-AR",
            englishName: "Spanish (Argentina)",
            nativeName: "Español (Argentina)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["$-n", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Latn-ME": ["sr-Latn-ME", "default", {
            name: "sr-Latn-ME",
            englishName: "Serbian (Latin, Montenegro)",
            nativeName: "srpski (Crna Gora)",
            language: "sr-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-LB": ["ar-LB", "default", {
            name: "ar-LB",
            englishName: "Arabic (Lebanon)",
            nativeName: "العربية (لبنان)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ل.ل.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 1,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_TransliteratedEnglish: {
                    name: "Gregorian_TransliteratedEnglish",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["أ", "ا", "ث", "أ", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 1,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-ZW": ["en-ZW", "default", {
            name: "en-ZW",
            englishName: "English (Zimbabwe)",
            nativeName: "English (Zimbabwe)",
            numberFormat: {
                currency: {
                    symbol: "Z$"
                }
            }
        }],
    "es-EC": ["es-EC", "default", {
            name: "es-EC",
            englishName: "Spanish (Ecuador)",
            nativeName: "Español (Ecuador)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "sr-Cyrl-ME": ["sr-Cyrl-ME", "default", {
            name: "sr-Cyrl-ME",
            englishName: "Serbian (Cyrillic, Montenegro)",
            nativeName: "српски (Црна Гора)",
            language: "sr-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["не", "по", "ут", "ср", "че", "пе", "су"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "ar-KW": ["ar-KW", "default", {
            name: "ar-KW",
            englishName: "Arabic (Kuwait)",
            nativeName: "العربية (الكويت)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$ n"],
                    decimals: 3,
                    symbol: "د.ك.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-PH": ["en-PH", "default", {
            name: "en-PH",
            englishName: "English (Republic of the Philippines)",
            nativeName: "English (Philippines)",
            numberFormat: {
                currency: {
                    symbol: "Php"
                }
            }
        }],
    "es-CL": ["es-CL", "default", {
            name: "es-CL",
            englishName: "Spanish (Chile)",
            nativeName: "Español (Chile)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-$ n", "$ n"],
                    ",": ".",
                    ".": ","
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dddd, dd' de 'MMMM' de 'yyyy H:mm",
                        F: "dddd, dd' de 'MMMM' de 'yyyy H:mm:ss",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "ar-AE": ["ar-AE", "default", {
            name: "ar-AE",
            englishName: "Arabic (U.A.E.)",
            nativeName: "العربية (الإمارات العربية المتحدة)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "د.إ.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "es-UY": ["es-UY", "default", {
            name: "es-UY",
            englishName: "Spanish (Uruguay)",
            nativeName: "Español (Uruguay)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "$U"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "ar-BH": ["ar-BH", "default", {
            name: "ar-BH",
            englishName: "Arabic (Bahrain)",
            nativeName: "العربية (البحرين)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                decimals: 3,
                percent: {
                    decimals: 3
                },
                currency: {
                    pattern: ["$n-", "$ n"],
                    decimals: 3,
                    symbol: "د.ب.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "ابريل", "مايو", "يونيو", "يوليو", "اغسطس", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "es-PY": ["es-PY", "default", {
            name: "es-PY",
            englishName: "Spanish (Paraguay)",
            nativeName: "Español (Paraguay)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "Gs"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "ar-QA": ["ar-QA", "default", {
            name: "ar-QA",
            englishName: "Arabic (Qatar)",
            nativeName: "العربية (قطر)",
            language: "ar",
            isRTL: true,
            numberFormat: {
                pattern: ["n-"],
                currency: {
                    pattern: ["$n-", "$ n"],
                    symbol: "ر.ق.‏"
                }
            },
            calendars: {
                standard: {
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dd MMMM, yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd MMMM, yyyy hh:mm tt",
                        F: "dd MMMM, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                UmAlQura: {
                    name: "UmAlQura",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MMMM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MMMM/yyyy hh:mm tt",
                        F: "dd/MMMM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        _yearInfo: [
                            /* MonthLengthFlags, Gregorian Date */
                            [746, -2198707200000],
                            [1769, -2168121600000],
                            [3794, -2137449600000],
                            [3748, -2106777600000],
                            [3402, -2076192000000],
                            [2710, -2045606400000],
                            [1334, -2015020800000],
                            [2741, -1984435200000],
                            [3498, -1953763200000],
                            [2980, -1923091200000],
                            [2889, -1892505600000],
                            [2707, -1861920000000],
                            [1323, -1831334400000],
                            [2647, -1800748800000],
                            [1206, -1770076800000],
                            [2741, -1739491200000],
                            [1450, -1708819200000],
                            [3413, -1678233600000],
                            [3370, -1647561600000],
                            [2646, -1616976000000],
                            [1198, -1586390400000],
                            [2397, -1555804800000],
                            [748, -1525132800000],
                            [1749, -1494547200000],
                            [1706, -1463875200000],
                            [1365, -1433289600000],
                            [1195, -1402704000000],
                            [2395, -1372118400000],
                            [698, -1341446400000],
                            [1397, -1310860800000],
                            [2994, -1280188800000],
                            [1892, -1249516800000],
                            [1865, -1218931200000],
                            [1621, -1188345600000],
                            [683, -1157760000000],
                            [1371, -1127174400000],
                            [2778, -1096502400000],
                            [1748, -1065830400000],
                            [3785, -1035244800000],
                            [3474, -1004572800000],
                            [3365, -973987200000],
                            [2637, -943401600000],
                            [685, -912816000000],
                            [1389, -882230400000],
                            [2922, -851558400000],
                            [2898, -820886400000],
                            [2725, -790300800000],
                            [2635, -759715200000],
                            [1175, -729129600000],
                            [2359, -698544000000],
                            [694, -667872000000],
                            [1397, -637286400000],
                            [3434, -606614400000],
                            [3410, -575942400000],
                            [2710, -545356800000],
                            [2349, -514771200000],
                            [605, -484185600000],
                            [1245, -453600000000],
                            [2778, -422928000000],
                            [1492, -392256000000],
                            [3497, -361670400000],
                            [3410, -330998400000],
                            [2730, -300412800000],
                            [1238, -269827200000],
                            [2486, -239241600000],
                            [884, -208569600000],
                            [1897, -177984000000],
                            [1874, -147312000000],
                            [1701, -116726400000],
                            [1355, -86140800000],
                            [2731, -55555200000],
                            [1370, -24883200000],
                            [2773, 5702400000],
                            [3538, 36374400000],
                            [3492, 67046400000],
                            [3401, 97632000000],
                            [2709, 128217600000],
                            [1325, 158803200000],
                            [2653, 189388800000],
                            [1370, 220060800000],
                            [2773, 250646400000],
                            [1706, 281318400000],
                            [1685, 311904000000],
                            [1323, 342489600000],
                            [2647, 373075200000],
                            [1198, 403747200000],
                            [2422, 434332800000],
                            [1388, 465004800000],
                            [2901, 495590400000],
                            [2730, 526262400000],
                            [2645, 556848000000],
                            [1197, 587433600000],
                            [2397, 618019200000],
                            [730, 648691200000],
                            [1497, 679276800000],
                            [3506, 709948800000],
                            [2980, 740620800000],
                            [2890, 771206400000],
                            [2645, 801792000000],
                            [693, 832377600000],
                            [1397, 862963200000],
                            [2922, 893635200000],
                            [3026, 924307200000],
                            [3012, 954979200000],
                            [2953, 985564800000],
                            [2709, 1016150400000],
                            [1325, 1046736000000],
                            [1453, 1077321600000],
                            [2922, 1107993600000],
                            [1748, 1138665600000],
                            [3529, 1169251200000],
                            [3474, 1199923200000],
                            [2726, 1230508800000],
                            [2390, 1261094400000],
                            [686, 1291680000000],
                            [1389, 1322265600000],
                            [874, 1352937600000],
                            [2901, 1383523200000],
                            [2730, 1414195200000],
                            [2381, 1444780800000],
                            [1181, 1475366400000],
                            [2397, 1505952000000],
                            [698, 1536624000000],
                            [1461, 1567209600000],
                            [1450, 1597881600000],
                            [3413, 1628467200000],
                            [2714, 1659139200000],
                            [2350, 1689724800000],
                            [622, 1720310400000],
                            [1373, 1750896000000],
                            [2778, 1781568000000],
                            [1748, 1812240000000],
                            [1701, 1842825600000],
                            [0, 1873411200000]
                        ],
                        minDate: -2198707200000,
                        maxDate: 1873411199999,
                        toGregorian: function (hyear, hmonth, hday) {
                            var days = hday - 1, gyear = hyear - 1318;
                            if (gyear < 0 || gyear >= this._yearInfo.length)
                                return null;
                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the gregorian date in the same timezone,
                            not what the gregorian date was at GMT time, so we adjust for the offset. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            for (var i = 0; i < hmonth; i++) {
                                days += 29 + (monthLength & 1);
                                monthLength = monthLength >> 1;
                            }
                            gdate.setDate(gdate.getDate() + days);
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            /* Date's ticks in javascript are always from the GMT time,
                            but we are interested in the hijri date in the same timezone,
                            not what the hijri date was at GMT time, so we adjust for the offset. */
                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;
                            if (ticks < this.minDate || ticks > this.maxDate)
                                return null;
                            var hyear = 0, hmonth = 1;
                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */
                            while (ticks > this._yearInfo[++hyear][1]) { }
                            if (ticks !== this._yearInfo[hyear][1]) {
                                hyear--;
                            }
                            var info = this._yearInfo[hyear], 
                            /* how many days has it been since the date we found in the array?
                            86400000 = ticks per day */
                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];
                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N
                            now increment day/month based on the total days, considering
                            how many days are in each month. We cannot run past the year
                            mark since we would have found a different array entry in that case. */
                            var daysInMonth = 29 + (monthLength & 1);
                            while (days >= daysInMonth) {
                                days -= daysInMonth;
                                monthLength = monthLength >> 1;
                                daysInMonth = 29 + (monthLength & 1);
                                hmonth++;
                            }
                            /* remaining days is less than is in one month, thus is the day of the month we landed on
                            hmonth-1 because in javascript months are zero based, stay consistent with that. */
                            return [hyear, hmonth - 1, days + 1];
                        }
                    }
                },
                Hijri: {
                    name: "Hijri",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""],
                        namesAbbr: ["محرم", "صفر", "ربيع الأول", "ربيع الثاني", "جمادى الأولى", "جمادى الثانية", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "بعد الهجرة", "start": null, "offset": 0 }],
                    twoDigitYearMax: 1451,
                    patterns: {
                        d: "dd/MM/yy",
                        D: "dd/MM/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dd/MM/yyyy hh:mm tt",
                        F: "dd/MM/yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    },
                    convert: {
                        /* Adapted to Script from System.Globalization.HijriCalendar */
                        ticks1970: 62135596800000,
                        /* number of days leading up to each month */
                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],
                        minDate: -42521673600000,
                        maxDate: 253402300799999,
                        /* The number of days to add or subtract from the calendar to accommodate the variances
                        in the start and the end of Ramadan and to accommodate the date difference between
                        countries/regions. May be dynamically adjusted based on user preference, but should
                        remain in the range of -2 to 2, inclusive. */
                        hijriAdjustment: 0,
                        toGregorian: function (hyear, hmonth, hday) {
                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;
                            /* 86400000 = ticks per day */
                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);
                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone
                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base
                            date in the current timezone. */
                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());
                            return gdate;
                        },
                        fromGregorian: function (gdate) {
                            if ((gdate < this.minDate) || (gdate > this.maxDate))
                                return null;
                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;
                            /* very particular formula determined by someone smart, adapted from the server-side implementation.
                            it approximates the hijri year. */
                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;
                            /* hyear is just approximate, it may need adjustment up or down by 1. */
                            if (daysSinceJan0101 < absDays) {
                                hyear--;
                                absDays -= daysInYear;
                            }
                            else if (daysSinceJan0101 === absDays) {
                                hyear--;
                                absDays = this.daysToYear(hyear);
                            }
                            else {
                                if (daysSinceJan0101 > (absDays + daysInYear)) {
                                    absDays += daysInYear;
                                    hyear++;
                                }
                            }
                            /* determine month by looking at how many days into the hyear we are
                            monthDays contains the number of days up to each month. */
                            hmonth = 0;
                            var daysIntoYear = daysSinceJan0101 - absDays;
                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {
                                hmonth++;
                            }
                            hmonth--;
                            hday = daysIntoYear - this.monthDays[hmonth];
                            return [hyear, hmonth, hday];
                        },
                        daysToYear: function (year) {
                            /* calculates how many days since Jan 1, 0001 */
                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;
                            while (yearsInto30 > 0) {
                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);
                                yearsInto30--;
                            }
                            return days;
                        },
                        isLeapYear: function (year) {
                            return ((((year * 11) + 14) % 30) < 11);
                        }
                    }
                },
                Gregorian_MiddleEastFrench: {
                    name: "Gregorian_MiddleEastFrench",
                    firstDay: 6,
                    days: {
                        names: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
                        namesAbbr: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
                        namesShort: ["di", "lu", "ma", "me", "je", "ve", "sa"]
                    },
                    months: {
                        names: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""],
                        namesAbbr: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "ap. J.-C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt",
                        M: "dd MMMM"
                    }
                },
                Gregorian_Arabic: {
                    name: "Gregorian_Arabic",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""],
                        namesAbbr: ["كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                },
                Gregorian_TransliteratedFrench: {
                    name: "Gregorian_TransliteratedFrench",
                    firstDay: 6,
                    days: {
                        names: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesAbbr: ["الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"],
                        namesShort: ["ح", "ن", "ث", "ر", "خ", "ج", "س"]
                    },
                    months: {
                        names: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""],
                        namesAbbr: ["جانفييه", "فيفرييه", "مارس", "أفريل", "مي", "جوان", "جوييه", "أوت", "سبتمبر", "اكتوبر", "نوفمبر", "ديسمبر", ""]
                    },
                    AM: ["ص", "ص", "ص"],
                    PM: ["م", "م", "م"],
                    eras: [{ "name": "م", "start": null, "offset": 0 }],
                    patterns: {
                        d: "MM/dd/yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, MMMM dd, yyyy hh:mm tt",
                        F: "dddd, MMMM dd, yyyy hh:mm:ss tt"
                    }
                }
            }
        }],
    "en-IN": ["en-IN", "default", {
            name: "en-IN",
            englishName: "English (India)",
            nativeName: "English (India)",
            numberFormat: {
                groupSizes: [3, 2],
                percent: {
                    groupSizes: [3, 2]
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 2],
                    symbol: "Rs."
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "dd MMMM yyyy HH:mm",
                        F: "dd MMMM yyyy HH:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "es-BO": ["es-BO", "default", {
            name: "es-BO",
            englishName: "Spanish (Bolivia)",
            nativeName: "Español (Bolivia)",
            language: "es",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["($ n)", "$ n"],
                    ",": ".",
                    ".": ",",
                    symbol: "$b"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "en-MY": ["en-MY", "default", {
            name: "en-MY",
            englishName: "English (Malaysia)",
            nativeName: "English (Malaysia)",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    symbol: "RM"
                }
            },
            calendars: {
                standard: {
                    days: {
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd, d MMMM, yyyy",
                        f: "dddd, d MMMM, yyyy h:mm tt",
                        F: "dddd, d MMMM, yyyy h:mm:ss tt",
                        M: "d MMMM"
                    }
                }
            }
        }],
    "es-SV": ["es-SV", "default", {
            name: "es-SV",
            englishName: "Spanish (El Salvador)",
            nativeName: "Español (El Salvador)",
            language: "es",
            numberFormat: {
                currency: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "en-SG": ["en-SG", "default", {
            name: "en-SG",
            englishName: "English (Singapore)",
            nativeName: "English (Singapore)",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                }
            },
            calendars: {
                standard: {
                    days: {
                        namesShort: ["S", "M", "T", "W", "T", "F", "S"]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd, d MMMM, yyyy",
                        f: "dddd, d MMMM, yyyy h:mm tt",
                        F: "dddd, d MMMM, yyyy h:mm:ss tt",
                        M: "d MMMM"
                    }
                }
            }
        }],
    "es-HN": ["es-HN", "default", {
            name: "es-HN",
            englishName: "Spanish (Honduras)",
            nativeName: "Español (Honduras)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["$ -n", "$ n"],
                    groupSizes: [3, 0],
                    symbol: "L."
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "es-NI": ["es-NI", "default", {
            name: "es-NI",
            englishName: "Spanish (Nicaragua)",
            nativeName: "Español (Nicaragua)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["($ n)", "$ n"],
                    groupSizes: [3, 0],
                    symbol: "C$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "es-PR": ["es-PR", "default", {
            name: "es-PR",
            englishName: "Spanish (Puerto Rico)",
            nativeName: "Español (Puerto Rico)",
            language: "es",
            numberFormat: {
                currency: {
                    pattern: ["($ n)", "$ n"],
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sá"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    AM: ["a.m.", "a.m.", "A.M."],
                    PM: ["p.m.", "p.m.", "P.M."],
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "dd/MM/yyyy",
                        D: "dddd, dd' de 'MMMM' de 'yyyy",
                        t: "hh:mm tt",
                        T: "hh:mm:ss tt",
                        f: "dddd, dd' de 'MMMM' de 'yyyy hh:mm tt",
                        F: "dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt",
                        M: "dd MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "es-US": ["es-US", "default", {
            name: "es-US",
            englishName: "Spanish (United States)",
            nativeName: "Español (Estados Unidos)",
            language: "es",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
                        namesAbbr: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
                        namesShort: ["do", "lu", "ma", "mi", "ju", "vi", "sa"]
                    },
                    months: {
                        names: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""],
                        namesAbbr: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""]
                    },
                    eras: [{ "name": "d.C.", "start": null, "offset": 0 }],
                    patterns: {
                        M: "dd' de 'MMMM",
                        Y: "MMMM' de 'yyyy"
                    }
                }
            }
        }],
    "bs-Cyrl": ["bs-Cyrl", "default", {
            name: "bs-Cyrl",
            englishName: "Bosnian (Cyrillic)",
            nativeName: "босански",
            language: "bs-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "КМ"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недјеља", "понедјељак", "уторак", "сриједа", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["н", "п", "у", "с", "ч", "п", "с"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM"
                    }
                }
            }
        }],
    "bs-Latn": ["bs-Latn", "default", {
            name: "bs-Latn",
            englishName: "Bosnian (Latin)",
            nativeName: "bosanski",
            language: "bs-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "KM"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "juni", "juli", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sr-Cyrl": ["sr-Cyrl", "default", {
            name: "sr-Cyrl",
            englishName: "Serbian (Cyrillic)",
            nativeName: "српски",
            language: "sr-Cyrl",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Дин."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"],
                        namesAbbr: ["нед", "пон", "уто", "сре", "чет", "пет", "суб"],
                        namesShort: ["не", "по", "ут", "ср", "че", "пе", "су"]
                    },
                    months: {
                        names: ["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""],
                        namesAbbr: ["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "н.е.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sr-Latn": ["sr-Latn", "default", {
            name: "sr-Latn",
            englishName: "Serbian (Latin)",
            nativeName: "srpski",
            language: "sr-Latn",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Din."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "smn": ["smn", "default", {
            name: "smn",
            englishName: "Sami (Inari)",
            nativeName: "sämikielâ",
            language: "smn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pasepeivi", "vuossargâ", "majebargâ", "koskokko", "tuorâstâh", "vástuppeivi", "lávárdâh"],
                        namesAbbr: ["pa", "vu", "ma", "ko", "tu", "vá", "lá"],
                        namesShort: ["p", "v", "m", "k", "t", "v", "l"]
                    },
                    months: {
                        names: ["uđđâivemáánu", "kuovâmáánu", "njuhčâmáánu", "cuáŋuimáánu", "vyesimáánu", "kesimáánu", "syeinimáánu", "porgemáánu", "čohčâmáánu", "roovvâdmáánu", "skammâmáánu", "juovlâmáánu", ""],
                        namesAbbr: ["uđiv", "kuov", "njuh", "cuoŋ", "vyes", "kesi", "syei", "porg", "čoh", "roov", "ska", "juov", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "MMMM d'. p. 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d'. p. 'yyyy H:mm",
                        F: "MMMM d'. p. 'yyyy H:mm:ss",
                        M: "MMMM d'. p. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "az-Cyrl": ["az-Cyrl", "default", {
            name: "az-Cyrl",
            englishName: "Azeri (Cyrillic)",
            nativeName: "Азәрбајҹан дили",
            language: "az-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "ман."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Базар", "Базар ертәси", "Чәршәнбә ахшамы", "Чәршәнбә", "Ҹүмә ахшамы", "Ҹүмә", "Шәнбә"],
                        namesAbbr: ["Б", "Бе", "Ча", "Ч", "Ҹа", "Ҹ", "Ш"],
                        namesShort: ["Б", "Бе", "Ча", "Ч", "Ҹа", "Ҹ", "Ш"]
                    },
                    months: {
                        names: ["Јанвар", "Феврал", "Март", "Апрел", "Мај", "Ијун", "Ијул", "Август", "Сентјабр", "Октјабр", "Нојабр", "Декабр", ""],
                        namesAbbr: ["Јан", "Фев", "Мар", "Апр", "Мај", "Ијун", "Ијул", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["јанвар", "феврал", "март", "апрел", "мај", "ијун", "ијул", "август", "сентјабр", "октјабр", "нојабр", "декабр", ""],
                        namesAbbr: ["Јан", "Фев", "Мар", "Апр", "мая", "ијун", "ијул", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sms": ["sms", "default", {
            name: "sms",
            englishName: "Sami (Skolt)",
            nativeName: "sääm´ǩiõll",
            language: "sms",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["pâ´sspei´vv", "vuõssargg", "mââibargg", "seärad", "nelljdpei´vv", "piâtnâc", "sue´vet"],
                        namesAbbr: ["pâ", "vu", "mâ", "se", "ne", "pi", "su"],
                        namesShort: ["p", "v", "m", "s", "n", "p", "s"]
                    },
                    months: {
                        names: ["ođđee´jjmään", "tä´lvvmään", "pâ´zzlâšttammään", "njuhččmään", "vue´ssmään", "ǩie´ssmään", "suei´nnmään", "på´rǧǧmään", "čõhččmään", "kålggmään", "skamm´mään", "rosttovmään", ""],
                        namesAbbr: ["ođjm", "tä´lvv", "pâzl", "njuh", "vue", "ǩie", "suei", "på´r", "čõh", "kålg", "ska", "rost", ""]
                    },
                    monthsGenitive: {
                        names: ["ođđee´jjmannu", "tä´lvvmannu", "pâ´zzlâšttammannu", "njuhččmannu", "vue´ssmannu", "ǩie´ssmannu", "suei´nnmannu", "på´rǧǧmannu", "čõhččmannu", "kålggmannu", "skamm´mannu", "rosttovmannu", ""],
                        namesAbbr: ["ođjm", "tä´lvv", "pâzl", "njuh", "vue", "ǩie", "suei", "på´r", "čõh", "kålg", "ska", "rost", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "MMMM d'. p. 'yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "MMMM d'. p. 'yyyy H:mm",
                        F: "MMMM d'. p. 'yyyy H:mm:ss",
                        M: "MMMM d'. p. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "zh": ["zh", "default", {
            name: "zh",
            englishName: "Chinese",
            nativeName: "中文",
            language: "zh",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "nn": ["nn", "default", {
            name: "nn",
            englishName: "Norwegian (Nynorsk)",
            nativeName: "norsk (nynorsk)",
            language: "nn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "måndag", "tysdag", "onsdag", "torsdag", "fredag", "laurdag"],
                        namesAbbr: ["sø", "må", "ty", "on", "to", "fr", "la"],
                        namesShort: ["sø", "må", "ty", "on", "to", "fr", "la"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "bs": ["bs", "default", {
            name: "bs",
            englishName: "Bosnian",
            nativeName: "bosanski",
            language: "bs",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "KM"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sri", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "juni", "juli", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "az-Latn": ["az-Latn", "default", {
            name: "az-Latn",
            englishName: "Azeri (Latin)",
            nativeName: "Azərbaycan­ılı",
            language: "az-Latn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "man."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Bazar", "Bazar ertəsi", "Çərşənbə axşamı", "Çərşənbə", "Cümə axşamı", "Cümə", "Şənbə"],
                        namesAbbr: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"],
                        namesShort: ["B", "Be", "Ça", "Ç", "Ca", "C", "Ş"]
                    },
                    months: {
                        names: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "İyun", "İyul", "Avgust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    monthsGenitive: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["Yan", "Fev", "Mar", "Apr", "May", "İyun", "İyul", "Avg", "Sen", "Okt", "Noy", "Dek", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        M: "d MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sma": ["sma", "default", {
            name: "sma",
            englishName: "Sami (Southern)",
            nativeName: "åarjelsaemiengiele",
            language: "sma",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["aejlege", "måanta", "dæjsta", "gaskevåhkoe", "duarsta", "bearjadahke", "laavvardahke"],
                        namesAbbr: ["aej", "måa", "dæj", "gask", "duar", "bearj", "laav"],
                        namesShort: ["a", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["tsïengele", "goevte", "njoktje", "voerhtje", "suehpede", "ruffie", "snjaltje", "mïetske", "skïerede", "golke", "rahka", "goeve", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    monthsGenitive: {
                        names: ["tsïengelen", "goevten", "njoktjen", "voerhtjen", "suehpeden", "ruffien", "snjaltjen", "mïetsken", "skïereden", "golken", "rahkan", "goeven", ""],
                        namesAbbr: ["tsïen", "goevt", "njok", "voer", "sueh", "ruff", "snja", "mïet", "skïer", "golk", "rahk", "goev", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "uz-Cyrl": ["uz-Cyrl", "default", {
            name: "uz-Cyrl",
            englishName: "Uzbek (Cyrillic)",
            nativeName: "Ўзбек",
            language: "uz-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": " ",
                    ".": ",",
                    symbol: "сўм"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["якшанба", "душанба", "сешанба", "чоршанба", "пайшанба", "жума", "шанба"],
                        namesAbbr: ["якш", "дш", "сш", "чш", "пш", "ж", "ш"],
                        namesShort: ["я", "д", "с", "ч", "п", "ж", "ш"]
                    },
                    months: {
                        names: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["январ", "феврал", "март", "апрел", "май", "июн", "июл", "август", "сентябр", "октябр", "ноябр", "декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "мая", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "yyyy 'йил' d-MMMM",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'йил' d-MMMM HH:mm",
                        F: "yyyy 'йил' d-MMMM HH:mm:ss",
                        M: "d-MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "mn-Cyrl": ["mn-Cyrl", "default", {
            name: "mn-Cyrl",
            englishName: "Mongolian (Cyrillic)",
            nativeName: "Монгол хэл",
            language: "mn-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n$", "n$"],
                    ",": " ",
                    ".": ",",
                    symbol: "₮"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["Ням", "Даваа", "Мягмар", "Лхагва", "Пүрэв", "Баасан", "Бямба"],
                        namesAbbr: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"],
                        namesShort: ["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"]
                    },
                    months: {
                        names: ["1 дүгээр сар", "2 дугаар сар", "3 дугаар сар", "4 дүгээр сар", "5 дугаар сар", "6 дугаар сар", "7 дугаар сар", "8 дугаар сар", "9 дүгээр сар", "10 дугаар сар", "11 дүгээр сар", "12 дугаар сар", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    monthsGenitive: {
                        names: ["1 дүгээр сарын", "2 дугаар сарын", "3 дугаар сарын", "4 дүгээр сарын", "5 дугаар сарын", "6 дугаар сарын", "7 дугаар сарын", "8 дугаар сарын", "9 дүгээр сарын", "10 дугаар сарын", "11 дүгээр сарын", "12 дугаар сарын", ""],
                        namesAbbr: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yy.MM.dd",
                        D: "yyyy 'оны' MMMM d",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy 'оны' MMMM d H:mm",
                        F: "yyyy 'оны' MMMM d H:mm:ss",
                        M: "d MMMM",
                        Y: "yyyy 'он' MMMM"
                    }
                }
            }
        }],
    "iu-Cans": ["iu-Cans", "default", {
            name: "iu-Cans",
            englishName: "Inuktitut (Syllabics)",
            nativeName: "ᐃᓄᒃᑎᑐᑦ",
            language: "iu-Cans",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["ᓈᑦᑏᖑᔭ", "ᓇᒡᒐᔾᔭᐅ", "ᐊᐃᑉᐱᖅ", "ᐱᖓᑦᓯᖅ", "ᓯᑕᒻᒥᖅ", "ᑕᓪᓕᕐᒥᖅ", "ᓯᕙᑖᕐᕕᒃ"],
                        namesAbbr: ["ᓈᑦᑏ", "ᓇᒡᒐ", "ᐊᐃᑉᐱ", "ᐱᖓᑦᓯ", "ᓯᑕ", "ᑕᓪᓕ", "ᓯᕙᑖᕐᕕᒃ"],
                        namesShort: ["ᓈ", "ᓇ", "ᐊ", "ᐱ", "ᓯ", "ᑕ", "ᓯ"]
                    },
                    months: {
                        names: ["ᔮᓐᓄᐊᕆ", "ᕖᕝᕗᐊᕆ", "ᒫᑦᓯ", "ᐄᐳᕆ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐋᒡᒌᓯ", "ᓯᑎᐱᕆ", "ᐅᑐᐱᕆ", "ᓄᕕᐱᕆ", "ᑎᓯᐱᕆ", ""],
                        namesAbbr: ["ᔮᓐᓄ", "ᕖᕝᕗ", "ᒫᑦᓯ", "ᐄᐳᕆ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐋᒡᒌ", "ᓯᑎᐱ", "ᐅᑐᐱ", "ᓄᕕᐱ", "ᑎᓯᐱ", ""]
                    },
                    patterns: {
                        d: "d/M/yyyy",
                        D: "dddd,MMMM dd,yyyy",
                        f: "dddd,MMMM dd,yyyy h:mm tt",
                        F: "dddd,MMMM dd,yyyy h:mm:ss tt",
                        Y: "MMMM,yyyy"
                    }
                }
            }
        }],
    "zh-Hant": ["zh-Hant", "default", {
            name: "zh-Hant",
            englishName: "Chinese (Traditional)",
            nativeName: "中文(繁體)",
            language: "zh-Hant",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    symbol: "HK$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "nb": ["nb", "default", {
            name: "nb",
            englishName: "Norwegian (Bokmål)",
            nativeName: "norsk (bokmål)",
            language: "nb",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["$ -n", "$ n"],
                    ",": " ",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                        namesAbbr: ["sø", "ma", "ti", "on", "to", "fr", "lø"],
                        namesShort: ["sø", "ma", "ti", "on", "to", "fr", "lø"]
                    },
                    months: {
                        names: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yyyy",
                        D: "d. MMMM yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "d. MMMM yyyy HH:mm",
                        F: "d. MMMM yyyy HH:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "sr": ["sr", "default", {
            name: "sr",
            englishName: "Serbian",
            nativeName: "srpski",
            language: "sr",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "Din."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    firstDay: 1,
                    days: {
                        names: ["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"],
                        namesAbbr: ["ned", "pon", "uto", "sre", "čet", "pet", "sub"],
                        namesShort: ["ne", "po", "ut", "sr", "če", "pe", "su"]
                    },
                    months: {
                        names: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""],
                        namesAbbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "n.e.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d.M.yyyy",
                        D: "d. MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d. MMMM yyyy H:mm",
                        F: "d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "tg-Cyrl": ["tg-Cyrl", "default", {
            name: "tg-Cyrl",
            englishName: "Tajik (Cyrillic)",
            nativeName: "Тоҷикӣ",
            language: "tg-Cyrl",
            numberFormat: {
                ",": " ",
                ".": ",",
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    groupSizes: [3, 0],
                    ",": " ",
                    ".": ";",
                    symbol: "т.р."
                }
            },
            calendars: {
                standard: {
                    "/": ".",
                    days: {
                        names: ["Яш", "Душанбе", "Сешанбе", "Чоршанбе", "Панҷшанбе", "Ҷумъа", "Шанбе"],
                        namesAbbr: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"],
                        namesShort: ["Яш", "Дш", "Сш", "Чш", "Пш", "Ҷм", "Шн"]
                    },
                    months: {
                        names: ["Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    monthsGenitive: {
                        names: ["январи", "феврали", "марти", "апрели", "маи", "июни", "июли", "августи", "сентябри", "октябри", "ноябри", "декабри", ""],
                        namesAbbr: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd.MM.yy",
                        D: "d MMMM yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "d MMMM yyyy H:mm",
                        F: "d MMMM yyyy H:mm:ss",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "dsb": ["dsb", "default", {
            name: "dsb",
            englishName: "Lower Sorbian",
            nativeName: "dolnoserbšćina",
            language: "dsb",
            numberFormat: {
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "€"
                }
            },
            calendars: {
                standard: {
                    "/": ". ",
                    firstDay: 1,
                    days: {
                        names: ["njeźela", "ponjeźele", "wałtora", "srjoda", "stwortk", "pětk", "sobota"],
                        namesAbbr: ["nje", "pon", "wał", "srj", "stw", "pět", "sob"],
                        namesShort: ["n", "p", "w", "s", "s", "p", "s"]
                    },
                    months: {
                        names: ["januar", "februar", "měrc", "apryl", "maj", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "maj", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    monthsGenitive: {
                        names: ["januara", "februara", "měrca", "apryla", "maja", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""],
                        namesAbbr: ["jan", "feb", "měr", "apr", "maj", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "po Chr.", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d. M. yyyy",
                        D: "dddd, 'dnja' d. MMMM yyyy",
                        t: "H.mm 'goź.'",
                        T: "H:mm:ss",
                        f: "dddd, 'dnja' d. MMMM yyyy H.mm 'goź.'",
                        F: "dddd, 'dnja' d. MMMM yyyy H:mm:ss",
                        M: "d. MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "smj": ["smj", "default", {
            name: "smj",
            englishName: "Sami (Lule)",
            nativeName: "julevusámegiella",
            language: "smj",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    ",": ".",
                    ".": ",",
                    symbol: "kr"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 1,
                    days: {
                        names: ["ájllek", "mánnodahka", "dijstahka", "gasskavahkko", "duorastahka", "bierjjedahka", "lávvodahka"],
                        namesAbbr: ["ájl", "mán", "dis", "gas", "duor", "bier", "láv"],
                        namesShort: ["á", "m", "d", "g", "d", "b", "l"]
                    },
                    months: {
                        names: ["ådåjakmánno", "guovvamánno", "sjnjuktjamánno", "vuoratjismánno", "moarmesmánno", "biehtsemánno", "sjnjilltjamánno", "bårggemánno", "ragátmánno", "gålgådismánno", "basádismánno", "javllamánno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    monthsGenitive: {
                        names: ["ådåjakmáno", "guovvamáno", "sjnjuktjamáno", "vuoratjismáno", "moarmesmáno", "biehtsemáno", "sjnjilltjamáno", "bårggemáno", "ragátmáno", "gålgådismáno", "basádismáno", "javllamáno", ""],
                        namesAbbr: ["ådåj", "guov", "snju", "vuor", "moar", "bieh", "snji", "bårg", "ragá", "gålg", "basá", "javl", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "yyyy-MM-dd",
                        D: "MMMM d'. b. 'yyyy",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "MMMM d'. b. 'yyyy HH:mm",
                        F: "MMMM d'. b. 'yyyy HH:mm:ss",
                        M: "MMMM d'. b. '",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "uz-Latn": ["uz-Latn", "default", {
            name: "uz-Latn",
            englishName: "Uzbek (Latin)",
            nativeName: "U'zbek",
            language: "uz-Latn",
            numberFormat: {
                ",": " ",
                ".": ",",
                percent: {
                    pattern: ["-n%", "n%"],
                    ",": " ",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    decimals: 0,
                    ",": " ",
                    ".": ",",
                    symbol: "so'm"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["yakshanba", "dushanba", "seshanba", "chorshanba", "payshanba", "juma", "shanba"],
                        namesAbbr: ["yak.", "dsh.", "sesh.", "chr.", "psh.", "jm.", "sh."],
                        namesShort: ["ya", "d", "s", "ch", "p", "j", "sh"]
                    },
                    months: {
                        names: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""],
                        namesAbbr: ["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd/MM yyyy",
                        D: "yyyy 'yil' d-MMMM",
                        t: "HH:mm",
                        T: "HH:mm:ss",
                        f: "yyyy 'yil' d-MMMM HH:mm",
                        F: "yyyy 'yil' d-MMMM HH:mm:ss",
                        M: "d-MMMM",
                        Y: "MMMM yyyy"
                    }
                }
            }
        }],
    "mn-Mong": ["mn-Mong", "default", {
            name: "mn-Mong",
            englishName: "Mongolian (Traditional Mongolian)",
            nativeName: "ᠮᠤᠨᠭᠭᠤᠯ ᠬᠡᠯᠡ",
            language: "mn-Mong",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    pattern: ["-n%", "n%"],
                    groupSizes: [3, 0]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    groupSizes: [3, 0],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    firstDay: 1,
                    days: {
                        names: ["ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ"],
                        namesAbbr: ["ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ", "ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ"],
                        namesShort: ["ᠡ‍", "ᠨᠢ‍", "ᠬᠣ‍", "ᠭᠤ‍", "ᠳᠥ‍", "ᠲᠠ‍", "ᠵᠢ‍"]
                    },
                    months: {
                        names: ["ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", ""],
                        namesAbbr: ["ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ", "ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ", ""]
                    },
                    AM: null,
                    PM: null,
                    eras: [{ "name": "ᠣᠨ ᠲᠣᠭᠠᠯᠠᠯ ᠤᠨ", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm",
                        F: "yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm:ss",
                        M: "M'ᠰᠠᠷ᠎ᠠ' d'ᠡᠳᠦᠷ'",
                        Y: "yyyy'ᠣᠨ' M'ᠰᠠᠷ᠎ᠠ'"
                    }
                }
            }
        }],
    "iu-Latn": ["iu-Latn", "default", {
            name: "iu-Latn",
            englishName: "Inuktitut (Latin)",
            nativeName: "Inuktitut",
            language: "iu-Latn",
            numberFormat: {
                groupSizes: [3, 0],
                percent: {
                    groupSizes: [3, 0]
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Naattiinguja", "Naggajjau", "Aippiq", "Pingatsiq", "Sitammiq", "Tallirmiq", "Sivataarvik"],
                        namesAbbr: ["Nat", "Nag", "Aip", "Pi", "Sit", "Tal", "Siv"],
                        namesShort: ["N", "N", "A", "P", "S", "T", "S"]
                    },
                    months: {
                        names: ["Jaannuari", "Viivvuari", "Maatsi", "Iipuri", "Mai", "Juuni", "Julai", "Aaggiisi", "Sitipiri", "Utupiri", "Nuvipiri", "Tisipiri", ""],
                        namesAbbr: ["Jan", "Viv", "Mas", "Ipu", "Mai", "Jun", "Jul", "Agi", "Sii", "Uut", "Nuv", "Tis", ""]
                    },
                    patterns: {
                        d: "d/MM/yyyy",
                        D: "ddd, MMMM dd,yyyy",
                        f: "ddd, MMMM dd,yyyy h:mm tt",
                        F: "ddd, MMMM dd,yyyy h:mm:ss tt"
                    }
                }
            }
        }],
    "tzm-Latn": ["tzm-Latn", "default", {
            name: "tzm-Latn",
            englishName: "Tamazight (Latin)",
            nativeName: "Tamazight",
            language: "tzm-Latn",
            numberFormat: {
                pattern: ["n-"],
                ",": ".",
                ".": ",",
                percent: {
                    ",": ".",
                    ".": ","
                },
                currency: {
                    pattern: ["-n $", "n $"],
                    symbol: "DZD"
                }
            },
            calendars: {
                standard: {
                    "/": "-",
                    firstDay: 6,
                    days: {
                        names: ["Acer", "Arime", "Aram", "Ahad", "Amhadh", "Sem", "Sedh"],
                        namesAbbr: ["Ace", "Ari", "Ara", "Aha", "Amh", "Sem", "Sed"],
                        namesShort: ["Ac", "Ar", "Ar", "Ah", "Am", "Se", "Se"]
                    },
                    months: {
                        names: ["Yenayer", "Furar", "Maghres", "Yebrir", "Mayu", "Yunyu", "Yulyu", "Ghuct", "Cutenber", "Ktuber", "Wambir", "Dujanbir", ""],
                        namesAbbr: ["Yen", "Fur", "Mag", "Yeb", "May", "Yun", "Yul", "Ghu", "Cut", "Ktu", "Wam", "Duj", ""]
                    },
                    AM: null,
                    PM: null,
                    patterns: {
                        d: "dd-MM-yyyy",
                        D: "dd MMMM, yyyy",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "dd MMMM, yyyy H:mm",
                        F: "dd MMMM, yyyy H:mm:ss",
                        M: "dd MMMM"
                    }
                }
            }
        }],
    "ha-Latn": ["ha-Latn", "default", {
            name: "ha-Latn",
            englishName: "Hausa (Latin)",
            nativeName: "Hausa",
            language: "ha-Latn",
            numberFormat: {
                currency: {
                    pattern: ["$-n", "$ n"],
                    symbol: "N"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Lahadi", "Litinin", "Talata", "Laraba", "Alhamis", "Juma'a", "Asabar"],
                        namesAbbr: ["Lah", "Lit", "Tal", "Lar", "Alh", "Jum", "Asa"],
                        namesShort: ["L", "L", "T", "L", "A", "J", "A"]
                    },
                    months: {
                        names: ["Januwaru", "Febreru", "Maris", "Afrilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktocba", "Nuwamba", "Disamba", ""],
                        namesAbbr: ["Jan", "Feb", "Mar", "Afr", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""]
                    },
                    AM: ["Safe", "safe", "SAFE"],
                    PM: ["Yamma", "yamma", "YAMMA"],
                    eras: [{ "name": "AD", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy"
                    }
                }
            }
        }],
    "zh-CHS": ["zh-CHS", "default", {
            name: "zh-CHS",
            englishName: "Chinese (Simplified) Legacy",
            nativeName: "中文(简体) 旧版",
            language: "zh-CHS",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    pattern: ["$-n", "$n"],
                    symbol: "¥"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "yyyy/M/d",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }],
    "zh-CHT": ["zh-CHT", "default", {
            name: "zh-CHT",
            englishName: "Chinese (Traditional) Legacy",
            nativeName: "中文(繁體) 舊版",
            language: "zh-CHT",
            numberFormat: {
                percent: {
                    pattern: ["-n%", "n%"]
                },
                currency: {
                    symbol: "HK$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
                        namesAbbr: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"],
                        namesShort: ["日", "一", "二", "三", "四", "五", "六"]
                    },
                    months: {
                        names: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""],
                        namesAbbr: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""]
                    },
                    AM: ["上午", "上午", "上午"],
                    PM: ["下午", "下午", "下午"],
                    eras: [{ "name": "公元", "start": null, "offset": 0 }],
                    patterns: {
                        d: "d/M/yyyy",
                        D: "yyyy'年'M'月'd'日'",
                        t: "H:mm",
                        T: "H:mm:ss",
                        f: "yyyy'年'M'月'd'日' H:mm",
                        F: "yyyy'年'M'月'd'日' H:mm:ss",
                        M: "M'月'd'日'",
                        Y: "yyyy'年'M'月'"
                    }
                }
            }
        }]
};
//# sourceMappingURL=powerbiGlobalizeLocales.js.map

/***/ }),

/***/ 2594:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DateTimeSequence = void 0;
var dateUtils = __webpack_require__(7042);
// powerbi.extensibility.utils.type
var powerbi_visuals_utils_typeutils_1 = __webpack_require__(2170);
var NumericSequence = powerbi_visuals_utils_typeutils_1.numericSequence.NumericSequence;
var NumericSequenceRange = powerbi_visuals_utils_typeutils_1.numericSequenceRange.NumericSequenceRange;
// powerbi.extensibility.utils.formatting
var iFormattingService_1 = __webpack_require__(1497);
// Repreasents the sequence of the dates/times
var DateTimeSequence = /** @class */ (function () {
    // Constructors
    // Creates new instance of the DateTimeSequence
    function DateTimeSequence(unit) {
        this.unit = unit;
        this.sequence = [];
        this.min = new Date("9999-12-31T23:59:59.999");
        this.max = new Date("0001-01-01T00:00:00.000");
    }
    // Methods
    /**
     * Add a new Date to a sequence.
     * @param date - date to add
     */
    DateTimeSequence.prototype.add = function (date) {
        if (date < this.min) {
            this.min = date;
        }
        if (date > this.max) {
            this.max = date;
        }
        this.sequence.push(date);
    };
    // Methods
    /**
     * Extends the sequence to cover new date range
     * @param min - new min to be covered by sequence
     * @param max - new max to be covered by sequence
     */
    DateTimeSequence.prototype.extendToCover = function (min, max) {
        var x = this.min;
        while (min < x) {
            x = DateTimeSequence.ADD_INTERVAL(x, -this.interval, this.unit);
            this.sequence.splice(0, 0, x);
        }
        this.min = x;
        x = this.max;
        while (x < max) {
            x = DateTimeSequence.ADD_INTERVAL(x, this.interval, this.unit);
            this.sequence.push(x);
        }
        this.max = x;
    };
    /**
     * Move the sequence to cover new date range
     * @param min - new min to be covered by sequence
     * @param max - new max to be covered by sequence
     */
    DateTimeSequence.prototype.moveToCover = function (min, max) {
        var delta = DateTimeSequence.getDelta(min, max, this.unit);
        var count = Math.floor(delta / this.interval);
        this.min = DateTimeSequence.ADD_INTERVAL(this.min, count * this.interval, this.unit);
        this.sequence = [];
        this.sequence.push(this.min);
        this.max = this.min;
        while (this.max < max) {
            this.max = DateTimeSequence.ADD_INTERVAL(this.max, this.interval, this.unit);
            this.sequence.push(this.max);
        }
    };
    // Static
    /**
     * Calculate a new DateTimeSequence
     * @param dataMin - Date representing min of the data range
     * @param dataMax - Date representing max of the data range
     * @param expectedCount - expected number of intervals in the sequence
     * @param unit - of the intervals in the sequence
     */
    DateTimeSequence.CALCULATE = function (dataMin, dataMax, expectedCount, unit) {
        if (!unit) {
            unit = DateTimeSequence.GET_INTERVAL_UNIT(dataMin, dataMax, expectedCount);
        }
        switch (unit) {
            case iFormattingService_1.DateTimeUnit.Year:
                return DateTimeSequence.CALCULATE_YEARS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Month:
                return DateTimeSequence.CALCULATE_MONTHS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Week:
                return DateTimeSequence.CALCULATE_WEEKS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Day:
                return DateTimeSequence.CALCULATE_DAYS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Hour:
                return DateTimeSequence.CALCULATE_HOURS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Minute:
                return DateTimeSequence.CALCULATE_MINUTES(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Second:
                return DateTimeSequence.CALCULATE_SECONDS(dataMin, dataMax, expectedCount);
            case iFormattingService_1.DateTimeUnit.Millisecond:
                return DateTimeSequence.CALCULATE_MILLISECONDS(dataMin, dataMax, expectedCount);
        }
    };
    DateTimeSequence.CALCULATE_YEARS = function (dataMin, dataMax, expectedCount) {
        // Calculate range and sequence
        var yearsRange = NumericSequenceRange.calculateDataRange(dataMin.getFullYear(), dataMax.getFullYear(), false);
        // Calculate year sequence
        var sequence = NumericSequence.calculate(NumericSequenceRange.calculate(0, yearsRange.max - yearsRange.min), expectedCount, 0, null, null, [1, 2, 5]);
        var newMinYear = Math.floor(yearsRange.min / sequence.interval) * sequence.interval;
        var date = new Date(newMinYear, 0, 1);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Year);
    };
    DateTimeSequence.CALCULATE_MONTHS = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var minYear = dataMin.getFullYear();
        var maxYear = dataMax.getFullYear();
        var minMonth = dataMin.getMonth();
        var maxMonth = (maxYear - minYear) * 12 + dataMax.getMonth();
        var date = new Date(minYear, 0, 1);
        // Calculate month sequence
        var sequence = NumericSequence.calculateUnits(minMonth, maxMonth, expectedCount, [1, 2, 3, 6, 12]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Month);
    };
    DateTimeSequence.CALCULATE_WEEKS = function (dataMin, dataMax, expectedCount) {
        var firstDayOfWeek = 0;
        var minDayOfWeek = dataMin.getDay();
        var dayOffset = (minDayOfWeek - firstDayOfWeek + 7) % 7;
        var minDay = dataMin.getDate() - dayOffset;
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), minDay);
        var min = 0;
        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Week));
        // Calculate week sequence
        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 4, 8]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Week);
    };
    DateTimeSequence.CALCULATE_DAYS = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate());
        var min = 0;
        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(dataMin, dataMax, iFormattingService_1.DateTimeUnit.Day));
        // Calculate day sequence
        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 7, 14]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Day);
    };
    DateTimeSequence.CALCULATE_HOURS = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate());
        var min = powerbi_visuals_utils_typeutils_1.double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Hour));
        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Hour));
        // Calculate hour sequence
        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 3, 6, 12, 24]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Hour);
    };
    DateTimeSequence.CALCULATE_MINUTES = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours());
        var min = powerbi_visuals_utils_typeutils_1.double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Minute));
        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Minute));
        // Calculate minutes numeric sequence
        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 5, 10, 15, 30, 60, 60 * 2, 60 * 3, 60 * 6, 60 * 12, 60 * 24]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Minute);
    };
    DateTimeSequence.CALCULATE_SECONDS = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours(), dataMin.getMinutes());
        var min = powerbi_visuals_utils_typeutils_1.double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Second));
        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Second));
        // Calculate minutes numeric sequence
        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 5, 10, 15, 30, 60, 60 * 2, 60 * 5, 60 * 10, 60 * 15, 60 * 30, 60 * 60]);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Second);
    };
    DateTimeSequence.CALCULATE_MILLISECONDS = function (dataMin, dataMax, expectedCount) {
        // Calculate range
        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours(), dataMin.getMinutes(), dataMin.getSeconds());
        var min = DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Millisecond);
        var max = DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Millisecond);
        // Calculate milliseconds numeric sequence
        var sequence = NumericSequence.calculate(NumericSequenceRange.calculate(min, max), expectedCount, 0);
        // Convert to date sequence
        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Millisecond);
    };
    DateTimeSequence.ADD_INTERVAL = function (value, interval, unit) {
        interval = Math.round(interval);
        switch (unit) {
            case iFormattingService_1.DateTimeUnit.Year:
                return dateUtils.addYears(value, interval);
            case iFormattingService_1.DateTimeUnit.Month:
                return dateUtils.addMonths(value, interval);
            case iFormattingService_1.DateTimeUnit.Week:
                return dateUtils.addWeeks(value, interval);
            case iFormattingService_1.DateTimeUnit.Day:
                return dateUtils.addDays(value, interval);
            case iFormattingService_1.DateTimeUnit.Hour:
                return dateUtils.addHours(value, interval);
            case iFormattingService_1.DateTimeUnit.Minute:
                return dateUtils.addMinutes(value, interval);
            case iFormattingService_1.DateTimeUnit.Second:
                return dateUtils.addSeconds(value, interval);
            case iFormattingService_1.DateTimeUnit.Millisecond:
                return dateUtils.addMilliseconds(value, interval);
        }
    };
    DateTimeSequence.fromNumericSequence = function (date, sequence, unit) {
        var result = new DateTimeSequence(unit);
        for (var i = 0; i < sequence.sequence.length; i++) {
            var x = sequence.sequence[i];
            var d = DateTimeSequence.ADD_INTERVAL(date, x, unit);
            result.add(d);
        }
        result.interval = sequence.interval;
        result.intervalOffset = sequence.intervalOffset;
        return result;
    };
    DateTimeSequence.getDelta = function (min, max, unit) {
        var delta = 0;
        switch (unit) {
            case iFormattingService_1.DateTimeUnit.Year:
                delta = max.getFullYear() - min.getFullYear();
                break;
            case iFormattingService_1.DateTimeUnit.Month:
                delta = (max.getFullYear() - min.getFullYear()) * 12 + max.getMonth() - min.getMonth();
                break;
            case iFormattingService_1.DateTimeUnit.Week:
                delta = (max.getTime() - min.getTime()) / (7 * 24 * 3600000);
                break;
            case iFormattingService_1.DateTimeUnit.Day:
                delta = (max.getTime() - min.getTime()) / (24 * 3600000);
                break;
            case iFormattingService_1.DateTimeUnit.Hour:
                delta = (max.getTime() - min.getTime()) / 3600000;
                break;
            case iFormattingService_1.DateTimeUnit.Minute:
                delta = (max.getTime() - min.getTime()) / 60000;
                break;
            case iFormattingService_1.DateTimeUnit.Second:
                delta = (max.getTime() - min.getTime()) / 1000;
                break;
            case iFormattingService_1.DateTimeUnit.Millisecond:
                delta = max.getTime() - min.getTime();
                break;
        }
        return delta;
    };
    DateTimeSequence.GET_INTERVAL_UNIT = function (min, max, maxCount) {
        maxCount = Math.max(maxCount, 2);
        var totalDays = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Day);
        if (totalDays > 356 && totalDays >= 30 * 6 * maxCount)
            return iFormattingService_1.DateTimeUnit.Year;
        if (totalDays > 60 && totalDays > 7 * maxCount)
            return iFormattingService_1.DateTimeUnit.Month;
        if (totalDays > 14 && totalDays > 2 * maxCount)
            return iFormattingService_1.DateTimeUnit.Week;
        var totalHours = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Hour);
        if (totalDays > 2 && totalHours > 12 * maxCount)
            return iFormattingService_1.DateTimeUnit.Day;
        if (totalHours >= 24 && totalHours >= maxCount)
            return iFormattingService_1.DateTimeUnit.Hour;
        var totalMinutes = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Minute);
        if (totalMinutes > 2 && totalMinutes >= maxCount)
            return iFormattingService_1.DateTimeUnit.Minute;
        var totalSeconds = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Second);
        if (totalSeconds > 2 && totalSeconds >= 0.8 * maxCount)
            return iFormattingService_1.DateTimeUnit.Second;
        var totalMilliseconds = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Millisecond);
        if (totalMilliseconds > 0)
            return iFormattingService_1.DateTimeUnit.Millisecond;
        // If the size of the range is 0 we need to guess the unit based on the date's non-zero values starting with milliseconds
        var date = min;
        if (date.getMilliseconds() !== 0)
            return iFormattingService_1.DateTimeUnit.Millisecond;
        if (date.getSeconds() !== 0)
            return iFormattingService_1.DateTimeUnit.Second;
        if (date.getMinutes() !== 0)
            return iFormattingService_1.DateTimeUnit.Minute;
        if (date.getHours() !== 0)
            return iFormattingService_1.DateTimeUnit.Hour;
        if (date.getDate() !== 1)
            return iFormattingService_1.DateTimeUnit.Day;
        if (date.getMonth() !== 0)
            return iFormattingService_1.DateTimeUnit.Month;
        return iFormattingService_1.DateTimeUnit.Year;
    };
    // Constants
    DateTimeSequence.MIN_COUNT = 1;
    DateTimeSequence.MAX_COUNT = 1000;
    return DateTimeSequence;
}());
exports.DateTimeSequence = DateTimeSequence;
//# sourceMappingURL=dateTimeSequence.js.map

/***/ }),

/***/ 7042:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addMilliseconds = exports.addSeconds = exports.addMinutes = exports.addHours = exports.addDays = exports.addWeeks = exports.addMonths = exports.addYears = void 0;
// dateUtils module provides DateTimeSequence with set of additional date manipulation routines
var MonthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var MonthDaysLeap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
/**
 * Returns bool indicating weither the provided year is a leap year.
 * @param year - year value
 */
function isLeap(year) {
    return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);
}
/**
 * Returns number of days in the provided year/month.
 * @param year - year value
 * @param month - month value
 */
function getMonthDays(year, month) {
    return isLeap(year) ? MonthDaysLeap[month] : MonthDays[month];
}
/**
 * Adds a specified number of years to the provided date.
 * @param date - date value
 * @param yearDelta - number of years to add
 */
function addYears(date, yearDelta) {
    var year = date.getFullYear();
    var month = date.getMonth();
    var day = date.getDate();
    var isLeapDay = month === 2 && day === 29;
    var result = new Date(date.getTime());
    year = year + yearDelta;
    if (isLeapDay && !isLeap(year)) {
        day = 28;
    }
    result.setFullYear(year, month, day);
    return result;
}
exports.addYears = addYears;
/**
 * Adds a specified number of months to the provided date.
 * @param date - date value
 * @param monthDelta - number of months to add
 */
function addMonths(date, monthDelta) {
    var year = date.getFullYear();
    var month = date.getMonth();
    var day = date.getDate();
    var result = new Date(date.getTime());
    year += (monthDelta - (monthDelta % 12)) / 12;
    month += monthDelta % 12;
    // VSTS 1325771: Certain column charts don't display any data
    // Wrap arround the month if is after december (value 11)
    if (month > 11) {
        month = month % 12;
        year++;
    }
    day = Math.min(day, getMonthDays(year, month));
    result.setFullYear(year, month, day);
    return result;
}
exports.addMonths = addMonths;
/**
 * Adds a specified number of weeks to the provided date.
 * @param date - date value
 * @param weeks - number of weeks to add
 */
function addWeeks(date, weeks) {
    return addDays(date, weeks * 7);
}
exports.addWeeks = addWeeks;
/**
 * Adds a specified number of days to the provided date.
 * @param date - date value
 * @param days - number of days to add
 */
function addDays(date, days) {
    var year = date.getFullYear();
    var month = date.getMonth();
    var day = date.getDate();
    var result = new Date(date.getTime());
    result.setFullYear(year, month, day + days);
    return result;
}
exports.addDays = addDays;
/**
 * Adds a specified number of hours to the provided date.
 * @param date - date value
 * @param hours - number of hours to add
 */
function addHours(date, hours) {
    return new Date(date.getTime() + hours * 3600000);
}
exports.addHours = addHours;
/**
 * Adds a specified number of minutes to the provided date.
 * @param date - date value
 * @param minutes - number of minutes to add
 */
function addMinutes(date, minutes) {
    return new Date(date.getTime() + minutes * 60000);
}
exports.addMinutes = addMinutes;
/**
 * Adds a specified number of seconds to the provided date.
 * @param date - date value
 * @param seconds - number of seconds to add
 */
function addSeconds(date, seconds) {
    return new Date(date.getTime() + seconds * 1000);
}
exports.addSeconds = addSeconds;
/**
 * Adds a specified number of milliseconds to the provided date.
 * @param date - date value
 * @param milliseconds - number of milliseconds to add
 */
function addMilliseconds(date, milliseconds) {
    return new Date(date.getTime() + milliseconds);
}
exports.addMilliseconds = addMilliseconds;
//# sourceMappingURL=dateUtils.js.map

/***/ }),

/***/ 7254:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataLabelsDisplayUnitSystem = exports.WholeUnitsDisplayUnitSystem = exports.DefaultDisplayUnitSystem = exports.NoDisplayUnitSystem = exports.DisplayUnitSystem = exports.DisplayUnit = void 0;
/* eslint-disable no-useless-escape */
var formattingService_1 = __webpack_require__(5394);
var powerbi_visuals_utils_typeutils_1 = __webpack_require__(2170);
// Constants
var maxExponent = 24;
var defaultScientificBigNumbersBoundary = 1E15;
var scientificSmallNumbersBoundary = 1E-4;
var PERCENTAGE_FORMAT = "%";
var SCIENTIFIC_FORMAT = "E+0";
var DEFAULT_SCIENTIFIC_FORMAT = "0.##" + SCIENTIFIC_FORMAT;
// Regular expressions
/**
 * This regex looks for strings that match one of the following conditions:
 *   - Optionally contain "0", "#", followed by a period, followed by at least one "0" or "#" (Ex. ###,000.###)
 *   - Contains at least one of "0", "#", or "," (Ex. ###,000)
 *   - Contain a "g" (indicates to use the general .NET numeric format string)
 * The entire string (start to end) must match, and the match is not case-sensitive.
 */
var SUPPORTED_SCIENTIFIC_FORMATS = /^([0\#,]*\.[0\#]+|[0\#,]+|g)$/i;
var DisplayUnit = /** @class */ (function () {
    function DisplayUnit() {
    }
    // Methods
    DisplayUnit.prototype.project = function (value) {
        if (this.value) {
            return powerbi_visuals_utils_typeutils_1.double.removeDecimalNoise(value / this.value);
        }
        else {
            return value;
        }
    };
    DisplayUnit.prototype.reverseProject = function (value) {
        if (this.value) {
            return value * this.value;
        }
        else {
            return value;
        }
    };
    DisplayUnit.prototype.isApplicableTo = function (value) {
        value = Math.abs(value);
        var precision = powerbi_visuals_utils_typeutils_1.double.getPrecision(value, 3);
        return powerbi_visuals_utils_typeutils_1.double.greaterOrEqualWithPrecision(value, this.applicableRangeMin, precision) && powerbi_visuals_utils_typeutils_1.double.lessWithPrecision(value, this.applicableRangeMax, precision);
    };
    DisplayUnit.prototype.isScaling = function () {
        return this.value > 1;
    };
    return DisplayUnit;
}());
exports.DisplayUnit = DisplayUnit;
var DisplayUnitSystem = /** @class */ (function () {
    // Constructor
    function DisplayUnitSystem(units) {
        this.units = units ? units : [];
    }
    Object.defineProperty(DisplayUnitSystem.prototype, "title", {
        // Properties
        get: function () {
            return this.displayUnit ? this.displayUnit.title : undefined;
        },
        enumerable: false,
        configurable: true
    });
    // Methods
    DisplayUnitSystem.prototype.update = function (value) {
        if (value === undefined)
            return;
        this.unitBaseValue = value;
        this.displayUnit = this.findApplicableDisplayUnit(value);
    };
    DisplayUnitSystem.prototype.findApplicableDisplayUnit = function (value) {
        for (var _i = 0, _a = this.units; _i < _a.length; _i++) {
            var unit = _a[_i];
            if (unit.isApplicableTo(value))
                return unit;
        }
        return undefined;
    };
    DisplayUnitSystem.prototype.format = function (value, format, decimals, trailingZeros, cultureSelector) {
        decimals = this.getNumberOfDecimalsForFormatting(format, decimals);
        var nonScientificFormat = "";
        if (this.isFormatSupported(format)
            && !this.hasScientitifcFormat(format)
            && this.isScalingUnit()
            && this.shouldRespectScalingUnit(format)) {
            value = this.displayUnit.project(value);
            nonScientificFormat = this.displayUnit.labelFormat;
        }
        return this.formatHelper({
            value: value,
            nonScientificFormat: nonScientificFormat,
            format: format,
            decimals: decimals,
            trailingZeros: trailingZeros,
            cultureSelector: cultureSelector
        });
    };
    DisplayUnitSystem.prototype.isFormatSupported = function (format) {
        return !DisplayUnitSystem.UNSUPPORTED_FORMATS.test(format);
    };
    DisplayUnitSystem.prototype.isPercentageFormat = function (format) {
        return format && format.indexOf(PERCENTAGE_FORMAT) >= 0;
    };
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    DisplayUnitSystem.prototype.shouldRespectScalingUnit = function (format) {
        return true;
    };
    DisplayUnitSystem.prototype.getNumberOfDecimalsForFormatting = function (format, decimals) {
        return decimals;
    };
    DisplayUnitSystem.prototype.isScalingUnit = function () {
        return this.displayUnit && this.displayUnit.isScaling();
    };
    DisplayUnitSystem.prototype.formatHelper = function (options) {
        var value = options.value, cultureSelector = options.cultureSelector, decimals = options.decimals, trailingZeros = options.trailingZeros;
        var nonScientificFormat = options.nonScientificFormat, format = options.format;
        // If the format is "general" and we want to override the number of decimal places then use the default numeric format string.
        if ((format === "g" || format === "G") && decimals != null) {
            format = "#,0.00";
        }
        format = formattingService_1.numberFormat.addDecimalsToFormat(format, decimals, trailingZeros);
        if (format && !formattingService_1.formattingService.isStandardNumberFormat(format)) {
            return formattingService_1.formattingService.formatNumberWithCustomOverride(value, format, nonScientificFormat, cultureSelector);
        }
        if (!format) {
            format = "G";
        }
        if (!nonScientificFormat) {
            nonScientificFormat = "{0}";
        }
        var text = formattingService_1.formattingService.formatValue(value, format, cultureSelector);
        return formattingService_1.formattingService.format(nonScientificFormat, [text]);
    };
    //  Formats a single value by choosing an appropriate base for the DisplayUnitSystem before formatting.
    DisplayUnitSystem.prototype.formatSingleValue = function (value, format, decimals, trailingZeros, cultureSelector) {
        // Change unit base to a value appropriate for this value
        this.update(this.shouldUseValuePrecision(value) ? powerbi_visuals_utils_typeutils_1.double.getPrecision(value, 8) : value);
        return this.format(value, format, decimals, trailingZeros, cultureSelector);
    };
    DisplayUnitSystem.prototype.shouldUseValuePrecision = function (value) {
        if (this.units.length === 0)
            return true;
        // Check if the value is big enough to have a valid unit by checking against the smallest unit (that it's value bigger than 1).
        var applicableRangeMin = 0;
        for (var i = 0; i < this.units.length; i++) {
            if (this.units[i].isScaling()) {
                applicableRangeMin = this.units[i].applicableRangeMin;
                break;
            }
        }
        return Math.abs(value) < applicableRangeMin;
    };
    DisplayUnitSystem.prototype.isScientific = function (value) {
        return value < -defaultScientificBigNumbersBoundary || value > defaultScientificBigNumbersBoundary ||
            (-scientificSmallNumbersBoundary < value && value < scientificSmallNumbersBoundary && value !== 0);
    };
    DisplayUnitSystem.prototype.hasScientitifcFormat = function (format) {
        return format && format.toUpperCase().indexOf("E") !== -1;
    };
    DisplayUnitSystem.prototype.supportsScientificFormat = function (format) {
        if (format)
            return SUPPORTED_SCIENTIFIC_FORMATS.test(format);
        return true;
    };
    DisplayUnitSystem.prototype.shouldFallbackToScientific = function (value, format) {
        return !this.hasScientitifcFormat(format)
            && this.supportsScientificFormat(format)
            && this.isScientific(value);
    };
    DisplayUnitSystem.prototype.getScientificFormat = function (data, format, decimals, trailingZeros) {
        // Use scientific format outside of the range
        if (this.isFormatSupported(format) && this.shouldFallbackToScientific(data, format)) {
            var numericFormat = formattingService_1.numberFormat.getNumericFormat(data, format);
            if (decimals)
                numericFormat = formattingService_1.numberFormat.addDecimalsToFormat(numericFormat ? numericFormat : "0", Math.abs(decimals), trailingZeros);
            if (numericFormat)
                return numericFormat + SCIENTIFIC_FORMAT;
            else
                return DEFAULT_SCIENTIFIC_FORMAT;
        }
        return format;
    };
    DisplayUnitSystem.UNSUPPORTED_FORMATS = /^(p\d*)|(e\d*)$/i;
    return DisplayUnitSystem;
}());
exports.DisplayUnitSystem = DisplayUnitSystem;
// Provides a unit system that is defined by formatting in the model, and is suitable for visualizations shown in single number visuals in explore mode.
var NoDisplayUnitSystem = /** @class */ (function (_super) {
    __extends(NoDisplayUnitSystem, _super);
    // Constructor
    function NoDisplayUnitSystem() {
        return _super.call(this, []) || this;
    }
    return NoDisplayUnitSystem;
}(DisplayUnitSystem));
exports.NoDisplayUnitSystem = NoDisplayUnitSystem;
/** Provides a unit system that creates a more concise format for displaying values. This is suitable for most of the cases where
    we are showing values (chart axes) and as such it is the default unit system. */
var DefaultDisplayUnitSystem = /** @class */ (function (_super) {
    __extends(DefaultDisplayUnitSystem, _super);
    // Constructor
    function DefaultDisplayUnitSystem(unitLookup) {
        return _super.call(this, DefaultDisplayUnitSystem.getUnits(unitLookup)) || this;
    }
    // Methods
    DefaultDisplayUnitSystem.prototype.format = function (data, format, decimals, trailingZeros, cultureSelector) {
        format = this.getScientificFormat(data, format, decimals, trailingZeros);
        return _super.prototype.format.call(this, data, format, decimals, trailingZeros, cultureSelector);
    };
    DefaultDisplayUnitSystem.RESET = function () {
        DefaultDisplayUnitSystem.units = null;
    };
    DefaultDisplayUnitSystem.getUnits = function (unitLookup) {
        if (!DefaultDisplayUnitSystem.units) {
            DefaultDisplayUnitSystem.units = createDisplayUnits(unitLookup, function (value, previousUnitValue, min) {
                // When dealing with millions/billions/trillions we need to switch to millions earlier: for example instead of showing 100K 200K 300K we should show 0.1M 0.2M 0.3M etc
                if (value - previousUnitValue >= 1000) {
                    return value / 10;
                }
                return min;
            });
            // Ensure last unit has max of infinity
            DefaultDisplayUnitSystem.units[DefaultDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;
        }
        return DefaultDisplayUnitSystem.units;
    };
    return DefaultDisplayUnitSystem;
}(DisplayUnitSystem));
exports.DefaultDisplayUnitSystem = DefaultDisplayUnitSystem;
/** Provides a unit system that creates a more concise format for displaying values, but only allows showing a unit if we have at least
    one of those units (e.g. 0.9M is not allowed since it's less than 1 million). This is suitable for cases such as dashboard tiles
    where we have restricted space but do not want to show partial units. */
var WholeUnitsDisplayUnitSystem = /** @class */ (function (_super) {
    __extends(WholeUnitsDisplayUnitSystem, _super);
    // Constructor
    function WholeUnitsDisplayUnitSystem(unitLookup) {
        return _super.call(this, WholeUnitsDisplayUnitSystem.getUnits(unitLookup)) || this;
    }
    WholeUnitsDisplayUnitSystem.RESET = function () {
        WholeUnitsDisplayUnitSystem.units = null;
    };
    WholeUnitsDisplayUnitSystem.getUnits = function (unitLookup) {
        if (!WholeUnitsDisplayUnitSystem.units) {
            WholeUnitsDisplayUnitSystem.units = createDisplayUnits(unitLookup);
            // Ensure last unit has max of infinity
            WholeUnitsDisplayUnitSystem.units[WholeUnitsDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;
        }
        return WholeUnitsDisplayUnitSystem.units;
    };
    WholeUnitsDisplayUnitSystem.prototype.format = function (data, format, decimals, trailingZeros, cultureSelector) {
        format = this.getScientificFormat(data, format, decimals, trailingZeros);
        return _super.prototype.format.call(this, data, format, decimals, trailingZeros, cultureSelector);
    };
    return WholeUnitsDisplayUnitSystem;
}(DisplayUnitSystem));
exports.WholeUnitsDisplayUnitSystem = WholeUnitsDisplayUnitSystem;
var DataLabelsDisplayUnitSystem = /** @class */ (function (_super) {
    __extends(DataLabelsDisplayUnitSystem, _super);
    function DataLabelsDisplayUnitSystem(unitLookup) {
        return _super.call(this, DataLabelsDisplayUnitSystem.getUnits(unitLookup)) || this;
    }
    DataLabelsDisplayUnitSystem.prototype.isFormatSupported = function (format) {
        return !DataLabelsDisplayUnitSystem.UNSUPPORTED_FORMATS.test(format);
    };
    DataLabelsDisplayUnitSystem.getUnits = function (unitLookup) {
        if (!DataLabelsDisplayUnitSystem.units) {
            var units = [];
            var adjustMinBasedOnPreviousUnit = function (value, previousUnitValue, min) {
                // Never returns true, we are always ignoring
                // We do not early switch (e.g. 100K instead of 0.1M)
                // Intended? If so, remove this function, otherwise, remove if statement
                if (value === -1)
                    if (value - previousUnitValue >= 1000) {
                        return value / 10;
                    }
                return min;
            };
            // Add Auto & None
            var names = unitLookup(-1);
            addUnitIfNonEmpty(units, DataLabelsDisplayUnitSystem.AUTO_DISPLAYUNIT_VALUE, names.title, names.format, adjustMinBasedOnPreviousUnit);
            names = unitLookup(0);
            addUnitIfNonEmpty(units, DataLabelsDisplayUnitSystem.NONE_DISPLAYUNIT_VALUE, names.title, names.format, adjustMinBasedOnPreviousUnit);
            // Add normal units
            DataLabelsDisplayUnitSystem.units = units.concat(createDisplayUnits(unitLookup, adjustMinBasedOnPreviousUnit));
            // Ensure last unit has max of infinity
            DataLabelsDisplayUnitSystem.units[DataLabelsDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;
        }
        return DataLabelsDisplayUnitSystem.units;
    };
    DataLabelsDisplayUnitSystem.prototype.format = function (data, format, decimals, trailingZeros, cultureSelector) {
        format = this.getScientificFormat(data, format, decimals, trailingZeros);
        return _super.prototype.format.call(this, data, format, decimals, trailingZeros, cultureSelector);
    };
    // Constants
    DataLabelsDisplayUnitSystem.AUTO_DISPLAYUNIT_VALUE = 0;
    DataLabelsDisplayUnitSystem.NONE_DISPLAYUNIT_VALUE = 1;
    DataLabelsDisplayUnitSystem.UNSUPPORTED_FORMATS = /^(e\d*)$/i;
    return DataLabelsDisplayUnitSystem;
}(DisplayUnitSystem));
exports.DataLabelsDisplayUnitSystem = DataLabelsDisplayUnitSystem;
function createDisplayUnits(unitLookup, adjustMinBasedOnPreviousUnit) {
    var units = [];
    for (var i = 3; i < maxExponent; i++) {
        var names = unitLookup(i);
        if (names)
            addUnitIfNonEmpty(units, powerbi_visuals_utils_typeutils_1.double.pow10(i), names.title, names.format, adjustMinBasedOnPreviousUnit);
    }
    return units;
}
function addUnitIfNonEmpty(units, value, title, labelFormat, adjustMinBasedOnPreviousUnit) {
    if (title || labelFormat) {
        var min = value;
        if (units.length > 0) {
            var previousUnit = units[units.length - 1];
            if (adjustMinBasedOnPreviousUnit)
                min = adjustMinBasedOnPreviousUnit(value, previousUnit.value, min);
            previousUnit.applicableRangeMax = min;
        }
        var unit = new DisplayUnit();
        unit.value = value;
        unit.applicableRangeMin = min;
        unit.applicableRangeMax = min * 1000;
        unit.title = title;
        unit.labelFormat = labelFormat;
        units.push(unit);
    }
}
//# sourceMappingURL=displayUnitSystem.js.map

/***/ }),

/***/ 6585:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DisplayUnitSystemType = void 0;
// The system used to determine display units used during formatting
var DisplayUnitSystemType;
(function (DisplayUnitSystemType) {
    // Default display unit system, which saves space by using units such as K, M, bn with PowerView rules for when to pick a unit. Suitable for chart axes.
    DisplayUnitSystemType[DisplayUnitSystemType["Default"] = 0] = "Default";
    // A verbose display unit system that will only respect the formatting defined in the model. Suitable for explore mode single-value cards.
    DisplayUnitSystemType[DisplayUnitSystemType["Verbose"] = 1] = "Verbose";
    /**
     * A display unit system that uses units such as K, M, bn if we have at least one of those units (e.g. 0.9M is not valid as it's less than 1 million).
     * Suitable for dashboard tile cards
     */
    DisplayUnitSystemType[DisplayUnitSystemType["WholeUnits"] = 2] = "WholeUnits";
    // A display unit system that also contains Auto and None units for data labels
    DisplayUnitSystemType[DisplayUnitSystemType["DataLabels"] = 3] = "DataLabels";
})(DisplayUnitSystemType = exports.DisplayUnitSystemType || (exports.DisplayUnitSystemType = {}));
//# sourceMappingURL=displayUnitSystemType.js.map

/***/ }),

/***/ 9078:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Family = exports.fallbackFonts = void 0;
var familyInfo_1 = __webpack_require__(8069);
exports.fallbackFonts = ["helvetica", "arial", "sans-serif"];
exports.Family = {
    light: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    semilight: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    regular: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    semibold: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    bold: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    lightSecondary: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    regularSecondary: new familyInfo_1.FamilyInfo(exports.fallbackFonts),
    boldSecondary: new familyInfo_1.FamilyInfo(exports.fallbackFonts)
};
//# sourceMappingURL=family.js.map

/***/ }),

/***/ 8069:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FamilyInfo = void 0;
var FamilyInfo = /** @class */ (function () {
    function FamilyInfo(families) {
        this.families = families;
    }
    Object.defineProperty(FamilyInfo.prototype, "family", {
        /**
         * Gets the first font "wf_" font family since it will always be loaded.
         */
        get: function () {
            return this.getFamily();
        },
        enumerable: false,
        configurable: true
    });
    /**
    * Gets the first font family that matches regex (if provided).
    * Default regex looks for "wf_" fonts which are always loaded.
    */
    FamilyInfo.prototype.getFamily = function (regex) {
        if (regex === void 0) { regex = /^wf_/; }
        if (!this.families) {
            return null;
        }
        if (regex) {
            for (var _i = 0, _a = this.families; _i < _a.length; _i++) {
                var fontFamily = _a[_i];
                if (regex.test(fontFamily)) {
                    return fontFamily;
                }
            }
        }
        return this.families[0];
    };
    Object.defineProperty(FamilyInfo.prototype, "css", {
        /**
         * Gets the CSS string for the "font-family" CSS attribute.
         */
        get: function () {
            return this.getCSS();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets the CSS string for the "font-family" CSS attribute.
     */
    FamilyInfo.prototype.getCSS = function () {
        return this.families ? this.families.map((function (font) { return font.indexOf(" ") > 0 ? "'" + font + "'" : font; })).join(", ") : null;
    };
    return FamilyInfo;
}());
exports.FamilyInfo = FamilyInfo;
//# sourceMappingURL=familyInfo.js.map

/***/ }),

/***/ 9297:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
/* eslint-disable no-useless-escape */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fixDateTimeFormat = exports.findDateFormat = void 0;
var regexCache;
/**
 * Translate .NET format into something supported by Globalize.
 */
function findDateFormat(value, format, cultureName) {
    switch (format) {
        case "m":
            // Month + day
            format = "M";
            break;
        case "O":
        case "o":
            // Roundtrip
            format = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'0000'";
            break;
        case "R":
        case "r":
            // RFC1123 pattern - - time must be converted to UTC before formatting
            value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());
            format = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
            break;
        case "s":
            // Sortable - should use invariant culture
            format = "S";
            break;
        case "u":
            // Universal sortable - should convert to UTC before applying the "yyyy'-'MM'-'dd HH':'mm':'ss'Z' format.
            value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());
            format = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
            break;
        case "U":
            // Universal full - the pattern is same as F but the time must be converted to UTC before formatting
            value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());
            format = "F";
            break;
        case "y":
        case "Y":
            // Year and month
            switch (cultureName) {
                case "default":
                case "en":
                case "en-US":
                    format = "MMMM, yyyy"; // Fix the default year-month pattern for english
                    break;
                default:
                    format = "Y"; // For other cultures - use the localized pattern
            }
            break;
    }
    return { value: value, format: format };
}
exports.findDateFormat = findDateFormat;
/**
 * Translates unsupported .NET custom format expressions to the custom expressions supported by Globalize.
 */
function fixDateTimeFormat(format) {
    // Fix for the "K" format (timezone):
    // T he js dates don't have a kind property so we'll support only local kind which is equavalent to zzz format.
    format = format.replace(/%K/g, "zzz");
    format = format.replace(/K/g, "zzz");
    format = format.replace(/fffffff/g, "fff0000");
    format = format.replace(/ffffff/g, "fff000");
    format = format.replace(/fffff/g, "fff00");
    format = format.replace(/ffff/g, "fff0");
    // Fix for the 5 digit year: "yyyyy" format.
    // The Globalize doesn't support dates greater than 9999 so we replace the "yyyyy" with "0yyyy".
    format = format.replace(/yyyyy/g, "0yyyy");
    // Fix for the 3 digit year: "yyy" format.
    // The Globalize doesn't support this formatting so we need to replace it with the 4 digit year "yyyy" format.
    format = format.replace(/(^y|^)yyy(^y|$)/g, "yyyy");
    if (!regexCache) {
        // Creating Regexes for cases "Using single format specifier"
        // - http://msdn.microsoft.com/en-us/library/8kb3ddd4.aspx#UsingSingleSpecifiers
        // This is not supported from The Globalize.
        // The case covers all single "%" lead specifier (like "%d" but not %dd)
        // The cases as single "%d" are filtered in if the bellow.
        // (?!S) where S is the specifier make sure that we only one symbol for specifier.
        regexCache = ["d", "f", "F", "g", "h", "H", "K", "m", "M", "s", "t", "y", "z", ":", "/"].map(function (s) {
            return { r: new RegExp("\%" + s + "(?!" + s + ")", "g"), s: s };
        });
    }
    if (format.indexOf("%") !== -1 && format.length > 2) {
        for (var i = 0; i < regexCache.length; i++) {
            format = format.replace(regexCache[i].r, regexCache[i].s);
        }
    }
    return format;
}
exports.fixDateTimeFormat = fixDateTimeFormat;
//# sourceMappingURL=formatting.js.map

/***/ }),

/***/ 41:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.format = exports.canFormat = void 0;
var formatting_1 = __webpack_require__(9297);
var formattingEncoder = __webpack_require__(4249);
var stringExtensions = __webpack_require__(7918);
var globalize_1 = __webpack_require__(4818);
var _currentCachedFormat;
var _currentCachedProcessedFormat;
// Evaluates if the value can be formatted using the NumberFormat
function canFormat(value) {
    return value instanceof Date;
}
exports.canFormat = canFormat;
// Formats the date using provided format and culture
function format(value, format, culture) {
    format = format || "G";
    var isStandard = format.length === 1;
    try {
        if (isStandard) {
            return formatDateStandard(value, format, culture);
        }
        else {
            return formatDateCustom(value, format, culture);
        }
    }
    catch (e) {
        return formatDateStandard(value, "G", culture);
    }
}
exports.format = format;
// Formats the date using standard format expression
function formatDateStandard(value, format, culture) {
    // In order to provide parity with .NET we have to support additional set of DateTime patterns.
    var patterns = culture.calendar.patterns;
    // Extend supported set of patterns
    ensurePatterns(culture.calendar);
    // Handle extended set of formats
    var output = (0, formatting_1.findDateFormat)(value, format, culture.name);
    if (output.format.length === 1)
        format = patterns[output.format];
    else
        format = output.format;
    // need to revisit when globalization is enabled
    if (!culture) {
        culture = this.getCurrentCulture();
    }
    return globalize_1.Globalize.format(output.value, format, culture);
}
// Formats the date using custom format expression
function formatDateCustom(value, format, culture) {
    var result;
    var literals = [];
    format = formattingEncoder.preserveLiterals(format, literals);
    if (format.indexOf("F") > -1) {
        // F is not supported so we need to replace the F with f based on the milliseconds
        // Replace all sequences of F longer than 3 with "FFF"
        format = stringExtensions.replaceAll(format, "FFFF", "FFF");
        // Based on milliseconds update the format to use fff
        var milliseconds = value.getMilliseconds();
        if (milliseconds % 10 >= 1) {
            format = stringExtensions.replaceAll(format, "FFF", "fff");
        }
        format = stringExtensions.replaceAll(format, "FFF", "FF");
        if ((milliseconds % 100) / 10 >= 1) {
            format = stringExtensions.replaceAll(format, "FF", "ff");
        }
        format = stringExtensions.replaceAll(format, "FF", "F");
        if ((milliseconds % 1000) / 100 >= 1) {
            format = stringExtensions.replaceAll(format, "F", "f");
        }
        format = stringExtensions.replaceAll(format, "F", "");
        if (format === "" || format === "%")
            return "";
    }
    format = processCustomDateTimeFormat(format);
    result = globalize_1.Globalize.format(value, format, culture);
    result = localize(result, culture.calendar);
    result = formattingEncoder.restoreLiterals(result, literals, false);
    return result;
}
// Translates unsupported .NET custom format expressions to the custom expressions supported by JQuery.Globalize
function processCustomDateTimeFormat(format) {
    if (format === _currentCachedFormat) {
        return _currentCachedProcessedFormat;
    }
    _currentCachedFormat = format;
    format = (0, formatting_1.fixDateTimeFormat)(format);
    _currentCachedProcessedFormat = format;
    return format;
}
// Localizes the time separator symbol
function localize(value, dictionary) {
    var timeSeparator = dictionary[":"];
    if (timeSeparator === ":") {
        return value;
    }
    var result = "";
    var count = value.length;
    for (var i = 0; i < count; i++) {
        var char = value.charAt(i);
        switch (char) {
            case ":":
                result += timeSeparator;
                break;
            default:
                result += char;
                break;
        }
    }
    return result;
}
function ensurePatterns(calendar) {
    var patterns = calendar.patterns;
    if (patterns["g"] === undefined) {
        patterns["g"] = patterns["f"].replace(patterns["D"], patterns["d"]); // Generic: Short date, short time
        patterns["G"] = patterns["F"].replace(patterns["D"], patterns["d"]); // Generic: Short date, long time
    }
}
//# sourceMappingURL=dateTimeFormat.js.map

/***/ }),

/***/ 4249:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.restoreLiterals = exports.preserveLiterals = exports.removeLiterals = void 0;
// quoted and escaped literal patterns
// NOTE: the final three cases match .NET behavior
var literalPatterns = [
    "'[^']*'",
    "\"[^\"]*\"",
    "\\\\.",
    "'[^']*$",
    "\"[^\"]*$",
    "\\\\$", // backslash at end of string
];
var literalMatcher = new RegExp(literalPatterns.join("|"), "g");
// Unicode U+E000 - U+F8FF is a private area and so we can use the chars from the range to encode the escaped sequences
function removeLiterals(format) {
    literalMatcher.lastIndex = 0;
    // just in case consecutive non-literals have some meaning
    return format.replace(literalMatcher, "\uE100");
}
exports.removeLiterals = removeLiterals;
function preserveLiterals(format, literals) {
    literalMatcher.lastIndex = 0;
    for (;;) {
        var match = literalMatcher.exec(format);
        if (!match)
            break;
        var literal = match[0];
        var literalOffset = literalMatcher.lastIndex - literal.length;
        var token = String.fromCharCode(0xE100 + literals.length);
        literals.push(literal);
        format = format.substring(0, literalOffset) + token + format.substring(literalMatcher.lastIndex);
        // back to avoid skipping due to removed literal substring
        literalMatcher.lastIndex = literalOffset + 1;
    }
    return format;
}
exports.preserveLiterals = preserveLiterals;
function restoreLiterals(format, literals, quoted) {
    if (quoted === void 0) { quoted = true; }
    var count = literals.length;
    for (var i = 0; i < count; i++) {
        var token = String.fromCharCode(0xE100 + i);
        var literal = literals[i];
        if (!quoted) {
            // caller wants literals to be re-inserted without escaping
            var firstChar = literal[0];
            if (firstChar === "\\" || literal.length === 1 || literal[literal.length - 1] !== firstChar) {
                // either escaped literal OR quoted literal that's missing the trailing quote
                // in either case we only remove the leading character
                literal = literal.substring(1);
            }
            else {
                // so must be a quoted literal with both starting and ending quote
                literal = literal.substring(1, literal.length - 1);
            }
        }
        format = format.replace(token, literal);
    }
    return format;
}
exports.restoreLiterals = restoreLiterals;
//# sourceMappingURL=formattingEncoder.js.map

/***/ }),

/***/ 5394:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var window = __webpack_require__(6738);

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/* eslint-disable no-useless-escape */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.formattingEncoder = exports.dateTimeFormat = exports.numberFormat = exports.formattingService = exports.FormattingService = void 0;
var globalize_1 = __webpack_require__(4818);
var globalize_cultures_1 = __webpack_require__(9538);
(0, globalize_cultures_1.default)(globalize_1.Globalize);
var dateTimeFormat = __webpack_require__(41);
exports.dateTimeFormat = dateTimeFormat;
var numberFormat = __webpack_require__(5451);
exports.numberFormat = numberFormat;
var formattingEncoder = __webpack_require__(4249);
exports.formattingEncoder = formattingEncoder;
var iFormattingService_1 = __webpack_require__(1497);
var IndexedTokensRegex = /({{)|(}})|{(\d+[^}]*)}/g;
// Formatting Service
var FormattingService = /** @class */ (function () {
    function FormattingService() {
    }
    FormattingService.prototype.formatValue = function (value, formatValue, cultureSelector) {
        // Handle special cases
        if (value === undefined || value === null) {
            return "";
        }
        var gculture = this.getCulture(cultureSelector);
        if (dateTimeFormat.canFormat(value)) {
            // Dates
            return dateTimeFormat.format(value, formatValue, gculture);
        }
        else if (numberFormat.canFormat(value)) {
            // Numbers
            return numberFormat.format(value, formatValue, gculture);
        }
        // Other data types - return as string
        return value.toString();
    };
    FormattingService.prototype.format = function (formatWithIndexedTokens, args, culture) {
        var _this = this;
        if (!formatWithIndexedTokens) {
            return "";
        }
        return formatWithIndexedTokens.replace(IndexedTokensRegex, function (match, left, right, argToken) {
            if (left) {
                return "{";
            }
            else if (right) {
                return "}";
            }
            else {
                var parts = argToken.split(":");
                var argIndex = parseInt(parts[0], 10);
                var argFormat = parts[1];
                return _this.formatValue(args[argIndex], argFormat, culture);
            }
        });
    };
    FormattingService.prototype.isStandardNumberFormat = function (format) {
        return numberFormat.isStandardFormat(format);
    };
    FormattingService.prototype.formatNumberWithCustomOverride = function (value, format, nonScientificOverrideFormat, culture) {
        var gculture = this.getCulture(culture);
        return numberFormat.formatWithCustomOverride(value, format, nonScientificOverrideFormat, gculture);
    };
    FormattingService.prototype.dateFormatString = function (unit) {
        if (!this._dateTimeScaleFormatInfo)
            this.initialize();
        return this._dateTimeScaleFormatInfo.getFormatString(unit);
    };
    /**
     * Sets the current localization culture
     * @param cultureSelector - name of a culture: "en", "en-UK", "fr-FR" etc. (See National Language Support (NLS) for full lists. Use "default" for invariant culture).
     */
    FormattingService.prototype.setCurrentCulture = function (cultureSelector) {
        if (this._currentCultureSelector !== cultureSelector) {
            this._currentCulture = this.getCulture(cultureSelector);
            this._currentCultureSelector = cultureSelector;
            this._dateTimeScaleFormatInfo = new DateTimeScaleFormatInfo(this._currentCulture);
        }
    };
    /**
     * Gets the culture assotiated with the specified cultureSelector ("en", "en-US", "fr-FR" etc).
     * @param cultureSelector - name of a culture: "en", "en-UK", "fr-FR" etc. (See National Language Support (NLS) for full lists. Use "default" for invariant culture).
     * Exposing this function for testability of unsupported cultures
     */
    FormattingService.prototype.getCulture = function (cultureSelector) {
        if (cultureSelector == null) {
            if (this._currentCulture == null) {
                this.initialize();
            }
            return this._currentCulture;
        }
        else {
            var culture = globalize_1.Globalize.findClosestCulture(cultureSelector);
            if (!culture)
                culture = globalize_1.Globalize.culture("en-US");
            return culture;
        }
    };
    // By default the Globalization module initializes to the culture/calendar provided in the language/culture URL params
    FormattingService.prototype.initialize = function () {
        var cultureName = this.getCurrentCulture();
        this.setCurrentCulture(cultureName);
        var calendarName = this.getUrlParam("calendar");
        if (calendarName) {
            var culture = this._currentCulture;
            var c = culture.calendars[calendarName];
            if (c) {
                culture.calendar = c;
            }
        }
    };
    /**
     *  Exposing this function for testability
     */
    FormattingService.prototype.getCurrentCulture = function () {
        if (window === null || window === void 0 ? void 0 : window.navigator) {
            return window.navigator.userLanguage || window.navigator["language"];
        }
        return "en-US";
    };
    /**
     *  Exposing this function for testability
     *  @param name: queryString name
     */
    FormattingService.prototype.getUrlParam = function (name) {
        var param = window.location.search.match(RegExp("[?&]" + name + "=([^&]*)"));
        return param ? param[1] : undefined;
    };
    return FormattingService;
}());
exports.FormattingService = FormattingService;
// DateTimeScaleFormatInfo is used to calculate and keep the Date formats used for different units supported by the DateTimeScaleModel
var DateTimeScaleFormatInfo = /** @class */ (function () {
    // Constructor
    /**
     * Creates new instance of the DateTimeScaleFormatInfo class.
     * @param culture - culture which calendar info is going to be used to derive the formats.
     */
    function DateTimeScaleFormatInfo(culture) {
        var calendar = culture.calendar;
        var patterns = calendar.patterns;
        var monthAbbreviations = calendar["months"]["namesAbbr"];
        var cultureHasMonthAbbr = monthAbbreviations && monthAbbreviations[0];
        var yearMonthPattern = patterns["Y"];
        var monthDayPattern = patterns["M"];
        var fullPattern = patterns["f"];
        var longTimePattern = patterns["T"];
        var shortTimePattern = patterns["t"];
        var separator = fullPattern.indexOf(",") > -1 ? ", " : " ";
        var hasYearSymbol = yearMonthPattern.indexOf("yyyy'") === 0 && yearMonthPattern.length > 6 && yearMonthPattern[6] === "\'";
        this.YearPattern = hasYearSymbol ? yearMonthPattern.substring(0, 7) : "yyyy";
        var yearPos = fullPattern.indexOf("yy");
        var monthPos = fullPattern.indexOf("MMMM");
        this.MonthPattern = cultureHasMonthAbbr && monthPos > -1 ? (yearPos > monthPos ? "MMM yyyy" : "yyyy MMM") : yearMonthPattern;
        this.DayPattern = cultureHasMonthAbbr ? monthDayPattern.replace("MMMM", "MMM") : monthDayPattern;
        var minutePos = fullPattern.indexOf("mm");
        var pmPos = fullPattern.indexOf("tt");
        var shortHourPattern = pmPos > -1 ? shortTimePattern.replace(":mm ", "") : shortTimePattern;
        this.HourPattern = yearPos < minutePos ? this.DayPattern + separator + shortHourPattern : shortHourPattern + separator + this.DayPattern;
        this.MinutePattern = shortTimePattern;
        this.SecondPattern = longTimePattern;
        this.MillisecondPattern = longTimePattern.replace("ss", "ss.fff");
        // Special cases
        switch (culture.name) {
            case "fi-FI":
                this.DayPattern = this.DayPattern.replace("'ta'", ""); // Fix for finish 'ta' suffix for month names.
                this.HourPattern = this.HourPattern.replace("'ta'", "");
                break;
        }
    }
    // Methods
    /**
     * Returns the format string of the provided DateTimeUnit.
     * @param unit - date or time unit
     */
    DateTimeScaleFormatInfo.prototype.getFormatString = function (unit) {
        switch (unit) {
            case iFormattingService_1.DateTimeUnit.Year:
                return this.YearPattern;
            case iFormattingService_1.DateTimeUnit.Month:
                return this.MonthPattern;
            case iFormattingService_1.DateTimeUnit.Week:
            case iFormattingService_1.DateTimeUnit.Day:
                return this.DayPattern;
            case iFormattingService_1.DateTimeUnit.Hour:
                return this.HourPattern;
            case iFormattingService_1.DateTimeUnit.Minute:
                return this.MinutePattern;
            case iFormattingService_1.DateTimeUnit.Second:
                return this.SecondPattern;
            case iFormattingService_1.DateTimeUnit.Millisecond:
                return this.MillisecondPattern;
        }
    };
    return DateTimeScaleFormatInfo;
}());
var formattingService = new FormattingService();
exports.formattingService = formattingService;
//# sourceMappingURL=formattingService.js.map

/***/ }),

/***/ 1497:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DateTimeUnit = void 0;
// Enumeration of DateTimeUnits
var DateTimeUnit;
(function (DateTimeUnit) {
    DateTimeUnit[DateTimeUnit["Year"] = 0] = "Year";
    DateTimeUnit[DateTimeUnit["Month"] = 1] = "Month";
    DateTimeUnit[DateTimeUnit["Week"] = 2] = "Week";
    DateTimeUnit[DateTimeUnit["Day"] = 3] = "Day";
    DateTimeUnit[DateTimeUnit["Hour"] = 4] = "Hour";
    DateTimeUnit[DateTimeUnit["Minute"] = 5] = "Minute";
    DateTimeUnit[DateTimeUnit["Second"] = 6] = "Second";
    DateTimeUnit[DateTimeUnit["Millisecond"] = 7] = "Millisecond";
})(DateTimeUnit = exports.DateTimeUnit || (exports.DateTimeUnit = {}));
//# sourceMappingURL=iFormattingService.js.map

/***/ }),

/***/ 5451:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCustomFormatMetadata = exports.formatWithCustomOverride = exports.format = exports.isStandardFormat = exports.canFormat = exports.getComponents = exports.hasFormatComponents = exports.addDecimalsToFormat = exports.getNumericFormat = exports.NumberFormatComponentsDelimeter = void 0;
/**
 * NumberFormat module contains the static methods for formatting the numbers.
 * It extends the Globalize functionality to support complete set of .NET
 * formatting expressions for numeric types including custom formats.
 */
/* eslint-disable no-useless-escape */
var globalize_1 = __webpack_require__(4818);
// powerbi.extensibility.utils.type
var powerbi_visuals_utils_typeutils_1 = __webpack_require__(2170);
// powerbi.extensibility.utils.formatting
var stringExtensions = __webpack_require__(7918);
var formattingEncoder = __webpack_require__(4249);
var formattingService_1 = __webpack_require__(5394);
var NumericalPlaceHolderRegex = /\{.+\}/;
var ScientificFormatRegex = /e[+-]*[0#]+/i;
var StandardFormatRegex = /^[a-z]\d{0,2}$/i; // a letter + up to 2 digits for precision specifier
var TrailingZerosRegex = /0+$/;
var DecimalFormatRegex = /\.([0#]*)/g;
var NumericFormatRegex = /[0#,\.]+[0,#]*/g;
// (?=...) is a positive lookahead assertion. The RE is asking for the last digit placeholder, [0#],
// which is followed by non-digit placeholders and the end of string, [^0#]*$. But it only matches
// the last digit placeholder, not anything that follows because the positive lookahead isn"t included
// in the match - it is only a condition.
var LastNumericPlaceholderRegex = /([0#])(?=[^0#]*$)/;
var DecimalFormatCharacter = ".";
var ZeroPlaceholder = "0";
var DigitPlaceholder = "#";
var ExponentialFormatChar = "E";
var NumericPlaceholders = [ZeroPlaceholder, DigitPlaceholder];
var NumericPlaceholderRegex = new RegExp(NumericPlaceholders.join("|"), "g");
exports.NumberFormatComponentsDelimeter = ";";
function getNonScientificFormatWithPrecision(baseFormat, numericFormat) {
    if (!numericFormat || baseFormat === undefined)
        return baseFormat;
    var newFormat = "{0:" + numericFormat + "}";
    return baseFormat.replace("{0}", newFormat);
}
function getNumericFormat(value, baseFormat) {
    if (baseFormat == null)
        return baseFormat;
    if (hasFormatComponents(baseFormat)) {
        var _a = getComponents(baseFormat), positive = _a.positive, negative = _a.negative, zero = _a.zero;
        if (value > 0)
            return getNumericFormatFromComponent(value, positive);
        else if (value === 0)
            return getNumericFormatFromComponent(value, zero);
        return getNumericFormatFromComponent(value, negative);
    }
    return getNumericFormatFromComponent(value, baseFormat);
}
exports.getNumericFormat = getNumericFormat;
function getNumericFormatFromComponent(value, format) {
    var match = powerbi_visuals_utils_typeutils_1.regExpExtensions.run(NumericFormatRegex, format);
    if (match)
        return match[0];
    return format;
}
function addDecimalsToFormat(baseFormat, decimals, trailingZeros) {
    if (decimals == null)
        return baseFormat;
    // Default format string
    if (baseFormat == null)
        baseFormat = ZeroPlaceholder;
    if (hasFormatComponents(baseFormat)) {
        var _a = getComponents(baseFormat), positive = _a.positive, negative = _a.negative, zero = _a.zero;
        var formats = [positive, negative, zero];
        for (var i = 0; i < formats.length; i++) {
            // Update format in formats array
            formats[i] = addDecimalsToFormatComponent(formats[i], decimals, trailingZeros);
        }
        return formats.join(exports.NumberFormatComponentsDelimeter);
    }
    return addDecimalsToFormatComponent(baseFormat, decimals, trailingZeros);
}
exports.addDecimalsToFormat = addDecimalsToFormat;
function addDecimalsToFormatComponent(format, decimals, trailingZeros) {
    decimals = Math.abs(decimals);
    if (decimals >= 0) {
        var literals = [];
        format = formattingEncoder.preserveLiterals(format, literals);
        var placeholder = trailingZeros ? ZeroPlaceholder : DigitPlaceholder;
        var decimalPlaceholders = stringExtensions.repeat(placeholder, Math.abs(decimals));
        var match = powerbi_visuals_utils_typeutils_1.regExpExtensions.run(DecimalFormatRegex, format);
        if (match) {
            var beforeDecimal = format.substring(0, match.index);
            var formatDecimal = format.substring(match.index + 1, match[1].length + match.index + 1);
            var afterDecimal = format.substring(match.index + match[0].length);
            if (trailingZeros)
                // Use explicit decimals argument as placeholders
                formatDecimal = decimalPlaceholders;
            else {
                var decimalChange = decimalPlaceholders.length - formatDecimal.length;
                if (decimalChange > 0)
                    // Append decimalPlaceholders to existing decimal portion of format string
                    formatDecimal = formatDecimal + decimalPlaceholders.slice(-decimalChange);
                else if (decimalChange < 0)
                    // Remove decimals from formatDecimal
                    formatDecimal = formatDecimal.slice(0, decimalChange);
            }
            if (formatDecimal.length > 0)
                formatDecimal = DecimalFormatCharacter + formatDecimal;
            format = beforeDecimal + formatDecimal + afterDecimal;
        }
        else if (decimalPlaceholders.length > 0) {
            // Replace last numeric placeholder with decimal portion
            format = format.replace(LastNumericPlaceholderRegex, "$1" + DecimalFormatCharacter + decimalPlaceholders);
        }
        if (literals.length !== 0)
            format = formattingEncoder.restoreLiterals(format, literals);
    }
    return format;
}
function hasFormatComponents(format) {
    return formattingEncoder.removeLiterals(format).indexOf(exports.NumberFormatComponentsDelimeter) !== -1;
}
exports.hasFormatComponents = hasFormatComponents;
function getComponents(format) {
    var signFormat = {
        hasNegative: false,
        positive: format,
        negative: format,
        zero: format,
    };
    // escape literals so semi-colon in a literal isn't interpreted as a delimiter
    // NOTE: OK to use the literals extracted here for all three components before since the literals are indexed.
    // For example, "'pos-lit';'neg-lit'" will get preserved as "\uE000;\uE001" and the literal array will be
    // ['pos-lit', 'neg-lit']. When the negative components is restored, its \uE001 will select the second
    // literal.
    var literals = [];
    format = formattingEncoder.preserveLiterals(format, literals);
    var signSpecificFormats = format.split(exports.NumberFormatComponentsDelimeter);
    var formatCount = signSpecificFormats.length;
    if (formatCount > 1) {
        if (literals.length !== 0)
            signSpecificFormats = signSpecificFormats.map(function (signSpecificFormat) { return formattingEncoder.restoreLiterals(signSpecificFormat, literals); });
        signFormat.hasNegative = true;
        signFormat.positive = signFormat.zero = signSpecificFormats[0];
        signFormat.negative = signSpecificFormats[1];
        if (formatCount > 2)
            signFormat.zero = signSpecificFormats[2];
    }
    return signFormat;
}
exports.getComponents = getComponents;
var _lastCustomFormatMeta;
// Evaluates if the value can be formatted using the NumberFormat
function canFormat(value) {
    return typeof (value) === "number";
}
exports.canFormat = canFormat;
function isStandardFormat(format) {
    return StandardFormatRegex.test(format);
}
exports.isStandardFormat = isStandardFormat;
// Formats the number using specified format expression and culture
function format(value, format, culture) {
    format = format || "G";
    try {
        if (isStandardFormat(format))
            return formatNumberStandard(value, format, culture);
        return formatNumberCustom(value, format, culture);
    }
    catch (e) {
        return globalize_1.Globalize.format(value, undefined, culture);
    }
}
exports.format = format;
// Performs a custom format with a value override.  Typically used for custom formats showing scaled values.
function formatWithCustomOverride(value, format, nonScientificOverrideFormat, culture) {
    return formatNumberCustom(value, format, culture, nonScientificOverrideFormat);
}
exports.formatWithCustomOverride = formatWithCustomOverride;
// Formats the number using standard format expression
function formatNumberStandard(value, format, culture) {
    var result;
    var precision = (format.length > 1 ? parseInt(format.substring(1, format.length), 10) : undefined);
    var numberFormatInfo = culture.numberFormat;
    var formatChar = format.charAt(0);
    var abs = Math.abs(value);
    switch (formatChar) {
        case "e":
        case "E":
            if (precision === undefined) {
                precision = 6;
            }
            format = "0." + stringExtensions.repeat("0", precision) + formatChar + "+000";
            result = formatNumberCustom(value, format, culture);
            break;
        case "f":
        case "F":
            result = precision !== undefined ? value.toFixed(precision) : value.toFixed(numberFormatInfo.decimals);
            result = localize(result, numberFormatInfo);
            break;
        case "g":
        case "G":
            if (abs === 0 || (1E-4 <= abs && abs < 1E15)) {
                // For the range of 0.0001 to 1,000,000,000,000,000 - use the normal form
                result = precision !== undefined ? value.toPrecision(precision) : value.toString();
            }
            else {
                // Otherwise use exponential
                // Assert that value is a number and fall back on returning value if it is not
                if (typeof (value) !== "number")
                    return String(value);
                result = precision !== undefined ? value.toExponential(precision) : value.toExponential();
                result = result.replace("e", "E");
            }
            result = localize(result, numberFormatInfo);
            break;
        case "r":
        case "R":
            result = value.toString();
            result = localize(result, numberFormatInfo);
            break;
        case "x":
        case "X":
            result = value.toString(16);
            if (formatChar === "X") {
                result = result.toUpperCase();
            }
            if (precision !== undefined) {
                var actualPrecision = result.length;
                var isNegative = value < 0;
                if (isNegative) {
                    actualPrecision--;
                }
                var paddingZerosCount = precision - actualPrecision;
                var paddingZeros = undefined;
                if (paddingZerosCount > 0) {
                    paddingZeros = stringExtensions.repeat("0", paddingZerosCount);
                }
                if (isNegative) {
                    result = "-" + paddingZeros + result.substring(1);
                }
                else {
                    result = paddingZeros + result;
                }
            }
            result = localize(result, numberFormatInfo);
            break;
        default:
            result = globalize_1.Globalize.format(value, format, culture);
    }
    return result;
}
// Formats the number using custom format expression
function formatNumberCustom(value, format, culture, nonScientificOverrideFormat) {
    var result;
    var numberFormatInfo = culture.numberFormat;
    if (isFinite(value)) {
        // Split format by positive[;negative;zero] pattern
        var formatComponents = getComponents(format);
        // Pick a format based on the sign of value
        if (value > 0) {
            format = formatComponents.positive;
        }
        else if (value === 0) {
            format = formatComponents.zero;
        }
        else {
            format = formatComponents.negative;
        }
        // Normalize value if we have an explicit negative format
        if (formatComponents.hasNegative)
            value = Math.abs(value);
        // Get format metadata
        var formatMeta = getCustomFormatMetadata(format, true /*calculatePrecision*/);
        // Preserve literals and escaped chars
        var literals = [];
        if (formatMeta.hasLiterals) {
            format = formattingEncoder.preserveLiterals(format, literals);
        }
        // Scientific format
        if (formatMeta.hasE && !nonScientificOverrideFormat) {
            var scientificMatch = powerbi_visuals_utils_typeutils_1.regExpExtensions.run(ScientificFormatRegex, format);
            if (scientificMatch) {
                // Case 2.1. Scientific custom format
                var formatM = format.substring(0, scientificMatch.index);
                var formatE = format.substring(scientificMatch.index + 2); // E(+|-)
                var precision = getCustomFormatPrecision(formatM, formatMeta);
                var scale = getCustomFormatScale(formatM, formatMeta);
                if (scale !== 1) {
                    value = value * scale;
                }
                // Assert that value is a number and fall back on returning value if it is not
                if (typeof (value) !== "number")
                    return String(value);
                var s = value.toExponential(precision);
                var indexOfE = s.indexOf("e");
                var mantissa = s.substring(0, indexOfE);
                var exp = s.substring(indexOfE + 1);
                var resultM = fuseNumberWithCustomFormat(mantissa, formatM, numberFormatInfo);
                var resultE = fuseNumberWithCustomFormat(exp, formatE, numberFormatInfo);
                if (resultE.charAt(0) === "+" && scientificMatch[0].charAt(1) !== "+") {
                    resultE = resultE.substring(1);
                }
                var e = scientificMatch[0].charAt(0);
                result = resultM + e + resultE;
            }
        }
        // Non scientific format
        if (result === undefined) {
            var valueFormatted = void 0;
            var isValueGlobalized = false;
            var precision = getCustomFormatPrecision(format, formatMeta);
            var scale = getCustomFormatScale(format, formatMeta);
            if (scale !== 1)
                value = value * scale;
            // Rounding
            value = parseFloat(toNonScientific(value, precision));
            if (!isFinite(value)) {
                // very large and small finite values can become infinite by parseFloat(toNonScientific())
                return globalize_1.Globalize.format(value, undefined);
            }
            if (nonScientificOverrideFormat) {
                // Get numeric format from format string
                var numericFormat = getNumericFormat(value, format);
                // Add separators and decimalFormat to nonScientificFormat
                nonScientificOverrideFormat = getNonScientificFormatWithPrecision(nonScientificOverrideFormat, numericFormat);
                // Format the value
                valueFormatted = formattingService_1.formattingService.format(nonScientificOverrideFormat, [value], culture.name);
                isValueGlobalized = true;
            }
            else
                valueFormatted = toNonScientific(value, precision);
            result = fuseNumberWithCustomFormat(valueFormatted, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized);
        }
        if (formatMeta.hasLiterals) {
            result = formattingEncoder.restoreLiterals(result, literals, false);
        }
        _lastCustomFormatMeta = formatMeta;
    }
    else {
        return globalize_1.Globalize.format(value, undefined);
    }
    return result;
}
// Returns string with the fixed point respresentation of the number
function toNonScientific(value, precision) {
    var result = "";
    var precisionZeros = 0;
    // Double precision numbers support actual 15-16 decimal digits of precision.
    if (precision > 16) {
        precisionZeros = precision - 16;
        precision = 16;
    }
    var digitsBeforeDecimalPoint = powerbi_visuals_utils_typeutils_1.double.log10(Math.abs(value));
    if (digitsBeforeDecimalPoint < 16) {
        if (digitsBeforeDecimalPoint > 0) {
            var maxPrecision = 16 - digitsBeforeDecimalPoint;
            if (precision > maxPrecision) {
                precisionZeros += precision - maxPrecision;
                precision = maxPrecision;
            }
        }
        result = value.toFixed(precision);
    }
    else if (digitsBeforeDecimalPoint === 16) {
        result = value.toFixed(0);
        precisionZeros += precision;
        if (precisionZeros > 0) {
            result += ".";
        }
    }
    else { // digitsBeforeDecimalPoint > 16
        // Different browsers have different implementations of the toFixed().
        // In IE it returns fixed format no matter what's the number. In FF and Chrome the method returns exponential format for numbers greater than 1E21.
        // So we need to check for range and convert the to exponential with the max precision.
        // Then we convert exponential string to fixed by removing the dot and padding with "power" zeros.
        // Assert that value is a number and fall back on returning value if it is not
        if (typeof (value) !== "number")
            return String(value);
        result = value.toExponential(15);
        var indexOfE = result.indexOf("e");
        if (indexOfE > 0) {
            var indexOfDot = result.indexOf(".");
            var mantissa = result.substring(0, indexOfE);
            var exp = result.substring(indexOfE + 1);
            var powerZeros = parseInt(exp, 10) - (mantissa.length - indexOfDot - 1);
            result = mantissa.replace(".", "") + stringExtensions.repeat("0", powerZeros);
            if (precision > 0) {
                result = result + "." + stringExtensions.repeat("0", precision);
            }
        }
    }
    if (precisionZeros > 0) {
        result = result + stringExtensions.repeat("0", precisionZeros);
    }
    return result;
}
/**
 * Returns the formatMetadata of the format
 * When calculating precision and scale, if format string of
 * positive[;negative;zero] => positive format will be used
 * @param (required) format - format string
 * @param (optional) calculatePrecision - calculate precision of positive format
 * @param (optional) calculateScale - calculate scale of positive format
 */
function getCustomFormatMetadata(format, calculatePrecision, calculateScale, calculatePartsPerScale) {
    if (_lastCustomFormatMeta !== undefined && format === _lastCustomFormatMeta.format) {
        return _lastCustomFormatMeta;
    }
    var literals = [];
    var escaped = formattingEncoder.preserveLiterals(format, literals);
    var result = {
        format: format,
        hasLiterals: literals.length !== 0,
        hasE: false,
        hasCommas: false,
        hasDots: false,
        hasPercent: false,
        hasPermile: false,
        precision: undefined,
        scale: undefined,
        partsPerScale: undefined,
    };
    for (var i = 0, length_1 = escaped.length; i < length_1; i++) {
        var c = escaped.charAt(i);
        switch (c) {
            case "e":
            case "E":
                result.hasE = true;
                break;
            case ",":
                result.hasCommas = true;
                break;
            case ".":
                result.hasDots = true;
                break;
            case "%":
                result.hasPercent = true;
                break;
            case "\u2030": // ‰
                result.hasPermile = true;
                break;
        }
    }
    // Use positive format for calculating these values
    var formatComponents = getComponents(format);
    if (calculatePrecision)
        result.precision = getCustomFormatPrecision(formatComponents.positive, result);
    if (calculatePartsPerScale)
        result.partsPerScale = getCustomFormatPartsPerScale(formatComponents.positive, result);
    if (calculateScale)
        result.scale = getCustomFormatScale(formatComponents.positive, result);
    return result;
}
exports.getCustomFormatMetadata = getCustomFormatMetadata;
/** Returns the decimal precision of format based on the number of # and 0 chars after the decimal point
     * Important: The input format string needs to be split to the appropriate pos/neg/zero portion to work correctly */
function getCustomFormatPrecision(format, formatMeta) {
    if (formatMeta.precision > -1) {
        return formatMeta.precision;
    }
    var result = 0;
    if (formatMeta.hasDots) {
        if (formatMeta.hasLiterals) {
            format = formattingEncoder.removeLiterals(format);
        }
        var dotIndex = format.indexOf(".");
        if (dotIndex > -1) {
            var count = format.length;
            for (var i = dotIndex; i < count; i++) {
                var char = format.charAt(i);
                if (char.match(NumericPlaceholderRegex))
                    result++;
                // 0.00E+0 :: Break before counting 0 in
                // exponential portion of format string
                if (char === ExponentialFormatChar)
                    break;
            }
            result = Math.min(19, result);
        }
    }
    formatMeta.precision = result;
    return result;
}
function getCustomFormatPartsPerScale(format, formatMeta) {
    if (formatMeta.partsPerScale != null)
        return formatMeta.partsPerScale;
    var result = 1;
    if (formatMeta.hasPercent && format.indexOf("%") > -1) {
        result = result * 100;
    }
    if (formatMeta.hasPermile && format.indexOf(/* ‰ */ "\u2030") > -1) {
        result = result * 1000;
    }
    formatMeta.partsPerScale = result;
    return result;
}
// Returns the scale factor of the format based on the "%" and scaling "," chars in the format
function getCustomFormatScale(format, formatMeta) {
    if (formatMeta.scale > -1) {
        return formatMeta.scale;
    }
    var result = getCustomFormatPartsPerScale(format, formatMeta);
    if (formatMeta.hasCommas) {
        var dotIndex = format.indexOf(".");
        if (dotIndex === -1) {
            dotIndex = format.length;
        }
        for (var i = dotIndex - 1; i > -1; i--) {
            var char = format.charAt(i);
            if (char === ",") {
                result = result / 1000;
            }
            else {
                break;
            }
        }
    }
    formatMeta.scale = result;
    return result;
}
function fuseNumberWithCustomFormat(value, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized) {
    var suppressModifyValue = !!nonScientificOverrideFormat;
    var formatParts = format.split(".", 2);
    if (formatParts.length === 2) {
        var wholeFormat = formatParts[0];
        var fractionFormat = formatParts[1];
        var displayUnit = "";
        // Remove display unit from value before splitting on "." as localized display units sometimes end with "."
        if (nonScientificOverrideFormat) {
            displayUnit = nonScientificOverrideFormat.replace(NumericalPlaceHolderRegex, "");
            value = value.replace(displayUnit, "");
        }
        var globalizedDecimalSeparator = numberFormatInfo["."];
        var decimalSeparator = isValueGlobalized ? globalizedDecimalSeparator : ".";
        var valueParts = value.split(decimalSeparator, 2);
        var wholeValue = valueParts.length === 1 ? valueParts[0] + displayUnit : valueParts[0];
        var fractionValue = valueParts.length === 2 ? valueParts[1] + displayUnit : "";
        fractionValue = fractionValue.replace(TrailingZerosRegex, "");
        var wholeFormattedValue = fuseNumberWithCustomFormatLeft(wholeValue, wholeFormat, numberFormatInfo, suppressModifyValue);
        var fractionFormattedValue = fuseNumberWithCustomFormatRight(fractionValue, fractionFormat, suppressModifyValue);
        if (fractionFormattedValue.fmtOnly || fractionFormattedValue.value === "")
            return wholeFormattedValue + fractionFormattedValue.value;
        return wholeFormattedValue + globalizedDecimalSeparator + fractionFormattedValue.value;
    }
    return fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue);
}
function fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue) {
    var groupSymbolIndex = format.indexOf(",");
    var enableGroups = groupSymbolIndex > -1 && groupSymbolIndex < Math.max(format.lastIndexOf("0"), format.lastIndexOf("#")) && numberFormatInfo[","];
    var groupDigitCount = 0;
    var groupIndex = 0;
    var groupSizes = numberFormatInfo.groupSizes || [3];
    var groupSize = groupSizes[0];
    var groupSeparator = numberFormatInfo[","];
    var sign = "";
    var firstChar = value.charAt(0);
    if (firstChar === "+" || firstChar === "-") {
        sign = numberFormatInfo[firstChar];
        value = value.substring(1);
    }
    var isZero = value === "0";
    var result = "";
    var leftBuffer = "";
    var vi = value.length - 1;
    var fmtOnly = true;
    // Iterate through format chars and replace 0 and # with the digits from the value string
    for (var fi = format.length - 1; fi > -1; fi--) {
        var formatChar = format.charAt(fi);
        switch (formatChar) {
            case ZeroPlaceholder:
            case DigitPlaceholder:
                fmtOnly = false;
                if (leftBuffer !== "") {
                    result = leftBuffer + result;
                    leftBuffer = "";
                }
                if (!suppressModifyValue) {
                    if (vi > -1 || formatChar === ZeroPlaceholder) {
                        if (enableGroups) {
                            // If the groups are enabled we'll need to keep track of the current group index and periodically insert group separator,
                            if (groupDigitCount === groupSize) {
                                result = groupSeparator + result;
                                groupIndex++;
                                if (groupIndex < groupSizes.length) {
                                    groupSize = groupSizes[groupIndex];
                                }
                                groupDigitCount = 1;
                            }
                            else {
                                groupDigitCount++;
                            }
                        }
                    }
                    if (vi > -1) {
                        if (isZero && formatChar === DigitPlaceholder) {
                            // Special case - if we need to format a zero value and the # symbol is used - we don't copy it into the result)
                        }
                        else {
                            result = value.charAt(vi) + result;
                        }
                        vi--;
                    }
                    else if (formatChar !== DigitPlaceholder) {
                        result = formatChar + result;
                    }
                }
                break;
            case ",":
                // We should skip all the , chars
                break;
            default:
                leftBuffer = formatChar + leftBuffer;
                break;
        }
    }
    // If the value didn't fit into the number of zeros provided in the format then we should insert the missing part of the value into the result
    if (!suppressModifyValue) {
        if (vi > -1 && result !== "") {
            if (enableGroups) {
                while (vi > -1) {
                    if (groupDigitCount === groupSize) {
                        result = groupSeparator + result;
                        groupIndex++;
                        if (groupIndex < groupSizes.length) {
                            groupSize = groupSizes[groupIndex];
                        }
                        groupDigitCount = 1;
                    }
                    else {
                        groupDigitCount++;
                    }
                    result = value.charAt(vi) + result;
                    vi--;
                }
            }
            else {
                result = value.substring(0, vi + 1) + result;
            }
        }
        // Insert sign in front of the leftBuffer and result
        return sign + leftBuffer + result;
    }
    if (fmtOnly)
        // If the format doesn't specify any digits to be displayed, then just return the format we've parsed up until now.
        return sign + leftBuffer + result;
    return sign + leftBuffer + value + result;
}
function fuseNumberWithCustomFormatRight(value, format, suppressModifyValue) {
    var formatLength = format.length;
    var valueLength = value.length;
    if (suppressModifyValue) {
        var lastChar = format.charAt(formatLength - 1);
        if (!lastChar.match(NumericPlaceholderRegex))
            return {
                value: value + lastChar,
                fmtOnly: value === "",
            };
        return {
            value: value,
            fmtOnly: value === "",
        };
    }
    var result = "", fmtOnly = true, vi = 0;
    for (var fi = 0; fi < formatLength; fi++) {
        var formatChar = format.charAt(fi);
        if (vi < valueLength) {
            switch (formatChar) {
                case ZeroPlaceholder:
                case DigitPlaceholder:
                    result += value[vi++];
                    fmtOnly = false;
                    break;
                default:
                    result += formatChar;
            }
        }
        else {
            if (formatChar !== DigitPlaceholder) {
                result += formatChar;
                fmtOnly = fmtOnly && (formatChar !== ZeroPlaceholder);
            }
        }
    }
    return {
        value: result,
        fmtOnly: fmtOnly,
    };
}
function localize(value, dictionary) {
    var plus = dictionary["+"];
    var minus = dictionary["-"];
    var dot = dictionary["."];
    var comma = dictionary[","];
    if (plus === "+" && minus === "-" && dot === "." && comma === ",") {
        return value;
    }
    var count = value.length;
    var result = "";
    for (var i = 0; i < count; i++) {
        var char = value.charAt(i);
        switch (char) {
            case "+":
                result = result + plus;
                break;
            case "-":
                result = result + minus;
                break;
            case ".":
                result = result + dot;
                break;
            case ",":
                result = result + comma;
                break;
            default:
                result = result + char;
                break;
        }
    }
    return result;
}
//# sourceMappingURL=numberFormat.js.map

/***/ }),

/***/ 4776:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;

__webpack_unused_export__ = ({ value: true });
__webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = exports.wD = __webpack_unused_export__ = __webpack_unused_export__ = void 0;
var formatting = __webpack_require__(9297);
__webpack_unused_export__ = formatting;
var valueFormatter = __webpack_require__(9987);
exports.wD = valueFormatter;
var stringExtensions = __webpack_require__(7918);
__webpack_unused_export__ = stringExtensions;
var textMeasurementService = __webpack_require__(9246);
__webpack_unused_export__ = textMeasurementService;
var interfaces = __webpack_require__(6003);
__webpack_unused_export__ = interfaces;
var font = __webpack_require__(9078);
__webpack_unused_export__ = font;
var familyInfo = __webpack_require__(8069);
__webpack_unused_export__ = familyInfo;
var textUtil = __webpack_require__(4158);
__webpack_unused_export__ = textUtil;
var dateUtils = __webpack_require__(7042);
__webpack_unused_export__ = dateUtils;
var dateTimeSequence = __webpack_require__(2594);
__webpack_unused_export__ = dateTimeSequence;
var displayUnitSystem = __webpack_require__(7254);
__webpack_unused_export__ = displayUnitSystem;
var displayUnitSystemType = __webpack_require__(6585);
__webpack_unused_export__ = displayUnitSystemType;
var formattingService = __webpack_require__(5394);
__webpack_unused_export__ = formattingService;
var wordBreaker = __webpack_require__(1363);
__webpack_unused_export__ = wordBreaker;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6003:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=interfaces.js.map

/***/ }),

/***/ 6116:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ephemeralStorageService = exports.EphemeralStorageService = void 0;
var EphemeralStorageService = /** @class */ (function () {
    function EphemeralStorageService(clearCacheInterval) {
        this.cache = {};
        this.clearCacheInterval = (clearCacheInterval != null)
            ? clearCacheInterval
            : EphemeralStorageService.defaultClearCacheInterval;
        this.clearCache();
    }
    EphemeralStorageService.prototype.getData = function (key) {
        return this.cache[key];
    };
    EphemeralStorageService.prototype.setData = function (key, data) {
        var _this = this;
        this.cache[key] = data;
        if (this.clearCacheTimerId == null) {
            this.clearCacheTimerId = setTimeout(function () { return _this.clearCache(); }, this.clearCacheInterval);
        }
    };
    EphemeralStorageService.prototype.clearCache = function () {
        this.cache = {};
        this.clearCacheTimerId = undefined;
    };
    EphemeralStorageService.defaultClearCacheInterval = (1000 * 60 * 60 * 24); // 1 day
    return EphemeralStorageService;
}());
exports.EphemeralStorageService = EphemeralStorageService;
exports.ephemeralStorageService = new EphemeralStorageService();
//# sourceMappingURL=ephemeralStorageService.js.map

/***/ }),

/***/ 7918:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stripTagDelimiters = exports.deriveClsCompliantName = exports.stringifyAsPrettyJSON = exports.normalizeFileName = exports.escapeStringForRegex = exports.constructNameFromList = exports.findUniqueName = exports.ensureUniqueNames = exports.replaceAll = exports.repeat = exports.getLengthDifference = exports.trimWhitespace = exports.trimTrailingWhitespace = exports.isWhitespace = exports.containsWhitespace = exports.isNullOrUndefinedOrWhiteSpaceString = exports.isNullOrEmpty = exports.stringToArrayBuffer = exports.normalizeCase = exports.containsIgnoreCase = exports.contains = exports.startsWith = exports.startsWithIgnoreCase = exports.equalIgnoreCase = exports.format = exports.endsWith = void 0;
/* eslint-disable no-useless-escape */
var HtmlTagRegex = new RegExp("[<>]", "g");
/**
 * Checks if a string ends with a sub-string.
 */
function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
}
exports.endsWith = endsWith;
function format() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var s = args[0];
    if (isNullOrUndefinedOrWhiteSpaceString(s))
        return s;
    for (var i = 0; i < args.length - 1; i++) {
        var reg = new RegExp("\\{" + i + "\\}", "gm");
        s = s.replace(reg, args[i + 1]);
    }
    return s;
}
exports.format = format;
/**
 * Compares two strings for equality, ignoring case.
 */
function equalIgnoreCase(a, b) {
    return normalizeCase(a) === normalizeCase(b);
}
exports.equalIgnoreCase = equalIgnoreCase;
function startsWithIgnoreCase(a, b) {
    var normalizedSearchString = normalizeCase(b);
    return normalizeCase(a).indexOf(normalizedSearchString) === 0;
}
exports.startsWithIgnoreCase = startsWithIgnoreCase;
function startsWith(a, b) {
    return a.indexOf(b) === 0;
}
exports.startsWith = startsWith;
// Determines whether a string contains a specified substring (by case-sensitive comparison).
function contains(source, substring) {
    if (source == null)
        return false;
    return source.indexOf(substring) !== -1;
}
exports.contains = contains;
// Determines whether a string contains a specified substring (while ignoring case).
function containsIgnoreCase(source, substring) {
    if (source == null)
        return false;
    return contains(normalizeCase(source), normalizeCase(substring));
}
exports.containsIgnoreCase = containsIgnoreCase;
/**
 * Normalizes case for a string.
 * Used by equalIgnoreCase method.
 */
function normalizeCase(value) {
    return value.toUpperCase();
}
exports.normalizeCase = normalizeCase;
/**
 * Receives a string and returns an ArrayBuffer of its characters.
 * @return An ArrayBuffer of the string's characters.
 * If the string is empty or null or undefined - returns null.
 */
function stringToArrayBuffer(str) {
    if (isNullOrEmpty(str)) {
        return null;
    }
    var buffer = new ArrayBuffer(str.length);
    var bufferView = new Uint8Array(buffer);
    for (var i = 0, strLen = str.length; i < strLen; i++) {
        bufferView[i] = str.charCodeAt(i);
    }
    return bufferView;
}
exports.stringToArrayBuffer = stringToArrayBuffer;
/**
 * Is string null or empty or undefined?
 * @return True if the value is null or undefined or empty string,
 * otherwise false.
 */
function isNullOrEmpty(value) {
    return (value == null) || (value.length === 0);
}
exports.isNullOrEmpty = isNullOrEmpty;
/**
 * Returns true if the string is null, undefined, empty, or only includes white spaces.
 * @return True if the str is null, undefined, empty, or only includes white spaces,
 * otherwise false.
 */
function isNullOrUndefinedOrWhiteSpaceString(str) {
    return isNullOrEmpty(str) || isNullOrEmpty(str.trim());
}
exports.isNullOrUndefinedOrWhiteSpaceString = isNullOrUndefinedOrWhiteSpaceString;
/**
 * Returns a value indicating whether the str contains any whitespace.
 */
function containsWhitespace(str) {
    var expr = /\s/;
    return expr.test(str);
}
exports.containsWhitespace = containsWhitespace;
/**
 * Returns a value indicating whether the str is a whitespace string.
 */
function isWhitespace(str) {
    return str.trim() === "";
}
exports.isWhitespace = isWhitespace;
/**
 * Returns the string with any trailing whitespace from str removed.
 */
function trimTrailingWhitespace(str) {
    return str.replace(/\s+$/, "");
}
exports.trimTrailingWhitespace = trimTrailingWhitespace;
/**
 * Returns the string with any leading and trailing whitespace from str removed.
 */
function trimWhitespace(str) {
    return str.replace(/^\s+/, "").replace(/\s+$/, "");
}
exports.trimWhitespace = trimWhitespace;
/**
 * Returns length difference between the two provided strings.
 */
function getLengthDifference(left, right) {
    return Math.abs(left.length - right.length);
}
exports.getLengthDifference = getLengthDifference;
/**
 * Repeat char or string several times.
 * @param char The string to repeat.
 * @param count How many times to repeat the string.
 */
function repeat(char, count) {
    var result = "";
    for (var i = 0; i < count; i++) {
        result += char;
    }
    return result;
}
exports.repeat = repeat;
/**
 * Replace all the occurrences of the textToFind in the text with the textToReplace.
 * @param text The original string.
 * @param textToFind Text to find in the original string.
 * @param textToReplace New text replacing the textToFind.
 */
function replaceAll(text, textToFind, textToReplace) {
    if (!textToFind)
        return text;
    var pattern = escapeStringForRegex(textToFind);
    return text.replace(new RegExp(pattern, "gi"), textToReplace);
}
exports.replaceAll = replaceAll;
function ensureUniqueNames(names) {
    var usedNames = {};
    // Make sure we are giving fair chance for all columns to stay with their original name
    // First we fill the used names map to contain all the original unique names from the list.
    for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
        var name_1 = names_1[_i];
        usedNames[name_1] = false;
    }
    var uniqueNames = [];
    // Now we go over all names and find a unique name for each
    for (var _a = 0, names_2 = names; _a < names_2.length; _a++) {
        var name_2 = names_2[_a];
        var uniqueName = name_2;
        // If the (original) column name is already taken lets try to find another name
        if (usedNames[uniqueName]) {
            var counter = 0;
            // Find a name that is not already in the map
            while (usedNames[uniqueName] !== undefined) {
                uniqueName = name_2 + "." + (++counter);
            }
        }
        uniqueNames.push(uniqueName);
        usedNames[uniqueName] = true;
    }
    return uniqueNames;
}
exports.ensureUniqueNames = ensureUniqueNames;
/**
 * Returns a name that is not specified in the values.
 */
function findUniqueName(usedNames, baseName) {
    // Find a unique name
    var i = 0, uniqueName = baseName;
    while (usedNames[uniqueName]) {
        uniqueName = baseName + (++i);
    }
    return uniqueName;
}
exports.findUniqueName = findUniqueName;
function constructNameFromList(list, separator, maxCharacter) {
    var labels = [];
    var exceeded;
    var length = 0;
    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
        var item = list_1[_i];
        if (length + item.length > maxCharacter && labels.length > 0) {
            exceeded = true;
            break;
        }
        labels.push(item);
        length += item.length;
    }
    var separatorWithSpace = " " + separator + " ";
    var name = labels.join(separatorWithSpace);
    if (exceeded)
        name += separatorWithSpace + "...";
    return name;
}
exports.constructNameFromList = constructNameFromList;
function escapeStringForRegex(s) {
    return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1");
}
exports.escapeStringForRegex = escapeStringForRegex;
/**
 * Remove file name reserved characters <>:"/\|?* from input string.
 */
function normalizeFileName(fileName) {
    return fileName.replace(/[\<\>\:"\/\\\|\?*]/g, "");
}
exports.normalizeFileName = normalizeFileName;
/**
 * Similar to JSON.stringify, but strips away escape sequences so that the resulting
 * string is human-readable (and parsable by JSON formatting/validating tools).
 */
function stringifyAsPrettyJSON(object) {
    // let specialCharacterRemover = (key: string, value: string) => value.replace(/[^\w\s]/gi, "");
    return JSON.stringify(object /*, specialCharacterRemover*/);
}
exports.stringifyAsPrettyJSON = stringifyAsPrettyJSON;
/**
 * Derive a CLS-compliant name from a specified string.  If no allowed characters are present, return a fallback string instead.
 * (6708134): this should have a fully Unicode-aware implementation
 */
function deriveClsCompliantName(input, fallback) {
    var result = input.replace(/^[^A-Za-z]*/g, "").replace(/[ :\.\/\\\-\u00a0\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000]/g, "_").replace(/[\W]/g, "");
    return result.length > 0 ? result : fallback;
}
exports.deriveClsCompliantName = deriveClsCompliantName;
// Performs cheap sanitization by stripping away HTML tag (<>) characters.
function stripTagDelimiters(s) {
    return s.replace(HtmlTagRegex, "");
}
exports.stripTagDelimiters = stripTagDelimiters;
//# sourceMappingURL=stringExtensions.js.map

/***/ }),

/***/ 9246:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var window = __webpack_require__(6738);

/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.wordBreakOverflowingText = exports.wordBreak = exports.svgEllipsis = exports.getTailoredTextOrDefault = exports.getDivElementWidth = exports.getSvgMeasurementProperties = exports.getMeasurementProperties = exports.measureSvgTextElementWidth = exports.estimateSvgTextHeight = exports.estimateSvgTextBaselineDelta = exports.measureSvgTextHeight = exports.measureSvgTextRect = exports.measureSvgTextWidth = exports.removeSpanElement = void 0;
// powerbi.extensibility.utils.type
var powerbi_visuals_utils_typeutils_1 = __webpack_require__(2170);
// powerbi.extensibility.utils.formatting
var wordBreaker = __webpack_require__(1363);
var ephemeralStorageService_1 = __webpack_require__(6116);
var ellipsis = "...";
var spanElement;
var svgTextElement;
var canvasCtx;
var fallbackFontFamily;
/**
 * Idempotent function for adding the elements to the DOM.
 */
function ensureDOM() {
    if (spanElement) {
        return;
    }
    spanElement = document.createElement("span");
    document.body.appendChild(spanElement);
    // The style hides the svg element from the canvas, preventing canvas from scrolling down to show svg black square.
    /* eslint-disable-next-line powerbi-visuals/no-http-string */
    var svgElement = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svgElement.setAttribute("height", "0");
    svgElement.setAttribute("width", "0");
    svgElement.setAttribute("position", "absolute");
    svgElement.style.top = "0px";
    svgElement.style.left = "0px";
    svgElement.style.position = "absolute";
    svgElement.style.height = "0px";
    svgElement.style.width = "0px";
    /* eslint-disable-next-line powerbi-visuals/no-http-string */
    svgTextElement = document.createElementNS("http://www.w3.org/2000/svg", "text");
    svgElement.appendChild(svgTextElement);
    document.body.appendChild(svgElement);
    var canvasElement = document.createElement("canvas");
    canvasCtx = canvasElement.getContext("2d");
    var style = window.getComputedStyle(svgTextElement);
    if (style) {
        fallbackFontFamily = style.fontFamily;
    }
    else {
        fallbackFontFamily = "";
    }
}
/**
 * Removes spanElement from DOM.
 */
function removeSpanElement() {
    if (spanElement && spanElement.remove) {
        spanElement.remove();
    }
    spanElement = null;
}
exports.removeSpanElement = removeSpanElement;
/**
 * Measures the width of the text with the given SVG text properties.
 * @param textProperties The text properties to use for text measurement.
 * @param text The text to measure.
 */
function measureSvgTextWidth(textProperties, text) {
    ensureDOM();
    canvasCtx.font =
        (textProperties.fontStyle || "") + " " +
            (textProperties.fontVariant || "") + " " +
            (textProperties.fontWeight || "") + " " +
            textProperties.fontSize + " " +
            (textProperties.fontFamily || fallbackFontFamily);
    return canvasCtx.measureText(text || textProperties.text).width;
}
exports.measureSvgTextWidth = measureSvgTextWidth;
/**
 * Return the rect with the given SVG text properties.
 * @param textProperties The text properties to use for text measurement.
 * @param text The text to measure.
 */
function measureSvgTextRect(textProperties, text) {
    ensureDOM();
    // Removes DOM elements faster than innerHTML
    while (svgTextElement.firstChild) {
        svgTextElement.removeChild(svgTextElement.firstChild);
    }
    svgTextElement.setAttribute("style", null);
    svgTextElement.style.visibility = "hidden";
    svgTextElement.style.fontFamily = textProperties.fontFamily || fallbackFontFamily;
    svgTextElement.style.fontVariant = textProperties.fontVariant;
    svgTextElement.style.fontSize = textProperties.fontSize;
    svgTextElement.style.fontWeight = textProperties.fontWeight;
    svgTextElement.style.fontStyle = textProperties.fontStyle;
    svgTextElement.style.whiteSpace = textProperties.whiteSpace || "nowrap";
    svgTextElement.appendChild(document.createTextNode(text || textProperties.text));
    // We're expecting the browser to give a synchronous measurement here
    // We're using SVGTextElement because it works across all browsers
    return svgTextElement.getBBox();
}
exports.measureSvgTextRect = measureSvgTextRect;
/**
 * Measures the height of the text with the given SVG text properties.
 * @param textProperties The text properties to use for text measurement.
 * @param text The text to measure.
 */
function measureSvgTextHeight(textProperties, text) {
    return measureSvgTextRect(textProperties, text).height;
}
exports.measureSvgTextHeight = measureSvgTextHeight;
/**
 * Returns the text Rect with the given SVG text properties.
 * Does NOT return text width; obliterates text value
 * @param {TextProperties} textProperties - The text properties to use for text measurement
 */
function estimateSvgTextRect(textProperties) {
    var propertiesKey = textProperties.fontFamily + textProperties.fontSize;
    var rect = ephemeralStorageService_1.ephemeralStorageService.getData(propertiesKey);
    if (rect == null) {
        // To estimate we check the height of a particular character, once it is cached, subsequent
        // calls should always get the height from the cache (regardless of the text).
        var estimatedTextProperties = {
            fontFamily: textProperties.fontFamily,
            fontSize: textProperties.fontSize,
            text: "M",
        };
        rect = exports.measureSvgTextRect(estimatedTextProperties);
        // NOTE: In some cases (disconnected/hidden DOM) we may provide incorrect measurement results (zero sized bounding-box), so
        // we only store values in the cache if we are confident they are correct.
        if (rect.height > 0)
            ephemeralStorageService_1.ephemeralStorageService.setData(propertiesKey, rect);
    }
    return rect;
}
/**
 * Returns the text Rect with the given SVG text properties.
 * @param {TextProperties} textProperties - The text properties to use for text measurement
 */
function estimateSvgTextBaselineDelta(textProperties) {
    var rect = estimateSvgTextRect(textProperties);
    return rect.y + rect.height;
}
exports.estimateSvgTextBaselineDelta = estimateSvgTextBaselineDelta;
/**
 * Estimates the height of the text with the given SVG text properties.
 * @param {TextProperties} textProperties - The text properties to use for text measurement
 */
function estimateSvgTextHeight(textProperties, tightFightForNumeric) {
    if (tightFightForNumeric === void 0) { tightFightForNumeric = false; }
    var height = estimateSvgTextRect(textProperties).height;
    // replace it with new baseline calculation
    if (tightFightForNumeric)
        height *= 0.7;
    return height;
}
exports.estimateSvgTextHeight = estimateSvgTextHeight;
/**
 * Measures the width of the svgElement.
 * @param svgElement The SVGTextElement to be measured.
 */
function measureSvgTextElementWidth(svgElement) {
    return measureSvgTextWidth(getSvgMeasurementProperties(svgElement));
}
exports.measureSvgTextElementWidth = measureSvgTextElementWidth;
/**
 * Fetches the text measurement properties of the given DOM element.
 * @param element The selector for the DOM Element.
 */
function getMeasurementProperties(element) {
    var style = window.getComputedStyle(element);
    return {
        text: element.value || element.textContent,
        fontFamily: style.fontFamily,
        fontSize: style.fontSize,
        fontWeight: style.fontWeight,
        fontStyle: style.fontStyle,
        fontVariant: style.fontVariant,
        whiteSpace: style.whiteSpace
    };
}
exports.getMeasurementProperties = getMeasurementProperties;
/**
 * Fetches the text measurement properties of the given SVG text element.
 * @param element The SVGTextElement to be measured.
 */
function getSvgMeasurementProperties(element) {
    var style = window.getComputedStyle(element);
    if (style) {
        return {
            text: element.textContent,
            fontFamily: style.fontFamily,
            fontSize: style.fontSize,
            fontWeight: style.fontWeight,
            fontStyle: style.fontStyle,
            fontVariant: style.fontVariant,
            whiteSpace: style.whiteSpace
        };
    }
    else {
        return {
            text: element.textContent,
            fontFamily: "",
            fontSize: "0",
        };
    }
}
exports.getSvgMeasurementProperties = getSvgMeasurementProperties;
/**
 * Returns the width of a div element.
 * @param element The div element.
 */
function getDivElementWidth(element) {
    var style = window.getComputedStyle(element);
    if (style)
        return style.width;
    else
        return "0";
}
exports.getDivElementWidth = getDivElementWidth;
/**
 * Compares labels text size to the available size and renders ellipses when the available size is smaller.
 * @param textProperties The text properties (including text content) to use for text measurement.
 * @param maxWidth The maximum width available for rendering the text.
 */
function getTailoredTextOrDefault(textProperties, maxWidth) {
    ensureDOM();
    var strLength = textProperties.text.length;
    if (strLength === 0) {
        return textProperties.text;
    }
    var width = measureSvgTextWidth(textProperties);
    if (width < maxWidth) {
        return textProperties.text;
    }
    // Create a copy of the textProperties so we don't modify the one that's passed in.
    var copiedTextProperties = powerbi_visuals_utils_typeutils_1.prototype.inherit(textProperties);
    // Take the properties and apply them to svgTextElement
    // Then, do the binary search to figure out the substring we want
    // Set the substring on textElement argument
    var text = copiedTextProperties.text = ellipsis + copiedTextProperties.text;
    var min = 1;
    var max = text.length;
    var i = ellipsis.length;
    while (min <= max) {
        // num | 0 prefered to Math.floor(num) for performance benefits
        i = (min + max) / 2 | 0;
        copiedTextProperties.text = text.substring(0, i);
        width = measureSvgTextWidth(copiedTextProperties);
        if (maxWidth > width) {
            min = i + 1;
        }
        else if (maxWidth < width) {
            max = i - 1;
        }
        else {
            break;
        }
    }
    // Since the search algorithm almost never finds an exact match,
    // it will pick one of the closest two, which could result in a
    // value bigger with than 'maxWidth' thus we need to go back by
    // one to guarantee a smaller width than 'maxWidth'.
    copiedTextProperties.text = text.substring(0, i);
    width = measureSvgTextWidth(copiedTextProperties);
    if (width > maxWidth) {
        i--;
    }
    return text.substring(ellipsis.length, i) + ellipsis;
}
exports.getTailoredTextOrDefault = getTailoredTextOrDefault;
/**
 * Compares labels text size to the available size and renders ellipses when the available size is smaller.
 * @param textElement The SVGTextElement containing the text to render.
 * @param maxWidth The maximum width available for rendering the text.
 */
function svgEllipsis(textElement, maxWidth) {
    var properties = getSvgMeasurementProperties(textElement);
    var originalText = properties.text;
    var tailoredText = getTailoredTextOrDefault(properties, maxWidth);
    if (originalText !== tailoredText) {
        textElement.textContent = tailoredText;
    }
}
exports.svgEllipsis = svgEllipsis;
/**
 * Word break textContent of <text> SVG element into <tspan>s
 * Each tspan will be the height of a single line of text
 * @param textElement - the SVGTextElement containing the text to wrap
 * @param maxWidth - the maximum width available
 * @param maxHeight - the maximum height available (defaults to single line)
 * @param linePadding - (optional) padding to add to line height
 */
function wordBreak(textElement, maxWidth, maxHeight, linePadding) {
    if (linePadding === void 0) { linePadding = 0; }
    var properties = getSvgMeasurementProperties(textElement);
    var height = estimateSvgTextHeight(properties) + linePadding;
    var maxNumLines = Math.max(1, Math.floor(maxHeight / height));
    // Save y of parent textElement to apply as first tspan dy
    var firstDY = textElement ? textElement.getAttribute("y") : null;
    // Store and clear text content
    var labelText = textElement ? textElement.textContent : null;
    textElement.textContent = null;
    // Append a tspan for each word broken section
    var words = wordBreaker.splitByWidth(labelText, properties, measureSvgTextWidth, maxWidth, maxNumLines);
    var fragment = document.createDocumentFragment();
    for (var i = 0, ilen = words.length; i < ilen; i++) {
        var dy = i === 0 ? firstDY : height;
        properties.text = words[i];
        /* eslint-disable-next-line powerbi-visuals/no-http-string */
        var textElement_1 = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
        textElement_1.setAttribute("x", "0");
        textElement_1.setAttribute("dy", dy ? dy.toString() : null);
        textElement_1.appendChild(document.createTextNode(getTailoredTextOrDefault(properties, maxWidth)));
        fragment.appendChild(textElement_1);
    }
    textElement.appendChild(fragment);
}
exports.wordBreak = wordBreak;
/**
 * Word break textContent of span element into <span>s
 * Each span will be the height of a single line of text
 * @param textElement - the element containing the text to wrap
 * @param maxWidth - the maximum width available
 * @param maxHeight - the maximum height available (defaults to single line)
 * @param linePadding - (optional) padding to add to line height
 */
function wordBreakOverflowingText(textElement, maxWidth, maxHeight, linePadding) {
    if (linePadding === void 0) { linePadding = 0; }
    var properties = getSvgMeasurementProperties(textElement);
    var height = estimateSvgTextHeight(properties) + linePadding;
    var maxNumLines = Math.max(1, Math.floor(maxHeight / height));
    // Store and clear text content
    var labelText = textElement.textContent;
    textElement.textContent = null;
    // Append a span for each word broken section
    var words = wordBreaker.splitByWidth(labelText, properties, measureSvgTextWidth, maxWidth, maxNumLines);
    var fragment = document.createDocumentFragment();
    for (var i = 0; i < words.length; i++) {
        var span = document.createElement("span");
        span.style.overflow = "hidden";
        span.style.whiteSpace = "nowrap";
        span.style.textOverflow = "ellipsis";
        span.style.display = "block";
        span.style.width = powerbi_visuals_utils_typeutils_1.pixelConverter.toString(maxWidth);
        span.appendChild(document.createTextNode(words[i]));
        span.appendChild(document.createTextNode(getTailoredTextOrDefault(properties, maxWidth)));
        fragment.appendChild(span);
    }
    textElement.appendChild(fragment);
}
exports.wordBreakOverflowingText = wordBreakOverflowingText;
//# sourceMappingURL=textMeasurementService.js.map

/***/ }),

/***/ 4158:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.replaceSpaceWithNBSP = exports.removeEllipses = exports.removeBreakingSpaces = void 0;
/**
 * Contains functions/constants to aid in text manupilation.
 */
/**
 * Remove breaking spaces from given string and replace by none breaking space (&nbsp).
 */
function removeBreakingSpaces(str) {
    return str.toString().replace(new RegExp(" ", "g"), "&nbsp");
}
exports.removeBreakingSpaces = removeBreakingSpaces;
/**
 * Remove ellipses from a given string
 */
function removeEllipses(str) {
    return str.replace(/(…)|(\.\.\.)/g, "");
}
exports.removeEllipses = removeEllipses;
/**
* Replace every whitespace (0x20) with Non-Breaking Space (0xA0)
    * @param {string} txt String to replace White spaces
    * @returns Text after replcing white spaces
    */
function replaceSpaceWithNBSP(txt) {
    if (txt != null) {
        return txt.replace(/ /g, "\xA0");
    }
}
exports.replaceSpaceWithNBSP = replaceSpaceWithNBSP;
//# sourceMappingURL=textUtil.js.map

/***/ }),

/***/ 9987:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.calculateExactDigitsPrecision = exports.getDisplayUnits = exports.formatListOr = exports.formatListAnd = exports.getFormatStringByColumn = exports.getFormatString = exports.createDisplayUnitSystem = exports.formatVariantMeasureValue = exports.format = exports.create = exports.checkValueInBounds = exports.createDefaultFormatter = exports.setLocaleOptions = exports.getFormatMetadata = exports.getLocalizedString = exports.DefaultDateFormat = exports.DefaultNumericFormat = exports.DefaultIntegerFormat = void 0;
var displayUnitSystem_1 = __webpack_require__(7254);
var displayUnitSystemType_1 = __webpack_require__(6585);
var stringExtensions = __webpack_require__(7918);
var formattingService_1 = __webpack_require__(5394);
var dateTimeSequence_1 = __webpack_require__(2594);
var powerbi_visuals_utils_typeutils_1 = __webpack_require__(2170);
var powerbi_visuals_utils_dataviewutils_1 = __webpack_require__(7758);
// powerbi.extensibility.utils.type
var ValueType = powerbi_visuals_utils_typeutils_1.valueType.ValueType;
var PrimitiveType = powerbi_visuals_utils_typeutils_1.valueType.PrimitiveType;
var StringExtensions = stringExtensions;
var BeautifiedFormat = {
    "0.00 %;-0.00 %;0.00 %": "Percentage",
    "0.0 %;-0.0 %;0.0 %": "Percentage1",
};
exports.DefaultIntegerFormat = "g";
exports.DefaultNumericFormat = "#,0.00";
exports.DefaultDateFormat = "d";
var defaultLocalizedStrings = {
    "NullValue": "(Blank)",
    "BooleanTrue": "True",
    "BooleanFalse": "False",
    "NaNValue": "NaN",
    "InfinityValue": "+Infinity",
    "NegativeInfinityValue": "-Infinity",
    "RestatementComma": "{0}, {1}",
    "RestatementCompoundAnd": "{0} and {1}",
    "RestatementCompoundOr": "{0} or {1}",
    "DisplayUnitSystem_EAuto_Title": "Auto",
    "DisplayUnitSystem_E0_Title": "None",
    "DisplayUnitSystem_E3_LabelFormat": "{0}K",
    "DisplayUnitSystem_E3_Title": "Thousands",
    "DisplayUnitSystem_E6_LabelFormat": "{0}M",
    "DisplayUnitSystem_E6_Title": "Millions",
    "DisplayUnitSystem_E9_LabelFormat": "{0}bn",
    "DisplayUnitSystem_E9_Title": "Billions",
    "DisplayUnitSystem_E12_LabelFormat": "{0}T",
    "DisplayUnitSystem_E12_Title": "Trillions",
    "Percentage": "#,0.##%",
    "Percentage1": "#,0.#%",
    "TableTotalLabel": "Total",
    "Tooltip_HighlightedValueDisplayName": "Highlighted",
    "Funnel_PercentOfFirst": "Percent of first",
    "Funnel_PercentOfPrevious": "Percent of previous",
    "Funnel_PercentOfFirst_Highlight": "Percent of first (highlighted)",
    "Funnel_PercentOfPrevious_Highlight": "Percent of previous (highlighted)",
    // Geotagging strings
    "GeotaggingString_Continent": "continent",
    "GeotaggingString_Continents": "continents",
    "GeotaggingString_Country": "country",
    "GeotaggingString_Countries": "countries",
    "GeotaggingString_State": "state",
    "GeotaggingString_States": "states",
    "GeotaggingString_City": "city",
    "GeotaggingString_Cities": "cities",
    "GeotaggingString_Town": "town",
    "GeotaggingString_Towns": "towns",
    "GeotaggingString_Province": "province",
    "GeotaggingString_Provinces": "provinces",
    "GeotaggingString_County": "county",
    "GeotaggingString_Counties": "counties",
    "GeotaggingString_Village": "village",
    "GeotaggingString_Villages": "villages",
    "GeotaggingString_Post": "post",
    "GeotaggingString_Zip": "zip",
    "GeotaggingString_Code": "code",
    "GeotaggingString_Place": "place",
    "GeotaggingString_Places": "places",
    "GeotaggingString_Address": "address",
    "GeotaggingString_Addresses": "addresses",
    "GeotaggingString_Street": "street",
    "GeotaggingString_Streets": "streets",
    "GeotaggingString_Longitude": "longitude",
    "GeotaggingString_Longitude_Short": "lon",
    "GeotaggingString_Longitude_Short2": "long",
    "GeotaggingString_Latitude": "latitude",
    "GeotaggingString_Latitude_Short": "lat",
    "GeotaggingString_PostalCode": "postal code",
    "GeotaggingString_PostalCodes": "postal codes",
    "GeotaggingString_ZipCode": "zip code",
    "GeotaggingString_ZipCodes": "zip codes",
    "GeotaggingString_Territory": "territory",
    "GeotaggingString_Territories": "territories",
};
function beautify(format) {
    var key = BeautifiedFormat[format];
    if (key)
        return defaultLocalizedStrings[key] || format;
    return format;
}
function describeUnit(exponent) {
    var exponentLookup = (exponent === -1) ? "Auto" : exponent.toString();
    var title = defaultLocalizedStrings["DisplayUnitSystem_E" + exponentLookup + "_Title"];
    var format = (exponent <= 0) ? "{0}" : defaultLocalizedStrings["DisplayUnitSystem_E" + exponentLookup + "_LabelFormat"];
    if (title || format)
        return { title: title, format: format };
}
function getLocalizedString(stringId) {
    return defaultLocalizedStrings[stringId];
}
exports.getLocalizedString = getLocalizedString;
// NOTE: Define default locale options, but these can be overriden by setLocaleOptions.
var localizationOptions = {
    nullValue: defaultLocalizedStrings["NullValue"],
    trueValue: defaultLocalizedStrings["BooleanTrue"],
    falseValue: defaultLocalizedStrings["BooleanFalse"],
    NaN: defaultLocalizedStrings["NaNValue"],
    infinity: defaultLocalizedStrings["InfinityValue"],
    negativeInfinity: defaultLocalizedStrings["NegativeInfinityValue"],
    beautify: function (format) { return beautify(format); },
    describe: function (exponent) { return describeUnit(exponent); },
    restatementComma: defaultLocalizedStrings["RestatementComma"],
    restatementCompoundAnd: defaultLocalizedStrings["RestatementCompoundAnd"],
    restatementCompoundOr: defaultLocalizedStrings["RestatementCompoundOr"],
};
var MaxScaledDecimalPlaces = 2;
var MaxValueForDisplayUnitRounding = 1000;
var MinIntegerValueForDisplayUnits = 10000;
var MinPrecisionForDisplayUnits = 2;
var DateTimeMetadataColumn = {
    displayName: "",
    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.DateTime),
};
function getFormatMetadata(format) {
    return formattingService_1.numberFormat.getCustomFormatMetadata(format);
}
exports.getFormatMetadata = getFormatMetadata;
function setLocaleOptions(options) {
    localizationOptions = options;
    displayUnitSystem_1.DefaultDisplayUnitSystem.RESET();
    displayUnitSystem_1.WholeUnitsDisplayUnitSystem.RESET();
}
exports.setLocaleOptions = setLocaleOptions;
function createDefaultFormatter(formatString, allowFormatBeautification, cultureSelector) {
    var formatBeautified = allowFormatBeautification
        ? localizationOptions.beautify(formatString)
        : formatString;
    return {
        format: function (value) {
            if (value == null) {
                return localizationOptions.nullValue;
            }
            return formatCore({
                value: value,
                cultureSelector: cultureSelector,
                format: formatBeautified
            });
        }
    };
}
exports.createDefaultFormatter = createDefaultFormatter;
/**
 * Check that provided value is in provided bounds. If not -- replace it by minimal or maximal replacement value
 * @param targetNum checking value
 * @param min minimal bound of value
 * @param max maximal bound of value
 * @param lessMinReplacement value that will be returned if checking value is lesser than minimal
 * @param greaterMaxReplacement value that will be returned if checking value is greater than maximal
 */
function checkValueInBounds(targetNum, min, max, lessMinReplacement, greaterMaxReplacement) {
    if (lessMinReplacement === void 0) { lessMinReplacement = min; }
    if (greaterMaxReplacement === void 0) { greaterMaxReplacement = max; }
    if (max !== undefined && max !== null) {
        targetNum = targetNum <= max ? targetNum : greaterMaxReplacement;
    }
    if (min !== undefined && min !== null) {
        targetNum = targetNum > min ? targetNum : lessMinReplacement;
    }
    return targetNum;
}
exports.checkValueInBounds = checkValueInBounds;
// Creates an IValueFormatter to be used for a range of values.
function create(options) {
    var format = options.allowFormatBeautification
        ? localizationOptions.beautify(options.format)
        : options.format;
    var cultureSelector = options.cultureSelector;
    if (shouldUseNumericDisplayUnits(options)) {
        var displayUnitSystem_2 = createDisplayUnitSystem(options.displayUnitSystemType);
        var singleValueFormattingMode_1 = !!options.formatSingleValues;
        displayUnitSystem_2.update(Math.max(Math.abs(options.value || 0), Math.abs(options.value2 || 0)));
        var forcePrecision_1 = options.precision != null;
        var decimals_1;
        if (forcePrecision_1)
            decimals_1 = -options.precision;
        else if (displayUnitSystem_2.displayUnit && displayUnitSystem_2.displayUnit.value > 1)
            decimals_1 = -MaxScaledDecimalPlaces;
        return {
            format: function (value) {
                var formattedValue = getStringFormat(value, true /*nullsAreBlank*/);
                if (!StringExtensions.isNullOrUndefinedOrWhiteSpaceString(formattedValue)) {
                    return formattedValue;
                }
                // Round to Double.DEFAULT_PRECISION
                if (value
                    && !displayUnitSystem_2.isScalingUnit()
                    && Math.abs(value) < MaxValueForDisplayUnitRounding
                    && !forcePrecision_1) {
                    value = powerbi_visuals_utils_typeutils_1.double.roundToPrecision(value);
                }
                if (singleValueFormattingMode_1) {
                    return displayUnitSystem_2.formatSingleValue(value, format, decimals_1, forcePrecision_1, cultureSelector);
                }
                else {
                    return displayUnitSystem_2.format(value, format, decimals_1, forcePrecision_1, cultureSelector);
                }
            },
            displayUnit: displayUnitSystem_2.displayUnit,
            options: options
        };
    }
    if (shouldUseDateUnits(options.value, options.value2, options.tickCount)) {
        var unit_1 = dateTimeSequence_1.DateTimeSequence.GET_INTERVAL_UNIT(options.value /* minDate */, options.value2 /* maxDate */, options.tickCount);
        return {
            format: function (value) {
                if (value == null) {
                    return localizationOptions.nullValue;
                }
                var formatString = formattingService_1.formattingService.dateFormatString(unit_1);
                return formatCore({
                    value: value,
                    cultureSelector: cultureSelector,
                    format: formatString,
                });
            },
            options: options
        };
    }
    return createDefaultFormatter(format, false, cultureSelector);
}
exports.create = create;
function format(value, format, allowFormatBeautification, cultureSelector) {
    if (value == null) {
        return localizationOptions.nullValue;
    }
    var formatString = allowFormatBeautification
        ? localizationOptions.beautify(format)
        : format;
    return formatCore({
        value: value,
        cultureSelector: cultureSelector,
        format: formatString
    });
}
exports.format = format;
/**
 * Value formatting function to handle variant measures.
 * For a Date/Time value within a non-date/time field, it's formatted with the default date/time formatString instead of as a number
 * @param {any} value Value to be formatted
 * @param {DataViewMetadataColumn} column Field which the value belongs to
 * @param {DataViewObjectPropertyIdentifier} formatStringProp formatString Property ID
 * @param {boolean} nullsAreBlank? Whether to show "(Blank)" instead of empty string for null values
 * @returns Formatted value
 */
function formatVariantMeasureValue(value, column, formatStringProp, nullsAreBlank, cultureSelector) {
    // If column type is not datetime, but the value is of time datetime,
    // then use the default date format string
    if (!(column && column.type && column.type.dateTime) && value instanceof Date) {
        var valueFormat = getFormatString(DateTimeMetadataColumn, null, false);
        return formatCore({
            value: value,
            nullsAreBlank: nullsAreBlank,
            cultureSelector: cultureSelector,
            format: valueFormat
        });
    }
    else {
        var valueFormat = getFormatString(column, formatStringProp);
        return formatCore({
            value: value,
            nullsAreBlank: nullsAreBlank,
            cultureSelector: cultureSelector,
            format: valueFormat
        });
    }
}
exports.formatVariantMeasureValue = formatVariantMeasureValue;
function createDisplayUnitSystem(displayUnitSystemType) {
    if (displayUnitSystemType == null)
        return new displayUnitSystem_1.DefaultDisplayUnitSystem(localizationOptions.describe);
    switch (displayUnitSystemType) {
        case displayUnitSystemType_1.DisplayUnitSystemType.Default:
            return new displayUnitSystem_1.DefaultDisplayUnitSystem(localizationOptions.describe);
        case displayUnitSystemType_1.DisplayUnitSystemType.WholeUnits:
            return new displayUnitSystem_1.WholeUnitsDisplayUnitSystem(localizationOptions.describe);
        case displayUnitSystemType_1.DisplayUnitSystemType.Verbose:
            return new displayUnitSystem_1.NoDisplayUnitSystem();
        case displayUnitSystemType_1.DisplayUnitSystemType.DataLabels:
            return new displayUnitSystem_1.DataLabelsDisplayUnitSystem(localizationOptions.describe);
        default:
            return new displayUnitSystem_1.DefaultDisplayUnitSystem(localizationOptions.describe);
    }
}
exports.createDisplayUnitSystem = createDisplayUnitSystem;
function shouldUseNumericDisplayUnits(options) {
    var value = options.value;
    var value2 = options.value2;
    var format = options.format;
    // For singleValue visuals like card, gauge we don't want to roundoff data to the nearest thousands so format the whole number / integers below 10K to not use display units
    if (options.formatSingleValues && format) {
        if (Math.abs(value) < MinIntegerValueForDisplayUnits) {
            var isCustomFormat = !formattingService_1.numberFormat.isStandardFormat(format);
            if (isCustomFormat) {
                var precision = formattingService_1.numberFormat.getCustomFormatMetadata(format, true /*calculatePrecision*/).precision;
                if (precision < MinPrecisionForDisplayUnits)
                    return false;
            }
            else if (powerbi_visuals_utils_typeutils_1.double.isInteger(value))
                return false;
        }
    }
    if ((typeof value === "number") || (typeof value2 === "number")) {
        return true;
    }
}
function shouldUseDateUnits(value, value2, tickCount) {
    // must check both value and value2 because we'll need to get an interval for date units
    return (value instanceof Date) && (value2 instanceof Date) && (tickCount !== undefined && tickCount !== null);
}
/*
    * Get the column format. Order of precendence is:
    *  1. Column format
    *  2. Default PowerView policy for column type
    */
function getFormatString(column, formatStringProperty, suppressTypeFallback) {
    if (column) {
        if (formatStringProperty) {
            var propertyValue = powerbi_visuals_utils_dataviewutils_1.dataViewObjects.getValue(column.objects, formatStringProperty);
            if (propertyValue)
                return propertyValue;
        }
        if (!suppressTypeFallback) {
            var columnType = column.type;
            if (columnType) {
                if (columnType.dateTime)
                    return exports.DefaultDateFormat;
                if (columnType.integer) {
                    if (columnType.temporal && columnType.temporal.year)
                        return "0";
                    return exports.DefaultIntegerFormat;
                }
                if (columnType.numeric)
                    return exports.DefaultNumericFormat;
            }
        }
    }
}
exports.getFormatString = getFormatString;
function getFormatStringByColumn(column, suppressTypeFallback) {
    if (column) {
        if (column.format) {
            return column.format;
        }
        if (!suppressTypeFallback) {
            var columnType = column.type;
            if (columnType) {
                if (columnType.dateTime) {
                    return exports.DefaultDateFormat;
                }
                if (columnType.integer) {
                    if (columnType.temporal && columnType.temporal.year) {
                        return "0";
                    }
                    return exports.DefaultIntegerFormat;
                }
                if (columnType.numeric) {
                    return exports.DefaultNumericFormat;
                }
            }
        }
    }
    return undefined;
}
exports.getFormatStringByColumn = getFormatStringByColumn;
function formatListCompound(strings, conjunction) {
    var result;
    if (!strings) {
        return null;
    }
    var length = strings.length;
    if (length > 0) {
        result = strings[0];
        var lastIndex = length - 1;
        for (var i = 1, len = lastIndex; i < len; i++) {
            var value = strings[i];
            result = StringExtensions.format(localizationOptions.restatementComma, result, value);
        }
        if (length > 1) {
            var value = strings[lastIndex];
            result = StringExtensions.format(conjunction, result, value);
        }
    }
    else {
        result = null;
    }
    return result;
}
// The returned string will look like 'A, B, ..., and C'
function formatListAnd(strings) {
    return formatListCompound(strings, localizationOptions.restatementCompoundAnd);
}
exports.formatListAnd = formatListAnd;
// The returned string will look like 'A, B, ..., or C'
function formatListOr(strings) {
    return formatListCompound(strings, localizationOptions.restatementCompoundOr);
}
exports.formatListOr = formatListOr;
function formatCore(options) {
    var value = options.value, format = options.format, nullsAreBlank = options.nullsAreBlank, cultureSelector = options.cultureSelector;
    var formattedValue = getStringFormat(value, nullsAreBlank ? nullsAreBlank : false);
    if (!StringExtensions.isNullOrUndefinedOrWhiteSpaceString(formattedValue)) {
        return formattedValue;
    }
    return formattingService_1.formattingService.formatValue(value, format, cultureSelector);
}
function getStringFormat(value, nullsAreBlank) {
    if (value == null && nullsAreBlank) {
        return localizationOptions.nullValue;
    }
    if (value === true) {
        return localizationOptions.trueValue;
    }
    if (value === false) {
        return localizationOptions.falseValue;
    }
    if (typeof value === "number" && isNaN(value)) {
        return localizationOptions.NaN;
    }
    if (value === Number.NEGATIVE_INFINITY) {
        return localizationOptions.negativeInfinity;
    }
    if (value === Number.POSITIVE_INFINITY) {
        return localizationOptions.infinity;
    }
    return "";
}
function getDisplayUnits(displayUnitSystemType) {
    var displayUnitSystem = createDisplayUnitSystem(displayUnitSystemType);
    return displayUnitSystem.units;
}
exports.getDisplayUnits = getDisplayUnits;
/**
 * Precision calculating function to build values showing minimum 3 digits as 3.56 or 25.7 or 754 or 2345
 * @param {number} inputValue Value to be basement for precision calculation
 * @param {string} format Format that will be used for value formatting (to detect percentage values)
 * @param {number} displayUnits Dispaly units that will be used for value formatting (to correctly calculate precision)
 * @param {number} digitsNum Number of visible digits, including digits before separator
 * @returns calculated precision
 */
function calculateExactDigitsPrecision(inputValue, format, displayUnits, digitsNum) {
    if (!inputValue && inputValue !== 0) {
        return 0;
    }
    var precision = 0;
    var inPercent = format && format.indexOf("%") !== -1;
    var value = inPercent ? inputValue * 100 : inputValue;
    value = displayUnits > 0 ? value / displayUnits : value;
    var leftPartLength = parseInt(value).toString().length;
    if ((inPercent || displayUnits > 0) && leftPartLength >= digitsNum) {
        return 0;
    }
    // Auto units, calculate final value 
    if (displayUnits === 0) {
        var unitsDegree = Math.floor(leftPartLength / 3);
        unitsDegree = leftPartLength % 3 === 0 ? unitsDegree - 1 : unitsDegree;
        var divider = Math.pow(1000, unitsDegree);
        if (divider > 0) {
            value = value / divider;
        }
    }
    leftPartLength = parseInt(value).toString().length;
    var restOfDiv = leftPartLength % digitsNum;
    if (restOfDiv === 0) {
        precision = 0;
    }
    else {
        precision = digitsNum - restOfDiv;
    }
    return precision;
}
exports.calculateExactDigitsPrecision = calculateExactDigitsPrecision;
//# sourceMappingURL=valueFormatter.js.map

/***/ }),

/***/ 1363:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.splitByWidth = exports.getMaxWordWidth = exports.wordCount = exports.hasBreakers = exports.find = void 0;
var SPACE = " ";
var BREAKERS_REGEX = /[\s\n]+/g;
function search(index, content, backward) {
    if (backward) {
        for (var i = index - 1; i > -1; i--) {
            if (hasBreakers(content[i]))
                return i + 1;
        }
    }
    else {
        for (var i = index, ilen = content.length; i < ilen; i++) {
            if (hasBreakers(content[i]))
                return i;
        }
    }
    return backward ? 0 : content.length;
}
/**
 * Find the word nearest the cursor specified within content
 * @param index - point within content to search forward/backward from
 * @param content - string to search
*/
function find(index, content) {
    var result = { start: 0, end: 0 };
    if (content.length === 0) {
        return result;
    }
    result.start = search(index, content, true);
    result.end = search(index, content, false);
    return result;
}
exports.find = find;
/**
 * Test for presence of breakers within content
 * @param content - string to test
*/
function hasBreakers(content) {
    BREAKERS_REGEX.lastIndex = 0;
    return BREAKERS_REGEX.test(content);
}
exports.hasBreakers = hasBreakers;
/**
 * Count the number of pieces when broken by BREAKERS_REGEX
 * ~2.7x faster than WordBreaker.split(content).length
 * @param content - string to break and count
*/
function wordCount(content) {
    var count = 1;
    BREAKERS_REGEX.lastIndex = 0;
    BREAKERS_REGEX.exec(content);
    while (BREAKERS_REGEX.lastIndex !== 0) {
        count++;
        BREAKERS_REGEX.exec(content);
    }
    return count;
}
exports.wordCount = wordCount;
function getMaxWordWidth(content, textWidthMeasurer, properties) {
    var words = split(content);
    var maxWidth = 0;
    for (var _i = 0, words_1 = words; _i < words_1.length; _i++) {
        var w = words_1[_i];
        properties.text = w;
        maxWidth = Math.max(maxWidth, textWidthMeasurer(properties));
    }
    return maxWidth;
}
exports.getMaxWordWidth = getMaxWordWidth;
function split(content) {
    return content.split(BREAKERS_REGEX);
}
function getWidth(content, properties, textWidthMeasurer) {
    properties.text = content;
    return textWidthMeasurer(properties);
}
function truncate(content, properties, truncator, maxWidth) {
    properties.text = content;
    return truncator(properties, maxWidth);
}
/**
 * Split content by breakers (words) and greedy fit as many words
 * into each index in the result based on max width and number of lines
 * e.g. Each index in result corresponds to a line of content
 *      when used by AxisHelper.LabelLayoutStrategy.wordBreak
 * @param content - string to split
 * @param properties - text properties to be used by @param:textWidthMeasurer
 * @param textWidthMeasurer - function to calculate width of given text content
 * @param maxWidth - maximum allowed width of text content in each result
 * @param maxNumLines - maximum number of results we will allow, valid values must be greater than 0
 * @param truncator - (optional) if specified, used as a function to truncate content to a given width
*/
function splitByWidth(content, properties, textWidthMeasurer, maxWidth, maxNumLines, truncator) {
    // Default truncator returns string as-is
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    truncator = truncator ? truncator : function (properties, maxWidth) { return properties.text; };
    var result = [];
    var words = split(content);
    var usedWidth = 0;
    var wordsInLine = [];
    for (var _i = 0, words_2 = words; _i < words_2.length; _i++) {
        var word = words_2[_i];
        // Last line? Just add whatever is left
        if ((maxNumLines > 0) && (result.length >= maxNumLines - 1)) {
            wordsInLine.push(word);
            continue;
        }
        // Determine width if we add this word
        // Account for SPACE we will add when joining...
        var wordWidth = wordsInLine.length === 0
            ? getWidth(word, properties, textWidthMeasurer)
            : getWidth(SPACE + word, properties, textWidthMeasurer);
        // If width would exceed max width,
        // then push used words and start new split result
        if (usedWidth + wordWidth > maxWidth) {
            // Word alone exceeds max width, just add it.
            if (wordsInLine.length === 0) {
                result.push(truncate(word, properties, truncator, maxWidth));
                usedWidth = 0;
                wordsInLine = [];
                continue;
            }
            result.push(truncate(wordsInLine.join(SPACE), properties, truncator, maxWidth));
            usedWidth = 0;
            wordsInLine = [];
        }
        // ...otherwise, add word and continue
        wordsInLine.push(word);
        usedWidth += wordWidth;
    }
    // Push remaining words onto result (if any)
    if (wordsInLine && wordsInLine.length) {
        result.push(truncate(wordsInLine.join(SPACE), properties, truncator, maxWidth));
    }
    return result;
}
exports.splitByWidth = splitByWidth;
//# sourceMappingURL=wordBreaker.js.map

/***/ }),

/***/ 8329:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   categoryIsAlsoSeriesRole: () => (/* binding */ categoryIsAlsoSeriesRole),
/* harmony export */   getMiscellaneousTypeDescriptor: () => (/* binding */ getMiscellaneousTypeDescriptor),
/* harmony export */   getSeriesName: () => (/* binding */ getSeriesName),
/* harmony export */   hasImageUrlColumn: () => (/* binding */ hasImageUrlColumn),
/* harmony export */   isImageUrlColumn: () => (/* binding */ isImageUrlColumn),
/* harmony export */   isWebUrlColumn: () => (/* binding */ isWebUrlColumn)
/* harmony export */ });
/* harmony import */ var _dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2628);
// powerbi.extensibility.utils.dataview

function categoryIsAlsoSeriesRole(dataView, seriesRoleName, categoryRoleName) {
    if (dataView.categories && dataView.categories.length > 0) {
        // Need to pivot data if our category soure is a series role
        const category = dataView.categories[0];
        return category.source &&
            _dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.hasRole(category.source, seriesRoleName) &&
            _dataRoleHelper__WEBPACK_IMPORTED_MODULE_0__.hasRole(category.source, categoryRoleName);
    }
    return false;
}
function getSeriesName(source) {
    return (source.groupName !== undefined)
        ? source.groupName
        : source.queryName;
}
function isImageUrlColumn(column) {
    const misc = getMiscellaneousTypeDescriptor(column);
    return misc != null && misc.imageUrl === true;
}
function isWebUrlColumn(column) {
    const misc = getMiscellaneousTypeDescriptor(column);
    return misc != null && misc.webUrl === true;
}
function getMiscellaneousTypeDescriptor(column) {
    return column
        && column.type
        && column.type.misc;
}
function hasImageUrlColumn(dataView) {
    if (!dataView || !dataView.metadata || !dataView.metadata.columns || !dataView.metadata.columns.length) {
        return false;
    }
    return dataView.metadata.columns.some((column) => isImageUrlColumn(column) === true);
}
//# sourceMappingURL=converterHelper.js.map

/***/ }),

/***/ 2628:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getCategoryIndexOfRole: () => (/* binding */ getCategoryIndexOfRole),
/* harmony export */   getMeasureIndexOfRole: () => (/* binding */ getMeasureIndexOfRole),
/* harmony export */   hasRole: () => (/* binding */ hasRole),
/* harmony export */   hasRoleInDataView: () => (/* binding */ hasRoleInDataView),
/* harmony export */   hasRoleInValueColumn: () => (/* binding */ hasRoleInValueColumn)
/* harmony export */ });
function getMeasureIndexOfRole(grouped, roleName) {
    if (!grouped || !grouped.length) {
        return -1;
    }
    const firstGroup = grouped[0];
    if (firstGroup.values && firstGroup.values.length > 0) {
        for (let i = 0, len = firstGroup.values.length; i < len; ++i) {
            const value = firstGroup.values[i];
            if (value && value.source) {
                if (hasRole(value.source, roleName)) {
                    return i;
                }
            }
        }
    }
    return -1;
}
function getCategoryIndexOfRole(categories, roleName) {
    if (categories && categories.length) {
        for (let i = 0, ilen = categories.length; i < ilen; i++) {
            if (hasRole(categories[i].source, roleName)) {
                return i;
            }
        }
    }
    return -1;
}
function hasRole(column, name) {
    const roles = column.roles;
    return roles && roles[name];
}
function hasRoleInDataView(dataView, name) {
    return dataView != null
        && dataView.metadata != null
        && dataView.metadata.columns
        && dataView.metadata.columns.some((c) => c.roles && c.roles[name] !== undefined); // any is an alias of some
}
function hasRoleInValueColumn(valueColumn, name) {
    return valueColumn
        && valueColumn.source
        && valueColumn.source.roles
        && (valueColumn.source.roles[name] === true);
}
//# sourceMappingURL=dataRoleHelper.js.map

/***/ }),

/***/ 35:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getFillColorByPropertyName: () => (/* binding */ getFillColorByPropertyName),
/* harmony export */   getValue: () => (/* binding */ getValue)
/* harmony export */ });
function getValue(object, propertyName, defaultValue) {
    if (!object) {
        return defaultValue;
    }
    const propertyValue = object[propertyName];
    if (propertyValue === undefined) {
        return defaultValue;
    }
    return propertyValue;
}
/** Gets the solid color from a fill property using only a propertyName */
function getFillColorByPropertyName(object, propertyName, defaultColor) {
    const value = getValue(object, propertyName);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
//# sourceMappingURL=dataViewObject.js.map

/***/ }),

/***/ 1877:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getCommonValue: () => (/* binding */ getCommonValue),
/* harmony export */   getFillColor: () => (/* binding */ getFillColor),
/* harmony export */   getObject: () => (/* binding */ getObject),
/* harmony export */   getValue: () => (/* binding */ getValue)
/* harmony export */ });
/* harmony import */ var _dataViewObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(35);

/** Gets the value of the given object/property pair. */
function getValue(objects, propertyId, defaultValue) {
    if (!objects) {
        return defaultValue;
    }
    return _dataViewObject__WEBPACK_IMPORTED_MODULE_0__.getValue(objects[propertyId.objectName], propertyId.propertyName, defaultValue);
}
/** Gets an object from objects. */
function getObject(objects, objectName, defaultValue) {
    if (objects && objects[objectName]) {
        return objects[objectName];
    }
    return defaultValue;
}
/** Gets the solid color from a fill property. */
function getFillColor(objects, propertyId, defaultColor) {
    const value = getValue(objects, propertyId);
    if (!value || !value.solid) {
        return defaultColor;
    }
    return value.solid.color;
}
function getCommonValue(objects, propertyId, defaultValue) {
    const value = getValue(objects, propertyId, defaultValue);
    if (value && value.solid) {
        return value.solid.color;
    }
    if (value === undefined
        || value === null
        || (typeof value === "object" && !value.solid)) {
        return defaultValue;
    }
    return value;
}
//# sourceMappingURL=dataViewObjects.js.map

/***/ }),

/***/ 5365:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataViewObjectsParser: () => (/* binding */ DataViewObjectsParser)
/* harmony export */ });
/* harmony import */ var _dataViewObjects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1877);

class DataViewObjectsParser {
    static getDefault() {
        return new this();
    }
    static createPropertyIdentifier(objectName, propertyName) {
        return {
            objectName,
            propertyName
        };
    }
    static parse(dataView) {
        const dataViewObjectParser = this.getDefault();
        if (!dataView || !dataView.metadata || !dataView.metadata.objects) {
            return dataViewObjectParser;
        }
        const properties = dataViewObjectParser.getProperties();
        for (const objectName in properties) {
            for (const propertyName in properties[objectName]) {
                const defaultValue = dataViewObjectParser[objectName][propertyName];
                dataViewObjectParser[objectName][propertyName] = _dataViewObjects__WEBPACK_IMPORTED_MODULE_0__.getCommonValue(dataView.metadata.objects, properties[objectName][propertyName], defaultValue);
            }
        }
        return dataViewObjectParser;
    }
    static isPropertyEnumerable(propertyName) {
        return !DataViewObjectsParser.InnumerablePropertyPrefix.test(propertyName);
    }
    static enumerateObjectInstances(dataViewObjectParser, options) {
        const dataViewProperties = dataViewObjectParser && dataViewObjectParser[options.objectName];
        if (!dataViewProperties) {
            return [];
        }
        const instance = {
            objectName: options.objectName,
            selector: null,
            properties: {}
        };
        for (const key in dataViewProperties) {
            if (Object.prototype.hasOwnProperty.call(dataViewProperties, key)) {
                instance.properties[key] = dataViewProperties[key];
            }
        }
        return {
            instances: [instance]
        };
    }
    getProperties() {
        const properties = {}, objectNames = Object.keys(this);
        objectNames.forEach((objectName) => {
            if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {
                const propertyNames = Object.keys(this[objectName]);
                properties[objectName] = {};
                propertyNames.forEach((propertyName) => {
                    if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {
                        properties[objectName][propertyName] =
                            DataViewObjectsParser.createPropertyIdentifier(objectName, propertyName);
                    }
                });
            }
        });
        return properties;
    }
}
DataViewObjectsParser.InnumerablePropertyPrefix = /^_/;
//# sourceMappingURL=dataViewObjectsParser.js.map

/***/ }),

/***/ 3138:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createValueColumns: () => (/* binding */ createValueColumns),
/* harmony export */   groupValues: () => (/* binding */ groupValues),
/* harmony export */   setGrouped: () => (/* binding */ setGrouped)
/* harmony export */ });
// TODO: refactor & focus DataViewTransform into a service with well-defined dependencies.
// TODO: refactor this, setGrouped, and groupValues to a test helper to stop using it in the product
function createValueColumns(values = [], valueIdentityFields, source) {
    const result = values;
    setGrouped(result);
    if (valueIdentityFields) {
        result.identityFields = valueIdentityFields;
    }
    if (source) {
        result.source = source;
    }
    return result;
}
function setGrouped(values, groupedResult) {
    values.grouped = groupedResult
        ? () => groupedResult
        : () => groupValues(values);
}
/** Group together the values with a common identity. */
function groupValues(values) {
    const groups = [];
    let currentGroup;
    for (let i = 0, len = values.length; i < len; i++) {
        const value = values[i];
        if (!currentGroup || currentGroup.identity !== value.identity) {
            currentGroup = {
                values: []
            };
            if (value.identity) {
                currentGroup.identity = value.identity;
                const source = value.source;
                // allow null, which will be formatted as (Blank).
                if (source.groupName !== undefined) {
                    currentGroup.name = source.groupName;
                }
                else if (source.displayName) {
                    currentGroup.name = source.displayName;
                }
            }
            groups.push(currentGroup);
        }
        currentGroup.values.push(value);
    }
    return groups;
}
//# sourceMappingURL=dataViewTransform.js.map

/***/ }),

/***/ 4557:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createDataViewWildcardSelector: () => (/* binding */ createDataViewWildcardSelector)
/* harmony export */ });
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
function createDataViewWildcardSelector(dataViewWildcardMatchingOption) {
    if (dataViewWildcardMatchingOption == null) {
        dataViewWildcardMatchingOption = 0 /* DataViewWildcardMatchingOption.InstancesAndTotals */;
    }
    const selector = {
        data: [
            {
                dataViewWildcard: {
                    matchingOption: dataViewWildcardMatchingOption
                }
            }
        ]
    };
    return selector;
}
//# sourceMappingURL=dataViewWildcard.js.map

/***/ }),

/***/ 7758:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   converterHelper: () => (/* reexport module object */ _converterHelper__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   dataRoleHelper: () => (/* reexport module object */ _dataRoleHelper__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   dataViewObject: () => (/* reexport module object */ _dataViewObject__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   dataViewObjects: () => (/* reexport module object */ _dataViewObjects__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   dataViewObjectsParser: () => (/* reexport module object */ _dataViewObjectsParser__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   dataViewTransform: () => (/* reexport module object */ _dataViewTransform__WEBPACK_IMPORTED_MODULE_5__),
/* harmony export */   dataViewWildcard: () => (/* reexport module object */ _dataViewWildcard__WEBPACK_IMPORTED_MODULE_6__),
/* harmony export */   validationHelper: () => (/* reexport module object */ _validationHelper__WEBPACK_IMPORTED_MODULE_7__)
/* harmony export */ });
/* harmony import */ var _converterHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8329);
/* harmony import */ var _dataRoleHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2628);
/* harmony import */ var _dataViewObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(35);
/* harmony import */ var _dataViewObjects__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1877);
/* harmony import */ var _dataViewObjectsParser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5365);
/* harmony import */ var _dataViewTransform__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(3138);
/* harmony import */ var _dataViewWildcard__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(4557);
/* harmony import */ var _validationHelper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(4261);









//# sourceMappingURL=index.js.map

/***/ }),

/***/ 4261:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isFileImage: () => (/* binding */ isFileImage),
/* harmony export */   isImageUrlAllowed: () => (/* binding */ isImageUrlAllowed)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
function isImageUrlAllowed(url) {
    // Excludes all URLs that don't contain .gif .jpg .png or .svg extensions and don't start from "http(s)://".
    // Base64 incoded images are allowable too.
    return (/^https?:\/\/.+\.(gif|jpg|png|svg)$/i).test(url) || (/^data:image\/(gif|jpeg|png|svg\+xml);base64,/i).test(url);
}
function isFileImage(url, imageCheckResultCallBack) {
    const request = new XMLHttpRequest();
    request.onreadystatechange = function () {
        if (request.readyState !== this.HEADERS_RECEIVED) {
            return;
        }
        const contentType = request.getResponseHeader("Content-Type"), supportedTypes = ["image/png", "image/jpeg", "image/gif", "image/svg+xml"];
        if (supportedTypes.indexOf(contentType) > -1) {
            return imageCheckResultCallBack(true, contentType);
        }
        return imageCheckResultCallBack(false, contentType);
    };
    request.open("HEAD", url, true);
    request.send();
}
//# sourceMappingURL=validationHelper.js.map

/***/ }),

/***/ 7802:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_PRECISION: () => (/* binding */ DEFAULT_PRECISION),
/* harmony export */   DEFAULT_PRECISION_IN_DECIMAL_DIGITS: () => (/* binding */ DEFAULT_PRECISION_IN_DECIMAL_DIGITS),
/* harmony export */   EPSILON: () => (/* binding */ EPSILON),
/* harmony export */   LOG_E_10: () => (/* binding */ LOG_E_10),
/* harmony export */   MAX_EXP: () => (/* binding */ MAX_EXP),
/* harmony export */   MAX_VALUE: () => (/* binding */ MAX_VALUE),
/* harmony export */   MIN_EXP: () => (/* binding */ MIN_EXP),
/* harmony export */   MIN_VALUE: () => (/* binding */ MIN_VALUE),
/* harmony export */   NEGATIVE_POWERS: () => (/* binding */ NEGATIVE_POWERS),
/* harmony export */   POSITIVE_POWERS: () => (/* binding */ POSITIVE_POWERS),
/* harmony export */   ceilToPrecision: () => (/* binding */ ceilToPrecision),
/* harmony export */   ceilWithPrecision: () => (/* binding */ ceilWithPrecision),
/* harmony export */   detectPrecision: () => (/* binding */ detectPrecision),
/* harmony export */   ensureInRange: () => (/* binding */ ensureInRange),
/* harmony export */   equalWithPrecision: () => (/* binding */ equalWithPrecision),
/* harmony export */   floorToPrecision: () => (/* binding */ floorToPrecision),
/* harmony export */   floorWithPrecision: () => (/* binding */ floorWithPrecision),
/* harmony export */   getPrecision: () => (/* binding */ getPrecision),
/* harmony export */   greaterOrEqualWithPrecision: () => (/* binding */ greaterOrEqualWithPrecision),
/* harmony export */   greaterWithPrecision: () => (/* binding */ greaterWithPrecision),
/* harmony export */   isInteger: () => (/* binding */ isInteger),
/* harmony export */   lessOrEqualWithPrecision: () => (/* binding */ lessOrEqualWithPrecision),
/* harmony export */   lessWithPrecision: () => (/* binding */ lessWithPrecision),
/* harmony export */   log10: () => (/* binding */ log10),
/* harmony export */   pow10: () => (/* binding */ pow10),
/* harmony export */   project: () => (/* binding */ project),
/* harmony export */   removeDecimalNoise: () => (/* binding */ removeDecimalNoise),
/* harmony export */   round: () => (/* binding */ round),
/* harmony export */   roundToPrecision: () => (/* binding */ roundToPrecision),
/* harmony export */   toIncrement: () => (/* binding */ toIncrement)
/* harmony export */ });
/*
*  Power BI Visualizations
*
*  Copyright (c) Microsoft Corporation
*  All rights reserved.
*  MIT License
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the ""Software""), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in
*  all copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*  THE SOFTWARE.
*/
/**
 * Module Double contains a set of constants and precision based utility methods
 * for dealing with doubles and their decimal garbage in the javascript.
 */
// Constants.
const MIN_VALUE = -Number.MAX_VALUE;
const MAX_VALUE = Number.MAX_VALUE;
const MIN_EXP = -308;
const MAX_EXP = 308;
const EPSILON = 1E-323;
const DEFAULT_PRECISION = 0.0001;
const DEFAULT_PRECISION_IN_DECIMAL_DIGITS = 12;
const LOG_E_10 = Math.log(10);
const POSITIVE_POWERS = [
    1E0, 1E1, 1E2, 1E3, 1E4, 1E5, 1E6, 1E7, 1E8, 1E9, 1E10, 1E11, 1E12, 1E13, 1E14, 1E15, 1E16, 1E17, 1E18, 1E19, 1E20, 1E21, 1E22, 1E23, 1E24, 1E25, 1E26, 1E27, 1E28, 1E29, 1E30, 1E31, 1E32, 1E33, 1E34, 1E35, 1E36, 1E37, 1E38, 1E39, 1E40, 1E41, 1E42, 1E43, 1E44, 1E45, 1E46, 1E47, 1E48, 1E49, 1E50, 1E51, 1E52, 1E53, 1E54, 1E55, 1E56, 1E57, 1E58, 1E59, 1E60, 1E61, 1E62, 1E63, 1E64, 1E65, 1E66, 1E67, 1E68, 1E69, 1E70, 1E71, 1E72, 1E73, 1E74, 1E75, 1E76, 1E77, 1E78, 1E79, 1E80, 1E81, 1E82, 1E83, 1E84, 1E85, 1E86, 1E87, 1E88, 1E89, 1E90, 1E91, 1E92, 1E93, 1E94, 1E95, 1E96, 1E97, 1E98, 1E99,
    1E100, 1E101, 1E102, 1E103, 1E104, 1E105, 1E106, 1E107, 1E108, 1E109, 1E110, 1E111, 1E112, 1E113, 1E114, 1E115, 1E116, 1E117, 1E118, 1E119, 1E120, 1E121, 1E122, 1E123, 1E124, 1E125, 1E126, 1E127, 1E128, 1E129, 1E130, 1E131, 1E132, 1E133, 1E134, 1E135, 1E136, 1E137, 1E138, 1E139, 1E140, 1E141, 1E142, 1E143, 1E144, 1E145, 1E146, 1E147, 1E148, 1E149, 1E150, 1E151, 1E152, 1E153, 1E154, 1E155, 1E156, 1E157, 1E158, 1E159, 1E160, 1E161, 1E162, 1E163, 1E164, 1E165, 1E166, 1E167, 1E168, 1E169, 1E170, 1E171, 1E172, 1E173, 1E174, 1E175, 1E176, 1E177, 1E178, 1E179, 1E180, 1E181, 1E182, 1E183, 1E184, 1E185, 1E186, 1E187, 1E188, 1E189, 1E190, 1E191, 1E192, 1E193, 1E194, 1E195, 1E196, 1E197, 1E198, 1E199,
    1E200, 1E201, 1E202, 1E203, 1E204, 1E205, 1E206, 1E207, 1E208, 1E209, 1E210, 1E211, 1E212, 1E213, 1E214, 1E215, 1E216, 1E217, 1E218, 1E219, 1E220, 1E221, 1E222, 1E223, 1E224, 1E225, 1E226, 1E227, 1E228, 1E229, 1E230, 1E231, 1E232, 1E233, 1E234, 1E235, 1E236, 1E237, 1E238, 1E239, 1E240, 1E241, 1E242, 1E243, 1E244, 1E245, 1E246, 1E247, 1E248, 1E249, 1E250, 1E251, 1E252, 1E253, 1E254, 1E255, 1E256, 1E257, 1E258, 1E259, 1E260, 1E261, 1E262, 1E263, 1E264, 1E265, 1E266, 1E267, 1E268, 1E269, 1E270, 1E271, 1E272, 1E273, 1E274, 1E275, 1E276, 1E277, 1E278, 1E279, 1E280, 1E281, 1E282, 1E283, 1E284, 1E285, 1E286, 1E287, 1E288, 1E289, 1E290, 1E291, 1E292, 1E293, 1E294, 1E295, 1E296, 1E297, 1E298, 1E299,
    1E300, 1E301, 1E302, 1E303, 1E304, 1E305, 1E306, 1E307, 1E308
];
const NEGATIVE_POWERS = [
    1E0, 1E-1, 1E-2, 1E-3, 1E-4, 1E-5, 1E-6, 1E-7, 1E-8, 1E-9, 1E-10, 1E-11, 1E-12, 1E-13, 1E-14, 1E-15, 1E-16, 1E-17, 1E-18, 1E-19, 1E-20, 1E-21, 1E-22, 1E-23, 1E-24, 1E-25, 1E-26, 1E-27, 1E-28, 1E-29, 1E-30, 1E-31, 1E-32, 1E-33, 1E-34, 1E-35, 1E-36, 1E-37, 1E-38, 1E-39, 1E-40, 1E-41, 1E-42, 1E-43, 1E-44, 1E-45, 1E-46, 1E-47, 1E-48, 1E-49, 1E-50, 1E-51, 1E-52, 1E-53, 1E-54, 1E-55, 1E-56, 1E-57, 1E-58, 1E-59, 1E-60, 1E-61, 1E-62, 1E-63, 1E-64, 1E-65, 1E-66, 1E-67, 1E-68, 1E-69, 1E-70, 1E-71, 1E-72, 1E-73, 1E-74, 1E-75, 1E-76, 1E-77, 1E-78, 1E-79, 1E-80, 1E-81, 1E-82, 1E-83, 1E-84, 1E-85, 1E-86, 1E-87, 1E-88, 1E-89, 1E-90, 1E-91, 1E-92, 1E-93, 1E-94, 1E-95, 1E-96, 1E-97, 1E-98, 1E-99,
    1E-100, 1E-101, 1E-102, 1E-103, 1E-104, 1E-105, 1E-106, 1E-107, 1E-108, 1E-109, 1E-110, 1E-111, 1E-112, 1E-113, 1E-114, 1E-115, 1E-116, 1E-117, 1E-118, 1E-119, 1E-120, 1E-121, 1E-122, 1E-123, 1E-124, 1E-125, 1E-126, 1E-127, 1E-128, 1E-129, 1E-130, 1E-131, 1E-132, 1E-133, 1E-134, 1E-135, 1E-136, 1E-137, 1E-138, 1E-139, 1E-140, 1E-141, 1E-142, 1E-143, 1E-144, 1E-145, 1E-146, 1E-147, 1E-148, 1E-149, 1E-150, 1E-151, 1E-152, 1E-153, 1E-154, 1E-155, 1E-156, 1E-157, 1E-158, 1E-159, 1E-160, 1E-161, 1E-162, 1E-163, 1E-164, 1E-165, 1E-166, 1E-167, 1E-168, 1E-169, 1E-170, 1E-171, 1E-172, 1E-173, 1E-174, 1E-175, 1E-176, 1E-177, 1E-178, 1E-179, 1E-180, 1E-181, 1E-182, 1E-183, 1E-184, 1E-185, 1E-186, 1E-187, 1E-188, 1E-189, 1E-190, 1E-191, 1E-192, 1E-193, 1E-194, 1E-195, 1E-196, 1E-197, 1E-198, 1E-199,
    1E-200, 1E-201, 1E-202, 1E-203, 1E-204, 1E-205, 1E-206, 1E-207, 1E-208, 1E-209, 1E-210, 1E-211, 1E-212, 1E-213, 1E-214, 1E-215, 1E-216, 1E-217, 1E-218, 1E-219, 1E-220, 1E-221, 1E-222, 1E-223, 1E-224, 1E-225, 1E-226, 1E-227, 1E-228, 1E-229, 1E-230, 1E-231, 1E-232, 1E-233, 1E-234, 1E-235, 1E-236, 1E-237, 1E-238, 1E-239, 1E-240, 1E-241, 1E-242, 1E-243, 1E-244, 1E-245, 1E-246, 1E-247, 1E-248, 1E-249, 1E-250, 1E-251, 1E-252, 1E-253, 1E-254, 1E-255, 1E-256, 1E-257, 1E-258, 1E-259, 1E-260, 1E-261, 1E-262, 1E-263, 1E-264, 1E-265, 1E-266, 1E-267, 1E-268, 1E-269, 1E-270, 1E-271, 1E-272, 1E-273, 1E-274, 1E-275, 1E-276, 1E-277, 1E-278, 1E-279, 1E-280, 1E-281, 1E-282, 1E-283, 1E-284, 1E-285, 1E-286, 1E-287, 1E-288, 1E-289, 1E-290, 1E-291, 1E-292, 1E-293, 1E-294, 1E-295, 1E-296, 1E-297, 1E-298, 1E-299,
    1E-300, 1E-301, 1E-302, 1E-303, 1E-304, 1E-305, 1E-306, 1E-307, 1E-308, 1E-309, 1E-310, 1E-311, 1E-312, 1E-313, 1E-314, 1E-315, 1E-316, 1E-317, 1E-318, 1E-319, 1E-320, 1E-321, 1E-322, 1E-323, 1E-324
];
/**
 * Returns powers of 10.
 * Unlike the Math.pow this function produces no decimal garbage.
 * @param exp Exponent.
 */
function pow10(exp) {
    // Positive & zero
    if (exp >= 0) {
        if (exp < POSITIVE_POWERS.length) {
            return POSITIVE_POWERS[exp];
        }
        else {
            return Infinity;
        }
    }
    // Negative
    exp = -exp;
    if (exp > 0 && exp < NEGATIVE_POWERS.length) { // if exp==int.MIN_VALUE then changing the sign will overflow and keep the number negative - we need to check for exp > 0 to filter out this corner case
        return NEGATIVE_POWERS[exp];
    }
    else {
        return 0;
    }
}
/**
 * Returns the 10 base logarithm of the number.
 * Unlike Math.log function this produces integer results with no decimal garbage.
 * @param val Positive value or zero.
 */
// eslint-disable-next-line max-lines-per-function
function log10(val) {
    // Fast Log10() algorithm
    if (val > 1 && val < 1E16) {
        if (val < 1E8) {
            if (val < 1E4) {
                if (val < 1E2) {
                    if (val < 1E1) {
                        return 0;
                    }
                    else {
                        return 1;
                    }
                }
                else {
                    if (val < 1E3) {
                        return 2;
                    }
                    else {
                        return 3;
                    }
                }
            }
            else {
                if (val < 1E6) {
                    if (val < 1E5) {
                        return 4;
                    }
                    else {
                        return 5;
                    }
                }
                else {
                    if (val < 1E7) {
                        return 6;
                    }
                    else {
                        return 7;
                    }
                }
            }
        }
        else {
            if (val < 1E12) {
                if (val < 1E10) {
                    if (val < 1E9) {
                        return 8;
                    }
                    else {
                        return 9;
                    }
                }
                else {
                    if (val < 1E11) {
                        return 10;
                    }
                    else {
                        return 11;
                    }
                }
            }
            else {
                if (val < 1E14) {
                    if (val < 1E13) {
                        return 12;
                    }
                    else {
                        return 13;
                    }
                }
                else {
                    if (val < 1E15) {
                        return 14;
                    }
                    else {
                        return 15;
                    }
                }
            }
        }
    }
    if (val > 1E-16 && val < 1) {
        if (val < 1E-8) {
            if (val < 1E-12) {
                if (val < 1E-14) {
                    if (val < 1E-15) {
                        return -16;
                    }
                    else {
                        return -15;
                    }
                }
                else {
                    if (val < 1E-13) {
                        return -14;
                    }
                    else {
                        return -13;
                    }
                }
            }
            else {
                if (val < 1E-10) {
                    if (val < 1E-11) {
                        return -12;
                    }
                    else {
                        return -11;
                    }
                }
                else {
                    if (val < 1E-9) {
                        return -10;
                    }
                    else {
                        return -9;
                    }
                }
            }
        }
        else {
            if (val < 1E-4) {
                if (val < 1E-6) {
                    if (val < 1E-7) {
                        return -8;
                    }
                    else {
                        return -7;
                    }
                }
                else {
                    if (val < 1E-5) {
                        return -6;
                    }
                    else {
                        return -5;
                    }
                }
            }
            else {
                if (val < 1E-2) {
                    if (val < 1E-3) {
                        return -4;
                    }
                    else {
                        return -3;
                    }
                }
                else {
                    if (val < 1E-1) {
                        return -2;
                    }
                    else {
                        return -1;
                    }
                }
            }
        }
    }
    // JS Math provides only natural log function so we need to calc the 10 base logarithm:
    // logb(x) = logk(x)/logk(b);
    const log10 = Math.log(val) / LOG_E_10;
    return floorWithPrecision(log10);
}
/**
 * Returns a power of 10 representing precision of the number based on the number of meaningful decimal digits.
 * For example the precision of 56,263.3767 with the 6 meaningful decimal digit is 0.1.
 * @param x Value.
 * @param decimalDigits How many decimal digits are meaningfull.
 */
function getPrecision(x, decimalDigits) {
    if (decimalDigits === undefined) {
        decimalDigits = DEFAULT_PRECISION_IN_DECIMAL_DIGITS;
    }
    if (!x || !isFinite(x)) {
        return undefined;
    }
    const exp = log10(Math.abs(x));
    if (exp < MIN_EXP) {
        return 0;
    }
    const precisionExp = Math.max(exp - decimalDigits, -NEGATIVE_POWERS.length + 1);
    return pow10(precisionExp);
}
/**
 * Checks if a delta between 2 numbers is less than provided precision.
 * @param x One value.
 * @param y Another value.
 * @param precision Precision value.
 */
function equalWithPrecision(x, y, precision) {
    precision = detectPrecision(precision, x, y);
    return x === y || Math.abs(x - y) < precision;
}
/**
 * Checks if a first value is less than another taking
 * into account the loose precision based equality.
 * @param x One value.
 * @param y Another value.
 * @param precision Precision value.
 */
function lessWithPrecision(x, y, precision) {
    precision = detectPrecision(precision, x, y);
    return x < y && Math.abs(x - y) > precision;
}
/**
 * Checks if a first value is less or equal than another taking
 * into account the loose precision based equality.
 * @param x One value.
 * @param y Another value.
 * @param precision Precision value.
 */
function lessOrEqualWithPrecision(x, y, precision) {
    precision = detectPrecision(precision, x, y);
    return x < y || Math.abs(x - y) < precision;
}
/**
 * Checks if a first value is greater than another taking
 * into account the loose precision based equality.
 * @param x One value.
 * @param y Another value.
 * @param precision Precision value.
 */
function greaterWithPrecision(x, y, precision) {
    precision = detectPrecision(precision, x, y);
    return x > y && Math.abs(x - y) > precision;
}
/**
 * Checks if a first value is greater or equal to another taking
 * into account the loose precision based equality.
 * @param x One value.
 * @param y Another value.
 * @param precision Precision value.
 */
function greaterOrEqualWithPrecision(x, y, precision) {
    precision = detectPrecision(precision, x, y);
    return x > y || Math.abs(x - y) < precision;
}
/**
 * Floors the number unless it's withing the precision distance from the higher int.
 * @param x One value.
 * @param precision Precision value.
 */
function floorWithPrecision(x, precision) {
    precision = precision != null ? precision : DEFAULT_PRECISION;
    const roundX = Math.round(x);
    if (Math.abs(x - roundX) < precision) {
        return roundX;
    }
    else {
        return Math.floor(x);
    }
}
/**
 * Ceils the number unless it's withing the precision distance from the lower int.
 * @param x One value.
 * @param precision Precision value.
 */
function ceilWithPrecision(x, precision) {
    precision = detectPrecision(precision, DEFAULT_PRECISION);
    const roundX = Math.round(x);
    if (Math.abs(x - roundX) < precision) {
        return roundX;
    }
    else {
        return Math.ceil(x);
    }
}
/**
 * Floors the number to the provided precision.
 * For example 234,578 floored to 1,000 precision is 234,000.
 * @param x One value.
 * @param precision Precision value.
 */
function floorToPrecision(x, precision) {
    precision = detectPrecision(precision, DEFAULT_PRECISION);
    if (precision === 0 || x === 0) {
        return x;
    }
    // Precision must be a Power of 10
    return Math.floor(x / precision) * precision;
}
/**
 * Ceils the number to the provided precision.
 * For example 234,578 floored to 1,000 precision is 235,000.
 * @param x One value.
 * @param precision Precision value.
 */
function ceilToPrecision(x, precision) {
    precision = detectPrecision(precision, DEFAULT_PRECISION);
    if (precision === 0 || x === 0) {
        return x;
    }
    // Precision must be a Power of 10
    return Math.ceil(x / precision) * precision;
}
/**
 * Rounds the number to the provided precision.
 * For example 234,578 floored to 1,000 precision is 235,000.
 * @param x One value.
 * @param precision Precision value.
 */
function roundToPrecision(x, precision) {
    precision = detectPrecision(precision, DEFAULT_PRECISION);
    if (precision === 0 || x === 0) {
        return x;
    }
    // Precision must be a Power of 10
    let result = Math.round(x / precision) * precision;
    const decimalDigits = Math.round(log10(Math.abs(x)) - log10(precision)) + 1;
    if (decimalDigits > 0 && decimalDigits < 16) {
        result = parseFloat(result.toPrecision(decimalDigits));
    }
    return result;
}
/**
 * Returns the value making sure that it's restricted to the provided range.
 * @param x One value.
 * @param min Range min boundary.
 * @param max Range max boundary.
 */
function ensureInRange(x, min, max) {
    if (x === undefined || x === null) {
        return x;
    }
    if (x < min) {
        return min;
    }
    if (x > max) {
        return max;
    }
    return x;
}
/**
 * Rounds the value - this method is actually faster than Math.round - used in the graphics utils.
 * @param x Value to round.
 */
function round(x) {
    return (0.5 + x) << 0;
}
/**
 * Projects the value from the source range into the target range.
 * @param value Value to project.
 * @param fromMin Minimum of the source range.
 * @param toMin Minimum of the target range.
 * @param toMax Maximum of the target range.
 */
function project(value, fromMin, fromSize, toMin, toSize) {
    if (fromSize === 0 || toSize === 0) {
        if (fromMin <= value && value <= fromMin + fromSize) {
            return toMin;
        }
        else {
            return NaN;
        }
    }
    const relativeX = (value - fromMin) / fromSize;
    const projectedX = toMin + relativeX * toSize;
    return projectedX;
}
/**
 * Removes decimal noise.
 * @param value Value to be processed.
 */
function removeDecimalNoise(value) {
    return roundToPrecision(value, getPrecision(value));
}
/**
 * Checks whether the number is integer.
 * @param value Value to be checked.
 */
function isInteger(value) {
    return value !== null && value % 1 === 0;
}
/**
 * Dividing by increment will give us count of increments
 * Round out the rough edges into even integer
 * Multiply back by increment to get rounded value
 * e.g. Rounder.toIncrement(0.647291, 0.05) => 0.65
 * @param value - value to round to nearest increment
 * @param increment - smallest increment to round toward
 */
function toIncrement(value, increment) {
    return Math.round(value / increment) * increment;
}
/**
 * Overrides the given precision with defaults if necessary. Exported only for tests
 *
 * precision defined returns precision
 * x defined with y undefined returns twelve digits of precision based on x
 * x defined but zero with y defined; returns twelve digits of precision based on y
 * x and y defined retursn twelve digits of precision based on the minimum of the two
 * if no applicable precision is found based on those (such as x and y being zero), the default precision is used
 */
function detectPrecision(precision, x, y) {
    if (precision !== undefined) {
        return precision;
    }
    let calculatedPrecision;
    if (!y) {
        calculatedPrecision = getPrecision(x);
    }
    else if (!x) {
        calculatedPrecision = getPrecision(y);
    }
    else {
        calculatedPrecision = getPrecision(Math.min(Math.abs(x), Math.abs(y)));
    }
    return calculatedPrecision || DEFAULT_PRECISION;
}
//# sourceMappingURL=double.js.map

/***/ }),

/***/ 1085:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clear: () => (/* binding */ clear),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   createWithId: () => (/* binding */ createWithId),
/* harmony export */   createWithName: () => (/* binding */ createWithName),
/* harmony export */   diff: () => (/* binding */ diff),
/* harmony export */   distinct: () => (/* binding */ distinct),
/* harmony export */   emptyToNull: () => (/* binding */ emptyToNull),
/* harmony export */   ensureArray: () => (/* binding */ ensureArray),
/* harmony export */   extendWithId: () => (/* binding */ extendWithId),
/* harmony export */   extendWithName: () => (/* binding */ extendWithName),
/* harmony export */   findItemWithName: () => (/* binding */ findItemWithName),
/* harmony export */   findWithId: () => (/* binding */ findWithId),
/* harmony export */   indexOf: () => (/* binding */ indexOf),
/* harmony export */   indexWithName: () => (/* binding */ indexWithName),
/* harmony export */   insertSorted: () => (/* binding */ insertSorted),
/* harmony export */   intersect: () => (/* binding */ intersect),
/* harmony export */   isArrayOrInheritedArray: () => (/* binding */ isArrayOrInheritedArray),
/* harmony export */   isInArray: () => (/* binding */ isInArray),
/* harmony export */   isSorted: () => (/* binding */ isSorted),
/* harmony export */   isSortedNumeric: () => (/* binding */ isSortedNumeric),
/* harmony export */   isUndefinedOrEmpty: () => (/* binding */ isUndefinedOrEmpty),
/* harmony export */   range: () => (/* binding */ range),
/* harmony export */   removeFirst: () => (/* binding */ removeFirst),
/* harmony export */   rotate: () => (/* binding */ rotate),
/* harmony export */   sequenceEqual: () => (/* binding */ sequenceEqual),
/* harmony export */   swap: () => (/* binding */ swap),
/* harmony export */   take: () => (/* binding */ take),
/* harmony export */   union: () => (/* binding */ union),
/* harmony export */   unionSingle: () => (/* binding */ unionSingle)
/* harmony export */ });
/**
 * Returns items that exist in target and other.
 */
function intersect(target, other) {
    const result = [];
    for (let i = target.length - 1; i >= 0; --i) {
        if (other.indexOf(target[i]) !== -1) {
            result.push(target[i]);
        }
    }
    return result;
}
/**
 * Return elements exists in target but not exists in other.
 */
function diff(target, other) {
    const result = [];
    for (let i = target.length - 1; i >= 0; --i) {
        const value = target[i];
        if (other.indexOf(value) === -1) {
            result.push(value);
        }
    }
    return result;
}
/**
 * Return an array with only the distinct items in the source.
 */
function distinct(source) {
    const result = [];
    for (let i = 0, len = source.length; i < len; i++) {
        const value = source[i];
        if (result.indexOf(value) === -1) {
            result.push(value);
        }
    }
    return result;
}
/**
 * Pushes content of source onto target,
 * for parts of course that do not already exist in target.
 */
function union(target, source) {
    for (let i = 0, len = source.length; i < len; ++i) {
        unionSingle(target, source[i]);
    }
}
/**
 * Pushes value onto target, if value does not already exist in target.
 */
function unionSingle(target, value) {
    if (target.indexOf(value) < 0) {
        target.push(value);
    }
}
/**
 * Returns an array with a range of items from source,
 * including the startIndex & endIndex.
 */
function range(source, startIndex, endIndex) {
    const result = [];
    for (let i = startIndex; i <= endIndex; ++i) {
        result.push(source[i]);
    }
    return result;
}
/**
 * Returns an array that includes items from source, up to the specified count.
 */
function take(source, count) {
    const result = [];
    for (let i = 0; i < count; ++i) {
        result.push(source[i]);
    }
    return result;
}
function copy(source) {
    return take(source, source.length);
}
/**
  * Returns a value indicating whether the arrays have the same values in the same sequence.
  */
function sequenceEqual(left, right, comparison) {
    // Normalize falsy to null
    if (!left) {
        left = null;
    }
    if (!right) {
        right = null;
    }
    // T can be same as U, and it is possible for left and right to be the same array object...
    if (left === right) {
        return true;
    }
    if (!!left !== !!right) {
        return false;
    }
    const len = left.length;
    if (len !== right.length) {
        return false;
    }
    let i = 0;
    while (i < len && comparison(left[i], right[i])) {
        ++i;
    }
    return i === len;
}
/**
 * Returns null if the specified array is empty.
 * Otherwise returns the specified array.
 */
function emptyToNull(array) {
    if (array && array.length === 0) {
        return null;
    }
    return array;
}
function indexOf(array, predicate) {
    for (let i = 0, len = array.length; i < len; ++i) {
        if (predicate(array[i])) {
            return i;
        }
    }
    return -1;
}
/**
 * Returns a copy of the array rotated by the specified offset.
 */
function rotate(array, offset) {
    if (offset === 0)
        return array.slice();
    const rotated = array.slice(offset);
    Array.prototype.push.apply(rotated, array.slice(0, offset));
    return rotated;
}
function createWithId() {
    return extendWithId([]);
}
function extendWithId(array) {
    const extended = array;
    extended.withId = withId;
    return extended;
}
/**
 * Finds and returns the first item with a matching ID.
 */
function findWithId(array, id) {
    for (let i = 0, len = array.length; i < len; i++) {
        const item = array[i];
        if (item.id === id)
            return item;
    }
}
function withId(id) {
    return findWithId(this, id);
}
function createWithName() {
    return extendWithName([]);
}
function extendWithName(array) {
    const extended = array;
    extended.withName = withName;
    return extended;
}
function findItemWithName(array, name) {
    const index = indexWithName(array, name);
    if (index >= 0)
        return array[index];
}
function indexWithName(array, name) {
    for (let i = 0, len = array.length; i < len; i++) {
        const item = array[i];
        if (item.name === name)
            return i;
    }
    return -1;
}
/**
 * Inserts a number in sorted order into a list of numbers already in sorted order.
 * @returns True if the item was added, false if it already existed.
 */
function insertSorted(list, value) {
    const len = list.length;
    // NOTE: iterate backwards because incoming values tend to be sorted already.
    for (let i = len - 1; i >= 0; i--) {
        const diff = list[i] - value;
        if (diff === 0)
            return false;
        if (diff > 0)
            continue;
        // diff < 0
        list.splice(i + 1, 0, value);
        return true;
    }
    list.unshift(value);
    return true;
}
/**
 * Removes the first occurrence of a value from a list if it exists.
 * @returns True if the value was removed, false if it did not exist in the list.
 */
function removeFirst(list, value) {
    const index = list.indexOf(value);
    if (index < 0)
        return false;
    list.splice(index, 1);
    return true;
}
/**
 * Finds and returns the first item with a matching name.
 */
function withName(name) {
    return findItemWithName(this, name);
}
/**
 * Deletes all items from the array.
 */
function clear(array) {
    if (!array)
        return;
    while (array.length > 0)
        array.pop();
}
function isUndefinedOrEmpty(array) {
    if (!array || array.length === 0) {
        return true;
    }
    return false;
}
function swap(array, firstIndex, secondIndex) {
    const temp = array[firstIndex];
    array[firstIndex] = array[secondIndex];
    array[secondIndex] = temp;
}
function isInArray(array, lookupItem, compareCallback) {
    return array.some(item => compareCallback(item, lookupItem));
}
/** Checks if the given object is an Array, and looking all the way up the prototype chain. */
function isArrayOrInheritedArray(obj) {
    let nextPrototype = obj;
    while (nextPrototype != null) {
        if (Array.isArray(nextPrototype))
            return true;
        nextPrototype = Object.getPrototypeOf(nextPrototype);
    }
    return false;
}
/**
 * Returns true if the specified values array is sorted in an order as determined by the specified compareFunction.
 */
function isSorted(values, compareFunction) {
    const ilen = values.length;
    if (ilen >= 2) {
        for (let i = 1; i < ilen; i++) {
            if (compareFunction(values[i - 1], values[i]) > 0) {
                return false;
            }
        }
    }
    return true;
}
/**
 * Returns true if the specified number values array is sorted in ascending order
 * (or descending order if the specified descendingOrder is truthy).
 */
function isSortedNumeric(values, descendingOrder) {
    const compareFunction = descendingOrder ?
        (a, b) => b - a :
        (a, b) => a - b;
    return isSorted(values, compareFunction);
}
/**
 * Ensures that the given T || T[] is in array form, either returning the array or
 * converting single items into an array of length one.
 */
function ensureArray(value) {
    if (Array.isArray(value)) {
        return value;
    }
    return [value];
}
//# sourceMappingURL=arrayExtensions.js.map

/***/ }),

/***/ 2136:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getBitCount: () => (/* binding */ getBitCount),
/* harmony export */   hasFlag: () => (/* binding */ hasFlag),
/* harmony export */   resetFlag: () => (/* binding */ resetFlag),
/* harmony export */   setFlag: () => (/* binding */ setFlag),
/* harmony export */   toString: () => (/* binding */ toString)
/* harmony export */ });
/* harmony import */ var _double__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7802);
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.

/**
 * Extensions for Enumerations.
 */
/**
 * Gets a value indicating whether the value has the bit flags set.
 */
function hasFlag(value, flag) {
    return (value & flag) === flag;
}
/**
 * Sets a value of a flag without modifying any other flags.
 */
function setFlag(value, flag) {
    return value |= flag;
}
/**
 * Resets a value of a flag without modifying any other flags.
 */
function resetFlag(value, flag) {
    return value &= ~flag;
}
/**
 * According to the TypeScript Handbook, this is safe to do.
 */
function toString(enumType, value) {
    return enumType[value];
}
/**
 * Returns the number of 1's in the specified value that is a set of binary bit flags.
 */
function getBitCount(value) {
    if (!(0,_double__WEBPACK_IMPORTED_MODULE_0__.isInteger)(value))
        return 0;
    let bitCount = 0;
    let shiftingValue = value;
    while (shiftingValue !== 0) {
        if ((shiftingValue & 1) === 1) {
            bitCount++;
        }
        shiftingValue = shiftingValue >>> 1;
    }
    return bitCount;
}
//# sourceMappingURL=enumExtensions.js.map

/***/ }),

/***/ 8981:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   XOR: () => (/* binding */ XOR)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
function XOR(a, b) {
    return (a || b) && !(a && b);
}
//# sourceMappingURL=logicExtensions.js.map

/***/ }),

/***/ 9765:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   run: () => (/* binding */ run)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
/**
 * Runs exec on regex starting from 0 index
 * This is the expected behavior but RegExp actually remember
 * the last index they stopped at (found match at) and will
 * return unexpected results when run in sequence.
 * @param regex - regular expression object
 * @param value - string to search wiht regex
 * @param start - index within value to start regex
 */
function run(regex, value, start) {
    regex.lastIndex = start || 0;
    return regex.exec(value);
}
//# sourceMappingURL=regExpExtensions.js.map

/***/ }),

/***/ 9446:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   endsWith: () => (/* binding */ endsWith)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/**
 * Extensions to String class.
 */
/**
 * Checks if a string ends with a sub-string.
 */
function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
}
//# sourceMappingURL=stringExtensions.js.map

/***/ }),

/***/ 2170:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arrayExtensions: () => (/* reexport module object */ _extensions_arrayExtensions__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   double: () => (/* reexport module object */ _double__WEBPACK_IMPORTED_MODULE_7__),
/* harmony export */   enumExtensions: () => (/* reexport module object */ _extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   jsonComparer: () => (/* reexport module object */ _jsonComparer__WEBPACK_IMPORTED_MODULE_8__),
/* harmony export */   logicExtensions: () => (/* reexport module object */ _extensions_logicExtensions__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   numericSequence: () => (/* reexport module object */ _numericSequence_numericSequence__WEBPACK_IMPORTED_MODULE_5__),
/* harmony export */   numericSequenceRange: () => (/* reexport module object */ _numericSequence_numericSequenceRange__WEBPACK_IMPORTED_MODULE_6__),
/* harmony export */   pixelConverter: () => (/* reexport module object */ _pixelConverter__WEBPACK_IMPORTED_MODULE_9__),
/* harmony export */   prototype: () => (/* reexport module object */ _prototype__WEBPACK_IMPORTED_MODULE_10__),
/* harmony export */   regExpExtensions: () => (/* reexport module object */ _extensions_regExpExtensions__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   stringExtensions: () => (/* reexport module object */ _extensions_stringExtensions__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   textSizeDefaults: () => (/* reexport module object */ _textSizeDefaults__WEBPACK_IMPORTED_MODULE_11__),
/* harmony export */   valueType: () => (/* reexport module object */ _valueType__WEBPACK_IMPORTED_MODULE_12__)
/* harmony export */ });
/* harmony import */ var _extensions_arrayExtensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1085);
/* harmony import */ var _extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2136);
/* harmony import */ var _extensions_logicExtensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8981);
/* harmony import */ var _extensions_regExpExtensions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9765);
/* harmony import */ var _extensions_stringExtensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9446);
/* harmony import */ var _numericSequence_numericSequence__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(99);
/* harmony import */ var _numericSequence_numericSequenceRange__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8489);
/* harmony import */ var _double__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7802);
/* harmony import */ var _jsonComparer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(9289);
/* harmony import */ var _pixelConverter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(4732);
/* harmony import */ var _prototype__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(7281);
/* harmony import */ var _textSizeDefaults__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(1285);
/* harmony import */ var _valueType__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(3434);














//# sourceMappingURL=index.js.map

/***/ }),

/***/ 9289:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   equals: () => (/* binding */ equals)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
/**
 * Performs JSON-style comparison of two objects.
 */
function equals(x, y) {
    if (x === y)
        return true;
    return JSON.stringify(x) === JSON.stringify(y);
}
//# sourceMappingURL=jsonComparer.js.map

/***/ }),

/***/ 99:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NumericSequence: () => (/* binding */ NumericSequence)
/* harmony export */ });
/* harmony import */ var _double__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7802);
/* harmony import */ var _numericSequenceRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8489);
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */


class NumericSequence {
    // eslint-disable-next-line max-lines-per-function
    static calculate(range, expectedCount, maxAllowedMargin, minPower, useZeroRefPoint, steps) {
        const result = new NumericSequence();
        if (expectedCount === undefined)
            expectedCount = 10;
        else
            expectedCount = _double__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(expectedCount, NumericSequence.MIN_COUNT, NumericSequence.MAX_COUNT);
        if (minPower === undefined)
            minPower = _double__WEBPACK_IMPORTED_MODULE_0__.MIN_EXP;
        if (useZeroRefPoint === undefined)
            useZeroRefPoint = false;
        if (maxAllowedMargin === undefined)
            maxAllowedMargin = 1;
        if (steps === undefined)
            steps = [1, 2, 5];
        // Handle single stop case
        if (range.forcedSingleStop) {
            result.interval = range.getSize();
            result.intervalOffset = result.interval - (range.forcedSingleStop - range.min);
            result.min = range.min;
            result.max = range.max;
            result.sequence = [range.forcedSingleStop];
            return result;
        }
        let interval = 0;
        let min = 0;
        let max = 9;
        const canExtendMin = maxAllowedMargin > 0 && !range.hasFixedMin;
        const canExtendMax = maxAllowedMargin > 0 && !range.hasFixedMax;
        const size = range.getSize();
        let exp = _double__WEBPACK_IMPORTED_MODULE_0__.log10(size);
        // Account for Exp of steps
        const stepExp = _double__WEBPACK_IMPORTED_MODULE_0__.log10(steps[0]);
        exp = exp - stepExp;
        // Account for MaxCount
        const expectedCountExp = _double__WEBPACK_IMPORTED_MODULE_0__.log10(expectedCount);
        exp = exp - expectedCountExp;
        // Account for MinPower
        exp = Math.max(exp, minPower - stepExp + 1);
        let count = undefined;
        // Create array of "good looking" numbers
        if (interval !== 0) {
            // If explicit interval is defined - use it instead of the steps array.
            const power = _double__WEBPACK_IMPORTED_MODULE_0__.pow10(exp);
            const roundMin = _double__WEBPACK_IMPORTED_MODULE_0__.floorToPrecision(range.min, power);
            const roundMax = _double__WEBPACK_IMPORTED_MODULE_0__.ceilToPrecision(range.max, power);
            const roundRange = _numericSequenceRange__WEBPACK_IMPORTED_MODULE_1__.NumericSequenceRange.calculateFixedRange(roundMin, roundMax);
            roundRange.shrinkByStep(range, interval);
            min = roundRange.min;
            max = roundRange.max;
            count = Math.floor(roundRange.getSize() / interval);
        }
        else {
            // No interval defined -> find optimal interval
            let dexp;
            for (dexp = 0; dexp < 3; dexp++) {
                const e = exp + dexp;
                const power = _double__WEBPACK_IMPORTED_MODULE_0__.pow10(e);
                const roundMin = _double__WEBPACK_IMPORTED_MODULE_0__.floorToPrecision(range.min, power);
                const roundMax = _double__WEBPACK_IMPORTED_MODULE_0__.ceilToPrecision(range.max, power);
                // Go throught the steps array looking for the smallest step that produces the right interval count.
                const stepsCount = steps.length;
                const stepPower = _double__WEBPACK_IMPORTED_MODULE_0__.pow10(e - 1);
                for (let i = 0; i < stepsCount; i++) {
                    const step = steps[i] * stepPower;
                    const roundRange = _numericSequenceRange__WEBPACK_IMPORTED_MODULE_1__.NumericSequenceRange.calculateFixedRange(roundMin, roundMax, useZeroRefPoint);
                    roundRange.shrinkByStep(range, step);
                    // If the range is based on Data we might need to extend it to provide nice data margins.
                    if (canExtendMin && range.min === roundRange.min && maxAllowedMargin >= 1)
                        roundRange.min -= step;
                    if (canExtendMax && range.max === roundRange.max && maxAllowedMargin >= 1)
                        roundRange.max += step;
                    // Count the intervals
                    count = _double__WEBPACK_IMPORTED_MODULE_0__.ceilWithPrecision(roundRange.getSize() / step, _double__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PRECISION);
                    if (count <= expectedCount || (dexp === 2 && i === stepsCount - 1) || (expectedCount === 1 && count === 2 && (step > range.getSize() || (range.min < 0 && range.max > 0 && step * 2 >= range.getSize())))) {
                        interval = step;
                        min = roundRange.min;
                        max = roundRange.max;
                        break;
                    }
                }
                // Increase the scale power until the interval is found
                if (interval !== 0)
                    break;
            }
        }
        // Avoid extreme count cases (>1000 ticks)
        if (count > expectedCount * 32 || count > NumericSequence.MAX_COUNT) {
            count = Math.min(expectedCount * 32, NumericSequence.MAX_COUNT);
            interval = (max - min) / count;
        }
        result.min = min;
        result.max = max;
        result.interval = interval;
        result.intervalOffset = min - range.min;
        result.maxAllowedMargin = maxAllowedMargin;
        result.canExtendMin = canExtendMin;
        result.canExtendMax = canExtendMax;
        // Fill in the Sequence
        const precision = _double__WEBPACK_IMPORTED_MODULE_0__.getPrecision(interval, 0);
        result.precision = precision;
        const sequence = [];
        let x = _double__WEBPACK_IMPORTED_MODULE_0__.roundToPrecision(min, precision);
        sequence.push(x);
        for (let i = 0; i < count; i++) {
            x = _double__WEBPACK_IMPORTED_MODULE_0__.roundToPrecision(x + interval, precision);
            sequence.push(x);
        }
        result.sequence = sequence;
        result.trimMinMax(range.min, range.max);
        return result;
    }
    /**
     * Calculates the sequence of int numbers which are mapped to the multiples of the units grid.
     * @min - The minimum of the range.
     * @max - The maximum of the range.
     * @maxCount - The max count of intervals.
     * @steps - array of intervals.
     */
    static calculateUnits(min, max, maxCount, steps) {
        // Initialization actions
        maxCount = _double__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(maxCount, NumericSequence.MIN_COUNT, NumericSequence.MAX_COUNT);
        if (min === max) {
            max = min + 1;
        }
        let stepCount = 0;
        let step = 0;
        // Calculate step
        for (let i = 0; i < steps.length; i++) {
            step = steps[i];
            const maxStepCount = _double__WEBPACK_IMPORTED_MODULE_0__.ceilWithPrecision(max / step);
            const minStepCount = _double__WEBPACK_IMPORTED_MODULE_0__.floorWithPrecision(min / step);
            stepCount = maxStepCount - minStepCount;
            if (stepCount <= maxCount) {
                break;
            }
        }
        // Calculate the offset
        let offset = -min;
        offset = offset % step;
        // Create sequence
        const result = new NumericSequence();
        result.sequence = [];
        for (let x = min + offset;; x += step) {
            result.sequence.push(x);
            if (x >= max)
                break;
        }
        result.interval = step;
        result.intervalOffset = offset;
        result.min = result.sequence[0];
        result.max = result.sequence[result.sequence.length - 1];
        return result;
    }
    trimMinMax(min, max) {
        const minMargin = (min - this.min) / this.interval;
        const maxMargin = (this.max - max) / this.interval;
        const marginPrecision = 0.001;
        if (!this.canExtendMin || (minMargin > this.maxAllowedMargin && minMargin > marginPrecision)) {
            this.min = min;
        }
        if (!this.canExtendMax || (maxMargin > this.maxAllowedMargin && maxMargin > marginPrecision)) {
            this.max = max;
        }
    }
}
NumericSequence.MIN_COUNT = 1;
NumericSequence.MAX_COUNT = 1000;
//# sourceMappingURL=numericSequence.js.map

/***/ }),

/***/ 8489:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NumericSequenceRange: () => (/* binding */ NumericSequenceRange),
/* harmony export */   hasValue: () => (/* binding */ hasValue)
/* harmony export */ });
/* harmony import */ var _double__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7802);
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

class NumericSequenceRange {
    _ensureIncludeZero() {
        if (this.includeZero) {
            // fixed min and max has higher priority than includeZero
            if (this.min > 0 && !this.hasFixedMin) {
                this.min = 0;
            }
            if (this.max < 0 && !this.hasFixedMax) {
                this.max = 0;
            }
        }
    }
    _ensureNotEmpty() {
        if (this.min === this.max) {
            if (!this.min) {
                this.min = 0;
                this.max = NumericSequenceRange.DEFAULT_MAX;
                this.hasFixedMin = true;
                this.hasFixedMax = true;
            }
            else {
                // We are dealing with a single data value (includeZero is not set)
                // In order to fix the range we need to extend it in both directions by half of the interval.
                // Interval is calculated based on the number:
                // 1. Integers below 10,000 are extended by 0.5: so the [2006-2006] empty range is extended to [2005.5-2006.5] range and the ForsedSingleStop=2006
                // 2. Other numbers are extended by half of their power: [700,001-700,001] => [650,001-750,001] and the ForsedSingleStop=null as we want the intervals to be calculated to cover the range.
                const value = this.min;
                const exp = _double__WEBPACK_IMPORTED_MODULE_0__.log10(Math.abs(value));
                let step;
                if (exp >= 0 && exp < 4) {
                    step = 0.5;
                    this.forcedSingleStop = value;
                }
                else {
                    step = _double__WEBPACK_IMPORTED_MODULE_0__.pow10(exp) / 2;
                    this.forcedSingleStop = null;
                }
                this.min = value - step;
                this.max = value + step;
            }
        }
    }
    _ensureDirection() {
        if (this.min > this.max) {
            const temp = this.min;
            this.min = this.max;
            this.max = temp;
        }
    }
    getSize() {
        return this.max - this.min;
    }
    shrinkByStep(range, step) {
        let oldCount = this.min / step;
        let newCount = range.min / step;
        let deltaCount = Math.floor(newCount - oldCount);
        this.min += deltaCount * step;
        oldCount = this.max / step;
        newCount = range.max / step;
        deltaCount = Math.ceil(newCount - oldCount);
        this.max += deltaCount * step;
    }
    static calculate(dataMin, dataMax, fixedMin, fixedMax, includeZero) {
        const result = new NumericSequenceRange();
        result.includeZero = includeZero ? true : false;
        result.hasDataRange = hasValue(dataMin) && hasValue(dataMax);
        result.hasFixedMin = hasValue(fixedMin);
        result.hasFixedMax = hasValue(fixedMax);
        dataMin = _double__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(dataMin, NumericSequenceRange.MIN_SUPPORTED_DOUBLE, NumericSequenceRange.MAX_SUPPORTED_DOUBLE);
        dataMax = _double__WEBPACK_IMPORTED_MODULE_0__.ensureInRange(dataMax, NumericSequenceRange.MIN_SUPPORTED_DOUBLE, NumericSequenceRange.MAX_SUPPORTED_DOUBLE);
        // Calculate the range using the min, max, dataRange
        if (result.hasFixedMin && result.hasFixedMax) {
            result.min = fixedMin;
            result.max = fixedMax;
        }
        else if (result.hasFixedMin) {
            result.min = fixedMin;
            result.max = dataMax > fixedMin ? dataMax : fixedMin;
        }
        else if (result.hasFixedMax) {
            result.min = dataMin < fixedMax ? dataMin : fixedMax;
            result.max = fixedMax;
        }
        else if (result.hasDataRange) {
            result.min = dataMin;
            result.max = dataMax;
        }
        else {
            result.min = 0;
            result.max = 0;
        }
        result._ensureIncludeZero();
        result._ensureNotEmpty();
        result._ensureDirection();
        if (result.min === 0) {
            result.hasFixedMin = true; // If the range starts from zero we should prevent extending the intervals into the negative range
        }
        else if (result.max === 0) {
            result.hasFixedMax = true; // If the range ends at zero we should prevent extending the intervals into the positive range
        }
        return result;
    }
    static calculateDataRange(dataMin, dataMax, includeZero) {
        if (!hasValue(dataMin) || !hasValue(dataMax)) {
            return NumericSequenceRange.calculateFixedRange(0, NumericSequenceRange.DEFAULT_MAX);
        }
        else {
            return NumericSequenceRange.calculate(dataMin, dataMax, null, null, includeZero);
        }
    }
    static calculateFixedRange(fixedMin, fixedMax, includeZero) {
        const result = new NumericSequenceRange();
        result.hasDataRange = false;
        result.includeZero = includeZero;
        result.min = fixedMin;
        result.max = fixedMax;
        result._ensureIncludeZero();
        result._ensureNotEmpty();
        result._ensureDirection();
        result.hasFixedMin = true;
        result.hasFixedMax = true;
        return result;
    }
}
NumericSequenceRange.DEFAULT_MAX = 10;
NumericSequenceRange.MIN_SUPPORTED_DOUBLE = -1E307;
NumericSequenceRange.MAX_SUPPORTED_DOUBLE = 1E307;
/** Note: Exported for testability */
function hasValue(value) {
    return value !== undefined && value !== null;
}
//# sourceMappingURL=numericSequenceRange.js.map

/***/ }),

/***/ 4732:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fromPoint: () => (/* binding */ fromPoint),
/* harmony export */   fromPointToPixel: () => (/* binding */ fromPointToPixel),
/* harmony export */   toPoint: () => (/* binding */ toPoint),
/* harmony export */   toString: () => (/* binding */ toString)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
const PxPtRatio = 4 / 3;
const PixelString = "px";
/**
 * Appends 'px' to the end of number value for use as pixel string in styles
 */
function toString(px) {
    return px + PixelString;
}
/**
 * Converts point value (pt) to pixels
 * Returns a string for font-size property
 * e.g. fromPoint(8) => '24px'
 */
function fromPoint(pt) {
    return toString(fromPointToPixel(pt));
}
/**
 * Converts point value (pt) to pixels
 * Returns a number for font-size property
 * e.g. fromPoint(8) => 24px
 */
function fromPointToPixel(pt) {
    return (PxPtRatio * pt);
}
/**
 * Converts pixel value (px) to pt
 * e.g. toPoint(24) => 8
 */
function toPoint(px) {
    return px / PxPtRatio;
}
//# sourceMappingURL=pixelConverter.js.map

/***/ }),

/***/ 7281:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   inherit: () => (/* binding */ inherit),
/* harmony export */   inheritSingle: () => (/* binding */ inheritSingle),
/* harmony export */   overrideArray: () => (/* binding */ overrideArray)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/**
 * Returns a new object with the provided obj as its prototype.
 */
function inherit(obj, extension) {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    function wrapCtor() { }
    wrapCtor.prototype = obj;
    const inherited = new wrapCtor();
    if (extension)
        extension(inherited);
    return inherited;
}
/**
 * Returns a new object with the provided obj as its prototype
 * if, and only if, the prototype has not been previously set
 */
function inheritSingle(obj) {
    const proto = Object.getPrototypeOf(obj);
    if (proto === Object.prototype || proto === Array.prototype)
        obj = inherit(obj);
    return obj;
}
/**
 * Uses the provided callback function to selectively replace contents in the provided array.
 * @return A new array with those values overriden
 * or undefined if no overrides are necessary.
 */
function overrideArray(prototype, override) {
    if (!prototype)
        return;
    let overwritten;
    for (let i = 0, len = prototype.length; i < len; i++) {
        const value = override(prototype[i]);
        if (value) {
            if (!overwritten)
                overwritten = inherit(prototype);
            overwritten[i] = value;
        }
    }
    return overwritten;
}
//# sourceMappingURL=prototype.js.map

/***/ }),

/***/ 1285:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextSizeMax: () => (/* binding */ TextSizeMax),
/* harmony export */   TextSizeMin: () => (/* binding */ TextSizeMin),
/* harmony export */   getScale: () => (/* binding */ getScale)
/* harmony export */ });
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
/**
 * Values are in terms of 'pt'
 * Convert to pixels using PixelConverter.fromPoint
 */
/**
 * Stored in terms of 'pt'
 * Convert to pixels using PixelConverter.fromPoint
 */
const TextSizeMin = 8;
/**
 * Stored in terms of 'pt'
 * Convert to pixels using PixelConverter.fromPoint
 */
const TextSizeMax = 40;
const TextSizeRange = TextSizeMax - TextSizeMin;
/**
 * Returns the percentage of this value relative to the TextSizeMax
 * @param textSize - should be given in terms of 'pt'
 */
function getScale(textSize) {
    return (textSize - TextSizeMin) / TextSizeRange;
}
//# sourceMappingURL=textSizeDefaults.js.map

/***/ }),

/***/ 3434:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtendedType: () => (/* binding */ ExtendedType),
/* harmony export */   FormattingType: () => (/* binding */ FormattingType),
/* harmony export */   GeographyType: () => (/* binding */ GeographyType),
/* harmony export */   MiscellaneousType: () => (/* binding */ MiscellaneousType),
/* harmony export */   PrimitiveType: () => (/* binding */ PrimitiveType),
/* harmony export */   ScriptType: () => (/* binding */ ScriptType),
/* harmony export */   TemporalType: () => (/* binding */ TemporalType),
/* harmony export */   ValueType: () => (/* binding */ ValueType)
/* harmony export */ });
/* harmony import */ var _extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2136);
/* harmony import */ var _jsonComparer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9289);
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
// powerbi.extensibility.utils.type


/** Describes a data value type, including a primitive type and extended type if any (derived from data category). */
class ValueType {
    /** Do not call the ValueType constructor directly. Use the ValueType.fromXXX methods. */
    constructor(underlyingType, category, enumType, variantTypes) {
        this.underlyingType = underlyingType;
        this.category = category;
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Temporal)) {
            this.temporalType = new TemporalType(underlyingType);
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Geography)) {
            this.geographyType = new GeographyType(underlyingType);
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Miscellaneous)) {
            this.miscType = new MiscellaneousType(underlyingType);
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Formatting)) {
            this.formattingType = new FormattingType(underlyingType);
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Enumeration)) {
            this.enumType = enumType;
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Scripting)) {
            this.scriptingType = new ScriptType(underlyingType);
        }
        if (_extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(underlyingType, ExtendedType.Variant)) {
            this.variationTypes = variantTypes;
        }
    }
    /** Creates or retrieves a ValueType object based on the specified ValueTypeDescriptor. */
    static fromDescriptor(descriptor) {
        descriptor = descriptor || {};
        // Simplified primitive types
        if (descriptor.text)
            return ValueType.fromExtendedType(ExtendedType.Text);
        if (descriptor.integer)
            return ValueType.fromExtendedType(ExtendedType.Integer);
        if (descriptor.numeric)
            return ValueType.fromExtendedType(ExtendedType.Double);
        if (descriptor.bool)
            return ValueType.fromExtendedType(ExtendedType.Boolean);
        if (descriptor.dateTime)
            return ValueType.fromExtendedType(ExtendedType.DateTime);
        if (descriptor.duration)
            return ValueType.fromExtendedType(ExtendedType.Duration);
        if (descriptor.binary)
            return ValueType.fromExtendedType(ExtendedType.Binary);
        if (descriptor.none)
            return ValueType.fromExtendedType(ExtendedType.None);
        // Extended types
        if (descriptor.scripting) {
            if (descriptor.scripting.source)
                return ValueType.fromExtendedType(ExtendedType.ScriptSource);
        }
        if (descriptor.enumeration)
            return ValueType.fromEnum(descriptor.enumeration);
        if (descriptor.temporal) {
            if (descriptor.temporal.year)
                return ValueType.fromExtendedType(ExtendedType.Years_Integer);
            if (descriptor.temporal.quarter)
                return ValueType.fromExtendedType(ExtendedType.Quarters_Integer);
            if (descriptor.temporal.month)
                return ValueType.fromExtendedType(ExtendedType.Months_Integer);
            if (descriptor.temporal.day)
                return ValueType.fromExtendedType(ExtendedType.DayOfMonth_Integer);
            if (descriptor.temporal.paddedDateTableDate)
                return ValueType.fromExtendedType(ExtendedType.PaddedDateTableDates);
        }
        if (descriptor.geography) {
            if (descriptor.geography.address)
                return ValueType.fromExtendedType(ExtendedType.Address);
            if (descriptor.geography.city)
                return ValueType.fromExtendedType(ExtendedType.City);
            if (descriptor.geography.continent)
                return ValueType.fromExtendedType(ExtendedType.Continent);
            if (descriptor.geography.country)
                return ValueType.fromExtendedType(ExtendedType.Country);
            if (descriptor.geography.county)
                return ValueType.fromExtendedType(ExtendedType.County);
            if (descriptor.geography.region)
                return ValueType.fromExtendedType(ExtendedType.Region);
            if (descriptor.geography.postalCode)
                return ValueType.fromExtendedType(ExtendedType.PostalCode_Text);
            if (descriptor.geography.stateOrProvince)
                return ValueType.fromExtendedType(ExtendedType.StateOrProvince);
            if (descriptor.geography.place)
                return ValueType.fromExtendedType(ExtendedType.Place);
            if (descriptor.geography.latitude)
                return ValueType.fromExtendedType(ExtendedType.Latitude_Double);
            if (descriptor.geography.longitude)
                return ValueType.fromExtendedType(ExtendedType.Longitude_Double);
        }
        if (descriptor.misc) {
            if (descriptor.misc.image)
                return ValueType.fromExtendedType(ExtendedType.Image);
            if (descriptor.misc.imageUrl)
                return ValueType.fromExtendedType(ExtendedType.ImageUrl);
            if (descriptor.misc.webUrl)
                return ValueType.fromExtendedType(ExtendedType.WebUrl);
            if (descriptor.misc.barcode)
                return ValueType.fromExtendedType(ExtendedType.Barcode_Text);
        }
        if (descriptor.formatting) {
            if (descriptor.formatting.color)
                return ValueType.fromExtendedType(ExtendedType.Color);
            if (descriptor.formatting.formatString)
                return ValueType.fromExtendedType(ExtendedType.FormatString);
            if (descriptor.formatting.alignment)
                return ValueType.fromExtendedType(ExtendedType.Alignment);
            if (descriptor.formatting.labelDisplayUnits)
                return ValueType.fromExtendedType(ExtendedType.LabelDisplayUnits);
            if (descriptor.formatting.fontSize)
                return ValueType.fromExtendedType(ExtendedType.FontSize);
            if (descriptor.formatting.labelDensity)
                return ValueType.fromExtendedType(ExtendedType.LabelDensity);
        }
        if (descriptor.extendedType) {
            return ValueType.fromExtendedType(descriptor.extendedType);
        }
        if (descriptor.operations) {
            if (descriptor.operations.searchEnabled)
                return ValueType.fromExtendedType(ExtendedType.SearchEnabled);
        }
        if (descriptor.variant) {
            const variantTypes = descriptor.variant.map((variantType) => ValueType.fromDescriptor(variantType));
            return ValueType.fromVariant(variantTypes);
        }
        return ValueType.fromExtendedType(ExtendedType.Null);
    }
    /** Advanced: Generally use fromDescriptor instead. Creates or retrieves a ValueType object for the specified ExtendedType. */
    static fromExtendedType(extendedType) {
        extendedType = extendedType || ExtendedType.Null;
        const primitiveType = getPrimitiveType(extendedType), category = getCategoryFromExtendedType(extendedType);
        return ValueType.fromPrimitiveTypeAndCategory(primitiveType, category);
    }
    /** Creates or retrieves a ValueType object for the specified PrimitiveType and data category. */
    static fromPrimitiveTypeAndCategory(primitiveType, category) {
        primitiveType = primitiveType || PrimitiveType.Null;
        category = category || null;
        let id = primitiveType.toString();
        if (category)
            id += "|" + category;
        return ValueType.typeCache[id] || (ValueType.typeCache[id] = new ValueType(toExtendedType(primitiveType, category), category));
    }
    /** Creates a ValueType to describe the given IEnumType. */
    static fromEnum(enumType) {
        return new ValueType(ExtendedType.Enumeration, null, enumType);
    }
    /** Creates a ValueType to describe the given Variant type. */
    static fromVariant(variantTypes) {
        return new ValueType(ExtendedType.Variant, /* category */ null, /* enumType */ null, variantTypes);
    }
    /** Determines if the specified type is compatible from at least one of the otherTypes. */
    static isCompatibleTo(typeDescriptor, otherTypes) {
        const valueType = ValueType.fromDescriptor(typeDescriptor);
        for (const otherType of otherTypes) {
            const otherValueType = ValueType.fromDescriptor(otherType);
            if (otherValueType.isCompatibleFrom(valueType))
                return true;
        }
        return false;
    }
    /** Determines if the instance ValueType is convertable from the 'other' ValueType. */
    isCompatibleFrom(other) {
        const otherPrimitiveType = other.primitiveType;
        if (this === other ||
            this.primitiveType === otherPrimitiveType ||
            otherPrimitiveType === PrimitiveType.Null ||
            // Return true if both types are numbers
            (this.numeric && other.numeric))
            return true;
        return false;
    }
    /**
     * Determines if the instance ValueType is equal to the 'other' ValueType
     * @param {ValueType} other the other ValueType to check equality against
     * @returns True if the instance ValueType is equal to the 'other' ValueType
     */
    equals(other) {
        return (0,_jsonComparer__WEBPACK_IMPORTED_MODULE_1__.equals)(this, other);
    }
    /** Gets the exact primitive type of this ValueType. */
    get primitiveType() {
        return getPrimitiveType(this.underlyingType);
    }
    /** Gets the exact extended type of this ValueType. */
    get extendedType() {
        return this.underlyingType;
    }
    /** Gets the data category string (if any) for this ValueType. */
    get categoryString() {
        return this.category;
    }
    // Simplified primitive types
    /** Indicates whether the type represents text values. */
    get text() {
        return this.primitiveType === PrimitiveType.Text;
    }
    /** Indicates whether the type represents any numeric value. */
    get numeric() {
        return _extensions_enumExtensions__WEBPACK_IMPORTED_MODULE_0__.hasFlag(this.underlyingType, ExtendedType.Numeric);
    }
    /** Indicates whether the type represents integer numeric values. */
    get integer() {
        return this.primitiveType === PrimitiveType.Integer;
    }
    /** Indicates whether the type represents Boolean values. */
    get bool() {
        return this.primitiveType === PrimitiveType.Boolean;
    }
    /** Indicates whether the type represents any date/time values. */
    get dateTime() {
        return this.primitiveType === PrimitiveType.DateTime ||
            this.primitiveType === PrimitiveType.Date ||
            this.primitiveType === PrimitiveType.Time;
    }
    /** Indicates whether the type represents duration values. */
    get duration() {
        return this.primitiveType === PrimitiveType.Duration;
    }
    /** Indicates whether the type represents binary values. */
    get binary() {
        return this.primitiveType === PrimitiveType.Binary;
    }
    /** Indicates whether the type represents none values. */
    get none() {
        return this.primitiveType === PrimitiveType.None;
    }
    // Extended types
    /** Returns an object describing temporal values represented by the type, if it represents a temporal type. */
    get temporal() {
        return this.temporalType;
    }
    /** Returns an object describing geographic values represented by the type, if it represents a geographic type. */
    get geography() {
        return this.geographyType;
    }
    /** Returns an object describing the specific values represented by the type, if it represents a miscellaneous extended type. */
    get misc() {
        return this.miscType;
    }
    /** Returns an object describing the formatting values represented by the type, if it represents a formatting type. */
    get formatting() {
        return this.formattingType;
    }
    /** Returns an object describing the enum values represented by the type, if it represents an enumeration type. */
    get enumeration() {
        return this.enumType;
    }
    get scripting() {
        return this.scriptingType;
    }
    /** Returns an array describing the variant values represented by the type, if it represents an Variant type. */
    get variant() {
        return this.variationTypes;
    }
}
ValueType.typeCache = {};
class ScriptType {
    constructor(underlyingType) {
        this.underlyingType = underlyingType;
    }
    get source() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ScriptSource);
    }
}
class TemporalType {
    constructor(underlyingType) {
        this.underlyingType = underlyingType;
    }
    get year() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Years);
    }
    get quarter() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Quarters);
    }
    get month() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Months);
    }
    get day() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.DayOfMonth);
    }
    get paddedDateTableDate() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.PaddedDateTableDates);
    }
}
class GeographyType {
    constructor(underlyingType) {
        this.underlyingType = underlyingType;
    }
    get address() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Address);
    }
    get city() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.City);
    }
    get continent() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Continent);
    }
    get country() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Country);
    }
    get county() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.County);
    }
    get region() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Region);
    }
    get postalCode() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.PostalCode);
    }
    get stateOrProvince() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.StateOrProvince);
    }
    get place() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Place);
    }
    get latitude() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Latitude);
    }
    get longitude() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Longitude);
    }
}
class MiscellaneousType {
    constructor(underlyingType) {
        this.underlyingType = underlyingType;
    }
    get image() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Image);
    }
    get imageUrl() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ImageUrl);
    }
    get webUrl() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.WebUrl);
    }
    get barcode() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Barcode);
    }
}
class FormattingType {
    constructor(underlyingType) {
        this.underlyingType = underlyingType;
    }
    get color() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Color);
    }
    get formatString() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FormatString);
    }
    get alignment() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Alignment);
    }
    get labelDisplayUnits() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDisplayUnits);
    }
    get fontSize() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FontSize);
    }
    get labelDensity() {
        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDensity);
    }
}
/** Defines primitive value types. Must be consistent with types defined by server conceptual schema. */
var PrimitiveType;
(function (PrimitiveType) {
    PrimitiveType[PrimitiveType["Null"] = 0] = "Null";
    PrimitiveType[PrimitiveType["Text"] = 1] = "Text";
    PrimitiveType[PrimitiveType["Decimal"] = 2] = "Decimal";
    PrimitiveType[PrimitiveType["Double"] = 3] = "Double";
    PrimitiveType[PrimitiveType["Integer"] = 4] = "Integer";
    PrimitiveType[PrimitiveType["Boolean"] = 5] = "Boolean";
    PrimitiveType[PrimitiveType["Date"] = 6] = "Date";
    PrimitiveType[PrimitiveType["DateTime"] = 7] = "DateTime";
    PrimitiveType[PrimitiveType["DateTimeZone"] = 8] = "DateTimeZone";
    PrimitiveType[PrimitiveType["Time"] = 9] = "Time";
    PrimitiveType[PrimitiveType["Duration"] = 10] = "Duration";
    PrimitiveType[PrimitiveType["Binary"] = 11] = "Binary";
    PrimitiveType[PrimitiveType["None"] = 12] = "None";
    PrimitiveType[PrimitiveType["Variant"] = 13] = "Variant";
})(PrimitiveType || (PrimitiveType = {}));
var PrimitiveTypeStrings;
(function (PrimitiveTypeStrings) {
    PrimitiveTypeStrings[PrimitiveTypeStrings["Null"] = 0] = "Null";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Text"] = 1] = "Text";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Decimal"] = 2] = "Decimal";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Double"] = 3] = "Double";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Integer"] = 4] = "Integer";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Boolean"] = 5] = "Boolean";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Date"] = 6] = "Date";
    PrimitiveTypeStrings[PrimitiveTypeStrings["DateTime"] = 7] = "DateTime";
    PrimitiveTypeStrings[PrimitiveTypeStrings["DateTimeZone"] = 8] = "DateTimeZone";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Time"] = 9] = "Time";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Duration"] = 10] = "Duration";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Binary"] = 11] = "Binary";
    PrimitiveTypeStrings[PrimitiveTypeStrings["None"] = 12] = "None";
    PrimitiveTypeStrings[PrimitiveTypeStrings["Variant"] = 13] = "Variant";
})(PrimitiveTypeStrings || (PrimitiveTypeStrings = {}));
/** Defines extended value types, which include primitive types and known data categories constrained to expected primitive types. */
var ExtendedType;
(function (ExtendedType) {
    // Flags (1 << 8-15 range [0xFF00])
    // Important: Enum members must be declared before they are used in TypeScript.
    ExtendedType[ExtendedType["Numeric"] = 256] = "Numeric";
    ExtendedType[ExtendedType["Temporal"] = 512] = "Temporal";
    ExtendedType[ExtendedType["Geography"] = 1024] = "Geography";
    ExtendedType[ExtendedType["Miscellaneous"] = 2048] = "Miscellaneous";
    ExtendedType[ExtendedType["Formatting"] = 4096] = "Formatting";
    ExtendedType[ExtendedType["Scripting"] = 8192] = "Scripting";
    // Primitive types (0-255 range [0xFF] | flags)
    // The member names and base values must match those in PrimitiveType.
    ExtendedType[ExtendedType["Null"] = 0] = "Null";
    ExtendedType[ExtendedType["Text"] = 1] = "Text";
    ExtendedType[ExtendedType["Decimal"] = 258] = "Decimal";
    ExtendedType[ExtendedType["Double"] = 259] = "Double";
    ExtendedType[ExtendedType["Integer"] = 260] = "Integer";
    ExtendedType[ExtendedType["Boolean"] = 5] = "Boolean";
    ExtendedType[ExtendedType["Date"] = 518] = "Date";
    ExtendedType[ExtendedType["DateTime"] = 519] = "DateTime";
    ExtendedType[ExtendedType["DateTimeZone"] = 520] = "DateTimeZone";
    ExtendedType[ExtendedType["Time"] = 521] = "Time";
    ExtendedType[ExtendedType["Duration"] = 10] = "Duration";
    ExtendedType[ExtendedType["Binary"] = 11] = "Binary";
    ExtendedType[ExtendedType["None"] = 12] = "None";
    ExtendedType[ExtendedType["Variant"] = 13] = "Variant";
    // Extended types (0-32767 << 16 range [0xFFFF0000] | corresponding primitive type | flags)
    // Temporal
    ExtendedType[ExtendedType["Years"] = 66048] = "Years";
    ExtendedType[ExtendedType["Years_Text"] = 66049] = "Years_Text";
    ExtendedType[ExtendedType["Years_Integer"] = 66308] = "Years_Integer";
    ExtendedType[ExtendedType["Years_Date"] = 66054] = "Years_Date";
    ExtendedType[ExtendedType["Years_DateTime"] = 66055] = "Years_DateTime";
    ExtendedType[ExtendedType["Months"] = 131584] = "Months";
    ExtendedType[ExtendedType["Months_Text"] = 131585] = "Months_Text";
    ExtendedType[ExtendedType["Months_Integer"] = 131844] = "Months_Integer";
    ExtendedType[ExtendedType["Months_Date"] = 131590] = "Months_Date";
    ExtendedType[ExtendedType["Months_DateTime"] = 131591] = "Months_DateTime";
    ExtendedType[ExtendedType["PaddedDateTableDates"] = 197127] = "PaddedDateTableDates";
    ExtendedType[ExtendedType["Quarters"] = 262656] = "Quarters";
    ExtendedType[ExtendedType["Quarters_Text"] = 262657] = "Quarters_Text";
    ExtendedType[ExtendedType["Quarters_Integer"] = 262916] = "Quarters_Integer";
    ExtendedType[ExtendedType["Quarters_Date"] = 262662] = "Quarters_Date";
    ExtendedType[ExtendedType["Quarters_DateTime"] = 262663] = "Quarters_DateTime";
    ExtendedType[ExtendedType["DayOfMonth"] = 328192] = "DayOfMonth";
    ExtendedType[ExtendedType["DayOfMonth_Text"] = 328193] = "DayOfMonth_Text";
    ExtendedType[ExtendedType["DayOfMonth_Integer"] = 328452] = "DayOfMonth_Integer";
    ExtendedType[ExtendedType["DayOfMonth_Date"] = 328198] = "DayOfMonth_Date";
    ExtendedType[ExtendedType["DayOfMonth_DateTime"] = 328199] = "DayOfMonth_DateTime";
    // Geography
    ExtendedType[ExtendedType["Address"] = 6554625] = "Address";
    ExtendedType[ExtendedType["City"] = 6620161] = "City";
    ExtendedType[ExtendedType["Continent"] = 6685697] = "Continent";
    ExtendedType[ExtendedType["Country"] = 6751233] = "Country";
    ExtendedType[ExtendedType["County"] = 6816769] = "County";
    ExtendedType[ExtendedType["Region"] = 6882305] = "Region";
    ExtendedType[ExtendedType["PostalCode"] = 6947840] = "PostalCode";
    ExtendedType[ExtendedType["PostalCode_Text"] = 6947841] = "PostalCode_Text";
    ExtendedType[ExtendedType["PostalCode_Integer"] = 6948100] = "PostalCode_Integer";
    ExtendedType[ExtendedType["StateOrProvince"] = 7013377] = "StateOrProvince";
    ExtendedType[ExtendedType["Place"] = 7078913] = "Place";
    ExtendedType[ExtendedType["Latitude"] = 7144448] = "Latitude";
    ExtendedType[ExtendedType["Latitude_Decimal"] = 7144706] = "Latitude_Decimal";
    ExtendedType[ExtendedType["Latitude_Double"] = 7144707] = "Latitude_Double";
    ExtendedType[ExtendedType["Longitude"] = 7209984] = "Longitude";
    ExtendedType[ExtendedType["Longitude_Decimal"] = 7210242] = "Longitude_Decimal";
    ExtendedType[ExtendedType["Longitude_Double"] = 7210243] = "Longitude_Double";
    // Miscellaneous
    ExtendedType[ExtendedType["Image"] = 13109259] = "Image";
    ExtendedType[ExtendedType["ImageUrl"] = 13174785] = "ImageUrl";
    ExtendedType[ExtendedType["WebUrl"] = 13240321] = "WebUrl";
    ExtendedType[ExtendedType["Barcode"] = 13305856] = "Barcode";
    ExtendedType[ExtendedType["Barcode_Text"] = 13305857] = "Barcode_Text";
    ExtendedType[ExtendedType["Barcode_Integer"] = 13306116] = "Barcode_Integer";
    // Formatting
    ExtendedType[ExtendedType["Color"] = 19664897] = "Color";
    ExtendedType[ExtendedType["FormatString"] = 19730433] = "FormatString";
    ExtendedType[ExtendedType["Alignment"] = 20058113] = "Alignment";
    ExtendedType[ExtendedType["LabelDisplayUnits"] = 20123649] = "LabelDisplayUnits";
    ExtendedType[ExtendedType["FontSize"] = 20189443] = "FontSize";
    ExtendedType[ExtendedType["LabelDensity"] = 20254979] = "LabelDensity";
    // Enumeration
    ExtendedType[ExtendedType["Enumeration"] = 26214401] = "Enumeration";
    // Scripting
    ExtendedType[ExtendedType["ScriptSource"] = 32776193] = "ScriptSource";
    // NOTE: To avoid confusion, underscores should be used only to delimit primitive type variants of an extended type
    // (e.g. Year_Integer or Latitude_Double above)
    // Operations
    ExtendedType[ExtendedType["SearchEnabled"] = 65541] = "SearchEnabled";
})(ExtendedType || (ExtendedType = {}));
var ExtendedTypeStrings;
(function (ExtendedTypeStrings) {
    ExtendedTypeStrings[ExtendedTypeStrings["Numeric"] = 256] = "Numeric";
    ExtendedTypeStrings[ExtendedTypeStrings["Temporal"] = 512] = "Temporal";
    ExtendedTypeStrings[ExtendedTypeStrings["Geography"] = 1024] = "Geography";
    ExtendedTypeStrings[ExtendedTypeStrings["Miscellaneous"] = 2048] = "Miscellaneous";
    ExtendedTypeStrings[ExtendedTypeStrings["Formatting"] = 4096] = "Formatting";
    ExtendedTypeStrings[ExtendedTypeStrings["Scripting"] = 8192] = "Scripting";
    ExtendedTypeStrings[ExtendedTypeStrings["Null"] = 0] = "Null";
    ExtendedTypeStrings[ExtendedTypeStrings["Text"] = 1] = "Text";
    ExtendedTypeStrings[ExtendedTypeStrings["Decimal"] = 258] = "Decimal";
    ExtendedTypeStrings[ExtendedTypeStrings["Double"] = 259] = "Double";
    ExtendedTypeStrings[ExtendedTypeStrings["Integer"] = 260] = "Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["Boolean"] = 5] = "Boolean";
    ExtendedTypeStrings[ExtendedTypeStrings["Date"] = 518] = "Date";
    ExtendedTypeStrings[ExtendedTypeStrings["DateTime"] = 519] = "DateTime";
    ExtendedTypeStrings[ExtendedTypeStrings["DateTimeZone"] = 520] = "DateTimeZone";
    ExtendedTypeStrings[ExtendedTypeStrings["Time"] = 521] = "Time";
    ExtendedTypeStrings[ExtendedTypeStrings["Duration"] = 10] = "Duration";
    ExtendedTypeStrings[ExtendedTypeStrings["Binary"] = 11] = "Binary";
    ExtendedTypeStrings[ExtendedTypeStrings["None"] = 12] = "None";
    ExtendedTypeStrings[ExtendedTypeStrings["Variant"] = 13] = "Variant";
    ExtendedTypeStrings[ExtendedTypeStrings["Years"] = 66048] = "Years";
    ExtendedTypeStrings[ExtendedTypeStrings["Years_Text"] = 66049] = "Years_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["Years_Integer"] = 66308] = "Years_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["Years_Date"] = 66054] = "Years_Date";
    ExtendedTypeStrings[ExtendedTypeStrings["Years_DateTime"] = 66055] = "Years_DateTime";
    ExtendedTypeStrings[ExtendedTypeStrings["Months"] = 131584] = "Months";
    ExtendedTypeStrings[ExtendedTypeStrings["Months_Text"] = 131585] = "Months_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["Months_Integer"] = 131844] = "Months_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["Months_Date"] = 131590] = "Months_Date";
    ExtendedTypeStrings[ExtendedTypeStrings["Months_DateTime"] = 131591] = "Months_DateTime";
    ExtendedTypeStrings[ExtendedTypeStrings["PaddedDateTableDates"] = 197127] = "PaddedDateTableDates";
    ExtendedTypeStrings[ExtendedTypeStrings["Quarters"] = 262656] = "Quarters";
    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_Text"] = 262657] = "Quarters_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_Integer"] = 262916] = "Quarters_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_Date"] = 262662] = "Quarters_Date";
    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_DateTime"] = 262663] = "Quarters_DateTime";
    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth"] = 328192] = "DayOfMonth";
    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_Text"] = 328193] = "DayOfMonth_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_Integer"] = 328452] = "DayOfMonth_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_Date"] = 328198] = "DayOfMonth_Date";
    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_DateTime"] = 328199] = "DayOfMonth_DateTime";
    ExtendedTypeStrings[ExtendedTypeStrings["Address"] = 6554625] = "Address";
    ExtendedTypeStrings[ExtendedTypeStrings["City"] = 6620161] = "City";
    ExtendedTypeStrings[ExtendedTypeStrings["Continent"] = 6685697] = "Continent";
    ExtendedTypeStrings[ExtendedTypeStrings["Country"] = 6751233] = "Country";
    ExtendedTypeStrings[ExtendedTypeStrings["County"] = 6816769] = "County";
    ExtendedTypeStrings[ExtendedTypeStrings["Region"] = 6882305] = "Region";
    ExtendedTypeStrings[ExtendedTypeStrings["PostalCode"] = 6947840] = "PostalCode";
    ExtendedTypeStrings[ExtendedTypeStrings["PostalCode_Text"] = 6947841] = "PostalCode_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["PostalCode_Integer"] = 6948100] = "PostalCode_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["StateOrProvince"] = 7013377] = "StateOrProvince";
    ExtendedTypeStrings[ExtendedTypeStrings["Place"] = 7078913] = "Place";
    ExtendedTypeStrings[ExtendedTypeStrings["Latitude"] = 7144448] = "Latitude";
    ExtendedTypeStrings[ExtendedTypeStrings["Latitude_Decimal"] = 7144706] = "Latitude_Decimal";
    ExtendedTypeStrings[ExtendedTypeStrings["Latitude_Double"] = 7144707] = "Latitude_Double";
    ExtendedTypeStrings[ExtendedTypeStrings["Longitude"] = 7209984] = "Longitude";
    ExtendedTypeStrings[ExtendedTypeStrings["Longitude_Decimal"] = 7210242] = "Longitude_Decimal";
    ExtendedTypeStrings[ExtendedTypeStrings["Longitude_Double"] = 7210243] = "Longitude_Double";
    ExtendedTypeStrings[ExtendedTypeStrings["Image"] = 13109259] = "Image";
    ExtendedTypeStrings[ExtendedTypeStrings["ImageUrl"] = 13174785] = "ImageUrl";
    ExtendedTypeStrings[ExtendedTypeStrings["WebUrl"] = 13240321] = "WebUrl";
    ExtendedTypeStrings[ExtendedTypeStrings["Barcode"] = 13305856] = "Barcode";
    ExtendedTypeStrings[ExtendedTypeStrings["Barcode_Text"] = 13305857] = "Barcode_Text";
    ExtendedTypeStrings[ExtendedTypeStrings["Barcode_Integer"] = 13306116] = "Barcode_Integer";
    ExtendedTypeStrings[ExtendedTypeStrings["Color"] = 19664897] = "Color";
    ExtendedTypeStrings[ExtendedTypeStrings["FormatString"] = 19730433] = "FormatString";
    ExtendedTypeStrings[ExtendedTypeStrings["Alignment"] = 20058113] = "Alignment";
    ExtendedTypeStrings[ExtendedTypeStrings["LabelDisplayUnits"] = 20123649] = "LabelDisplayUnits";
    ExtendedTypeStrings[ExtendedTypeStrings["FontSize"] = 20189443] = "FontSize";
    ExtendedTypeStrings[ExtendedTypeStrings["LabelDensity"] = 20254979] = "LabelDensity";
    ExtendedTypeStrings[ExtendedTypeStrings["Enumeration"] = 26214401] = "Enumeration";
    ExtendedTypeStrings[ExtendedTypeStrings["ScriptSource"] = 32776193] = "ScriptSource";
    ExtendedTypeStrings[ExtendedTypeStrings["SearchEnabled"] = 65541] = "SearchEnabled";
})(ExtendedTypeStrings || (ExtendedTypeStrings = {}));
const PrimitiveTypeMask = 0xFF;
const PrimitiveTypeWithFlagsMask = 0xFFFF;
const PrimitiveTypeFlagsExcludedMask = 0xFFFF0000;
function getPrimitiveType(extendedType) {
    return extendedType & PrimitiveTypeMask;
}
function isPrimitiveType(extendedType) {
    return (extendedType & PrimitiveTypeWithFlagsMask) === extendedType;
}
function getCategoryFromExtendedType(extendedType) {
    if (isPrimitiveType(extendedType))
        return null;
    let category = ExtendedTypeStrings[extendedType];
    if (category) {
        // Check for ExtendedType declaration without a primitive type.
        // If exists, use it as category (e.g. Longitude rather than Longitude_Double)
        // Otherwise use the ExtendedType declaration with a primitive type (e.g. Address)
        const delimIdx = category.lastIndexOf("_");
        if (delimIdx > 0) {
            const baseCategory = category.slice(0, delimIdx);
            if (ExtendedTypeStrings[baseCategory]) {
                category = baseCategory;
            }
        }
    }
    return category || null;
}
function toExtendedType(primitiveType, category) {
    const primitiveString = PrimitiveTypeStrings[primitiveType];
    let t = ExtendedTypeStrings[primitiveString];
    if (t == null) {
        t = ExtendedType.Null;
    }
    if (primitiveType && category) {
        let categoryType = ExtendedTypeStrings[category];
        if (categoryType) {
            const categoryPrimitiveType = getPrimitiveType(categoryType);
            if (categoryPrimitiveType === PrimitiveType.Null) {
                // Category supports multiple primitive types, check if requested primitive type is supported
                // (note: important to use t here rather than primitiveType as it may include primitive type flags)
                categoryType = t | categoryType;
                if (ExtendedTypeStrings[categoryType]) {
                    t = categoryType;
                }
            }
            else if (categoryPrimitiveType === primitiveType) {
                // Primitive type matches the single supported type for the category
                t = categoryType;
            }
        }
    }
    return t;
}
function matchesExtendedTypeWithAnyPrimitive(a, b) {
    return (a & PrimitiveTypeFlagsExcludedMask) === (b & PrimitiveTypeFlagsExcludedMask);
}
//# sourceMappingURL=valueType.js.map

/***/ }),

/***/ 3400:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAyd/fIM+KdNdvn6dHteZd\nA/KB7bvy+MJUYNSpboLdTxo6uI4+xR68mmaFl4jRkVzu0xSBVTxiGM+FvH6vaFgE\nN0aOOuoFEky/1tJurc5J8jNgW8s+CzJnJcIeVPfa7NhnltyCJ2JgA+xhdtRxvDAw\nkI0NCQCw2/TMM+pUSyIgWB/oHPoPODs2jcFB3fvRl0A91PPGQW6RLcgpyF6zw8cU\nUAqRFmVuCAtJXiHOoffFJ15huwD40W5x3M/TyMc0BuEq6FlkkNN3n735bordjC4r\n4Vy90vCosmXzWDeiJDvf4ln5mZ9GXFSSjXpY/dr6plf62f6Mf0vqy/gTq0YgIsKE\nrqD74t4jB5NmUWEoXvhcSA1oqmKUic7VMgKBXxMHQUM3BmyZhbxAanZm3sb+MGJ3\njk7MHYvhdrykFmIrH8SdWBe3MhwIFuhgMvLUnlugw0WsTBayP4zqERtWAFCo4Yx1\nPSm2Ru3ZXtcRCixbXQN6+HxD/VFRXR/bo+jJFkIjtDw+bzVn4T+PGVQZVfDZCOIj\n9jZUQZrlFtuzLPVPD33zZB1nXMAiONRr7u0WIZHcGrrwU+or8G32cPdwjzWnHi6l\nfoSsG3cgdR8kW/1gQGzJ7TpoNFzrkI4jhGjzbHOsw/ErSwDa/fvlzNBXmFRdruwW\nR2iIMgtkhnI0WHusQsKb41MCAwEAAQ==\n-----END PUBLIC KEY-----\n");

/***/ }),

/***/ 8067:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?><svg id=\"enlighten_svg__Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 180 17\" width=\"180\" height=\"17\"><path d=\"M5.98,3.44C2.24,3.44,0,5.4,0,8.53s2.26,5.08,6.17,5.09c2.19,0,3.89-.51,5.22-1.68l-1.43-1.57c-.98,.79-2.02,1.21-3.65,1.21-2.21,0-3.5-.77-3.74-2.46H11.67c.06-.2,.08-.41,.07-.61,0-3.34-2.32-5.08-5.77-5.08ZM2.69,7.44c.38-1.33,1.57-1.98,3.31-1.98s2.77,.6,3.19,1.95l-6.49,.03ZM20.14,3.48c-1.82,0-3.36,.75-4.13,1.99v-1.66h-2.67V13.24h2.67V7.58c.78-1.34,1.95-1.99,3.36-1.99,1.58,0,2.41,.84,2.41,2.38v5.27h2.67V7.79c0-2.51-1.46-4.31-4.31-4.31Zm6.55,9.75h0s2.67,0,2.67,0V.58h-2.67V13.24ZM33.05,0c-.95,0-1.62,.55-1.62,1.35s.69,1.33,1.62,1.33,1.59-.53,1.59-1.33-.64-1.35-1.59-1.35Zm-1.31,13.24h2.67V3.81h-2.67V13.24Zm13.59-7.87c-.88-1.21-2.38-1.88-4.17-1.88-3.1,0-5.08,1.9-5.08,4.92s1.98,4.91,5.08,4.91c1.69,0,3.29-.67,4.17-1.86v.79c0,1.78-1.24,2.65-3.6,2.65-1.65,0-3.03-.41-3.91-.97l-.79,1.93c1.14,.7,3.28,1.15,5,1.15,2.93,0,5.98-1.33,5.98-5.2V3.81h-2.67v1.55Zm.02,4.15c-.38,.56-.89,1.01-1.5,1.31-.6,.31-1.27,.45-1.95,.43-2.09,0-3.24-1.06-3.24-2.86s1.15-2.86,3.24-2.86c.68-.03,1.35,.12,1.95,.42,.6,.3,1.12,.76,1.49,1.32v2.22Zm11.78-6.03c-1.83,0-3.36,.75-4.14,1.99V.58h-2.67V13.24h2.67V7.58c.78-1.34,1.95-1.99,3.36-1.99,1.59,0,2.41,.84,2.41,2.38v5.27h2.67V7.78h0c0-2.51-1.46-4.3-4.31-4.3Zm11.46,7.91c-.95,0-1.67-.5-1.67-1.45V5.81h3.91v-1.99h-3.91V1.63h-2.67V3.81h-1.76v1.99h1.76v4.61c0,2.12,1.54,3.2,3.55,3.2,1.1,0,2.18-.32,3.12-.91l-.55-1.8c-.54,.3-1.15,.47-1.77,.5Zm8.88-7.95c-3.73,0-5.97,1.96-5.97,5.1s2.26,5.08,6.16,5.08c2.19,0,3.89-.51,5.22-1.67l-1.43-1.56c-.98,.79-2.02,1.21-3.65,1.21-2.2,0-3.49-.77-3.74-2.46h9.1c.06-.2,.08-.41,.07-.61,0-3.34-2.32-5.08-5.77-5.08Zm-3.28,4c.38-1.33,1.57-1.98,3.31-1.98s2.77,.6,3.19,1.95l-6.49,.03Zm17.45-3.96c-1.83,0-3.36,.75-4.13,1.99v-1.66h-2.67V13.24h2.67V7.58c.77-1.34,1.95-1.99,3.36-1.99,1.59,0,2.41,.84,2.41,2.38v5.27h2.67V7.79c0-2.51-1.46-4.31-4.31-4.31Z\" style=\"fill:#fff\"/><path d=\"M111.9,5.36c-1.02-1.25-2.63-1.95-4.52-1.95-3.25,0-5.35,2.04-5.35,5.19s2.1,5.18,5.35,5.18c1.89,0,3.5-.7,4.52-1.95v1.61h1.28V.38h-1.28V5.36Zm0,4.83c-.91,1.57-2.41,2.4-4.34,2.4-2.69,0-4.23-1.45-4.23-3.99s1.58-4.01,4.23-4.01c1.94,0,3.44,.83,4.34,2.4v3.19Zm9.13-6.78c-3.53,0-5.73,1.99-5.73,5.19s2.21,5.19,5.76,5.19c2.3,0,3.85-.53,5.18-1.76l.15-.14-.85-.91-.15,.14c-1.13,1.07-2.37,1.5-4.29,1.5-2.79,0-4.42-1.38-4.5-3.81h9.95l.04-.14c.03-.08,.04-.17,.03-.24-.05-3.15-2.15-5.04-5.6-5.04Zm-4.36,4.27c.35-1.99,1.93-3.12,4.37-3.12s3.89,1.11,4.26,3.12h-8.63Zm16.56,.18c-2.36-.19-3.93-.53-3.93-1.58,0-1.27,2.09-1.73,3.57-1.73h0c1.61,.02,2.91,.49,3.84,1.4l.14,.14,.88-.87-.15-.14c-1.14-1.06-2.85-1.66-4.67-1.66-2.92,0-4.89,1.17-4.89,2.9,0,2,2.48,2.48,4.9,2.69,2.87,.27,3.99,.75,3.99,1.74,0,1.16-1.46,1.9-3.73,1.9-1.94,0-3.48-.59-4.58-1.77l-.13-.14-.91,.77,.14,.15c1.29,1.38,3.23,2.13,5.45,2.13,3.05,0,5.02-1.23,5.02-3.12,0-2.15-2.83-2.63-4.96-2.81Zm42.02,0c-2.36-.19-3.93-.53-3.93-1.58,0-1.27,2.08-1.73,3.56-1.73h0c1.61,.02,2.91,.49,3.84,1.4l.14,.14,.87-.87-.15-.14c-1.14-1.05-2.84-1.66-4.67-1.66-2.92,0-4.89,1.17-4.89,2.9,0,2,2.48,2.48,4.9,2.69,2.87,.27,3.99,.75,3.99,1.74,0,1.16-1.46,1.9-3.73,1.9-1.94,0-3.48-.59-4.58-1.77l-.13-.14-.91,.77,.14,.15c1.29,1.38,3.23,2.13,5.45,2.13,3.05,0,5.02-1.23,5.02-3.12,0-2.15-2.82-2.63-4.95-2.81Zm-35.12,5.57h1.28s0-9.69,0-9.69h-1.28V13.44Zm23.18-10.04c-1.87,0-3.45,.73-4.43,2.02v-1.67h-1.28V13.44h1.28l-.02-6.2c.82-1.73,2.31-2.64,4.31-2.64,2.28,0,3.44,1.18,3.44,3.51v5.33h1.28v-5.39c0-2.95-1.67-4.65-4.58-4.65Zm-22.5-2.52h-.1c-.22,0-.42,.08-.58,.22-.18,.16-.28,.39-.29,.63,0,.24,.11,.47,.28,.63,.16,.15,.38,.23,.62,.23,0,0,.06,0,.06,0,.35,0,.66-.21,.8-.52,.09-.22,.09-.47,0-.69-.14-.31-.45-.51-.79-.51Zm12.63,4.48c-1.02-1.25-2.63-1.95-4.52-1.95-3.25,0-5.36,2.04-5.36,5.19s2.1,5.18,5.35,5.18c1.83,0,3.5-.74,4.52-1.96v.63c0,2.3-1.54,3.56-4.33,3.56h-.1c-1.33,0-2.6-.4-3.69-1.14l-.17-.12-.65,1,.15,.11c1.15,.84,2.85,1.34,4.53,1.34,3.47,0,5.54-1.8,5.54-4.82V3.75s-1.28,0-1.28,0v1.61Zm-4.35,7.23c-2.69,0-4.23-1.45-4.23-3.99s1.58-4.01,4.23-4.01c1.95,0,3.45,.83,4.35,2.4l.02,3.15c-.88,1.6-2.4,2.45-4.37,2.45Z\" style=\"fill:#fff\"/></svg>");

/***/ }),

/***/ 4448:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;
/* provided dependency */ var window = __webpack_require__(6738);
/** @license React v16.14.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
var aa=__webpack_require__(7294),n=__webpack_require__(7418),r=__webpack_require__(3840);function u(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa)throw Error(u(227));
function ba(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var da=!1,ea=null,fa=!1,ha=null,ia={onError:function(a){da=!0;ea=a}};function ja(a,b,c,d,e,f,g,h,k){da=!1;ea=null;ba.apply(ia,arguments)}function ka(a,b,c,d,e,f,g,h,k){ja.apply(this,arguments);if(da){if(da){var l=ea;da=!1;ea=null}else throw Error(u(198));fa||(fa=!0,ha=l)}}var la=null,ma=null,na=null;
function oa(a,b,c){var d=a.type||"unknown-event";a.currentTarget=na(c);ka(d,b,void 0,a);a.currentTarget=null}var pa=null,qa={};
function ra(){if(pa)for(var a in qa){var b=qa[a],c=pa.indexOf(a);if(!(-1<c))throw Error(u(96,a));if(!sa[c]){if(!b.extractEvents)throw Error(u(97,a));sa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;if(ta.hasOwnProperty(h))throw Error(u(99,h));ta[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ua(k[e],g,h);e=!0}else f.registrationName?(ua(f.registrationName,g,h),e=!0):e=!1;if(!e)throw Error(u(98,d,a));}}}}
function ua(a,b,c){if(va[a])throw Error(u(100,a));va[a]=b;wa[a]=b.eventTypes[c].dependencies}var sa=[],ta={},va={},wa={};function xa(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];if(!qa.hasOwnProperty(c)||qa[c]!==d){if(qa[c])throw Error(u(102,c));qa[c]=d;b=!0}}b&&ra()}var ya=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),za=null,Aa=null,Ba=null;
function Ca(a){if(a=ma(a)){if("function"!==typeof za)throw Error(u(280));var b=a.stateNode;b&&(b=la(b),za(a.stateNode,a.type,b))}}function Da(a){Aa?Ba?Ba.push(a):Ba=[a]:Aa=a}function Ea(){if(Aa){var a=Aa,b=Ba;Ba=Aa=null;Ca(a);if(b)for(a=0;a<b.length;a++)Ca(b[a])}}function Fa(a,b){return a(b)}function Ga(a,b,c,d,e){return a(b,c,d,e)}function Ha(){}var Ia=Fa,Ja=!1,Ka=!1;function La(){if(null!==Aa||null!==Ba)Ha(),Ea()}
function Ma(a,b,c){if(Ka)return a(b,c);Ka=!0;try{return Ia(a,b,c)}finally{Ka=!1,La()}}var Na=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Oa=Object.prototype.hasOwnProperty,Pa={},Qa={};
function Ra(a){if(Oa.call(Qa,a))return!0;if(Oa.call(Pa,a))return!1;if(Na.test(a))return Qa[a]=!0;Pa[a]=!0;return!1}function Sa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}
function Ta(a,b,c,d){if(null===b||"undefined"===typeof b||Sa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f}var C={};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){C[a]=new v(a,0,!1,a,null,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];C[b]=new v(b,1,!1,a[1],null,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){C[a]=new v(a,2,!1,a.toLowerCase(),null,!1)});
["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){C[a]=new v(a,2,!1,a,null,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){C[a]=new v(a,3,!1,a.toLowerCase(),null,!1)});
["checked","multiple","muted","selected"].forEach(function(a){C[a]=new v(a,3,!0,a,null,!1)});["capture","download"].forEach(function(a){C[a]=new v(a,4,!1,a,null,!1)});["cols","rows","size","span"].forEach(function(a){C[a]=new v(a,6,!1,a,null,!1)});["rowSpan","start"].forEach(function(a){C[a]=new v(a,5,!1,a.toLowerCase(),null,!1)});var Ua=/[\-:]([a-z])/g;function Va(a){return a[1].toUpperCase()}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(Ua,
Va);C[b]=new v(b,1,!1,a,null,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1)});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1)});["tabIndex","crossOrigin"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!1)});
C.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0);["src","href","action","formAction"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!0)});var Wa=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Wa.hasOwnProperty("ReactCurrentDispatcher")||(Wa.ReactCurrentDispatcher={current:null});Wa.hasOwnProperty("ReactCurrentBatchConfig")||(Wa.ReactCurrentBatchConfig={suspense:null});
function Xa(a,b,c,d){var e=C.hasOwnProperty(b)?C[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(Ta(b,c,e,d)&&(c=null),d||null===e?Ra(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}
var Ya=/^(.*)[\\\/]/,E="function"===typeof Symbol&&Symbol.for,Za=E?Symbol.for("react.element"):60103,$a=E?Symbol.for("react.portal"):60106,ab=E?Symbol.for("react.fragment"):60107,bb=E?Symbol.for("react.strict_mode"):60108,cb=E?Symbol.for("react.profiler"):60114,db=E?Symbol.for("react.provider"):60109,eb=E?Symbol.for("react.context"):60110,fb=E?Symbol.for("react.concurrent_mode"):60111,gb=E?Symbol.for("react.forward_ref"):60112,hb=E?Symbol.for("react.suspense"):60113,ib=E?Symbol.for("react.suspense_list"):
60120,jb=E?Symbol.for("react.memo"):60115,kb=E?Symbol.for("react.lazy"):60116,lb=E?Symbol.for("react.block"):60121,mb="function"===typeof Symbol&&Symbol.iterator;function nb(a){if(null===a||"object"!==typeof a)return null;a=mb&&a[mb]||a["@@iterator"];return"function"===typeof a?a:null}function ob(a){if(-1===a._status){a._status=0;var b=a._ctor;b=b();a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}}
function pb(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ab:return"Fragment";case $a:return"Portal";case cb:return"Profiler";case bb:return"StrictMode";case hb:return"Suspense";case ib:return"SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case eb:return"Context.Consumer";case db:return"Context.Provider";case gb:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+")":
"ForwardRef");case jb:return pb(a.type);case lb:return pb(a.render);case kb:if(a=1===a._status?a._result:null)return pb(a)}return null}function qb(a){var b="";do{a:switch(a.tag){case 3:case 4:case 6:case 7:case 10:case 9:var c="";break a;default:var d=a._debugOwner,e=a._debugSource,f=pb(a.type);c=null;d&&(c=pb(d.type));d=f;f="";e?f=" (at "+e.fileName.replace(Ya,"")+":"+e.lineNumber+")":c&&(f=" (created by "+c+")");c="\n    in "+(d||"Unknown")+f}b+=c;a=a.return}while(a);return b}
function rb(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}function sb(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
function tb(a){var b=sb(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=
null;delete a[b]}}}}function xb(a){a._valueTracker||(a._valueTracker=tb(a))}function yb(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=sb(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function zb(a,b){var c=b.checked;return n({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}
function Ab(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=rb(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function Bb(a,b){b=b.checked;null!=b&&Xa(a,"checked",b,!1)}
function Cb(a,b){Bb(a,b);var c=rb(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Db(a,b.type,c):b.hasOwnProperty("defaultValue")&&Db(a,b.type,rb(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}
function Eb(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}
function Db(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}function Fb(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function Gb(a,b){a=n({children:void 0},b);if(b=Fb(b.children))a.children=b;return a}
function Hb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+rb(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}
function Ib(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(u(91));return n({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function Jb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(u(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(u(93));c=c[0]}b=c}null==b&&(b="");c=b}a._wrapperState={initialValue:rb(c)}}
function Kb(a,b){var c=rb(b.value),d=rb(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function Lb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b)}var Mb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
function Nb(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ob(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?Nb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
var Pb,Qb=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Mb.svg||"innerHTML"in a)a.innerHTML=b;else{Pb=Pb||document.createElement("div");Pb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=Pb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});
function Rb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}function Sb(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Tb={animationend:Sb("Animation","AnimationEnd"),animationiteration:Sb("Animation","AnimationIteration"),animationstart:Sb("Animation","AnimationStart"),transitionend:Sb("Transition","TransitionEnd")},Ub={},Vb={};
ya&&(Vb=document.createElement("div").style,"AnimationEvent"in window||(delete Tb.animationend.animation,delete Tb.animationiteration.animation,delete Tb.animationstart.animation),"TransitionEvent"in window||delete Tb.transitionend.transition);function Wb(a){if(Ub[a])return Ub[a];if(!Tb[a])return a;var b=Tb[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Vb)return Ub[a]=b[c];return a}
var Xb=Wb("animationend"),Yb=Wb("animationiteration"),Zb=Wb("animationstart"),$b=Wb("transitionend"),ac="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),bc=new ("function"===typeof WeakMap?WeakMap:Map);function cc(a){var b=bc.get(a);void 0===b&&(b=new Map,bc.set(a,b));return b}
function dc(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.effectTag&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function ec(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function fc(a){if(dc(a)!==a)throw Error(u(188));}
function gc(a){var b=a.alternate;if(!b){b=dc(a);if(null===b)throw Error(u(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return fc(e),a;if(f===d)return fc(e),b;f=f.sibling}throw Error(u(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===
c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(u(189));}}if(c.alternate!==d)throw Error(u(190));}if(3!==c.tag)throw Error(u(188));return c.stateNode.current===c?a:b}function hc(a){a=gc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}
function ic(a,b){if(null==b)throw Error(u(30));if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function jc(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var kc=null;
function lc(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)oa(a,b[d],c[d]);else b&&oa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function mc(a){null!==a&&(kc=ic(kc,a));a=kc;kc=null;if(a){jc(a,lc);if(kc)throw Error(u(95));if(fa)throw a=ha,fa=!1,ha=null,a;}}
function nc(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function oc(a){if(!ya)return!1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}var pc=[];function qc(a){a.topLevelType=null;a.nativeEvent=null;a.targetInst=null;a.ancestors.length=0;10>pc.length&&pc.push(a)}
function rc(a,b,c,d){if(pc.length){var e=pc.pop();e.topLevelType=a;e.eventSystemFlags=d;e.nativeEvent=b;e.targetInst=c;return e}return{topLevelType:a,eventSystemFlags:d,nativeEvent:b,targetInst:c,ancestors:[]}}
function sc(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d=c;if(3===d.tag)d=d.stateNode.containerInfo;else{for(;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo}if(!d)break;b=c.tag;5!==b&&6!==b||a.ancestors.push(c);c=tc(d)}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=nc(a.nativeEvent);d=a.topLevelType;var f=a.nativeEvent,g=a.eventSystemFlags;0===c&&(g|=64);for(var h=null,k=0;k<sa.length;k++){var l=sa[k];l&&(l=l.extractEvents(d,b,f,e,g))&&(h=
ic(h,l))}mc(h)}}function uc(a,b,c){if(!c.has(a)){switch(a){case "scroll":vc(b,"scroll",!0);break;case "focus":case "blur":vc(b,"focus",!0);vc(b,"blur",!0);c.set("blur",null);c.set("focus",null);break;case "cancel":case "close":oc(a)&&vc(b,a,!0);break;case "invalid":case "submit":case "reset":break;default:-1===ac.indexOf(a)&&F(a,b)}c.set(a,null)}}
var wc,xc,yc,zc=!1,Ac=[],Bc=null,Cc=null,Dc=null,Ec=new Map,Fc=new Map,Gc=[],Hc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ic="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");
function Jc(a,b){var c=cc(b);Hc.forEach(function(a){uc(a,b,c)});Ic.forEach(function(a){uc(a,b,c)})}function Kc(a,b,c,d,e){return{blockedOn:a,topLevelType:b,eventSystemFlags:c|32,nativeEvent:e,container:d}}
function Lc(a,b){switch(a){case "focus":case "blur":Bc=null;break;case "dragenter":case "dragleave":Cc=null;break;case "mouseover":case "mouseout":Dc=null;break;case "pointerover":case "pointerout":Ec.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Fc.delete(b.pointerId)}}function Mc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=Kc(b,c,d,e,f),null!==b&&(b=Nc(b),null!==b&&xc(b)),a;a.eventSystemFlags|=d;return a}
function Oc(a,b,c,d,e){switch(b){case "focus":return Bc=Mc(Bc,a,b,c,d,e),!0;case "dragenter":return Cc=Mc(Cc,a,b,c,d,e),!0;case "mouseover":return Dc=Mc(Dc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Ec.set(f,Mc(Ec.get(f)||null,a,b,c,d,e));return!0;case "gotpointercapture":return f=e.pointerId,Fc.set(f,Mc(Fc.get(f)||null,a,b,c,d,e)),!0}return!1}
function Pc(a){var b=tc(a.target);if(null!==b){var c=dc(b);if(null!==c)if(b=c.tag,13===b){if(b=ec(c),null!==b){a.blockedOn=b;r.unstable_runWithPriority(a.priority,function(){yc(c)});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}function Qc(a){if(null!==a.blockedOn)return!1;var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);if(null!==b){var c=Nc(b);null!==c&&xc(c);a.blockedOn=b;return!1}return!0}
function Sc(a,b,c){Qc(a)&&c.delete(b)}function Tc(){for(zc=!1;0<Ac.length;){var a=Ac[0];if(null!==a.blockedOn){a=Nc(a.blockedOn);null!==a&&wc(a);break}var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);null!==b?a.blockedOn=b:Ac.shift()}null!==Bc&&Qc(Bc)&&(Bc=null);null!==Cc&&Qc(Cc)&&(Cc=null);null!==Dc&&Qc(Dc)&&(Dc=null);Ec.forEach(Sc);Fc.forEach(Sc)}function Uc(a,b){a.blockedOn===b&&(a.blockedOn=null,zc||(zc=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Tc)))}
function Vc(a){function b(b){return Uc(b,a)}if(0<Ac.length){Uc(Ac[0],a);for(var c=1;c<Ac.length;c++){var d=Ac[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Bc&&Uc(Bc,a);null!==Cc&&Uc(Cc,a);null!==Dc&&Uc(Dc,a);Ec.forEach(b);Fc.forEach(b);for(c=0;c<Gc.length;c++)d=Gc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Gc.length&&(c=Gc[0],null===c.blockedOn);)Pc(c),null===c.blockedOn&&Gc.shift()}
var Wc={},Yc=new Map,Zc=new Map,$c=["abort","abort",Xb,"animationEnd",Yb,"animationIteration",Zb,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking",
"seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",$b,"transitionEnd","waiting","waiting"];function ad(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1],f="on"+(e[0].toUpperCase()+e.slice(1));f={phasedRegistrationNames:{bubbled:f,captured:f+"Capture"},dependencies:[d],eventPriority:b};Zc.set(d,b);Yc.set(d,f);Wc[e]=f}}
ad("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0);
ad("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);ad($c,2);for(var bd="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),cd=0;cd<bd.length;cd++)Zc.set(bd[cd],0);
var dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function F(a,b){vc(b,a,!1)}function vc(a,b,c){var d=Zc.get(b);switch(void 0===d?2:d){case 0:d=gd.bind(null,b,1,a);break;case 1:d=hd.bind(null,b,1,a);break;default:d=id.bind(null,b,1,a)}c?a.addEventListener(b,d,!0):a.addEventListener(b,d,!1)}function gd(a,b,c,d){Ja||Ha();var e=id,f=Ja;Ja=!0;try{Ga(e,a,b,c,d)}finally{(Ja=f)||La()}}function hd(a,b,c,d){ed(dd,id.bind(null,a,b,c,d))}
function id(a,b,c,d){if(fd)if(0<Ac.length&&-1<Hc.indexOf(a))a=Kc(null,a,b,c,d),Ac.push(a);else{var e=Rc(a,b,c,d);if(null===e)Lc(a,d);else if(-1<Hc.indexOf(a))a=Kc(e,a,b,c,d),Ac.push(a);else if(!Oc(e,a,b,c,d)){Lc(a,d);a=rc(a,d,null,b);try{Ma(sc,a)}finally{qc(a)}}}}
function Rc(a,b,c,d){c=nc(d);c=tc(c);if(null!==c){var e=dc(c);if(null===e)c=null;else{var f=e.tag;if(13===f){c=ec(e);if(null!==c)return c;c=null}else if(3===f){if(e.stateNode.hydrate)return 3===e.tag?e.stateNode.containerInfo:null;c=null}else e!==c&&(c=null)}}a=rc(a,d,c,b);try{Ma(sc,a)}finally{qc(a)}return null}
var jd={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},kd=["Webkit","ms","Moz","O"];Object.keys(jd).forEach(function(a){kd.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);jd[b]=jd[a]})});function ld(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||jd.hasOwnProperty(a)&&jd[a]?(""+b).trim():b+"px"}
function md(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=ld(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var nd=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
function od(a,b){if(b){if(nd[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(u(137,a,""));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(u(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(u(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(u(62,""));}}
function pd(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}var qd=Mb.html;function rd(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=cc(a);b=wa[b];for(var d=0;d<b.length;d++)uc(b[d],a,c)}function sd(){}
function td(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function ud(a){for(;a&&a.firstChild;)a=a.firstChild;return a}function vd(a,b){var c=ud(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=ud(c)}}
function wd(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?wd(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}function xd(){for(var a=window,b=td();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=td(a.document)}return b}
function yd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}var zd="$",Ad="/$",Bd="$?",Cd="$!",Dd=null,Ed=null;function Fd(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}
function Gd(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var Hd="function"===typeof setTimeout?setTimeout:void 0,Id="function"===typeof clearTimeout?clearTimeout:void 0;function Jd(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}
function Kd(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(c===zd||c===Cd||c===Bd){if(0===b)return a;b--}else c===Ad&&b++}a=a.previousSibling}return null}var Ld=Math.random().toString(36).slice(2),Md="__reactInternalInstance$"+Ld,Nd="__reactEventHandlers$"+Ld,Od="__reactContainere$"+Ld;
function tc(a){var b=a[Md];if(b)return b;for(var c=a.parentNode;c;){if(b=c[Od]||c[Md]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Kd(a);null!==a;){if(c=a[Md])return c;a=Kd(a)}return b}a=c;c=a.parentNode}return null}function Nc(a){a=a[Md]||a[Od];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function Pd(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(u(33));}function Qd(a){return a[Nd]||null}
function Rd(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}
function Sd(a,b){var c=a.stateNode;if(!c)return null;var d=la(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&"function"!==typeof c)throw Error(u(231,
b,typeof c));return c}function Td(a,b,c){if(b=Sd(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a)}function Ud(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Rd(b);for(b=c.length;0<b--;)Td(c[b],"captured",a);for(b=0;b<c.length;b++)Td(c[b],"bubbled",a)}}
function Vd(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Sd(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a))}function Wd(a){a&&a.dispatchConfig.registrationName&&Vd(a._targetInst,null,a)}function Xd(a){jc(a,Ud)}var Yd=null,Zd=null,$d=null;
function ae(){if($d)return $d;var a,b=Zd,c=b.length,d,e="value"in Yd?Yd.value:Yd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return $d=e.slice(a,1<d?1-d:void 0)}function be(){return!0}function ce(){return!1}
function G(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?be:ce;this.isPropagationStopped=ce;return this}
n(G.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=be)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=be)},persist:function(){this.isPersistent=be},isPersistent:ce,destructor:function(){var a=this.constructor.Interface,
b;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=ce;this._dispatchInstances=this._dispatchListeners=null}});G.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
G.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;n(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=n({},d.Interface,a);c.extend=d.extend;de(c);return c};de(G);function ee(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}
function fe(a){if(!(a instanceof this))throw Error(u(279));a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function de(a){a.eventPool=[];a.getPooled=ee;a.release=fe}var ge=G.extend({data:null}),he=G.extend({data:null}),ie=[9,13,27,32],je=ya&&"CompositionEvent"in window,ke=null;ya&&"documentMode"in document&&(ke=document.documentMode);
var le=ya&&"TextEvent"in window&&!ke,me=ya&&(!je||ke&&8<ke&&11>=ke),ne=String.fromCharCode(32),oe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},pe=!1;
function qe(a,b){switch(a){case "keyup":return-1!==ie.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return!0;default:return!1}}function re(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var se=!1;function te(a,b){switch(a){case "compositionend":return re(b);case "keypress":if(32!==b.which)return null;pe=!0;return ne;case "textInput":return a=b.data,a===ne&&pe?null:a;default:return null}}
function ue(a,b){if(se)return"compositionend"===a||!je&&qe(a,b)?(a=ae(),$d=Zd=Yd=null,se=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return me&&"ko"!==b.locale?null:b.data;default:return null}}
var ve={eventTypes:oe,extractEvents:function(a,b,c,d){var e;if(je)b:{switch(a){case "compositionstart":var f=oe.compositionStart;break b;case "compositionend":f=oe.compositionEnd;break b;case "compositionupdate":f=oe.compositionUpdate;break b}f=void 0}else se?qe(a,c)&&(f=oe.compositionEnd):"keydown"===a&&229===c.keyCode&&(f=oe.compositionStart);f?(me&&"ko"!==c.locale&&(se||f!==oe.compositionStart?f===oe.compositionEnd&&se&&(e=ae()):(Yd=d,Zd="value"in Yd?Yd.value:Yd.textContent,se=!0)),f=ge.getPooled(f,
b,c,d),e?f.data=e:(e=re(c),null!==e&&(f.data=e)),Xd(f),e=f):e=null;(a=le?te(a,c):ue(a,c))?(b=he.getPooled(oe.beforeInput,b,c,d),b.data=a,Xd(b)):b=null;return null===e?b:null===b?e:[e,b]}},we={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function xe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!we[a.type]:"textarea"===b?!0:!1}
var ye={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function ze(a,b,c){a=G.getPooled(ye.change,a,b,c);a.type="change";Da(c);Xd(a);return a}var Ae=null,Be=null;function Ce(a){mc(a)}function De(a){var b=Pd(a);if(yb(b))return a}function Ee(a,b){if("change"===a)return b}var Fe=!1;ya&&(Fe=oc("input")&&(!document.documentMode||9<document.documentMode));
function Ge(){Ae&&(Ae.detachEvent("onpropertychange",He),Be=Ae=null)}function He(a){if("value"===a.propertyName&&De(Be))if(a=ze(Be,a,nc(a)),Ja)mc(a);else{Ja=!0;try{Fa(Ce,a)}finally{Ja=!1,La()}}}function Ie(a,b,c){"focus"===a?(Ge(),Ae=b,Be=c,Ae.attachEvent("onpropertychange",He)):"blur"===a&&Ge()}function Je(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return De(Be)}function Ke(a,b){if("click"===a)return De(b)}function Le(a,b){if("input"===a||"change"===a)return De(b)}
var Me={eventTypes:ye,_isInputEventSupported:Fe,extractEvents:function(a,b,c,d){var e=b?Pd(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if("select"===f||"input"===f&&"file"===e.type)var g=Ee;else if(xe(e))if(Fe)g=Le;else{g=Je;var h=Ie}else(f=e.nodeName)&&"input"===f.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(g=Ke);if(g&&(g=g(a,b)))return ze(g,c,d);h&&h(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Db(e,"number",e.value)}},Ne=G.extend({view:null,detail:null}),
Oe={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pe(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Oe[a])?!!b[a]:!1}function Qe(){return Pe}
var Re=0,Se=0,Te=!1,Ue=!1,Ve=Ne.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Qe,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=Re;Re=a.screenX;return Te?"mousemove"===a.type?a.screenX-b:0:(Te=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;
var b=Se;Se=a.screenY;return Ue?"mousemove"===a.type?a.screenY-b:0:(Ue=!0,0)}}),We=Ve.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xe={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",
dependencies:["pointerout","pointerover"]}},Ye={eventTypes:Xe,extractEvents:function(a,b,c,d,e){var f="mouseover"===a||"pointerover"===a,g="mouseout"===a||"pointerout"===a;if(f&&0===(e&32)&&(c.relatedTarget||c.fromElement)||!g&&!f)return null;f=d.window===d?d:(f=d.ownerDocument)?f.defaultView||f.parentWindow:window;if(g){if(g=b,b=(b=c.relatedTarget||c.toElement)?tc(b):null,null!==b){var h=dc(b);if(b!==h||5!==b.tag&&6!==b.tag)b=null}}else g=null;if(g===b)return null;if("mouseout"===a||"mouseover"===
a){var k=Ve;var l=Xe.mouseLeave;var m=Xe.mouseEnter;var p="mouse"}else if("pointerout"===a||"pointerover"===a)k=We,l=Xe.pointerLeave,m=Xe.pointerEnter,p="pointer";a=null==g?f:Pd(g);f=null==b?f:Pd(b);l=k.getPooled(l,g,c,d);l.type=p+"leave";l.target=a;l.relatedTarget=f;c=k.getPooled(m,b,c,d);c.type=p+"enter";c.target=f;c.relatedTarget=a;d=g;p=b;if(d&&p)a:{k=d;m=p;g=0;for(a=k;a;a=Rd(a))g++;a=0;for(b=m;b;b=Rd(b))a++;for(;0<g-a;)k=Rd(k),g--;for(;0<a-g;)m=Rd(m),a--;for(;g--;){if(k===m||k===m.alternate)break a;
k=Rd(k);m=Rd(m)}k=null}else k=null;m=k;for(k=[];d&&d!==m;){g=d.alternate;if(null!==g&&g===m)break;k.push(d);d=Rd(d)}for(d=[];p&&p!==m;){g=p.alternate;if(null!==g&&g===m)break;d.push(p);p=Rd(p)}for(p=0;p<k.length;p++)Vd(k[p],"bubbled",l);for(p=d.length;0<p--;)Vd(d[p],"captured",c);return 0===(e&64)?[l]:[l,c]}};function Ze(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var $e="function"===typeof Object.is?Object.is:Ze,af=Object.prototype.hasOwnProperty;
function bf(a,b){if($e(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!af.call(b,c[d])||!$e(a[c[d]],b[c[d]]))return!1;return!0}
var cf=ya&&"documentMode"in document&&11>=document.documentMode,df={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},ef=null,ff=null,gf=null,hf=!1;
function jf(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if(hf||null==ef||ef!==td(c))return null;c=ef;"selectionStart"in c&&yd(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return gf&&bf(gf,c)?null:(gf=c,a=G.getPooled(df.select,ff,a,b),a.type="select",a.target=ef,Xd(a),a)}
var kf={eventTypes:df,extractEvents:function(a,b,c,d,e,f){e=f||(d.window===d?d.document:9===d.nodeType?d:d.ownerDocument);if(!(f=!e)){a:{e=cc(e);f=wa.onSelect;for(var g=0;g<f.length;g++)if(!e.has(f[g])){e=!1;break a}e=!0}f=!e}if(f)return null;e=b?Pd(b):window;switch(a){case "focus":if(xe(e)||"true"===e.contentEditable)ef=e,ff=b,gf=null;break;case "blur":gf=ff=ef=null;break;case "mousedown":hf=!0;break;case "contextmenu":case "mouseup":case "dragend":return hf=!1,jf(c,d);case "selectionchange":if(cf)break;
case "keydown":case "keyup":return jf(c,d)}return null}},lf=G.extend({animationName:null,elapsedTime:null,pseudoElement:null}),mf=G.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),nf=Ne.extend({relatedTarget:null});function of(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
var pf={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},qf={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},rf=Ne.extend({key:function(a){if(a.key){var b=pf[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=of(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?qf[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Qe,charCode:function(a){return"keypress"===
a.type?of(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===a.type?of(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),sf=Ve.extend({dataTransfer:null}),tf=Ne.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Qe}),uf=G.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vf=Ve.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in
a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),wf={eventTypes:Wc,extractEvents:function(a,b,c,d){var e=Yc.get(a);if(!e)return null;switch(a){case "keypress":if(0===of(c))return null;case "keydown":case "keyup":a=rf;break;case "blur":case "focus":a=nf;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=
Ve;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=sf;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=tf;break;case Xb:case Yb:case Zb:a=lf;break;case $b:a=uf;break;case "scroll":a=Ne;break;case "wheel":a=vf;break;case "copy":case "cut":case "paste":a=mf;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=
We;break;default:a=G}b=a.getPooled(e,b,c,d);Xd(b);return b}};if(pa)throw Error(u(101));pa=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ra();var xf=Nc;la=Qd;ma=xf;na=Pd;xa({SimpleEventPlugin:wf,EnterLeaveEventPlugin:Ye,ChangeEventPlugin:Me,SelectEventPlugin:kf,BeforeInputEventPlugin:ve});var yf=[],zf=-1;function H(a){0>zf||(a.current=yf[zf],yf[zf]=null,zf--)}
function I(a,b){zf++;yf[zf]=a.current;a.current=b}var Af={},J={current:Af},K={current:!1},Bf=Af;function Cf(a,b){var c=a.type.contextTypes;if(!c)return Af;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function L(a){a=a.childContextTypes;return null!==a&&void 0!==a}
function Df(){H(K);H(J)}function Ef(a,b,c){if(J.current!==Af)throw Error(u(168));I(J,b);I(K,c)}function Ff(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(u(108,pb(b)||"Unknown",e));return n({},c,{},d)}function Gf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Af;Bf=J.current;I(J,a);I(K,K.current);return!0}
function Hf(a,b,c){var d=a.stateNode;if(!d)throw Error(u(169));c?(a=Ff(a,b,Bf),d.__reactInternalMemoizedMergedChildContext=a,H(K),H(J),I(J,a)):H(K);I(K,c)}
var If=r.unstable_runWithPriority,Jf=r.unstable_scheduleCallback,Kf=r.unstable_cancelCallback,Lf=r.unstable_requestPaint,Mf=r.unstable_now,Nf=r.unstable_getCurrentPriorityLevel,Of=r.unstable_ImmediatePriority,Pf=r.unstable_UserBlockingPriority,Qf=r.unstable_NormalPriority,Rf=r.unstable_LowPriority,Sf=r.unstable_IdlePriority,Tf={},Uf=r.unstable_shouldYield,Vf=void 0!==Lf?Lf:function(){},Wf=null,Xf=null,Yf=!1,Zf=Mf(),$f=1E4>Zf?Mf:function(){return Mf()-Zf};
function ag(){switch(Nf()){case Of:return 99;case Pf:return 98;case Qf:return 97;case Rf:return 96;case Sf:return 95;default:throw Error(u(332));}}function bg(a){switch(a){case 99:return Of;case 98:return Pf;case 97:return Qf;case 96:return Rf;case 95:return Sf;default:throw Error(u(332));}}function cg(a,b){a=bg(a);return If(a,b)}function dg(a,b,c){a=bg(a);return Jf(a,b,c)}function eg(a){null===Wf?(Wf=[a],Xf=Jf(Of,fg)):Wf.push(a);return Tf}function gg(){if(null!==Xf){var a=Xf;Xf=null;Kf(a)}fg()}
function fg(){if(!Yf&&null!==Wf){Yf=!0;var a=0;try{var b=Wf;cg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});Wf=null}catch(c){throw null!==Wf&&(Wf=Wf.slice(a+1)),Jf(Of,gg),c;}finally{Yf=!1}}}function hg(a,b,c){c/=10;return 1073741821-(((1073741821-a+b/10)/c|0)+1)*c}function ig(a,b){if(a&&a.defaultProps){b=n({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c])}return b}var jg={current:null},kg=null,lg=null,mg=null;function ng(){mg=lg=kg=null}
function og(a){var b=jg.current;H(jg);a.type._context._currentValue=b}function pg(a,b){for(;null!==a;){var c=a.alternate;if(a.childExpirationTime<b)a.childExpirationTime=b,null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);else if(null!==c&&c.childExpirationTime<b)c.childExpirationTime=b;else break;a=a.return}}function qg(a,b){kg=a;mg=lg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(a.expirationTime>=b&&(rg=!0),a.firstContext=null)}
function sg(a,b){if(mg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)mg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===lg){if(null===kg)throw Error(u(308));lg=b;kg.dependencies={expirationTime:0,firstContext:b,responders:null}}else lg=lg.next=b}return a._currentValue}var tg=!1;function ug(a){a.updateQueue={baseState:a.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}
function vg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,baseQueue:a.baseQueue,shared:a.shared,effects:a.effects})}function wg(a,b){a={expirationTime:a,suspenseConfig:b,tag:0,payload:null,callback:null,next:null};return a.next=a}function xg(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}
function yg(a,b){var c=a.alternate;null!==c&&vg(c,a);a=a.updateQueue;c=a.baseQueue;null===c?(a.baseQueue=b.next=b,b.next=b):(b.next=c.next,c.next=b)}
function zg(a,b,c,d){var e=a.updateQueue;tg=!1;var f=e.baseQueue,g=e.shared.pending;if(null!==g){if(null!==f){var h=f.next;f.next=g.next;g.next=h}f=g;e.shared.pending=null;h=a.alternate;null!==h&&(h=h.updateQueue,null!==h&&(h.baseQueue=g))}if(null!==f){h=f.next;var k=e.baseState,l=0,m=null,p=null,x=null;if(null!==h){var z=h;do{g=z.expirationTime;if(g<d){var ca={expirationTime:z.expirationTime,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null};null===x?(p=x=
ca,m=k):x=x.next=ca;g>l&&(l=g)}else{null!==x&&(x=x.next={expirationTime:1073741823,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null});Ag(g,z.suspenseConfig);a:{var D=a,t=z;g=b;ca=c;switch(t.tag){case 1:D=t.payload;if("function"===typeof D){k=D.call(ca,k,g);break a}k=D;break a;case 3:D.effectTag=D.effectTag&-4097|64;case 0:D=t.payload;g="function"===typeof D?D.call(ca,k,g):D;if(null===g||void 0===g)break a;k=n({},k,g);break a;case 2:tg=!0}}null!==z.callback&&
(a.effectTag|=32,g=e.effects,null===g?e.effects=[z]:g.push(z))}z=z.next;if(null===z||z===h)if(g=e.shared.pending,null===g)break;else z=f.next=g.next,g.next=h,e.baseQueue=f=g,e.shared.pending=null}while(1)}null===x?m=k:x.next=p;e.baseState=m;e.baseQueue=x;Bg(l);a.expirationTime=l;a.memoizedState=k}}
function Cg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=e;e=c;if("function"!==typeof d)throw Error(u(191,d));d.call(e)}}}var Dg=Wa.ReactCurrentBatchConfig,Eg=(new aa.Component).refs;function Fg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;0===a.expirationTime&&(a.updateQueue.baseState=c)}
var Jg={isMounted:function(a){return(a=a._reactInternalFiber)?dc(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gg(),d=Dg.suspense;
c=Hg(c,a,d);d=wg(c,d);d.tag=2;void 0!==b&&null!==b&&(d.callback=b);xg(a,d);Ig(a,c)}};function Kg(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!bf(c,d)||!bf(e,f):!0}
function Lg(a,b,c){var d=!1,e=Af;var f=b.contextType;"object"===typeof f&&null!==f?f=sg(f):(e=L(b)?Bf:J.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Cf(a,e):Af);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Jg;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
function Mg(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Jg.enqueueReplaceState(b,b.state,null)}
function Ng(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Eg;ug(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=sg(f):(f=L(b)?Bf:J.current,e.context=Cf(a,f));zg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Fg(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||
(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Jg.enqueueReplaceState(e,e.state,null),zg(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.effectTag|=4)}var Og=Array.isArray;
function Pg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(u(309));var d=c.stateNode}if(!d)throw Error(u(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Eg&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if("string"!==typeof a)throw Error(u(284));if(!c._owner)throw Error(u(290,a));}return a}
function Qg(a,b){if("textarea"!==a.type)throw Error(u(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,""));}
function Rg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Sg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Tg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Pg(a,b,c),d.return=a,d;d=Ug(c.type,c.key,c.props,null,a.mode,d);d.ref=Pg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==
c.implementation)return b=Vg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Wg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function p(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Tg(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Za:return c=Ug(b.type,b.key,b.props,null,a.mode,c),c.ref=Pg(a,null,b),c.return=a,c;case $a:return b=Vg(b,a.mode,c),b.return=a,b}if(Og(b)||
nb(b))return b=Wg(b,a.mode,c,null),b.return=a,b;Qg(a,b)}return null}function x(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Za:return c.key===e?c.type===ab?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case $a:return c.key===e?l(a,b,c,d):null}if(Og(c)||nb(c))return null!==e?null:m(a,b,c,d,null);Qg(a,c)}return null}function z(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=
a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Za:return a=a.get(null===d.key?c:d.key)||null,d.type===ab?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case $a:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Og(d)||nb(d))return a=a.get(c)||null,m(b,a,d,e,null);Qg(b,d)}return null}function ca(e,g,h,k){for(var l=null,t=null,m=g,y=g=0,A=null;null!==m&&y<h.length;y++){m.index>y?(A=m,m=null):A=m.sibling;var q=x(e,m,h[y],k);if(null===q){null===m&&(m=A);break}a&&
m&&null===q.alternate&&b(e,m);g=f(q,g,y);null===t?l=q:t.sibling=q;t=q;m=A}if(y===h.length)return c(e,m),l;if(null===m){for(;y<h.length;y++)m=p(e,h[y],k),null!==m&&(g=f(m,g,y),null===t?l=m:t.sibling=m,t=m);return l}for(m=d(e,m);y<h.length;y++)A=z(m,e,y,h[y],k),null!==A&&(a&&null!==A.alternate&&m.delete(null===A.key?y:A.key),g=f(A,g,y),null===t?l=A:t.sibling=A,t=A);a&&m.forEach(function(a){return b(e,a)});return l}function D(e,g,h,l){var k=nb(h);if("function"!==typeof k)throw Error(u(150));h=k.call(h);
if(null==h)throw Error(u(151));for(var m=k=null,t=g,y=g=0,A=null,q=h.next();null!==t&&!q.done;y++,q=h.next()){t.index>y?(A=t,t=null):A=t.sibling;var D=x(e,t,q.value,l);if(null===D){null===t&&(t=A);break}a&&t&&null===D.alternate&&b(e,t);g=f(D,g,y);null===m?k=D:m.sibling=D;m=D;t=A}if(q.done)return c(e,t),k;if(null===t){for(;!q.done;y++,q=h.next())q=p(e,q.value,l),null!==q&&(g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);return k}for(t=d(e,t);!q.done;y++,q=h.next())q=z(t,e,y,q.value,l),null!==q&&(a&&null!==
q.alternate&&t.delete(null===q.key?y:q.key),g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);a&&t.forEach(function(a){return b(e,a)});return k}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ab&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case Za:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ab){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,
k.sibling);d=e(k,f.props);d.ref=Pg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling}f.type===ab?(d=Wg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Ug(f.type,f.key,f.props,null,a.mode,h),h.ref=Pg(a,d,f),h.return=a,a=h)}return g(a);case $a:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=
d.sibling}d=Vg(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Tg(f,a.mode,h),d.return=a,a=d),g(a);if(Og(f))return ca(a,d,f,h);if(nb(f))return D(a,d,f,h);l&&Qg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 0:throw a=a.type,Error(u(152,a.displayName||a.name||"Component"));}return c(a,d)}}var Xg=Rg(!0),Yg=Rg(!1),Zg={},$g={current:Zg},ah={current:Zg},bh={current:Zg};
function ch(a){if(a===Zg)throw Error(u(174));return a}function dh(a,b){I(bh,b);I(ah,a);I($g,Zg);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:Ob(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=Ob(b,a)}H($g);I($g,b)}function eh(){H($g);H(ah);H(bh)}function fh(a){ch(bh.current);var b=ch($g.current);var c=Ob(b,a.type);b!==c&&(I(ah,a),I($g,c))}function gh(a){ah.current===a&&(H($g),H(ah))}var M={current:0};
function hh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||c.data===Bd||c.data===Cd))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.effectTag&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}function ih(a,b){return{responder:a,props:b}}
var jh=Wa.ReactCurrentDispatcher,kh=Wa.ReactCurrentBatchConfig,lh=0,N=null,O=null,P=null,mh=!1;function Q(){throw Error(u(321));}function nh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!$e(a[c],b[c]))return!1;return!0}
function oh(a,b,c,d,e,f){lh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.expirationTime=0;jh.current=null===a||null===a.memoizedState?ph:qh;a=c(d,e);if(b.expirationTime===lh){f=0;do{b.expirationTime=0;if(!(25>f))throw Error(u(301));f+=1;P=O=null;b.updateQueue=null;jh.current=rh;a=c(d,e)}while(b.expirationTime===lh)}jh.current=sh;b=null!==O&&null!==O.next;lh=0;P=O=N=null;mh=!1;if(b)throw Error(u(300));return a}
function th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function uh(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(u(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}
function vh(a,b){return"function"===typeof b?b(a):b}
function wh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.expirationTime;if(l<lh){var m={expirationTime:k.expirationTime,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null};null===h?(g=h=m,f=d):h=h.next=m;l>N.expirationTime&&
(N.expirationTime=l,Bg(l))}else null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),Ag(l,k.suspenseConfig),d=k.eagerReducer===a?k.eagerState:a(d,k.action);k=k.next}while(null!==k&&k!==e);null===h?f=d:h.next=g;$e(d,b.memoizedState)||(rg=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,c.dispatch]}
function xh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);$e(f,b.memoizedState)||(rg=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}
function yh(a){var b=th();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:vh,lastRenderedState:a};a=a.dispatch=zh.bind(null,N,a);return[b.memoizedState,a]}function Ah(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}
function Bh(){return uh().memoizedState}function Ch(a,b,c,d){var e=th();N.effectTag|=a;e.memoizedState=Ah(1|b,c,void 0,void 0===d?null:d)}function Dh(a,b,c,d){var e=uh();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&nh(d,g.deps)){Ah(b,c,f,d);return}}N.effectTag|=a;e.memoizedState=Ah(1|b,c,f,d)}function Eh(a,b){return Ch(516,4,a,b)}function Fh(a,b){return Dh(516,4,a,b)}function Gh(a,b){return Dh(4,2,a,b)}
function Hh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function Ih(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Dh(4,2,Hh.bind(null,b,a),c)}function Jh(){}function Kh(a,b){th().memoizedState=[a,void 0===b?null:b];return a}function Lh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
function Mh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Nh(a,b,c){var d=ag();cg(98>d?98:d,function(){a(!0)});cg(97<d?97:d,function(){var d=kh.suspense;kh.suspense=void 0===b?null:b;try{a(!1),c()}finally{kh.suspense=d}})}
function zh(a,b,c){var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e={expirationTime:d,suspenseConfig:e,action:c,eagerReducer:null,eagerState:null,next:null};var f=b.pending;null===f?e.next=e:(e.next=f.next,f.next=e);b.pending=e;f=a.alternate;if(a===N||null!==f&&f===N)mh=!0,e.expirationTime=lh,N.expirationTime=lh;else{if(0===a.expirationTime&&(null===f||0===f.expirationTime)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.eagerReducer=f;e.eagerState=h;if($e(h,g))return}catch(k){}finally{}Ig(a,
d)}}
var sh={readContext:sg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useResponder:Q,useDeferredValue:Q,useTransition:Q},ph={readContext:sg,useCallback:Kh,useContext:sg,useEffect:Eh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Ch(4,2,Hh.bind(null,b,a),c)},useLayoutEffect:function(a,b){return Ch(4,2,a,b)},useMemo:function(a,b){var c=th();b=void 0===b?null:b;a=a();c.memoizedState=[a,
b];return a},useReducer:function(a,b,c){var d=th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=zh.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=th();a={current:a};return b.memoizedState=a},useState:yh,useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=yh(a),d=c[0],e=c[1];Eh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=
c}},[a,b]);return d},useTransition:function(a){var b=yh(!1),c=b[0];b=b[1];return[Kh(Nh.bind(null,b,a),[b,a]),c]}},qh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:wh,useRef:Bh,useState:function(){return wh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=wh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=
wh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,b,a),[b,a]),c]}},rh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:xh,useRef:Bh,useState:function(){return xh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=xh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=xh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,
b,a),[b,a]),c]}},Oh=null,Ph=null,Qh=!1;function Rh(a,b){var c=Sh(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}
function Th(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}
function Uh(a){if(Qh){var b=Ph;if(b){var c=b;if(!Th(a,b)){b=Jd(c.nextSibling);if(!b||!Th(a,b)){a.effectTag=a.effectTag&-1025|2;Qh=!1;Oh=a;return}Rh(Oh,c)}Oh=a;Ph=Jd(b.firstChild)}else a.effectTag=a.effectTag&-1025|2,Qh=!1,Oh=a}}function Vh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;Oh=a}
function Wh(a){if(a!==Oh)return!1;if(!Qh)return Vh(a),Qh=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!Gd(b,a.memoizedProps))for(b=Ph;b;)Rh(a,b),b=Jd(b.nextSibling);Vh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(u(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(c===Ad){if(0===b){Ph=Jd(a.nextSibling);break a}b--}else c!==zd&&c!==Cd&&c!==Bd||b++}a=a.nextSibling}Ph=null}}else Ph=Oh?Jd(a.stateNode.nextSibling):null;return!0}
function Xh(){Ph=Oh=null;Qh=!1}var Yh=Wa.ReactCurrentOwner,rg=!1;function R(a,b,c,d){b.child=null===a?Yg(b,null,c,d):Xg(b,a.child,c,d)}function Zh(a,b,c,d,e){c=c.render;var f=b.ref;qg(b,e);d=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,d,e);return b.child}
function ai(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!bi(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ci(a,b,g,d,e,f);a=Ug(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:bf,c(e,d)&&a.ref===b.ref))return $h(a,b,f);b.effectTag|=1;a=Sg(g,d);a.ref=b.ref;a.return=b;return b.child=a}
function ci(a,b,c,d,e,f){return null!==a&&bf(a.memoizedProps,d)&&a.ref===b.ref&&(rg=!1,e<f)?(b.expirationTime=a.expirationTime,$h(a,b,f)):di(a,b,c,d,f)}function ei(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function di(a,b,c,d,e){var f=L(c)?Bf:J.current;f=Cf(b,f);qg(b,e);c=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,c,e);return b.child}
function fi(a,b,c,d,e){if(L(c)){var f=!0;Gf(b)}else f=!1;qg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Lg(b,c,d),Ng(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l));var m=c.getDerivedStateFromProps,p="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;p||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l);tg=!1;var x=b.memoizedState;g.state=x;zg(b,d,g,e);k=b.memoizedState;h!==d||x!==k||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),k=b.memoizedState),(h=tg||Kg(b,c,h,d,x,k,l))?(p||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===
typeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1)}else g=b.stateNode,vg(a,b),h=b.memoizedProps,g.props=b.type===b.elementType?h:ig(b.type,h),k=g.context,l=c.contextType,"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l)),m=c.getDerivedStateFromProps,(p="function"===typeof m||"function"===
typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l),tg=!1,k=b.memoizedState,g.state=k,zg(b,d,g,e),x=b.memoizedState,h!==d||k!==x||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),x=b.memoizedState),(m=tg||Kg(b,c,h,d,k,x,l))?(p||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,
x,l),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,l)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=l,d=m):
("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),d=!1);return gi(a,b,c,d,f,e)}
function gi(a,b,c,d,e,f){ei(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Hf(b,c,!1),$h(a,b,f);d=b.stateNode;Yh.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=Xg(b,a.child,null,f),b.child=Xg(b,null,h,f)):R(a,b,h,f);b.memoizedState=d.state;e&&Hf(b,c,!0);return b.child}function hi(a){var b=a.stateNode;b.pendingContext?Ef(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Ef(a,b.context,!1);dh(a,b.containerInfo)}
var ii={dehydrated:null,retryTime:0};
function ji(a,b,c){var d=b.mode,e=b.pendingProps,f=M.current,g=!1,h;(h=0!==(b.effectTag&64))||(h=0!==(f&2)&&(null===a||null!==a.memoizedState));h?(g=!0,b.effectTag&=-65):null!==a&&null===a.memoizedState||void 0===e.fallback||!0===e.unstable_avoidThisFallback||(f|=1);I(M,f&1);if(null===a){void 0!==e.fallback&&Uh(b);if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=
b;e.sibling=c;b.memoizedState=ii;b.child=e;return c}d=e.children;b.memoizedState=null;return b.child=Yg(b,null,d,c)}if(null!==a.memoizedState){a=a.child;d=a.sibling;if(g){e=e.fallback;c=Sg(a,a.pendingProps);c.return=b;if(0===(b.mode&2)&&(g=null!==b.memoizedState?b.child.child:b.child,g!==a.child))for(c.child=g;null!==g;)g.return=c,g=g.sibling;d=Sg(d,e);d.return=b;c.sibling=d;c.childExpirationTime=0;b.memoizedState=ii;b.child=c;return d}c=Xg(b,a.child,e.children,c);b.memoizedState=null;return b.child=
c}a=a.child;if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;e.child=a;null!==a&&(a.return=e);if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=b;e.sibling=c;c.effectTag|=2;e.childExpirationTime=0;b.memoizedState=ii;b.child=e;return c}b.memoizedState=null;return b.child=Xg(b,a,e.children,c)}
function ki(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);pg(a.return,b)}function li(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailExpiration:0,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailExpiration=0,g.tailMode=e,g.lastEffect=f)}
function mi(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;R(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.effectTag|=64;else{if(null!==a&&0!==(a.effectTag&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&ki(a,c);else if(19===a.tag)ki(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(M,d);if(0===(b.mode&2))b.memoizedState=
null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===hh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);li(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===hh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}li(b,!0,c,null,f,b.lastEffect);break;case "together":li(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}
function $h(a,b,c){null!==a&&(b.dependencies=a.dependencies);var d=b.expirationTime;0!==d&&Bg(d);if(b.childExpirationTime<c)return null;if(null!==a&&b.child!==a.child)throw Error(u(153));if(null!==b.child){a=b.child;c=Sg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Sg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}var ni,oi,pi,qi;
ni=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};oi=function(){};
pi=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;ch($g.current);a=null;switch(c){case "input":f=zb(g,f);d=zb(g,d);a=[];break;case "option":f=Gb(g,f);d=Gb(g,d);a=[];break;case "select":f=n({},f,{value:void 0});d=n({},d,{value:void 0});a=[];break;case "textarea":f=Ib(g,f);d=Ib(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=sd)}od(c,d);var h,k;c=null;for(h in f)if(!d.hasOwnProperty(h)&&f.hasOwnProperty(h)&&null!=f[h])if("style"===
h)for(k in g=f[h],g)g.hasOwnProperty(k)&&(c||(c={}),c[k]="");else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(va.hasOwnProperty(h)?a||(a=[]):(a=a||[]).push(h,null));for(h in d){var l=d[h];g=null!=f?f[h]:void 0;if(d.hasOwnProperty(h)&&l!==g&&(null!=l||null!=g))if("style"===h)if(g){for(k in g)!g.hasOwnProperty(k)||l&&l.hasOwnProperty(k)||(c||(c={}),c[k]="");for(k in l)l.hasOwnProperty(k)&&g[k]!==l[k]&&(c||(c={}),
c[k]=l[k])}else c||(a||(a=[]),a.push(h,c)),c=l;else"dangerouslySetInnerHTML"===h?(l=l?l.__html:void 0,g=g?g.__html:void 0,null!=l&&g!==l&&(a=a||[]).push(h,l)):"children"===h?g===l||"string"!==typeof l&&"number"!==typeof l||(a=a||[]).push(h,""+l):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(va.hasOwnProperty(h)?(null!=l&&rd(e,h),a||g===l||(a=[])):(a=a||[]).push(h,l))}c&&(a=a||[]).push("style",c);e=a;if(b.updateQueue=e)b.effectTag|=4}};
qi=function(a,b,c,d){c!==d&&(b.effectTag|=4)};function ri(a,b){switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}
function si(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return L(b.type)&&Df(),null;case 3:return eh(),H(K),H(J),c=b.stateNode,c.pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==a&&null!==a.child||!Wh(b)||(b.effectTag|=4),oi(b),null;case 5:gh(b);c=ch(bh.current);var e=b.type;if(null!==a&&null!=b.stateNode)pi(a,b,e,d,c),a.ref!==b.ref&&(b.effectTag|=128);else{if(!d){if(null===b.stateNode)throw Error(u(166));
return null}a=ch($g.current);if(Wh(b)){d=b.stateNode;e=b.type;var f=b.memoizedProps;d[Md]=b;d[Nd]=f;switch(e){case "iframe":case "object":case "embed":F("load",d);break;case "video":case "audio":for(a=0;a<ac.length;a++)F(ac[a],d);break;case "source":F("error",d);break;case "img":case "image":case "link":F("error",d);F("load",d);break;case "form":F("reset",d);F("submit",d);break;case "details":F("toggle",d);break;case "input":Ab(d,f);F("invalid",d);rd(c,"onChange");break;case "select":d._wrapperState=
{wasMultiple:!!f.multiple};F("invalid",d);rd(c,"onChange");break;case "textarea":Jb(d,f),F("invalid",d),rd(c,"onChange")}od(e,f);a=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(a=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(a=["children",""+h]):va.hasOwnProperty(g)&&null!=h&&rd(c,g)}switch(e){case "input":xb(d);Eb(d,f,!0);break;case "textarea":xb(d);Lb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&
(d.onclick=sd)}c=a;b.updateQueue=c;null!==c&&(b.effectTag|=4)}else{g=9===c.nodeType?c:c.ownerDocument;a===qd&&(a=Nb(e));a===qd?"script"===e?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(e,{is:d.is}):(a=g.createElement(e),"select"===e&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,e);a[Md]=b;a[Nd]=d;ni(a,b,!1,!1);b.stateNode=a;g=pd(e,d);switch(e){case "iframe":case "object":case "embed":F("load",
a);h=d;break;case "video":case "audio":for(h=0;h<ac.length;h++)F(ac[h],a);h=d;break;case "source":F("error",a);h=d;break;case "img":case "image":case "link":F("error",a);F("load",a);h=d;break;case "form":F("reset",a);F("submit",a);h=d;break;case "details":F("toggle",a);h=d;break;case "input":Ab(a,d);h=zb(a,d);F("invalid",a);rd(c,"onChange");break;case "option":h=Gb(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};h=n({},d,{value:void 0});F("invalid",a);rd(c,"onChange");break;case "textarea":Jb(a,
d);h=Ib(a,d);F("invalid",a);rd(c,"onChange");break;default:h=d}od(e,h);var k=h;for(f in k)if(k.hasOwnProperty(f)){var l=k[f];"style"===f?md(a,l):"dangerouslySetInnerHTML"===f?(l=l?l.__html:void 0,null!=l&&Qb(a,l)):"children"===f?"string"===typeof l?("textarea"!==e||""!==l)&&Rb(a,l):"number"===typeof l&&Rb(a,""+l):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(va.hasOwnProperty(f)?null!=l&&rd(c,f):null!=l&&Xa(a,f,l,g))}switch(e){case "input":xb(a);Eb(a,d,!1);
break;case "textarea":xb(a);Lb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+rb(d.value));break;case "select":a.multiple=!!d.multiple;c=d.value;null!=c?Hb(a,!!d.multiple,c,!1):null!=d.defaultValue&&Hb(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof h.onClick&&(a.onclick=sd)}Fd(e,d)&&(b.effectTag|=4)}null!==b.ref&&(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)qi(a,b,a.memoizedProps,d);else{if("string"!==typeof d&&null===b.stateNode)throw Error(u(166));
c=ch(bh.current);ch($g.current);Wh(b)?(c=b.stateNode,d=b.memoizedProps,c[Md]=b,c.nodeValue!==d&&(b.effectTag|=4)):(c=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),c[Md]=b,b.stateNode=c)}return null;case 13:H(M);d=b.memoizedState;if(0!==(b.effectTag&64))return b.expirationTime=c,b;c=null!==d;d=!1;null===a?void 0!==b.memoizedProps.fallback&&Wh(b):(e=a.memoizedState,d=null!==e,c||null===e||(e=a.child.sibling,null!==e&&(f=b.firstEffect,null!==f?(b.firstEffect=e,e.nextEffect=f):(b.firstEffect=b.lastEffect=
e,e.nextEffect=null),e.effectTag=8)));if(c&&!d&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(M.current&1))S===ti&&(S=ui);else{if(S===ti||S===ui)S=vi;0!==wi&&null!==T&&(xi(T,U),yi(T,wi))}if(c||d)b.effectTag|=4;return null;case 4:return eh(),oi(b),null;case 10:return og(b),null;case 17:return L(b.type)&&Df(),null;case 19:H(M);d=b.memoizedState;if(null===d)return null;e=0!==(b.effectTag&64);f=d.rendering;if(null===f)if(e)ri(d,!1);else{if(S!==ti||null!==a&&0!==(a.effectTag&
64))for(f=b.child;null!==f;){a=hh(f);if(null!==a){b.effectTag|=64;ri(d,!1);e=a.updateQueue;null!==e&&(b.updateQueue=e,b.effectTag|=4);null===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;for(d=b.child;null!==d;)e=d,f=c,e.effectTag&=2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null,a=e.alternate,null===a?(e.childExpirationTime=0,e.expirationTime=f,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null):(e.childExpirationTime=a.childExpirationTime,
e.expirationTime=a.expirationTime,e.child=a.child,e.memoizedProps=a.memoizedProps,e.memoizedState=a.memoizedState,e.updateQueue=a.updateQueue,f=a.dependencies,e.dependencies=null===f?null:{expirationTime:f.expirationTime,firstContext:f.firstContext,responders:f.responders}),d=d.sibling;I(M,M.current&1|2);return b.child}f=f.sibling}}else{if(!e)if(a=hh(f),null!==a){if(b.effectTag|=64,e=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.effectTag|=4),ri(d,!0),null===d.tail&&"hidden"===d.tailMode&&!f.alternate)return b=
b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*$f()-d.renderingStartTime>d.tailExpiration&&1<c&&(b.effectTag|=64,e=!0,ri(d,!1),b.expirationTime=b.childExpirationTime=c-1);d.isBackwards?(f.sibling=b.child,b.child=f):(c=d.last,null!==c?c.sibling=f:b.child=f,d.last=f)}return null!==d.tail?(0===d.tailExpiration&&(d.tailExpiration=$f()+500),c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=$f(),c.sibling=null,b=M.current,I(M,e?b&1|2:b&1),c):null}throw Error(u(156,
b.tag));}function zi(a){switch(a.tag){case 1:L(a.type)&&Df();var b=a.effectTag;return b&4096?(a.effectTag=b&-4097|64,a):null;case 3:eh();H(K);H(J);b=a.effectTag;if(0!==(b&64))throw Error(u(285));a.effectTag=b&-4097|64;return a;case 5:return gh(a),null;case 13:return H(M),b=a.effectTag,b&4096?(a.effectTag=b&-4097|64,a):null;case 19:return H(M),null;case 4:return eh(),null;case 10:return og(a),null;default:return null}}function Ai(a,b){return{value:a,source:b,stack:qb(b)}}
var Bi="function"===typeof WeakSet?WeakSet:Set;function Ci(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=qb(c));null!==c&&pb(c.type);b=b.value;null!==a&&1===a.tag&&pb(a.type);try{console.error(b)}catch(e){setTimeout(function(){throw e;})}}function Di(a,b){try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(c){Ei(a,c)}}function Fi(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){Ei(a,c)}else b.current=null}
function Gi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.effectTag&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:ig(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(u(163));}
function Hi(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.destroy;c.destroy=void 0;void 0!==d&&d()}c=c.next}while(c!==b)}}function Ii(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}
function Ji(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:Ii(3,c);return;case 1:a=c.stateNode;if(c.effectTag&4)if(null===b)a.componentDidMount();else{var d=c.elementType===c.type?b.memoizedProps:ig(c.type,b.memoizedProps);a.componentDidUpdate(d,b.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}b=c.updateQueue;null!==b&&Cg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Cg(c,b,a)}return;
case 5:a=c.stateNode;null===b&&c.effectTag&4&&Fd(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Vc(c))));return;case 19:case 17:case 20:case 21:return}throw Error(u(163));}
function Ki(a,b,c){"function"===typeof Li&&Li(b);switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var d=a.next;cg(97<c?97:c,function(){var a=d;do{var c=a.destroy;if(void 0!==c){var g=b;try{c()}catch(h){Ei(g,h)}}a=a.next}while(a!==d)})}break;case 1:Fi(b);c=b.stateNode;"function"===typeof c.componentWillUnmount&&Di(b,c);break;case 5:Fi(b);break;case 4:Mi(a,b,c)}}
function Ni(a){var b=a.alternate;a.return=null;a.child=null;a.memoizedState=null;a.updateQueue=null;a.dependencies=null;a.alternate=null;a.firstEffect=null;a.lastEffect=null;a.pendingProps=null;a.memoizedProps=null;a.stateNode=null;null!==b&&Ni(b)}function Oi(a){return 5===a.tag||3===a.tag||4===a.tag}
function Pi(a){a:{for(var b=a.return;null!==b;){if(Oi(b)){var c=b;break a}b=b.return}throw Error(u(160));}b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(u(161));}c.effectTag&16&&(Rb(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Oi(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.effectTag&2)continue b;
if(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}d?Qi(a,c,b):Ri(a,c,b)}
function Qi(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=sd));else if(4!==d&&(a=a.child,null!==a))for(Qi(a,b,c),a=a.sibling;null!==a;)Qi(a,b,c),a=a.sibling}
function Ri(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Ri(a,b,c),a=a.sibling;null!==a;)Ri(a,b,c),a=a.sibling}
function Mi(a,b,c){for(var d=b,e=!1,f,g;;){if(!e){e=d.return;a:for(;;){if(null===e)throw Error(u(160));f=e.stateNode;switch(e.tag){case 5:g=!1;break a;case 3:f=f.containerInfo;g=!0;break a;case 4:f=f.containerInfo;g=!0;break a}e=e.return}e=!0}if(5===d.tag||6===d.tag){a:for(var h=a,k=d,l=c,m=k;;)if(Ki(h,m,l),null!==m.child&&4!==m.tag)m.child.return=m,m=m.child;else{if(m===k)break a;for(;null===m.sibling;){if(null===m.return||m.return===k)break a;m=m.return}m.sibling.return=m.return;m=m.sibling}g?(h=
f,k=d.stateNode,8===h.nodeType?h.parentNode.removeChild(k):h.removeChild(k)):f.removeChild(d.stateNode)}else if(4===d.tag){if(null!==d.child){f=d.stateNode.containerInfo;g=!0;d.child.return=d;d=d.child;continue}}else if(Ki(a,d,c),null!==d.child){d.child.return=d;d=d.child;continue}if(d===b)break;for(;null===d.sibling;){if(null===d.return||d.return===b)return;d=d.return;4===d.tag&&(e=!1)}d.sibling.return=d.return;d=d.sibling}}
function Si(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:Hi(3,b);return;case 1:return;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[Nd]=d;"input"===a&&"radio"===d.type&&null!=d.name&&Bb(c,d);pd(a,e);b=pd(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];"style"===g?md(c,h):"dangerouslySetInnerHTML"===g?Qb(c,h):"children"===g?Rb(c,h):Xa(c,g,h,b)}switch(a){case "input":Cb(c,d);break;
case "textarea":Kb(c,d);break;case "select":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?Hb(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?Hb(c,!!d.multiple,d.defaultValue,!0):Hb(c,!!d.multiple,d.multiple?[]:"",!1))}}}return;case 6:if(null===b.stateNode)throw Error(u(162));b.stateNode.nodeValue=b.memoizedProps;return;case 3:b=b.stateNode;b.hydrate&&(b.hydrate=!1,Vc(b.containerInfo));return;case 12:return;case 13:c=b;null===b.memoizedState?
d=!1:(d=!0,c=b.child,Ti=$f());if(null!==c)a:for(a=c;;){if(5===a.tag)f=a.stateNode,d?(f=f.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(f=a.stateNode,e=a.memoizedProps.style,e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null,f.style.display=ld("display",e));else if(6===a.tag)a.stateNode.nodeValue=d?"":a.memoizedProps;else if(13===a.tag&&null!==a.memoizedState&&null===a.memoizedState.dehydrated){f=a.child.sibling;f.return=a;a=
f;continue}else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===c)break;for(;null===a.sibling;){if(null===a.return||a.return===c)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}Ui(b);return;case 19:Ui(b);return;case 17:return}throw Error(u(163));}function Ui(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Bi);b.forEach(function(b){var d=Vi.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}
var Wi="function"===typeof WeakMap?WeakMap:Map;function Xi(a,b,c){c=wg(c,null);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Yi||(Yi=!0,Zi=d);Ci(a,b)};return c}
function $i(a,b,c){c=wg(c,null);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Ci(a,b);return d(e)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===aj?aj=new Set([this]):aj.add(this),Ci(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""})});return c}
var bj=Math.ceil,cj=Wa.ReactCurrentDispatcher,dj=Wa.ReactCurrentOwner,V=0,ej=8,fj=16,gj=32,ti=0,hj=1,ij=2,ui=3,vi=4,jj=5,W=V,T=null,X=null,U=0,S=ti,kj=null,lj=1073741823,mj=1073741823,nj=null,wi=0,oj=!1,Ti=0,pj=500,Y=null,Yi=!1,Zi=null,aj=null,qj=!1,rj=null,sj=90,tj=null,uj=0,vj=null,wj=0;function Gg(){return(W&(fj|gj))!==V?1073741821-($f()/10|0):0!==wj?wj:wj=1073741821-($f()/10|0)}
function Hg(a,b,c){b=b.mode;if(0===(b&2))return 1073741823;var d=ag();if(0===(b&4))return 99===d?1073741823:1073741822;if((W&fj)!==V)return U;if(null!==c)a=hg(a,c.timeoutMs|0||5E3,250);else switch(d){case 99:a=1073741823;break;case 98:a=hg(a,150,100);break;case 97:case 96:a=hg(a,5E3,250);break;case 95:a=2;break;default:throw Error(u(326));}null!==T&&a===U&&--a;return a}
function Ig(a,b){if(50<uj)throw uj=0,vj=null,Error(u(185));a=xj(a,b);if(null!==a){var c=ag();1073741823===b?(W&ej)!==V&&(W&(fj|gj))===V?yj(a):(Z(a),W===V&&gg()):Z(a);(W&4)===V||98!==c&&99!==c||(null===tj?tj=new Map([[a,b]]):(c=tj.get(a),(void 0===c||c>b)&&tj.set(a,b)))}}
function xj(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return}null!==e&&(T===e&&(Bg(b),S===vi&&xi(e,U)),yi(e,b));return e}
function zj(a){var b=a.lastExpiredTime;if(0!==b)return b;b=a.firstPendingTime;if(!Aj(a,b))return b;var c=a.lastPingedTime;a=a.nextKnownPendingLevel;a=c>a?c:a;return 2>=a&&b!==a?0:a}
function Z(a){if(0!==a.lastExpiredTime)a.callbackExpirationTime=1073741823,a.callbackPriority=99,a.callbackNode=eg(yj.bind(null,a));else{var b=zj(a),c=a.callbackNode;if(0===b)null!==c&&(a.callbackNode=null,a.callbackExpirationTime=0,a.callbackPriority=90);else{var d=Gg();1073741823===b?d=99:1===b||2===b?d=95:(d=10*(1073741821-b)-10*(1073741821-d),d=0>=d?99:250>=d?98:5250>=d?97:95);if(null!==c){var e=a.callbackPriority;if(a.callbackExpirationTime===b&&e>=d)return;c!==Tf&&Kf(c)}a.callbackExpirationTime=
b;a.callbackPriority=d;b=1073741823===b?eg(yj.bind(null,a)):dg(d,Bj.bind(null,a),{timeout:10*(1073741821-b)-$f()});a.callbackNode=b}}}
function Bj(a,b){wj=0;if(b)return b=Gg(),Cj(a,b),Z(a),null;var c=zj(a);if(0!==c){b=a.callbackNode;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&c===U||Ej(a,c);if(null!==X){var d=W;W|=fj;var e=Fj();do try{Gj();break}catch(h){Hj(a,h)}while(1);ng();W=d;cj.current=e;if(S===hj)throw b=kj,Ej(a,c),xi(a,c),Z(a),b;if(null===X)switch(e=a.finishedWork=a.current.alternate,a.finishedExpirationTime=c,d=S,T=null,d){case ti:case hj:throw Error(u(345));case ij:Cj(a,2<c?2:c);break;case ui:xi(a,c);d=a.lastSuspendedTime;
c===d&&(a.nextKnownPendingLevel=Ij(e));if(1073741823===lj&&(e=Ti+pj-$f(),10<e)){if(oj){var f=a.lastPingedTime;if(0===f||f>=c){a.lastPingedTime=c;Ej(a,c);break}}f=zj(a);if(0!==f&&f!==c)break;if(0!==d&&d!==c){a.lastPingedTime=d;break}a.timeoutHandle=Hd(Jj.bind(null,a),e);break}Jj(a);break;case vi:xi(a,c);d=a.lastSuspendedTime;c===d&&(a.nextKnownPendingLevel=Ij(e));if(oj&&(e=a.lastPingedTime,0===e||e>=c)){a.lastPingedTime=c;Ej(a,c);break}e=zj(a);if(0!==e&&e!==c)break;if(0!==d&&d!==c){a.lastPingedTime=
d;break}1073741823!==mj?d=10*(1073741821-mj)-$f():1073741823===lj?d=0:(d=10*(1073741821-lj)-5E3,e=$f(),c=10*(1073741821-c)-e,d=e-d,0>d&&(d=0),d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*bj(d/1960))-d,c<d&&(d=c));if(10<d){a.timeoutHandle=Hd(Jj.bind(null,a),d);break}Jj(a);break;case jj:if(1073741823!==lj&&null!==nj){f=lj;var g=nj;d=g.busyMinDurationMs|0;0>=d?d=0:(e=g.busyDelayMs|0,f=$f()-(10*(1073741821-f)-(g.timeoutMs|0||5E3)),d=f<=e?0:e+d-f);if(10<d){xi(a,c);a.timeoutHandle=
Hd(Jj.bind(null,a),d);break}}Jj(a);break;default:throw Error(u(329));}Z(a);if(a.callbackNode===b)return Bj.bind(null,a)}}return null}
function yj(a){var b=a.lastExpiredTime;b=0!==b?b:1073741823;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&b===U||Ej(a,b);if(null!==X){var c=W;W|=fj;var d=Fj();do try{Kj();break}catch(e){Hj(a,e)}while(1);ng();W=c;cj.current=d;if(S===hj)throw c=kj,Ej(a,b),xi(a,b),Z(a),c;if(null!==X)throw Error(u(261));a.finishedWork=a.current.alternate;a.finishedExpirationTime=b;T=null;Jj(a);Z(a)}return null}function Lj(){if(null!==tj){var a=tj;tj=null;a.forEach(function(a,c){Cj(c,a);Z(c)});gg()}}
function Mj(a,b){var c=W;W|=1;try{return a(b)}finally{W=c,W===V&&gg()}}function Nj(a,b){var c=W;W&=-2;W|=ej;try{return a(b)}finally{W=c,W===V&&gg()}}
function Ej(a,b){a.finishedWork=null;a.finishedExpirationTime=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Id(c));if(null!==X)for(c=X.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Df();break;case 3:eh();H(K);H(J);break;case 5:gh(d);break;case 4:eh();break;case 13:H(M);break;case 19:H(M);break;case 10:og(d)}c=c.return}T=a;X=Sg(a.current,null);U=b;S=ti;kj=null;mj=lj=1073741823;nj=null;wi=0;oj=!1}
function Hj(a,b){do{try{ng();jh.current=sh;if(mh)for(var c=N.memoizedState;null!==c;){var d=c.queue;null!==d&&(d.pending=null);c=c.next}lh=0;P=O=N=null;mh=!1;if(null===X||null===X.return)return S=hj,kj=b,X=null;a:{var e=a,f=X.return,g=X,h=b;b=U;g.effectTag|=2048;g.firstEffect=g.lastEffect=null;if(null!==h&&"object"===typeof h&&"function"===typeof h.then){var k=h;if(0===(g.mode&2)){var l=g.alternate;l?(g.updateQueue=l.updateQueue,g.memoizedState=l.memoizedState,g.expirationTime=l.expirationTime):(g.updateQueue=
null,g.memoizedState=null)}var m=0!==(M.current&1),p=f;do{var x;if(x=13===p.tag){var z=p.memoizedState;if(null!==z)x=null!==z.dehydrated?!0:!1;else{var ca=p.memoizedProps;x=void 0===ca.fallback?!1:!0!==ca.unstable_avoidThisFallback?!0:m?!1:!0}}if(x){var D=p.updateQueue;if(null===D){var t=new Set;t.add(k);p.updateQueue=t}else D.add(k);if(0===(p.mode&2)){p.effectTag|=64;g.effectTag&=-2981;if(1===g.tag)if(null===g.alternate)g.tag=17;else{var y=wg(1073741823,null);y.tag=2;xg(g,y)}g.expirationTime=1073741823;
break a}h=void 0;g=b;var A=e.pingCache;null===A?(A=e.pingCache=new Wi,h=new Set,A.set(k,h)):(h=A.get(k),void 0===h&&(h=new Set,A.set(k,h)));if(!h.has(g)){h.add(g);var q=Oj.bind(null,e,k,g);k.then(q,q)}p.effectTag|=4096;p.expirationTime=b;break a}p=p.return}while(null!==p);h=Error((pb(g.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+qb(g))}S!==
jj&&(S=ij);h=Ai(h,g);p=f;do{switch(p.tag){case 3:k=h;p.effectTag|=4096;p.expirationTime=b;var B=Xi(p,k,b);yg(p,B);break a;case 1:k=h;var w=p.type,ub=p.stateNode;if(0===(p.effectTag&64)&&("function"===typeof w.getDerivedStateFromError||null!==ub&&"function"===typeof ub.componentDidCatch&&(null===aj||!aj.has(ub)))){p.effectTag|=4096;p.expirationTime=b;var vb=$i(p,k,b);yg(p,vb);break a}}p=p.return}while(null!==p)}X=Pj(X)}catch(Xc){b=Xc;continue}break}while(1)}
function Fj(){var a=cj.current;cj.current=sh;return null===a?sh:a}function Ag(a,b){a<lj&&2<a&&(lj=a);null!==b&&a<mj&&2<a&&(mj=a,nj=b)}function Bg(a){a>wi&&(wi=a)}function Kj(){for(;null!==X;)X=Qj(X)}function Gj(){for(;null!==X&&!Uf();)X=Qj(X)}function Qj(a){var b=Rj(a.alternate,a,U);a.memoizedProps=a.pendingProps;null===b&&(b=Pj(a));dj.current=null;return b}
function Pj(a){X=a;do{var b=X.alternate;a=X.return;if(0===(X.effectTag&2048)){b=si(b,X,U);if(1===U||1!==X.childExpirationTime){for(var c=0,d=X.child;null!==d;){var e=d.expirationTime,f=d.childExpirationTime;e>c&&(c=e);f>c&&(c=f);d=d.sibling}X.childExpirationTime=c}if(null!==b)return b;null!==a&&0===(a.effectTag&2048)&&(null===a.firstEffect&&(a.firstEffect=X.firstEffect),null!==X.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=X.firstEffect),a.lastEffect=X.lastEffect),1<X.effectTag&&(null!==
a.lastEffect?a.lastEffect.nextEffect=X:a.firstEffect=X,a.lastEffect=X))}else{b=zi(X);if(null!==b)return b.effectTag&=2047,b;null!==a&&(a.firstEffect=a.lastEffect=null,a.effectTag|=2048)}b=X.sibling;if(null!==b)return b;X=a}while(null!==X);S===ti&&(S=jj);return null}function Ij(a){var b=a.expirationTime;a=a.childExpirationTime;return b>a?b:a}function Jj(a){var b=ag();cg(99,Sj.bind(null,a,b));return null}
function Sj(a,b){do Dj();while(null!==rj);if((W&(fj|gj))!==V)throw Error(u(327));var c=a.finishedWork,d=a.finishedExpirationTime;if(null===c)return null;a.finishedWork=null;a.finishedExpirationTime=0;if(c===a.current)throw Error(u(177));a.callbackNode=null;a.callbackExpirationTime=0;a.callbackPriority=90;a.nextKnownPendingLevel=0;var e=Ij(c);a.firstPendingTime=e;d<=a.lastSuspendedTime?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:d<=a.firstSuspendedTime&&(a.firstSuspendedTime=
d-1);d<=a.lastPingedTime&&(a.lastPingedTime=0);d<=a.lastExpiredTime&&(a.lastExpiredTime=0);a===T&&(X=T=null,U=0);1<c.effectTag?null!==c.lastEffect?(c.lastEffect.nextEffect=c,e=c.firstEffect):e=c:e=c.firstEffect;if(null!==e){var f=W;W|=gj;dj.current=null;Dd=fd;var g=xd();if(yd(g)){if("selectionStart"in g)var h={start:g.selectionStart,end:g.selectionEnd};else a:{h=(h=g.ownerDocument)&&h.defaultView||window;var k=h.getSelection&&h.getSelection();if(k&&0!==k.rangeCount){h=k.anchorNode;var l=k.anchorOffset,
m=k.focusNode;k=k.focusOffset;try{h.nodeType,m.nodeType}catch(wb){h=null;break a}var p=0,x=-1,z=-1,ca=0,D=0,t=g,y=null;b:for(;;){for(var A;;){t!==h||0!==l&&3!==t.nodeType||(x=p+l);t!==m||0!==k&&3!==t.nodeType||(z=p+k);3===t.nodeType&&(p+=t.nodeValue.length);if(null===(A=t.firstChild))break;y=t;t=A}for(;;){if(t===g)break b;y===h&&++ca===l&&(x=p);y===m&&++D===k&&(z=p);if(null!==(A=t.nextSibling))break;t=y;y=t.parentNode}t=A}h=-1===x||-1===z?null:{start:x,end:z}}else h=null}h=h||{start:0,end:0}}else h=
null;Ed={activeElementDetached:null,focusedElem:g,selectionRange:h};fd=!1;Y=e;do try{Tj()}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=e;do try{for(g=a,h=b;null!==Y;){var q=Y.effectTag;q&16&&Rb(Y.stateNode,"");if(q&128){var B=Y.alternate;if(null!==B){var w=B.ref;null!==w&&("function"===typeof w?w(null):w.current=null)}}switch(q&1038){case 2:Pi(Y);Y.effectTag&=-3;break;case 6:Pi(Y);Y.effectTag&=-3;Si(Y.alternate,Y);break;case 1024:Y.effectTag&=-1025;break;case 1028:Y.effectTag&=
-1025;Si(Y.alternate,Y);break;case 4:Si(Y.alternate,Y);break;case 8:l=Y,Mi(g,l,h),Ni(l)}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);w=Ed;B=xd();q=w.focusedElem;h=w.selectionRange;if(B!==q&&q&&q.ownerDocument&&wd(q.ownerDocument.documentElement,q)){null!==h&&yd(q)&&(B=h.start,w=h.end,void 0===w&&(w=B),"selectionStart"in q?(q.selectionStart=B,q.selectionEnd=Math.min(w,q.value.length)):(w=(B=q.ownerDocument||document)&&B.defaultView||window,w.getSelection&&
(w=w.getSelection(),l=q.textContent.length,g=Math.min(h.start,l),h=void 0===h.end?g:Math.min(h.end,l),!w.extend&&g>h&&(l=h,h=g,g=l),l=vd(q,g),m=vd(q,h),l&&m&&(1!==w.rangeCount||w.anchorNode!==l.node||w.anchorOffset!==l.offset||w.focusNode!==m.node||w.focusOffset!==m.offset)&&(B=B.createRange(),B.setStart(l.node,l.offset),w.removeAllRanges(),g>h?(w.addRange(B),w.extend(m.node,m.offset)):(B.setEnd(m.node,m.offset),w.addRange(B))))));B=[];for(w=q;w=w.parentNode;)1===w.nodeType&&B.push({element:w,left:w.scrollLeft,
top:w.scrollTop});"function"===typeof q.focus&&q.focus();for(q=0;q<B.length;q++)w=B[q],w.element.scrollLeft=w.left,w.element.scrollTop=w.top}fd=!!Dd;Ed=Dd=null;a.current=c;Y=e;do try{for(q=a;null!==Y;){var ub=Y.effectTag;ub&36&&Ji(q,Y.alternate,Y);if(ub&128){B=void 0;var vb=Y.ref;if(null!==vb){var Xc=Y.stateNode;switch(Y.tag){case 5:B=Xc;break;default:B=Xc}"function"===typeof vb?vb(B):vb.current=B}}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=
null;Vf();W=f}else a.current=c;if(qj)qj=!1,rj=a,sj=b;else for(Y=e;null!==Y;)b=Y.nextEffect,Y.nextEffect=null,Y=b;b=a.firstPendingTime;0===b&&(aj=null);1073741823===b?a===vj?uj++:(uj=0,vj=a):uj=0;"function"===typeof Uj&&Uj(c.stateNode,d);Z(a);if(Yi)throw Yi=!1,a=Zi,Zi=null,a;if((W&ej)!==V)return null;gg();return null}function Tj(){for(;null!==Y;){var a=Y.effectTag;0!==(a&256)&&Gi(Y.alternate,Y);0===(a&512)||qj||(qj=!0,dg(97,function(){Dj();return null}));Y=Y.nextEffect}}
function Dj(){if(90!==sj){var a=97<sj?97:sj;sj=90;return cg(a,Vj)}}function Vj(){if(null===rj)return!1;var a=rj;rj=null;if((W&(fj|gj))!==V)throw Error(u(331));var b=W;W|=gj;for(a=a.current.firstEffect;null!==a;){try{var c=a;if(0!==(c.effectTag&512))switch(c.tag){case 0:case 11:case 15:case 22:Hi(5,c),Ii(5,c)}}catch(d){if(null===a)throw Error(u(330));Ei(a,d)}c=a.nextEffect;a.nextEffect=null;a=c}W=b;gg();return!0}
function Wj(a,b,c){b=Ai(c,b);b=Xi(a,b,1073741823);xg(a,b);a=xj(a,1073741823);null!==a&&Z(a)}function Ei(a,b){if(3===a.tag)Wj(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){Wj(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===aj||!aj.has(d))){a=Ai(b,a);a=$i(c,a,1073741823);xg(c,a);c=xj(c,1073741823);null!==c&&Z(c);break}}c=c.return}}
function Oj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);T===a&&U===c?S===vi||S===ui&&1073741823===lj&&$f()-Ti<pj?Ej(a,U):oj=!0:Aj(a,c)&&(b=a.lastPingedTime,0!==b&&b<c||(a.lastPingedTime=c,Z(a)))}function Vi(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=Gg(),b=Hg(b,a,null));a=xj(a,b);null!==a&&Z(a)}var Rj;
Rj=function(a,b,c){var d=b.expirationTime;if(null!==a){var e=b.pendingProps;if(a.memoizedProps!==e||K.current)rg=!0;else{if(d<c){rg=!1;switch(b.tag){case 3:hi(b);Xh();break;case 5:fh(b);if(b.mode&4&&1!==c&&e.hidden)return b.expirationTime=b.childExpirationTime=1,null;break;case 1:L(b.type)&&Gf(b);break;case 4:dh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;e=b.type._context;I(jg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;
if(0!==d&&d>=c)return ji(a,b,c);I(M,M.current&1);b=$h(a,b,c);return null!==b?b.sibling:null}I(M,M.current&1);break;case 19:d=b.childExpirationTime>=c;if(0!==(a.effectTag&64)){if(d)return mi(a,b,c);b.effectTag|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null);I(M,M.current);if(!d)return null}return $h(a,b,c)}rg=!1}}else rg=!1;b.expirationTime=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;e=Cf(b,J.current);qg(b,c);e=oh(null,
b,d,a,e,c);b.effectTag|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(L(d)){var f=!0;Gf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;ug(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Fg(b,d,g,a);e.updater=Jg;b.stateNode=e;e._reactInternalFiber=b;Ng(b,d,a,c);b=gi(null,b,d,!0,f,c)}else b.tag=0,R(null,b,e,c),b=b.child;return b;case 16:a:{e=b.elementType;null!==a&&(a.alternate=
null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;ob(e);if(1!==e._status)throw e._result;e=e._result;b.type=e;f=b.tag=Xj(e);a=ig(e,a);switch(f){case 0:b=di(null,b,e,a,c);break a;case 1:b=fi(null,b,e,a,c);break a;case 11:b=Zh(null,b,e,a,c);break a;case 14:b=ai(null,b,e,ig(e.type,a),d,c);break a}throw Error(u(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),di(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),fi(a,b,d,e,c);
case 3:hi(b);d=b.updateQueue;if(null===a||null===d)throw Error(u(282));d=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;vg(a,b);zg(b,d,null,c);d=b.memoizedState.element;if(d===e)Xh(),b=$h(a,b,c);else{if(e=b.stateNode.hydrate)Ph=Jd(b.stateNode.containerInfo.firstChild),Oh=b,e=Qh=!0;if(e)for(c=Yg(b,null,d,c),b.child=c;c;)c.effectTag=c.effectTag&-3|1024,c=c.sibling;else R(a,b,d,c),Xh();b=b.child}return b;case 5:return fh(b),null===a&&Uh(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:
null,g=e.children,Gd(d,e)?g=null:null!==f&&Gd(d,f)&&(b.effectTag|=16),ei(a,b),b.mode&4&&1!==c&&e.hidden?(b.expirationTime=b.childExpirationTime=1,b=null):(R(a,b,g,c),b=b.child),b;case 6:return null===a&&Uh(b),null;case 13:return ji(a,b,c);case 4:return dh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Xg(b,null,d,c):R(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),Zh(a,b,d,e,c);case 7:return R(a,b,b.pendingProps,c),b.child;case 8:return R(a,
b,b.pendingProps.children,c),b.child;case 12:return R(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(jg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=$e(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!K.current){b=$h(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==
k){g=h.child;for(var l=k.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=wg(c,null),l.tag=2,xg(h,l));h.expirationTime<c&&(h.expirationTime=c);l=h.alternate;null!==l&&l.expirationTime<c&&(l.expirationTime=c);pg(h.return,c);k.expirationTime<c&&(k.expirationTime=c);break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=
g}R(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,qg(b,c),e=sg(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,R(a,b,d,c),b.child;case 14:return e=b.type,f=ig(e,b.pendingProps),f=ig(e.type,f),ai(a,b,e,f,d,c);case 15:return ci(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,L(d)?(a=!0,Gf(b)):a=!1,qg(b,c),Lg(b,d,e),Ng(b,d,e,c),gi(null,
b,d,!0,a,c);case 19:return mi(a,b,c)}throw Error(u(156,b.tag));};var Uj=null,Li=null;function Yj(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);Uj=function(a){try{b.onCommitFiberRoot(c,a,void 0,64===(a.current.effectTag&64))}catch(e){}};Li=function(a){try{b.onCommitFiberUnmount(c,a)}catch(e){}}}catch(d){}return!0}
function Zj(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null}function Sh(a,b,c,d){return new Zj(a,b,c,d)}
function bi(a){a=a.prototype;return!(!a||!a.isReactComponent)}function Xj(a){if("function"===typeof a)return bi(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===gb)return 11;if(a===jb)return 14}return 2}
function Sg(a,b){var c=a.alternate;null===c?(c=Sh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{expirationTime:b.expirationTime,
firstContext:b.firstContext,responders:b.responders};c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
function Ug(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)bi(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ab:return Wg(c.children,e,f,b);case fb:g=8;e|=7;break;case bb:g=8;e|=1;break;case cb:return a=Sh(12,c,b,e|8),a.elementType=cb,a.type=cb,a.expirationTime=f,a;case hb:return a=Sh(13,c,b,e),a.type=hb,a.elementType=hb,a.expirationTime=f,a;case ib:return a=Sh(19,c,b,e),a.elementType=ib,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case db:g=
10;break a;case eb:g=9;break a;case gb:g=11;break a;case jb:g=14;break a;case kb:g=16;d=null;break a;case lb:g=22;break a}throw Error(u(130,null==a?a:typeof a,""));}b=Sh(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function Wg(a,b,c,d){a=Sh(7,a,d,b);a.expirationTime=c;return a}function Tg(a,b,c){a=Sh(6,a,null,b);a.expirationTime=c;return a}
function Vg(a,b,c){b=Sh(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
function ak(a,b,c){this.tag=b;this.current=null;this.containerInfo=a;this.pingCache=this.pendingChildren=null;this.finishedExpirationTime=0;this.finishedWork=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=90;this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}
function Aj(a,b){var c=a.firstSuspendedTime;a=a.lastSuspendedTime;return 0!==c&&c>=b&&a<=b}function xi(a,b){var c=a.firstSuspendedTime,d=a.lastSuspendedTime;c<b&&(a.firstSuspendedTime=b);if(d>b||0===c)a.lastSuspendedTime=b;b<=a.lastPingedTime&&(a.lastPingedTime=0);b<=a.lastExpiredTime&&(a.lastExpiredTime=0)}
function yi(a,b){b>a.firstPendingTime&&(a.firstPendingTime=b);var c=a.firstSuspendedTime;0!==c&&(b>=c?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:b>=a.lastSuspendedTime&&(a.lastSuspendedTime=b+1),b>a.nextKnownPendingLevel&&(a.nextKnownPendingLevel=b))}function Cj(a,b){var c=a.lastExpiredTime;if(0===c||c>b)a.lastExpiredTime=b}
function bk(a,b,c,d){var e=b.current,f=Gg(),g=Dg.suspense;f=Hg(f,e,g);a:if(c){c=c._reactInternalFiber;b:{if(dc(c)!==c||1!==c.tag)throw Error(u(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(L(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(u(171));}if(1===c.tag){var k=c.type;if(L(k)){c=Ff(c,k,h);break a}}c=h}else c=Af;null===b.context?b.context=c:b.pendingContext=c;b=wg(f,g);b.payload={element:a};d=void 0===
d?null:d;null!==d&&(b.callback=d);xg(e,b);Ig(e,f);return f}function ck(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function dk(a,b){a=a.memoizedState;null!==a&&null!==a.dehydrated&&a.retryTime<b&&(a.retryTime=b)}function ek(a,b){dk(a,b);(a=a.alternate)&&dk(a,b)}
function fk(a,b,c){c=null!=c&&!0===c.hydrate;var d=new ak(a,b,c),e=Sh(3,null,null,2===b?7:1===b?3:0);d.current=e;e.stateNode=d;ug(e);a[Od]=d.current;c&&0!==b&&Jc(a,9===a.nodeType?a:a.ownerDocument);this._internalRoot=d}fk.prototype.render=function(a){bk(a,this._internalRoot,null,null)};fk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;bk(null,a,null,function(){b[Od]=null})};
function gk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function hk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new fk(a,0,b?{hydrate:!0}:void 0)}
function ik(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=ck(g);h.call(a)}}bk(b,g,a,e)}else{f=c._reactRootContainer=hk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=ck(g);k.call(a)}}Nj(function(){bk(b,g,a,e)})}return ck(g)}function jk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:$a,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
wc=function(a){if(13===a.tag){var b=hg(Gg(),150,100);Ig(a,b);ek(a,b)}};xc=function(a){13===a.tag&&(Ig(a,3),ek(a,3))};yc=function(a){if(13===a.tag){var b=Gg();b=Hg(b,a,null);Ig(a,b);ek(a,b)}};
za=function(a,b,c){switch(b){case "input":Cb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Qd(d);if(!e)throw Error(u(90));yb(d);Cb(d,e)}}}break;case "textarea":Kb(a,c);break;case "select":b=c.value,null!=b&&Hb(a,!!c.multiple,b,!1)}};Fa=Mj;
Ga=function(a,b,c,d,e){var f=W;W|=4;try{return cg(98,a.bind(null,b,c,d,e))}finally{W=f,W===V&&gg()}};Ha=function(){(W&(1|fj|gj))===V&&(Lj(),Dj())};Ia=function(a,b){var c=W;W|=2;try{return a(b)}finally{W=c,W===V&&gg()}};function kk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!gk(b))throw Error(u(200));return jk(a,b,null,c)}var lk={Events:[Nc,Pd,Qd,xa,ta,Xd,function(a){jc(a,Wd)},Da,Ea,id,mc,Dj,{current:!1}]};
(function(a){var b=a.findFiberByHostInstance;return Yj(n({},a,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Wa.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=hc(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))})({findFiberByHostInstance:tc,bundleType:0,version:"16.14.0",
rendererPackageName:"react-dom"});__webpack_unused_export__=lk;__webpack_unused_export__=kk;__webpack_unused_export__=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;if(void 0===b){if("function"===typeof a.render)throw Error(u(188));throw Error(u(268,Object.keys(a)));}a=hc(b);a=null===a?null:a.stateNode;return a};
__webpack_unused_export__=function(a,b){if((W&(fj|gj))!==V)throw Error(u(187));var c=W;W|=1;try{return cg(99,a.bind(null,b))}finally{W=c,gg()}};__webpack_unused_export__=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!0,c)};exports.render=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!1,c)};
__webpack_unused_export__=function(a){if(!gk(a))throw Error(u(40));return a._reactRootContainer?(Nj(function(){ik(null,null,a,!1,function(){a._reactRootContainer=null;a[Od]=null})}),!0):!1};__webpack_unused_export__=Mj;__webpack_unused_export__=function(a,b){return kk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};
__webpack_unused_export__=function(a,b,c,d){if(!gk(c))throw Error(u(200));if(null==a||void 0===a._reactInternalFiber)throw Error(u(38));return ik(a,b,c,!1,d)};__webpack_unused_export__="16.14.0";


/***/ }),

/***/ 3935:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (false) {}
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (true) {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(4448);
} else {}


/***/ }),

/***/ 2408:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var l=__webpack_require__(7418),n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.forward_ref"):60112,y=n?Symbol.for("react.suspense"):60113,z=n?Symbol.for("react.memo"):60115,A=n?Symbol.for("react.lazy"):
60116,B="function"===typeof Symbol&&Symbol.iterator;function C(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
var D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,"setState")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};
function G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};
function M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=""+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}
function N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return"object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}
function S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}
function T(a,b,c,e){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,""===b?"."+U(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||"object"!==typeof a?f=null:(f=B&&a[B]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),k=
0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if("object"===d)throw c=""+a,Error(C(31,"[object Object]"===c?"object with keys {"+Object.keys(a).join(", ")+"}":c,""));return g}function V(a,b,c){return null==a?0:T(a,"",b,c)}function U(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}
function aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(P,"$&/")+"/")+c)),e.push(a))}function X(a,b,c,e,d){var g="";null!=c&&(g=(""+c).replace(P,"$&/")+"/");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}
var ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};
exports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;
exports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,
key:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;
exports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};
exports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version="16.14.0";


/***/ }),

/***/ 7294:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (true) {
  module.exports = __webpack_require__(2408);
} else {}


/***/ }),

/***/ 53:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var window = __webpack_require__(6738);
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var f,g,h,k,l;
if("undefined"===typeof window||"function"!==typeof MessageChannel){var p=null,q=null,t=function(){if(null!==p)try{var a=exports.unstable_now();p(!0,a);p=null}catch(b){throw setTimeout(t,0),b;}},u=Date.now();exports.unstable_now=function(){return Date.now()-u};f=function(a){null!==p?setTimeout(f,0,a):(p=a,setTimeout(t,0))};g=function(a,b){q=setTimeout(a,b)};h=function(){clearTimeout(q)};k=function(){return!1};l=exports.unstable_forceFrameRate=function(){}}else{var w=window.performance,x=window.Date,
y=window.setTimeout,z=window.clearTimeout;if("undefined"!==typeof console){var A=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");"function"!==typeof A&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"===
typeof w&&"function"===typeof w.now)exports.unstable_now=function(){return w.now()};else{var B=x.now();exports.unstable_now=function(){return x.now()-B}}var C=!1,D=null,E=-1,F=5,G=0;k=function(){return exports.unstable_now()>=G};l=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):F=0<a?Math.floor(1E3/a):5};var H=new MessageChannel,I=H.port2;H.port1.onmessage=
function(){if(null!==D){var a=exports.unstable_now();G=a+F;try{D(!0,a)?I.postMessage(null):(C=!1,D=null)}catch(b){throw I.postMessage(null),b;}}else C=!1};f=function(a){D=a;C||(C=!0,I.postMessage(null))};g=function(a,b){E=y(function(){a(exports.unstable_now())},b)};h=function(){z(E);E=-1}}function J(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<K(e,b))a[d]=b,a[c]=e,c=d;else break a}}function L(a){a=a[0];return void 0===a?null:a}
function M(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>K(n,c))void 0!==r&&0>K(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>K(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function K(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var N=[],O=[],P=1,Q=null,R=3,S=!1,T=!1,U=!1;
function V(a){for(var b=L(O);null!==b;){if(null===b.callback)M(O);else if(b.startTime<=a)M(O),b.sortIndex=b.expirationTime,J(N,b);else break;b=L(O)}}function W(a){U=!1;V(a);if(!T)if(null!==L(N))T=!0,f(X);else{var b=L(O);null!==b&&g(W,b.startTime-a)}}
function X(a,b){T=!1;U&&(U=!1,h());S=!0;var c=R;try{V(b);for(Q=L(N);null!==Q&&(!(Q.expirationTime>b)||a&&!k());){var d=Q.callback;if(null!==d){Q.callback=null;R=Q.priorityLevel;var e=d(Q.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?Q.callback=e:Q===L(N)&&M(N);V(b)}else M(N);Q=L(N)}if(null!==Q)var m=!0;else{var n=L(O);null!==n&&g(W,n.startTime-b);m=!1}return m}finally{Q=null,R=c,S=!1}}
function Y(a){switch(a){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}var Z=l;exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){T||S||(T=!0,f(X))};
exports.unstable_getCurrentPriorityLevel=function(){return R};exports.unstable_getFirstCallbackNode=function(){return L(N)};exports.unstable_next=function(a){switch(R){case 1:case 2:case 3:var b=3;break;default:b=R}var c=R;R=b;try{return a()}finally{R=c}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=Z;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=R;R=a;try{return b()}finally{R=c}};
exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();if("object"===typeof c&&null!==c){var e=c.delay;e="number"===typeof e&&0<e?d+e:d;c="number"===typeof c.timeout?c.timeout:Y(a)}else c=Y(a),e=d;c=e+c;a={id:P++,callback:b,priorityLevel:a,startTime:e,expirationTime:c,sortIndex:-1};e>d?(a.sortIndex=e,J(O,a),null===L(N)&&a===L(O)&&(U?h():U=!0,g(W,e-d))):(a.sortIndex=c,J(N,a),T||S||(T=!0,f(X)));return a};
exports.unstable_shouldYield=function(){var a=exports.unstable_now();V(a);var b=L(N);return b!==Q&&null!==Q&&null!==b&&null!==b.callback&&b.startTime<=a&&b.expirationTime<Q.expirationTime||k()};exports.unstable_wrapCallback=function(a){var b=R;return function(){var c=R;R=b;try{return a.apply(this,arguments)}finally{R=c}}};


/***/ }),

/***/ 3840:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (true) {
  module.exports = __webpack_require__(53);
} else {}


/***/ }),

/***/ 6738:
/***/ ((module) => {

"use strict";
module.exports = Function('return this')();

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_visual__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1207);
/* provided dependency */ var window = __webpack_require__(6738);

var powerbiKey = "powerbi";
var powerbi = window[powerbiKey];
var enlightenstorytellerE5CA73CE1C2C43878E5C0EBB4652BDD5 = {
    name: 'enlightenstorytellerE5CA73CE1C2C43878E5C0EBB4652BDD5',
    displayName: 'Enlighten Storyteller',
    class: 'Visual',
    apiVersion: '5.1.0',
    create: (options) => {
        if (_src_visual__WEBPACK_IMPORTED_MODULE_0__/* .Visual */ .u) {
            return new _src_visual__WEBPACK_IMPORTED_MODULE_0__/* .Visual */ .u(options);
        }
        throw 'Visual instance not found';
    },
    createModalDialog: (dialogId, options, initialState) => {
        const dialogRegistry = globalThis.dialogRegistry;
        if (dialogId in dialogRegistry) {
            new dialogRegistry[dialogId](options, initialState);
        }
    },
    custom: true
};
if (typeof powerbi !== "undefined") {
    powerbi.visuals = powerbi.visuals || {};
    powerbi.visuals.plugins = powerbi.visuals.plugins || {};
    powerbi.visuals.plugins["enlightenstorytellerE5CA73CE1C2C43878E5C0EBB4652BDD5"] = enlightenstorytellerE5CA73CE1C2C43878E5C0EBB4652BDD5;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (enlightenstorytellerE5CA73CE1C2C43878E5C0EBB4652BDD5);

})();

enlightenstorytellerE5CA73CE1C2C43878E5C0EBB4652BDD5 = __webpack_exports__;
/******/ })()
;